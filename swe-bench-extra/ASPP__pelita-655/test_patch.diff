diff --git a/test/test_layout.py b/test/test_layout.py
index 0039b6e2..6b15bf7d 100644
--- a/test/test_layout.py
+++ b/test/test_layout.py
@@ -402,6 +402,14 @@ def test_enemy_raises():
         #  #
         ####
         """, [None, None]), # this will set both to None
+    ("""
+        ####
+        # E#
+        ####
+        ####
+        #??#
+        ####
+        """, [(1, 1), (2, 1)]), # two enemies in two layouts with duplication and question marks
 ])
 def test_enemy_positions(layout, enemy_pos):
     if enemy_pos is None:
diff --git a/test/test_utils.py b/test/test_utils.py
new file mode 100644
index 00000000..0262fb16
--- /dev/null
+++ b/test/test_utils.py
@@ -0,0 +1,50 @@
+
+from pelita import utils
+
+import pytest
+
+@pytest.mark.parametrize('is_blue', [True, False])
+def test_setup_test_game(is_blue):
+    layout = utils.load_builtin_layout('small_without_dead_ends_001', is_blue=is_blue)
+    test_game = utils.setup_test_game(layout=layout, is_blue=is_blue)
+
+    if is_blue:
+        assert test_game.position == (1, 5)
+        assert test_game.other.position == (1, 6)
+        assert test_game.enemy[0].position == (16, 1)
+        assert test_game.enemy[1].position == (16, 2)
+    else:
+        assert test_game.position == (16, 2)
+        assert test_game.other.position == (16, 1)
+        assert test_game.enemy[0].position == (1, 5)
+        assert test_game.enemy[1].position == (1, 6)
+
+    # load_builtin_layout loads unnoised enemies
+    assert test_game.enemy[0].is_noisy is False
+    assert test_game.enemy[1].is_noisy is False
+
+
+@pytest.mark.parametrize('is_blue', [True, False])
+def test_setup_test_game(is_blue):
+    # Test that is_noisy is set properly
+    layout = """
+    ##################
+    #. ... .##.     ?#
+    # # #  .  .### # #
+    # # ##. E .      #
+    #      .   .## # #
+    #0# ###.  .  # # #
+    #1     .##. ... .#
+    ##################
+    """
+    test_game = utils.setup_test_game(layout=layout, is_blue=is_blue)
+
+    assert test_game.position == (1, 5)
+    assert test_game.other.position == (1, 6)
+    assert test_game.enemy[0].position == (8, 3)
+    assert test_game.enemy[1].position == (16, 1)
+
+    # load_builtin_layout loads unnoised enemies
+    assert test_game.enemy[0].is_noisy is False
+    assert test_game.enemy[1].is_noisy is True
+
