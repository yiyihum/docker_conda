diff --git a/dandi/cli/cmd_ls.py b/dandi/cli/cmd_ls.py
index 4ca3fa06..e0196ac4 100644
--- a/dandi/cli/cmd_ls.py
+++ b/dandi/cli/cmd_ls.py
@@ -33,7 +33,7 @@ List .nwb files and dandisets metadata.
     "--format",
     help="Choose the format/frontend for output. If 'auto', 'pyout' will be "
     "used in case of multiple files, and 'yaml' for a single file.",
-    type=click.Choice(["auto", "pyout", "json", "json_pp", "yaml"]),
+    type=click.Choice(["auto", "pyout", "json", "json_pp", "json_lines", "yaml"]),
     default="auto",
 )
 @click.option(
@@ -66,7 +66,12 @@ def ls(paths, schema, metadata, fields=None, format="auto", recursive=False, job
     """ List .nwb files and dandisets metadata. """
 
     # TODO: more logical ordering in case of fields = None
-    from .formatter import JSONFormatter, PYOUTFormatter, YAMLFormatter
+    from .formatter import (
+        JSONFormatter,
+        JSONLinesFormatter,
+        PYOUTFormatter,
+        YAMLFormatter,
+    )
     from ..consts import metadata_all_fields
 
     # TODO: avoid
@@ -144,6 +149,8 @@ def ls(paths, schema, metadata, fields=None, format="auto", recursive=False, job
         out = JSONFormatter()
     elif format == "json_pp":
         out = JSONFormatter(indent=2)
+    elif format == "json_lines":
+        out = JSONLinesFormatter()
     elif format == "yaml":
         out = YAMLFormatter()
     else:
diff --git a/dandi/cli/formatter.py b/dandi/cli/formatter.py
index 712a32dd..1e831050 100644
--- a/dandi/cli/formatter.py
+++ b/dandi/cli/formatter.py
@@ -22,21 +22,57 @@ class JSONFormatter(Formatter):
     def __init__(self, indent=None, out=None):
         self.out = out or sys.stdout
         self.indent = indent
+        self.first = True
 
     @staticmethod
     def _serializer(o):
         if isinstance(o, datetime.datetime):
-            return o.__str__()
+            return str(o)
+        return o
+
+    def __enter__(self):
+        print("[", end="", file=self.out)
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        if not self.first:
+            print(file=self.out)
+        print("]", file=self.out)
+
+    def __call__(self, rec):
+        import json
+        from textwrap import indent
+
+        if self.first:
+            print(file=self.out)
+            self.first = False
+        else:
+            print(",", file=self.out)
+
+        s = json.dumps(
+            rec, indent=self.indent, sort_keys=True, default=self._serializer
+        )
+        print(indent(s, " " * (self.indent or 2)), end="", file=self.out)
+
+
+class JSONLinesFormatter(Formatter):
+    def __init__(self, indent=None, out=None):
+        self.out = out or sys.stdout
+        self.indent = indent
+
+    @staticmethod
+    def _serializer(o):
+        if isinstance(o, datetime.datetime):
+            return str(o)
         return o
 
     def __call__(self, rec):
         import json
 
-        self.out.write(
+        print(
             json.dumps(
                 rec, indent=self.indent, sort_keys=True, default=self._serializer
-            )
-            + "\n"
+            ),
+            file=self.out,
         )
 
 

