diff --git a/dandi/cli/tests/test_formatter.py b/dandi/cli/tests/test_formatter.py
new file mode 100644
index 00000000..1493b9d1
--- /dev/null
+++ b/dandi/cli/tests/test_formatter.py
@@ -0,0 +1,67 @@
+from io import StringIO
+
+import pytest
+
+from ..formatter import JSONFormatter, JSONLinesFormatter
+
+
+def test_json_formatter():
+    out = StringIO()
+    fmtr = JSONFormatter(out=out)
+    with fmtr:
+        fmtr({"foo": 23, "bar": 42})
+        fmtr({"bar": "gnusto", "foo": "cleesh"})
+    assert out.getvalue() == (
+        "[\n"
+        '  {"bar": 42, "foo": 23},\n'
+        '  {"bar": "gnusto", "foo": "cleesh"}\n'
+        "]\n"
+    )
+
+
+def test_json_formatter_indented():
+    out = StringIO()
+    fmtr = JSONFormatter(indent=2, out=out)
+    with fmtr:
+        fmtr({"foo": 23, "bar": 42})
+        fmtr({"bar": "gnusto", "foo": "cleesh"})
+    assert out.getvalue() == (
+        "[\n"
+        "  {\n"
+        '    "bar": 42,\n'
+        '    "foo": 23\n'
+        "  },\n"
+        "  {\n"
+        '    "bar": "gnusto",\n'
+        '    "foo": "cleesh"\n'
+        "  }\n"
+        "]\n"
+    )
+
+
+@pytest.mark.parametrize("indent", [None, 2])
+def test_json_formatter_empty(indent):
+    out = StringIO()
+    fmtr = JSONFormatter(indent=indent, out=out)
+    with fmtr:
+        pass
+    assert out.getvalue() == "[]\n"
+
+
+def test_json_lines_formatter():
+    out = StringIO()
+    fmtr = JSONLinesFormatter(out=out)
+    with fmtr:
+        fmtr({"foo": 23, "bar": 42})
+        fmtr({"bar": "gnusto", "foo": "cleesh"})
+    assert out.getvalue() == (
+        '{"bar": 42, "foo": 23}\n{"bar": "gnusto", "foo": "cleesh"}\n'
+    )
+
+
+def test_json_lines_formatter_empty():
+    out = StringIO()
+    fmtr = JSONLinesFormatter(out=out)
+    with fmtr:
+        pass
+    assert out.getvalue() == ""
diff --git a/dandi/cli/tests/test_ls.py b/dandi/cli/tests/test_ls.py
index 205147ae..6167e55a 100644
--- a/dandi/cli/tests/test_ls.py
+++ b/dandi/cli/tests/test_ls.py
@@ -1,3 +1,5 @@
+import json
+
 from click.testing import CliRunner
 import pytest
 
@@ -5,7 +7,9 @@ from ..command import ls
 from ...utils import yaml_load
 
 
-@pytest.mark.parametrize("format", ("auto", "json", "json_pp", "yaml", "pyout"))
+@pytest.mark.parametrize(
+    "format", ("auto", "json", "json_pp", "json_lines", "yaml", "pyout")
+)
 def test_smoke(simple1_nwb_metadata, simple1_nwb, format):
     runner = CliRunner()
     r = runner.invoke(ls, ["-f", format, simple1_nwb])
@@ -13,10 +17,15 @@ def test_smoke(simple1_nwb_metadata, simple1_nwb, format):
     # we would need to redirect pyout for its analysis
     out = r.stdout
 
-    if format.startswith("json"):
-        import json
-
+    if format == "json_lines":
         load = json.loads
+    elif format.startswith("json"):
+
+        def load(s):
+            obj = json.loads(s)
+            assert len(obj) == 1  # will be a list with a single elem
+            return obj[0]
+
     elif format == "yaml":
 
         def load(s):
