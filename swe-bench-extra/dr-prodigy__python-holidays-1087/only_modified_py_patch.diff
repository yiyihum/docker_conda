diff --git a/holidays/__init__.py b/holidays/__init__.py
index bc268a05..294c676e 100644
--- a/holidays/__init__.py
+++ b/holidays/__init__.py
@@ -10,9 +10,12 @@
 #  License: MIT (see LICENSE file)
 
 from holidays.constants import *
-from holidays.countries import *
-from holidays.financial import *
 from holidays.holiday_base import *
+from holidays.registry import EntityLoader
 from holidays.utils import *
 
 __version__ = "0.25"
+
+
+EntityLoader.load("countries", globals())
+EntityLoader.load("financial", globals())
diff --git a/holidays/utils.py b/holidays/utils.py
index 0c527f8e..8df9d96a 100755
--- a/holidays/utils.py
+++ b/holidays/utils.py
@@ -17,13 +17,12 @@ __all__ = (
     "list_supported_financial",
 )
 
-import inspect
 import warnings
 from functools import lru_cache
 from typing import Dict, Iterable, List, Optional, Union
 
-from holidays import countries, financial
 from holidays.holiday_base import HolidayBase
+from holidays.registry import EntityLoader
 
 
 def country_holidays(
@@ -176,8 +175,10 @@ def country_holidays(
     :class:`HolidayBase` class and define your own :meth:`_populate` method.
     See documentation for examples.
     """
+    import holidays
+
     try:
-        return getattr(countries, country)(
+        return getattr(holidays, country)(
             years=years,
             subdiv=subdiv,
             expand=expand,
@@ -238,8 +239,10 @@ def financial_holidays(
     See :py:func:`country_holidays` documentation for further details and
     examples.
     """
+    import holidays
+
     try:
-        return getattr(financial, market)(
+        return getattr(holidays, market)(
             years=years,
             subdiv=subdiv,
             expand=expand,
@@ -286,10 +289,11 @@ def list_supported_countries(include_aliases=True) -> Dict[str, List[str]]:
         A dictionary where the key is the ISO 3166-1 Alpha-2 country codes and
         the value is a list of supported subdivision codes.
     """
+    import holidays
+
     return {
-        name if include_aliases else cls.country: list(cls.subdivisions)
-        for name, cls in inspect.getmembers(countries, inspect.isclass)
-        if len(name) == 2 and issubclass(cls, HolidayBase)
+        country_code: list(getattr(holidays, country_code).subdivisions)
+        for country_code in EntityLoader.get_country_codes(include_aliases)
     }
 
 
@@ -305,8 +309,9 @@ def list_supported_financial(include_aliases=True) -> Dict[str, List[str]]:
         A dictionary where the key is the market codes and
         the value is a list of supported subdivision codes.
     """
+    import holidays
+
     return {
-        name if include_aliases else cls.market: list(cls.subdivisions)
-        for name, cls in inspect.getmembers(financial, inspect.isclass)
-        if len(name) in {3, 4} and issubclass(cls, HolidayBase)
+        financial_code: list(getattr(holidays, financial_code).subdivisions)
+        for financial_code in EntityLoader.get_financial_codes(include_aliases)
     }

