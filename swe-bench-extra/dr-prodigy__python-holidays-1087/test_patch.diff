diff --git a/tests/test_holiday_base.py b/tests/test_holiday_base.py
index 5d4af3e9..7bfa8ae4 100644
--- a/tests/test_holiday_base.py
+++ b/tests/test_holiday_base.py
@@ -20,7 +20,7 @@ from dateutil.relativedelta import MO
 from dateutil.relativedelta import relativedelta as rd
 
 import holidays
-from holidays.constants import JAN, FEB, MON, TUE, SAT, SUN
+from holidays.constants import JAN, FEB, OCT, MON, TUE, SAT, SUN
 
 
 class TestBasics(unittest.TestCase):
@@ -449,10 +449,10 @@ class TestBasics(unittest.TestCase):
         self.assertRaises(TypeError, lambda: 1 + holidays.US())
 
     def test_inheritance(self):
-        class NoColumbusHolidays(holidays.US):
+        class NoColumbusHolidays(holidays.countries.US):
             def _populate(self, year):
-                holidays.US._populate(self, year)
-                self.pop(date(year, 10, 1) + rd(weekday=MO(+2)))
+                super()._populate(year)
+                self.pop(date(year, OCT, 1) + rd(weekday=MO(+2)))
 
         hdays = NoColumbusHolidays()
         self.assertIn(date(2014, 10, 13), self.holidays)
@@ -462,9 +462,9 @@ class TestBasics(unittest.TestCase):
         self.assertNotIn(date(2020, 10, 12), hdays)
         self.assertIn(date(2020, 1, 1), hdays)
 
-        class NinjaTurtlesHolidays(holidays.US):
+        class NinjaTurtlesHolidays(holidays.countries.US):
             def _populate(self, year):
-                holidays.US._populate(self, year)
+                super()._populate(year)
                 self[date(year, 7, 13)] = "Ninja Turtle's Day"
 
         hdays = NinjaTurtlesHolidays()
diff --git a/tests/test_registry.py b/tests/test_registry.py
new file mode 100644
index 00000000..66b93f6f
--- /dev/null
+++ b/tests/test_registry.py
@@ -0,0 +1,112 @@
+#  python-holidays
+#  ---------------
+#  A fast, efficient Python library for generating country, province and state
+#  specific sets of holidays on the fly. It aims to make determining whether a
+#  specific date is a holiday as fast and flexible as possible.
+#
+#  Authors: dr-prodigy <dr.prodigy.github@gmail.com> (c) 2017-2023
+#           ryanss <ryanssdev@icloud.com> (c) 2014-2017
+#  Website: https://github.com/dr-prodigy/python-holidays
+#  License: MIT (see LICENSE file)
+
+import importlib
+import inspect
+import warnings
+from unittest import TestCase
+
+from holidays import countries, financial, registry
+
+
+class TestEntityLoader(TestCase):
+    # TODO(ark): consider running this just once for the latest Python version.
+    def test_countries_imports(self):
+        warnings.simplefilter("ignore")
+
+        import holidays
+
+        loader_entities = set()
+        for module, entities in registry.COUNTRIES.items():
+            module = importlib.import_module(f"holidays.countries.{module}")
+            for entity in entities:
+                countries_cls = getattr(countries, entity)
+                loader_cls = getattr(holidays, entity)
+                module_cls = getattr(module, entity)
+
+                self.assertIsNotNone(countries_cls, entity)
+                self.assertIsNotNone(loader_cls, entity)
+                self.assertIsNotNone(module_cls, entity)
+                self.assertEqual(countries_cls, module_cls)
+                self.assertTrue(isinstance(loader_cls, registry.EntityLoader))
+                self.assertTrue(isinstance(loader_cls(), countries_cls))
+                self.assertTrue(isinstance(loader_cls(), module_cls))
+
+                loader_entities.add(loader_cls.__name__)
+
+        countries_entities = set(
+            entity[0]
+            for entity in inspect.getmembers(countries, inspect.isclass)
+        )
+        self.assertEqual(
+            countries_entities,
+            loader_entities,
+            "Registry entities and countries entities don't match: %s"
+            % countries_entities.difference(loader_entities),
+        )
+
+    def test_country_str(self):
+        self.assertEqual(
+            str(
+                registry.EntityLoader(
+                    "holidays.countries.united_states.US",
+                )
+            ),
+            "A lazy loader for <class 'holidays.countries.united_states.US'>. "
+            "For inheritance please use the "
+            "'holidays.countries.united_states.US' class directly.",
+        )
+
+    # TODO(ark): consider running this just once for the latest Python version.
+    def test_financial_imports(self):
+        import holidays
+
+        loader_entities = set()
+        for module, entities in registry.FINANCIAL.items():
+            module = importlib.import_module(f"holidays.financial.{module}")
+            for entity in entities:
+                financial_cls = getattr(financial, entity)
+                loader_cls = getattr(holidays, entity)
+                module_cls = getattr(module, entity)
+
+                self.assertIsNotNone(financial_cls, entity)
+                self.assertIsNotNone(loader_cls, entity)
+                self.assertIsNotNone(module_cls, entity)
+                self.assertEqual(financial_cls, module_cls)
+                self.assertTrue(isinstance(loader_cls, registry.EntityLoader))
+                self.assertTrue(isinstance(loader_cls(), financial_cls))
+                self.assertTrue(isinstance(loader_cls(), module_cls))
+
+                loader_entities.add(loader_cls.__name__)
+
+        financial_entities = set(
+            entity[0]
+            for entity in inspect.getmembers(financial, inspect.isclass)
+        )
+        self.assertEqual(
+            financial_entities,
+            loader_entities,
+            "Registry entities and financial entities don't match: %s"
+            % financial_entities.difference(loader_entities),
+        )
+
+    def test_financial_str(self):
+        self.assertEqual(
+            str(
+                registry.EntityLoader(
+                    "holidays.financial.ny_stock_exchange.NYSE"
+                )
+            ),
+            "A lazy loader for "
+            "<class 'holidays.financial.ny_stock_exchange.NYSE'>. "
+            "For inheritance please use the "
+            "'holidays.financial.ny_stock_exchange.NYSE' class directly.",
+        )
