diff --git a/era5cli/cli.py b/era5cli/cli.py
index a13ce9c..4dc2de2 100644
--- a/era5cli/cli.py
+++ b/era5cli/cli.py
@@ -5,6 +5,8 @@ import argparse
 import textwrap
 import sys
 
+from datetime import datetime
+
 import era5cli.inputref as ref
 import era5cli.info as einfo
 import era5cli.fetch as efetch
@@ -127,6 +129,17 @@ def _build_parser():
                              ''')
     )
 
+    common.add_argument(
+        "--prelimbe", action="store_true", default=False,
+        help=textwrap.dedent('''\
+                             Whether to download the preliminary back extension
+                             (1950-1978). Providing the
+                             "--prelimbe" argument downloads data from
+                             the preliminary back extension.
+
+                             ''')
+    )
+
     mnth = argparse.ArgumentParser(add_help=False)
 
     mnth.add_argument(
@@ -271,6 +284,32 @@ def _run_info(args):
         return True
 
 
+def _construct_year_list(args):
+    if not args.endyear:
+        endyear = args.startyear
+    else:
+        endyear = args.endyear
+
+    # check whether correct years have been entered
+    for year in (args.startyear, endyear):
+        if args.prelimbe:
+            assert 1950 <= year <= 1978, (
+                'year should be between 1950 and 1978'
+            )
+        else:
+            assert 1979 <= year <= datetime.now().year, (
+                'year should be between 1979 and present'
+            )
+
+    assert endyear >= args.startyear, (
+        'endyear should be >= startyear or None')
+
+    # make list of years to be downloaded
+    years = list(range(args.startyear, endyear + 1))
+
+    return years
+
+
 def _set_period_args(args):
     # set subroutine specific arguments for monthly and hourly fetch
     if args.command == "monthly":
@@ -288,6 +327,11 @@ def _set_period_args(args):
     elif args.command == "hourly":
         synoptic = None
         statistics = args.statistics
+        if statistics:
+            assert args.ensemble, (
+                "Statistics can only be computed over an ensemble, "
+                "add --ensemble or remove --statistics."
+                )
         days = args.days
         hours = args.hours
     else:
@@ -305,30 +349,26 @@ def _execute(args):
 
     # the fetching subroutines
     else:
-        # make list of years to be downloaded
-        if not args.endyear:
-            years = [args.startyear]
-        else:
-            assert (args.endyear >= args.startyear), (
-                'endyear should be >= startyear or None')
-            years = list(range(args.startyear, args.endyear + 1))
-
+        years = _construct_year_list(args)
         synoptic, statistics, days, hours = _set_period_args(args)
         # try to build and send download request
-        era5 = efetch.Fetch(years,
-                            months=args.months,
-                            days=days,
-                            hours=hours,
-                            variables=args.variables,
-                            outputformat=args.format,
-                            outputprefix=args.outputprefix,
-                            period=args.command,
-                            ensemble=args.ensemble,
-                            synoptic=synoptic,
-                            statistics=statistics,
-                            pressurelevels=args.levels,
-                            threads=args.threads,
-                            merge=args.merge)
+        era5 = efetch.Fetch(
+            years,
+            months=args.months,
+            days=days,
+            hours=hours,
+            variables=args.variables,
+            outputformat=args.format,
+            outputprefix=args.outputprefix,
+            period=args.command,
+            ensemble=args.ensemble,
+            synoptic=synoptic,
+            statistics=statistics,
+            pressurelevels=args.levels,
+            threads=args.threads,
+            merge=args.merge,
+            prelimbe=args.prelimbe,
+        )
         era5.fetch(dryrun=args.dryrun)
         return True
 
diff --git a/era5cli/fetch.py b/era5cli/fetch.py
index 6333e79..d67b1e6 100644
--- a/era5cli/fetch.py
+++ b/era5cli/fetch.py
@@ -57,13 +57,15 @@ class Fetch:
             Indicating if files should be downloaded. By default
             files will be downloaded. For a dryrun the cdsapi request will
             be written to stdout.
+        prelimbe: bool
+            Whether to download the preliminary back extension (1950-1978).
     """
 
     def __init__(self, years: list, months: list, days: list,
                  hours: list, variables: list, outputformat: str,
                  outputprefix: str, period: str, ensemble: bool,
                  statistics=None, synoptic=None, pressurelevels=None,
-                 merge=False, threads=None):
+                 merge=False, threads=None, prelimbe=False):
         """Initialization of Fetch class."""
         self.months = era5cli.utils._zpad_months(months)
         """list(str): List of zero-padded strings of months
@@ -107,6 +109,9 @@ class Fetch:
         """bool: Whether to get monthly averaged by hour of day
         (synoptic=True) or monthly means of daily means
         (synoptic=False)."""
+        self.prelimbe = prelimbe
+        """bool: Whether to select from the ERA5 preliminary back
+        extension which supports years from 1950 to 1978"""
 
     def fetch(self, dryrun=False):
         """Split calls and fetch results.
@@ -195,17 +200,25 @@ class Fetch:
         elif not self.ensemble:
             producttype += "reanalysis"
 
-        if self.period == "monthly":
+        if self.period == "monthly" and not self.prelimbe:
             producttype = "monthly_averaged_" + producttype
             if self.synoptic:
                 producttype += "_by_hour_of_day"
-        elif self.period == "hourly":
-            if self.ensemble and self.statistics:
-                producttype = [
-                    "ensemble_members",
-                    "ensemble_mean",
-                    "ensemble_spread",
-                ]
+        elif self.period == "monthly" and self.prelimbe:
+            if self.ensemble:
+                producttype = "members-"
+            elif not self.ensemble:
+                producttype = "reanalysis-"
+            if self.synoptic:
+                producttype += "synoptic-monthly-means"
+            elif not self.synoptic:
+                producttype += "monthly-means-of-daily-means"
+        elif self.period == "hourly" and self.ensemble and self.statistics:
+            producttype = [
+                "ensemble_members",
+                "ensemble_mean",
+                "ensemble_spread",
+            ]
 
         return producttype
 
@@ -253,6 +266,9 @@ class Fetch:
             if self.days:
                 request["day"] = self.days
 
+        if self.prelimbe:
+            name += "-preliminary-back-extension"
+
         return(name, request)
 
     def _exit(self):

