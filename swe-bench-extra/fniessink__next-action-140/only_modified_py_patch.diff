diff --git a/next_action/arguments/config.py b/next_action/arguments/config.py
index 5cf2f99..bf27d79 100644
--- a/next_action/arguments/config.py
+++ b/next_action/arguments/config.py
@@ -1,5 +1,6 @@
 """ Methods for reading, parsing, and validating Next-action configuration files. """
 
+import argparse
 import os
 import string
 import sys
@@ -26,11 +27,17 @@ def read_config_file(filename: str, default_filename: str, error: Callable[[str]
         error("can't parse {0}: {1}".format(filename, reason))
 
 
-def write_config_file() -> None:
+def write_config_file(namespace: argparse.Namespace) -> None:
     """ Generate a configuration file on standard out. """
     intro = "# Configuration file for Next-action. Edit the settings below as you like.\n"
-    config = yaml.dump(dict(file="~/todo.txt", number=1, reference="multiple", style="default"),
-                       default_flow_style=False)
+    options = dict(file=namespace.file[0] if len(namespace.file) == 1 else namespace.file,
+                   reference=namespace.reference, style=namespace.style or "default")
+    if namespace.number == sys.maxsize:
+        options["all"] = True
+    else:
+        options["number"] = namespace.number
+
+    config = yaml.dump(options, default_flow_style=False)
     sys.stdout.write(intro + config)
 
 
diff --git a/next_action/arguments/parser.py b/next_action/arguments/parser.py
index 682b5ae..aabbcdb 100644
--- a/next_action/arguments/parser.py
+++ b/next_action/arguments/parser.py
@@ -126,10 +126,10 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         self.parse_remaining_args(remaining, namespace)
         if getattr(namespace, "config_file", self.get_default("config_file")) is not None:
             self.process_config_file(namespace)
+        self.fix_filenames(namespace)
         if namespace.write_config_file:
-            write_config_file()
+            write_config_file(namespace)
             self.exit()
-        self.fix_filenames(namespace)
         return namespace
 
     def parse_remaining_args(self, remaining: List[str], namespace: argparse.Namespace) -> None:

