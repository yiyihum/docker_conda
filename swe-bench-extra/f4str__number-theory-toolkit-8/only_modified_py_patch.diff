diff --git a/number_theory_toolkit/binomial.py b/number_theory_toolkit/binomial.py
index dd97870..1dba22e 100644
--- a/number_theory_toolkit/binomial.py
+++ b/number_theory_toolkit/binomial.py
@@ -25,35 +25,39 @@ def pascal_triangle(n: int) -> List[List[int]]:
 
 
 def binomial_theorem(
-    x: Union[int, float, str], y: Union[int, float, str], n: int, trim=True
+    x: Union[int, float, str], y: Union[int, float, str], n: int, simplify=True
 ) -> Union[int, float, str]:
-    if isinstance(x, (int, float)) and isinstance(y, (int, float)):
-        total: Union[int, float] = 0
-        for k in range(n + 1):
-            coeff = binomial_coefficient(n, k) * (x ** (n - k)) * (y ** k)
-            total += coeff
-        return total
+    if simplify and isinstance(x, (int, float)) and isinstance(y, (int, float)):
+        return (x + y) ** n
     else:
         terms: List[str] = []
         for k in range(n + 1):
-            if trim:
-                terms = []
-                comb = binomial_coefficient(n, k)
-                if comb > 1:
-                    terms.append(str(comb))
-
-                if n - k == 1:
-                    terms.append(f'{x}')
-                elif n - k > 1:
-                    terms.append(f'{x}^{n - k}')
-
-                if k == 1:
-                    terms.append(f'{y}')
-                elif k > 1:
-                    terms.append(f'{y}^{k}')
-
-                term = ' '.join(terms)
+            coefficient: float = binomial_coefficient(n, k)
+            if simplify:
+                term_list: List[str] = []
+
+                if isinstance(x, (int, float)):
+                    coefficient *= x ** (n - k)
+                else:
+                    if n - k == 1:
+                        term_list.append(f'{x}')
+                    elif n - k > 1:
+                        term_list.append(f'{x}^{n - k}')
+
+                if isinstance(y, (int, float)):
+                    coefficient *= y ** k
+                else:
+                    if k == 1:
+                        term_list.append(f'{y}')
+                    elif k > 1:
+                        term_list.append(f'{y}^{k}')
+
+                if coefficient > 1:
+                    term_list.insert(0, str(coefficient))
+
+                term = ' * '.join(term_list)
             else:
-                term = f'{binomial_coefficient(n, k)} {x}^{n - k} {y}^{k}'
+                term = f'{coefficient} * {x}^{n - k} * {y}^{k}'
+
             terms.append(term)
         return ' + '.join(terms)
diff --git a/number_theory_toolkit/euclidean.py b/number_theory_toolkit/euclidean.py
index 17cc614..47a8fbf 100644
--- a/number_theory_toolkit/euclidean.py
+++ b/number_theory_toolkit/euclidean.py
@@ -14,9 +14,9 @@ def euclidean_algorithm(a: int, b: int, verbose=False) -> int:
         return euclidean_algorithm(b, a % b, verbose)
 
 
-def bezout_coefficients(a: int, b: int, verbose=False, even=False) -> Tuple[int, int, int]:
+def bezout_coefficients(a: int, b: int, verbose=False, *, even=False) -> Tuple[int, int, int]:
     if a < b:
-        return bezout_coefficients(b, a, verbose, not even)
+        return bezout_coefficients(b, a, verbose, even=not even)
     elif b == 0:
         if verbose:
             print(f'gcd = {a}')
@@ -24,7 +24,7 @@ def bezout_coefficients(a: int, b: int, verbose=False, even=False) -> Tuple[int,
     else:
         q = a // b
         r = a % b
-        x, y, g = bezout_coefficients(b, r, verbose, not even)
+        x, y, g = bezout_coefficients(b, r, verbose, even=not even)
         if verbose:
             if x != 0 and y != 0:
                 if even:
diff --git a/number_theory_toolkit/linear_congruences.py b/number_theory_toolkit/linear_congruences.py
index b130921..268e45b 100644
--- a/number_theory_toolkit/linear_congruences.py
+++ b/number_theory_toolkit/linear_congruences.py
@@ -31,16 +31,3 @@ def chinese_remainder_theorem(a: int, b: int, n: int, m: int) -> int:
     k = linear_congruence(n, b - a, m)[0]
     x = a + n * k
     return x % (n * m)
-
-
-if __name__ == '__main__':
-    print(linear_congruence(2, 1, 5))
-    print(linear_congruence(2, 1, 6))
-    print(linear_congruence(7, 4, 25))
-    print(linear_congruence(15, 10, 25))
-
-    print(linear_congruence_system(2, 3, 4, 25))
-    print(linear_congruence_system(4, 2, 15, 8))
-
-    print(chinese_remainder_theorem(2, 3, 4, 25))
-    print(chinese_remainder_theorem(4, 2, 15, 8))
diff --git a/setup.py b/setup.py
index 5ac7a67..989c489 100644
--- a/setup.py
+++ b/setup.py
@@ -16,14 +16,18 @@ setup(
     description='Numerical Methods Toolkit',
     long_description=long_description,
     long_description_content_type='text/markdown',
+    url='https://github.com/f4str/number-theory-toolkit',
     license='MIT',
     author='Farhan Ahmed',
-    author_email='farhaahmed@cs.stonybrook.edu',
     keywords='',
     classifiers=[
+        'Programming Language :: Python',
         'Programming Language :: Python :: 3',
         'Programming Language :: Python :: 3.6',
-        'Programming Language :: Python',
+        'Programming Language :: Python :: 3.7',
+        'Programming Language :: Python :: 3.8',
+        'Programming Language :: Python :: 3.9',
+        'Programming Language :: Python :: 3.10',
     ],
     python_requires='>=3.6',
     packages=find_packages(),
