diff --git a/fffw/encoding/filters.py b/fffw/encoding/filters.py
index f42e5b2..194424c 100644
--- a/fffw/encoding/filters.py
+++ b/fffw/encoding/filters.py
@@ -278,8 +278,18 @@ class Trim(AutoFilter):
                 scenes.append(Scene(stream=scene.stream, start=start,
                                     duration=end - start))
 
-        return replace(meta, start=self.start, duration=self.end,
-                       scenes=scenes, streams=streams)
+        kwargs = {
+            'start': self.start,
+            'duration': self.end,
+            'scenes': scenes,
+            'streams': streams
+        }
+        interval = cast(TS, self.end) - cast(TS, self.start)
+        if isinstance(meta, AudioMeta):
+            kwargs['samples'] = round(meta.sampling_rate * interval)
+        if isinstance(meta, VideoMeta):
+            kwargs['frames'] = round(meta.frame_rate * interval)
+        return replace(meta, **kwargs)
 
 
 @dataclass
@@ -353,6 +363,7 @@ class Concat(Filter):
         duration = TS(0)
         scenes = []
         streams: List[str] = []
+        frames: int = 0
         for meta in metadata:
             duration += meta.duration
             scenes.extend(meta.scenes)
@@ -361,12 +372,17 @@ class Concat(Filter):
                     # Add all streams for each concatenated metadata and remove
                     # contiguous duplicates.
                     streams.append(stream)
+            if isinstance(meta, VideoMeta):
+                frames += meta.frames
         kwargs = dict(duration=duration, scenes=scenes, streams=streams)
         meta = metadata[0]
         if isinstance(meta, AudioMeta):
             # Recompute samples and sampling rate: sampling rate from first
             # input, samples count corresponds duration.
             kwargs['samples'] = round(meta.sampling_rate * duration)
+        if isinstance(meta, VideoMeta):
+            # Sum frames count from all input streams
+            kwargs['frames'] = frames
         return replace(metadata[0], **kwargs)
 
 
diff --git a/fffw/graph/meta.py b/fffw/graph/meta.py
index c767955..29beac6 100644
--- a/fffw/graph/meta.py
+++ b/fffw/graph/meta.py
@@ -330,6 +330,8 @@ class VideoMeta(Meta):
     """ Display aspect ratio."""
     frame_rate: float
     """ Frames per second."""
+    frames: int
+    """ Number of frames."""
     device: Optional[Device]
     """ Hardware device asociated with current stream."""
 
@@ -346,6 +348,9 @@ class VideoMeta(Meta):
         else:
             assert str(self.dar) == 'nan'
 
+        interval = float(self.duration - self.start)
+        assert abs(self.frames - interval * self.frame_rate) <= 1
+
 
 @dataclass
 class AudioMeta(Meta):
@@ -369,11 +374,8 @@ class AudioMeta(Meta):
         return AUDIO
 
     def validate(self) -> None:
-        duration = self.duration.total_seconds()
-        if duration != 0:
-            assert abs(self.sampling_rate - self.samples / duration) < 0.001
-        else:
-            assert self.sampling_rate == 0
+        interval = float(self.duration - self.start)
+        assert abs(self.samples - interval * self.sampling_rate) <= 1
 
 
 def audio_meta_data(**kwargs: Any) -> AudioMeta:
@@ -437,6 +439,7 @@ def video_meta_data(**kwargs: Any) -> VideoMeta:
         par=par,
         dar=dar,
         frame_rate=frame_rate,
+        frames=frames,
         device=None,
     )
 
diff --git a/fffw/wrapper/base.py b/fffw/wrapper/base.py
index b595a09..d8326b8 100644
--- a/fffw/wrapper/base.py
+++ b/fffw/wrapper/base.py
@@ -5,13 +5,78 @@ from asyncio.subprocess import Process
 from dataclasses import dataclass
 from logging import getLogger
 from types import TracebackType
-from typing import Tuple, List, Any, Optional, cast, Callable, Union, TextIO, \
-    Type
+from typing import Tuple, List, Any, Optional, cast, Callable, Union, TextIO
+from typing import Type, AsyncIterator
 
 from fffw.wrapper.helpers import quote, ensure_binary, ensure_text
 from fffw.wrapper.params import Params
 
 
+class UniversalLineReader:
+    """
+    Reads bytes from asyncio.StreamReader and splits it to lines with either
+    CR or LF, or even CRLF.
+
+    https://docs.python.org/3/glossary.html#term-universal-newlines
+
+    >>> # noinspection PyUnresolvedReferences
+    ... line_iter = UniversalLineReader(process.stderr)
+    >>> async for line in line_iter:
+    ...    print(line)
+
+    """
+
+    def __init__(self,
+                 reader: asyncio.StreamReader,
+                 bufsize: int = 10 * io.DEFAULT_BUFFER_SIZE,
+                 blocksize: int = io.DEFAULT_BUFFER_SIZE,
+                 encoding: str = 'utf8') -> None:
+        """
+        :param reader: asynchronous stream reader, i.e. stdout/stderr of
+            asyncio Process instance.
+        :param bufsize: max buffer size
+        :param blocksize: read block size
+        :param encoding: text encoding
+        """
+        self.blocksize = blocksize
+        self.reader = reader
+        self.bufsize = bufsize
+        self.buffer = b''
+        self.encoding = encoding
+        self.at_eof = False
+
+    def __aiter__(self) -> AsyncIterator[str]:
+        return self.readlines()
+
+    async def readlines(self) -> AsyncIterator[str]:
+        while not self.at_eof:
+            # StreamReader supports only LF line separator. This leads to buffer
+            # overrun when it contains only CR-terminated lines. Thus, we read
+            # blocks manually and then split it to lines with universal line
+            # separator.
+            block = await self.reader.read(self.blocksize)
+            # empty read means that stream is closed
+            self.at_eof = len(block) == 0
+
+            # checking max buffer size
+            buffered = len(self.buffer) + len(block)
+            if buffered > self.bufsize:
+                raise asyncio.LimitOverrunError("buffer overrun", buffered)
+
+            self.buffer += block
+            if self.buffer:
+                # Split buffer to line with any of CR, LF of CRLF separators
+                # Last line is buffered to handle the case when CRLF sequence is
+                # being split to subsequent reads.
+                [*lines, self.buffer] = self.buffer.splitlines(keepends=True)
+                for line in lines:
+                    yield line.decode(self.encoding)
+        # We always leave one non-empty line above, but stream may be empty. In
+        # this case we don't want to yield empty line.
+        if self.buffer:
+            yield self.buffer.decode(self.encoding)
+
+
 class Runner:
     """ Wrapper for Popen process for non-blocking streams handling."""
 
@@ -69,7 +134,7 @@ class Runner:
         """
         Handles read from stdout/stderr.
 
-        Reads lines from reader and feeds it to callback. Values, filtered by
+        Reads lines from stream and feeds it to callback. Values, filtered by
         callback, are written to output buffer.
 
         :param reader: Process.stdout or Process.stderr instance
@@ -78,14 +143,10 @@ class Runner:
         """
         if callback is None or reader is None:
             return
-        while True:
-            line = await reader.readline()
-            if line:
-                data = callback(line.decode())
-                if data:
-                    output.write(data)
-            else:
-                break
+        async for line in UniversalLineReader(reader):
+            data = callback(line)
+            if data:
+                output.write(data)
 
     @staticmethod
     async def write(writer: Optional[asyncio.StreamWriter],
