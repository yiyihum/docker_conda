diff --git a/tests/test_asset.py b/tests/test_asset.py
new file mode 100644
index 0000000..2489c87
--- /dev/null
+++ b/tests/test_asset.py
@@ -0,0 +1,31 @@
+import pytest
+
+from pyventory import Asset, errors
+
+
+def test_calculate_asset_class_atribute_value_on_call():
+
+    class TestAsset(Asset):
+        foo = '{bar}'
+        bar = 'bar'
+
+    assert TestAsset.foo() == 'bar'
+
+
+def test_use_raw_asset_class_atribute_value():
+
+    class TestAsset(Asset):
+        foo = '{bar}-{baz}'
+        bar = 'bar'
+
+    assert TestAsset.foo == '{bar}-{baz}'
+
+
+def test_asset_class_atribute_value_calculation_is_strict():
+
+    class TestAsset(Asset):
+        foo = '{bar}-{baz}'
+        bar = 'bar'
+
+    with pytest.raises(errors.ValueSubstitutionError):
+        TestAsset.foo()
diff --git a/tests/test_inventory.py b/tests/test_inventory.py
index ac7ebf4..541189f 100644
--- a/tests/test_inventory.py
+++ b/tests/test_inventory.py
@@ -26,12 +26,12 @@ def test_allow_mixins_for_inventory_items():
                 ],
             },
             "test_inventory.TestAsset": {
-                "hosts": [
+                "instances": [
                     "test_asset",
                 ],
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {}
         },
     }
@@ -49,12 +49,12 @@ def test_allow_host_specific_vars():
     assert result == {
         'assets': {
             "test_inventory.TestAsset": {
-                "hosts": [
+                "instances": [
                     "test_asset",
                 ],
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {
                 "foo": "bar"
             },
@@ -74,12 +74,12 @@ def test_allow_format_strings_as_values():
     assert result == {
         'assets': {
             "test_inventory.TestAsset": {
-                "hosts": [
+                "instances": [
                     "test_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {
                 "bar": "ham",
                 "foo": "test_ham"
@@ -102,12 +102,12 @@ def test_allow_mapping_of_format_strings_as_values():
     assert result == {
         'assets': {
             "test_inventory.TestAsset": {
-                "hosts": [
+                "instances": [
                     "test_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {
                 "bar": "ham",
                 "foo": {
@@ -130,12 +130,12 @@ def test_allow_sequence_of_format_strings_as_values():
     assert result == {
         'assets': {
             "test_inventory.TestAsset": {
-                "hosts": [
+                "instances": [
                     "test_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {
                 "bar": "ham",
                 "foo": [
@@ -162,12 +162,12 @@ def test_strings_formatting_do_not_conflict_with_numbers():
                 "vars": {
                     "foo": 42
                 },
-                "hosts": [
+                "instances": [
                     "test_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {
                 "bar": "ham",
                 "foo": 42
@@ -181,10 +181,8 @@ def test_require_arguments_for_format_strings():
     class TestAsset(Asset):
         foo = '{bar}'
 
-    test_asset = TestAsset()
-
     with pytest.raises(errors.ValueSubstitutionError):
-        pyventory_data(locals())
+        test_asset = TestAsset()
 
 
 def test_inheritance_with_format():
@@ -207,12 +205,12 @@ def test_inheritance_with_format():
                 ]
             },
             "test_inventory.ChildAsset": {
-                "hosts": [
+                "instances": [
                     "child_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "child_asset": {
                 "bar": "ham",
                 "foo": "ham"
@@ -274,12 +272,12 @@ def test_deep_multiple_inheritance_propagation():
                     "baz": "Level3Asset4 baz value",
                     "foo": "Level1Asset1 foo value"
                 },
-                "hosts": [
+                "instances": [
                     "level3_asset4"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "level3_asset4": {
                 "bar": "Level1Asset2 bar value",
                 "baz": "Level3Asset4 baz value",
@@ -305,12 +303,12 @@ def test_skip_non_asset_locals():
     assert result == {
         'assets': {
             "test_inventory.TestAsset": {
-                "hosts": [
+                "instances": [
                     "test_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {}
         }
     }
@@ -341,17 +339,17 @@ def test_multiple_children():
                 ]
             },
             "test_inventory.TestAsset1": {
-                "hosts": [
+                "instances": [
                     "test_asset1"
                 ]
             },
             "test_inventory.TestAsset2": {
-                "hosts": [
+                "instances": [
                     "test_asset2"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset1": {},
             "test_asset2": {}
         }
@@ -381,12 +379,12 @@ def test_allow_notimplemented_value():
                 "vars": {
                     "foo": "bar"
                 },
-                "hosts": [
+                "instances": [
                     "test_asset"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset": {
                 "foo": "bar"
             }
@@ -402,10 +400,8 @@ def test_raise_notimplemented_value_in_final_asset():
     class TestAsset(BaseTestAsset):
         pass
 
-    test_asset = TestAsset()
-
     with pytest.raises(errors.PropertyIsNotImplementedError):
-        pyventory_data(locals())
+        test_asset = TestAsset()
 
 
 def test_string_format_does_not_miss_values():
@@ -443,7 +439,7 @@ def test_string_format_does_not_miss_values():
                     "baz": "baz-value",
                     "foo": "baz-value"
                 },
-                "hosts": [
+                "instances": [
                     "test_asset_1"
                 ]
             },
@@ -453,12 +449,12 @@ def test_string_format_does_not_miss_values():
                     "baz": "baz-value",
                     "foo": "baz-value"
                 },
-                "hosts": [
+                "instances": [
                     "test_asset_2"
                 ]
             },
         },
-        "hosts": {
+        "instances": {
             "test_asset_1": {
                 "bar": "baz-value",
                 "baz": "baz-value",
@@ -479,7 +475,5 @@ def test_string_format_detects_infinite_loop():
         bar = '{foo}'
         foo = '{bar}'
 
-    test_asset = TestAsset()
-
     with pytest.raises(errors.ValueSubstitutionInfiniteLoopError):
-        pyventory_data(locals())
+        test_asset = TestAsset()
