diff --git a/mendeleev/electronegativity.py b/mendeleev/electronegativity.py
index 4fdcb53..62d47cc 100644
--- a/mendeleev/electronegativity.py
+++ b/mendeleev/electronegativity.py
@@ -3,7 +3,7 @@ Electronegativity scale formulas.
 """
 
 import math
-from typing import List
+from typing import List, Union
 
 import numpy as np
 
@@ -98,17 +98,15 @@ def martynov_batsanov(ionization_energies: List[float]) -> float:
 def mulliken(
     ionization_energy: float,
     electron_affinity: float,
-    missing_is_zero: bool = False,
-    allow_negative_ea: bool = False,
-) -> float:
+) -> Union[float, None]:
     r"""
-    Return the absolute electronegativity (Mulliken scale), calculated as
+    Return the absolute electronegativity (Mulliken scale).
 
     Args:
         ionization_energy: ionization energy
         electron_affinity: electron affinity
-        missing_is_zero: missing values are substituted with zero
-        allow_negative_ea: if `True` negative EA values will be allowed
+
+    The value of electonegativity is calculated as:
 
     .. math::
 
@@ -120,18 +118,14 @@ def mulliken(
     - :math:`A` is the electron affinity
     """
 
-    if ionization_energy is not None:
-        if (
-            electron_affinity is not None
-            and electron_affinity < 0.0
-            and allow_negative_ea
-        ):
-            return (ionization_energy + electron_affinity) * 0.5
-        elif electron_affinity is not None or missing_is_zero:
-            return ionization_energy * 0.5
-    else:
+    if ionization_energy is None:
         return None
 
+    if electron_affinity is None:
+        return ionization_energy * 0.5
+
+    return (ionization_energy + electron_affinity) * 0.5
+
 
 def nagle(nvalence: int, polarizability: float) -> float:
     """
diff --git a/mendeleev/models.py b/mendeleev/models.py
index f6130bc..89646c7 100644
--- a/mendeleev/models.py
+++ b/mendeleev/models.py
@@ -627,23 +627,23 @@ class Element(Base):
     def electronegativity_mulliken(
         self,
         charge: int = 0,
-        missing_is_zero: bool = False,
-        allow_negative_ea: bool = False,
     ) -> float:
         r"""
-        Return the absolute electronegativity (Mulliken scale), calculated as
+        Return the absolute electronegativity (Mulliken scale).
 
         Args:
             charge: charge of the ion
-            missing_is_zero: missing values are substituted with zero
-            allow_negative_ea: if `True` negative EA values will be allowed
+
+        The value of electonegativity is calculated as:
 
         .. math::
 
-           \chi = \frac{I + A}{2}
+        \chi = \frac{I + A}{2}
+
+        where:
 
-        where :math:`I` is the ionization energy and :math:`A` is the electron
-        affinity
+        - :math:`I` is the ionization energy,
+        - :math:`A` is the electron affinity
         """
 
         if charge == 0:
@@ -654,9 +654,7 @@ class Element(Base):
             ea = self.ionenergies.get(charge, None)
         else:
             raise ValueError(f"Charge has to be a non-negative integer, got: {charge}")
-        return mulliken(
-            ip, ea, missing_is_zero=missing_is_zero, allow_negative_ea=allow_negative_ea
-        )
+        return mulliken(ip, ea)
 
     def electronegativity_nagle(self) -> float:
         "Nagle's electronegativity"

