diff --git a/docs/index.rst b/docs/index.rst
index 743a493..d76eb3c 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -18,6 +18,11 @@ Welcome to |project| documentation!
     :undoc-members:
     :show-inheritance:
 
+.. automodule:: zipp.glob
+    :members:
+    :undoc-members:
+    :show-inheritance:
+
 
 Indices and tables
 ==================
diff --git a/newsfragments/98.bugfix.rst b/newsfragments/98.bugfix.rst
new file mode 100644
index 0000000..552444d
--- /dev/null
+++ b/newsfragments/98.bugfix.rst
@@ -0,0 +1,1 @@
+Replaced the ``fnmatch.translate`` with a fresh glob-to-regex translator for more correct matching behavior.
diff --git a/zipp/__init__.py b/zipp/__init__.py
index ddfa0a6..55a2deb 100644
--- a/zipp/__init__.py
+++ b/zipp/__init__.py
@@ -5,9 +5,9 @@ import itertools
 import contextlib
 import pathlib
 import re
-import fnmatch
 
 from .py310compat import text_encoding
+from .glob import translate
 
 
 __all__ = ['Path']
@@ -367,7 +367,7 @@ class Path:
         if not pattern:
             raise ValueError(f"Unacceptable pattern: {pattern!r}")
 
-        matches = re.compile(fnmatch.translate(pattern)).fullmatch
+        matches = re.compile(translate(pattern)).fullmatch
         return (
             child
             for child in self._descendants()
diff --git a/zipp/glob.py b/zipp/glob.py
new file mode 100644
index 0000000..4a2e665
--- /dev/null
+++ b/zipp/glob.py
@@ -0,0 +1,40 @@
+import re
+
+
+def translate(pattern):
+    r"""
+    Given a glob pattern, produce a regex that matches it.
+
+    >>> translate('*.txt')
+    '[^/]*\\.txt'
+    >>> translate('a?txt')
+    'a.txt'
+    >>> translate('**/*')
+    '.*/[^/]*'
+    """
+    return ''.join(map(replace, separate(pattern)))
+
+
+def separate(pattern):
+    """
+    Separate out character sets to avoid translating their contents.
+
+    >>> [m.group(0) for m in separate('*.txt')]
+    ['*.txt']
+    >>> [m.group(0) for m in separate('a[?]txt')]
+    ['a', '[?]', 'txt']
+    """
+    return re.finditer(r'([^\[]+)|(?P<set>[\[].*?[\]])|([\[][^\]]*$)', pattern)
+
+
+def replace(match):
+    """
+    Perform the replacements for a match from :func:`separate`.
+    """
+
+    return match.group('set') or (
+        re.escape(match.group(0))
+        .replace('\\*\\*', r'.*')
+        .replace('\\*', r'[^/]*')
+        .replace('\\?', r'.')
+    )
