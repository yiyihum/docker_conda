diff --git a/tests/example_app/change_hydra_config.py b/tests/example_app/change_hydra_config.py
new file mode 100644
index 00000000..627ed03a
--- /dev/null
+++ b/tests/example_app/change_hydra_config.py
@@ -0,0 +1,25 @@
+# Copyright (c) 2023 Massachusetts Institute of Technology
+# SPDX-License-Identifier: MIT
+
+from datetime import datetime
+
+from hydra.conf import HydraConf, JobConf
+
+from hydra_zen import store, zen
+
+store(HydraConf(job=JobConf(chdir=True)))
+
+
+@store
+def task():
+    # Used to test that configuring Hydra to change working dir to time-stamped
+    # output dir works as-expected
+    from pathlib import Path
+
+    path = Path.cwd()
+    assert path.parent.name == datetime.today().strftime("%Y-%m-%d")
+
+
+if __name__ == "__main__":
+    store.add_to_hydra_store()
+    zen(task).hydra_main(config_name="task", config_path=None)
diff --git a/tests/test_signature_parsing.py b/tests/test_signature_parsing.py
index 8478e5b1..b46a9b1a 100644
--- a/tests/test_signature_parsing.py
+++ b/tests/test_signature_parsing.py
@@ -325,9 +325,9 @@ def expects_int(x: int) -> int:
 @pytest.mark.parametrize(
     "builds_as_default",
     [
-        builds(returns_int),  # type
-        builds(returns_int)(),  # instance
-    ],
+        builds(returns_int),
+        builds(returns_int)(),
+    ],  # type  # instance
 )
 @pytest.mark.parametrize("hydra_recursive", [True, None])
 def test_setting_default_with_builds_widens_type(builds_as_default, hydra_recursive):
diff --git a/tests/test_store.py b/tests/test_store.py
index 62088f9a..699788a4 100644
--- a/tests/test_store.py
+++ b/tests/test_store.py
@@ -1,6 +1,8 @@
 # Copyright (c) 2023 Massachusetts Institute of Technology
 # SPDX-License-Identifier: MIT
+import os
 import re
+import sys
 from contextlib import contextmanager
 from copy import deepcopy
 from dataclasses import dataclass
@@ -9,6 +11,7 @@ from typing import Any, Callable, Hashable, Optional
 
 import hypothesis.strategies as st
 import pytest
+from hydra.conf import HydraConf
 from hydra.core.config_store import ConfigStore
 from hypothesis import assume, given, note, settings
 from omegaconf import DictConfig, ListConfig
@@ -21,7 +24,7 @@ from hydra_zen import (
     make_config,
     store as default_store,
 )
-from hydra_zen._compatibility import HYDRA_SUPPORTS_LIST_INSTANTIATION
+from hydra_zen._compatibility import HYDRA_SUPPORTS_LIST_INSTANTIATION, HYDRA_VERSION
 from tests.custom_strategies import new_stores, store_entries
 
 cs = ConfigStore().instance()
@@ -724,3 +727,65 @@ def test_entry_access_cannot_mutate_store(store: ZenStore, getter):
     entry["name"] = 2222
     new_entries = tuple(d.copy() for d in store)
     assert all(e in new_entries for e in entries)
+
+
+class CustomHydraConf(HydraConf):
+    ...
+
+
+@pytest.mark.parametrize("conf", [CustomHydraConf, HydraConf()])
+@pytest.mark.parametrize("deferred", [True, False])
+@pytest.mark.usefixtures("clean_store")
+def test_auto_support_for_HydraConf(conf: HydraConf, deferred: bool):
+    with clean_store():
+        st1 = ZenStore(deferred_hydra_store=deferred)
+        st2 = ZenStore(deferred_hydra_store=True)
+        st1(conf)
+        st1.add_to_hydra_store()
+        assert st1["hydra", "config"] is conf
+
+        with pytest.raises(
+            ValueError,
+            match=re.escape(r"(name=config group=hydra):"),
+        ):
+            # Attempting to overwrite HydraConf within the same
+            # store should fail.
+            st1(conf)
+
+        st2(conf)
+        with pytest.raises(ValueError):
+            st2.add_to_hydra_store()
+
+
+@pytest.mark.skipif(
+    sys.platform.startswith("win") and bool(os.environ.get("CI")),
+    reason="Things are weird on GitHub Actions and Windows",
+)
+@pytest.mark.skipif(
+    HYDRA_VERSION < (1, 2, 0),
+    reason="HydraConf(job=Job(chdir=...)) introduced in Hydra 1.2.0",
+)
+@pytest.mark.parametrize(
+    "inp",
+    [
+        None,
+        pytest.param(
+            "hydra.job.chdir=False",
+            marks=pytest.mark.xfail(
+                reason="Hydra should not change directory in this case"
+            ),
+        ),
+    ],
+)
+@pytest.mark.usefixtures("clean_store")
+@pytest.mark.usefixtures("cleandir")
+def test_configure_hydra_chdir(inp: str):
+    import subprocess
+    from pathlib import Path
+
+    path = (Path(__file__).parent / "example_app" / "change_hydra_config.py").absolute()
+
+    cli = ["python", path]
+    if inp:
+        cli.append(inp)
+    subprocess.run(cli).check_returncode()
