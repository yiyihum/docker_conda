diff --git a/vhdeps/targets/ghdl.py b/vhdeps/targets/ghdl.py
index a354670..3e0e2b8 100644
--- a/vhdeps/targets/ghdl.py
+++ b/vhdeps/targets/ghdl.py
@@ -140,7 +140,7 @@ def _run_test_case(output_file, test_case, vcd_dir, ghdl_elaborate, ghdl_run):
     exit_code, *_ = run_cmd(
         output_file,
         ghdl_elaborate,
-        '--work=%s' % test_case.lib,
+        '--work=%s' % test_case.file.lib,
         test_case.unit)
     if exit_code != 0:
         output_file.write('Elaboration for %s failed!\n' % test_case.unit)
@@ -151,13 +151,13 @@ def _run_test_case(output_file, test_case, vcd_dir, ghdl_elaborate, ghdl_run):
     vcd_switch = []
     if vcd_dir is not None:
         vcd_file = '%s/%s.%s.vcd' % (
-            vcd_dir, test_case.lib, test_case.unit)
+            vcd_dir, test_case.file.lib, test_case.unit)
         vcd_switch.append('--vcd=%s' % vcd_file)
     exit_code, stdout, *_ = run_cmd(
         output_file,
         ghdl_run,
-        '--work=' + test_case.lib, test_case.unit,
-        '--stop-time=' + test_case.get_timeout().replace(' ', ''),
+        '--work=' + test_case.file.lib, test_case.unit,
+        '--stop-time=' + test_case.file.get_timeout().replace(' ', ''),
         *vcd_switch)
     if 'simulation stopped by --stop-time' in stdout:
         code = 1
diff --git a/vhdeps/targets/shared.py b/vhdeps/targets/shared.py
index 6318ff2..7fd85b1 100644
--- a/vhdeps/targets/shared.py
+++ b/vhdeps/targets/shared.py
@@ -16,6 +16,7 @@
 
 import sys
 import fnmatch
+from collections import namedtuple
 
 def add_arguments_for_get_test_cases(parser):
     """Adds the appropriate command line arguments for the `get_test_cases()`
@@ -33,6 +34,8 @@ def add_arguments_for_get_test_cases(parser):
         'partial match. If no patterns are specified, the matcher defaults to '
         'a single \'*_tc\' pattern.')
 
+TestCase = namedtuple('TestCase', ('file', 'unit'))
+
 def get_test_cases(vhd_list, pattern=None, **_):
     """Filters the toplevel entities in `vhd_list` using the given pattern
     list, returning the resulting list."""
@@ -40,25 +43,21 @@ def get_test_cases(vhd_list, pattern=None, **_):
         pattern = ['*_tc']
     test_cases = []
     for top in vhd_list.top:
-        if top.unit is None:
-            raise NotImplementedError(
-                'vhdeps\' test case runners currently do not support having '
-                'multiple test cases per VHDL file.\nThe offending file is '
-                '"%s".' % top.fname)
-        include = False
-        for pat in pattern:
-            target = top.unit
-            if pat.startswith(':'):
-                target = top.fname
-                pat = pat[1:]
-            invert = False
-            if pat.startswith('!'):
-                invert = True
-                pat = pat[1:]
-            if fnmatch.fnmatchcase(target, pat):
-                include = not invert
-        if include:
-            test_cases.append(top)
+        for unit in top.entity_defs:
+            include = False
+            for pat in pattern:
+                target = unit
+                if pat.startswith(':'):
+                    target = top.fname
+                    pat = pat[1:]
+                invert = False
+                if pat.startswith('!'):
+                    invert = True
+                    pat = pat[1:]
+                if fnmatch.fnmatchcase(target, pat):
+                    include = not invert
+            if include:
+                test_cases.append(TestCase(top, unit))
     return test_cases
 
 def run_cmd(output_file, cmd, *args):
diff --git a/vhdeps/targets/vsim.py b/vhdeps/targets/vsim.py
index 0e10b0a..a2984e3 100644
--- a/vhdeps/targets/vsim.py
+++ b/vhdeps/targets/vsim.py
@@ -381,11 +381,11 @@ def _write_tcl(vhd_list, tcl_file, **kwargs):
     test_cases = get_test_cases(vhd_list, **kwargs)
     for test_case in test_cases:
         tcl_file.write('lappend testcases [list %s %s "%s"]\n' % (
-            test_case.lib, test_case.unit, test_case.get_timeout()))
+            test_case.file.lib, test_case.unit, test_case.file.get_timeout()))
     if len(test_cases) == 1:
         test_case = test_cases[0]
         tcl_file.write('simulate %s %s "%s"\n' % (
-            test_case.lib, test_case.unit, test_case.get_timeout()))
+            test_case.file.lib, test_case.unit, test_case.file.get_timeout()))
     else:
         tcl_file.write('regression\n')
 
