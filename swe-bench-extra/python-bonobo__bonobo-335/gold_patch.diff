diff --git a/bin/update_apidoc.py b/bin/update_apidoc.py
index efb0563..b93cddf 100644
--- a/bin/update_apidoc.py
+++ b/bin/update_apidoc.py
@@ -1,3 +1,4 @@
+import inspect
 import os
 
 from jinja2 import DictLoader, Environment
@@ -30,8 +31,6 @@ class Module:
         return os.path.join(__path__, apidoc_root, *self.name.split(".")) + ".rst"
 
 
-import inspect
-
 bonobo = __import__("bonobo")
 assert bonobo.__version__
 
diff --git a/bonobo/structs/graphs.py b/bonobo/structs/graphs.py
index aaf3fd6..ce43ef6 100644
--- a/bonobo/structs/graphs.py
+++ b/bonobo/structs/graphs.py
@@ -59,7 +59,11 @@ class PartialGraph:
 
 class Graph:
     """
-    Represents a directed graph of nodes.
+    Core structure representing a directed graph of nodes. It will be used to create data streaming queues between your
+    objects during the job execution.
+
+    This is how the data flows are defined.
+
     """
 
     name = ""
@@ -75,7 +79,9 @@ class Graph:
         yield from self.nodes
 
     def __len__(self):
-        """Node count.
+        """
+        The graph length is defined as its node count.
+        
         """
         return len(self.nodes)
 
@@ -92,8 +98,19 @@ class Graph:
         return self.get_cursor().__rshift__(other)
 
     def get_cursor(self, ref=BEGIN):
+        """
+        Create a `GraphCursor` to use the operator-based syntax to build graph, starting at `ref`.
+
+        """
         return GraphCursor(self, last=self.index_of(ref))
 
+    def orphan(self):
+        """
+        Create a `GraphCursor` attached to nothing.
+
+        """
+        return self.get_cursor(None)
+
     def index_of(self, mixed):
         """
         Find the index based on various strategies for a node, probably an input or output of chain. Supported
@@ -115,10 +132,16 @@ class Graph:
         raise ValueError("Cannot find node matching {!r}.".format(mixed))
 
     def indexes_of(self, *things):
+        """
+        Returns the set of indexes of the things passed as arguments.
+
+        """
         return set(map(self.index_of, things))
 
     def outputs_of(self, idx_or_node, create=False):
-        """Get a set of the outputs for a given node, node index or name.
+        """
+        Get a set of the outputs for a given node, node index or name.
+        
         """
         idx_or_node = self.index_of(idx_or_node)
 
@@ -127,8 +150,10 @@ class Graph:
         return self.edges[idx_or_node]
 
     def add_node(self, new_node, *, _name=None):
-        """Add a node without connections in this graph and returns its index.
+        """
+        Add a node without connections in this graph and returns its index.
         If _name is specified, name this node (string reference for  further usage).
+        
         """
         idx = len(self.nodes)
         self.edges[idx] = set()
@@ -149,7 +174,8 @@ class Graph:
         return self.add_node(new_node, _name=_name)
 
     def add_chain(self, *nodes, _input=BEGIN, _output=None, _name=None, use_existing_nodes=False):
-        """Add `nodes` as a chain in this graph.
+        """
+        Add `nodes` as a chain in this graph.
 
         **Input rules**
 
@@ -222,7 +248,9 @@ class Graph:
 
     @property
     def topologically_sorted_indexes(self):
-        """Iterate in topological order, based on networkx's topological_sort() function.
+        """
+        Iterate in topological order, based on networkx's topological_sort() function.
+        
         """
         try:
             return self._topologcally_sorted_indexes_cache
diff --git a/docs/guide/graphs.rst b/docs/guide/graphs.rst
index 67f8ce9..e6a83ba 100644
--- a/docs/guide/graphs.rst
+++ b/docs/guide/graphs.rst
@@ -201,8 +201,11 @@ positional parameters as you want.
 .. note::
 
     As of |bonobo| 0.7, a new syntax is available that we believe is more powerfull and more readable than the legacy
-    `add_chain` method. The former API is here to stay and it's perfectly safe to use it, but if it is an option, you
-    should consider the new syntax. During the transition period, we'll document both.
+    `add_chain` method. The former API is here to stay and it's perfectly safe to use it (in fact, the new syntax uses
+    `add_chain` under the hood).
+    
+    If it is an option for you, we suggest you consider the new syntax. During the transition period, we'll document
+    both but the new syntax will eventually become default.
 
 .. code-block:: python
 
@@ -393,6 +396,33 @@ You can also create single nodes, and the api provide the same capability on sin
     graph.add_chain(..., _output="foo")
 
 
+Orphan nodes / chains
+:::::::::::::::::::::
+
+The default behaviour of `add_chain` (or `get_cursor`) is to connect the first node to the special `BEGIN` token, which
+instruct |bonobo| to call the connected node once without parameter to kickstart the data stream.
+
+This is normally what you want, but there are ways to override it, as you may want to add "orphan" nodes or chains to your graph.
+
+.. code-block:: python
+
+    import bonobo
+
+    graph = bonobo.Graph()
+
+    # using add_node will naturally add a node as "orphan"   
+    graph.add_node(a)
+
+    # using add_chain with "None" as the input will create an orphan chain
+    graph.add_chain(a, b, c, _input=None)
+
+    # using the new syntax, you can use either get_cursor(None) or the orphan() shortcut
+    graph.get_cursor(None) >> a >> b >> c
+    
+    # ... using the shortcut ...
+    graph.orphan() >> a >> b >> c
+
+
 Connecting two nodes
 ::::::::::::::::::::
 
