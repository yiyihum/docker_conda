diff --git a/db/dynamodb.py b/db/dynamodb.py
index 3ddf148..32b9835 100644
--- a/db/dynamodb.py
+++ b/db/dynamodb.py
@@ -111,7 +111,7 @@ class DynamoDB:
         **Note**: This function should **not** be called externally, and should
         only be called on initialization.
 
-        Teams are only required to have a ``github_team_name``. Since this is a
+        Teams are only required to have a ``github_team_id``. Since this is a
         NoSQL database, no other attributes are required.
         """
         logging.info("Creating table '{}'".format(self.teams_table))
@@ -119,13 +119,13 @@ class DynamoDB:
             TableName=self.teams_table,
             AttributeDefinitions=[
                 {
-                    'AttributeName': 'github_team_name',
+                    'AttributeName': 'github_team_id',
                     'AttributeType': 'S'
                 },
             ],
             KeySchema=[
                 {
-                    'AttributeName': 'github_team_name',
+                    'AttributeName': 'github_team_id',
                     'KeyType': 'HASH'
                 },
             ],
@@ -167,7 +167,7 @@ class DynamoDB:
             place_if_filled('email', user.get_email())
             place_if_filled('name', user.get_name())
             place_if_filled('github', user.get_github_username())
-            place_if_filled('guid', user.get_github_id())
+            place_if_filled('github_user_id', user.get_github_id())
             place_if_filled('major', user.get_major())
             place_if_filled('position', user.get_position())
             place_if_filled('bio', user.get_biography())
@@ -195,6 +195,7 @@ class DynamoDB:
 
             teams_table = self.ddb.Table(self.teams_table)
             tdict = {
+                'github_team_id': team.get_github_team_id(),
                 'github_team_name': team.get_github_team_name()
             }
             place_if_filled('display_name', team.get_display_name())
@@ -238,7 +239,7 @@ class DynamoDB:
         user.set_email(d.get('email', ''))
         user.set_name(d.get('name', ''))
         user.set_github_username(d.get('github', ''))
-        user.set_github_id(d.get('guid', ''))
+        user.set_github_id(d.get('github_user_id', ''))
         user.set_major(d.get('major', ''))
         user.set_position(d.get('position', ''))
         user.set_biography(d.get('bio', ''))
@@ -247,7 +248,7 @@ class DynamoDB:
                                                      'members')])
         return user
 
-    def retrieve_team(self, team_name):
+    def retrieve_team(self, team_id):
         """
         Retrieve team from teams table.
 
@@ -259,13 +260,14 @@ class DynamoDB:
         response = team_table.get_item(
             TableName=self.teams_table,
             Key={
-                'github_team_name': team_name
+                'github_team_id': team_id
             }
         )
+
         if 'Item' in response.keys():
             return self.team_from_dict(response['Item'])
         else:
-            raise LookupError('Team "{}" not found'.format(team_name))
+            raise LookupError('Team "{}" not found'.format(team_id))
 
     @staticmethod
     def team_from_dict(d):
@@ -274,7 +276,9 @@ class DynamoDB:
 
         :return: returns converted team model.
         """
-        team = Team(d['github_team_name'], d.get('display_name', ''))
+        team = Team(d['github_team_id'],
+                    d['github_team_name'],
+                    d.get('display_name', ''))
         team.set_platform(d.get('platform', ''))
         members = set(d.get('members', []))
         for member in members:
@@ -370,17 +374,19 @@ class DynamoDB:
             }
         )
 
-    def delete_team(self, team_name):
+    def delete_team(self, team_id):
         """
         Remove a team from the teams table.
 
-        :param team_name: the team_name of the team to be removed
+        To obtain the team github id, you have to retrieve the team first.
+
+        :param team_id: the team_id of the team to be removed
         """
         logging.info("Deleting team {} from table {}".
-                     format(team_name, self.teams_table))
+                     format(team_id, self.teams_table))
         team_table = self.ddb.Table(self.teams_table)
         team_table.delete_item(
             Key={
-                'github_team_name': team_name
+                'github_team_id': team_id
             }
         )
diff --git a/model/team.py b/model/team.py
index 302d409..7e1d3af 100644
--- a/model/team.py
+++ b/model/team.py
@@ -4,11 +4,13 @@
 class Team:
     """Represent a team with related fields and methods."""
 
-    def __init__(self, github_team_name, display_name):
-        """Initialize the team.
+    def __init__(self, github_team_id, github_team_name, display_name):
+        """
+        Initialize the team.
 
-        Parameters are a valid Github team name and display name.
+        Parameters are a valid Github team ID, team name and display name.
         """
+        self.__github_team_id = github_team_id
         self.__github_team_name = github_team_name
         self.__display_name = display_name
         self.__platform = ""
@@ -21,11 +23,13 @@ class Team:
 
         Required fields for database to accept:
         - ``__github_team_name``
+        - ``__github_team_id``
 
         :param team: team to check
         :return: returns true if this team has no missing required fields
         """
-        return len(team.get_github_team_name()) > 0
+        return len(team.get_github_team_name()) > 0 and\
+            len(team.get_github_team_id()) > 0
 
     def __eq__(self, other):
         """Return true if this team has the same attributes as the other."""
@@ -35,6 +39,14 @@ class Team:
         """Return the opposite of what is returned in self.__eq__(other)."""
         return not (self == other)
 
+    def get_github_team_id(self):
+        """Return this team's unique Github team ID."""
+        return self.__github_team_id
+
+    def set_github_team_id(self, github_team_id):
+        """Set this team's unique Github team ID."""
+        self.__github_team_id = github_team_id
+
     def get_github_team_name(self):
         """Return this team's unique Github team name."""
         return self.__github_team_name
@@ -55,21 +67,21 @@ class Team:
         """Return this team's working platform."""
         return self.__platform
 
-    def add_member(self, slack_id):
-        """Add a new member's Slack ID to the team's set of members' IDs."""
-        self.__members.add(slack_id)
+    def add_member(self, github_user_id):
+        """Add a new member's Github ID to the team's set of members' IDs."""
+        self.__members.add(github_user_id)
 
-    def discard_member(self, slack_id):
-        """Discard the member of the team with the Slack ID in the argument."""
-        self.__members.discard(slack_id)
+    def discard_member(self, github_user_id):
+        """Discard the member of the team with Github ID in the argument."""
+        self.__members.discard(github_user_id)
 
     def get_members(self):
-        """Return the set of all members' Slack IDs."""
+        """Return the set of all members' Github IDs."""
         return self.__members
 
-    def is_member(self, slack_id):
+    def is_member(self, github_user_id):
         """Identify if any member has the ID specified in the argument."""
-        return slack_id in self.__members
+        return github_user_id in self.__members
 
     def __str__(self):
         """Print information on the team class."""
diff --git a/model/user.py b/model/user.py
index 2970597..d134dcc 100644
--- a/model/user.py
+++ b/model/user.py
@@ -99,9 +99,9 @@ class User:
         """Return this user's Github ID."""
         return self.__github_id
 
-    def set_github_id(self, guid):
+    def set_github_id(self, github_user_id):
         """Set this user's Github ID."""
-        self.__github_id = guid
+        self.__github_id = github_user_id
 
     def get_major(self):
         """Return this user's major."""

