diff --git a/docs/examples/exporting_models_json_nested_encoders.py b/docs/examples/exporting_models_json_nested_encoders.py
new file mode 100644
--- /dev/null
+++ b/docs/examples/exporting_models_json_nested_encoders.py
@@ -0,0 +1,41 @@
+from datetime import datetime, timedelta
+from pydantic import BaseModel
+from pydantic.json import timedelta_isoformat
+
+
+class CustomChildModel(BaseModel):
+    dt: datetime
+    diff: timedelta
+
+    class Config:
+        json_encoders = {
+            datetime: lambda v: v.timestamp(),
+            timedelta: timedelta_isoformat,
+        }
+
+
+class ParentModel(BaseModel):
+    diff: timedelta
+    child: CustomChildModel
+
+    class Config:
+        json_encoders = {
+            timedelta: lambda v: v.total_seconds(),
+            CustomChildModel: lambda _: 'using parent encoder',
+        }
+
+
+child = CustomChildModel(dt=datetime(2032, 6, 1), diff=timedelta(hours=100))
+parent = ParentModel(diff=timedelta(hours=3), child=child)
+
+# default encoder uses total_seconds() for diff
+print(parent.json())
+
+# nested encoder uses isoformat
+print(parent.json(use_nested_encoders=True))
+
+# turning off models_as_dict only uses the top-level formatter, however
+
+print(parent.json(models_as_dict=False, use_nested_encoders=True))
+
+print(parent.json(models_as_dict=False, use_nested_encoders=False))
diff --git a/pydantic/main.py b/pydantic/main.py
--- a/pydantic/main.py
+++ b/pydantic/main.py
@@ -434,6 +434,7 @@ def dict(
         exclude_unset: bool = False,
         exclude_defaults: bool = False,
         exclude_none: bool = False,
+        encode_as_json: bool = False,
     ) -> 'DictStrAny':
         """
         Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.
@@ -455,6 +456,7 @@ def dict(
                 exclude_unset=exclude_unset,
                 exclude_defaults=exclude_defaults,
                 exclude_none=exclude_none,
+                encode_as_json=encode_as_json,
             )
         )
 
@@ -470,6 +472,7 @@ def json(
         exclude_none: bool = False,
         encoder: Optional[Callable[[Any], Any]] = None,
         models_as_dict: bool = True,
+        use_nested_encoders: bool = False,
         **dumps_kwargs: Any,
     ) -> str:
         """
@@ -497,6 +500,7 @@ def json(
                 exclude_unset=exclude_unset,
                 exclude_defaults=exclude_defaults,
                 exclude_none=exclude_none,
+                encode_as_json=use_nested_encoders,
             )
         )
         if self.__custom_root_type__:
@@ -715,6 +719,7 @@ def _get_value(
         exclude_unset: bool,
         exclude_defaults: bool,
         exclude_none: bool,
+        encode_as_json: bool = False,
     ) -> Any:
 
         if isinstance(v, BaseModel):
@@ -726,6 +731,7 @@ def _get_value(
                     include=include,
                     exclude=exclude,
                     exclude_none=exclude_none,
+                    encode_as_json=encode_as_json,
                 )
                 if ROOT_KEY in v_dict:
                     return v_dict[ROOT_KEY]
@@ -775,6 +781,9 @@ def _get_value(
         elif isinstance(v, Enum) and getattr(cls.Config, 'use_enum_values', False):
             return v.value
 
+        elif encode_as_json:
+            return cls.__json_encoder__(v)
+
         else:
             return v
 
@@ -808,6 +817,7 @@ def _iter(
         exclude_unset: bool = False,
         exclude_defaults: bool = False,
         exclude_none: bool = False,
+        encode_as_json: bool = False,
     ) -> 'TupleGenerator':
 
         # Merge field set excludes with explicit exclude parameter with explicit overriding field set options.
@@ -853,6 +863,7 @@ def _iter(
                     exclude_unset=exclude_unset,
                     exclude_defaults=exclude_defaults,
                     exclude_none=exclude_none,
+                    encode_as_json=encode_as_json,
                 )
             yield dict_key, v
 
