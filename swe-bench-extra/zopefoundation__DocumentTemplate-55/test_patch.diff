diff --git a/src/DocumentTemplate/tests/testDTML.py b/src/DocumentTemplate/tests/testDTML.py
index eea5877..ce516c4 100644
--- a/src/DocumentTemplate/tests/testDTML.py
+++ b/src/DocumentTemplate/tests/testDTML.py
@@ -15,6 +15,8 @@
 
 import unittest
 
+import six
+
 from ..html_quote import html_quote
 
 
@@ -268,6 +270,26 @@ class DTMLTests(unittest.TestCase):
         self.assertEqual(html1(), expected)
         self.assertEqual(html2(), expected)
 
+    def test_sql_quote(self):
+        html = self.doc_class('<dtml-var x sql_quote>')
+        special = u'\xae'
+
+        self.assertEqual(html(x=u'x'), u'x')
+        self.assertEqual(html(x=b'x'), u'x')
+        self.assertEqual(html(x=u"Moe's Bar"), u"Moe''s Bar")
+        self.assertEqual(html(x=b"Moe's Bar"), u"Moe''s Bar")
+
+        if six.PY3:
+            self.assertEqual(html(x=u"Moe's B%sr" % special),
+                             u"Moe''s B%sr" % special)
+            self.assertEqual(html(x=b"Moe's B%sr" % special.encode('UTF-8')),
+                             u"Moe''s B%sr" % special)
+        else:
+            self.assertEqual(html(x=u"Moe's B%sr" % special),
+                             "Moe''s B%sr" % special.encode('UTF-8'))
+            self.assertEqual(html(x=b"Moe's B%sr" % special.encode('UTF-8')),
+                             b"Moe''s B%sr" % special.encode('UTF-8'))
+
     def test_fmt(self):
         html = self.doc_class(
             """
diff --git a/src/DocumentTemplate/tests/test_DT_Var.py b/src/DocumentTemplate/tests/test_DT_Var.py
index 45d7925..648af1b 100644
--- a/src/DocumentTemplate/tests/test_DT_Var.py
+++ b/src/DocumentTemplate/tests/test_DT_Var.py
@@ -15,6 +15,8 @@
 
 import unittest
 
+import six
+
 
 class TestNewlineToBr(unittest.TestCase):
 
@@ -95,63 +97,11 @@ class TestUrlQuoting(unittest.TestCase):
         self.assertEqual(
             url_unquote_plus(quoted_utf8_value), utf8_value)
 
-    def test_bytes_sql_quote(self):
-        from DocumentTemplate.DT_Var import bytes_sql_quote
-        self.assertEqual(bytes_sql_quote(b""), b"")
-        self.assertEqual(bytes_sql_quote(b"a"), b"a")
-
-        self.assertEqual(bytes_sql_quote(b"Can't"), b"Can''t")
-        self.assertEqual(bytes_sql_quote(b"Can\'t"), b"Can''t")
-        self.assertEqual(bytes_sql_quote(br"Can\'t"), b"Can\\''t")
-
-        self.assertEqual(bytes_sql_quote(b"Can\\ I?"), b"Can\\ I?")
-        self.assertEqual(bytes_sql_quote(br"Can\ I?"), b"Can\\ I?")
-
-        self.assertEqual(
-            bytes_sql_quote(b'Just say "Hello"'), b'Just say "Hello"')
-
-        self.assertEqual(
-            bytes_sql_quote(b'Hello\x00World'), b'HelloWorld')
-        self.assertEqual(
-            bytes_sql_quote(b'\x00Hello\x00\x00World\x00'), b'HelloWorld')
-
-        self.assertEqual(
-            bytes_sql_quote(b"carriage\rreturn"), b"carriagereturn")
-        self.assertEqual(bytes_sql_quote(b"line\nbreak"), b"line\nbreak")
-        self.assertEqual(bytes_sql_quote(b"tab\t"), b"tab\t")
-
-    def test_text_sql_quote(self):
-        from DocumentTemplate.DT_Var import text_sql_quote
-        self.assertEqual(text_sql_quote(u""), u"")
-        self.assertEqual(text_sql_quote(u"a"), u"a")
-
-        self.assertEqual(text_sql_quote(u"Can't"), u"Can''t")
-        self.assertEqual(text_sql_quote(u"Can\'t"), u"Can''t")
-        # SyntaxError on Python 3.
-        # self.assertEqual(text_sql_quote(ur"Can\'t"), u"Can\\\\''t")
-
-        self.assertEqual(text_sql_quote(u"Can\\ I?"), u"Can\\ I?")
-        # SyntaxError on Python 3.
-        # self.assertEqual(text_sql_quote(ur"Can\ I?"), u"Can\\\\ I?")
-
-        self.assertEqual(
-            text_sql_quote(u'Just say "Hello"'), u'Just say "Hello"')
-
-        self.assertEqual(
-            text_sql_quote(u'Hello\x00World'), u'HelloWorld')
-        self.assertEqual(
-            text_sql_quote(u'\x00Hello\x00\x00World\x00'), u'HelloWorld')
-
-        self.assertEqual(
-            text_sql_quote(u"carriage\rreturn"), u"carriagereturn")
-        self.assertEqual(text_sql_quote(u"line\nbreak"), u"line\nbreak")
-        self.assertEqual(text_sql_quote(u"tab\t"), u"tab\t")
-
     def test_sql_quote(self):
         from DocumentTemplate.DT_Var import sql_quote
         self.assertEqual(sql_quote(u""), u"")
         self.assertEqual(sql_quote(u"a"), u"a")
-        self.assertEqual(sql_quote(b"a"), b"a")
+        self.assertEqual(sql_quote(b"a"), u"a")
 
         self.assertEqual(sql_quote(u"Can't"), u"Can''t")
         self.assertEqual(sql_quote(u"Can\'t"), u"Can''t")
@@ -174,11 +124,15 @@ class TestUrlQuoting(unittest.TestCase):
             sql_quote(u'\x00Hello\x00\x00World\x00'), u'HelloWorld')
 
         self.assertEqual(u"\xea".encode("utf-8"), b"\xc3\xaa")
-        self.assertEqual(sql_quote(u"\xea'"), u"\xea''")
-        self.assertEqual(sql_quote(b"\xc3\xaa'"), b"\xc3\xaa''")
+        if six.PY3:
+            self.assertEqual(sql_quote(b"\xc3\xaa'"), u"\xea''")
+            self.assertEqual(sql_quote(u"\xea'"), u"\xea''")
+        else:
+            self.assertEqual(sql_quote(b"\xc3\xaa'"), b"\xc3\xaa''")
+            self.assertEqual(sql_quote(u"\xea'"), b"\xc3\xaa''")
 
         self.assertEqual(
-            sql_quote(b"carriage\rreturn"), b"carriagereturn")
+            sql_quote(b"carriage\rreturn"), u"carriagereturn")
         self.assertEqual(
             sql_quote(u"carriage\rreturn"), u"carriagereturn")
         self.assertEqual(sql_quote(u"line\nbreak"), u"line\nbreak")
