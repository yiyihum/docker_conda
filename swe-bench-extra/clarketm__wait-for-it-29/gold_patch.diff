diff --git a/.github/workflows/python-package.yaml b/.github/workflows/python-package.yaml
index b70a10b..18fe05a 100644
--- a/.github/workflows/python-package.yaml
+++ b/.github/workflows/python-package.yaml
@@ -5,7 +5,8 @@ jobs:
     strategy:
       matrix:
         python-version: [3.6, 3.7, 3.8]
-    runs-on: ubuntu-latest
+        runs-on: [macos-latest, ubuntu-latest]
+    runs-on: ${{ matrix.runs-on }}
     steps:
     - name: Checkout
       uses: actions/checkout@v2
diff --git a/wait_for_it/wait_for_it.py b/wait_for_it/wait_for_it.py
index 467f259..b9f7549 100644
--- a/wait_for_it/wait_for_it.py
+++ b/wait_for_it/wait_for_it.py
@@ -7,6 +7,7 @@ import subprocess
 import sys
 import time
 from contextlib import contextmanager
+from enum import Enum
 from urllib.parse import urlparse
 
 import click
@@ -14,6 +15,15 @@ import click
 from wait_for_it import __version__
 
 
+class _WaitForItException(Exception):
+    """Base class for all exceptions custom to wait-for-it"""
+
+
+class _MalformedServiceSyntaxException(_WaitForItException):
+    def __init__(self, service):
+        super().__init__(f"{service!r} is not a supported syntax for a service")
+
+
 def _asyncio_run(*args, **kvargs):
     """
     Cheap backport of asyncio.run of Python 3.7+ to Python 3.6.
@@ -27,9 +37,12 @@ def _asyncio_run(*args, **kvargs):
 
 def _determine_host_and_port_for(service):
     scheme, _, host = service.rpartition(r"//")
-    url = urlparse(f"{scheme}//{host}", scheme="http")
-    host = url.hostname
-    port = url.port or (443 if url.scheme == "https" else 80)
+    try:
+        url = urlparse(f"{scheme}//{host}", scheme="http")
+        host = url.hostname
+        port = url.port or (443 if url.scheme == "https" else 80)
+    except ValueError:
+        raise _MalformedServiceSyntaxException(service)
     return host, port
 
 
@@ -86,9 +99,16 @@ async def _wait_until_available_and_report(reporter, host, port):
     help="Timeout in seconds, 0 for no timeout",
 )
 @click.argument("commands", nargs=-1)
-def cli(service, quiet, parallel, timeout, commands):
+def cli(**kwargs):
     """Wait for service(s) to be available before executing a command."""
+    try:
+        _cli_internal(**kwargs)
+    except _WaitForItException as e:
+        _Messenger.tell_failure(str(e))
+        sys.exit(1)
+
 
+def _cli_internal(service, quiet, parallel, timeout, commands):
     if quiet:
         sys.stdout = open(os.devnull, "w")
 
@@ -102,11 +122,31 @@ def cli(service, quiet, parallel, timeout, commands):
         sys.exit(result.returncode)
 
 
-class _ConnectionJobReporter:
-    _SUCCESS = "[+] "
-    _FAILURE = "[-] "
-    _NEUTRAL = "[*] "
+class _Messenger:
+    class _MessageType(Enum):
+        SUCCESS = "[+] "
+        FAILURE = "[-] "
+        NEUTRAL = "[*] "
 
+    @classmethod
+    def _tell(cls, message_type, message):
+        prefix = message_type.value
+        print(f"{prefix}{message}")
+
+    @classmethod
+    def tell_success(cls, message):
+        cls._tell(cls._MessageType.SUCCESS, message)
+
+    @classmethod
+    def tell_failure(cls, message):
+        cls._tell(cls._MessageType.FAILURE, message)
+
+    @classmethod
+    def tell_neutral(cls, message):
+        cls._tell(cls._MessageType.NEUTRAL, message)
+
+
+class _ConnectionJobReporter:
     def __init__(self, host, port, timeout):
         self._friendly_name = f"{host}:{port}"
         self._timeout = timeout
@@ -115,24 +155,23 @@ class _ConnectionJobReporter:
 
     def on_before_start(self):
         if self._timeout:
-            print(
-                f"{self._NEUTRAL}Waiting {self._timeout} seconds for {self._friendly_name}"
-            )
+            message = f"Waiting {self._timeout} seconds for {self._friendly_name}"
         else:
-            print(f"{self._NEUTRAL}Waiting for {self._friendly_name} without a timeout")
+            message = f"Waiting for {self._friendly_name} without a timeout"
+
+        _Messenger.tell_neutral(message)
         self._started_at = time.time()
 
     def on_success(self):
         seconds = round(time.time() - self._started_at)
-        print(
-            f"{self._SUCCESS}{self._friendly_name} is available after {seconds} seconds"
+        _Messenger.tell_success(
+            f"{self._friendly_name} is available after {seconds} seconds"
         )
         self.job_successful = True
 
     def on_timeout(self):
-        print(
-            f"{self._FAILURE}Timeout occurred after waiting {self._timeout} seconds"
-            f" for {self._friendly_name}"
+        _Messenger.tell_failure(
+            f"Timeout occurred after waiting {self._timeout} seconds"
         )
 
 
