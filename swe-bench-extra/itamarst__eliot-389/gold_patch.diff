diff --git a/docs/source/news.rst b/docs/source/news.rst
index 886bb3d..40e7d75 100644
--- a/docs/source/news.rst
+++ b/docs/source/news.rst
@@ -20,6 +20,7 @@ Features:
 
 Bug fixes:
 
+* Fixed bug in the ``asyncio`` coroutine support where only the thread where ``use_asyncio_context()`` was called supported coroutine-specific contexts. Fixes issue #388.
 * ``ILogger.write`` is now explicitly thread-safe. The ``MemoryLogger`` (as used
   by tests) implementation of this method which was previously not thread-safe
   is now thread-safe. Thanks to Jean-Paul Calderone for the patch. Fixes issue
diff --git a/eliot/__init__.py b/eliot/__init__.py
index 359ce53..da6b7c0 100644
--- a/eliot/__init__.py
+++ b/eliot/__init__.py
@@ -7,7 +7,7 @@ from warnings import warn
 from ._message import Message
 from ._action import (
     start_action, startTask, Action, preserve_context, current_action,
-    use_asyncio_context, log_call
+    log_call
 )
 from ._output import (
     ILogger,
@@ -20,7 +20,7 @@ from ._validation import Field, fields, MessageType, ActionType, ValidationError
 from ._traceback import write_traceback, writeFailure
 from ._errors import register_exception_extractor
 from ._version import get_versions
-
+from ._asyncio import use_asyncio_context
 
 # Backwards compatibility:
 def add_destination(destination):
diff --git a/eliot/_action.py b/eliot/_action.py
index 09ed9b8..9cb2733 100644
--- a/eliot/_action.py
+++ b/eliot/_action.py
@@ -49,15 +49,23 @@ class _ExecutionContext(threading.local):
 
     The context is thread-specific, but can be made e.g. coroutine-specific by
     overriding C{get_sub_context}.
+
+    If we ever change this again we might want to make a ``threading.local``
+    subclass a sub-object?  Or come up with better API for thread-locals.
     """
 
     def __init__(self):
+        """
+        Every time an attribute is looked up from a new thread, this will be
+        called again for that thread, because this is a ``threading.local``
+        subclass.
+        """
         self._main_stack = []
         self.get_sub_context = lambda: None
 
     def _get_stack(self):
         """
-        Get the stack for the current asyncio Task.
+        Get the stack for the current context.
         """
         stack = self.get_sub_context()
         if stack is None:
@@ -91,20 +99,51 @@ class _ExecutionContext(threading.local):
         return stack[-1]
 
 
-_context = _ExecutionContext()
-current_action = _context.current
+class _ECOwner(object):
+    """Owner of the global execution context singleton.
 
+    It allows setting-once-only a replacement class for the default
+    L{_ExecutionContext}, so different sub-contexts (e.g. asyncio and
+    generators) don't stomp on each other.
 
-def use_asyncio_context():
+    @ivar context: The current global L{_ExecutionContext}.  Don't set it
+        directly, only get it!  You can use C{set} to set it.
     """
-    Use a logging context that is tied to the current asyncio coroutine.
 
-    Call this first thing, before doing any other logging.
+    def __init__(self):
+        self.reset()
+
+    def reset(self):
+        """Reset to default context, to be used by tests only."""
+        self.context = _ExecutionContext()
+        self._set = False
+
+    def set(self, context_class):
+        """Set a new context of the given class.
 
-    Does not currently support event loops other than asyncio.
+        If the same class as current one, no changes are made.
+
+        @raises C{RuntimeError}: If the context has already been set to a
+            different class.
+        """
+        if self.context.__class__ == context_class:
+            return
+        if self._set:
+            raise RuntimeError(
+                "Context class already set to " + str(self.context.__class__)
+            )
+        self.context = context_class()
+        self._set = True
+
+
+_context_owner = _ECOwner()
+
+
+def current_action():
+    """
+    @return: The current C{Action} in context, or C{None} if none were set.
     """
-    from ._asyncio import AsyncioContext
-    _context.get_sub_context = AsyncioContext().get_stack
+    return _context_owner.context.current()
 
 
 class TaskLevel(object):
@@ -422,11 +461,11 @@ class Action(object):
         """
         Run the given function with this L{Action} as its execution context.
         """
-        _context.push(self)
+        _context_owner.context.push(self)
         try:
             return f(*args, **kwargs)
         finally:
-            _context.pop()
+            _context_owner.context.pop()
 
     def addSuccessFields(self, **fields):
         """
@@ -447,25 +486,25 @@ class Action(object):
 
         The action does NOT finish when the context is exited.
         """
-        _context.push(self)
+        _context_owner.context.push(self)
         try:
             yield self
         finally:
-            _context.pop()
+            _context_owner.context.pop()
 
     # Python context manager implementation:
     def __enter__(self):
         """
         Push this action onto the execution context.
         """
-        _context.push(self)
+        _context_owner.context.push(self)
         return self
 
     def __exit__(self, type, exception, traceback):
         """
         Pop this action off the execution context, log finish message.
         """
-        _context.pop()
+        _context_owner.context.pop()
         self.finish(exception)
 
 
diff --git a/eliot/_asyncio.py b/eliot/_asyncio.py
index 86c5900..1e4b3a5 100644
--- a/eliot/_asyncio.py
+++ b/eliot/_asyncio.py
@@ -2,11 +2,16 @@
 Support for asyncio coroutines.
 """
 
-from asyncio import Task
+try:
+    from asyncio import Task
+except ImportError:
+    Task = None  # Python 2
 from weakref import WeakKeyDictionary
 
+from ._action import _ExecutionContext
 
-class AsyncioContext:
+
+class AsyncioSubContext:
     """
     Per-Task context, allowing different coroutines to have different logging
     context.
@@ -31,3 +36,23 @@ class AsyncioContext:
         if task not in self._per_task:
             self._per_task[task] = []
         return self._per_task[task]
+
+
+class AsyncioExecutionContext(_ExecutionContext):
+    """ExecutionContext that supports asyncio sub-contexts."""
+
+    def __init__(self):
+        _ExecutionContext.__init__(self)
+        self.get_sub_context = AsyncioSubContext().get_stack
+
+
+def use_asyncio_context():
+    """
+    Use a logging context that is tied to the current asyncio coroutine.
+
+    Call this first thing, before doing any other logging.
+
+    Does not currently support event loops other than asyncio.
+    """
+    from ._action import _context_owner
+    _context_owner.set(AsyncioExecutionContext)
