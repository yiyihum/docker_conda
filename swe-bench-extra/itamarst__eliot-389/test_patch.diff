diff --git a/eliot/tests/corotests.py b/eliot/tests/corotests.py
index 78e3501..ec0a112 100644
--- a/eliot/tests/corotests.py
+++ b/eliot/tests/corotests.py
@@ -12,8 +12,8 @@ from unittest import TestCase
 from ..testing import capture_logging
 from ..parse import Parser
 from .. import start_action
-from .._action import _ExecutionContext, _context, use_asyncio_context
-from .._asyncio import AsyncioContext
+from .._action import _context_owner
+from .._asyncio import AsyncioExecutionContext, use_asyncio_context
 
 
 async def standalone_coro():
@@ -51,12 +51,9 @@ class CoroutineTests(TestCase):
     Tests for coroutines.
     """
     def setUp(self):
+        self.addCleanup(_context_owner.reset)
         use_asyncio_context()
 
-        def cleanup():
-            _context.get_sub_context = lambda: None
-        self.addCleanup(cleanup)
-
     @capture_logging(None)
     def test_coroutine_vs_main_thread_context(self, logger):
         """
@@ -108,8 +105,7 @@ class ContextTests(TestCase):
         Each thread gets its own execution context even when using asyncio
         contexts.
         """
-        ctx = _ExecutionContext()
-        ctx.get_sub_context = AsyncioContext().get_stack
+        ctx = AsyncioExecutionContext()
         first = object()
         ctx.push(first)
 
@@ -132,8 +128,7 @@ class ContextTests(TestCase):
         A coroutine has a different Eliot context than the thread that runs the
         event loop.
         """
-        ctx = _ExecutionContext()
-        ctx.get_sub_context = AsyncioContext().get_stack
+        ctx = AsyncioExecutionContext()
         current_context = []
 
         async def coro():
@@ -149,12 +144,44 @@ class ContextTests(TestCase):
             current_context,
             [("main", "B"), ("coro", None), ("coro", "A"), ("main", "B")])
 
+    def test_coroutine_vs_main_thread_context_different_thread(self):
+        """
+        A coroutine has a different Eliot context than the thread that runs the
+        event loop, when run in different thread than the one where the context
+        was created.
+        """
+        # Create context in one thread:
+        ctx = AsyncioExecutionContext()
+        current_context = []
+
+        # Run asyncio event loop and coroutines in a different thread:
+        def run():
+            event_loop = asyncio.new_event_loop()
+            asyncio.set_event_loop(event_loop)
+
+            async def coro():
+                current_context.append(("coro", ctx.current()))
+                ctx.push("A")
+                current_context.append(("coro", ctx.current()))
+
+            ctx.push("B")
+            current_context.append(("main", ctx.current()))
+            run_coroutines(coro)
+            current_context.append(("main", ctx.current()))
+
+        thread = Thread(target=run)
+        thread.start()
+        thread.join()
+
+        self.assertEqual(
+            current_context,
+            [("main", "B"), ("coro", None), ("coro", "A"), ("main", "B")])
+
     def test_multiple_coroutines_contexts(self):
         """
         Each top-level ("Task") coroutine has its own Eliot separate context.
         """
-        ctx = _ExecutionContext()
-        ctx.get_sub_context = AsyncioContext().get_stack
+        ctx = AsyncioExecutionContext()
         current_context = []
 
         async def coro2():
@@ -181,8 +208,7 @@ class ContextTests(TestCase):
         A sub-coroutine (scheduled with await) inherits the parent coroutine's
         context.
         """
-        ctx = _ExecutionContext()
-        ctx.get_sub_context = AsyncioContext().get_stack
+        ctx = AsyncioExecutionContext()
         current_context = []
 
         async def coro2():
diff --git a/eliot/tests/test_action.py b/eliot/tests/test_action.py
index 500004d..7b42404 100644
--- a/eliot/tests/test_action.py
+++ b/eliot/tests/test_action.py
@@ -31,7 +31,7 @@ from .._action import (
     ACTION_STATUS_FIELD, ACTION_TYPE_FIELD, FAILED_STATUS, STARTED_STATUS,
     SUCCEEDED_STATUS, DuplicateChild, InvalidStartMessage, InvalidStatus,
     TaskLevel, WrittenAction, WrongActionType, WrongTask, WrongTaskLevel,
-    TooManyCalls, log_call
+    TooManyCalls, log_call, _context_owner
 )
 from .._message import (
     EXCEPTION_FIELD,
@@ -46,7 +46,6 @@ from .._validation import ActionType, Field, _ActionSerializers
 from ..testing import assertContainsFields, capture_logging
 from ..parse import Parser
 from .. import (
-    _action,
     add_destination,
     remove_destination,
     register_exception_extractor,
@@ -66,7 +65,6 @@ from .strategies import (
     union,
     written_from_pmap,
 )
-import eliot
 
 
 class ExecutionContextTests(TestCase):
@@ -178,14 +176,76 @@ class ExecutionContextTests(TestCase):
         self.assertEqual(valuesInThread, [second])
         self.assertIs(ctx.current(), first)
 
-    def test_globalInstance(self):
+
+class ContextOwnerTests(TestCase):
+    """Tests for the shared global context."""
+
+    def test_reset(self):
         """
-        A global L{_ExecutionContext} is exposed in the L{eliot._action}
-        module.
+        Resetting resets to a normal C{_ExecutionContext}.
+        """
+        _context_owner.context = object()
+        _context_owner.reset()
+        self.assertIsInstance(_context_owner.context, _ExecutionContext)
+
+    def test_current_action(self):
+        """
+        L{current_action} returns the current value of the current global
+        context.
+        """
+        self.addCleanup(_context_owner.reset)
+        _context_owner.context.push("A")
+        self.assertEqual(current_action(), "A")
+        _context_owner.context.push("B")
+        self.assertEqual(current_action(), "B")
+        _context_owner.reset()
+        self.assertEqual(current_action(), None)
+        _context_owner.context.push("C")
+        self.assertEqual(current_action(), "C")
+
+    def test_set(self):
+        """
+        It's possible to set a new C{_ExecutionContext} once.
+        """
+        self.addCleanup(_context_owner.reset)
+
+        class A(_ExecutionContext):
+            pass
+
+        _context_owner.set(A)
+        self.assertIsInstance(_context_owner.context, A)
+
+    def test_set_twice(self):
         """
-        self.assertIsInstance(_action._context, _ExecutionContext)
-        self.assertEqual(_action.current_action, _action._context.current)
-        self.assertEqual(eliot.current_action, _action._context.current)
+        Setting the same new C{_ExecutionContext} twice is no-op.
+        """
+        self.addCleanup(_context_owner.reset)
+
+        class A(_ExecutionContext):
+            pass
+
+        _context_owner.set(A)
+        a = _context_owner.context
+        _context_owner.set(A)
+        # Same object as before:
+        self.assertIs(_context_owner.context, a)
+
+    def test_set_twice_different_class(self):
+        """
+        Setting twice with different C{_ExecutionContext} classes raises a
+        C{RuntimeError}.
+        """
+        self.addCleanup(_context_owner.reset)
+
+        class A(_ExecutionContext):
+            pass
+
+        class B(_ExecutionContext):
+            pass
+
+        _context_owner.set(A)
+        with self.assertRaises(RuntimeError):
+            _context_owner.set(B)
 
 
 class ActionTests(TestCase):
