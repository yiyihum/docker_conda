diff --git a/tests/facets_test.py b/tests/facets_test.py
index 51f1fe9..b54228a 100644
--- a/tests/facets_test.py
+++ b/tests/facets_test.py
@@ -1,7 +1,5 @@
 import unittest
-import os
 import openfoodfacts
-import requests
 import requests_mock
 
 
@@ -9,14 +7,14 @@ class TestFacets(unittest.TestCase):
 
     def test_get_traces(self):
         with requests_mock.mock() as mock:
-            mock.get('http://world.openfoodfacts.org/traces.json',
+            mock.get('https://world.openfoodfacts.org/traces.json',
                      text='{"tags":["egg"]}')
             res = openfoodfacts.facets.get_traces()
             self.assertEquals(res, ["egg"])
 
     def test_get_additives(self):
         with requests_mock.mock() as mock:
-            mock.get('http://world.openfoodfacts.org/additives.json',
+            mock.get('https://world.openfoodfacts.org/additives.json',
                      text='{"tags":["additive"]}')
             res = openfoodfacts.facets.get_additives()
             self.assertEquals(res, ["additive"])
diff --git a/tests/products_test.py b/tests/products_test.py
index c58a6d2..a2c3ab9 100644
--- a/tests/products_test.py
+++ b/tests/products_test.py
@@ -10,21 +10,28 @@ class TestProducts(unittest.TestCase):
     def test_get_product(self):
         with requests_mock.mock() as mock:
             mock.get(
-                'http://world.openfoodfacts.org/api/v0/product/1223435.json',
+                'https://world.openfoodfacts.org/api/v0/product/1223435.json',
                 text='{"name":"product_test"}')
             res = openfoodfacts.get_product('1223435')
             self.assertEquals(res, {'name': 'product_test'})
 
     def test_get_by_trace(self):
         with requests_mock.mock() as mock:
-            mock.get('http://world.openfoodfacts.org/trace/egg.json',
+            mock.get('https://world.openfoodfacts.org/trace/egg/1.json',
                      text='{"products":["omelet"]}')
             res = openfoodfacts.products.get_by_trace('egg')
             self.assertEquals(res, ["omelet"])
 
+    def test_get_by_trace_pagination(self):
+        with requests_mock.mock() as mock:
+            mock.get('https://world.openfoodfacts.org/trace/egg/2.json',
+                     text='{"products":["omelet"]}')
+            res = openfoodfacts.products.get_by_trace('egg', 2)
+            self.assertEquals(res, ["omelet"])
+
     def test_get_by_country(self):
         with requests_mock.mock() as mock:
-            mock.get('http://world.openfoodfacts.org/country/france.json',
+            mock.get('https://world.openfoodfacts.org/country/france/1.json',
                      text='{"products":["omelet"]}')
             res = openfoodfacts.products.get_by_country('france')
             self.assertEquals(res, ["omelet"])
@@ -35,7 +42,8 @@ class TestProducts(unittest.TestCase):
 
         with requests_mock.mock() as mock:
             mock.get(
-                'http://world.openfoodfacts.org/country/france/trace/egg.json',
+                'https://world.openfoodfacts.org/country/'
+                'france/trace/egg/1.json',
                 text='{"products":["omelet"]}')
             res = openfoodfacts.products.get_by_facets(
                     {'trace': 'egg', 'country': 'france'})
@@ -44,14 +52,14 @@ class TestProducts(unittest.TestCase):
     def test_search(self):
         with requests_mock.mock() as mock:
             mock.get(
-                'http://world.openfoodfacts.org/cgi/search.pl?' +
+                'https://world.openfoodfacts.org/cgi/search.pl?' +
                 'search_terms=kinder bueno&json=1&page=' +
                 '1&page_size=20&sort_by=unique_scans',
                 text='{"products":["kinder bueno"], "count": 1}')
             res = openfoodfacts.products.search('kinder bueno')
             self.assertEquals(res["products"],  ["kinder bueno"])
             mock.get(
-                'http://world.openfoodfacts.org/cgi/search.pl?' +
+                'https://world.openfoodfacts.org/cgi/search.pl?' +
                 'search_terms=banania&json=1&page=' +
                 '2&page_size=10&sort_by=unique_scans',
                 text='{"products":["banania", "banania big"], "count": 2}')
