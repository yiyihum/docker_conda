diff --git a/tests/_config/test_config.py b/tests/_config/test_config.py
index f4822fb..657f63e 100644
--- a/tests/_config/test_config.py
+++ b/tests/_config/test_config.py
@@ -6,7 +6,7 @@ from txtferret._config import (
     _load_config,
     _load_default_config,
     load_config,
-    _add_user_config_file,
+    _get_user_config_file,
     save_config,
     subset_check,
     validate_config,
@@ -15,6 +15,7 @@ from txtferret._config import (
 
 # Test _load_default_config function
 
+
 def test_load_default_config():
     config_string = """
     settings:
@@ -30,6 +31,28 @@ def test_load_default_config():
 # TODO: test _load_config
 
 
+def test_load_config_no_custom_config():
+    def stub_func(yaml_file=None):
+        return {"dont": "return_me"}
+
+    rv = load_config(
+        yaml_file=None, config_={"mytest": "config"}, user_config_func=stub_func
+    )
+
+    assert {"mytest": "config"} == rv, "dict should be the same"
+
+
+def test_load_config_return_custom_config():
+    def stub_func(yaml_file=None):
+        return {"my": "config"}
+
+    jv = load_config(
+        yaml_file="something", config_={"dont": "return_me"}, user_config_func=stub_func
+    )
+
+    assert {"my": "config"} == jv, "returned the wrong dict"
+
+
 @pytest.fixture(scope="module")
 def user_config():
     config = {
@@ -55,7 +78,7 @@ def user_config():
 
 
 @pytest.fixture(scope="module")
-def default_config():
+def custom_config():
     config = {
         "filters": [
             {
@@ -78,7 +101,7 @@ def default_config():
     return config
 
 
-# Test _add_user_config_file function
+# Test _get_user_config_file function
 
 
 @pytest.fixture(scope="module")
@@ -97,83 +120,25 @@ def validator_raise():
     return validator_func
 
 
-def test_add_user_config_file_no_user_config(default_config, validator_true):
-    config_copy = copy.deepcopy(default_config)
-    rv = _add_user_config_file(
-        config_=config_copy,
+def test_get_user_config_file_valid(validator_true):
+    rv = _get_user_config_file(
         yaml_file=None,
-        default_override=False,
-        _user_config={"fake_key", "fake_value"},
+        _user_config={"fake_key": "fake_value"},
         validator=validator_true,
     )
-    assert default_config == rv, "Dicts should be the same."
+    assert {"fake_key": "fake_value"} == rv, "Dicts should be the same."
 
 
-def test_add_user_config_file_default_override_with_user_config(
-    default_config, user_config, validator_true
-):
-    config_copy = copy.deepcopy(default_config)
-    expected_config = copy.deepcopy(default_config)
-    expected_config["filters"] = copy.deepcopy(user_config["filters"])
-    rv = _add_user_config_file(
-        config_=config_copy,
-        yaml_file=None,
-        default_override=True,
-        _user_config=user_config,
-        validator=validator_true,
-    )
-    assert (
-        expected_config["filters"] == rv["filters"]
-    ), "Expected default filters to be replaced by user-defined filters."
-    assert expected_config == rv, "Only the filters should have been changed."
-
-
-def test_add_user_config_file_no_default_override_with_user_config(
-    default_config, user_config, validator_true
-):
-    config_copy = copy.deepcopy(default_config)
-    expected_config = copy.deepcopy(default_config)
-    user_filters = copy.deepcopy(user_config["filters"])
-    expected_config["filters"] += user_filters
-    rv = _add_user_config_file(
-        config_=config_copy,
-        yaml_file=None,
-        default_override=False,
-        _user_config=user_config,
-        validator=validator_true,
-    )
-    assert (
-        expected_config["filters"] == rv["filters"]
-    ), "Expected both default and user filters in the final dict."
-    assert expected_config == rv, "Only the filters should have been changed."
-
-
-def test_add_user_config_file_change_settings(validator_true):
-    original_config = {"settings": {"key_1": "original_value_1"}}
-    user_config= {"settings": {"key_1": "user_value_1"}}
-    rv = _add_user_config_file(
-        config_=original_config,
-        yaml_file=None,
-        default_override=False,
-        _user_config=user_config,
-        validator=validator_true,
-    )
-    assert original_config == user_config, "Expected user settings to override default."
-
-
-def test_add_user_config_file_validation_failed(validator_raise):
+def test_get_user_config_file_validation_failed(validator_raise):
     with pytest.raises(ValueError):
-        _ = _add_user_config_file(
-            config_={"key": "value"},
-            yaml_file=None,
-            default_override=False,
-            _user_config={"who": "cares"},
-            validator=validator_raise,
+        _ = _get_user_config_file(
+            yaml_file=None, _user_config={"who": "cares"}, validator=validator_raise
         )
 
 
 # Testing the subset_check function
 
+
 def test_subset_check_it_is_subset():
     rv = subset_check(subset={"hello"}, set_={"hello", "world"})
     assert rv == True, "Return value should be True."
@@ -194,4 +159,4 @@ def test_subset_check_is_not_subset():
 
 # Test validate_config function
 
-# TODO: continue writing tests.
\ No newline at end of file
+# TODO: continue writing tests.
diff --git a/tests/cli/test_cli.py b/tests/cli/test_cli.py
index bd0137e..5e2c62f 100644
--- a/tests/cli/test_cli.py
+++ b/tests/cli/test_cli.py
@@ -1,50 +1,29 @@
-
 from txtferret.cli import prep_config, bootstrap, get_totals
 
 
 def test_prep_config():
+    def stub_loader(yaml_file=None):
+        return {"yaml_file": yaml_file}
 
-    def stub_loader(yaml_file=None, default_override=False):
-        return {
-            "yaml_file": yaml_file,
-            "config_override": default_override,
-        }
-
-    fake_cli_kwargs = {
-        "config_file": "my_test_file",
-        "config_override": True,
-    }
+    fake_cli_kwargs = {"config_file": "my_test_file"}
 
-    final_config = {
-        "cli_kwargs": {**fake_cli_kwargs},
-        "yaml_file": "my_test_file",
-        "config_override": True,
-    }
+    final_config = {"cli_kwargs": {**fake_cli_kwargs}, "yaml_file": "my_test_file"}
 
     assert prep_config(loader=stub_loader, **fake_cli_kwargs) == final_config
 
 
 def test_bootstrap():
-
     class StubClass:
         def __init__(self, _config):
             pass
+
         def scan_file(self):
             pass
+
         def summary(self):
-            return {
-                "file_name": "hello.txt",
-                "failures": 5,
-                "passes": 5,
-                "time": 28,
-            }
-
-    expected = {
-        "file_name": "hello.txt",
-        "failures": 5,
-        "passes": 5,
-        "time": 28,
-    }
+            return {"file_name": "hello.txt", "failures": 5, "passes": 5, "time": 28}
+
+    expected = {"file_name": "hello.txt", "failures": 5, "passes": 5, "time": 28}
 
     config = None
 
@@ -52,9 +31,6 @@ def test_bootstrap():
 
 
 def test_get_totals():
-    results = [
-        {"failures": 2, "passes": 5},
-        {"failures": 3, "passes": 10},
-    ]
+    results = [{"failures": 2, "passes": 5}, {"failures": 3, "passes": 10}]
 
     assert get_totals(results) == (5, 15)
