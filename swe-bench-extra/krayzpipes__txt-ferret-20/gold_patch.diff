diff --git a/README.md b/README.md
index 04d548a..1725ebe 100644
--- a/README.md
+++ b/README.md
@@ -303,6 +303,9 @@ sanity check which can be paired with a DLP solution. Here are some things it wa
 
 ## Releases
 
+#### Version 0.1.0 - 2019-07-30
+- Removed the `config-override` option
+
 #### Version 0.0.4 - 2019-06-09
 - Added bulk file scanning by the `--bulk` switch.
 - Added multiprocessing for bulk scanning.
diff --git a/setup.py b/setup.py
index c16247c..85ebb7f 100644
--- a/setup.py
+++ b/setup.py
@@ -14,7 +14,7 @@ from setuptools import setup, find_packages
 from codecs import open
 from os import path
 
-__version__ = "0.0.4"
+__version__ = "0.1.0"
 description = "Scan text files for sensitive (or non-sensitive) data."
 
 here = path.abspath(path.dirname(__file__))
diff --git a/src/txtferret/_config.py b/src/txtferret/_config.py
index f8c1723..5a8ce23 100644
--- a/src/txtferret/_config.py
+++ b/src/txtferret/_config.py
@@ -46,7 +46,7 @@ def _load_default_config(config_string=None):
     return yaml.safe_load(default_yaml_config)
 
 
-def load_config(yaml_file=None, default_override=False, config_=None):
+def load_config(yaml_file=None, config_=None, user_config_func=None):
     """Return dict containing config YAML file content.
 
     If not YAML file is explicitly passed as an argument, this function
@@ -54,51 +54,30 @@ def load_config(yaml_file=None, default_override=False, config_=None):
     config file.
 
     :param yaml_file: YAMl file name containing config information.
-    :param default_override: If set to 'True', this will result in
-        the final returned config dict containing only user-defined
-        filters. The defaults will be completely overridden.
     :param config_: Used for tests.
 
     :return: dict with the final configuration.
     """
     # Load the default config as the final config, we will make
     # adjustments as we look at the user-defined config.
-    working_config = config_ or _load_default_config()
 
-    # Return default config if no file is defined by user or settings
-    # introduced through CLI switches.
     if yaml_file is None:
-        return working_config
-
-    # Mix in the user config if present and return it.
-    # If default_override is True, we should return filters ONLY
-    # defined by the user.
-    return _add_user_config_file(
-        config_=working_config, yaml_file=yaml_file, default_override=default_override
-    )
-
-
-def _add_user_config_file(
-    config_=None,
-    yaml_file=None,
-    default_override=None,
-    _user_config=None,
-    validator=None,
-):
-    """Return dict containing default config + user defined config.
+        default_config = config_ or _load_default_config()
+        return default_config
+
+    _user_config_load = user_config_func or _get_user_config_file
+
+    return _user_config_load(yaml_file=yaml_file)
 
-    If default_override is set to 'True', then only return the
-    user-defined filters.
 
-    :param config_: dict containing config file content.
+def _get_user_config_file(yaml_file=None, _user_config=None, validator=None):
+    """Return dict containing default config + user defined config.
+
     :param yaml_file: File name of user-defined configuration.
-    :param default_override: If set to True, will only return filters
-        defined by the user. Default filters will not be returned.
     :param _user_config: Configuration used for tests.
     :param validator: Used to pass in validation stubs during tests.
 
-    :return: dict containing the default + user + cli-defined
-        configuration.
+    :return: dict containing the user-defined configuration file.
     """
     user_defined_config = _user_config or _load_config(yaml_file)
 
@@ -106,20 +85,7 @@ def _add_user_config_file(
 
     _validator(user_defined_config)
 
-    if "filters" in user_defined_config:
-        if default_override:
-            # Remove default filters completely.
-            config_["filters"] = user_defined_config["filters"]
-        else:
-            # Add user filters to default filters.
-            for filter_ in user_defined_config["filters"]:
-                config_["filters"].append(filter_)
-
-    if "settings" in user_defined_config:
-        for key, value in user_defined_config["settings"].items():
-            config_["settings"][key] = value
-
-    return config_
+    return user_defined_config
 
 
 def save_config(data, file_name):
diff --git a/src/txtferret/cli.py b/src/txtferret/cli.py
index 59b76c8..a13eecd 100644
--- a/src/txtferret/cli.py
+++ b/src/txtferret/cli.py
@@ -57,8 +57,7 @@ def prep_config(loader=None, **cli_kwargs):
     """Return a final config file to be sent to TxtFerret."""
     _loader = loader or load_config
     file_name = cli_kwargs["config_file"]
-    override = cli_kwargs["config_override"]
-    config = _loader(yaml_file=file_name, default_override=override)
+    config = _loader(yaml_file=file_name)
     config["cli_kwargs"] = {**cli_kwargs}
     return config
 
@@ -150,12 +149,6 @@ def cli():
 @click.option(
     "--config-file", "-c", default=None, help="Load user-defined config file."
 )
-@click.option(
-    "--config-override",
-    "-co",
-    is_flag=True,
-    help="Delete default filters and only use user-defined filters from config file.",
-)
 @click.option(
     "--delimiter",
     "-d",
