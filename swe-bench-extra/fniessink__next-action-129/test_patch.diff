diff --git a/tests/unittests/test_pick_action.py b/tests/unittests/test_pick_action.py
index 5bb83a6..559e236 100644
--- a/tests/unittests/test_pick_action.py
+++ b/tests/unittests/test_pick_action.py
@@ -220,16 +220,6 @@ class DueTasks(PickActionTestCase):
         self.assertEqual([overdue, future_duedate],
                          pick_action.next_actions([no_duedate, future_duedate, overdue], self.namespace))
 
-    def test_due_date_of_blocked_task(self):
-        """ Test that a task that blocks a task with an earlier due date takes precendence. """
-        tasks = todotxt.Tasks()
-        due_first_but_blocked = todotxt.Task("Task id:1 due:2018-01-01", tasks=tasks)
-        blocking_task = todotxt.Task("Blocking before:1", tasks=tasks)
-        due_second = todotxt.Task("Task due:2018-02-01", tasks=tasks)
-        tasks.extend([due_first_but_blocked, blocking_task, due_second])
-        self.namespace.due = datetime.date.max
-        self.assertEqual([blocking_task, due_second], pick_action.next_actions(tasks, self.namespace))
-
 
 class MinimimPriorityTest(PickActionTest):
     """ Unit test for the mininum priority filter. """
@@ -282,3 +272,21 @@ class BlockedTasksTest(PickActionTest):
         child = todotxt.Task("Child 1 p:1 p:2", tasks=tasks)
         tasks.extend([parent1, parent2, child])
         self.assertEqual([child], pick_action.next_actions(tasks, self.namespace))
+
+    def test_due_date_of_blocked_task(self):
+        """ Test that a task that blocks a task with an earlier due date takes precendence. """
+        tasks = todotxt.Tasks()
+        due_first_but_blocked = todotxt.Task("Task id:1 due:2018-01-01", tasks=tasks)
+        blocking_task = todotxt.Task("Blocking before:1", tasks=tasks)
+        due_second = todotxt.Task("Task due:2018-02-01", tasks=tasks)
+        tasks.extend([due_first_but_blocked, blocking_task, due_second])
+        self.assertEqual([blocking_task, due_second], pick_action.next_actions(tasks, self.namespace))
+
+    def test_priority_of_blocked_task(self):
+        """ Test that a task that blocks a task with a higher priority takes precendence. """
+        tasks = todotxt.Tasks()
+        high_prio_but_blocked = todotxt.Task("(A) Task id:1", tasks=tasks)
+        blocking_task = todotxt.Task("Blocking before:1", tasks=tasks)
+        second_prio = todotxt.Task("(B) Task", tasks=tasks)
+        tasks.extend([high_prio_but_blocked, blocking_task, second_prio])
+        self.assertEqual([blocking_task, second_prio], pick_action.next_actions(tasks, self.namespace))
diff --git a/tests/unittests/todotxt/test_task.py b/tests/unittests/todotxt/test_task.py
index c772674..e99116b 100644
--- a/tests/unittests/todotxt/test_task.py
+++ b/tests/unittests/todotxt/test_task.py
@@ -87,6 +87,34 @@ class TaskPriorityTest(unittest.TestCase):
         self.assertTrue(todotxt.Task("(Z) Task").priority_at_least(None))
         self.assertTrue(todotxt.Task("Task").priority_at_least(None))
 
+    def test_blocking(self):
+        """ Test that the priority of a task without its own priority equals the priority of the task it is
+            blocking. """
+        tasks = todotxt.Tasks()
+        after = todotxt.Task("(A) After id:1", tasks=tasks)
+        before = todotxt.Task("Before before:1", tasks=tasks)
+        tasks.extend([before, after])
+        self.assertEqual("A", before.priority())
+
+    def test_blocking_multiple(self):
+        """ Test that the priority of a task without its own priority equals the highest priority of the tasks it is
+            blocking. """
+        tasks = todotxt.Tasks()
+        after1 = todotxt.Task("(A) After id:1", tasks=tasks)
+        after2 = todotxt.Task("(B) After after:before", tasks=tasks)
+        before = todotxt.Task("Before before:1 id:before", tasks=tasks)
+        tasks.extend([before, after1, after2])
+        self.assertEqual("A", before.priority())
+
+    def test_blocking_completed(self):
+        """ Test that the priority of a completed blocked task is ignored. """
+        tasks = todotxt.Tasks()
+        after = todotxt.Task("(B) After id:1", tasks=tasks)
+        after_completed = todotxt.Task("x (A) After id:2", tasks=tasks)
+        before = todotxt.Task("Before before:1 before:2", tasks=tasks)
+        tasks.extend([before, after, after_completed])
+        self.assertEqual("B", before.priority())
+
 
 class CreationDateTest(unittest.TestCase):
     """ Unit tests for task creation dates. Next-action interprets creation dates in the future as threshold, or
