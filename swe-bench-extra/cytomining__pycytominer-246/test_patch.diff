diff --git a/pycytominer/tests/test_annotate.py b/pycytominer/tests/test_annotate.py
index 1866fbd..50b2166 100644
--- a/pycytominer/tests/test_annotate.py
+++ b/pycytominer/tests/test_annotate.py
@@ -52,11 +52,32 @@ def test_annotate():
     pd.testing.assert_frame_equal(result, expected_result)
 
 
+def test_annotate_platemap_naming():
+
+    # Test annotate with the same column name in platemap and data.
+    platemap_modified_df = PLATEMAP_DF.copy().rename(
+        columns={"well_position": "Metadata_Well"}
+    )
+
+    expected_result = platemap_modified_df.merge(
+        DATA_DF, left_on="Metadata_Well", right_on="Metadata_Well"
+    ).rename(columns={"gene": "Metadata_gene"})
+
+    result = annotate(
+        profiles=DATA_DF,
+        platemap=platemap_modified_df,
+        join_on=["Metadata_Well", "Metadata_Well"],
+    )
+
+    pd.testing.assert_frame_equal(result, expected_result)
+
+
 def test_annotate_output():
+
     annotate(
         profiles=DATA_DF,
         platemap=PLATEMAP_DF,
-        join_on=["Metadata_well_position", "Metadata_Well"],
+        join_on=["well_position", "Metadata_Well"],
         add_metadata_id_to_platemap=False,
         output_file=OUTPUT_FILE,
     )
@@ -64,7 +85,7 @@ def test_annotate_output():
     result = annotate(
         profiles=DATA_DF,
         platemap=PLATEMAP_DF,
-        join_on=["Metadata_well_position", "Metadata_Well"],
+        join_on=["well_position", "Metadata_Well"],
         add_metadata_id_to_platemap=False,
         output_file="none",
     )
@@ -74,11 +95,12 @@ def test_annotate_output():
 
 
 def test_annotate_output_compress():
+
     compress_file = pathlib.Path(f"{TMPDIR}/test_annotate_compress.csv.gz")
     annotate(
         profiles=DATA_DF,
         platemap=PLATEMAP_DF,
-        join_on=["Metadata_well_position", "Metadata_Well"],
+        join_on=["well_position", "Metadata_Well"],
         add_metadata_id_to_platemap=False,
         output_file=compress_file,
         compression_options={"method": "gzip"},
@@ -87,7 +109,7 @@ def test_annotate_output_compress():
     result = annotate(
         profiles=DATA_DF,
         platemap=PLATEMAP_DF,
-        join_on=["Metadata_well_position", "Metadata_Well"],
+        join_on=["well_position", "Metadata_Well"],
         add_metadata_id_to_platemap=False,
         output_file="none",
     )
diff --git a/pycytominer/tests/test_cyto_utils/test_cells.py b/pycytominer/tests/test_cyto_utils/test_cells.py
index 295db95..c9ec8ed 100644
--- a/pycytominer/tests/test_cyto_utils/test_cells.py
+++ b/pycytominer/tests/test_cyto_utils/test_cells.py
@@ -193,6 +193,19 @@ AP_IMAGE_DIFF_NAME = SingleCells(
     sql_file=IMAGE_DIFF_FILE, load_image_data=False, image_feature_categories=["Count"]
 )
 
+SUBSET_FEATURES = [
+    "TableNumber",
+    "ImageNumber",
+    "ObjectNumber",
+    "Cells_Parent_Nuclei",
+    "Cytoplasm_Parent_Cells",
+    "Cytoplasm_Parent_Nuclei",
+    "Cells_a",
+    "Cytoplasm_a",
+    "Nuclei_a",
+]
+AP_SUBSET = SingleCells(sql_file=TMP_SQLITE_FILE, features=SUBSET_FEATURES)
+
 
 def test_SingleCells_init():
     """
@@ -291,10 +304,17 @@ def test_sc_count_sql_table():
 def test_get_sql_table_col_names():
     # Iterate over initialized compartments
     for compartment in AP.compartments:
-        meta_cols, feat_cols = AP.get_sql_table_col_names(table=compartment)
-        assert meta_cols == ["ObjectNumber", "ImageNumber", "TableNumber"]
-        for i in ["a", "b", "c", "d"]:
-            assert f"{compartment.capitalize()}_{i}" in feat_cols
+        expected_meta_cols = ["ObjectNumber", "ImageNumber", "TableNumber"]
+        expected_feat_cols = [f"{compartment.capitalize()}_{i}" for i in ["a", "b", "c", "d"]]
+        if compartment == 'cytoplasm':
+            expected_feat_cols += ["Cytoplasm_Parent_Cells","Cytoplasm_Parent_Nuclei"]
+        col_name_result = AP.get_sql_table_col_names(table=compartment)
+        assert sorted(col_name_result) == sorted(expected_feat_cols+expected_meta_cols)
+        meta_cols, feat_cols = AP.split_column_categories(
+            col_name_result
+        )
+        assert meta_cols == expected_meta_cols
+        assert feat_cols == expected_feat_cols
 
 
 def test_merge_single_cells():
@@ -417,6 +437,13 @@ def test_merge_single_cells():
     )
 
 
+def test_merge_single_cells_subset():
+    sc_merged_df = AP_SUBSET.merge_single_cells()
+    assert (sc_merged_df.shape[1]) == 13
+    non_meta_cols = [x for x in sc_merged_df.columns if "Metadata" not in x]
+    assert len(non_meta_cols) == len([x for x in non_meta_cols if x in SUBSET_FEATURES])
+
+
 def test_merge_single_cells_subsample():
 
     for subsample_frac in [0.1, 0.5, 0.9]:
