diff --git a/.travis.yml b/.travis.yml
index 0da9dd5e..d60852f6 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -12,9 +12,14 @@ matrix:
   - python: '3.5'
     env: BUILD_DOCS=yes BUILD_INSTALLER=yes BUILD_SDIST=yes DEPLOY_PYPI=yes
   - python: '3.6'
-  - python: '3.7-dev'
+  - python: '3.7'
+    dist: xenial
+    sudo: true
+  - python: '3.8-dev'
+    dist: xenial
+    sudo: true
   allow_failures:
-  - python: '3.7-dev'
+  - python: '3.8-dev'
 
 before_install:
   - pip install --disable-pip-version-check --upgrade pip setuptools
diff --git a/appveyor.yml b/appveyor.yml
index c40ae00f..1b26ac10 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -5,10 +5,12 @@ environment:
     - PYTHON: "C:\\Python34"
     - PYTHON: "C:\\Python35"
     - PYTHON: "C:\\Python36"
+    - PYTHON: "C:\\Python37"
     - PYTHON: "C:\\Python27-x64"
     - PYTHON: "C:\\Python34-x64"
     - PYTHON: "C:\\Python35-x64"
     - PYTHON: "C:\\Python36-x64"
+    - PYTHON: "C:\\Python37-x64"
 
 install:
   # If there is a newer build queued for the same PR, cancel this one.
diff --git a/src/streamlink/stream/dash.py b/src/streamlink/stream/dash.py
index e202e53b..1d1c5b65 100644
--- a/src/streamlink/stream/dash.py
+++ b/src/streamlink/stream/dash.py
@@ -11,6 +11,7 @@ from streamlink.stream.stream import Stream
 from streamlink.stream.dash_manifest import MPD, sleeper, sleep_until, utc, freeze_timeline
 from streamlink.stream.ffmpegmux import FFMPEGMuxer
 from streamlink.stream.segmented import SegmentedStreamReader, SegmentedStreamWorker, SegmentedStreamWriter
+from streamlink.utils.l10n import Language
 
 log = logging.getLogger(__name__)
 
@@ -196,6 +197,31 @@ class DASHStream(Stream):
         if not audio:
             audio = [None]
 
+        locale = session.localization
+        locale_lang = locale.language
+        lang = None
+        available_languages = set()
+
+        # if the locale is explicitly set, prefer that language over others
+        for aud in audio:
+            if aud and aud.lang:
+                available_languages.add(aud.lang)
+                try:
+                    if locale.explicit and aud.lang and Language.get(aud.lang) == locale_lang:
+                        lang = aud.lang
+                except LookupError:
+                    continue
+
+        if not lang:
+            # filter by the first language that appears
+            lang = audio[0] and audio[0].lang
+
+        log.debug("Available languages for DASH audio streams: {0} (using: {1})".format(", ".join(available_languages) or "NONE", lang or "n/a"))
+
+        # if the language is given by the stream, filter out other languages that do not match
+        if len(available_languages) > 1:
+            audio = list(filter(lambda a: a.lang is None or a.lang == lang, audio))
+
         for vid, aud in itertools.product(video, audio):
             stream = DASHStream(session, mpd, vid, aud, **args)
             stream_name = []
diff --git a/src/streamlink/stream/hls.py b/src/streamlink/stream/hls.py
index 1faba0ae..0fe12ad5 100644
--- a/src/streamlink/stream/hls.py
+++ b/src/streamlink/stream/hls.py
@@ -295,15 +295,18 @@ class MuxedHLSStream(MuxedStream):
 
     def __init__(self, session, video, audio, force_restart=False, ffmpeg_options=None, **args):
         tracks = [video]
+        maps = ["0:v"]
         if audio:
             if isinstance(audio, list):
                 tracks.extend(audio)
             else:
                 tracks.append(audio)
+        for i in range(1, len(tracks)):
+            maps.append("{0}:a".format(i))
         substreams = map(lambda url: HLSStream(session, url, force_restart=force_restart, **args), tracks)
         ffmpeg_options = ffmpeg_options or {}
 
-        super(MuxedHLSStream, self).__init__(session, *substreams, format="mpegts", **ffmpeg_options)
+        super(MuxedHLSStream, self).__init__(session, *substreams, format="mpegts", maps=maps, **ffmpeg_options)
 
 
 class HLSStream(HTTPStream):
diff --git a/src/streamlink/utils/l10n.py b/src/streamlink/utils/l10n.py
index 0164c7cd..ef4eb8a1 100644
--- a/src/streamlink/utils/l10n.py
+++ b/src/streamlink/utils/l10n.py
@@ -1,4 +1,5 @@
 import locale
+import logging
 
 from streamlink.compat import is_py2
 
@@ -16,6 +17,8 @@ DEFAULT_LANGUAGE = "en"
 DEFAULT_COUNTRY = "US"
 DEFAULT_LANGUAGE_CODE = "{0}_{1}".format(DEFAULT_LANGUAGE, DEFAULT_COUNTRY)
 
+log = logging.getLogger(__name__)
+
 
 class Country(object):
     def __init__(self, alpha2, alpha3, numeric, name, official_name=None):
@@ -147,6 +150,7 @@ class Localization(object):
                 self._language_code = DEFAULT_LANGUAGE_CODE
             else:
                 raise
+        log.debug("Language code: {0}".format(self._language_code))
 
     def equivalent(self, language=None, country=None):
         equivalent = True
