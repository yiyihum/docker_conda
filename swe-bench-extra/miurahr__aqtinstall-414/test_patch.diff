diff --git a/tests/test_archives.py b/tests/test_archives.py
index 66020e0..af52a9f 100644
--- a/tests/test_archives.py
+++ b/tests/test_archives.py
@@ -232,6 +232,38 @@ def test_tools_variants(monkeypatch, tool_name, tool_variant_name, is_expect_fai
     assert len(expected_7z_files) == 0, f"Failed to produce QtPackages for {expected_7z_files}"
 
 
+def to_xml(package_updates: Iterable[Dict]) -> str:
+    def wrap(tag: str, content: str, is_multiline: bool = True):
+        newline = "\n" if is_multiline else ""
+        return f"<{tag}>{newline}{content}{newline}</{tag}>"
+
+    return wrap(
+        "Updates",
+        "\n".join(
+            [
+                wrap("PackageUpdate", "\n".join([wrap(key, value, False) for key, value in pu.items()]))
+                for pu in package_updates
+            ]
+        ),
+    )
+
+
+@pytest.mark.parametrize(
+    "tool_name, variant_name, version, actual_version",
+    (("tools_qtcreator", "qt.tools.qtcreator", "1.2.3", "3.2.1"),),
+)
+def test_tool_archive_wrong_version(monkeypatch, tool_name, variant_name, version, actual_version):
+    def _mock(self, *args):
+        self.update_xml_text = to_xml([dict(Name=variant_name, Version=actual_version)])
+
+    monkeypatch.setattr(QtArchives, "_download_update_xml", _mock)
+
+    host, target, base = "mac", "desktop", "https://example.com"
+    with pytest.raises(NoPackageFound) as e:
+        ToolArchives(host, target, tool_name, base, version_str=version, arch=variant_name)
+    assert e.type == NoPackageFound
+
+
 # Test the helper class
 def test_module_to_package():
     qt_base_names = ["qt.999.clang", "qt9.999.clang", "qt9.999.addon.clang"]
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 4d90566..09427ca 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -14,7 +14,7 @@ def expected_help():
     return (
         "usage: aqt [-h] [-c CONFIG]\n"
         "           {install-qt,install-tool,install-doc,install-example,install-src,list-qt,list-tool,"
-        "install,tool,doc,example,src,help,version}\n"
+        "install,tool,doc,examples,src,help,version}\n"
         "           ...\n"
         "\n"
         "Another unofficial Qt Installer.\n"
@@ -33,7 +33,7 @@ def expected_help():
         "  commands {install|tool|src|examples|doc} are deprecated and marked for removal\n"
         "\n"
         "  {install-qt,install-tool,install-doc,install-example,install-src,list-qt,list-tool,"
-        "install,tool,doc,example,src,help,version}\n"
+        "install,tool,doc,examples,src,help,version}\n"
         "                        Please refer to each help message by using '--help' with each subcommand\n"
     )
 
@@ -218,6 +218,74 @@ def test_cli_input_errors(capsys, expected_help, cmd, expect_msg, should_show_he
     assert err.rstrip().endswith(expect_msg)
 
 
+# These commands use the new syntax with the legacy commands
+@pytest.mark.parametrize(
+    "cmd",
+    (
+        "install linux desktop 5.10.0",
+        "install linux desktop 5.10.0 gcc_64",
+        "src linux desktop 5.10.0",
+        "doc linux desktop 5.10.0",
+        "example linux desktop 5.10.0",
+        "tool windows desktop tools_ifw",
+    ),
+)
+def test_cli_legacy_commands_with_wrong_syntax(cmd):
+    cli = Cli()
+    cli._setup_settings()
+    with pytest.raises(SystemExit) as e:
+        cli.run(cmd.split())
+    assert e.type == SystemExit
+
+
+@pytest.mark.parametrize(
+    "cmd",
+    (
+        "tool windows desktop tools_ifw qt.tools.ifw.31",  # New syntax
+        "tool windows desktop tools_ifw 1.2.3",
+    ),
+)
+def test_cli_legacy_tool_new_syntax(monkeypatch, capsys, cmd):
+    # These incorrect commands cannot be filtered out directly by argparse because
+    # they have the correct number of arguments.
+    command = cmd.split()
+
+    expected = (
+        "Warning: The command 'tool' is deprecated and marked for removal in a future version of aqt.\n"
+        "In the future, please use the command 'install-tool' instead.\n"
+        "Invalid version: 'tools_ifw'! Please use the form '5.X.Y'.\n"
+    )
+
+    cli = Cli()
+    cli._setup_settings()
+    assert 1 == cli.run(command)
+    out, err = capsys.readouterr()
+    actual = err[err.index("\n") + 1 :]
+    assert actual == expected
+
+
+# These commands come directly from examples in the legacy documentation
+@pytest.mark.parametrize(
+    "cmd",
+    (
+        "install 5.10.0 linux desktop",  # default arch
+        "install 5.10.2 linux android android_armv7",
+        "src 5.15.2 windows desktop --archives qtbase --kde",
+        "doc 5.15.2 windows desktop -m qtcharts qtnetworkauth",
+        "examples 5.15.2 windows desktop -m qtcharts qtnetworkauth",
+        "tool linux tools_ifw 4.0 qt.tools.ifw.40",
+    ),
+)
+def test_cli_legacy_commands_with_correct_syntax(monkeypatch, cmd):
+    # Pretend to install correctly when any command is run
+    for func in ("run_install_qt", "run_install_src", "run_install_doc", "run_install_example", "run_install_tool"):
+        monkeypatch.setattr(Cli, func, lambda *args, **kwargs: 0)
+
+    cli = Cli()
+    cli._setup_settings()
+    assert 0 == cli.run(cmd.split())
+
+
 def test_cli_unexpected_error(monkeypatch, capsys):
     def _mocked_run(*args):
         raise RuntimeError("Some unexpected error")
