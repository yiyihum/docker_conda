diff --git a/tests/test_cli.py b/tests/test_cli.py
index c24ae65..1357704 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -191,11 +191,34 @@ class TestCLI:
                 'Plaintext': b'quux',
             }
         )
+
+        def fake_call(command):
+            assert len(command) == 2
+            assert command[0] == 'nano'
+            filename = command[1]
+            with open(filename, 'r') as fp:
+                obj = yaml.safe_load(fp.read())
+            assert obj == {
+                'MY_ENCRYPTED_VAR': {'to_encrypt': 'quux'},
+                'MY_UNENCRYPTED_VAR': 'bar',
+                'TREEHUGGER_APP': 'baz',
+                'TREEHUGGER_STAGE': 'qux',
+            }
+
+            with open(filename, 'w') as fp:
+                fp.write(textwrap.dedent('''\
+                    MY_ENCRYPTED_VAR: {to_encrypt: quux2}
+                    MY_UNENCRYPTED_VAR: bar
+                    TREEHUGGER_APP: baz
+                    TREEHUGGER_STAGE: qux
+                '''))
+            return 0
+
         kms_stub.add_response(
             'encrypt',
             expected_params={
                 'KeyId': 'alias/treehugger',
-                'Plaintext': b'quux',
+                'Plaintext': b'quux2',
                 'EncryptionContext': {
                     'treehugger_app': 'baz',
                     'treehugger_key': 'MY_ENCRYPTED_VAR',
@@ -207,6 +230,34 @@ class TestCLI:
                 'CiphertextBlob': b'foo',
             }
         )
+        with mock.patch.dict(os.environ, {'EDITOR': 'nano'}), mock.patch('subprocess.call', new=fake_call):
+            main(['edit', six.text_type(tmpfile)])
+
+    def test_edit_no_change(self, tmpdir, kms_stub):
+        tmpfile = tmpdir.join('test.yml')
+        encrypted_var = base64.b64encode(b'foo')
+        tmpfile.write(textwrap.dedent('''\
+            MY_ENCRYPTED_VAR:
+              encrypted: {encrypted_var}
+            MY_UNENCRYPTED_VAR: bar
+            TREEHUGGER_APP: baz
+            TREEHUGGER_STAGE: qux
+        '''.format(encrypted_var=encrypted_var.decode('utf-8'))))
+        kms_stub.add_response(
+            'decrypt',
+            expected_params={
+                'CiphertextBlob': b'foo',
+                'EncryptionContext': {
+                    'treehugger_app': 'baz',
+                    'treehugger_key': 'MY_ENCRYPTED_VAR',
+                    'treehugger_stage': 'qux',
+                }
+            },
+            service_response={
+                'KeyId': 'treehugger',
+                'Plaintext': b'quux',
+            }
+        )
 
         with mock.patch.dict(os.environ, {'EDITOR': 'nano'}), mock.patch('subprocess.call') as mock_call:
             mock_call.return_value = 0
