diff --git a/asks/http_utils.py b/asks/http_utils.py
index 45ae42d..9d8d56b 100644
--- a/asks/http_utils.py
+++ b/asks/http_utils.py
@@ -3,18 +3,15 @@ Utilities for handling some aspects of http
 """
 
 
-__all__ = ["decompress", "parse_content_encoding"]
+__all__ = ["decompress", "decompress_one", "parse_content_encoding"]
 
 
-from gzip import decompress as gdecompress
-from zlib import decompress as zdecompress
+import codecs
+from zlib import decompressobj, MAX_WBITS
 
 from .utils import processor
 
 
-_compression_mapping = {"gzip": gdecompress, "deflate": zdecompress}
-
-
 def parse_content_encoding(content_encoding: str) -> [str]:
     compressions = [x.strip() for x in content_encoding.split(",")]
     return compressions
@@ -23,11 +20,47 @@ def parse_content_encoding(content_encoding: str) -> [str]:
 @processor
 def decompress(compressions, encoding=None):
     data = b""
+    # https://tools.ietf.org/html/rfc7231
+    # "If one or more encodings have been applied to a representation, the
+    # sender that applied the encodings MUST generate a Content-Encoding
+    # header field that lists the content codings in the order in which
+    # they were applied."
+    # Thus, reversed(compressions).
+    decompressors = [
+        decompress_one(compression) for compression in reversed(compressions)
+    ]
+    if encoding:
+        decompressors.append(make_decoder_shim(encoding))
+    while True:
+        data = yield data
+        for decompressor in decompressors:
+            data = decompressor.send(data)
+
+
+# https://tools.ietf.org/html/rfc7230#section-4.2.1 - #section-4.2.3
+
+DECOMPRESS_WBITS = {
+    "deflate": MAX_WBITS,
+    "gzip": MAX_WBITS + 16,
+    "x-gzip": MAX_WBITS + 16,
+}
+
+
+@processor
+def decompress_one(compression):
+    data = b""
+    decompressor = decompressobj(wbits=DECOMPRESS_WBITS[compression])
+    while True:
+        data = yield data
+        data = decompressor.decompress(data)
+    yield decompressor.flush()
+
+
+@processor
+def make_decoder_shim(encoding):
+    data = b""
+    decoder = codecs.getincrementaldecoder(encoding)(errors="replace")
     while True:
-        if encoding:
-            data = yield data.decode(encoding, errors="replace")
-        else:
-            data = yield data
-        for compression in compressions:
-            if compression in _compression_mapping:
-                data = _compression_mapping[compression](data)
+        data = yield data
+        data = decoder.decode(data)
+    yield decoder.decode(b"", final=True)

