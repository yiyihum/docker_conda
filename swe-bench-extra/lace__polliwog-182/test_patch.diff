diff --git a/polliwog/plane/test_functions.py b/polliwog/plane/test_functions.py
index 895155a..e29934e 100644
--- a/polliwog/plane/test_functions.py
+++ b/polliwog/plane/test_functions.py
@@ -20,7 +20,7 @@ def assert_plane_equation_satisfies_points(plane_equation, points):
 
 
 def test_plane_normal_from_points_parity():
-    from ..shapes import create_triangular_prism
+    from ..shapes import triangular_prism
     from ..tri import surface_normals
 
     points = np.array([[3.0, 0.0, 0.0], [0.0, 3.0, 0.0], [0.0, 0.0, 3.0]])
@@ -37,7 +37,7 @@ def test_plane_normal_from_points_parity():
     p1 = np.array([3.0, 0.0, 0.0])
     p2 = np.array([0.0, 3.0, 0.0])
     p3 = np.array([0.0, 0.0, 3.0])
-    vertices = create_triangular_prism(p1, p2, p3, 1.0)
+    vertices = triangular_prism(p1, p2, p3, 1.0)
 
     np.testing.assert_allclose(
         plane_normal_from_points(vertices), surface_normals(vertices)
diff --git a/polliwog/plane/test_plane.py b/polliwog/plane/test_plane.py
index 8c86bd3..5fc77c7 100644
--- a/polliwog/plane/test_plane.py
+++ b/polliwog/plane/test_plane.py
@@ -117,15 +117,48 @@ def test_points_in_front():
 
     plane = Plane(sample, normal)
 
-    pts = np.array([[425.0, 425.0, 25.0], [-500.0, -500.0, 25.0]])
+    pts = np.array([[425.0, 425.0, 25.0], [-500.0, -500.0, 25.0], [1.0, 1.0, 0.0]])
+
+    expected_indices = np.array([0])
+    np.testing.assert_array_equal(plane.points_in_front(pts), pts[expected_indices])
+    np.testing.assert_array_equal(
+        plane.points_in_front(pts, ret_indices=True), expected_indices
+    )
+
+    expected_indices = np.array([1])
+    np.testing.assert_array_equal(
+        plane.points_in_front(pts, inverted=True), pts[expected_indices]
+    )
+    np.testing.assert_array_equal(
+        plane.points_in_front(pts, inverted=True, ret_indices=True), expected_indices
+    )
+
+
+def test_points_on_or_in_front():
+    # diagonal plane @ origin - draw a picture!
+    normal = np.array([1.0, 1.0, 0.0])
+    normal /= np.linalg.norm(normal)
+    sample = np.array([1.0, 1.0, 0.0])
+
+    plane = Plane(sample, normal)
+
+    pts = np.array([[425.0, 425.0, 25.0], [-500.0, -500.0, 25.0], [1.0, 1.0, 0.0]])
+
+    expected_indices = np.array([0, 2])
+    np.testing.assert_array_equal(
+        plane.points_on_or_in_front(pts), pts[expected_indices]
+    )
+    np.testing.assert_array_equal(
+        plane.points_on_or_in_front(pts, ret_indices=True), expected_indices
+    )
 
-    np.testing.assert_array_equal(plane.points_in_front(pts), pts[0:1])
+    expected_indices = np.array([1, 2])
     np.testing.assert_array_equal(
-        plane.points_in_front(pts, ret_indices=True), np.array([0])
+        plane.points_on_or_in_front(pts, inverted=True), pts[expected_indices]
     )
-    np.testing.assert_array_equal(plane.points_in_front(pts, inverted=True), pts[1:2])
     np.testing.assert_array_equal(
-        plane.points_in_front(pts, inverted=True, ret_indices=True), np.array([1])
+        plane.points_on_or_in_front(pts, inverted=True, ret_indices=True),
+        expected_indices,
     )
 
 
diff --git a/polliwog/pointcloud/test_pointcloud_functions.py b/polliwog/pointcloud/test_pointcloud_functions.py
index cae1a55..6a1722f 100644
--- a/polliwog/pointcloud/test_pointcloud_functions.py
+++ b/polliwog/pointcloud/test_pointcloud_functions.py
@@ -2,7 +2,7 @@ import math
 import numpy as np
 import pytest
 import vg
-from ._pointcloud_functions import percentile
+from ._pointcloud_functions import extent, percentile
 
 
 def random_points_along_side_of_cylinder(radius=1.0, height=3.0, n_samples=1):
@@ -30,3 +30,18 @@ def test_percentile():
 
     with pytest.raises(ValueError, match="Axis must be non-zero"):
         percentile(points=points, axis=np.array([0, 0, 0]), percentile=75)
+
+
+def test_extent():
+    points = np.array(
+        [[0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 11, 0]], dtype=np.float64
+    )
+    np.testing.assert_almost_equal(extent(points), 14.87, decimal=2)
+
+    distance, i, j = extent(points, ret_indices=True)
+    np.testing.assert_almost_equal(distance, 14.87, decimal=2)
+    assert i == 2
+    assert j == 3
+
+    with pytest.raises(ValueError, match="At least two points are required"):
+        extent(np.array([[0, 0, 0]]))
diff --git a/polliwog/shapes/test_shapes.py b/polliwog/shapes/test_shapes.py
index 2dd4d7a..09d04e1 100644
--- a/polliwog/shapes/test_shapes.py
+++ b/polliwog/shapes/test_shapes.py
@@ -1,8 +1,9 @@
 import numpy as np
-from ._shapes import create_cube, create_rectangle, create_rectangular_prism
+import pytest
+from ._shapes import cube, rectangular_prism, triangular_prism
 
 
-def test_create_rectangular_prism():
+def test_rectangular_prism():
     origin = np.array([3.0, 4.0, 5.0])
     size = np.array([2.0, 10.0, 20.0])
 
@@ -35,36 +36,42 @@ def test_create_rectangular_prism():
         ]
     )
 
-    vertices, faces = create_rectangular_prism(
+    vertices, faces = rectangular_prism(
         origin=origin, size=size, ret_unique_vertices_and_faces=True
     )
     np.testing.assert_array_equal(faces, expected_faces)
     np.testing.assert_array_equal(vertices, expected_vertices)
 
-    flattened_vertices = create_rectangular_prism(
+    flattened_vertices = rectangular_prism(
         origin=origin, size=size, ret_unique_vertices_and_faces=False
     )
     np.testing.assert_array_equal(flattened_vertices, expected_vertices[expected_faces])
 
 
-def test_create_cube():
+def test_cube():
     origin = np.array([3.0, 4.0, 5.0])
     size = 2.0
 
-    flattened_vertices = create_cube(origin=origin, size=size)
+    flattened_vertices = cube(origin=origin, size=size)
 
     expected_first_triangle = np.array(
         [[3.0, 4.0, 5.0], [5.0, 4.0, 5.0], [5.0, 4.0, 7.0]]
     )
     np.testing.assert_array_equal(flattened_vertices[0], expected_first_triangle)
 
+    with pytest.raises(ValueError, match="`size` should be a number"):
+        cube(origin=origin, size="not a number")
 
-def test_create_rectangle():
-    expected_vertices = np.array(
-        [[1.0, 0.0, 0.0], [-1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, -1.0]]
-    )
-    expected_faces = np.array([[0, 1, 2], [3, 1, 0]])
 
-    vertices, faces = create_rectangle(ret_unique_vertices_and_faces=True)
-    np.testing.assert_array_equal(faces, expected_faces)
-    np.testing.assert_array_equal(vertices, expected_vertices)
+def test_triangular_prism():
+    p1 = np.array([3.0, 0.0, 0.0])
+    p2 = np.array([0.0, 3.0, 0.0])
+    p3 = np.array([0.0, 0.0, 3.0])
+
+    flattened_vertices = triangular_prism(p1, p2, p3, 1.0)
+
+    expected_first_triangle = np.array([p1, p2, p3])
+    np.testing.assert_array_equal(flattened_vertices[0], expected_first_triangle)
+
+    with pytest.raises(ValueError, match="`height` should be a number"):
+        triangular_prism(p1, p2, p3, "not-a-number")
diff --git a/polliwog/tri/test_functions.py b/polliwog/tri/test_functions.py
index 74337ca..3f4a5e9 100644
--- a/polliwog/tri/test_functions.py
+++ b/polliwog/tri/test_functions.py
@@ -21,12 +21,12 @@ def test_surface_normals_from_points_single():
 
 
 def test_surface_normals_from_points_vectorized():
-    from ..shapes import create_triangular_prism
+    from ..shapes import triangular_prism
 
     p1 = np.array([3.0, 0.0, 0.0])
     p2 = np.array([0.0, 3.0, 0.0])
     p3 = np.array([0.0, 0.0, 3.0])
-    vertices = create_triangular_prism(p1, p2, p3, 1.0)
+    vertices = triangular_prism(p1, p2, p3, 1.0)
 
     expected_normals = vg.normalize(
         np.array(
