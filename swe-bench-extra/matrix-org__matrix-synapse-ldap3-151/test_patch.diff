diff --git a/tests/__init__.py b/tests/__init__.py
index 7fceac4..606f707 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -14,7 +14,7 @@ try:
 except ImportError:
     from io import BytesIO
 
-from ldap_auth_provider import LdapAuthProvider
+from ldap_auth_provider import LdapAuthProviderModule
 
 LDIF = b"""\
 dn: dc=org
@@ -168,13 +168,13 @@ async def create_ldap_server(ldap_server_type: Type[LDAPServer] = LDAPServer):
     return _LdapServer(listener)
 
 
-def create_auth_provider(server, account_handler, config=None):
-    "Creates an LdapAuthProvider from an LDAP server and a mock account_handler"
+def create_auth_provider(server, api, config=None):
+    "Creates an LdapAuthProviderModule from an LDAP server and a mock Module API"
 
     if config:
-        config = LdapAuthProvider.parse_config(config)
+        config = LdapAuthProviderModule.parse_config(config)
     else:
-        config = LdapAuthProvider.parse_config(
+        config = LdapAuthProviderModule.parse_config(
             {
                 "enabled": True,
                 "uri": "ldap://localhost:%d" % server.listener.getHost().port,
@@ -187,7 +187,7 @@ def create_auth_provider(server, account_handler, config=None):
             }
         )
 
-    return LdapAuthProvider(config, account_handler=account_handler)
+    return LdapAuthProviderModule(config, api=api)
 
 
 def make_awaitable(result: Any) -> Awaitable[Any]:
diff --git a/tests/test_ad.py b/tests/test_ad.py
index 2bdbb79..1e5cd5b 100644
--- a/tests/test_ad.py
+++ b/tests/test_ad.py
@@ -66,13 +66,19 @@ class AbstractLdapActiveDirectoryTestCase:
         self.ldap_server = yield ensureDeferred(
             create_ldap_server(_ActiveDirectoryLDAPServer)
         )
-        account_handler = Mock(spec_set=["check_user_exists", "get_qualified_user_id"])
-        account_handler.check_user_exists.return_value = make_awaitable(True)
-        account_handler.get_qualified_user_id = get_qualified_user_id
+        module_api = Mock(
+            spec_set=[
+                "check_user_exists",
+                "get_qualified_user_id",
+                "register_password_auth_provider_callbacks",
+            ]
+        )
+        module_api.check_user_exists.return_value = make_awaitable(True)
+        module_api.get_qualified_user_id = get_qualified_user_id
 
         self.auth_provider = create_auth_provider(
             self.ldap_server,
-            account_handler,
+            module_api,
             config=self.getConfig(),
         )
 
diff --git a/tests/test_simple.py b/tests/test_simple.py
index 6d99ccc..0ffaf7f 100644
--- a/tests/test_simple.py
+++ b/tests/test_simple.py
@@ -33,13 +33,19 @@ class LdapSimpleTestCase(unittest.TestCase):
     @defer.inlineCallbacks
     def setUp(self):
         self.ldap_server = yield defer.ensureDeferred(create_ldap_server())
-        account_handler = Mock(spec_set=["check_user_exists", "get_qualified_user_id"])
-        account_handler.check_user_exists.return_value = make_awaitable(True)
-        account_handler.get_qualified_user_id = get_qualified_user_id
+        module_api = Mock(
+            spec_set=[
+                "check_user_exists",
+                "get_qualified_user_id",
+                "register_password_auth_provider_callbacks",
+            ]
+        )
+        module_api.check_user_exists.return_value = make_awaitable(True)
+        module_api.get_qualified_user_id = get_qualified_user_id
 
         self.auth_provider = create_auth_provider(
             self.ldap_server,
-            account_handler,
+            module_api,
             config={
                 "enabled": True,
                 "uri": "ldap://localhost:%d" % self.ldap_server.listener.getHost().port,
@@ -94,13 +100,19 @@ class LdapSearchTestCase(unittest.TestCase):
     @defer.inlineCallbacks
     def setUp(self):
         self.ldap_server = yield defer.ensureDeferred(create_ldap_server())
-        account_handler = Mock(spec_set=["check_user_exists", "get_qualified_user_id"])
-        account_handler.check_user_exists.return_value = make_awaitable(True)
-        account_handler.get_qualified_user_id = get_qualified_user_id
+        module_api = Mock(
+            spec_set=[
+                "check_user_exists",
+                "get_qualified_user_id",
+                "register_password_auth_provider_callbacks",
+            ]
+        )
+        module_api.check_user_exists.return_value = make_awaitable(True)
+        module_api.get_qualified_user_id = get_qualified_user_id
 
         self.auth_provider = create_auth_provider(
             self.ldap_server,
-            account_handler,
+            module_api,
             config={
                 "enabled": True,
                 "uri": "ldap://localhost:%d" % self.ldap_server.listener.getHost().port,
