diff --git a/environ/environ.py b/environ/environ.py
index 83642ff..a38324f 100644
--- a/environ/environ.py
+++ b/environ/environ.py
@@ -31,10 +31,10 @@ from .fileaware_mapping import FileAwareMapping
 
 try:
     from os import PathLike
+except ImportError:  # Python 3.5 support
+    from pathlib import PurePath as PathLike
 
-    Openable = (str, PathLike)
-except ImportError:
-    Openable = (str,)
+Openable = (str, PathLike)
 
 logger = logging.getLogger(__name__)
 
@@ -732,13 +732,16 @@ class Env:
         return config
 
     @classmethod
-    def read_env(cls, env_file=None, **overrides):
+    def read_env(cls, env_file=None, overwrite=False, **overrides):
         """Read a .env file into os.environ.
 
         If not given a path to a dotenv path, does filthy magic stack
         backtracking to find the dotenv in the same directory as the file that
         called read_env.
 
+        By default, won't overwrite any existing environment variables. You can
+        enable this behaviour by setting ``overwrite=True``.
+
         Refs:
         - https://wellfire.co/learn/easier-12-factor-django
         - https://gist.github.com/bennylope/2999704
@@ -757,7 +760,8 @@ class Env:
 
         try:
             if isinstance(env_file, Openable):
-                with open(env_file) as f:
+                # Python 3.5 support (wrap path with str).
+                with open(str(env_file)) as f:
                     content = f.read()
             else:
                 with env_file as f:
@@ -788,13 +792,18 @@ class Env:
                 if m3:
                     val = re.sub(r'\\(.)', _keep_escaped_format_characters,
                                  m3.group(1))
-                cls.ENVIRON.setdefault(key, str(val))
+                overrides[key] = str(val)
             else:
                 logger.warn('Invalid line: %s', line)
 
-        # set defaults
+        if overwrite:
+            def set_environ(key, value):
+                cls.ENVIRON[key] = value
+        else:
+            set_environ = cls.ENVIRON.setdefault
+
         for key, value in overrides.items():
-            cls.ENVIRON.setdefault(key, value)
+            set_environ(key, value)
 
 
 class FileAwareEnv(Env):

