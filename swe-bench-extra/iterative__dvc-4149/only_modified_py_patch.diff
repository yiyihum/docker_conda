diff --git a/dvc/remote/azure.py b/dvc/remote/azure.py
--- a/dvc/remote/azure.py
+++ b/dvc/remote/azure.py
@@ -121,6 +121,8 @@ def _list_paths(self, bucket, prefix):
             next_marker = blobs.next_marker
 
     def walk_files(self, path_info, **kwargs):
+        if not kwargs.pop("prefix", False):
+            path_info = path_info / ""
         for fname in self._list_paths(
             path_info.bucket, path_info.path, **kwargs
         ):
diff --git a/dvc/remote/base.py b/dvc/remote/base.py
--- a/dvc/remote/base.py
+++ b/dvc/remote/base.py
@@ -213,7 +213,12 @@ def iscopy(self, path_info):
         return False  # We can't be sure by default
 
     def walk_files(self, path_info, **kwargs):
-        """Return a generator with `PathInfo`s to all the files"""
+        """Return a generator with `PathInfo`s to all the files.
+
+        Optional kwargs:
+            prefix (bool): If true `path_info` will be treated as a prefix
+                rather than directory path.
+        """
         raise NotImplementedError
 
     def is_empty(self, path_info):
@@ -522,14 +527,16 @@ def list_paths(self, prefix=None, progress_callback=None):
                 path_info = self.path_info / prefix[:2] / prefix[2:]
             else:
                 path_info = self.path_info / prefix[:2]
+            prefix = True
         else:
             path_info = self.path_info
+            prefix = False
         if progress_callback:
-            for file_info in self.walk_files(path_info):
+            for file_info in self.walk_files(path_info, prefix=prefix):
                 progress_callback()
                 yield file_info.path
         else:
-            yield from self.walk_files(path_info)
+            yield from self.walk_files(path_info, prefix=prefix)
 
     def list_hashes(self, prefix=None, progress_callback=None):
         """Iterate over hashes in this tree.
diff --git a/dvc/remote/gdrive.py b/dvc/remote/gdrive.py
--- a/dvc/remote/gdrive.py
+++ b/dvc/remote/gdrive.py
@@ -553,7 +553,7 @@ def _list_paths(self, prefix=None):
             )
 
     def walk_files(self, path_info, **kwargs):
-        if path_info == self.path_info:
+        if path_info == self.path_info or not kwargs.pop("prefix", False):
             prefix = None
         else:
             prefix = path_info.path
diff --git a/dvc/remote/gs.py b/dvc/remote/gs.py
--- a/dvc/remote/gs.py
+++ b/dvc/remote/gs.py
@@ -144,7 +144,9 @@ def _list_paths(self, path_info, max_items=None):
             yield blob.name
 
     def walk_files(self, path_info, **kwargs):
-        for fname in self._list_paths(path_info / "", **kwargs):
+        if not kwargs.pop("prefix", False):
+            path_info = path_info / ""
+        for fname in self._list_paths(path_info, **kwargs):
             # skip nested empty directories
             if fname.endswith("/"):
                 continue
diff --git a/dvc/remote/oss.py b/dvc/remote/oss.py
--- a/dvc/remote/oss.py
+++ b/dvc/remote/oss.py
@@ -100,6 +100,8 @@ def _list_paths(self, path_info):
             yield blob.key
 
     def walk_files(self, path_info, **kwargs):
+        if not kwargs.pop("prefix", False):
+            path_info = path_info / ""
         for fname in self._list_paths(path_info):
             if fname.endswith("/"):
                 continue
diff --git a/dvc/remote/s3.py b/dvc/remote/s3.py
--- a/dvc/remote/s3.py
+++ b/dvc/remote/s3.py
@@ -187,7 +187,9 @@ def _list_paths(self, path_info, max_items=None):
         )
 
     def walk_files(self, path_info, **kwargs):
-        for fname in self._list_paths(path_info / "", **kwargs):
+        if not kwargs.pop("prefix", False):
+            path_info = path_info / ""
+        for fname in self._list_paths(path_info, **kwargs):
             if fname.endswith("/"):
                 continue
 

