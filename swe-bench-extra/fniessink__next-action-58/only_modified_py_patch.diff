diff --git a/next_action/arguments/parser.py b/next_action/arguments/parser.py
index 0d3ed9d..a53589e 100644
--- a/next_action/arguments/parser.py
+++ b/next_action/arguments/parser.py
@@ -10,7 +10,9 @@ def build_parser(default_filenames: List[str]) -> argparse.ArgumentParser:
     """ Create the arguments parsers. """
     parser = argparse.ArgumentParser(
         description="Show the next action in your todo.txt. The next action is selected from the tasks in the todo.txt \
-                     file based on priority, due date, creation date, and supplied filters.",
+                     file based on task properties such as priority, due date, and creation date. Limit the tasks from \
+                     which the next action is selected by specifying contexts the tasks must have and/or projects the \
+                     tasks must belong to.",
         formatter_class=argparse.ArgumentDefaultsHelpFormatter,
         usage="%(prog)s [-h] [--version] [-f <filename>] [-n <number> | -a] [<context|project> ...]")
     add_optional_arguments(parser, default_filenames)
diff --git a/next_action/pick_action.py b/next_action/pick_action.py
index 2542cfb..71646d4 100644
--- a/next_action/pick_action.py
+++ b/next_action/pick_action.py
@@ -6,9 +6,10 @@ from typing import Set, Sequence, Tuple
 from .todotxt import Task
 
 
-def sort_key(task: Task) -> Tuple[str, datetime.date, datetime.date]:
+def sort_key(task: Task) -> Tuple[str, datetime.date, datetime.date, int]:
     """ Return the sort key for a task. """
-    return (task.priority() or "ZZZ", task.due_date() or datetime.date.max, task.creation_date() or datetime.date.max)
+    return (task.priority() or "ZZZ", task.due_date() or datetime.date.max, task.creation_date() or datetime.date.max,
+            -len(task.projects()))
 
 
 def next_actions(tasks: Sequence[Task], contexts: Set[str] = None, projects: Set[str] = None,

