diff --git a/gridit/classmethods.py b/gridit/classmethods.py
index ace5ef1..767c9d8 100644
--- a/gridit/classmethods.py
+++ b/gridit/classmethods.py
@@ -143,8 +143,11 @@ def from_vector(
         Input file, such as a shapefile.
     resolution : float
         A grid resolution, e.g. 250.0 for 250m x 250m
-    filter : dict, optional
-        Property filter criteria.
+    filter : dict, str, optional
+        Property filter criteria. For example ``{"id": 4}`` to select one
+        feature with attribute "id" value 4. Or ``{"id": [4, 7, 19]}`` to
+        select features with several values. A SQL WHERE statement can also be
+        used if Fiona 1.9 or later is installed.
     buffer : float, default 0.0
         Add buffer to extents of vector data.
     layer : int or str, default None
@@ -173,38 +176,13 @@ def from_vector(
     with fiona.open(fname, "r", layer=layer) as ds:
         projection = ds.crs_wkt
         if filter:
-            for f in ds:
-                r = []
-                for k in filter.keys():
-                    r.append(f["properties"].get(k, "") == filter[k])
-                if len(r) > 0 and all(r):
-                    break
-            else:
-                raise ValueError(
-                    f"could not find {filter} in {fname} layer {layer}")
-            geom_type = f["geometry"]["type"]
-            if geom_type == "Polygon":
-                ar = np.array(f["geometry"]["coordinates"])
-                assert ar.ndim == 3
-                assert ar.shape[2] >= 2
-                xcs = ar[:, :, 0]
-                ycs = ar[:, :, 1]
-            elif geom_type == "LineString":
-                ar = np.array(f["geometry"]["coordinates"])
-                assert ar.ndim == 2
-                assert ar.shape[1] >= 2
-                xcs = ar[:, 0]
-                ycs = ar[:, 1]
-            elif geom_type == "Point":
-                ar = np.array(f["geometry"]["coordinates"])
-                assert ar.ndim == 1
-                assert ar.shape[0] >= 2
-                xcs = ar[0]
-                ycs = ar[1]
-            else:
-                raise NotImplementedError(
-                    f"unexpected geometry type {geom_type}")
-            bounds = xcs.min(), ycs.min(), xcs.max(), ycs.max()
+            from gridit.file import fiona_filter_collection
+
+            flt = fiona_filter_collection(ds, filter)
+            if len(flt) == 0:
+                logger.error("no features filtered with %s", filter)
+            bounds = flt.bounds
+            flt.close()
         else:  # full shapefile bounds
             bounds = ds.bounds
     shape, top_left = get_shape_top_left(bounds, resolution, buffer)
diff --git a/gridit/file.py b/gridit/file.py
index 58e0877..cf4b855 100644
--- a/gridit/file.py
+++ b/gridit/file.py
@@ -1,8 +1,16 @@
 """File methods."""
+from collections.abc import Iterable
 from pathlib import Path
 
 import numpy as np
 
+__all__ = [
+    "fiona_filter_collection",
+    "fiona_property_type",
+    "float32_is_also_float64",
+    "write_raster",
+    "write_vector",
+]
 
 def float32_is_also_float64(val):
     """Return True if float32 and float64 values are the same."""
@@ -232,3 +240,69 @@ def write_vector(
     with fiona.open(fname, "w", **kwargs) as ds:
         ds.writerecords(recs)
     grid.logger.info("wrote %d features", idxs.size)
+
+
+def fiona_filter_collection(ds, filter):
+    """Returns Fiona collection with applied filter.
+
+    Parameters
+    ----------
+    ds : fiona.Collection
+        Input data source
+    filter : dict, str
+        Property filter criteria. For example ``{"id": 4}`` to select one
+        feature with attribute "id" value 4. Or ``{"id": [4, 7, 19]}`` to
+        select features with several values. A SQL WHERE statement can also be
+        used if Fiona 1.9 or later is installed.
+
+    Returns
+    -------
+    fiona.Collection
+
+    Raises
+    ------
+    ModuleNotFoundError
+        If fiona is not installed.
+    """
+    try:
+        import fiona
+    except ModuleNotFoundError:
+        raise ModuleNotFoundError("fiona_filter_collection requires fiona")
+    if not isinstance(ds, fiona.Collection):
+        raise ValueError(f"ds must be fiona.Collection; found {type(ds)}")
+    elif ds.closed:
+        raise ValueError("ds is closed")
+    flt = fiona.io.MemoryFile().open(
+        driver=ds.driver, schema=ds.schema, crs=ds.crs)
+    if isinstance(filter, dict):
+        # check that keys are found in datasource
+        filter_keys = list(filter.keys())
+        ds_attrs = list(ds.schema["properties"].keys())
+        if not set(filter_keys).issubset(ds_attrs):
+            not_found = set(filter_keys).difference(ds_attrs)
+            raise KeyError(
+                f"cannot find filter keys: {not_found}; "
+                f"choose from data source attributes: {ds_attrs}")
+        found = 0
+        for feat in ds:
+            for attr, filt_val in filter.items():
+                feat_val = feat["properties"][attr]
+                if (isinstance(filt_val, Iterable)
+                        and not isinstance(filt_val, str)):
+                    for fv in filt_val:
+                        if feat_val == fv:
+                            found += 1
+                            flt.write(feat)
+                else:
+                    if feat_val == filt_val:
+                        found += 1
+                        flt.write(feat)
+    elif isinstance(filter, str):
+        if fiona.__version__[0:3] < "1.9":
+            raise ValueError(
+                "Fiona 1.9 or later required to use filter str as SQL WHERE")
+        for feat in ds.filter(where=filter):
+            flt.write(feat)
+    else:
+        raise ValueError("filter must be a dict or str")
+    return flt
