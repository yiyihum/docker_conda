diff --git a/tests/test_classmethods.py b/tests/test_classmethods.py
index f0a93ee..869753c 100644
--- a/tests/test_classmethods.py
+++ b/tests/test_classmethods.py
@@ -74,10 +74,19 @@ def test_grid_from_vector_point():
     assert grid == expected
 
     # filter
+    grid = Grid.from_vector(points_path, 250, {"id": [5, 9]})
+    expected = Grid(250.0, (19, 7), (1810500.0, 5873750.0), grid.projection)
+    assert grid == expected
+
     grid = Grid.from_vector(points_path, 250, {"id": 5})
     expected = Grid(250.0, (1, 1), (1812000.0, 5869250.0), grid.projection)
     assert grid == expected
 
+    # filter + buffer
+    grid = Grid.from_vector(points_path, 250, {"id": 5}, buffer=240)
+    expected = Grid(250.0, (2, 2), (1811750.0, 5869250.0), grid.projection)
+    assert grid == expected
+
 
 @requires_pkg("fiona")
 def test_grid_from_vector_polygon():
@@ -110,10 +119,27 @@ def test_grid_from_vector_line():
 
     # filter
     grid = Grid.from_vector(lines_path, 250, {"StreamOrde": 5})
-    expected = Grid(250.0, (4, 3), (1811500.0, 5877000.0), grid.projection)
+    expected = Grid(250.0, (19, 14), (1808750.0, 5877000.0), grid.projection)
+    assert grid == expected
+
+    grid = Grid.from_vector(lines_path, 250, {"StreamOrde": [4, 5]})
+    expected = Grid(250.0, (28, 41), (1804750.0, 5877000.0), grid.projection)
     assert grid == expected
 
     # buffer
     grid = Grid.from_vector(lines_path, 250, buffer=500)
     expected = Grid(250.0, (70, 66), (1803000.0, 5878750.0), grid.projection)
     assert grid == expected
+
+
+@requires_pkg("fiona")
+def test_grid_from_vector_filter_sql_where():
+    import fiona
+
+    if fiona.__version__[0:3] < "1.9":
+        pytest.skip("Fiona 1.9 or later required to use SQL WHERE")
+
+    # filter
+    grid = Grid.from_vector(lines_path, 250, "StreamOrde>=5")
+    expected = Grid(250.0, (19, 14), (1808750.0, 5877000.0), grid.projection)
+    assert grid == expected
diff --git a/tests/test_file.py b/tests/test_file.py
index efa3df8..88ed267 100644
--- a/tests/test_file.py
+++ b/tests/test_file.py
@@ -2,8 +2,15 @@
 import pytest
 import numpy as np
 
+from .conftest import datadir
 from gridit import Grid
-from gridit.file import float32_is_also_float64, fiona_property_type
+from gridit.file import (
+    fiona_filter_collection,
+    fiona_property_type,
+    float32_is_also_float64,
+)
+
+points_path = datadir / "waitaku2_points.shp"
 
 
 def test_float32_is_also_float64():
@@ -246,3 +253,60 @@ def test_write_vector(tmp_path, grid_basic, grid_projection):
         grid_basic.write_vector(ar2d.T, "out.shp", "val")
     with pytest.raises(ValueError, match="Unable to detect driver"):
         grid_basic.write_vector(ar2d, "out.nope", "val")
+
+
+def test_fiona_filter_collection():
+    fiona = pytest.importorskip("fiona")
+    expected_schema = {
+        "geometry": "Point",
+        "properties": {"id": "int:10"},
+    }
+    with fiona.open(points_path) as ds:
+        flt = fiona_filter_collection(ds, filter={"id": 0})
+        assert flt.schema == expected_schema
+        assert len(flt) == 0
+        assert flt.bounds == (0.0, 0.0, 0.0, 0.0)
+
+        flt = fiona_filter_collection(ds, filter={"id": 1})
+        assert flt.schema == expected_schema
+        assert len(flt) == 1
+        np.testing.assert_array_almost_equal(
+            flt.bounds,
+            (1814758.4763, 5871013.6156, 1814758.4763, 5871013.6156),
+            decimal=4,
+        )
+
+        flt = fiona_filter_collection(ds, filter={"id": [1, 8]})
+        assert flt.schema == expected_schema
+        assert len(flt) == 2
+        np.testing.assert_array_almost_equal(
+            flt.bounds,
+            (1812243.7372, 5871013.6156, 1814758.4763, 5876813.8657),
+            decimal=4,
+        )
+
+        if fiona.__version__[0:3] >= "1.9":
+            flt = fiona_filter_collection(ds, filter="id=2")
+            assert len(flt) == 1
+            np.testing.assert_array_almost_equal(
+                flt.bounds,
+                (1812459.1405, 5875971.5429, 1812459.1405, 5875971.5429),
+                decimal=4,
+            )
+
+            # errors
+            with pytest.raises(ValueError, match="SQL Expression Parsing Err"):
+                fiona_filter_collection(ds, filter="id==2")
+
+        else:
+            with pytest.raises(ValueError, match="filter str as SQL WHERE"):
+                fiona_filter_collection(ds, filter="id=2")
+
+        with pytest.raises(ValueError, match=r"ds must be fiona\.Collection"):
+            fiona_filter_collection(None, filter={"id": 1})
+
+        with pytest.raises(KeyError, match="cannot find filter keys"):
+            fiona_filter_collection(ds, filter={"ID": 1})
+
+    with pytest.raises(ValueError, match="ds is closed"):
+        fiona_filter_collection(ds, filter={"id": 1})
