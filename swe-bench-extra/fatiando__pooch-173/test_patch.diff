diff --git a/pooch/tests/test_integration.py b/pooch/tests/test_integration.py
index 7bfbc13..c693625 100644
--- a/pooch/tests/test_integration.py
+++ b/pooch/tests/test_integration.py
@@ -6,35 +6,27 @@ import os
 import shutil
 from pathlib import Path
 
-import pytest
-
 from .. import create, os_cache
 from ..version import full_version
 from .utils import check_tiny_data, capture_log
 
 
-@pytest.fixture
-def pup():
-    "Create a pooch the way most projects would."
-    doggo = create(
-        path=os_cache("pooch"),
+def test_create_and_fetch():
+    "Fetch a data file from the local storage"
+    path = os_cache("pooch-testing")
+    if path.exists():
+        shutil.rmtree(str(path))
+    pup = create(
+        path=path,
         base_url="https://github.com/fatiando/pooch/raw/{version}/data/",
         version=full_version,
         version_dev="master",
         env="POOCH_DATA_DIR",
     )
-    # The str conversion is needed in Python 3.5
-    doggo.load_registry(str(Path(os.path.dirname(__file__), "data", "registry.txt")))
-    if os.path.exists(str(doggo.abspath)):
-        shutil.rmtree(str(doggo.abspath))
-    yield doggo
-    shutil.rmtree(str(doggo.abspath))
-
-
-def test_fetch(pup):
-    "Fetch a data file from the local storage"
-    # Make sure the storage has been cleaned up before running the tests
+    # Make sure the storage isn't created until a download is required
     assert not pup.abspath.exists()
+    # The str conversion is needed in Python 3.5
+    pup.load_registry(str(Path(os.path.dirname(__file__), "data", "registry.txt")))
     for target in ["tiny-data.txt", "subdir/tiny-data.txt"]:
         with capture_log() as log_file:
             fname = pup.fetch(target)
diff --git a/pooch/tests/test_utils.py b/pooch/tests/test_utils.py
index 536db26..5ffe7cb 100644
--- a/pooch/tests/test_utils.py
+++ b/pooch/tests/test_utils.py
@@ -22,7 +22,7 @@ from ..utils import (
     temporary_file,
     unique_file_name,
 )
-from .utils import check_tiny_data, capture_log
+from .utils import check_tiny_data
 
 DATA_DIR = str(Path(__file__).parent / "data" / "store")
 REGISTRY = (
@@ -77,7 +77,8 @@ def test_make_local_storage_parallel(pool, monkeypatch):
                 executor.submit(make_local_storage, data_cache) for i in range(4)
             ]
             for future in futures:
-                assert os.path.exists(str(future.result()))
+                future.result()
+            assert os.path.exists(data_cache)
     finally:
         if os.path.exists(data_cache):
             shutil.rmtree(data_cache)
@@ -95,13 +96,12 @@ def test_local_storage_makedirs_permissionerror(monkeypatch):
 
     monkeypatch.setattr(os, "makedirs", mockmakedirs)
 
-    with capture_log() as log_file:
+    with pytest.raises(PermissionError) as error:
         make_local_storage(
-            path=data_cache, version="1.0", env="SOME_VARIABLE",
+            path=data_cache, env="SOME_VARIABLE",
         )
-        logs = log_file.getvalue()
-        assert logs.startswith("Cannot create data cache")
-        assert "'SOME_VARIABLE'" in logs
+        assert "Pooch could not create data cache" in str(error)
+        assert "'SOME_VARIABLE'" in str(error)
 
 
 def test_local_storage_newfile_permissionerror(monkeypatch):
@@ -119,13 +119,12 @@ def test_local_storage_newfile_permissionerror(monkeypatch):
 
         monkeypatch.setattr(tempfile, "NamedTemporaryFile", mocktempfile)
 
-        with capture_log() as log_file:
+        with pytest.raises(PermissionError) as error:
             make_local_storage(
-                path=data_cache, version="1.0", env="SOME_VARIABLE",
+                path=data_cache, env="SOME_VARIABLE",
             )
-            logs = log_file.getvalue()
-            assert logs.startswith("Cannot write to data cache")
-            assert "'SOME_VARIABLE'" in logs
+            assert "Pooch could not write to data cache" in str(error)
+            assert "'SOME_VARIABLE'" in str(error)
 
 
 def test_registry_builder():
