diff --git a/tests/conftest.py b/tests/conftest.py
index a48173b..9333a78 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -23,6 +23,7 @@ def type_defs():
             testContext: String
             testRoot: String
             testError: Boolean
+            context: String
         }
 
         type Mutation {
diff --git a/tests/test_graphql.py b/tests/test_graphql.py
index 2fd4ea4..eb110df 100644
--- a/tests/test_graphql.py
+++ b/tests/test_graphql.py
@@ -3,6 +3,7 @@ from graphql import ExecutionContext, GraphQLError
 from graphql.validation.rules import ValidationRule
 
 from ariadne import graphql, graphql_sync, subscribe
+from ariadne.types import BaseProxyRootValue
 
 
 class AlwaysInvalid(ValidationRule):
@@ -12,6 +13,12 @@ class AlwaysInvalid(ValidationRule):
         self.context.report_error(GraphQLError("Invalid"))
 
 
+class ProxyRootValue(BaseProxyRootValue):
+    def update_result(self, result):
+        success, data = result
+        return success, {"updated": True, **data}
+
+
 def test_graphql_sync_executes_the_query(schema):
     success, result = graphql_sync(schema, {"query": '{ hello(name: "world") }'})
     assert success
@@ -51,8 +58,21 @@ def test_graphql_sync_prevents_introspection_query_when_option_is_disabled(schem
     )
 
 
+def test_graphql_sync_executes_the_query_using_result_update_obj(schema):
+    success, result = graphql_sync(
+        schema,
+        {"query": "{ context }"},
+        root_value=ProxyRootValue({"context": "Works!"}),
+    )
+    assert success
+    assert result == {
+        "data": {"context": "Works!"},
+        "updated": True,
+    }
+
+
 @pytest.mark.asyncio
-async def test_graphql_execute_the_query(schema):
+async def test_graphql_executes_the_query(schema):
     success, result = await graphql(schema, {"query": '{ hello(name: "world") }'})
     assert success
     assert result["data"] == {"hello": "Hello, world!"}
@@ -94,6 +114,20 @@ async def test_graphql_prevents_introspection_query_when_option_is_disabled(sche
     )
 
 
+@pytest.mark.asyncio
+async def test_graphql_executes_the_query_using_result_update_obj(schema):
+    success, result = await graphql(
+        schema,
+        {"query": "{ context }"},
+        root_value=ProxyRootValue({"context": "Works!"}),
+    )
+    assert success
+    assert result == {
+        "data": {"context": "Works!"},
+        "updated": True,
+    }
+
+
 @pytest.mark.asyncio
 async def test_subscription_returns_an_async_iterator(schema):
     success, result = await subscribe(schema, {"query": "subscription { ping }"})
