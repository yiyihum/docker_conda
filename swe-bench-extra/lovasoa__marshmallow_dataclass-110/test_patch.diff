diff --git a/tests/test_class_schema.py b/tests/test_class_schema.py
index b6c9837..5aea442 100644
--- a/tests/test_class_schema.py
+++ b/tests/test_class_schema.py
@@ -3,6 +3,11 @@ import unittest
 from typing import Any
 from uuid import UUID
 
+try:
+    from typing import Literal
+except ImportError:
+    from typing_extensions import Literal  # type: ignore
+
 import dataclasses
 from marshmallow import Schema, ValidationError
 from marshmallow.fields import Field, UUID as UUIDField, List as ListField, Integer
@@ -132,6 +137,31 @@ class TestClassSchema(unittest.TestCase):
         schema = class_schema(A)()
         self.assertRaises(ValidationError, lambda: schema.load({"data": None}))
 
+    def test_literal(self):
+        @dataclasses.dataclass
+        class A:
+            data: Literal["a"]
+
+        schema = class_schema(A)()
+        self.assertEqual(A(data="a"), schema.load({"data": "a"}))
+        self.assertEqual(schema.dump(A(data="a")), {"data": "a"})
+        for data in ["b", 2, 2.34, False]:
+            with self.assertRaises(ValidationError):
+                schema.load({"data": data})
+
+    def test_literal_multiple_types(self):
+        @dataclasses.dataclass
+        class A:
+            data: Literal["a", 1, 1.23, True]
+
+        schema = class_schema(A)()
+        for data in ["a", 1, 1.23, True]:
+            self.assertEqual(A(data=data), schema.load({"data": data}))
+            self.assertEqual(schema.dump(A(data=data)), {"data": data})
+        for data in ["b", 2, 2.34, False]:
+            with self.assertRaises(ValidationError):
+                schema.load({"data": data})
+
     def test_validator_stacking(self):
         # See: https://github.com/lovasoa/marshmallow_dataclass/issues/91
         class SimpleValidator(Validator):
diff --git a/tests/test_field_for_schema.py b/tests/test_field_for_schema.py
index 96df872..4a388cc 100644
--- a/tests/test_field_for_schema.py
+++ b/tests/test_field_for_schema.py
@@ -4,7 +4,12 @@ import unittest
 from enum import Enum
 from typing import Dict, Optional, Union, Any, List, Tuple
 
-from marshmallow import fields, Schema
+try:
+    from typing import Literal
+except ImportError:
+    from typing_extensions import Literal  # type: ignore
+
+from marshmallow import fields, Schema, validate
 
 from marshmallow_dataclass import field_for_schema, dataclass, union_field
 
@@ -88,6 +93,18 @@ class TestFieldForSchema(unittest.TestCase):
             marshmallow_enum.EnumField(enum=Color, required=True),
         )
 
+    def test_literal(self):
+        self.assertFieldsEqual(
+            field_for_schema(Literal["a"]),
+            fields.Raw(required=True, validate=validate.Equal("a")),
+        )
+
+    def test_literal_multiple_types(self):
+        self.assertFieldsEqual(
+            field_for_schema(Literal["a", 1, 1.23, True]),
+            fields.Raw(required=True, validate=validate.OneOf(("a", 1, 1.23, True))),
+        )
+
     def test_union(self):
         self.assertFieldsEqual(
             field_for_schema(Union[int, str]),
