diff --git a/sceptre/helpers.py b/sceptre/helpers.py
index d0bcc25..0ca370e 100644
--- a/sceptre/helpers.py
+++ b/sceptre/helpers.py
@@ -1,6 +1,10 @@
 # -*- coding: utf-8 -*-
 from contextlib import contextmanager
+from datetime import datetime
 from os import sep
+from typing import Optional
+
+import dateutil.parser
 
 from sceptre.exceptions import PathConversionError
 
@@ -117,3 +121,20 @@ def null_context():
     available in py3.6, so providing it here instead.
     """
     yield
+
+
+def extract_datetime_from_aws_response_headers(boto_response: dict) -> Optional[datetime]:
+    """Returns a datetime.datetime extracted from the response metadata in a
+    boto response or None if it's unable to find or parse one.
+    :param boto_response: A dictionary returned from a boto client call
+    :returns a datetime.datetime or None
+    """
+    if boto_response is None:
+        return None
+    try:
+        return dateutil.parser.parse(boto_response["ResponseMetadata"]["HTTPHeaders"]["date"])
+    except (KeyError, dateutil.parser.ParserError):
+        # We expect a KeyError if the date isn't present in the response. We
+        # expect a ParserError if it's not well-formed. Any other error we want
+        # to pass along.
+        return None
diff --git a/sceptre/plan/actions.py b/sceptre/plan/actions.py
index 1576e1d..147de60 100644
--- a/sceptre/plan/actions.py
+++ b/sceptre/plan/actions.py
@@ -14,21 +14,19 @@ import typing
 import urllib
 from datetime import datetime, timedelta
 from os import path
-from typing import Union, Optional, Tuple, Dict
+from typing import Dict, Optional, Tuple, Union
 
 import botocore
 from dateutil.tz import tzutc
 
 from sceptre.config.reader import ConfigReader
 from sceptre.connection_manager import ConnectionManager
-from sceptre.exceptions import (
-    CannotUpdateFailedStackError,
-    ProtectedStackError,
-    StackDoesNotExistError,
-    UnknownStackChangeSetStatusError,
-    UnknownStackStatusError
-)
-from sceptre.helpers import normalise_path
+from sceptre.exceptions import (CannotUpdateFailedStackError,
+                                ProtectedStackError, StackDoesNotExistError,
+                                UnknownStackChangeSetStatusError,
+                                UnknownStackStatusError)
+from sceptre.helpers import (extract_datetime_from_aws_response_headers,
+                             normalise_path)
 from sceptre.hooks import add_stack_hooks
 from sceptre.stack import Stack
 from sceptre.stack_status import StackChangeSetStatus, StackStatus
@@ -95,7 +93,7 @@ class StackActions(object):
                 "%s - Create stack response: %s", self.stack.name, response
             )
 
-            status = self._wait_for_completion()
+            status = self._wait_for_completion(boto_response=response)
         except botocore.exceptions.ClientError as exp:
             if exp.response["Error"]["Code"] == "AlreadyExistsException":
                 self.logger.info(
@@ -141,7 +139,7 @@ class StackActions(object):
                 command="update_stack",
                 kwargs=update_stack_kwargs
             )
-            status = self._wait_for_completion(self.stack.stack_timeout)
+            status = self._wait_for_completion(self.stack.stack_timeout, boto_response=response)
             self.logger.debug(
                 "%s - Update Stack response: %s", self.stack.name, response
             )
@@ -180,7 +178,7 @@ class StackActions(object):
         self.logger.debug(
             "%s - Cancel update Stack response: %s", self.stack.name, response
         )
-        return self._wait_for_completion()
+        return self._wait_for_completion(boto_response=response)
 
     @add_stack_hooks
     def launch(self) -> StackStatus:
@@ -251,14 +249,14 @@ class StackActions(object):
 
         delete_stack_kwargs = {"StackName": self.stack.external_name}
         delete_stack_kwargs.update(self._get_role_arn())
-        self.connection_manager.call(
+        response = self.connection_manager.call(
             service="cloudformation",
             command="delete_stack",
             kwargs=delete_stack_kwargs
         )
 
         try:
-            status = self._wait_for_completion()
+            status = self._wait_for_completion(boto_response=response)
         except StackDoesNotExistError:
             status = StackStatus.COMPLETE
         except botocore.exceptions.ClientError as error:
@@ -549,7 +547,7 @@ class StackActions(object):
         self.logger.debug(
             "%s - Executing Change Set '%s'", self.stack.name, change_set_name
         )
-        self.connection_manager.call(
+        response = self.connection_manager.call(
             service="cloudformation",
             command="execute_change_set",
             kwargs={
@@ -557,8 +555,7 @@ class StackActions(object):
                 "StackName": self.stack.external_name
             }
         )
-
-        status = self._wait_for_completion()
+        status = self._wait_for_completion(boto_response=response)
         return status
 
     def change_set_creation_failed_due_to_no_changes(self, reason: str) -> bool:
@@ -767,15 +764,15 @@ class StackActions(object):
                 "currently enabled".format(self.stack.name)
             )
 
-    def _wait_for_completion(self, timeout=0):
+    def _wait_for_completion(self, timeout=0, boto_response: Optional[dict] = None) -> StackStatus:
         """
         Waits for a Stack operation to finish. Prints CloudFormation events
         while it waits.
 
         :param timeout: Timeout before returning, in minutes.
+        :param boto_response: Response from the boto call which initiated the stack change.
 
         :returns: The final Stack status.
-        :rtype: sceptre.stack_status.StackStatus
         """
         timeout = 60 * timeout
 
@@ -784,13 +781,14 @@ class StackActions(object):
 
         status = StackStatus.IN_PROGRESS
 
-        self.most_recent_event_datetime = (
-            datetime.now(tzutc()) - timedelta(seconds=3)
-        )
+        most_recent_event_datetime = extract_datetime_from_aws_response_headers(
+            boto_response
+        ) or (datetime.now(tzutc()) - timedelta(seconds=3))
+
         elapsed = 0
         while status == StackStatus.IN_PROGRESS and not timed_out(elapsed):
             status = self._get_simplified_status(self._get_status())
-            self._log_new_events()
+            most_recent_event_datetime = self._log_new_events(most_recent_event_datetime)
             time.sleep(4)
             elapsed += 4
 
@@ -843,15 +841,18 @@ class StackActions(object):
                 "{0} is unknown".format(status)
             )
 
-    def _log_new_events(self):
+    def _log_new_events(self, after_datetime: datetime) -> datetime:
         """
         Log the latest Stack events while the Stack is being built.
+
+        :param after_datetime: Only events after this datetime will be logged.
+        :returns: The datetime of the last logged event or after_datetime if no events were logged.
         """
         events = self.describe_events()["StackEvents"]
         events.reverse()
         new_events = [
             event for event in events
-            if event["Timestamp"] > self.most_recent_event_datetime
+            if event["Timestamp"] > after_datetime
         ]
         for event in new_events:
             self.logger.info(" ".join([
@@ -861,7 +862,8 @@ class StackActions(object):
                 event["ResourceStatus"],
                 event.get("ResourceStatusReason", "")
             ]))
-            self.most_recent_event_datetime = event["Timestamp"]
+            after_datetime = event["Timestamp"]
+        return after_datetime
 
     def wait_for_cs_completion(self, change_set_name):
         """

