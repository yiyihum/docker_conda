diff --git a/tests/unit/electionguard_gui/test_decryption_dto.py b/tests/unit/electionguard_gui/test_decryption_dto.py
index 190fb11..56a6bbe 100644
--- a/tests/unit/electionguard_gui/test_decryption_dto.py
+++ b/tests/unit/electionguard_gui/test_decryption_dto.py
@@ -63,7 +63,7 @@ class TestDecryptionDto(BaseTestCase):
         self.assertEqual(status, "decryption complete")
 
     @patch("electionguard_gui.services.authorization_service.AuthorizationService")
-    def test_admins_can_not_join_key_ceremony(self, auth_service: MagicMock):
+    def test_admins_can_not_join_key_ceremony(self, auth_service: MagicMock) -> None:
         # ARRANGE
         decryption_dto = DecryptionDto({"guardians_joined": []})
 
@@ -80,7 +80,7 @@ class TestDecryptionDto(BaseTestCase):
     @patch("electionguard_gui.services.authorization_service.AuthorizationService")
     def test_users_can_join_key_ceremony_if_not_already_joined(
         self, auth_service: MagicMock
-    ):
+    ) -> None:
         # ARRANGE
         decryption_dto = DecryptionDto({"guardians_joined": []})
 
@@ -95,7 +95,7 @@ class TestDecryptionDto(BaseTestCase):
         self.assertTrue(decryption_dto.can_join)
 
     @patch("electionguard_gui.services.authorization_service.AuthorizationService")
-    def test_users_cant_join_twice(self, auth_service: MagicMock):
+    def test_users_cant_join_twice(self, auth_service: MagicMock) -> None:
         # ARRANGE
         decryption_dto = DecryptionDto({"guardians_joined": ["user1"]})
 
diff --git a/tests/unit/electionguard_gui/test_plaintext_ballot_service.py b/tests/unit/electionguard_gui/test_plaintext_ballot_service.py
new file mode 100644
index 0000000..82a27f3
--- /dev/null
+++ b/tests/unit/electionguard_gui/test_plaintext_ballot_service.py
@@ -0,0 +1,100 @@
+from unittest.mock import MagicMock, patch
+from electionguard.tally import PlaintextTallySelection
+from electionguard_gui.services.plaintext_ballot_service import _get_contest_details
+from tests.base_test_case import BaseTestCase
+
+
+class TestPlaintextBallotService(BaseTestCase):
+    """Test the ElectionDto class"""
+
+    def test_zero_sections(self) -> None:
+        # ARRANGE
+        selections: list[PlaintextTallySelection] = []
+        selection_names: dict[str, str] = {}
+        selection_write_ins: dict[str, bool] = {}
+        parties: dict[str, str] = {}
+
+        # ACT
+        result = _get_contest_details(
+            selections, selection_names, selection_write_ins, parties
+        )
+
+        # ASSERT
+        self.assertEqual(0, result["nonWriteInTotal"])
+        self.assertEqual(None, result["writeInTotal"])
+        self.assertEqual(0, len(result["selections"]))
+
+    @patch("electionguard.tally.PlaintextTallySelection")
+    def test_one_non_write_in(self, plaintext_tally_selection: MagicMock) -> None:
+        # ARRANGE
+        plaintext_tally_selection.object_id = "AL"
+        plaintext_tally_selection.tally = 2
+        selections: list[PlaintextTallySelection] = [plaintext_tally_selection]
+        selection_names: dict[str, str] = {
+            "AL": "Abraham Lincoln",
+        }
+        selection_write_ins: dict[str, bool] = {
+            "AL": False,
+        }
+        parties: dict[str, str] = {
+            "AL": "National Union Party",
+        }
+
+        # ACT
+        result = _get_contest_details(
+            selections, selection_names, selection_write_ins, parties
+        )
+
+        # ASSERT
+        self.assertEqual(2, result["nonWriteInTotal"])
+        self.assertEqual(None, result["writeInTotal"])
+        self.assertEqual(1, len(result["selections"]))
+        selection = result["selections"][0]
+        self.assertEqual("Abraham Lincoln", selection["name"])
+        self.assertEqual(2, selection["tally"])
+        self.assertEqual("National Union Party", selection["party"])
+        self.assertEqual(1, selection["percent"])
+
+    @patch("electionguard.tally.PlaintextTallySelection")
+    def test_one_write_in(self, plaintext_tally_selection: MagicMock) -> None:
+        # ARRANGE
+        plaintext_tally_selection.object_id = "ST"
+        plaintext_tally_selection.tally = 1
+        selections: list[PlaintextTallySelection] = [plaintext_tally_selection]
+        selection_names: dict[str, str] = {}
+        selection_write_ins: dict[str, bool] = {
+            "ST": True,
+        }
+        parties: dict[str, str] = {}
+
+        # ACT
+        result = _get_contest_details(
+            selections, selection_names, selection_write_ins, parties
+        )
+
+        # ASSERT
+        self.assertEqual(0, result["nonWriteInTotal"])
+        self.assertEqual(1, result["writeInTotal"])
+        self.assertEqual(0, len(result["selections"]))
+
+    @patch("electionguard.tally.PlaintextTallySelection")
+    def test_zero_write_in(self, plaintext_tally_selection: MagicMock) -> None:
+        # ARRANGE
+        plaintext_tally_selection.object_id = "ST"
+        plaintext_tally_selection.tally = 0
+        selections: list[PlaintextTallySelection] = [plaintext_tally_selection]
+        selection_names: dict[str, str] = {}
+        selection_write_ins: dict[str, bool] = {
+            "ST": True,
+        }
+        parties: dict[str, str] = {}
+
+        # ACT
+        result = _get_contest_details(
+            selections, selection_names, selection_write_ins, parties
+        )
+
+        # ASSERT
+        self.assertEqual(0, result["nonWriteInTotal"])
+        self.assertEqual(0, result["writeInTotal"])
+        self.assertEqual(0, len(result["selections"]))
