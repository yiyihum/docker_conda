diff --git a/duecredit/tests/test_io.py b/duecredit/tests/test_io.py
index b895115..b46eb71 100644
--- a/duecredit/tests/test_io.py
+++ b/duecredit/tests/test_io.py
@@ -21,8 +21,8 @@ from mock import patch
 from ..collector import DueCreditCollector, Citation
 from .test_collector import _sample_bibtex, _sample_doi
 from ..entries import BibTeX, DueCreditEntry, Doi
-from ..io import TextOutput, PickleOutput, import_doi, EnumeratedEntries, \
-    get_text_rendering, format_bibtex
+from ..io import TextOutput, PickleOutput, import_doi, \
+    get_text_rendering, format_bibtex, _is_contained, Output, BibTeXOutput
 from ..utils import with_tempfile
 
 from nose.tools import assert_equal, assert_is_instance, assert_raises, \
@@ -85,18 +85,174 @@ def test_pickleoutput(fn):
                      collector_loaded._entries.keys())
         os.unlink(fn)
 
+
+def test_output():
+    entry = BibTeX(_sample_bibtex)
+    entry2 = BibTeX(_sample_bibtex2)
+
+    # normal use
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package')
+    collector.cite(entry, path='package.module')
+
+    output = Output(None, collector)
+
+    packages, modules, objects = output._filter_citations(tags=['*'])
+
+    assert_equal(len(packages), 1)
+    assert_equal(len(modules), 1)
+    assert_equal(len(objects), 0)
+
+    assert_equal(packages['package'][0],
+                 collector.citations[('package', entry.get_key())])
+    assert_equal(modules['package.module'][0],
+                 collector.citations[('package.module', entry.get_key())])
+
+    # no toppackage
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package')
+    collector.cite(entry, path='package2.module')
+
+    output = Output(None, collector)
+
+    packages, modules, objects = output._filter_citations(tags=['*'])
+
+    assert_equal(len(packages), 0)
+    assert_equal(len(modules), 1)
+    assert_equal(len(objects), 0)
+
+    assert_equal(modules['package2.module'][0],
+                 collector.citations[('package2.module', entry.get_key())])
+
+
+    # toppackage because required
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package', cite_module=True)
+    collector.cite(entry, path='package2.module')
+
+    output = Output(None, collector)
+
+    packages, modules, objects = output._filter_citations(tags=['*'])
+
+    assert_equal(len(packages), 1)
+    assert_equal(len(modules), 1)
+    assert_equal(len(objects), 0)
+
+    assert_equal(packages['package'][0],
+                 collector.citations[('package', entry.get_key())])
+    assert_equal(modules['package2.module'][0],
+                 collector.citations[('package2.module', entry.get_key())])
+
+
+    # check it returns multiple entries
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package')
+    collector.cite(entry2, path='package')
+    collector.cite(entry, path='package.module')
+
+    output = Output(None, collector)
+
+    packages, modules, objects = output._filter_citations(tags=['*'])
+
+    assert_equal(len(packages), 1)
+    assert_equal(len(packages['package']), 2)
+    assert_equal(len(modules), 1)
+    assert_equal(len(objects), 0)
+
+    # sort them in order so we know who is who
+    # entry2 key is Atk...
+    # entry key is XX..
+    packs = sorted(packages['package'], key=lambda x: x.entry.key)
+
+    assert_equal(packs[0],
+                 collector.citations[('package', entry2.get_key())])
+    assert_equal(packs[1],
+                 collector.citations[('package', entry.get_key())])
+    assert_equal(modules['package.module'][0],
+                 collector.citations[('package.module', entry.get_key())])
+
+
+    # check that filtering works
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package', tags=['edu'])
+    collector.cite(entry2, path='package')
+    collector.cite(entry, path='package.module', tags=['edu'])
+
+    output = Output(None, collector)
+
+    packages, modules, objects = output._filter_citations(tags=['edu'])
+
+    assert_equal(len(packages), 1)
+    assert_equal(len(packages['package']), 1)
+    assert_equal(len(modules), 1)
+    assert_equal(len(objects), 0)
+
+    assert_equal(packages['package'][0],
+                 collector.citations[('package', entry.get_key())])
+    assert_equal(modules['package.module'][0],
+                 collector.citations[('package.module', entry.get_key())])
+
 def test_text_output():
     entry = BibTeX(_sample_bibtex)
+    entry2 = BibTeX(_sample_bibtex2)
+
+    # in this case, since we're not citing any module or method, we shouldn't
+    # output anything
     collector = DueCreditCollector()
-    collector.cite(entry, path='module')
+    collector.cite(entry, path='package')
 
     strio = StringIO()
     TextOutput(strio, collector).dump(tags=['*'])
     value = strio.getvalue()
+    assert_true("0 packages cited" in value, msg="value was %s" % value)
+    assert_true("0 modules cited" in value, msg="value was %s" % value)
+    assert_true("0 functions cited" in value, msg="value was %s" % value)
+
+    # but it should be cited if cite_module=True
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package', cite_module=True)
+
+    strio = StringIO()
+    TextOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    assert_true("1 package cited" in value, msg="value was %s" % value)
+    assert_true("0 modules cited" in value, msg="value was %s" % value)
+    assert_true("0 functions cited" in value, msg="value was %s" % value)
+
+    # in this case, we should be citing the package since we are also citing a
+    # submodule
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package')
+    collector.cite(entry, path='package.module')
+
+    strio = StringIO()
+    TextOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    assert_true("1 package cited" in value, msg="value was %s" % value)
+    assert_true("1 module cited" in value, msg="value was %s" % value)
+    assert_true("0 functions cited" in value, msg="value was %s" % value)
     assert_true("Halchenko, Y.O." in value, msg="value was %s" % value)
     assert_true(value.strip().endswith("Frontiers in Neuroinformatics, 6(22)."))
 
 
+    # in this case, we should be citing the package since we are also citing a
+    # submodule
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package')
+    collector.cite(entry2, path='package')
+    collector.cite(entry, path='package.module')
+
+    strio = StringIO()
+    TextOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    assert_true("1 package cited" in value, msg="value was %s" % value)
+    assert_true("1 module cited" in value, msg="value was %s" % value)
+    assert_true("0 functions cited" in value, msg="value was %s" % value)
+    assert_true("Halchenko, Y.O." in value, msg="value was %s" % value)
+    assert_true('[1, 2]' in value, msg="value was %s" %value)
+    assert_false('[3]' in value, msg="value was %s" %value)
+
+
 def test_text_output_dump_formatting():
     due = DueCreditCollector()
 
@@ -125,17 +281,18 @@ def test_text_output_dump_formatting():
                 msg='value was {0}'.format(value))
 
     # now we call it -- check it prints stuff
+    strio = StringIO()
     mymodule('magical', kwarg2=1)
     TextOutput(strio, due).dump(tags=['*'])
     value = strio.getvalue()
-    assert_true('1 packages cited' in value, msg='value was {0}'.format(value))
-    assert_true('1 functions cited' in value, msg='value was {0}'.format(value))
+    assert_true('1 package cited' in value, msg='value was {0}'.format(value))
+    assert_true('1 function cited' in value, msg='value was {0}'.format(value))
     assert_true('(v 0.0.16)' in value,
                 msg='value was {0}'.format(value))
-    assert_equal(len(value.split('\n')), 21, msg='value was {0}'.format(value))
+    assert_equal(len(value.split('\n')), 16, msg='value was {0}'.format(len(value.split('\n'))))
 
     # test we get the reference numbering right
-    samples_bibtex = [_generate_sample_bibtex() for x in range(5)]
+    samples_bibtex = [_generate_sample_bibtex() for x in range(6)]
     # this sucks but at the moment it's the only way to have multiple
     # references for a function
 
@@ -154,7 +311,7 @@ def test_text_output_dump_formatting():
                    path='myothermodule:myotherfunction')
         @due.dcite(BibTeX(samples_bibtex[4]), description='solution to life',
                    path='myothermodule:myotherfunction')
-        @due.dcite(BibTeX(_sample_bibtex2), description='solution to life',
+        @due.dcite(BibTeX(samples_bibtex[5]), description='solution to life',
                    path='myothermodule:myotherfunction')
         def myotherfunction(arg42):
             pass
@@ -187,6 +344,59 @@ def test_text_output_dump_formatting():
     import warnings
     assert_true(('ignore', None, UserWarning, None, 0) not in warnings.filters)
 
+
+def test_bibtex_output():
+    entry = BibTeX(_sample_bibtex)
+    entry2 = BibTeX(_sample_bibtex2)
+
+    # in this case, since we're not citing any module or method, we shouldn't
+    # output anything
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package')
+
+    strio = StringIO()
+    BibTeXOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    assert_equal(value, '', msg='Value was {0}'.format(value))
+
+    # impose citing
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package', cite_module=True)
+
+    strio = StringIO()
+    BibTeXOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    assert_equal(value.strip(), _sample_bibtex.strip(), msg='Value was {0}'.format(value))
+
+    # impose filtering
+    collector = DueCreditCollector()
+    collector.cite(entry, path='package', cite_module=True, tags=['edu'])
+    collector.cite(entry2, path='package.module')
+
+    strio = StringIO()
+    BibTeXOutput(strio, collector).dump(tags=['edu'])
+    value = strio.getvalue()
+    assert_equal(value.strip(), _sample_bibtex.strip(), msg='Value was {0}'.format(value))
+
+    # no filtering
+    strio = StringIO()
+    BibTeXOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    assert_equal(value.strip(),
+                 _sample_bibtex.strip() + _sample_bibtex2.rstrip(),
+                 msg='Value was {0}'.format(value))
+
+    # check the we output only unique bibtex entries
+    collector.cite(entry2, path='package')
+    strio = StringIO()
+    BibTeXOutput(strio, collector).dump(tags=['*'])
+    value = strio.getvalue()
+    value_ = sorted(value.strip().split('\n'))
+    bibtex = sorted((_sample_bibtex.strip() + _sample_bibtex2.rstrip()).split('\n'))
+    assert_equal(value_, bibtex,
+                 msg='Value was {0}'.format(value_, bibtex))
+
+
 def _generate_sample_bibtex():
     """
     Generate a random sample bibtex to test multiple references
@@ -214,25 +424,6 @@ def _generate_sample_bibtex():
     sample_bibtex += "}"
     return sample_bibtex
 
-def test_enumeratedentries():
-    enumentries = EnumeratedEntries()
-    assert_false(enumentries)
-
-    # add some entries
-    entries = [('ciao', 1), ('miao', 2), ('bau', 3)]
-    for entry, _ in entries:
-        enumentries.add(entry)
-
-    assert_equal(len(enumentries), 3)
-
-    for entry, nr in entries:
-        assert_equal(nr, enumentries[entry])
-        assert_equal(entry, enumentries.fromrefnr(nr))
-
-    assert_raises(KeyError, enumentries.__getitem__, 'boh')
-    assert_raises(KeyError, enumentries.fromrefnr, 666)
-
-    assert_equal(entries, sorted(enumentries, key=lambda x: x[1]))
 
 @patch('duecredit.io.get_bibtex_rendering')
 @patch('duecredit.io.format_bibtex')
@@ -278,3 +469,14 @@ def test_format_bibtex_zenodo_doi():
     """
     assert_equal(format_bibtex(BibTeX(bibtex_zenodo)),
                  """Ghosh, S. et al., 2016. nipype: Release candidate 1 for version 0.12.0.""")
+
+def test_is_contained():
+    toppath = 'package'
+    assert_true(_is_contained(toppath, 'package.module'))
+    assert_true(_is_contained(toppath, 'package.module.submodule'))
+    assert_true(_is_contained(toppath, 'package.module.submodule:object'))
+    assert_true(_is_contained(toppath, 'package:object'))
+    assert_true(_is_contained(toppath, toppath))
+    assert_false(_is_contained(toppath, 'package2'))
+    assert_false(_is_contained(toppath, 'package2:anotherobject'))
+    assert_false(_is_contained(toppath, 'package2.module:anotherobject'))
