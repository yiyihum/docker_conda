diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst
index 519b6b0..bff2266 100644
--- a/CONTRIBUTING.rst
+++ b/CONTRIBUTING.rst
@@ -117,3 +117,12 @@ To regenerate fixture remove it from tests/fixtures and run tests again::
 
     $ rm tests/fixtures/NAME.yaml
     $ py.test
+
+In order for py.test to run, you will have had to create an environment variable containing a valid tiingo API key so that the test runner can make a valid api call.  One way to do that is to::
+
+    $ export TIINGO_API_KEY='...insert api key here...'
+
+However, now this api key will become embedded in the test fixture file that is created per the prior procedure.  In order to remove this api key from the new test fixtures, run the following from the top level directory::
+
+    $ ./tools/api_key_tool.py
+
diff --git a/tools/__init__.py b/tools/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tools/api_key_tool.py b/tools/api_key_tool.py
new file mode 100755
index 0000000..3d92246
--- /dev/null
+++ b/tools/api_key_tool.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python
+
+from __future__ import print_function
+import glob
+import re
+import argparse
+
+fixtures_directory = 'tests/fixtures/'
+zero_api_regex = r'(\[Token )0{40}(\])'
+real_api_regex = r'(\[Token ).{40}(\])'
+zero_token_string = '[Token ' + 40 * '0' + ']'
+
+
+def has_api_key(file):
+    """
+    Detect whether the file contains an api key in the Token object that is not 40*'0'.
+    See issue #86.
+    :param file: path-to-file to check
+    :return: boolean
+    """
+    f = open(file, 'r')
+    text = f.read()
+    if re.search(real_api_regex, text) is not None and  \
+            re.search(zero_api_regex, text) is None:
+        return True
+    return False
+
+
+def remove_api_key(file):
+    """
+    Change the api key in the Token object to 40*'0'.  See issue #86.
+    :param file: path-to-file to change
+    """
+    with open(file, 'r') as fp:
+        text = fp.read()
+    text = re.sub(real_api_regex, zero_token_string, text)
+    with open(file, 'w') as fp:
+        fp.write(text)
+    return
+
+
+def main(path):
+    if path[-1] != '/':
+        raise ValueError('Final character in path must be /.')
+    n_files_changed = 0
+    for filename in glob.glob(path+'*.yaml'):
+        if has_api_key(filename):
+            remove_api_key(filename)
+            n_files_changed += 1
+    print("Changed {} files.".format(n_files_changed))
+
+
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser()
+    parser.add_argument("path", help="path to test fixtures",
+                        nargs='?', default=fixtures_directory)
+    args = parser.parse_args()
+    main(args.path)
