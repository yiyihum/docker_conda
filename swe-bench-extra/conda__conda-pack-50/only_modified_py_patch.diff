diff --git a/conda_pack/compat.py b/conda_pack/compat.py
index 782b167..7255849 100644
--- a/conda_pack/compat.py
+++ b/conda_pack/compat.py
@@ -5,13 +5,23 @@ on_win = sys.platform == 'win32'
 
 
 if sys.version_info.major == 2:
+    from imp import load_source
+
     def source_from_cache(path):
         if path.endswith('.pyc') or path.endswith('.pyo'):
             return path[:-1]
         raise ValueError("Path %s is not a python bytecode file" % path)
 else:
+    import importlib
     from importlib.util import source_from_cache
 
+    def load_source(name, path):
+        loader = importlib.machinery.SourceFileLoader(name, path)
+        spec = importlib.util.spec_from_loader(loader.name, loader)
+        mod = importlib.util.module_from_spec(spec)
+        spec.loader.exec_module(mod)
+        return mod
+
 
 def find_py_source(path, ignore=True):
     """Find the source file for a given bytecode file.
diff --git a/conda_pack/core.py b/conda_pack/core.py
index e561236..e4f1655 100644
--- a/conda_pack/core.py
+++ b/conda_pack/core.py
@@ -956,13 +956,18 @@ class Packer(object):
 
         if not on_win:
             shebang = '#!/usr/bin/env python'
+            python_pattern = re.compile(os.path.join(BIN_DIR, 'python\d.\d'))
         else:
             shebang = ('@SETLOCAL ENABLEDELAYEDEXPANSION & CALL "%~f0" & (IF '
                        'NOT ERRORLEVEL 1 (python -x "%~f0" %*) ELSE (ECHO No '
                        'python environment found on path)) & PAUSE & EXIT /B '
                        '!ERRORLEVEL!')
+            python_pattern = re.compile(os.path.join(BIN_DIR, 'python'))
 
-        prefix_records = ',\n'.join(repr(p) for p in self.prefixes)
+        # We skip prefix rewriting in python executables (if needed)
+        # to avoid editing a running file.
+        prefix_records = ',\n'.join(repr(p) for p in self.prefixes
+                                    if not python_pattern.match(p[0]))
 
         with open(os.path.join(_current_dir, 'prefixes.py')) as fil:
             prefixes_py = fil.read()

