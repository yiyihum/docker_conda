diff --git a/chess.py b/chess.py
index 8c57bc4..c9d7287 100644
--- a/chess.py
+++ b/chess.py
@@ -101,6 +101,19 @@ class Bishop(Pieces):
     def __str__(self):
 
         return self.NAME
+    
+    def threatening_zone(self, max_size):
+        """
+        Get the current position of the piece and produce a list of threathening
+        places in the board.
+
+        Arguments:
+        max_size -- integer that defines de boundary limits of the board.
+        """
+        
+        import pdb; pdb.set_trace()
+        
+        self.position
 
 class Kinight(Pieces):
 
@@ -110,6 +123,14 @@ class Kinight(Pieces):
 
         return self.NAME
 
+    def threatening_zone():
+        """
+        Get the current position of the piece and produce a list of threathening
+        places in the board.
+        """
+        
+        pass
+
 class King(Pieces):
 
     NAME = 'king'
@@ -118,6 +139,14 @@ class King(Pieces):
 
         return self.NAME
 
+    def threatening_zone(self):
+        """
+        Get the current position of the piece and produce a list of threathening
+        places in the board.
+        """
+        
+        pass
+
 class Pawn(Pieces):
 
     NAME = 'pawn'
@@ -126,6 +155,24 @@ class Pawn(Pieces):
 
         return self.NAME
 
+    def threatening_zone(self, max_size):
+        """
+        Get the current position of the piece and produce a list of threathening
+        places in the board.
+
+        Arguments:
+        max_size -- integer that defines de boundary limits of the board.
+        """
+        zone = []
+
+        x, y = self.position
+
+        zone.append((x+1, y+1))
+        zone.append((x-1, y+1))
+
+        return [(x, y) for x, y in zone if x in range(max_size) and y in range(max_size)]
+
+
 class Queen(Pieces):
 
     NAME = 'queen'
@@ -134,6 +181,14 @@ class Queen(Pieces):
 
         return self.NAME
 
+    def threatening_zone():
+        """
+        Get the current position of the piece and produce a list of threathening
+        places in the board.
+        """
+        
+        pass
+
 class Rook(Pieces):
 
     NAME = 'rook'
@@ -141,3 +196,11 @@ class Rook(Pieces):
     def __str__(self):
 
         return self.NAME
+
+    def threatening_zone():
+        """
+        Get the current position of the piece and produce a list of threathening
+        places in the board.
+        """
+        
+        pass

