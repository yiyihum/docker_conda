diff --git a/tests/tests.py b/tests/tests.py
index 24ff9a6..acb7e6d 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -89,6 +89,84 @@ class TestsChessMasterPiece(unittest.TestCase):
         with self.assertRaises(ValueError):
             pawn.set_position((1, 2, 4,))
 
+
+    def test_pawn_threatening_zone(self):
+        """
+        Testing pawn when the piece is able to threatening other piece in both
+        sides.
+        """
+
+        pawn = chess.Pawn((4,0))
+
+        expected = [
+            (3,1),
+            (5,1)
+        ]
+
+        self.assertEqual(
+            sorted(pawn.threatening_zone(8)), sorted(expected)
+        )
+
+
+    def test_pawn_threatening_x_boundary_left(self):
+        """
+        Testing boundary where the pawn can not move to the left
+        """
+
+        pawn = chess.Pawn((0,0))
+
+        expected = [
+            (1,1)
+        ]
+
+        self.assertEqual(
+            sorted(pawn.threatening_zone(8)), sorted(expected)
+        )
+
+    def test_pawn_threatening_x_boundary_right(self):
+        """
+        Testing boundary where the pawn can not move to the right
+        """
+
+        pawn = chess.Pawn((7,0))
+
+        expected = [
+            (6,1)
+        ]
+
+        self.assertEqual(
+            sorted(pawn.threatening_zone(8)), sorted(expected)
+        )
+
+    def test_pawn_threatening_zone_y_boundary(self):
+        """
+        Testing boundary where the pawn can not move forward
+        """
+
+        pawn = chess.Pawn((4,7))
+
+        expected = []
+
+        self.assertEqual(
+            sorted(pawn.threatening_zone(8)), sorted(expected)
+        )
+
+    def test_pawn_threatening_zone_y_boundary_last_move(self):
+        """
+        Testing boundary where the pawn can make your last move forward
+        """
+
+        pawn = chess.Pawn((4,6))
+
+        expected = [
+            (3,7),
+            (5,7)
+        ]
+
+        self.assertEqual(
+            sorted(pawn.threatening_zone(8)), sorted(expected)
+        )
+
 class TestsChessMasterBoard(unittest.TestCase):
 
     def test_put_1_piece(self):
