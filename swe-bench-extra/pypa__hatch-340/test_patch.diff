diff --git a/tests/cli/publish/test_publish.py b/tests/cli/publish/test_publish.py
index 619f2c59..81084f2e 100644
--- a/tests/cli/publish/test_publish.py
+++ b/tests/cli/publish/test_publish.py
@@ -130,6 +130,25 @@ def test_unknown_publisher(hatch, temp_dir):
     assert result.output == 'Unknown publisher: foo\n'
 
 
+def test_disabled(hatch, temp_dir, config_file):
+    config_file.model.publish['pypi']['disable'] = True
+    config_file.save()
+
+    project_name = 'My App'
+
+    with temp_dir.as_cwd():
+        result = hatch('new', project_name)
+        assert result.exit_code == 0, result.output
+
+    path = temp_dir / 'my-app'
+
+    with path.as_cwd():
+        result = hatch('publish', '-n')
+
+    assert result.exit_code == 1, result.output
+    assert result.output == 'Publisher is disabled: pypi\n'
+
+
 def test_missing_user(hatch, temp_dir):
     project_name = 'My App'
 
@@ -406,6 +425,87 @@ def test_no_artifacts(hatch, temp_dir_cache, helpers, published_project_name):
     )
 
 
+def test_enable_with_flag(hatch, temp_dir_cache, helpers, published_project_name, config_file):
+    config_file.model.publish['pypi']['user'] = '__token__'
+    config_file.model.publish['pypi']['auth'] = PUBLISHER_TOKEN
+    config_file.model.publish['pypi']['repo'] = 'test'
+    config_file.model.publish['pypi']['disable'] = True
+    config_file.save()
+
+    with temp_dir_cache.as_cwd():
+        result = hatch('new', published_project_name)
+        assert result.exit_code == 0, result.output
+
+    path = temp_dir_cache / published_project_name
+
+    with path.as_cwd():
+        del os.environ[PublishEnvVars.REPO]
+
+        current_version = timestamp_to_version(helpers.get_current_timestamp())
+        result = hatch('version', current_version)
+        assert result.exit_code == 0, result.output
+
+        result = hatch('build')
+        assert result.exit_code == 0, result.output
+
+        build_directory = path / 'dist'
+        artifacts = list(build_directory.iterdir())
+
+        result = hatch('publish', '-y')
+
+    assert result.exit_code == 0, result.output
+    assert result.output == helpers.dedent(
+        f"""
+        {artifacts[0].relative_to(path)} ... success
+        {artifacts[1].relative_to(path)} ... success
+
+        [{published_project_name}]
+        https://test.pypi.org/project/{published_project_name}/{current_version}/
+        """
+    )
+
+
+def test_enable_with_prompt(hatch, temp_dir_cache, helpers, published_project_name, config_file):
+    config_file.model.publish['pypi']['user'] = '__token__'
+    config_file.model.publish['pypi']['auth'] = PUBLISHER_TOKEN
+    config_file.model.publish['pypi']['repo'] = 'test'
+    config_file.model.publish['pypi']['disable'] = True
+    config_file.save()
+
+    with temp_dir_cache.as_cwd():
+        result = hatch('new', published_project_name)
+        assert result.exit_code == 0, result.output
+
+    path = temp_dir_cache / published_project_name
+
+    with path.as_cwd():
+        del os.environ[PublishEnvVars.REPO]
+
+        current_version = timestamp_to_version(helpers.get_current_timestamp())
+        result = hatch('version', current_version)
+        assert result.exit_code == 0, result.output
+
+        result = hatch('build')
+        assert result.exit_code == 0, result.output
+
+        build_directory = path / 'dist'
+        artifacts = list(build_directory.iterdir())
+
+        result = hatch('publish', input='y\n')
+
+    assert result.exit_code == 0, result.output
+    assert result.output == helpers.dedent(
+        f"""
+        Confirm `pypi` publishing [y/N]: y
+        {artifacts[0].relative_to(path)} ... success
+        {artifacts[1].relative_to(path)} ... success
+
+        [{published_project_name}]
+        https://test.pypi.org/project/{published_project_name}/{current_version}/
+        """
+    )
+
+
 class TestWheel:
     @pytest.mark.parametrize('field', ['name', 'version'])
     def test_missing_required_metadata_field(self, hatch, temp_dir_cache, helpers, published_project_name, field):
diff --git a/tests/publish/__init__.py b/tests/publish/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/tests/publish/plugin/__init__.py b/tests/publish/plugin/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/tests/publish/plugin/test_interface.py b/tests/publish/plugin/test_interface.py
new file mode 100644
index 00000000..c93ed9bd
--- /dev/null
+++ b/tests/publish/plugin/test_interface.py
@@ -0,0 +1,56 @@
+import pytest
+
+from hatch.publish.plugin.interface import PublisherInterface
+
+
+class MockPublisher(PublisherInterface):
+    PLUGIN_NAME = 'mock'
+
+    def publish(self, artifacts, options):
+        pass
+
+
+class TestDisable:
+    def test_default(self, isolation):
+        project_config = {}
+        plugin_config = {}
+        publisher = MockPublisher(None, isolation, None, project_config, plugin_config)
+
+        assert publisher.disable is publisher.disable is False
+
+    def test_project_config(self, isolation):
+        project_config = {'disable': True}
+        plugin_config = {}
+        publisher = MockPublisher(None, isolation, None, project_config, plugin_config)
+
+        assert publisher.disable is True
+
+    def test_project_config_not_boolean(self, isolation):
+        project_config = {'disable': 9000}
+        plugin_config = {}
+        publisher = MockPublisher(None, isolation, None, project_config, plugin_config)
+
+        with pytest.raises(TypeError, match='Field `tool.hatch.publish.mock.disable` must be a boolean'):
+            _ = publisher.disable
+
+    def test_plugin_config(self, isolation):
+        project_config = {}
+        plugin_config = {'disable': True}
+        publisher = MockPublisher(None, isolation, None, project_config, plugin_config)
+
+        assert publisher.disable is True
+
+    def test_plugin_config_not_boolean(self, isolation):
+        project_config = {}
+        plugin_config = {'disable': 9000}
+        publisher = MockPublisher(None, isolation, None, project_config, plugin_config)
+
+        with pytest.raises(TypeError, match='Global plugin configuration `publish.mock.disable` must be a boolean'):
+            _ = publisher.disable
+
+    def test_project_config_overrides_plugin_config(self, isolation):
+        project_config = {'disable': False}
+        plugin_config = {'disable': True}
+        publisher = MockPublisher(None, isolation, None, project_config, plugin_config)
+
+        assert publisher.disable is False
