diff --git a/ltiauthenticator/lti11/auth.py b/ltiauthenticator/lti11/auth.py
index 4e55788..016cfa6 100644
--- a/ltiauthenticator/lti11/auth.py
+++ b/ltiauthenticator/lti11/auth.py
@@ -3,7 +3,12 @@ from jupyterhub.auth import Authenticator
 from jupyterhub.handlers import BaseHandler
 from jupyterhub.utils import url_path_join
 
+from textwrap import dedent
+
+from tornado.web import HTTPError
+
 from traitlets.config import Dict
+from traitlets.config import Unicode
 
 from ltiauthenticator.lti11.handlers import LTI11AuthenticateHandler
 from ltiauthenticator.lti11.validator import LTI11LaunchValidator
@@ -35,6 +40,31 @@ class LTI11Authenticator(Authenticator):
         """,
     )
 
+    username_key = Unicode(
+        "custom_canvas_user_id",
+        allow_none=True,
+        config=True,
+        help="""
+        Key present in LTI 1.1 launch request used to set the user's JupyterHub's username.
+        Some common examples include:
+          - User's email address: lis_person_contact_email_primary
+          - Canvas LMS custom user id: custom_canvas_user_id
+        Your LMS (Canvas / Open EdX / Moodle / others) may provide additional keys in the
+        LTI 1.1 launch request that you can use to set the username. In most cases these
+        are prefixed with `custom_`. You may also have the option of using variable substitutions
+        to fetch values that aren't provided with your vendor's standard LTI 1.1 launch request.
+        Reference the IMS LTI specification on variable substitutions:
+        https://www.imsglobal.org/specs/ltiv1p1p1/implementation-guide#toc-9.
+        
+        Current default behavior:
+        
+        To preserve legacy behavior, if custom_canvas_user_id is present in the LTI
+        request, it is used as the username. If not, user_id is used. In the future,
+        the default will be just user_id - if you want to use custom_canvas_user_id,
+        you must explicitly set username_key to custom_canvas_user_id.
+        """,
+    )
+
     def get_handlers(self, app: JupyterHub) -> BaseHandler:
         return [("/lti/launch", LTI11AuthenticateHandler)]
 
@@ -59,6 +89,15 @@ class LTI11Authenticator(Authenticator):
         Raises:
             HTTPError if the required values are not in the request
         """
+        # log deprecation warning when using the default custom_canvas_user_id setting
+        if self.username_key == "custom_canvas_user_id":
+            self.log.warning(
+                dedent(
+                    """The default username_key 'custom_canvas_user_id' will be replaced by 'user_id' in a future release.
+                Set c.LTIAuthenticator.username_key to `custom_canvas_user_id` to preserve current behavior.
+                """
+                )
+            )
         validator = LTI11LaunchValidator(self.consumers)
 
         self.log.debug(
@@ -78,16 +117,32 @@ class LTI11Authenticator(Authenticator):
         self.log.debug("Launch url is: %s" % launch_url)
 
         if validator.validate_launch_request(launch_url, handler.request.headers, args):
-            # get the lms vendor to implement optional logic for said vendor
-            canvas_id = handler.get_body_argument("custom_canvas_user_id", default=None)
-
-            if canvas_id is not None:
-                user_id = handler.get_body_argument("custom_canvas_user_id")
-            else:
-                user_id = handler.get_body_argument("user_id")
 
+            # raise an http error if the username_key is not in the request's arguments.
+            if self.username_key not in args.keys():
+                raise HTTPError(
+                    400,
+                    "%s did not match any of the launch request arguments."
+                    % self.username_key,
+                )
+
+            # get the username_key. if empty, fetch the username from the request's user_id value.
+            username = args.get(self.username_key)
+            if not username:
+                username = args.get("user_id")
+
+            # if username is still empty or none, raise an http error.
+            if not username:
+                raise HTTPError(
+                    400,
+                    "The %s value in the launch request is empty or None."
+                    % self.username_key,
+                )
+
+            # return standard authentication where all launch request arguments are added to the auth_state key
+            # except for the oauth_* arguments.
             return {
-                "name": user_id,
+                "name": username,
                 "auth_state": {
                     k: v for k, v in args.items() if not k.startswith("oauth_")
                 },

