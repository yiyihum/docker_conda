diff --git a/src/fparser/two/Fortran2003.py b/src/fparser/two/Fortran2003.py
index 2f505d7..a0f0c58 100644
--- a/src/fparser/two/Fortran2003.py
+++ b/src/fparser/two/Fortran2003.py
@@ -4747,19 +4747,53 @@ class Mult_Operand(BinaryOpBase):  # R704
     match = staticmethod(match)
 
 
-class Add_Operand(BinaryOpBase):  # R705
-    """
-    <add-operand> = [ <add-operand> <mult-op> ] <mult-operand>
-    <mult-op>  = *
-                 | /
-    """
+class Add_Operand(BinaryOpBase):  # pylint: disable=invalid-name
+    '''Fortran 2003 rule R705
+
+    add-operand is [ add-operand mult-op ] mult-operand
+
+    Rule R705 is implemented in two parts, the first with the optional
+    part included (in the match method for this class) and the second
+    without the optional part (specified in subclass_names).
+
+    Note rule R708 (mult-op is * or /) is implemented directly here as
+    the mult_op pattern.
+
+    Rule R705 specifies matching using 'add-operand', however this
+    implementation uses Level_2_Expr instead. The reason for this is
+    due to the potential to accidentally match a negative exponent as
+    the minus sign in a level-2-expr. If this happens then it is
+    possible to end up matching a * or / (a level 1 expression) before
+    matching a valid + or - which would normally result in no match
+    overall as * or / are matched after + or -. By matching with
+    Level_2_Expr, this allows us to match with a * or / and then a +
+    or - afterwards. A particular example is "a + 1.0e-1 * c", where
+    (rightly) failing to match on the "-" leads us to try to match on
+    the "*" which then fails to match on the + (as + and - have
+    already been tested).
+
+    '''
     subclass_names = ['Mult_Operand']
-    use_names = ['Add_Operand', 'Mult_Operand']
+    use_names = ['Level_2_Expr', 'Mult_Operand']
 
+    @staticmethod
     def match(string):
-        return BinaryOpBase.match(
-            Add_Operand, pattern.mult_op.named(), Mult_Operand, string)
-    match = staticmethod(match)
+        '''Implement the matching for the add-operand rule. Makes use of the
+        pre-defined mult_op pattern and the BinaryOpBase baseclass.
+
+        :param str string: the string to match.
+
+        :returns: a tuple of size 3 containing an fparser2 class \
+            instance matching a level-2-expr expression, a string \
+            containing the matched operator and an fparser2 class \
+            instance matching a mult-operand if there is a match, or \
+            None if there is not.
+        :rtype: (subclass of :py:class:`fparser.two.utils.Base`, str, \
+            subclass of :py:class:`fparser.two.utils.Base`) or NoneType
+
+        '''
+        return  BinaryOpBase.match(
+            Level_2_Expr, pattern.mult_op.named(), Mult_Operand, string)
 
 
 class Level_2_Expr(BinaryOpBase):  # R706
@@ -4792,9 +4826,9 @@ class Level_2_Unary_Expr(UnaryOpBase):  # R706.c
             pattern.add_op.named(), Add_Operand, string)
     match = staticmethod(match)
 
-# R707: <power-op> = **
-# R708: <mult-op> = * | /
-# R709: <add-op> = + | -
+# R707: power-op is **
+# R708: mult-op is * or /
+# R709: add-op is + or -
 
 
 class Level_3_Expr(BinaryOpBase):  # R710

