diff --git a/aospy/test/test_calc_basic.py b/aospy/test/test_calc_basic.py
index 3cd2311..b2fd4d3 100755
--- a/aospy/test/test_calc_basic.py
+++ b/aospy/test/test_calc_basic.py
@@ -4,13 +4,35 @@ import datetime
 from os.path import isfile
 import shutil
 import unittest
+import pytest
 
-from aospy.calc import Calc, CalcInterface
+import xarray as xr
+
+from aospy.calc import Calc, CalcInterface, _add_metadata_as_attrs
 from .data.objects.examples import (
     example_proj, example_model, example_run, condensation_rain,
     precip, sphum, globe, sahel
 )
 
+def _test_output_attrs(calc, dtype_out):
+    data = xr.open_dataset(calc.path_out[dtype_out])
+    expected_units = calc.var.units
+    if calc.dtype_out_vert == 'vert_int':
+        if expected_units != '':
+            expected_units = ("(vertical integral of {0}):"
+                              " {0} m)").format(expected_units)
+        else:
+            expected_units = ("(vertical integral of quantity"
+                              " with unspecified units)")
+    expected_description = calc.var.description
+    for name, arr in data.data_vars.items():
+        assert expected_units == arr.attrs['units']
+        assert expected_description == arr.attrs['description']
+
+def _test_files_and_attrs(calc, dtype_out):
+    assert isfile(calc.path_out[dtype_out])
+    assert isfile(calc.path_tar_out)
+    _test_output_attrs(calc, dtype_out)
 
 class TestCalcBasic(unittest.TestCase):
     def setUp(self):
@@ -35,8 +57,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['av'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'av')
 
     def test_annual_ts(self):
         calc_int = CalcInterface(intvl_out='ann',
@@ -44,8 +65,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['ts'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'ts')
 
     def test_seasonal_mean(self):
         calc_int = CalcInterface(intvl_out='djf',
@@ -53,8 +73,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['av'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'av')
 
     def test_seasonal_ts(self):
         calc_int = CalcInterface(intvl_out='djf',
@@ -62,8 +81,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['ts'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'ts')
 
     def test_monthly_mean(self):
         calc_int = CalcInterface(intvl_out=1,
@@ -71,8 +89,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['av'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'av')
 
     def test_monthly_ts(self):
         calc_int = CalcInterface(intvl_out=1,
@@ -80,8 +97,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['ts'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'ts')
 
     def test_simple_reg_av(self):
         calc_int = CalcInterface(intvl_out='ann',
@@ -90,8 +106,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['reg.av'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'reg.av')
 
     def test_simple_reg_ts(self):
         calc_int = CalcInterface(intvl_out='ann',
@@ -100,8 +115,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['reg.ts'])
-        assert isfile(calc.path_tar_out)
+        _test_files_and_attrs(calc, 'reg.ts')
 
     def test_complex_reg_av(self):
         calc_int = CalcInterface(intvl_out='ann',
@@ -110,9 +124,7 @@ class TestCalcBasic(unittest.TestCase):
                                  **self.test_params)
         calc = Calc(calc_int)
         calc.compute()
-        assert isfile(calc.path_out['reg.av'])
-        assert isfile(calc.path_tar_out)
-
+        _test_files_and_attrs(calc, 'reg.av')
 
 class TestCalcComposite(TestCalcBasic):
     def setUp(self):
@@ -143,5 +155,37 @@ class TestCalc3D(TestCalcBasic):
             'dtype_out_vert': 'vert_int'
         }
 
+@pytest.mark.parametrize(
+    ('units', 'description', 'dtype_out_vert', 'expected_units',
+     'expected_description'),
+    [('', '', None, '', ''),
+     ('m', '', None, 'm', ''),
+     ('', 'rain', None, '', 'rain'),
+     ('m', 'rain', None, 'm', 'rain'),
+     ('', '', 'vert_av', '', ''),
+     ('m', '', 'vert_av', 'm', ''),
+     ('', 'rain', 'vert_av', '', 'rain'),
+     ('m', 'rain', 'vert_av', 'm', 'rain'),
+     ('', '', 'vert_int',
+      '(vertical integral of quantity with unspecified units)', ''),
+     ('m', '', 'vert_int',
+      '(vertical integral of m): m kg m^-2)', ''),
+     ('', 'rain', 'vert_int',
+      '(vertical integral of quantity with unspecified units)', 'rain'),
+     ('m', 'rain', 'vert_int',
+      '(vertical integral of m): m kg m^-2)', 'rain')]
+)
+def test_attrs(units, description, dtype_out_vert, expected_units,
+                expected_description):
+    da = xr.DataArray(None)
+    ds = xr.Dataset({'bar': 'foo', 'boo': 'baz'})
+    da = _add_metadata_as_attrs(da, units, description, dtype_out_vert)
+    ds = _add_metadata_as_attrs(ds, units, description, dtype_out_vert)
+    assert expected_units == da.attrs['units']
+    assert expected_description == da.attrs['description']
+    for name, arr in ds.data_vars.items():
+        assert expected_units == arr.attrs['units']
+        assert expected_description == arr.attrs['description']
+
 if __name__ == '__main__':
     unittest.main()
