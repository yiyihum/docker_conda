diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/test_reporter.py b/tests/test_reporter.py
index f2d4612..92b27c9 100644
--- a/tests/test_reporter.py
+++ b/tests/test_reporter.py
@@ -1,7 +1,44 @@
-# from unittest.mock import patch
-#
-# from dacsspace.reporter import CSVReporter
+import os
+from unittest import TestCase
+from unittest.mock import patch
 
+from dacsspace.reporter import CSVReporter
 
-def test_reporter():
-    pass
+
+class CSVReporterTest(TestCase):
+
+    def setUp(self):
+        """Sets filename and data attributes for test file.
+
+        Checks if test file exists, then deletes it.
+        """
+        self.filename = "DACSSpace_results"
+        self.results = [{"valid": True, "explanation": None}, {"valid": False, "explanation": "No title"}]
+        if os.path.isfile(self.filename):
+            os.remove(self.filename)
+
+    def test_CSV(self):
+        """Asserts that the results are correctly written to the file.
+
+        Raises an error if the file has an incorrect filemode and asserts that the filemode must allow write options.
+        """
+        CSVReporter(self.filename).write_report(self.results)
+        self.assertTrue(self.filename)
+        with self.assertRaises(ValueError) as err:
+            CSVReporter(self.filename, "r").write_report(self.results)
+        self.assertEqual(str(err.exception), "Filemode must allow write options.")
+
+    @patch("csv.DictWriter.writerows")
+    def test_invalid(self, mock_writerows):
+        """Mocks writing only invalid results and valid results to file."""
+        CSVReporter(self.filename).write_report(self.results)
+        mock_writerows.assert_called_with([{"valid": False, "explanation": "No title"}])
+        CSVReporter(self.filename).write_report(self.results, invalid_only=False)
+        mock_writerows.assert_called_with(self.results)
+
+    def tearDown(self):
+        """Tears down test file.
+
+        Checks if test file exists, then deletes it."""
+        if os.path.isfile(self.filename):
+            os.remove(self.filename)
diff --git a/tests/test_validator.py b/tests/test_validator.py
index 3796a93..ca424a5 100644
--- a/tests/test_validator.py
+++ b/tests/test_validator.py
@@ -10,14 +10,15 @@ from dacsspace.validator import Validator
 class TestValidator(unittest.TestCase):
     def test_validator(self):
         valid_json = "fixtures/valid_resource.json"
-        multiple_invalid = "fixtures/invalid_resource.json"
+        invalid_fixtures = ["fixtures/multiple_invalid.json", "fixtures/no_metadata_rights.json"]
         with open(valid_json, 'r') as v:
             valid_json = json.load(v)
             result = Validator().validate_data(valid_json)
         self.assertTrue(isinstance(result, dict))
         self.assertEqual(result["valid"], True)
-        with open(multiple_invalid, 'r') as i:
-            multiple_invalid = json.load(i)
-            result = Validator().validate_data(multiple_invalid)
-        self.assertTrue(isinstance(result, dict))
-        self.assertEqual(result["valid"], False)
+        for f in invalid_fixtures:
+            with open(f, 'r') as i:
+                invalid_json = json.load(i)
+                result = Validator().validate_data(invalid_json)
+            self.assertTrue(isinstance(result, dict))
+            self.assertEqual(result["valid"], False)
