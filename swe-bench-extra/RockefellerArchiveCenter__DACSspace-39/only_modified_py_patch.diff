diff --git a/dacsspace/reporter.py b/dacsspace/reporter.py
index 731b7a8..514a247 100644
--- a/dacsspace/reporter.py
+++ b/dacsspace/reporter.py
@@ -1,10 +1,13 @@
+import csv
+
 
 class CSVReporter:
     """Creates CSV reports."""
 
-    def __init__(self):
-        # TODO: set filepath for CSV
-        pass
+    def __init__(self, filename, filemode="w"):
+        """Sets the filename and filemode."""
+        self.filename = filename
+        self.filemode = filemode
 
     def write_report(self, results, invalid_only=True):
         """Writes results to a CSV file.
@@ -13,4 +16,15 @@ class CSVReporter:
             results (list): A list of dictionaries containing information about validation results.
             invalid_only (boolean): Only report on invalid results.
         """
-        pass
+
+        if self.filemode.startswith("r"):
+            raise ValueError("Filemode must allow write options.")
+        with open(self.filename, self.filemode) as f:
+            fieldnames = [
+                "valid",
+                "explanation"]
+            writer = csv.DictWriter(
+                f, fieldnames=fieldnames)
+            writer.writeheader()
+            filtered_results = [row for row in results if not row["valid"]] if invalid_only else results
+            writer.writerows(filtered_results)
diff --git a/dacsspace/validator.py b/dacsspace/validator.py
index bde8b8c..9f0fa71 100644
--- a/dacsspace/validator.py
+++ b/dacsspace/validator.py
@@ -1,25 +1,13 @@
-
+import json
 from jsonschema import ValidationError, validate
 
 
 class Validator:
     """Validates data from ArchivesSpace."""
 
-    def get_schema(self):
-        schema = {
-            "type": "object",
-            "title": "DACSspace schema",
-            "required": [
-                "title",
-                "id_0"
-            ],
-            "properties": {
-                "title": {
-                    "type": "string"
-                }
-            }
-        }
-        return schema
+    def __init__(self):
+        with open("single_level_required.json", "r") as json_file:
+            self.schema = json.load(json_file)
 
     def validate_data(self, data):
         """Validates data.
@@ -32,9 +20,8 @@ class Validator:
            indication of the validation result and, if necessary, an explanation
            of any validation errors. { "valid": False, "explanation": "You are missing the following fields..." }
         """
-        schema = self.get_schema()
         try:
-            validate(data, schema)
+            validate(data, self.schema)
             return {"valid": True}
         except ValidationError as error:
             return {"valid": False, "explanation": error.message}
