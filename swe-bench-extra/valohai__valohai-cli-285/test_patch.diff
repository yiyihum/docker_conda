diff --git a/tests/commands/pipeline/test_run.py b/tests/commands/pipeline/test_run.py
index b4d589b..0481d84 100644
--- a/tests/commands/pipeline/test_run.py
+++ b/tests/commands/pipeline/test_run.py
@@ -67,3 +67,27 @@ def add_valid_pipeline_yaml(yaml_path=None):
     config_filename = project.get_config_filename(yaml_path=yaml_path)
     with open(config_filename, 'w') as yaml_fp:
         yaml_fp.write(PIPELINE_YAML)
+
+
+def test_pipeline_parameters_overriding(runner, logged_in_and_linked):
+    add_valid_pipeline_yaml()
+    # Test if it lets unknown pipeline parameters pass through
+    overriding_value = '123'
+    args = ['--adhoc', 'Train Pipeline', '--not-known',  overriding_value]
+    with RunAPIMock(PROJECT_DATA['id']):
+        output = runner.invoke(run, args).output
+        assert "Unknown pipeline parameter ['not-known']" in output
+
+    args = ['--adhoc', 'Train Pipeline', '--pipeline_max_steps', overriding_value]
+    with RunAPIMock(PROJECT_DATA['id']) as mock_api:
+        output = runner.invoke(run, args).output
+
+        # Test that it runs successfully
+        assert 'Success' in output
+        assert 'Uploaded ad-hoc code' in output
+        assert 'Pipeline =21 queued' in output
+
+        # Test that the pipeline parameter was overridden
+
+        payload = mock_api.last_create_pipeline_payload['parameters']['pipeline_max_steps']
+        assert payload['expression'] == overriding_value
diff --git a/tests/commands/run_test_utils.py b/tests/commands/run_test_utils.py
index ed8659c..75900df 100644
--- a/tests/commands/run_test_utils.py
+++ b/tests/commands/run_test_utils.py
@@ -34,6 +34,7 @@ class RunAPIMock(requests_mock.Mocker):
     ):
         super().__init__()
         self.last_create_execution_payload = None
+        self.last_create_pipeline_payload = None
         self.project_id = project_id
         self.commit_id = commit_id
         self.deployment_id = deployment_id
@@ -152,7 +153,10 @@ class RunAPIMock(requests_mock.Mocker):
         assert body_json['project'] == self.project_id
         assert len(body_json['edges']) == 5
         assert len(body_json['nodes']) == 3
+        if "parameters" in body_json:
+            assert len(body_json['parameters']) == 1
         context.status_code = 201
+        self.last_create_pipeline_payload = body_json
         return PIPELINE_DATA.copy()
 
     def handle_create_commit(self, request, context):
diff --git a/tests/fixture_data.py b/tests/fixture_data.py
index eb964b8..d28a05b 100644
--- a/tests/fixture_data.py
+++ b/tests/fixture_data.py
@@ -360,6 +360,11 @@ PIPELINE_YAML = """
       - [preprocess.output.*test-images*, train.input.test-set-images]
       - [preprocess.output.*test-labels*, train.input.test-set-labels]
       - [train.output.model*, evaluate.input.model]
+    parameters:
+      - name: pipeline_max_steps
+        default: 1000
+        targets:
+            - Train model (MNIST).parameters.max_steps
 
 - pipeline:
     name: Train Pipeline
@@ -385,6 +390,11 @@ PIPELINE_YAML = """
       - [preprocess.output.*test-images*, train.input.test-set-images]
       - [preprocess.output.*test-labels*, train.input.test-set-labels]
       - [train.output.model*, evaluate.input.model]
+    parameters:
+      - name: pipeline_max_steps
+        default: 1000
+        targets:
+            - Train model (MNIST).parameters.max_steps
 """
 
 YAML_WITH_EXTRACT_TRAIN_EVAL = """
