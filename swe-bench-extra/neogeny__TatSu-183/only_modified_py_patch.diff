diff --git a/tatsu/contexts.py b/tatsu/contexts.py
index a5af681..d40cf77 100644
--- a/tatsu/contexts.py
+++ b/tatsu/contexts.py
@@ -205,6 +205,7 @@ class ParseContext(object):
               semantics=None,
               trace=False,
               whitespace=None,
+              ignorecase=None,
               **kwargs):
         try:
             self.parseinfo = kwargs.pop('parseinfo', self.parseinfo)
@@ -215,6 +216,7 @@ class ParseContext(object):
                 semantics=semantics,
                 trace=trace if trace is not None else self.trace,
                 whitespace=whitespace if whitespace is not None else self.whitespace,
+                ignorecase=ignorecase,
                 **kwargs
             )
             rule = self._find_rule(rule_name)
@@ -848,7 +850,7 @@ class ParseContext(object):
     def _check_name(self, name=None):
         if name is None:
             name = str(self.last_node)
-        if self.ignorecase or self._tokenizer.ignorecase:
+        if self.ignorecase or self.tokenizer.ignorecase:
             name = name.upper()
         if name in self.keywords:
             raise FailedKeywordSemantics('"%s" is a reserved word' % name)
diff --git a/tatsu/grammars.py b/tatsu/grammars.py
index 8a90a8d..bb61bec 100644
--- a/tatsu/grammars.py
+++ b/tatsu/grammars.py
@@ -954,6 +954,7 @@ class Grammar(Model):
                  semantics=None,
                  filename='Unknown',
                  whitespace=None,
+                 ignorecase=None,
                  nameguard=None,
                  namechars=None,
                  left_recursion=None,
@@ -983,6 +984,10 @@ class Grammar(Model):
             whitespace = directives.get('whitespace')
         self.whitespace = whitespace
 
+        if ignorecase is None:
+            ignorecase = directives.get('ignorecase')
+        self.ignorecase = ignorecase
+
         if nameguard is None:
             nameguard = directives.get('nameguard')
         self.nameguard = nameguard
@@ -1008,6 +1013,8 @@ class Grammar(Model):
         self.eol_comments_re = eol_comments_re
 
         self.keywords = keywords or set()
+        if ignorecase:
+            self.keywords = {k.upper() for k in self.keywords}
 
         self._adopt_children(rules)
 
@@ -1082,6 +1089,7 @@ class Grammar(Model):
               trace=False,
               context=None,
               whitespace=None,
+              ignorecase=None,
               left_recursion=None,
               comments_re=None,
               eol_comments_re=None,
@@ -1106,6 +1114,7 @@ class Grammar(Model):
         nameguard = notnone(nameguard, self.nameguard)
         namechars = notnone(namechars, self.namechars)
         whitespace = notnone(whitespace, self.whitespace)
+        ignorecase = notnone(ignorecase, self.ignorecase)
         if whitespace:
             whitespace = re.compile(whitespace)
 
@@ -1116,6 +1125,7 @@ class Grammar(Model):
             semantics=semantics,
             trace=trace,
             whitespace=whitespace,
+            ignorecase=ignorecase,
             comments_re=comments_re,
             eol_comments_re=eol_comments_re,
             left_recursion=left_recursion,
