diff --git a/test/grammar/keyword_test.py b/test/grammar/keyword_test.py
index d8574da..da65540 100644
--- a/test/grammar/keyword_test.py
+++ b/test/grammar/keyword_test.py
@@ -132,3 +132,29 @@ class KeywordTests(unittest.TestCase):
                 self.fail('accepted keyword "%s" as name' % k)
             except FailedParse as e:
                 self.assertTrue('"%s" is a reserved word' % k in str(e))
+
+    def test_ignorecase_keywords(self):
+        grammar = '''
+            @@ignorecase :: True
+            @@keyword :: if
+
+            start = rule ;
+
+            @name
+            rule = @:word if_exp $ ;
+
+            if_exp = 'if' digit ;
+
+            word = /\w+/ ;
+            digit = /\d/ ;
+        '''
+
+        model = compile(grammar, 'test')
+
+        model.parse('nonIF if 1', trace=True)
+
+        with self.assertRaises(FailedParse):
+            model.parse('i rf if 1', trace=True)
+
+        with self.assertRaises(FailedParse):
+            model.parse('IF if 1', trace=True)
diff --git a/test/parser_equivalence_test.py b/test/parser_equivalence_test.py
index dacaf60..337b608 100644
--- a/test/parser_equivalence_test.py
+++ b/test/parser_equivalence_test.py
@@ -3,6 +3,8 @@ import subprocess  # noqa
 import py_compile  # noqa
 from pathlib import Path
 
+import pytest
+
 from tatsu.tool import compile, gencode
 
 INPUT = """
@@ -38,11 +40,13 @@ GRAMMAR = """
         ;
 """
 
+
 def test_model_parse():
     model = compile(grammar=GRAMMAR)
     assert OUTPUT == model.parse(INPUT)
 
 
+@pytest.mark.skip('work in progress')
 def test_codegen_parse():
     init_filename = Path('./tmp/__init__.py')
     init_filename.touch(exist_ok=True)
@@ -65,7 +69,7 @@ def test_codegen_parse():
         #     }
         # ).decode()
         # print(output)
-        from tmp.parser import UnknownParser
+        from tmp.parser import UnknownParser  # pylint: disable=all
         output = UnknownParser().parse(INPUT)
         assert output == OUTPUT
     finally:
