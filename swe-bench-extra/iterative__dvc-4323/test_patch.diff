diff --git a/tests/func/test_check_ignore.py b/tests/func/test_check_ignore.py
--- a/tests/func/test_check_ignore.py
+++ b/tests/func/test_check_ignore.py
@@ -7,13 +7,13 @@
 
 
 @pytest.mark.parametrize(
-    "file,ret,output", [("ignored", 0, "ignored\n"), ("not_ignored", 1, "")]
+    "file,ret,output", [("ignored", 0, True), ("not_ignored", 1, False)]
 )
 def test_check_ignore(tmp_dir, dvc, file, ret, output, caplog):
     tmp_dir.gen(DvcIgnore.DVCIGNORE_FILE, "ignored")
 
     assert main(["check-ignore", file]) == ret
-    assert output in caplog.text
+    assert (file in caplog.text) is output
 
 
 @pytest.mark.parametrize(
@@ -39,26 +39,29 @@ def test_check_ignore_details(tmp_dir, dvc, file, ret, output, caplog):
     assert output in caplog.text
 
 
-@pytest.mark.parametrize(
-    "non_matching,output", [(["-n"], "::\tfile\n"), ([], "")]
-)
-def test_check_ignore_non_matching(tmp_dir, dvc, non_matching, output, caplog):
-    tmp_dir.gen(DvcIgnore.DVCIGNORE_FILE, "other")
-
-    assert main(["check-ignore", "-d"] + non_matching + ["file"]) == 1
-    assert output in caplog.text
-
-
-def test_check_ignore_non_matching_without_details(tmp_dir, dvc):
+@pytest.mark.parametrize("non_matching", [True, False])
+def test_check_ignore_non_matching(tmp_dir, dvc, non_matching, caplog):
     tmp_dir.gen(DvcIgnore.DVCIGNORE_FILE, "other")
+    if non_matching:
+        assert main(["check-ignore", "-d", "-n", "file"]) == 1
+    else:
+        assert main(["check-ignore", "-d", "file"]) == 1
 
-    assert main(["check-ignore", "-n", "file"]) == 255
-
+    assert ("::\tfile\n" in caplog.text) is non_matching
 
-def test_check_ignore_details_with_quiet(tmp_dir, dvc):
-    tmp_dir.gen(DvcIgnore.DVCIGNORE_FILE, "other")
 
-    assert main(["check-ignore", "-d", "-q", "file"]) == 255
+@pytest.mark.parametrize(
+    "args",
+    [
+        ["-n", "file"],
+        ["-a", "file"],
+        ["-q", "-d", "file"],
+        ["--stdin", "file"],
+        [],
+    ],
+)
+def test_check_ignore_error_args_cases(tmp_dir, dvc, args):
+    assert main(["check-ignore"] + args) == 255
 
 
 @pytest.mark.parametrize("path,ret", [({"dir": {}}, 0), ({"dir": "files"}, 1)])
@@ -107,3 +110,26 @@ def test_check_sub_dir_ignore_file(tmp_dir, dvc, caplog):
     with sub_dir.chdir():
         assert main(["check-ignore", "-d", "foo"]) == 0
         assert ".dvcignore:2:foo\tfoo" in caplog.text
+
+
+def test_check_ignore_details_all(tmp_dir, dvc, caplog):
+    tmp_dir.gen(DvcIgnore.DVCIGNORE_FILE, "f*\n!foo")
+
+    assert main(["check-ignore", "-d", "-a", "foo"]) == 0
+    assert "{}:1:f*\tfoo\n".format(DvcIgnore.DVCIGNORE_FILE) in caplog.text
+    assert "{}:2:!foo\tfoo\n".format(DvcIgnore.DVCIGNORE_FILE) in caplog.text
+
+
+@pytest.mark.parametrize(
+    "file,ret,output", [("ignored", 0, True), ("not_ignored", 1, False)]
+)
+def test_check_ignore_stdin_mode(
+    tmp_dir, dvc, file, ret, output, caplog, mocker
+):
+    tmp_dir.gen(DvcIgnore.DVCIGNORE_FILE, "ignored")
+    mocker.patch("builtins.input", side_effect=[file, ""])
+    stdout_mock = mocker.patch("sys.stdout")
+    stdout_mock.isatty.return_value = True
+
+    assert main(["check-ignore", "--stdin"]) == ret
+    assert (file in caplog.text) is output
