diff --git a/tests/unit/client_tests.py b/tests/unit/client_tests.py
index 796e5fc..db78861 100644
--- a/tests/unit/client_tests.py
+++ b/tests/unit/client_tests.py
@@ -552,6 +552,34 @@ class CloudantClientTests(UnitTestDbBase):
         except Exception as err:
             self.fail('Exception {0} was raised.'.format(str(err)))
 
+    def test_cloudant_bluemix_dedicated_context_helper(self):
+        """
+        Test that the cloudant_bluemix context helper works as expected when
+        specifying a service name.
+        """
+        instance_name = 'Cloudant NoSQL DB-wq'
+        service_name = 'cloudantNoSQLDB Dedicated'
+        vcap_services = {service_name: [{
+          'credentials': {
+            'username': self.user,
+            'password': self.pwd,
+            'host': '{0}.cloudant.com'.format(self.account),
+            'port': 443,
+            'url': self.url
+          },
+          'name': instance_name,
+        }]}
+
+        try:
+            with cloudant_bluemix(vcap_services,
+                                  instance_name=instance_name,
+                                  service_name=service_name) as c:
+                self.assertIsInstance(c, Cloudant)
+                self.assertIsInstance(c.r_session, requests.Session)
+                self.assertEquals(c.session()['userCtx']['name'], self.user)
+        except Exception as err:
+            self.fail('Exception {0} was raised.'.format(str(err)))
+
     def test_constructor_with_account(self):
         """
         Test instantiating a client object using an account name
diff --git a/tests/unit/cloud_foundry_tests.py b/tests/unit/cloud_foundry_tests.py
index 043949f..43249b7 100644
--- a/tests/unit/cloud_foundry_tests.py
+++ b/tests/unit/cloud_foundry_tests.py
@@ -91,68 +91,104 @@ class CloudFoundryServiceTests(unittest.TestCase):
                 ]
             }
         ]})
+        self._test_vcap_services_dedicated = json.dumps({
+            'cloudantNoSQLDB Dedicated': [  # dedicated service name
+                {
+                    'name': 'Cloudant NoSQL DB 1',  # valid service
+                    'credentials': {
+                        'host': 'example.cloudant.com',
+                        'password': 'pa$$w0rd01',
+                        'port': 1234,
+                        'username': 'example'
+                    }
+                }
+            ]
+        })
 
     def test_get_vcap_service_default_success(self):
-        service = CloudFoundryService(self._test_vcap_services_single)
+        service = CloudFoundryService(
+            self._test_vcap_services_single,
+            service_name='cloudantNoSQLDB'
+        )
         self.assertEqual('Cloudant NoSQL DB 1', service.name)
 
     def test_get_vcap_service_default_success_as_dict(self):
         service = CloudFoundryService(
-            json.loads(self._test_vcap_services_single)
+            json.loads(self._test_vcap_services_single),
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('Cloudant NoSQL DB 1', service.name)
 
     def test_get_vcap_service_default_failure_multiple_services(self):
         with self.assertRaises(CloudantException) as cm:
-            CloudFoundryService(self._test_vcap_services_multiple)
+            CloudFoundryService(
+                self._test_vcap_services_multiple,
+                service_name='cloudantNoSQLDB'
+            )
         self.assertEqual('Missing service in VCAP_SERVICES', str(cm.exception))
 
     def test_get_vcap_service_instance_host(self):
         service = CloudFoundryService(
-            self._test_vcap_services_multiple, 'Cloudant NoSQL DB 1'
+            self._test_vcap_services_multiple,
+            instance_name='Cloudant NoSQL DB 1',
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('example.cloudant.com', service.host)
 
     def test_get_vcap_service_instance_password(self):
         service = CloudFoundryService(
-            self._test_vcap_services_multiple, 'Cloudant NoSQL DB 1'
+            self._test_vcap_services_multiple,
+            instance_name='Cloudant NoSQL DB 1',
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('pa$$w0rd01', service.password)
 
     def test_get_vcap_service_instance_port(self):
         service = CloudFoundryService(
-            self._test_vcap_services_multiple, 'Cloudant NoSQL DB 1'
+            self._test_vcap_services_multiple,
+            instance_name='Cloudant NoSQL DB 1',
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('1234', service.port)
 
     def test_get_vcap_service_instance_port_default(self):
         service = CloudFoundryService(
-            self._test_vcap_services_multiple, 'Cloudant NoSQL DB 2'
+            self._test_vcap_services_multiple,
+            instance_name='Cloudant NoSQL DB 2',
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('443', service.port)
 
     def test_get_vcap_service_instance_url(self):
         service = CloudFoundryService(
-            self._test_vcap_services_multiple, 'Cloudant NoSQL DB 1'
+            self._test_vcap_services_multiple,
+            instance_name='Cloudant NoSQL DB 1',
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('https://example.cloudant.com:1234', service.url)
 
     def test_get_vcap_service_instance_username(self):
         service = CloudFoundryService(
-            self._test_vcap_services_multiple, 'Cloudant NoSQL DB 1'
+            self._test_vcap_services_multiple,
+            instance_name='Cloudant NoSQL DB 1',
+            service_name='cloudantNoSQLDB'
         )
         self.assertEqual('example', service.username)
 
     def test_raise_error_for_missing_host(self):
         with self.assertRaises(CloudantException):
             CloudFoundryService(
-                self._test_vcap_services_multiple, 'Cloudant NoSQL DB 3'
+                self._test_vcap_services_multiple,
+                instance_name='Cloudant NoSQL DB 3',
+                service_name='cloudantNoSQLDB'
             )
 
     def test_raise_error_for_missing_password(self):
         with self.assertRaises(CloudantException) as cm:
             CloudFoundryService(
-                self._test_vcap_services_multiple, 'Cloudant NoSQL DB 4'
+                self._test_vcap_services_multiple,
+                instance_name='Cloudant NoSQL DB 4',
+                service_name='cloudantNoSQLDB'
             )
         self.assertEqual(
             "Invalid service: 'password' missing",
@@ -162,7 +198,9 @@ class CloudFoundryServiceTests(unittest.TestCase):
     def test_raise_error_for_missing_username(self):
         with self.assertRaises(CloudantException) as cm:
             CloudFoundryService(
-                self._test_vcap_services_multiple, 'Cloudant NoSQL DB 5'
+                self._test_vcap_services_multiple,
+                instance_name='Cloudant NoSQL DB 5',
+                service_name='cloudantNoSQLDB'
             )
         self.assertEqual(
             "Invalid service: 'username' missing",
@@ -172,7 +210,9 @@ class CloudFoundryServiceTests(unittest.TestCase):
     def test_raise_error_for_invalid_credentials_type(self):
         with self.assertRaises(CloudantException) as cm:
             CloudFoundryService(
-                self._test_vcap_services_multiple, 'Cloudant NoSQL DB 6'
+                self._test_vcap_services_multiple,
+                instance_name='Cloudant NoSQL DB 6',
+                service_name='cloudantNoSQLDB'
             )
         self.assertEqual(
             'Failed to decode VCAP_SERVICES service credentials',
@@ -182,7 +222,9 @@ class CloudFoundryServiceTests(unittest.TestCase):
     def test_raise_error_for_missing_service(self):
         with self.assertRaises(CloudantException) as cm:
             CloudFoundryService(
-                self._test_vcap_services_multiple, 'Cloudant NoSQL DB 7'
+                self._test_vcap_services_multiple,
+                instance_name='Cloudant NoSQL DB 7',
+                service_name='cloudantNoSQLDB'
             )
         self.assertEqual('Missing service in VCAP_SERVICES', str(cm.exception))
 
@@ -190,3 +232,10 @@ class CloudFoundryServiceTests(unittest.TestCase):
         with self.assertRaises(CloudantException) as cm:
             CloudFoundryService('{', 'Cloudant NoSQL DB 1')  # invalid JSON
         self.assertEqual('Failed to decode VCAP_SERVICES JSON', str(cm.exception))
+
+    def test_get_vcap_service_with_dedicated_service_name_success(self):
+        service = CloudFoundryService(
+            self._test_vcap_services_dedicated,
+            service_name='cloudantNoSQLDB Dedicated'
+        )
+        self.assertEqual('Cloudant NoSQL DB 1', service.name)
