diff --git a/src/cloudant/__init__.py b/src/cloudant/__init__.py
index 04131db..7b1ba55 100644
--- a/src/cloudant/__init__.py
+++ b/src/cloudant/__init__.py
@@ -92,7 +92,7 @@ def cloudant_iam(account_name, api_key, **kwargs):
     cloudant_session.disconnect()
 
 @contextlib.contextmanager
-def cloudant_bluemix(vcap_services, instance_name=None, **kwargs):
+def cloudant_bluemix(vcap_services, instance_name=None, service_name=None, **kwargs):
     """
     Provides a context manager to create a Cloudant session and provide access
     to databases, docs etc.
@@ -101,6 +101,7 @@ def cloudant_bluemix(vcap_services, instance_name=None, **kwargs):
     :type vcap_services: dict or str
     :param str instance_name: Optional Bluemix instance name. Only required if
         multiple Cloudant instances are available.
+    :param str service_name: Optional Bluemix service name.
     :param str encoder: Optional json Encoder object used to encode
         documents for storage. Defaults to json.JSONEncoder.
 
@@ -149,11 +150,10 @@ def cloudant_bluemix(vcap_services, instance_name=None, **kwargs):
             print client.all_dbs()
             # ...
     """
-    service = CloudFoundryService(vcap_services, instance_name)
-    cloudant_session = Cloudant(
-        service.username,
-        service.password,
-        url=service.url,
+    cloudant_session = Cloudant.bluemix(
+        vcap_services,
+        instance_name=instance_name,
+        service_name=service_name,
         **kwargs
     )
     cloudant_session.connect()
diff --git a/src/cloudant/_common_util.py b/src/cloudant/_common_util.py
index fe2e068..05e3bd3 100644
--- a/src/cloudant/_common_util.py
+++ b/src/cloudant/_common_util.py
@@ -498,18 +498,18 @@ class IAMSession(ClientSession):
 class CloudFoundryService(object):
     """ Manages Cloud Foundry service configuration. """
 
-    def __init__(self, vcap_services, name=None):
+    def __init__(self, vcap_services, instance_name=None, service_name=None):
         try:
             services = vcap_services
             if not isinstance(vcap_services, dict):
                 services = json.loads(vcap_services)
 
-            cloudant_services = services.get('cloudantNoSQLDB', [])
+            cloudant_services = services.get(service_name, [])
 
             # use first service if no name given and only one service present
-            use_first = name is None and len(cloudant_services) == 1
+            use_first = instance_name is None and len(cloudant_services) == 1
             for service in cloudant_services:
-                if use_first or service.get('name') == name:
+                if use_first or service.get('name') == instance_name:
                     credentials = service['credentials']
                     self._host = credentials['host']
                     self._name = service.get('name')
diff --git a/src/cloudant/client.py b/src/cloudant/client.py
index 3a1360c..ce7d493 100755
--- a/src/cloudant/client.py
+++ b/src/cloudant/client.py
@@ -754,7 +754,7 @@ class Cloudant(CouchDB):
         return resp.json()
 
     @classmethod
-    def bluemix(cls, vcap_services, instance_name=None, **kwargs):
+    def bluemix(cls, vcap_services, instance_name=None, service_name=None, **kwargs):
         """
         Create a Cloudant session using a VCAP_SERVICES environment variable.
 
@@ -762,6 +762,7 @@ class Cloudant(CouchDB):
         :type vcap_services: dict or str
         :param str instance_name: Optional Bluemix instance name. Only required
             if multiple Cloudant instances are available.
+        :param str service_name: Optional Bluemix service name.
 
         Example usage:
 
@@ -775,7 +776,10 @@ class Cloudant(CouchDB):
 
             print client.all_dbs()
         """
-        service = CloudFoundryService(vcap_services, instance_name)
+        service_name = service_name or 'cloudantNoSQLDB'  # default service
+        service = CloudFoundryService(vcap_services,
+                                      instance_name=instance_name,
+                                      service_name=service_name)
         return Cloudant(service.username,
                         service.password,
                         url=service.url,

