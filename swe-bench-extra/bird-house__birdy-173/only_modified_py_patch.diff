diff --git a/birdy/client/base.py b/birdy/client/base.py
index 9bbf39f..d4bdf2e 100644
--- a/birdy/client/base.py
+++ b/birdy/client/base.py
@@ -250,14 +250,7 @@ class WPSClient(object):
                 if isinstance(input_param.defaultValue, ComplexData):
 
                     # Guess the mimetype of the input value
-                    mimetype, encoding = guess_type(value)
-
-                    # If unrecognized, default to the first supported mimetype
-                    if mimetype is None:
-                        mimetype = supported_mimetypes[0]
-                    else:
-                        if mimetype not in supported_mimetypes:
-                            raise ValueError(f"mimetype {mimetype} not in supported mimetypes {supported_mimetypes}.")
+                    mimetype, encoding = guess_type(value, supported_mimetypes)
 
                     if encoding is None:
                         encoding = input_param.defaultValue.encoding
diff --git a/birdy/utils.py b/birdy/utils.py
index b892acf..0a6afae 100644
--- a/birdy/utils.py
+++ b/birdy/utils.py
@@ -122,8 +122,16 @@ def _encode(content, mimetype, encoding):
         # return u'<![CDATA[{}]]>'.format(content)
 
 
-def guess_type(url):
-    """Guess the mime type of the file link.
+def guess_type(url, supported):
+    """Guess the mime type of the file link. If the mimetype is not recognized, default to the first supported value.
+
+
+    Parameters
+    ----------
+    url : str
+      Path or URL to file.
+    supported : list, tuple
+      Supported mimetypes.
 
     Returns
     -------
@@ -143,10 +151,20 @@ def guess_type(url):
     if mime == "application/x-netcdf" and "dodsC" in url:
         mime = "application/x-ogc-dods"
 
-    # application/zip vs application/x-zipped-shp
-    # TODO
+    zips = ["application/zip", "application/x-zipped-shp"]
+
+    if mime not in supported:
+        if mime in zips and set(zips).intersection(supported):
+            mime = set(zips).intersection(supported).pop()
 
     # All the various XML schemes
     # TODO
 
+    # If unrecognized, default to the first supported mimetype
+    if mime is None:
+        mime = supported[0]
+    else:
+        if mime not in supported:
+            raise ValueError(f"mimetype {mime} not in supported mimetypes {supported}.")
+
     return mime, enc

