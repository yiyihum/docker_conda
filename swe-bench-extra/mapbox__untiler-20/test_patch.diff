diff --git a/tests/test_cli.py b/tests/test_cli.py
index d00abcf..41dc1d7 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -1,24 +1,34 @@
-from click.testing import CliRunner
+import os
+import shutil
+import uuid
 
-from untiler.scripts.cli import cli
-import os, shutil, mercantile, pytest
+from click.testing import CliRunner
+import mercantile
 import numpy as np
+import pytest
 import rasterio as rio
 
+from untiler.scripts.cli import cli
+
 
 class TestTiler:
-    def __init__(self, path):
-        self.path = path
-        self.cleanup()
+    def __init__(self):
+        self.path = '/tmp/test-untiler-' + str(uuid.uuid4())
         os.mkdir(self.path)
         self.imgs = ['tests/fixtures/fill_img.jpg', 'tests/fixtures/fill_img_grey.jpg']
 
-    def cleanup(self):
+    def __enter__(self):
+        return self
+
+    def __exit__(self, *args):
         try:
-            shutil.rmtree(self.path)
+            self.cleanup()
         except:
             pass
 
+    def cleanup(self):
+        shutil.rmtree(self.path)
+
     def add_tiles(self, zMin, zMax):
         zooms = np.arange(zMax - zMin + 2) + zMin - 1
 
@@ -30,9 +40,9 @@ class TestTiler:
         if not os.path.isdir(basepath):
             os.mkdir(basepath)
 
-        for i in xrange(1, len(zooms)):
+        for i in range(1, len(zooms)):
             tiles = []
-            os.mkdir("%s/%s" % (basepath, zooms[i])) 
+            os.mkdir("%s/%s" % (basepath, zooms[i]))
             for t in obj[zooms[i - 1]]:
                 for tt in mercantile.children(t):
                     tiles.append(tt)
@@ -45,107 +55,103 @@ class TestTiler:
                                     "%s/%s/%s/%s.jpg" % (basepath, zooms[i], tt.x, tt.y))
             obj[zooms[i]] = tiles
 
-def test_cli_streamdir_all_ok():
-    testtiles = TestTiler('/tmp/test-untiler')
-    testtiles.add_tiles(15, 19)
-    runner = CliRunner()
-
-    result = runner.invoke(cli, ['streamdir', '/tmp/test-untiler', '/tmp/test-untiler', '-c', '14'])
-    
-    assert result.output.rstrip() == '/tmp/test-untiler/14-2621-6348-tile.tif'    
 
-    with rio.open(result.output.rstrip()) as src:
-        assert src.shape == (8192, 8192)
-        assert src.count == 4
+def test_cli_streamdir_all_ok():
+    with TestTiler() as testtiles:
+        testtiles.add_tiles(15, 18)
+        tmp = testtiles.path
+        runner = CliRunner()
+        result = runner.invoke(cli, ['streamdir', tmp, tmp, '-c', '14'])
+        assert result.output.rstrip() == os.path.join(tmp, '14-2621-6348-tile.tif')
+        with rio.open(result.output.rstrip()) as src:
+            assert src.shape == (4096, 4096)  # matches z18
+            assert src.count == 4
 
-    testtiles.cleanup()
 
 def test_cli_streamdir_mixed_ok():
-    testtiles = TestTiler('/tmp/test-untiler')
-    testtiles.add_tiles(15, 16)
-    testtiles.add_tiles(17, 19)
-    runner = CliRunner()
+    with TestTiler() as testtiles:
+        testtiles.add_tiles(15, 16)
+        testtiles.add_tiles(17, 18)
+        tmp = testtiles.path
+        runner = CliRunner()
+        result = runner.invoke(cli, ['streamdir', tmp, tmp, '-c', '14'])
+        assert result.output.rstrip() == os.path.join(tmp, '14-2621-6348-tile.tif')
 
-    result = runner.invoke(cli, ['streamdir', '/tmp/test-untiler', '/tmp/test-untiler', '-c', '14'])
-    
-    assert result.output.rstrip() == '/tmp/test-untiler/14-2621-6348-tile.tif'    
+        with rio.open(result.output.rstrip()) as src:
+            assert src.shape == (4096, 4096)  # matches z18
+            assert src.count == 4
 
-    with rio.open(result.output.rstrip()) as src:
-        assert src.shape == (8192, 8192)
-        assert src.count == 4
 
-    testtiles.cleanup()
+def test_cli_streamdir_mixed_ok_poo():
+    with TestTiler() as testtiles:
+        testtiles.add_tiles(15, 16)
+        tmp = testtiles.path
+        runner = CliRunner()
+        result = runner.invoke(cli, ['streamdir', tmp, tmp, '-c', '14', '-t', 'poo/{z}/{z}/{z}.jpg'])
+        assert result.exit_code == -1
 
-def test_cli_streamdir_mixed_ok():
-    testtiles = TestTiler('/tmp/test-untiler')
-    testtiles.add_tiles(15, 16)
-    runner = CliRunner()
-
-    result = runner.invoke(cli, ['streamdir', '/tmp/test-untiler', '/tmp/test-untiler', '-c', '14', '-t', 'poo/{z}/{z}/{z}.jpg'])
-
-    assert result.exit_code == -1
-
-    testtiles.cleanup()
 
 def test_cli_baddir_fails():
-    rdir = '/tmp' + ''.join(np.random.randint(0,9,10).astype(str))
+    rdir = '/tmp/this/does/not.exist'
     runner = CliRunner()
-
     result = runner.invoke(cli, ['streamdir', rdir, rdir, '-c', '14'])
-
     assert result.exit_code == 2
 
+
 def test_cli_badoutput_fails():
-    pdir = '/tmp/' + ''.join(np.random.randint(0,9,10).astype(str))
-    rdir = '/tmp/' + ''.join(np.random.randint(0,9,10).astype(str))
+    pdir = '/tmp/test-untiler-' + str(uuid.uuid4())
+    rdir = '/tmp/test-untiler-' + str(uuid.uuid4())
     os.mkdir(pdir)
     runner = CliRunner()
-
     result = runner.invoke(cli, ['streamdir', pdir, rdir, '-c', '14'])
-
     assert result.exit_code == 2
+    try:
+        shutil.rmtree(pdir)
+        shutil.rmtree(rdir)
+    except:
+        pass
 
-    shutil.rmtree(pdir)
 
 def test_diff_zooms():
-    testtiles = TestTiler('/tmp/test-untiler')
-    testtiles.add_tiles(15, 16)
-    testtiles.add_tiles(17, 18)
-    runner = CliRunner()
-
-    result = runner.invoke(cli, ['streamdir', '/tmp/test-untiler', '/tmp/test-untiler', '-c', '15'])
+    with TestTiler() as testtiles:
+        testtiles.add_tiles(15, 16)
+        testtiles.add_tiles(17, 18)
+        tmp = testtiles.path
+        runner = CliRunner()
 
-    expected_scenes = '/tmp/test-untiler/15-5242-12696-tile.tif\n/tmp/test-untiler/15-5243-12696-tile.tif\n/tmp/test-untiler/15-5243-12697-tile.tif\n/tmp/test-untiler/15-5242-12697-tile.tif\n'
+        runner.invoke(cli, ['streamdir', tmp, tmp, '-c', '15'])
 
-    with rio.open('/tmp/test-untiler/15-5242-12697-tile.tif') as src:
-        assert src.shape == (2048, 2048)
-        assert src.count == 4
+        with rio.open(os.path.join(tmp, '15-5242-12697-tile.tif')) as src:
+            assert src.shape == (2048, 2048)
+            assert src.count == 4
 
-    with rio.open('/tmp/test-untiler/15-5242-12696-tile.tif') as src:
-        assert src.shape == (512, 512)
-        assert src.count == 4
+        with rio.open(os.path.join(tmp, '15-5242-12696-tile.tif')) as src:
+            assert src.shape == (512, 512)
+            assert src.count == 4
 
-    testtiles.cleanup()
 
 def test_extract_mbtiles():
-    testpath = '/tmp/' + ''.join(np.random.randint(0,9,10).astype(str))
-    testmbtiles = os.path.join(os.path.dirname(__file__), 'fixtures/testtiles.mbtiles')
-    os.mkdir(testpath)
-    runner = CliRunner()
-    result = runner.invoke(cli, ['streammbtiles', testmbtiles, testpath, '-z', '16', '-x', '-s', '{z}-{x}-{y}-mbtiles.tif', '--co', 'compress=lzw'])
-    assert result.exit_code == 0
-    expected_checksums = [[13858, 8288, 51489, 31223], [17927, 52775, 411, 9217]]
-    for o, c in zip(result.output.rstrip().split('\n'), expected_checksums):
-        with rio.open(o) as src:
-            checksums = [src.checksum(i) for i in src.indexes]
-            assert checksums == c
-    shutil.rmtree(testpath)
+    with TestTiler() as tt:
+        testpath = tt.path
+        testmbtiles = os.path.join(os.path.dirname(__file__), 'fixtures/testtiles.mbtiles')
+        runner = CliRunner()
+        result = runner.invoke(cli, [
+            'streammbtiles', testmbtiles, testpath, '-z', '16', '-x', '-s',
+            '{z}-{x}-{y}-mbtiles.tif', '--co', 'compress=lzw'])
+        assert result.exit_code == 0
+        expected_checksums = [[13858, 8288, 51489, 31223], [17927, 52775, 411, 9217]]
+        for o, c in zip(result.output.rstrip().split('\n'), expected_checksums):
+            with rio.open(o) as src:
+                checksums = [src.checksum(i) for i in src.indexes]
+                assert checksums == c
+
 
 def test_extract_mbtiles_fails():
-    testpath = '/tmp/' + ''.join(np.random.randint(0,9,10).astype(str))
-    testmbtiles = os.path.join(os.path.dirname(__file__), 'fixtures/bad.mbtiles')
-    os.mkdir(testpath)
-    runner = CliRunner()
-    result = runner.invoke(cli, ['streammbtiles', testmbtiles, testpath, '-z', '16', '-x', '-s', '{z}-{x}-{y}-mbtiles.tif', '--co', 'compress=lzw'])
-    assert result.exit_code == -1
-    shutil.rmtree(testpath)
\ No newline at end of file
+    with TestTiler() as tt:
+        testpath = tt.path
+        testmbtiles = os.path.join(os.path.dirname(__file__), 'fixtures/bad.mbtiles')
+        runner = CliRunner()
+        result = runner.invoke(cli, [
+            'streammbtiles', testmbtiles, testpath, '-z', '16', '-x', '-s',
+            '{z}-{x}-{y}-mbtiles.tif', '--co', 'compress=lzw'])
+        assert result.exit_code == -1
diff --git a/tests/test_untiler_funcs.py b/tests/test_untiler_funcs.py
index 8cf433c..9a0cf25 100644
--- a/tests/test_untiler_funcs.py
+++ b/tests/test_untiler_funcs.py
@@ -1,15 +1,18 @@
 #!/usr/bin/env python
+import json
+import pickle
+import os
 
 import pytest
-import untiler
-from untiler.scripts import tile_utils
-
 import numpy as np
-import json, pickle, os
 import mercantile as merc
 import inspect
 import rasterio
 
+import untiler
+from untiler.scripts import tile_utils
+
+
 def test_templating_good_jpg():
     print("")
     expectedMatch = 'tarbase/jpg/\d+/\d+/\d+.jpg'
@@ -170,7 +173,7 @@ def test_affine():
 
 @pytest.fixture
 def expectedMeta():
-    with open('tests/expected/src_meta.pkl') as pklfile:
+    with open('tests/expected/src_meta.pkl', mode='rb') as pklfile:
         return pickle.load(pklfile)
 
 
