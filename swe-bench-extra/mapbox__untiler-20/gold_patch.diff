diff --git a/untiler/__init__.py b/untiler/__init__.py
index 4191f7f..2e453dc 100644
--- a/untiler/__init__.py
+++ b/untiler/__init__.py
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 from __future__ import with_statement
 from __future__ import print_function
+from __future__ import division
 import os
 from multiprocessing import Pool
 
@@ -137,7 +138,8 @@ def logwriter(openLogFile, writeObj):
 def streaming_tile_worker(data):
     size = 2 ** (data['zMax'] - globalArgs['compositezoom']) * globalArgs['tileResolution']
     out_meta = make_src_meta(merc.bounds(data['x'], data['y'], data['z']), size, globalArgs['creation_opts'])
-    filename = globalArgs['sceneTemplate'] % (data['z'], data['x'], data['y'])
+    z, x, y = [int(i) for i in (data['z'], data['x'], data['y'])]
+    filename = globalArgs['sceneTemplate'] % (z, x, y)
     subtiler = tile_utils.TileUtils()
     log = 'FILE: %s\n' % filename
     try:
@@ -158,7 +160,7 @@ def streaming_tile_worker(data):
                     print('filling')
                     ## Read and write the fill tiles first
                     for t in subtiler.get_fill_super_tiles(superTiles, data['maxCovTiles'], fThresh):
-                        z, x, y = t
+                        z, x, y = [int(i) for i in t]
                         path = globalArgs['readTemplate'] % (z, x, y)
                         log += '%s %s %s\n' % (z, x, y)
 
@@ -176,7 +178,7 @@ def streaming_tile_worker(data):
             baseX, baseY = subtiler.get_sub_base_zoom(data['x'], data['y'], data['z'], data['zMax'])
 
             for t in data['zMaxTiles']:
-                z, x, y = t
+                z, x, y = [int(i) for i in t]
                 path = globalArgs['readTemplate'] % (z, x, y)
                 log += '%s %s %s\n' % (z, x, y)
 
diff --git a/untiler/scripts/mbtiles_extract.py b/untiler/scripts/mbtiles_extract.py
index ea942d4..9d63a8a 100644
--- a/untiler/scripts/mbtiles_extract.py
+++ b/untiler/scripts/mbtiles_extract.py
@@ -6,12 +6,12 @@ from mbutil import mbtiles_to_disk
 
 import contextlib
 import sys
-import cStringIO
+from io import StringIO
 
 @contextlib.contextmanager
 def nostdout():
     save_stdout = sys.stdout
-    sys.stdout = cStringIO.StringIO()
+    sys.stdout = StringIO()
     yield
     sys.stdout = save_stdout
 
diff --git a/untiler/scripts/tile_utils.py b/untiler/scripts/tile_utils.py
index 9a599a4..3620675 100644
--- a/untiler/scripts/tile_utils.py
+++ b/untiler/scripts/tile_utils.py
@@ -1,3 +1,4 @@
+from __future__ import division
 import numpy as np
 import re
 from collections import OrderedDict
@@ -46,7 +47,7 @@ class TileUtils:
         if np.any(subTiles[:, 0] < zoom):
             raise ValueError("Cannot get super tiles of tile array w/ smaller zoom")
         zoomdiffs = 2 ** (subTiles[:, 0] - zoom)
-        superTiles = subTiles / np.vstack(zoomdiffs)
+        superTiles = subTiles // np.vstack(zoomdiffs)
         superTiles[:,0] = zoom
 
         return superTiles
@@ -154,4 +155,4 @@ def parse_template(template):
 
 if __name__ == "__main__":
     TileUtils()
-    parse_template()
\ No newline at end of file
+    parse_template()
