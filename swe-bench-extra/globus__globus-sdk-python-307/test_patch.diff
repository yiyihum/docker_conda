diff --git a/tests/unit/test_config.py b/tests/unit/test_config.py
index 7ed9106e..fee2929c 100644
--- a/tests/unit/test_config.py
+++ b/tests/unit/test_config.py
@@ -148,22 +148,35 @@ class ConfigParserTests(CapturedIOTestCase):
         with self.assertRaises(ValueError):
             globus_sdk.config._bool_cast("invalid")
 
-    def test_get_default_environ(self):
+    def test_get_globus_environ(self):
         """
         Confirms returns "default", or the value of GLOBUS_SDK_ENVIRONMENT
         """
-        # default if no environ value exists
-        prev_setting = None
-        if "GLOBUS_SDK_ENVIRONMENT" in os.environ:
-            prev_setting = os.environ["GLOBUS_SDK_ENVIRONMENT"]
+        # mock environ to ensure it gets reset
+        with mock.patch.dict(os.environ):
+            # set an environment value, ensure that it's returned
+            os.environ["GLOBUS_SDK_ENVIRONMENT"] = "beta"
+            self.assertEqual(globus_sdk.config.get_globus_environ(), "beta")
+
+            # clear that value, "default" should be returned
             del os.environ["GLOBUS_SDK_ENVIRONMENT"]
-        self.assertEqual(globus_sdk.config.get_default_environ(), "default")
-        # otherwise environ value
-        os.environ["GLOBUS_SDK_ENVIRONMENT"] = "beta"
-        self.assertEqual(globus_sdk.config.get_default_environ(), "beta")
-
-        # cleanup for other tests
-        if prev_setting:
-            os.environ["GLOBUS_SDK_ENVIRONMENT"] = prev_setting
-        else:
+            self.assertEqual(globus_sdk.config.get_globus_environ(), "default")
+
+            # ensure that passing a value returns that value
+            self.assertEqual(
+                globus_sdk.config.get_globus_environ("beta"), "beta")
+
+    def test_get_globus_environ_production(self):
+        """
+        Confirms that get_globus_environ translates "production" to "default",
+        including when special values are passed
+        """
+        # mock environ to ensure it gets reset
+        with mock.patch.dict(os.environ):
+            os.environ["GLOBUS_SDK_ENVIRONMENT"] = "production"
+            self.assertEqual(globus_sdk.config.get_globus_environ(), "default")
+
             del os.environ["GLOBUS_SDK_ENVIRONMENT"]
+            # ensure that passing a value returns that value
+            self.assertEqual(
+                globus_sdk.config.get_globus_environ("production"), "default")
diff --git a/tests/unit/test_renewing_authorizer.py b/tests/unit/test_renewing_authorizer.py
index ed227b92..ffda8551 100644
--- a/tests/unit/test_renewing_authorizer.py
+++ b/tests/unit/test_renewing_authorizer.py
@@ -105,7 +105,7 @@ class RenewingAuthorizerTests(CapturedIOTestCase):
         """
         Confirms nothing is done before the access_token expires,
         """
-        self.authorizer._check_expiration_time()
+        self.authorizer.check_expiration_time()
         self.assertEqual(self.authorizer.access_token, self.access_token)
 
     def test_check_expiration_time_expired(self):
@@ -113,7 +113,7 @@ class RenewingAuthorizerTests(CapturedIOTestCase):
         Confirms a new access_token is gotten after waiting for expiration
         """
         time.sleep(1)
-        self.authorizer._check_expiration_time()
+        self.authorizer.check_expiration_time()
         self.assertEqual(self.authorizer.access_token,
                          self.token_data["access_token"])
         self.assertEqual(self.authorizer.expires_at,
@@ -125,7 +125,7 @@ class RenewingAuthorizerTests(CapturedIOTestCase):
         Confirms a new access_token is gotten if the old one is set to None
         """
         self.authorizer.access_token = None
-        self.authorizer._check_expiration_time()
+        self.authorizer.check_expiration_time()
         self.assertEqual(self.authorizer.access_token,
                          self.token_data["access_token"])
         self.assertEqual(self.authorizer.expires_at,
@@ -137,7 +137,7 @@ class RenewingAuthorizerTests(CapturedIOTestCase):
         Confirms a new access_token is gotten if expires_at is set to None
         """
         self.authorizer.expires_at = None
-        self.authorizer._check_expiration_time()
+        self.authorizer.check_expiration_time()
         self.assertEqual(self.authorizer.access_token,
                          self.token_data["access_token"])
         self.assertEqual(self.authorizer.expires_at,
