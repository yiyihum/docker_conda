diff --git a/regain/datasets/base.py b/regain/datasets/base.py
index 8613f13..878842e 100644
--- a/regain/datasets/base.py
+++ b/regain/datasets/base.py
@@ -33,15 +33,24 @@ from __future__ import division
 from functools import partial
 
 import numpy as np
-from sklearn.datasets.base import Bunch
-
-from .gaussian import (
-    data_Meinshausen_Yuan, data_Meinshausen_Yuan_sparse_latent,
-    make_covariance, make_fede, make_fixed_sparsity, make_ma_xue_zou,
-    make_ma_xue_zou_rand_k, make_sin, make_sin_cos, make_sparse_low_rank)
-from .ising import ising_sampler, ising_theta_generator
-from .kernels import make_exp_sine_squared, make_ticc
-from .poisson import poisson_sampler, poisson_theta_generator
+from sklearn.utils import Bunch
+
+from regain.datasets.gaussian import data_Meinshausen_Yuan
+from regain.datasets.gaussian import data_Meinshausen_Yuan_sparse_latent
+from regain.datasets.gaussian import make_covariance
+from regain.datasets.gaussian import make_fede
+from regain.datasets.gaussian import make_fixed_sparsity
+from regain.datasets.gaussian import make_ma_xue_zou
+from regain.datasets.gaussian import make_ma_xue_zou_rand_k
+from regain.datasets.gaussian import make_sin
+from regain.datasets.gaussian import make_sin_cos
+from regain.datasets.gaussian import make_sparse_low_rank
+from regain.datasets.ising import ising_sampler
+from regain.datasets.ising import ising_theta_generator
+from regain.datasets.kernels import make_exp_sine_squared
+from regain.datasets.kernels import make_ticc
+from regain.datasets.poisson import poisson_sampler
+from regain.datasets.poisson import poisson_theta_generator
 
 
 def _gaussian_case(
@@ -77,7 +86,8 @@ def _gaussian_case(
     #         normalize_starting_matrices=normalize_starting_matrices,
     #         degree=degree, epsilon=epsilon, keep_sparsity=keep_sparsity,
     #         proportional=proportional)
-    thetas, thetas_obs, ells = func(n_dim_obs=n_dim_obs, n_dim_lat=n_dim_lat, T=T, **kwargs)
+    thetas, thetas_obs, ells = func(
+        n_dim_obs=n_dim_obs, n_dim_lat=n_dim_lat, T=T, **kwargs)
     sigmas = list(map(np.linalg.inv, thetas_obs))
     # map(normalize_matrix, sigmas)  # in place
 
diff --git a/regain/datasets/gaussian.py b/regain/datasets/gaussian.py
index 6aa8ecf..c092cde 100644
--- a/regain/datasets/gaussian.py
+++ b/regain/datasets/gaussian.py
@@ -37,8 +37,10 @@ from scipy.spatial.distance import squareform
 from scipy.stats import norm
 from sklearn.utils import check_random_state
 
-from regain.utils import (
-    ensure_posdef, is_pos_def, is_pos_semidef, normalize_matrix)
+from regain.utils import ensure_posdef
+from regain.utils import is_pos_def
+from regain.utils import is_pos_semidef
+from regain.utils import normalize_matrix
 
 
 def _compute_probabilities(locations, random_state, mask=None):
diff --git a/regain/datasets/kernels.py b/regain/datasets/kernels.py
index 90e81af..b514e73 100644
--- a/regain/datasets/kernels.py
+++ b/regain/datasets/kernels.py
@@ -29,19 +29,19 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 """Generate data for kernel-based classes as `KernelTimeGraphicalLasso`."""
 
-from itertools import chain, combinations
+from itertools import chain
+from itertools import combinations
 
 import numpy as np
 from scipy import linalg
 from scipy.spatial.distance import squareform
 from sklearn.cluster import AgglomerativeClustering
-from sklearn.datasets.base import Bunch
+from sklearn.utils import Bunch
 
+from regain.datasets.gaussian import make_ell
 from regain.norm import l1_od_norm
 from regain.utils import is_pos_def
 
-from .gaussian import make_ell
-
 
 def make_exp_sine_squared(n_dim_obs=5, n_dim_lat=0, T=1, **kwargs):
     """Make precision matrices using a temporal sine kernel."""
diff --git a/regain/datasets/multi_class.py b/regain/datasets/multi_class.py
index eb1a7bb..c4e1871 100644
--- a/regain/datasets/multi_class.py
+++ b/regain/datasets/multi_class.py
@@ -28,14 +28,12 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-import numpy as np
 import networkx as nx
+import numpy as np
+from sklearn.utils import Bunch
 
-
-from sklearn.datasets.base import Bunch
-
-from regain.datasets.poisson import poisson_sampler
 from regain.datasets.ising import ising_sampler
+from regain.datasets.poisson import poisson_sampler
 
 
 def make_multiclass_dataset(

