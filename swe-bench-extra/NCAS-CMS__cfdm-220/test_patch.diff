diff --git a/cfdm/test/test_Data.py b/cfdm/test/test_Data.py
index 291c3b495..940a0d585 100644
--- a/cfdm/test/test_Data.py
+++ b/cfdm/test/test_Data.py
@@ -6,6 +6,7 @@ import os
 import unittest
 
 import numpy
+import numpy as np
 
 faulthandler.enable()  # to debug seg faults and timeouts
 
@@ -75,10 +76,9 @@ class DataTest(unittest.TestCase):
         self.assertTrue(str(d) == "[--, 2000-01-21 00:00:00]")
         self.assertTrue(repr(d) == "<Data(2): [--, 2000-01-21 00:00:00]>")
 
-    #    def test_Data__getitem__(self):
     def test_Data__setitem__(self):
         """Test the assignment of data items on Data."""
-        a = numpy.ma.arange(3000).reshape(50, 60)
+        a = np.ma.arange(3000).reshape(50, 60)
 
         d = cfdm.Data(a.filled(), units="m")
 
@@ -95,47 +95,138 @@ class DataTest(unittest.TestCase):
             n = -n - 1
             for dvalue, avalue in (
                 (n, n),
-                (cfdm.masked, numpy.ma.masked),
+                (cfdm.masked, np.ma.masked),
                 (n, n),
             ):
-                message = f"cfdm.Data[{j}, {i}]={dvalue}={avalue} failed"
                 d[j, i] = dvalue
                 a[j, i] = avalue
                 x = d.array
-                self.assertTrue(
-                    (x == a).all() in (True, numpy.ma.masked), message
-                )
-                m = numpy.ma.getmaskarray(x)
-                self.assertTrue(
-                    (m == numpy.ma.getmaskarray(a)).all(),
-                    "d.mask.array="
-                    + repr(m)
-                    + "\nnumpy.ma.getmaskarray(a)="
-                    + repr(numpy.ma.getmaskarray(a)),
-                )
+                self.assertTrue((x == a).all() in (True, np.ma.masked))
+                m = np.ma.getmaskarray(x)
+                self.assertTrue((m == np.ma.getmaskarray(a)).all())
 
-        a = numpy.ma.arange(3000).reshape(50, 60)
+        a = np.ma.arange(3000).reshape(50, 60)
 
         d = cfdm.Data(a.filled(), "m")
 
         (j, i) = (slice(0, 2), slice(0, 3))
-        array = numpy.array([[1, 2, 6], [3, 4, 5]]) * -1
+        array = np.array([[1, 2, 6], [3, 4, 5]]) * -1
 
-        for dvalue in (array, numpy.ma.masked_where(array < -2, array), array):
-            message = "cfdm.Data[%s, %s]=%s failed" % (j, i, dvalue)
+        for dvalue in (array, np.ma.masked_where(array < -2, array), array):
             d[j, i] = dvalue
             a[j, i] = dvalue
             x = d.array
-            self.assertTrue((x == a).all() in (True, numpy.ma.masked), message)
-            m = numpy.ma.getmaskarray(x)
-            self.assertTrue((m == numpy.ma.getmaskarray(a)).all(), message)
+            self.assertTrue((x == a).all() in (True, np.ma.masked))
+            m = np.ma.getmaskarray(x)
+            self.assertTrue((m == np.ma.getmaskarray(a)).all())
 
         # Scalar numeric array
         d = cfdm.Data(9, units="km")
         d[...] = cfdm.masked
         a = d.array
         self.assertEqual(a.shape, ())
-        self.assertIs(a[()], numpy.ma.masked)
+        self.assertIs(a[()], np.ma.masked)
+
+        # Multiple list indices, scalar value
+        d = cfdm.Data(np.arange(40).reshape(5, 8), units="km")
+
+        value = -1
+        for indices in (
+            ([0, 3, 4], [1, 6, 7]),
+            ([0, 3, 4], [1, 7, 6]),
+            ([0, 4, 3], [1, 6, 7]),
+            ([0, 4, 3], [1, 7, 6]),
+            ([4, 3, 0], [7, 6, 1]),
+            ([4, 3, 0], [1, 6, 7]),
+            ([0, 3, 4], [7, 6, 1]),
+            ([0, 3, -1], [7, 6, 1]),
+            ([0, 3, 4], [-1, 6, 1]),
+            ([0, 3, -1], [-1, 6, 1]),
+        ):
+            d[indices] = value
+            self.assertEqual((d.array == value).sum(), 9)
+            value -= 1
+
+        # Repeated list elements
+        for indices in (
+            ([0, 3, 3], [7, 6, 1]),
+            ([3, 3, 0], [7, 6, 1]),
+            ([0, 4, 3], [7, 6, 7]),
+        ):
+            d[indices] = value
+            self.assertEqual((d.array == value).sum(), 6)
+            value -= 1
+
+        for indices in (
+            ([3, 4, 3], [7, 6, 7]),
+            ([3, 3, 4], [7, 7, 6]),
+            ([4, 3, 3], [6, 7, 7]),
+        ):
+            d[indices] = value
+            self.assertEqual((d.array == value).sum(), 4)
+            value -= 1
+
+        # Multiple list indices, array value
+        a = np.arange(40).reshape(1, 5, 8)
+
+        value = np.arange(9).reshape(3, 3) - 9
+
+        for indices in (
+            (slice(None), [0, 3, 4], [1, 6, 7]),
+            (slice(None), [0, 3, 4], [1, 7, 6]),
+            (slice(None), [0, 4, 3], [1, 6, 7]),
+            (slice(None), [0, 4, 3], [1, 7, 6]),
+            (slice(None), [4, 3, 0], [7, 6, 1]),
+            (slice(None), [4, 3, 0], [1, 6, 7]),
+            (slice(None), [0, 3, 4], [7, 6, 1]),
+            (slice(None), [0, 3, -1], [7, 6, 1]),
+            (slice(None), [0, 3, 4], [-1, 6, 1]),
+            (slice(None), [0, 3, -1], [-1, 6, 1]),
+        ):
+            d = cfdm.Data(a.copy())
+            d[indices] = value
+            self.assertEqual((d.array < 0).sum(), 9)
+
+        # Repeated list elements
+        for indices in (
+            (slice(None), [0, 3, 3], [7, 6, 1]),
+            (slice(None), [0, 4, 3], [7, 6, 7]),
+            (slice(None), [3, 3, 4], [1, 6, 7]),
+            (slice(None), [0, 4, 3], [7, 7, 6]),
+        ):
+            d = cfdm.Data(a.copy())
+            d[indices] = value
+            self.assertEqual((d.array < 0).sum(), 6)
+
+        for indices in (
+            (slice(None), [3, 4, 3], [7, 6, 7]),
+            (slice(None), [4, 3, 3], [6, 7, 7]),
+            (slice(None), [3, 3, 4], [6, 7, 7]),
+            (slice(None), [3, 3, 4], [7, 7, 6]),
+            (slice(None), [4, 3, 3], [7, 7, 6]),
+        ):
+            d = cfdm.Data(a.copy())
+            d[indices] = value
+            self.assertEqual((d.array < 0).sum(), 4)
+
+        # Multiple list indices, array value + broadcasting
+        value = np.arange(3).reshape(1, 3) - 9
+
+        for indices in ((slice(None), [0, 3, 4], [1, 6, 7]),):
+            d = cfdm.Data(a.copy())
+            d[indices] = value
+            self.assertEqual((d.array < 0).sum(), 9)
+
+        # Repeated list elements
+        for indices in ((slice(None), [0, 3, 3], [7, 6, 1]),):
+            d = cfdm.Data(a.copy())
+            d[indices] = value
+            self.assertEqual((d.array < 0).sum(), 6)
+
+        for indices in ((slice(None), [4, 3, 3], [7, 7, 6]),):
+            d = cfdm.Data(a.copy())
+            d[indices] = value
+            self.assertEqual((d.array < 0).sum(), 4)
 
     def test_Data_apply_masking(self):
         """Test the `apply_masking` Data method."""
