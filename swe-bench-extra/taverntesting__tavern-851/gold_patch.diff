diff --git a/tavern/_core/exceptions.py b/tavern/_core/exceptions.py
index d8c78b6..803abe0 100644
--- a/tavern/_core/exceptions.py
+++ b/tavern/_core/exceptions.py
@@ -114,7 +114,7 @@ class InvalidFormattedJsonError(TavernException):
     """Tried to use the magic json format tag in an invalid way"""
 
 
-class InvalidExtBlockException(TavernException):
+class MisplacedExtBlockException(TavernException):
     """Tried to use the '$ext' block in a place it is no longer valid to use it"""
 
     def __init__(self, block) -> None:
diff --git a/tavern/_core/extfunctions.py b/tavern/_core/extfunctions.py
index c7b3325..e7b534e 100644
--- a/tavern/_core/extfunctions.py
+++ b/tavern/_core/extfunctions.py
@@ -123,6 +123,11 @@ def get_wrapped_create_function(ext: Mapping):
 
 
 def _get_ext_values(ext: Mapping):
+    if not isinstance(ext, Mapping):
+        raise exceptions.InvalidExtFunctionError(
+            "ext block should be a dict, but it was a {}".format(type(ext))
+        )
+
     args = ext.get("extra_args") or ()
     kwargs = ext.get("extra_kwargs") or {}
     try:
@@ -145,14 +150,23 @@ def update_from_ext(request_args: dict, keys_to_check: List[str]) -> None:
     """
 
     new_args = {}
+    logger = _getlogger()
 
     for key in keys_to_check:
         try:
-            func = get_wrapped_create_function(request_args[key].pop("$ext"))
-        except (KeyError, TypeError, AttributeError):
-            pass
-        else:
-            new_args[key] = func()
+            block = request_args[key]
+        except KeyError:
+            logger.debug("No %s block", key)
+            continue
+
+        try:
+            pop = block.pop("$ext")
+        except (KeyError, AttributeError, TypeError):
+            logger.debug("No ext functions in %s block", key)
+            continue
+
+        func = get_wrapped_create_function(pop)
+        new_args[key] = func()
 
     merged_args = deep_dict_merge(request_args, new_args)
 
diff --git a/tavern/_plugins/mqtt/request.py b/tavern/_plugins/mqtt/request.py
index db7eae7..0a9de87 100644
--- a/tavern/_plugins/mqtt/request.py
+++ b/tavern/_plugins/mqtt/request.py
@@ -1,7 +1,7 @@
 import functools
 import json
 import logging
-from typing import Mapping
+from typing import Dict
 
 from box.box import Box
 
@@ -16,21 +16,19 @@ from tavern.request import BaseRequest
 logger = logging.getLogger(__name__)
 
 
-def get_publish_args(rspec: Mapping, test_block_config: TestConfig) -> dict:
-    """Format mqtt request args
-
-    Todo:
-        Anything else to do here?
-    """
+def get_publish_args(rspec: Dict, test_block_config: TestConfig) -> dict:
+    """Format mqtt request args and update using ext functions"""
 
     fspec = format_keys(rspec, test_block_config.variables)
 
-    if "json" in rspec:
-        if "payload" in rspec:
+    if "json" in fspec:
+        if "payload" in fspec:
             raise exceptions.BadSchemaError(
                 "Can only specify one of 'payload' or 'json' in MQTT request"
             )
 
+        update_from_ext(fspec, ["json"])
+
         fspec["payload"] = json.dumps(fspec.pop("json"))
 
     return fspec
@@ -43,15 +41,15 @@ class MQTTRequest(BaseRequest):
     """
 
     def __init__(
-        self, client: MQTTClient, rspec: Mapping, test_block_config: TestConfig
+        self, client: MQTTClient, rspec: Dict, test_block_config: TestConfig
     ) -> None:
         expected = {"topic", "payload", "json", "qos", "retain"}
 
         check_expected_keys(expected, rspec)
 
         publish_args = get_publish_args(rspec, test_block_config)
-        update_from_ext(publish_args, ["json"])
 
+        self._publish_args = publish_args
         self._prepared = functools.partial(client.publish, **publish_args)
 
         # Need to do this here because get_publish_args will modify the original
diff --git a/tavern/_plugins/mqtt/response.py b/tavern/_plugins/mqtt/response.py
index a2e362b..73513f8 100644
--- a/tavern/_plugins/mqtt/response.py
+++ b/tavern/_plugins/mqtt/response.py
@@ -335,7 +335,7 @@ class _MessageVerifier:
             json_payload = True
 
             if payload.pop("$ext", None):
-                raise exceptions.InvalidExtBlockException(
+                raise exceptions.MisplacedExtBlockException(
                     "json",
                 )
         elif "payload" in expected:
diff --git a/tavern/_plugins/rest/response.py b/tavern/_plugins/rest/response.py
index 97bc494..ca54b11 100644
--- a/tavern/_plugins/rest/response.py
+++ b/tavern/_plugins/rest/response.py
@@ -218,7 +218,7 @@ class RestResponse(BaseResponse):
 
         if isinstance(expected_block, dict):
             if expected_block.pop("$ext", None):
-                raise exceptions.InvalidExtBlockException(
+                raise exceptions.MisplacedExtBlockException(
                     blockname,
                 )
 
diff --git a/tavern/response.py b/tavern/response.py
index f9eba9f..8bee7a6 100644
--- a/tavern/response.py
+++ b/tavern/response.py
@@ -139,7 +139,7 @@ class BaseResponse:
             if isinstance(block, dict):
                 check_ext_functions(block.get("$ext", None))
                 if nfuncs != len(self.validate_functions):
-                    raise exceptions.InvalidExtBlockException(
+                    raise exceptions.MisplacedExtBlockException(
                         name,
                     )
 
