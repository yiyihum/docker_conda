diff --git a/test_igseq/test_vdj.py b/test_igseq/test_vdj.py
index 72b81d2..e0fd2ce 100644
--- a/test_igseq/test_vdj.py
+++ b/test_igseq/test_vdj.py
@@ -1,7 +1,6 @@
 """Tests for igseq.vdj."""
 
 from pathlib import Path
-from tempfile import TemporaryDirectory
 from igseq import vdj
 from igseq.util import IgSeqError, DATA
 from .util import TestBase
@@ -10,8 +9,7 @@ class TestParseVDJPaths(TestBase):
     """Basic test of parse_vdj_paths."""
 
     def test_parse_vdj_paths(self):
-        # It should give a list of dictionaries with info parsed from the given
-        # paths.
+        """parse_vdj_paths should give a list of dicts with info parsed from the given paths"""
         shared = {"fasta": True, "input": str(self.path/"input"), "type": "dir"}
         attrs_list_exp = [
                 {"path": self.path/"input/D.fasta", "segment": "D"},
@@ -28,9 +26,26 @@ class TestParseVDJPaths(TestBase):
             attrs_list = vdj.parse_vdj_paths(ref_paths)
             self.assertEqual(attrs_list, attrs_list_exp)
 
+    def test_parse_vdj_paths_duplicates(self):
+        """parse_vdj_paths shouldn't repeat paths that come from multiple input names"""
+        # Instead it'll just squish both input names into the same entries.
+        shared = {"fasta": True, "input": str(self.path/"input"), "type": "dir"}
+        attrs_list_exp = [
+                {"path": self.path/"input/D.fasta", "segment": "D"},
+                {"path": self.path/"input/J.fasta", "segment": "J"},
+                {"path": self.path/"input/V.fasta", "segment": "V"}]
+        for attrs in attrs_list_exp:
+            attrs.update(shared)
+        ref_paths = [self.path / "input", self.path/"input/D.fasta"]
+        attrs_list_exp[0]["type"] = "file"
+        attrs_list_exp[0]["input"] = "; ".join([str(p) for p in ref_paths])
+        attrs_list = vdj.parse_vdj_paths(ref_paths)
+        self.assertEqual(attrs_list, attrs_list_exp)
+
     def test_parse_vdj_paths_with_files(self):
-        # Individual files should work too.  In this case they're sorted as
-        # they're given, since the sorting is by-ref and then by-file.
+        """parse_vdj_paths should work with filenames as inputs"""
+        # In this case they're sorted as they're given, since the sorting is
+        # by-ref and then by-file.
         mkdict = lambda s: {
             "path": self.path/f"input/{s}.fasta",
             "input": str(self.path/f"input/{s}.fasta"),
@@ -43,8 +58,7 @@ class TestParseVDJPaths(TestBase):
         self.assertEqual(attrs_list, attrs_list_exp)
 
     def test_parse_vdj_paths_with_ref(self):
-        # If we also ask for a fragment of the filenames of builtin FASTA
-        # files, it should find those too
+        """parse_vdj_paths should work with builtin filename fragments"""
         shared = {"fasta": True, "input": str(self.path/"input"), "type": "dir"}
         attrs_list_exp = [
                 {"path": self.path/"input/D.fasta", "segment": "D"},
