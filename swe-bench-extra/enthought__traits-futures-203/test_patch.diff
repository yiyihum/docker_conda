diff --git a/traits_futures/tests/common_future_tests.py b/traits_futures/tests/common_future_tests.py
index ebdd577..66f28e5 100644
--- a/traits_futures/tests/common_future_tests.py
+++ b/traits_futures/tests/common_future_tests.py
@@ -19,6 +19,12 @@ from traits_futures.exception_handling import marshal_exception
 from traits_futures.future_states import CANCELLABLE_STATES, DONE_STATES
 
 
+def dummy_cancel_callback():
+    """
+    Dummy callback for cancellation, that does nothing.
+    """
+
+
 class FutureListener(HasStrictTraits):
     """ Record state changes to a given future. """
 
@@ -55,7 +61,7 @@ class CommonFutureTests:
 
         # Record state when any of the three traits changes.
         future = self.future_class()
-        future._executor_initialized(lambda: None)
+        future._executor_initialized(dummy_cancel_callback)
 
         future.on_trait_change(record_states, "cancellable")
         future.on_trait_change(record_states, "done")
@@ -74,7 +80,7 @@ class CommonFutureTests:
 
     def test_cancellable_and_done_success(self):
         future = self.future_class()
-        future._executor_initialized(lambda: None)
+        future._executor_initialized(dummy_cancel_callback)
 
         listener = FutureListener(future=future)
 
@@ -86,7 +92,7 @@ class CommonFutureTests:
 
     def test_cancellable_and_done_failure(self):
         future = self.future_class()
-        future._executor_initialized(lambda: None)
+        future._executor_initialized(dummy_cancel_callback)
 
         listener = FutureListener(future=future)
 
@@ -98,7 +104,7 @@ class CommonFutureTests:
 
     def test_cancellable_and_done_cancellation(self):
         future = self.future_class()
-        future._executor_initialized(lambda: None)
+        future._executor_initialized(dummy_cancel_callback)
 
         listener = FutureListener(future=future)
 
@@ -111,7 +117,7 @@ class CommonFutureTests:
 
     def test_cancellable_and_done_early_cancellation(self):
         future = self.future_class()
-        future._executor_initialized(lambda: None)
+        future._executor_initialized(dummy_cancel_callback)
 
         listener = FutureListener(future=future)
 
@@ -127,20 +133,24 @@ class CommonFutureTests:
     # The BaseFuture processes four different messages: started / raised /
     # returned messages from the task, and a possible cancellation message from
     # the user. We denote these with the letters S, X (for eXception), R and C,
-    # and add machinery to test various combinations.
+    # and add machinery to test various combinations. We also write I to
+    # denote initialization of the future.
 
     def test_invalid_message_sequences(self):
-        # A complete run must always involve "started, raised" or "started,
-        # returned" in that order. In addition, a single cancellation is
-        # possible at any time before the end of the sequence.
+        # A future must always be initialized before anything else happens, and
+        # then a complete run must always involve "started, raised" or
+        # "started, returned" in that order. In addition, a single cancellation
+        # is possible at any time before the end of the sequence.
         complete_valid_sequences = {
-            "SR",
-            "SX",
-            "CSR",
-            "CSX",
-            "SCR",
-            "SCX",
+            "ISR",
+            "ISX",
+            "ICSR",
+            "ICSX",
+            "ISCR",
+            "ISCX",
         }
+
+        # Systematically generate invalid sequences of messages.
         valid_initial_sequences = {
             seq[:i]
             for seq in complete_valid_sequences
@@ -150,30 +160,39 @@ class CommonFutureTests:
             seq[:i] + msg
             for seq in valid_initial_sequences
             for i in range(len(seq) + 1)
-            for msg in "CRSX"
+            for msg in "ICRSX"
         }
         invalid_sequences = continuations - valid_initial_sequences
+
+        # Check that all invalid sequences raise StateTransitionError
         for sequence in invalid_sequences:
             with self.subTest(sequence=sequence):
                 with self.assertRaises(StateTransitionError):
                     self.send_message_sequence(sequence)
 
+        # Check all complete valid sequences.
+        for sequence in complete_valid_sequences:
+            with self.subTest(sequence=sequence):
+                future = self.send_message_sequence(sequence)
+                self.assertTrue(future.done)
+
     def test_interface(self):
         future = self.future_class()
         self.assertIsInstance(future, IFuture)
 
     def send_message(self, future, message):
         """ Send a particular message to a future. """
-        if message == "S":
+        if message == "I":
+            future._executor_initialized(dummy_cancel_callback)
+        elif message == "S":
             future._task_started(None)
         elif message == "X":
             future._task_raised(self.fake_exception())
         elif message == "R":
             future._task_returned(23)
-        elif message == "C":
-            future._user_cancelled()
         else:
-            raise ValueError("Invalid message: {}".format(message))
+            assert message == "C"
+            future._user_cancelled()
 
     def send_message_sequence(self, messages):
         """ Create a new future, and send the given message sequence to it. """
diff --git a/traits_futures/tests/test_base_future.py b/traits_futures/tests/test_base_future.py
new file mode 100644
index 0000000..9cde384
--- /dev/null
+++ b/traits_futures/tests/test_base_future.py
@@ -0,0 +1,102 @@
+# (C) Copyright 2018-2020 Enthought, Inc., Austin, TX
+# All rights reserved.
+#
+# This software is provided without warranty under the terms of the BSD
+# license included in LICENSE.txt and may be redistributed only under
+# the conditions described in the aforementioned license. The license
+# is also available online at http://www.enthought.com/licenses/BSD.txt
+#
+# Thanks for using Enthought open source!
+
+"""
+Tests for ability to subclass the BaseFuture base class.
+"""
+
+import unittest
+
+from traits.api import Int, List
+
+from traits_futures.base_future import BaseFuture, StateTransitionError
+from traits_futures.tests.common_future_tests import CommonFutureTests
+
+
+def dummy_cancel_callback():
+    """
+    Dummy callback for cancellation, that does nothing.
+    """
+
+
+class PingFuture(BaseFuture):
+    """
+    BaseFuture subclass that interpretes "ping"
+    messages from the background.
+    """
+    #: Accumulate ping messages
+    pings = List(Int)
+
+    def _process_ping(self, arg):
+        """
+        Process a 'ping' message.
+        """
+        self.pings.append(arg)
+
+
+class TestBaseFuture(CommonFutureTests, unittest.TestCase):
+    def setUp(self):
+        self.future_class = PingFuture
+
+    def test_normal_lifecycle(self):
+        future = self.future_class()
+        future._executor_initialized(dummy_cancel_callback)
+        future._task_started(None)
+        future._dispatch_message(("ping", 123))
+        future._dispatch_message(("ping", 999))
+        future._task_returned(1729)
+
+        self.assertEqual(future.pings, [123, 999])
+
+    def test_ping_after_cancellation_is_ignored(self):
+        message = ("ping", 32)
+
+        future = self.future_class()
+        future._executor_initialized(dummy_cancel_callback)
+
+        future._task_started(None)
+        future._user_cancelled()
+
+        future._dispatch_message(message)
+        future._task_returned(1729)
+
+        self.assertEqual(future.pings, [])
+
+    def test_impossible_ping(self):
+        # Custom messages should only ever arrive when a future is
+        # in EXECUTING or CANCELLING states.
+        message = ("ping", 32)
+
+        future = self.future_class()
+
+        with self.assertRaises(StateTransitionError):
+            future._dispatch_message(message)
+
+        future._executor_initialized(dummy_cancel_callback)
+
+        with self.assertRaises(StateTransitionError):
+            future._dispatch_message(message)
+
+        future._task_started(None)
+        future._task_returned(1729)
+
+        with self.assertRaises(StateTransitionError):
+            future._dispatch_message(message)
+
+    def test_impossible_ping_cancelled_task(self):
+        message = ("ping", 32)
+
+        future = self.future_class()
+        future._executor_initialized(dummy_cancel_callback)
+
+        future._user_cancelled()
+
+        with self.assertRaises(StateTransitionError):
+            future._dispatch_message(message)
diff --git a/traits_futures/tests/test_traits_executor.py b/traits_futures/tests/test_traits_executor.py
index 6a86ce6..a0dd162 100644
--- a/traits_futures/tests/test_traits_executor.py
+++ b/traits_futures/tests/test_traits_executor.py
@@ -53,10 +53,6 @@ class TestTraitsExecutorCreation(GuiTestAssistant, unittest.TestCase):
         self._context = MultithreadingContext()
 
     def tearDown(self):
-        if hasattr(self, "executor"):
-            self.executor.stop()
-            self.wait_until_stopped(self.executor)
-            del self.executor
         self._context.close()
         GuiTestAssistant.tearDown(self)
 
