diff --git a/hy/compiler.py b/hy/compiler.py
index a72af420..5aaa4b1a 100755
--- a/hy/compiler.py
+++ b/hy/compiler.py
@@ -422,7 +422,7 @@ class HyASTCompiler:
             # These are unexpected errors that will--hopefully--never be seen
             # by the user.
             f_exc = traceback.format_exc()
-            exc_msg = "Internal Compiler Bug ðŸ˜±\nâ¤· {}".format(f_exc)
+            exc_msg = "Internal Compiler Bug\n {}".format(f_exc)
             raise HyCompileError(exc_msg)
 
     def _syntax_error(self, expr, message):
diff --git a/hy/core/result_macros.py b/hy/core/result_macros.py
index c4676f79..f43bdabb 100644
--- a/hy/core/result_macros.py
+++ b/hy/core/result_macros.py
@@ -135,7 +135,7 @@ def compile_eval_foo_compile(compiler, expr, root, body):
         raise HyEvalError(str(e), compiler.filename, body, compiler.source)
 
     return (
-        compiler.compile(as_model(value))
+        compiler.compile(as_model(value).replace(expr))
         if root == "do-mac"
         else compiler._compile_branch(body)
         if root == "eval-and-compile"
diff --git a/hy/models.py b/hy/models.py
index 23ccb6c5..ad370d3f 100644
--- a/hy/models.py
+++ b/hy/models.py
@@ -385,12 +385,19 @@ class Sequence(Object, tuple):
     for this purpose.
     """
 
+    _extra_kwargs = ()
+
     def replace(self, other, recursive=True):
-        if recursive:
-            for x in self:
-                replace_hy_obj(x, other)
-        Object.replace(self, other)
-        return self
+        return (
+            Object.replace(
+                Object.replace(
+                    type(self)(
+                        (replace_hy_obj(x, other) for x in self),
+                        **{k: getattr(self, k) for k in self._extra_kwargs}),
+                    self),
+                other)
+            if recursive
+            else Object.replace(self, other))
 
     def __add__(self, other):
         return self.__class__(
@@ -431,6 +438,8 @@ class FComponent(Sequence):
     format spec (if any).
     """
 
+    _extra_kwargs = ("conversion",)
+
     def __new__(cls, s=None, conversion=None):
         value = super().__new__(cls, s)
         value.conversion = conversion
@@ -465,6 +474,8 @@ class FString(Sequence):
     :ivar brackets: As in :class:`hy.models.String`.
     """
 
+    _extra_kwargs = ("brackets",)
+
     def __new__(cls, s=None, brackets=None):
         value = super().__new__(
             cls,

