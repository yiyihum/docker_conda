diff --git a/tests/test_routing.py b/tests/test_routing.py
index ee2a7f7..2d14392 100644
--- a/tests/test_routing.py
+++ b/tests/test_routing.py
@@ -1,7 +1,7 @@
 import pytest
 
 from starlette.exceptions import ExceptionMiddleware
-from starlette.responses import PlainTextResponse, Response
+from starlette.responses import JSONResponse, PlainTextResponse, Response
 from starlette.routing import Mount, NoMatchFound, Route, Router, WebSocketRoute
 from starlette.testclient import TestClient
 from starlette.websockets import WebSocket, WebSocketDisconnect
@@ -48,6 +48,24 @@ def contact(request):
     return Response("Hello, POST!", media_type="text/plain")
 
 
+@app.route("/int/{param:int}", name="int-convertor")
+def int_convertor(request):
+    number = request.path_params["param"]
+    return JSONResponse({"int": number})
+
+
+@app.route("/float/{param:float}", name="float-convertor")
+def float_convertor(request):
+    num = request.path_params["param"]
+    return JSONResponse({"float": num})
+
+
+@app.route("/path/{param:path}", name="path-convertor")
+def path_convertor(request):
+    path = request.path_params["param"]
+    return JSONResponse({"path": path})
+
+
 @app.websocket_route("/ws")
 async def websocket_endpoint(session):
     await session.accept()
@@ -91,12 +109,38 @@ def test_router():
     assert response.text == "xxxxx"
 
 
+def test_route_converters():
+    # Test integer conversion
+    response = client.get("/int/5")
+    assert response.status_code == 200
+    assert response.json() == {"int": 5}
+    assert app.url_path_for("int-convertor", param=5) == "/int/5"
+
+    # Test float conversion
+    response = client.get("/float/25.5")
+    assert response.status_code == 200
+    assert response.json() == {"float": 25.5}
+    assert app.url_path_for("float-convertor", param=25.5) == "/float/25.5"
+
+    # Test path conversion
+    response = client.get("/path/some/example")
+    assert response.status_code == 200
+    assert response.json() == {"path": "some/example"}
+    assert (
+        app.url_path_for("path-convertor", param="some/example") == "/path/some/example"
+    )
+
+
 def test_url_path_for():
     assert app.url_path_for("homepage") == "/"
     assert app.url_path_for("user", username="tomchristie") == "/users/tomchristie"
     assert app.url_path_for("websocket_endpoint") == "/ws"
     with pytest.raises(NoMatchFound):
         assert app.url_path_for("broken")
+    with pytest.raises(AssertionError):
+        app.url_path_for("user", username="tom/christie")
+    with pytest.raises(AssertionError):
+        app.url_path_for("user", username="")
 
 
 def test_url_for():
