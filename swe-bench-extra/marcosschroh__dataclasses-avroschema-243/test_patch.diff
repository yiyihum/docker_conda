diff --git a/tests/schemas/test_schema.py b/tests/schemas/test_schema.py
index 05f63be..bde9754 100644
--- a/tests/schemas/test_schema.py
+++ b/tests/schemas/test_schema.py
@@ -303,7 +303,7 @@ def test_parse_obj():
     assert User.avro_schema()
 
 
-def test_inheritance(user_avro_json: JsonDict) -> None:
+def test_avro_schema_to_python_method_with_inheritance(user_avro_json: JsonDict) -> None:
     @dataclass
     class Parent(AvroModel):
         name: str
@@ -325,3 +325,34 @@ def test_inheritance(user_avro_json: JsonDict) -> None:
     child_2_schema = Child2.avro_schema_to_python()
 
     assert child_schema["fields"] == child_2_schema["fields"] == user_avro_json["fields"]
+
+
+def test_avro_schema_method_with_inheritance() -> None:
+    @dataclass
+    class Common(AvroModel):
+        some_data: str
+
+    @dataclass
+    class DerivedA(Common):
+        some_more_data_A: str
+
+    @dataclass
+    class DerivedB(Common):
+        some_more_data_B: str
+
+    common_schema = Common.avro_schema()
+    derived_a_schema = DerivedA.avro_schema()
+    derived_b_schema = DerivedB.avro_schema()
+
+    assert (
+        common_schema
+        == '{"type": "record", "name": "Common", "fields": [{"name": "some_data", "type": "string"}], "doc": "Common(some_data: str)"}'
+    )
+    assert (
+        derived_a_schema
+        == '{"type": "record", "name": "DerivedA", "fields": [{"name": "some_data", "type": "string"}, {"name": "some_more_data_A", "type": "string"}], "doc": "DerivedA(some_data: str, some_more_data_A: str)"}'
+    )
+    assert (
+        derived_b_schema
+        == '{"type": "record", "name": "DerivedB", "fields": [{"name": "some_data", "type": "string"}, {"name": "some_more_data_B", "type": "string"}], "doc": "DerivedB(some_data: str, some_more_data_B: str)"}'
+    )
