diff --git a/dataclasses_avroschema/fields.py b/dataclasses_avroschema/fields.py
index 4e2aac5..c263d29 100644
--- a/dataclasses_avroschema/fields.py
+++ b/dataclasses_avroschema/fields.py
@@ -38,7 +38,6 @@ p = inflect.engine()
 
 @dataclasses.dataclass  # type: ignore
 class BaseField:
-
     __slots__ = (
         "name",
         "type",
@@ -489,7 +488,6 @@ class EnumField(BaseField):
             return f"{namespace}.{name}"
 
     def get_default_value(self) -> typing.Union[str, dataclasses._MISSING_TYPE, None]:
-
         if self.default == types.MissingSentinel:
             return dataclasses.MISSING
         elif self.default in (dataclasses.MISSING, None):
@@ -786,7 +784,6 @@ class RecordField(BaseField):
 
 @dataclasses.dataclass
 class DecimalField(BaseField):
-
     precision: int = -1
     scale: int = 0
 
@@ -796,8 +793,8 @@ class DecimalField(BaseField):
     def set_precision_scale(self) -> None:
         if self.default != types.MissingSentinel:
             if isinstance(self.default, decimal.Decimal):
-                sign, digits, scale = self.default.as_tuple()
-                self.scale = scale * -1  # Make scale positive, as that's what Avro expects
+                _, digits, scale = self.default.as_tuple()
+                self.scale = int(scale) * -1  # Make scale positive, as that's what Avro expects
                 # decimal.Context has a precision property
                 # BUT the precision property is independent of the number of digits stored in the Decimal instance
                 # # # FROM THE DOCS HERE https://docs.python.org/3/library/decimal.html
diff --git a/dataclasses_avroschema/schema_definition.py b/dataclasses_avroschema/schema_definition.py
index da419e4..103cf65 100644
--- a/dataclasses_avroschema/schema_definition.py
+++ b/dataclasses_avroschema/schema_definition.py
@@ -49,7 +49,6 @@ class BaseSchemaDefinition(abc.ABC):
 
 @dataclasses.dataclass
 class AvroSchemaDefinition(BaseSchemaDefinition):
-
     fields: typing.List[FieldType] = dataclasses.field(default_factory=list)
 
     def __post_init__(self) -> None:
diff --git a/dataclasses_avroschema/schema_generator.py b/dataclasses_avroschema/schema_generator.py
index 8ede7d7..36a746c 100644
--- a/dataclasses_avroschema/schema_generator.py
+++ b/dataclasses_avroschema/schema_generator.py
@@ -44,7 +44,7 @@ class AvroModel:
 
     @classmethod
     def generate_schema(cls: Type[CT], schema_type: str = "avro") -> Optional[OrderedDict]:
-        if cls.schema_def is None:
+        if cls.schema_def is None or cls.__mro__[1] != AvroModel:
             # Generate dataclass and metadata
             cls.klass = cls.generate_dataclass()
 
@@ -170,7 +170,6 @@ class AvroModel:
         create_instance: bool = True,
         writer_schema: Optional[Union[JsonDict, Type[CT]]] = None,
     ) -> Union[JsonDict, CT]:
-
         if inspect.isclass(writer_schema) and issubclass(writer_schema, AvroModel):
             # mypy does not undersdtand redefinitions
             writer_schema: JsonDict = writer_schema.avro_schema_to_python()  # type: ignore
diff --git a/dataclasses_avroschema/serialization.py b/dataclasses_avroschema/serialization.py
index a5c3c81..ae32030 100644
--- a/dataclasses_avroschema/serialization.py
+++ b/dataclasses_avroschema/serialization.py
@@ -106,7 +106,7 @@ def prepare_bytes_decimal(data: decimal.Decimal, precision: int, scale: int = 0)
     if len(digits) > precision:
         raise ValueError("The decimal precision is bigger than allowed by schema")
 
-    delta = exp + scale
+    delta = int(exp) + scale
 
     if delta < 0:
         raise ValueError("Scale provided in schema does not match the decimal")
