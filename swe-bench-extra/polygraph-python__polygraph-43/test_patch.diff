diff --git a/polygraph/types/tests/helper.py b/polygraph/types/tests/helper.py
new file mode 100644
index 0000000..59d17f2
--- /dev/null
+++ b/polygraph/types/tests/helper.py
@@ -0,0 +1,23 @@
+from polygraph.types.decorators import field
+from polygraph.types.object_type import ObjectType
+from polygraph.types.scalar import Int, String
+
+
+class Person(ObjectType):
+    @field()
+    def name(self) -> String:
+        pass
+
+    @field()
+    def age(self) -> Int:
+        pass
+
+
+class Animal(ObjectType):
+    @field()
+    def name(self) -> String:
+        pass
+
+    @field()
+    def sound(self) -> String:
+        pass
diff --git a/polygraph/types/tests/test_types.py b/polygraph/types/tests/test_types.py
index d08d30f..cb6bf0a 100644
--- a/polygraph/types/tests/test_types.py
+++ b/polygraph/types/tests/test_types.py
@@ -50,6 +50,9 @@ class NonNullTest(TestCase):
         with self.assertRaises(TypeError):
             NonNull(NonNullString)
 
+    def test_square_bracket_notation(self):
+        self.assertEqual(NonNull(String), NonNull[String])
+
 
 class ListTest(TestCase):
 
@@ -67,3 +70,6 @@ class ListTest(TestCase):
         self.assertEqual(string_list(["a", "b", "c"]), ["a", "b", "c"])
         with self.assertRaises(PolygraphValueError):
             string_list(["a", "b", "c", None])
+
+    def test_square_bracket_notation(self):
+        self.assertEqual(List(Int), List[Int])
diff --git a/polygraph/types/tests/test_union.py b/polygraph/types/tests/test_union.py
index e98ba92..1150486 100644
--- a/polygraph/types/tests/test_union.py
+++ b/polygraph/types/tests/test_union.py
@@ -1,17 +1,23 @@
-from unittest import TestCase, skip
+from unittest import TestCase
 
 from polygraph.exceptions import PolygraphValueError
 from polygraph.types.scalar import Float, Int, String
+from polygraph.types.tests.helper import Animal, Person
 from polygraph.types.type_builder import Union
 
 
 class UnionTypeTest(TestCase):
 
+    def test_square_bracket_notation(self):
+        self.assertEqual(
+            Union(Person, Animal),
+            Union[Person, Animal],
+        )
+
     def test_commutativity(self):
         self.assertEqual(Union(String, Int), Union(Int, String))
         self.assertEqual(Union(String, Int, Float), Union(Float, String, Int))
 
-    @skip
     def test_associativity(self):
         self.assertEqual(
             Union(Union(String, Int), Float),
