diff --git a/README.md b/README.md
index 3649ae3..3278c9a 100644
--- a/README.md
+++ b/README.md
@@ -76,7 +76,9 @@ Pull requests accepted!
 
 ## Authors
 
-Hillel Arnold and Amy Berish
+Initial version: Hillel Arnold and Amy Berish.
+
+Version 2.0: Hillel Arnold, Amy Berish, Bonnie Gordon, Katie Martin, and Darren Young.
 
 ## License
 
diff --git a/dacsspace/client.py b/dacsspace/client.py
index b83eae7..fc19600 100644
--- a/dacsspace/client.py
+++ b/dacsspace/client.py
@@ -1,5 +1,3 @@
-from configparser import ConfigParser
-
 from asnake.aspace import ASpace
 
 
@@ -10,14 +8,12 @@ class ASnakeConfigError(Exception):
 class ArchivesSpaceClient:
     """Handles communication with ArchivesSpace."""
 
-    def __init__(self, as_config):
-        config = ConfigParser()
-        config.read(as_config)
-        self.aspace = ASpace(baseurl=config.get('ArchivesSpace', 'baseurl'),
-                             username=config.get('ArchivesSpace', 'user'),
-                             password=config.get('ArchivesSpace', 'password'))
-        self.repo = self.aspace.repositories(
-            config.get('ArchivesSpace', 'repository'))
+    def __init__(self, baseurl, username, password, repo_id):
+        self.aspace = ASpace(
+            baseurl=baseurl,
+            username=username,
+            password=password)
+        self.repo = self.aspace.repositories(repo_id)
         if isinstance(self.repo, dict):
             raise ASnakeConfigError(
                 "Error getting repository: {}".format(
diff --git a/dacsspace/dacsspace.py b/dacsspace/dacsspace.py
index 0488dc1..75a3d81 100644
--- a/dacsspace/dacsspace.py
+++ b/dacsspace/dacsspace.py
@@ -1,4 +1,5 @@
 import re
+from configparser import ConfigParser
 from os.path import isfile
 
 from .client import ArchivesSpaceClient
@@ -10,21 +11,33 @@ class DACSspace:
     """Base DACSspace class. Fetches data from AS, validates and reports results."""
 
     def __init__(self, as_config, csv_filepath):
-        """Checks csv filepath to make sure it has the proper extension and characters."""
+        """Checks CSV and AS config filepaths.
+
+        Args:
+            as_config (str): filepath to ArchivesSpace configuration file.
+            csv_filepath (str): filepath at which to save results file.
+        """
         if not csv_filepath.endswith(".csv"):
             raise ValueError("File must have .csv extension")
         if re.search(r'[*?:"<>|]', csv_filepath):
             raise ValueError(
                 'File name cannot contain the following characters: * ? : " < > | ')
         self.csv_filepath = csv_filepath
+
         if not isfile(as_config):
             raise IOError(
                 "Could not find an ArchivesSpace configuration file at {}".format(as_config))
-        self.as_config = as_config
+        config = ConfigParser()
+        config.read(as_config)
+        self.as_config = (
+            config.get('ArchivesSpace', 'baseurl'),
+            config.get('ArchivesSpace', 'user'),
+            config.get('ArchivesSpace', 'password'),
+            config.get('ArchivesSpace', 'repository'))
 
     def run(self, published_only, invalid_only,
             schema_identifier, schema_filepath):
-        client = ArchivesSpaceClient(self.as_config)
+        client = ArchivesSpaceClient(*self.as_config)
         validator = Validator(schema_identifier, schema_filepath)
         reporter = CSVReporter(self.csv_filepath)
         data = client.get_resources(published_only)
diff --git a/setup-old.py b/setup-old.py
deleted file mode 100644
index 9d23c53..0000000
--- a/setup-old.py
+++ /dev/null
@@ -1,73 +0,0 @@
-#!/usr/bin/env python
-
-import os
-import sys
-
-current_dir = os.path.dirname(__file__)
-
-file_path = os.path.join(current_dir, "local_settings.cfg")
-
-
-def check_response(response, yes):
-    if response != yes:
-        print("Exiting!")
-        sys.exit()
-
-
-def start_section(section_name):
-    cfg_file.write("\n[{}]\n".format(section_name))
-
-
-def write_value(name, default, value=None):
-    if value:
-        line = ("{}: {}\n".format(name, value))
-    else:
-        line = ("{}: {}\n".format(name, default))
-    cfg_file.write(line)
-
-
-def main():
-    global cfg_file
-    print("This script will create a configuration file with settings to connect and download JSON files from ArchivesSpace.\nYou\'ll need to know a few things in order to do this:\n\n1. The base URL of the backend of your ArchivesSpace installation, including the port number.\n2. The ID for the ArchivesSpace repository from which you want to export JSON files.\n3. A user name and password for a user with read writes to the ArchivesSpace repository.\n")
-    response = input("Do you want to continue? (y/n): ")
-    check_response(response, "y")
-
-    if os.path.isfile(file_path):
-        print("\nIt looks like a configuration file already exists. This script will replace that file.\n")
-        response = input("Do you want to continue? (y/n): ")
-        check_response(response, "y")
-
-    cfg_file = open(file_path, 'w+')
-    print("\nOK, let's create this file! I\'ll ask you to enter a bunch of values. If you want to use the default value you can just hit the Enter key.\n")
-    start_section("ArchivesSpace")
-    print("We\'ll start with some values for your ArchivesSpace instance.")
-    baseURL = input(
-        "Enter the base URL of your ArchivesSpace installation (default is 'http://localhost:8089'): ")
-    write_value("baseURL", "http://localhost:8089", baseURL)
-    repoId = input(
-        "Enter the repository ID for your ArchivesSpace installation (default is '2'): ")
-    write_value("repository", "2", repoId)
-    username = input(
-        "Enter the username for your ArchivesSpace installation (default is 'admin'): ")
-    write_value("user", "admin", username)
-    password = input(
-        "Enter the password associated with this username (default is 'admin'): ")
-    write_value("password", "admin", password)
-
-    start_section("Destinations")
-    print("\nNow you need to tell me where you want to save the spreadsheet that will be created. Unless you know what you\'re doing, you should probably leave the defaults in place.\n")
-    directory = input(
-        "Enter the directory in which you want to save the spreadsheet (default is the current directory): ")
-    write_value("directory", "", directory)
-    filename = input(
-        "Now tell me the filename of the CSV spreadsheet you want to create (default is 'dacs_singlelevel_report.csv'): ")
-    write_value("filename", "dacs_singlelevel_report.csv", filename)
-
-    cfg_file.close()
-
-    print("You\'re all set! I created a configuration file at {}. You can edit that file at any time, or run this script again if you want to replace those configurations.".format(file_path))
-
-    sys.exit()
-
-
-main()
