diff --git a/dacsspace/client.py b/dacsspace/client.py
index b83eae7..fc19600 100644
--- a/dacsspace/client.py
+++ b/dacsspace/client.py
@@ -1,5 +1,3 @@
-from configparser import ConfigParser
-
 from asnake.aspace import ASpace
 
 
@@ -10,14 +8,12 @@ class ASnakeConfigError(Exception):
 class ArchivesSpaceClient:
     """Handles communication with ArchivesSpace."""
 
-    def __init__(self, as_config):
-        config = ConfigParser()
-        config.read(as_config)
-        self.aspace = ASpace(baseurl=config.get('ArchivesSpace', 'baseurl'),
-                             username=config.get('ArchivesSpace', 'user'),
-                             password=config.get('ArchivesSpace', 'password'))
-        self.repo = self.aspace.repositories(
-            config.get('ArchivesSpace', 'repository'))
+    def __init__(self, baseurl, username, password, repo_id):
+        self.aspace = ASpace(
+            baseurl=baseurl,
+            username=username,
+            password=password)
+        self.repo = self.aspace.repositories(repo_id)
         if isinstance(self.repo, dict):
             raise ASnakeConfigError(
                 "Error getting repository: {}".format(
diff --git a/dacsspace/dacsspace.py b/dacsspace/dacsspace.py
index 0488dc1..75a3d81 100644
--- a/dacsspace/dacsspace.py
+++ b/dacsspace/dacsspace.py
@@ -1,4 +1,5 @@
 import re
+from configparser import ConfigParser
 from os.path import isfile
 
 from .client import ArchivesSpaceClient
@@ -10,21 +11,33 @@ class DACSspace:
     """Base DACSspace class. Fetches data from AS, validates and reports results."""
 
     def __init__(self, as_config, csv_filepath):
-        """Checks csv filepath to make sure it has the proper extension and characters."""
+        """Checks CSV and AS config filepaths.
+
+        Args:
+            as_config (str): filepath to ArchivesSpace configuration file.
+            csv_filepath (str): filepath at which to save results file.
+        """
         if not csv_filepath.endswith(".csv"):
             raise ValueError("File must have .csv extension")
         if re.search(r'[*?:"<>|]', csv_filepath):
             raise ValueError(
                 'File name cannot contain the following characters: * ? : " < > | ')
         self.csv_filepath = csv_filepath
+
         if not isfile(as_config):
             raise IOError(
                 "Could not find an ArchivesSpace configuration file at {}".format(as_config))
-        self.as_config = as_config
+        config = ConfigParser()
+        config.read(as_config)
+        self.as_config = (
+            config.get('ArchivesSpace', 'baseurl'),
+            config.get('ArchivesSpace', 'user'),
+            config.get('ArchivesSpace', 'password'),
+            config.get('ArchivesSpace', 'repository'))
 
     def run(self, published_only, invalid_only,
             schema_identifier, schema_filepath):
-        client = ArchivesSpaceClient(self.as_config)
+        client = ArchivesSpaceClient(*self.as_config)
         validator = Validator(schema_identifier, schema_filepath)
         reporter = CSVReporter(self.csv_filepath)
         data = client.get_resources(published_only)
