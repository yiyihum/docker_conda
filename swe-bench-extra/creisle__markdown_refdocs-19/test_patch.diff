diff --git a/tests/test_markdown.py b/tests/test_markdown.py
index 0c059b7..f7e9522 100644
--- a/tests/test_markdown.py
+++ b/tests/test_markdown.py
@@ -1,4 +1,9 @@
-from markdown_refdocs.markdown import constant_to_markdown, create_type_link, function_to_markdown
+from markdown_refdocs.markdown import (
+    constant_to_markdown,
+    create_type_link,
+    function_to_markdown,
+    admonitions_to_markdown,
+)
 
 
 class TestConstantToMarkdown:
@@ -87,3 +92,24 @@ class TestCreateTypeLink:
         types = {'type': link}
         md = create_type_link('Tuple[type, type]', types)
         assert md == f'Tuple\\[[type]({link}), [type]({link})\\]'
+
+
+class TestAdmonitions:
+    def test_todo(self):
+        parsed = {
+            'todo': [
+                '* validate pk_col exists on table',
+                '* validate group_by is a column/list of columns on table',
+                '* validate filter_col exists on table',
+                '* validate dist_table joins to table?',
+            ]
+        }
+
+        expected = """!!! todo
+\t* validate pk_col exists on table
+\t* validate group_by is a column/list of columns on table
+\t* validate filter_col exists on table
+\t* validate dist_table joins to table?
+"""
+        actual = admonitions_to_markdown(parsed)
+        assert actual == expected
diff --git a/tests/test_parsers.py b/tests/test_parsers.py
index 63f16f2..86d0823 100644
--- a/tests/test_parsers.py
+++ b/tests/test_parsers.py
@@ -62,3 +62,24 @@ If the input string is only numbers, return a tuple of (None, {numbers}).
 Otherwise return a tuple of Nones."""
         assert result['description'] == expected
         assert len(result['examples']) == 4
+
+    def test_todo(self):
+        docstring = """
+validator for pk_select endpoint
+Todo:
+    * validate pk_col exists on table
+    * validate group_by is a column/list of columns on table
+    * validate filter_col exists on table
+    * validate dist_table joins to table?
+"""
+        result = parse_google_docstring(docstring)
+
+        expected = [
+            '* validate pk_col exists on table',
+            '* validate group_by is a column/list of columns on table',
+            '* validate filter_col exists on table',
+            '* validate dist_table joins to table?',
+        ]
+
+        for index, line in enumerate(result['todo']):
+            assert line == expected[index]
