diff --git a/tests/test_linter/test_cli.py b/tests/test_linter/test_cli.py
index ee4cb89d..5a95a434 100644
--- a/tests/test_linter/test_cli.py
+++ b/tests/test_linter/test_cli.py
@@ -64,7 +64,7 @@ class TestLinterCli(unittest.TestCase):
             result = self.runner.invoke(main, [SCHEMA_FILE])
             self.assertEqual(result.exit_code, 1)
             self.assertIn(
-                "warning  class_definition 'Adult' does not have recommended slot 'description'  (recommended)",
+                "warning  Class 'Adult' does not have recommended slot 'description'  (recommended)",
                 result.stdout,
             )
             self.assertIn(
diff --git a/tests/test_linter/test_rule_no_empty_title.py b/tests/test_linter/test_rule_no_empty_title.py
new file mode 100644
index 00000000..201a06ee
--- /dev/null
+++ b/tests/test_linter/test_rule_no_empty_title.py
@@ -0,0 +1,31 @@
+import unittest
+
+from linkml_runtime import SchemaView
+
+from linkml.linter.config.datamodel.config import RuleConfig, RuleLevel
+from linkml.linter.rules import NoEmptyTitleRule
+from linkml.utils.schema_builder import SchemaBuilder
+
+
+class TestRuleNoEmptyTitle(unittest.TestCase):
+    def test_elements_with_empty_title(self):
+        builder = SchemaBuilder()
+        builder.add_class("AClass")
+        builder.add_slot("a_slot")
+        builder.add_enum("AnEnum")
+        builder.add_type("a_type")
+        builder.add_class("WithTitle", title="With title")
+
+        schema_view = SchemaView(builder.schema)
+        config = RuleConfig(level=RuleLevel.error.text)
+
+        rule = NoEmptyTitleRule(config)
+        problems = list(rule.check(schema_view))
+
+        self.assertEqual(len(problems), 4)
+
+        messages = [p.message for p in problems]
+        self.assertIn("Class 'AClass' has no title", messages)
+        self.assertIn("Slot 'a_slot' has no title", messages)
+        self.assertIn("Enum 'AnEnum' has no title", messages)
+        self.assertIn("Type 'a_type' has no title", messages)
diff --git a/tests/test_linter/test_rule_recommended.py b/tests/test_linter/test_rule_recommended.py
index df0d29bc..6958fa9f 100644
--- a/tests/test_linter/test_rule_recommended.py
+++ b/tests/test_linter/test_rule_recommended.py
@@ -28,15 +28,15 @@ class TestRecommendedRule(unittest.TestCase):
 
         messages = [p.message for p in problems]
         self.assertIn(
-            "class_definition 'MyClass' does not have recommended slot 'description'",
+            "Class 'MyClass' does not have recommended slot 'description'",
             messages,
         )
         self.assertIn(
-            "slot_definition 'my_slot' does not have recommended slot 'description'",
+            "Slot 'my_slot' does not have recommended slot 'description'",
             messages,
         )
         self.assertIn(
-            "enum_definition 'MyEnum' does not have recommended slot 'description'",
+            "Enum 'MyEnum' does not have recommended slot 'description'",
             messages,
         )
 
@@ -74,7 +74,7 @@ class TestRecommendedRule(unittest.TestCase):
 
         messages = [p.message for p in problems]
         self.assertIn(
-            "slot_definition 'my_slot' does not have recommended slot 'description'",
+            "Slot 'my_slot' does not have recommended slot 'description'",
             messages,
         )
 
@@ -95,10 +95,10 @@ class TestRecommendedRule(unittest.TestCase):
 
         messages = [p.message for p in problems]
         self.assertIn(
-            "class_definition 'MyClass' does not have recommended slot 'description'",
+            "Class 'MyClass' does not have recommended slot 'description'",
             messages,
         )
         self.assertIn(
-            "enum_definition 'MyEnum' does not have recommended slot 'description'",
+            "Enum 'MyEnum' does not have recommended slot 'description'",
             messages,
         )
diff --git a/tests/test_linter/test_rule_standard_naming.py b/tests/test_linter/test_rule_standard_naming.py
index a2831c3c..bfc1665d 100644
--- a/tests/test_linter/test_rule_standard_naming.py
+++ b/tests/test_linter/test_rule_standard_naming.py
@@ -47,18 +47,18 @@ class TestStandardNamingRule(unittest.TestCase):
         self.assertIn("Slot has name 'BadSlot'", messages)
         self.assertIn("Slot has name 'worse slot'", messages)
         self.assertIn(
-            "Permissible value of enum 'GoodEnumWithBadPV' has name 'Bad_PV'", messages
+            "Permissible value of Enum 'GoodEnumWithBadPV' has name 'Bad_PV'", messages
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnumUpperPV' has name 'GOOD_UPPER_PV'",
+            "Permissible value of Enum 'GoodEnumUpperPV' has name 'GOOD_UPPER_PV'",
             messages,
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnumUpperPV' has name 'GREAT_UPPER_PV'",
+            "Permissible value of Enum 'GoodEnumUpperPV' has name 'GREAT_UPPER_PV'",
             messages,
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnumBadUpperPV' has name 'GOOD_UPPER_PV'",
+            "Permissible value of Enum 'GoodEnumBadUpperPV' has name 'GOOD_UPPER_PV'",
             messages,
         )
         self.assertIn("Enum has name 'bad_enum'", messages)
@@ -79,25 +79,25 @@ class TestStandardNamingRule(unittest.TestCase):
         self.assertIn("Slot has name 'BadSlot'", messages)
         self.assertIn("Slot has name 'worse slot'", messages)
         self.assertIn(
-            "Permissible value of enum 'GoodEnum' has name 'good_lower_pv'", messages
+            "Permissible value of Enum 'GoodEnum' has name 'good_lower_pv'", messages
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnum' has name 'great_lower_pv'", messages
+            "Permissible value of Enum 'GoodEnum' has name 'great_lower_pv'", messages
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnumWithBadPV' has name 'good_lower_pv'",
+            "Permissible value of Enum 'GoodEnumWithBadPV' has name 'good_lower_pv'",
             messages,
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnumWithBadPV' has name 'Bad_PV'", messages
+            "Permissible value of Enum 'GoodEnumWithBadPV' has name 'Bad_PV'", messages
         )
         self.assertIn(
-            "Permissible value of enum 'GoodEnumBadUpperPV' has name 'bad_pv'", messages
+            "Permissible value of Enum 'GoodEnumBadUpperPV' has name 'bad_pv'", messages
         )
         self.assertIn("Enum has name 'bad_enum'", messages)
         self.assertIn(
-            "Permissible value of enum 'bad_enum' has name 'good_lower_pv'", messages
+            "Permissible value of Enum 'bad_enum' has name 'good_lower_pv'", messages
         )
         self.assertIn(
-            "Permissible value of enum 'bad_enum' has name 'great_lower_pv'", messages
+            "Permissible value of Enum 'bad_enum' has name 'great_lower_pv'", messages
         )
