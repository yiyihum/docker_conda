diff --git a/tests/project/test_project.py b/tests/project/test_project.py
index 7acf1212..cf533063 100644
--- a/tests/project/test_project.py
+++ b/tests/project/test_project.py
@@ -3,8 +3,9 @@
 # Distributed under the terms of "New BSD License", see the LICENSE file.
 
 import unittest
-from os.path import dirname, join, abspath
-from os import remove
+from os.path import dirname, join, abspath, exists, islink
+import os
+import tempfile
 import pint
 from pyiron_base.project.generic import Project
 from pyiron_base._tests import PyironTestCase, TestWithProject, TestWithFilledProject, ToyJob
@@ -20,7 +21,7 @@ class TestProjectData(PyironTestCase):
     @classmethod
     def tearDownClass(cls):
         try:
-            remove(join(cls.file_location, "pyiron.log"))
+            os.remove(join(cls.file_location, "pyiron.log"))
         except FileNotFoundError:
             pass
 
@@ -127,6 +128,59 @@ class TestProjectOperations(TestWithFilledProject):
         self.assertIn('pyiron_base', df.Module.values)
 
 
+@unittest.skipUnless(os.name=="posix", "symlinking is only available on posix platforms")
+class TestProjectSymlink(TestWithFilledProject):
+    """
+    Test that Project.symlink creates a symlink and unlink removes it again.
+    """
+
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        cls.temp = tempfile.TemporaryDirectory()
+
+    @classmethod
+    def tearDownClass(cls):
+        super().tearDownClass()
+        cls.temp.cleanup()
+
+    def test_symlink(self):
+
+        nodes = self.project.list_nodes()
+        groups = self.project.list_groups()
+
+        self.project.symlink(self.temp.name)
+
+        try:
+            self.project.symlink(self.temp.name)
+        except Exception as e:
+            self.fail(f"symlinking twice should have no effect, but raised {e}!")
+
+        with self.assertRaises(RuntimeError, msg="symlinking to another folder should raise an error"):
+            self.project.symlink("asdf")
+
+        path = self.project.path.rstrip(os.sep)
+        self.assertTrue(islink(path), "symlink() did not create a symlink!")
+        self.assertEqual(os.readlink(path), join(self.temp.name, self.project.name),
+                        "symlink() created a wrong symlink!")
+
+        self.assertCountEqual(nodes, self.project.list_nodes(), "not all nodes present after symlink!")
+        self.assertCountEqual(groups, self.project.list_groups(), "not all groups present after symlink!")
+
+        self.project.unlink()
+
+        self.assertTrue(exists(self.project.path), "unlink() did not restore original directory!")
+        self.assertFalse(islink(path), "unlink() did not remove symlink!")
+
+        self.assertCountEqual(nodes, self.project.list_nodes(), "not all nodes present after unlink!")
+        self.assertCountEqual(groups, self.project.list_groups(), "not all groups present after unlink!")
+
+        try:
+            self.project.unlink()
+        except Exception as e:
+            self.fail(f"unlinking twice should have no effect, but raised {e}!")
+
+
 class TestToolRegistration(TestWithProject):
     def setUp(self) -> None:
         self.tools = BaseTools(self.project)
diff --git a/tests/project/test_projectPath.py b/tests/project/test_projectPath.py
index 7a6a752c..00d999be 100644
--- a/tests/project/test_projectPath.py
+++ b/tests/project/test_projectPath.py
@@ -18,13 +18,14 @@ class TestProjectPath(PyironTestCase):
         else:
             cls.current_dir = os.path.dirname(os.path.abspath(__file__))
         cls.settings_configuration = state.settings.configuration.copy()
-        cls.project_path = ProjectPath(path=cls.current_dir)
-        cls.project_path = cls.project_path.open("test_project_path")
 
     def setUp(self) -> None:
-        state.settings.configuration["project_paths"] = [self.current_dir]
+        state.settings.configuration["project_paths"] = [self.current_dir + "/"]
         state.settings.configuration["project_check_enabled"] = True
 
+        self.project_path = ProjectPath(path=self.current_dir)
+        self.project_path = self.project_path.open("test_project_path")
+
     def tearDown(self) -> None:
         state.settings.configuration.update(self.settings_configuration)
 
@@ -67,7 +68,7 @@ class TestProjectPath(PyironTestCase):
         )
 
     def test_root_path(self):
-        root_paths = self.settings_configuration["project_paths"]
+        root_paths = state.settings.configuration["project_paths"]
         self.assertIn(
             self.project_path.root_path,
             root_paths,
@@ -75,7 +76,7 @@ class TestProjectPath(PyironTestCase):
         )
 
     def test_project_path(self):
-        root_paths = self.settings_configuration["project_paths"]
+        root_paths = state.settings.configuration["project_paths"]
         self.assertIn(
             self.current_dir + "/test_project_path/",
             [root_path + self.project_path.project_path for root_path in root_paths],
diff --git a/tests/state/test_install.py b/tests/state/test_install.py
index 733fc675..d4a6e0fd 100644
--- a/tests/state/test_install.py
+++ b/tests/state/test_install.py
@@ -30,6 +30,7 @@ class TestInstall(PyironTestCase):
                 config_file_name=os.path.join(self.execution_path, "config"),
                 resource_directory=os.path.join(self.execution_path, "resources"),
                 project_path=os.path.join(self.execution_path, "project"),
+                giturl_for_zip_file=None,
         )
 
         with open(os.path.join(self.execution_path, "config"), "r") as f:
