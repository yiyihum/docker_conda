diff --git a/falcon/app.py b/falcon/app.py
index 2ee701e..8f639cb 100644
--- a/falcon/app.py
+++ b/falcon/app.py
@@ -21,7 +21,7 @@ import traceback
 
 from falcon import app_helpers as helpers, routing
 import falcon.constants
-from falcon.errors import HTTPBadRequest
+from falcon.errors import CompatibilityError, HTTPBadRequest
 from falcon.http_error import HTTPError
 from falcon.http_status import HTTPStatus
 from falcon.middleware import CORSMiddleware
@@ -505,6 +505,10 @@ class App:
                 corresponding request handlers, and Falcon will do the right
                 thing.
 
+                Note:
+                    When using an async version of the ``App``, all request
+                    handlers must be awaitable coroutine functions.
+
         Keyword Args:
             suffix (str): Optional responder name suffix for this route. If
                 a suffix is provided, Falcon will map GET requests to
@@ -637,6 +641,12 @@ class App:
 
         """
 
+        if not self._ASGI and iscoroutinefunction(sink):
+            raise CompatibilityError(
+                'The sink method must be a regular synchronous function '
+                'in order to be used with a WSGI app.'
+            )
+
         if not hasattr(prefix, 'match'):
             # Assume it is a string
             prefix = re.compile(prefix)
diff --git a/falcon/asgi/app.py b/falcon/asgi/app.py
index 2115577..e0ff2dc 100644
--- a/falcon/asgi/app.py
+++ b/falcon/asgi/app.py
@@ -34,7 +34,12 @@ from falcon.http_status import HTTPStatus
 from falcon.media.multipart import MultipartFormHandler
 import falcon.routing
 from falcon.util.misc import http_status_to_code, is_python_func
-from falcon.util.sync import _wrap_non_coroutine_unsafe, get_running_loop
+from falcon.util.sync import (
+    _should_wrap_non_coroutines,
+    _wrap_non_coroutine_unsafe,
+    get_running_loop,
+    wrap_sync_to_async,
+)
 from .multipart import MultipartForm
 from .request import Request
 from .response import Response
@@ -682,6 +687,20 @@ class App(falcon.app.App):
 
     add_route.__doc__ = falcon.app.App.add_route.__doc__
 
+    def add_sink(self, sink, prefix=r'/'):
+        if not iscoroutinefunction(sink) and is_python_func(sink):
+            if _should_wrap_non_coroutines():
+                sink = wrap_sync_to_async(sink)
+            else:
+                raise CompatibilityError(
+                    'The sink method must be an awaitable coroutine function '
+                    'in order to be used safely with an ASGI app.'
+                )
+
+        super().add_sink(sink, prefix=prefix)
+
+    add_sink.__doc__ = falcon.app.App.add_sink.__doc__
+
     def add_error_handler(self, exception, handler=None):
         """Register a handler for one or more exception types.
 
