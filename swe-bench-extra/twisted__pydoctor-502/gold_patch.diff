diff --git a/.github/workflows/system.yaml b/.github/workflows/system.yaml
index f98c369d..f30105c6 100644
--- a/.github/workflows/system.yaml
+++ b/.github/workflows/system.yaml
@@ -12,7 +12,11 @@ jobs:
 
     strategy:
       matrix:
-        tox_target: [twisted-apidoc, cpython-summary, python-igraph-apidocs, cpython-apidocs]
+        tox_target: [twisted-apidoc, 
+                     cpython-summary, 
+                     python-igraph-apidocs, 
+                     cpython-apidocs,
+                     numpy-apidocs,]
 
     steps:
     - uses: actions/checkout@v2
diff --git a/README.rst b/README.rst
index 6c62894b..bfb1de3e 100644
--- a/README.rst
+++ b/README.rst
@@ -71,7 +71,11 @@ What's New?
 ~~~~~~~~~~~
 
 in development
-^^^^^^^^^^^^^^ 
+^^^^^^^^^^^^^^
+
+pydoctor 22.2.1
+^^^^^^^^^^^^^^^
+* Fix crash of pydoctor when processing a reparented module.
 
 pydoctor 22.2.0
 ^^^^^^^^^^^^^^^
diff --git a/pydoctor/model.py b/pydoctor/model.py
index 2e7ceaa9..f6423992 100644
--- a/pydoctor/model.py
+++ b/pydoctor/model.py
@@ -626,7 +626,11 @@ class System:
         self.verboselevel = 0
         self.needsnl = False
         self.once_msgs: Set[Tuple[str, str]] = set()
-        self.unprocessed_modules: Dict[str, _ModuleT] = OrderedDict()
+
+        # We're using the id() of the modules as key, and not the fullName becaue modules can
+        # be reparented, generating KeyError.
+        self.unprocessed_modules: Dict[int, _ModuleT] = OrderedDict()
+
         self.module_count = 0
         self.processing_modules: List[str] = []
         self.buildtime = datetime.datetime.now()
@@ -826,10 +830,13 @@ class System:
         module to the system.
         """
         assert mod.state is ProcessingState.UNPROCESSED
-        first = self.unprocessed_modules.setdefault(mod.fullName(), mod)
-        if mod is not first:
+        first = self.allobjects.get(mod.fullName())
+        if first is not None:
+            # At this step of processing only modules exists
+            assert isinstance(first, Module)
             self._handleDuplicateModule(first, mod)
         else:
+            self.unprocessed_modules[id(mod)] = mod
             self.addObject(mod)
             self.progress(
                 "analyzeModule", len(self.allobjects),
@@ -855,7 +862,7 @@ class System:
             return
         else:
             # Else, the last added module wins
-            del self.unprocessed_modules[dup.fullName()]
+            del self.unprocessed_modules[id(dup)]
             self._addUnprocessedModule(dup)
 
     def _introspectThing(self, thing: object, parent: Documentable, parentMod: _ModuleT) -> None:
@@ -1010,7 +1017,7 @@ class System:
                 mod.state = ProcessingState.PROCESSED
                 head = self.processing_modules.pop()
                 assert head == mod.fullName()
-        del self.unprocessed_modules[mod.fullName()]
+        del self.unprocessed_modules[id(mod)]
         self.progress(
             'process',
             self.module_count - len(self.unprocessed_modules),
diff --git a/setup.cfg b/setup.cfg
index d3237ed1..796b8a0c 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,6 +1,6 @@
 [metadata]
 name = pydoctor
-version = 22.2.0.dev0
+version = 22.2.1.dev0
 author = Michael Hudson-Doyle
 author_email = micahel@gmail.com
 maintainer = Maarten ter Huurne
diff --git a/tox.ini b/tox.ini
index 56e3cab5..0f388a6c 100644
--- a/tox.ini
+++ b/tox.ini
@@ -82,6 +82,23 @@ commands =
         {toxworkdir}/cpython/Lib
     pytest -v docs/tests/test_standard_library_docs.py
 
+[testenv:numpy-apidocs]
+description = Build numpy API documentation. For now we don't check for any warnings or other errors. The only purpose of this test is to make sure pydoctor doesn't crash.
+deps = 
+    pytest
+commands =
+    sh -c "if [ ! -d {toxworkdir}/numpy ]; then \
+        git clone --depth 1 https://github.com/numpy/numpy.git {toxworkdir}/numpy; \
+        fi"
+    sh -c "cd {toxworkdir}/numpy && git pull"
+    rm -rf {toxworkdir}/numpy-output
+    python3 -c "from pydoctor.driver import main; \
+        code = main(['--html-summary-pages', '--quiet', \
+        '--html-output={toxworkdir}/numpy-output', \
+        '{toxworkdir}/numpy/numpy']); \
+        # Code 2 error means bad docstrings, which is OK for this test.
+        assert code==2, 'pydoctor exited with code %s, expected code 2.'%code"
+
 # Requires cmake
 [testenv:python-igraph-apidocs]
 description = Build python-igraph API documentation
@@ -134,7 +151,9 @@ deps =
     sphinx>=3.4.0
     git+https://github.com/twisted/twisted.git
     types-requests
-    types-docutils
+    # FIXME: https://github.com/twisted/pydoctor/issues/504
+    # This is pinned for now as newer versions are breaking our static checks.
+    types-docutils==0.17.5
 
 commands =
     mypy                                       \
