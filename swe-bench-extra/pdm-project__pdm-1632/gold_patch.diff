diff --git a/news/1619.bugfix.md b/news/1619.bugfix.md
new file mode 100644
index 00000000..eca4a386
--- /dev/null
+++ b/news/1619.bugfix.md
@@ -0,0 +1,1 @@
+Fix the wildcards in requirement specifiers to make it pass the new parser of `packaging>=22`.
diff --git a/src/pdm/models/requirements.py b/src/pdm/models/requirements.py
index 49f0c33a..65e4a0b6 100644
--- a/src/pdm/models/requirements.py
+++ b/src/pdm/models/requirements.py
@@ -26,6 +26,7 @@ from pdm.models.markers import Marker, get_marker, split_marker_extras
 from pdm.models.setup import Setup
 from pdm.models.specifiers import PySpecSet, get_specifier
 from pdm.utils import (
+    PACKAGING_22,
     add_ssh_scheme_to_git_uri,
     comparable_version,
     normalize_name,
@@ -36,6 +37,8 @@ from pdm.utils import (
 )
 
 if TYPE_CHECKING:
+    from typing import Match
+
     from pdm._types import RequirementDict
 
 
@@ -458,6 +461,34 @@ def filter_requirements_with_extras(
     return result
 
 
+_legacy_specifier_re = re.compile(r"(==|!=|<=|>=|<|>)(\s*)([^,;\s)]*)")
+
+
+def parse_as_pkg_requirement(line: str) -> PackageRequirement:
+    """Parse a requirement line as packaging.requirement.Requirement"""
+
+    def fix_wildcard(match: Match[str]) -> str:
+        operator, _, version = match.groups()
+        if ".*" not in version or operator in ("==", "!="):
+            return match.group(0)
+        version = version.replace(".*", ".0")
+        if operator in ("<", "<="):  # <4.* and <=4.* are equivalent to <4.0
+            operator = "<"
+        elif operator in (">", ">="):  # >4.* and >=4.* are equivalent to >=4.0
+            operator = ">="
+        return f"{operator}{version}"
+
+    try:
+        return PackageRequirement(line)
+    except InvalidRequirement:
+        if not PACKAGING_22:  # We can't do anything, reraise the error.
+            raise
+        # Since packaging 22.0, legacy specifiers like '>=4.*' are no longer
+        # supported. We try to normalize them to the new format.
+        new_line = _legacy_specifier_re.sub(fix_wildcard, line)
+        return PackageRequirement(new_line)
+
+
 def parse_requirement(line: str, editable: bool = False) -> Requirement:
 
     m = _vcs_req_re.match(line)
@@ -475,14 +506,14 @@ def parse_requirement(line: str, editable: bool = False) -> Requirement:
         if replaced:
             line = line.replace("{root:uri}", root_url)
         try:
-            package_req = PackageRequirement(line)  # type: ignore
+            pkg_req = parse_as_pkg_requirement(line)
         except InvalidRequirement as e:
             m = _file_req_re.match(line)
             if m is None:
                 raise RequirementError(str(e)) from None
             r = FileRequirement.create(**m.groupdict())
         else:
-            r = Requirement.from_pkg_requirement(package_req)
+            r = Requirement.from_pkg_requirement(pkg_req)
         if replaced:
             assert isinstance(r, FileRequirement)
             r.url = r.url.replace(root_url, "{root:uri}")
diff --git a/src/pdm/utils.py b/src/pdm/utils.py
index 50fdd2c6..77187f80 100644
--- a/src/pdm/utils.py
+++ b/src/pdm/utils.py
@@ -23,9 +23,10 @@ from typing import IO, Any, Iterator
 from packaging.version import Version
 
 from pdm._types import Source
-from pdm.compat import Distribution
+from pdm.compat import Distribution, importlib_metadata
 
 _egg_fragment_re = re.compile(r"(.*)[#&]egg=[^&]*")
+PACKAGING_22 = Version(importlib_metadata.version("packaging")) >= Version("22")
 
 
 def create_tracked_tempdir(
