diff --git a/examples/consume.py b/examples/consume.py
index 17667de..2254cd1 100644
--- a/examples/consume.py
+++ b/examples/consume.py
@@ -1,12 +1,19 @@
 import functools
+import logging
 import pika
 
+LOG_FORMAT = ('%(levelname) -10s %(asctime)s %(name) -30s %(funcName) '
+              '-35s %(lineno) -5d: %(message)s')
+LOGGER = logging.getLogger(__name__)
+
+logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
+
 def on_message(channel, method_frame, header_frame, body, userdata=None):
-    print('Userdata: {} Message body: {}'.format(userdata, body))
+    LOGGER.info('Userdata: {} Message body: {}'.format(userdata, body))
     channel.basic_ack(delivery_tag=method_frame.delivery_tag)
 
 credentials = pika.PlainCredentials('guest', 'guest')
-parameters =  pika.ConnectionParameters('localhost', credentials=credentials)
+parameters = pika.ConnectionParameters('localhost', credentials=credentials)
 connection = pika.BlockingConnection(parameters)
 
 channel = connection.channel()
diff --git a/pika/adapters/utils/connection_workflow.py b/pika/adapters/utils/connection_workflow.py
index e6926c9..e3567b5 100644
--- a/pika/adapters/utils/connection_workflow.py
+++ b/pika/adapters/utils/connection_workflow.py
@@ -14,6 +14,7 @@ import socket
 import pika.compat
 import pika.exceptions
 import pika.tcp_socket_opts
+from pika import __version__
 
 
 _LOG = logging.getLogger(__name__)
@@ -186,7 +187,8 @@ class AMQPConnector(object):
         self._sock.setblocking(False)
 
         addr = self._addr_record[4]
-        _LOG.info('Connecting to AMQP broker at %r', addr)
+        _LOG.info('Pika version %s connecting to %r',
+                  __version__, addr)
         self._task_ref = self._nbio.connect_socket(
             self._sock,
             addr,
diff --git a/pika/heartbeat.py b/pika/heartbeat.py
index 4eaaa59..3c9f46f 100644
--- a/pika/heartbeat.py
+++ b/pika/heartbeat.py
@@ -12,21 +12,24 @@ class HeartbeatChecker(object):
     intervals.
 
     """
+    DEFAULT_INTERVAL = 60
     MAX_IDLE_COUNT = 2
+
     _STALE_CONNECTION = "Too Many Missed Heartbeats, No reply in %i seconds"
 
-    def __init__(self, connection, interval, idle_count=MAX_IDLE_COUNT):
+    def __init__(self, connection, interval=DEFAULT_INTERVAL, idle_count=MAX_IDLE_COUNT):
         """Create a heartbeat on connection sending a heartbeat frame every
         interval seconds.
 
         :param pika.connection.Connection: Connection object
-        :param int interval: Heartbeat check interval
-        :param int idle_count: Number of heartbeat intervals missed until the
-                               connection is considered idle and disconnects
+        :param int interval: Heartbeat check interval. Note: heartbeats will
+                             be sent at interval / 2 frequency.
 
         """
         self._connection = connection
-        self._interval = interval
+        # Note: see the following document:
+        # https://www.rabbitmq.com/heartbeats.html#heartbeats-timeout
+        self._interval = float(interval / 2)
         self._max_idle_count = idle_count
 
         # Initialize counters

