diff --git a/.pep8speaks.yml b/.pep8speaks.yml
deleted file mode 100644
index f845da350..000000000
--- a/.pep8speaks.yml
+++ /dev/null
@@ -1,26 +0,0 @@
-scanner:
-  diff_only: False
-
-pycodestyle:
-  max-line-length: 100
-  exclude:
-    - setup.py
-    - docs/conf.py
-    - sunpy/__init__.py
-    - sunpy/extern/
-  ignore:
-    - E226
-    - E501
-    - W503
-    - W504
-
-descending_issues_order: True
-
-message:
-  opened:
-    header: "Hello @{name}! Thanks for opening this PR. "
-    footer: "Do see the [Hitchhiker's guide to code style](https://goo.gl/hqbW4r)"
-  updated:
-    header: "Hello @{name}! Thanks for updating this PR. "
-    footer: ""
-  no_errors: "There are currently no PEP 8 issues detected in this Pull Request. Cheers!"
diff --git a/MANIFEST.in b/MANIFEST.in
index d10ccd251..9dc53df20 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,24 +1,21 @@
-# Exclude specific files
-# All files which are tracked by git and not explicitly excluded here are included by setuptools_scm
 exclude .codecov.yaml
-exclude .mailmap
 exclude .editorconfig
 exclude .gitattributes
 exclude .gitignore
-exclude .pep8speaks.yml
+exclude .mailmap
 exclude .pre-commit-config.yaml
+exclude .readthedocs.yaml
 exclude .test_package_pins.txt
 exclude .zenodo.json
-exclude azure-pipelines.yml
+exclude asv.conf.json
+exclude CITATION.cff
 exclude readthedocs.yml
-exclude rtd-environment.yml
-# Prune folders
+
 prune .circleci
 prune .github
 prune .jupyter
+prune benchmarks
 prune binder
 prune changelog
 prune tools
-# This subpackage is only used in development checkouts and should not be
-# included in built tarballs
 prune sunpy/_dev
diff --git a/changelog/6011.bugfix.rst b/changelog/6011.bugfix.rst
new file mode 100644
index 000000000..e5f317c01
--- /dev/null
+++ b/changelog/6011.bugfix.rst
@@ -0,0 +1,1 @@
+Fixed `.system_info` so it returns the extra group when an optional dependency is missing.
diff --git a/pyproject.toml b/pyproject.toml
index d7ee23eec..5e28f304f 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,7 +1,7 @@
 [build-system]
 requires = [
-         "setuptools",
-         "setuptools_scm",
+         "setuptools>=56,!=61.0.0",
+         "setuptools_scm[toml]>=6.2",
          "wheel",
          "oldest-supported-numpy",
          "extension-helpers"
diff --git a/sunpy/util/sysinfo.py b/sunpy/util/sysinfo.py
index 8bb5d1c7e..1bdcf390f 100644
--- a/sunpy/util/sysinfo.py
+++ b/sunpy/util/sysinfo.py
@@ -5,6 +5,7 @@ import platform
 from collections import defaultdict
 from importlib.metadata import PackageNotFoundError, version, requires, distribution
 
+from packaging.markers import Marker
 from packaging.requirements import Requirement
 
 import sunpy.extern.distro as distro
@@ -25,20 +26,53 @@ def get_requirements(package):
     -------
     `dict`
         A dictionary of requirements with keys being the extra requirement group names.
+        The values are a nested dictionary with keys being the package names and
+        values being the `packaging.requirements.Requirement` objects.
     """
     requirements: list = requires(package)
-    requires_dict = defaultdict(list)
+    requires_dict = defaultdict(dict)
     for requirement in requirements:
         req = Requirement(requirement)
         package_name, package_marker = req.name, req.marker
         if package_marker and "extra ==" in str(package_marker):
             group = str(package_marker).split("extra == ")[1].strip('"').strip("'").strip()
-            requires_dict[group].append(package_name)
         else:
-            requires_dict["required"].append(package_name)
+            group = "required"
+        # De-duplicate (the same package could appear more than once in the extra == 'all' group)
+        if package_name in requires_dict[group]:
+            continue
+        requires_dict[group][package_name] = req
     return requires_dict
 
 
+def resolve_requirement_versions(package_versions):
+    """
+    Resolves a list of requirements for the same package.
+
+    Given a list of package details in the form of `packaging.requirements.Requirement`
+    objects, combine the specifier, extras, url and marker information to create
+    a new requirement object.
+    """
+    resolved = Requirement(str(package_versions[0]))
+
+    for package_version in package_versions[1:]:
+        resolved.specifier = resolved.specifier & package_version.specifier
+        resolved.extras = resolved.extras.union(package_version.extras)
+        resolved.url = resolved.url or package_version.url
+        if resolved.marker and package_version.marker:
+            resolved.marker = Marker(f"{resolved.marker} or {package_version.marker}")
+        elif package_version.marker:
+            resolved.marker = package_version.marker
+
+    return resolved
+
+
+def format_requirement_string(requirement):
+    formatted_string = f"Missing {requirement}"
+    formatted_string = formatted_string.replace("or extra ==", "or").strip()
+    return formatted_string
+
+
 def find_dependencies(package="sunpy", extras=None):
     """
     List installed and missing dependencies.
@@ -49,17 +83,20 @@ def find_dependencies(package="sunpy", extras=None):
     """
     requirements = get_requirements(package)
     installed_requirements = {}
-    missing_requirements = {}
+    missing_requirements = defaultdict(list)
     extras = extras or ["required"]
     for group in requirements:
         if group not in extras:
             continue
-        for package in requirements[group]:
+        for package, package_details in requirements[group].items():
             try:
                 package_version = version(package)
                 installed_requirements[package] = package_version
             except PackageNotFoundError:
-                missing_requirements[package] = f"Missing {package}"
+                missing_requirements[package].append(package_details)
+    for package, package_versions in missing_requirements.items():
+        missing_requirements[package] = format_requirement_string(
+            resolve_requirement_versions(package_versions))
     return missing_requirements, installed_requirements
 
 
@@ -80,13 +117,27 @@ def missing_dependencies_by_extra(package="sunpy", exclude_extras=None):
     return missing_dependencies
 
 
+def get_extra_groups(groups, exclude_extras):
+    return list(set(groups) - set(exclude_extras))
+
+
+def get_keys_list(dictionary, sort=True):
+    keys = [*dictionary.keys()]
+    if sort:
+        return sorted(keys)
+    return keys
+
+
 def system_info():
     """
     Prints ones' system info in an "attractive" fashion.
     """
-    base_reqs = get_requirements("sunpy")["required"]
-    extra_reqs = get_requirements("sunpy")["all"]
-    missing_packages, installed_packages = find_dependencies(package="sunpy", extras=["required", "all"])
+    requirements = get_requirements("sunpy")
+    groups = get_keys_list(requirements)
+    extra_groups = get_extra_groups(groups, ['all', 'dev'])
+    base_reqs = get_keys_list(requirements['required'])
+    extra_reqs = get_keys_list(requirements['all'])
+    missing_packages, installed_packages = find_dependencies(package="sunpy", extras=extra_groups)
     extra_prop = {"System": platform.system(),
                   "Arch": f"{platform.architecture()[0]}, ({platform.processor()})",
                   "Python": platform.python_version(),
diff --git a/tox.ini b/tox.ini
index 1fd3b3e5a..5815c0fc9 100644
--- a/tox.ini
+++ b/tox.ini
@@ -5,7 +5,7 @@ envlist =
     codestyle
     base_deps
 requires =
-    setuptools >= 30.3.0
+    setuptools >=56, !=61.0.0
     pip >= 19.3.1
     tox-pypi-filter >= 0.12
 isolated_build = true
