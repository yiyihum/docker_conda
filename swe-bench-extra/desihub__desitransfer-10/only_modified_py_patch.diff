diff --git a/py/desitransfer/daily.py b/py/desitransfer/daily.py
index 94b63d5..d27b1f7 100644
--- a/py/desitransfer/daily.py
+++ b/py/desitransfer/daily.py
@@ -98,6 +98,8 @@ def _config():
             #                os.path.join(engineering, 'fxc')),
             DailyDirectory('/data/focalplane/logs/calib_logs',
                            os.path.join(engineering, 'focalplane', 'logs', 'calib_logs')),
+            DailyDirectory('/data/focalplane/logs/kpno',
+                           os.path.join(engineering, 'focalplane', 'logs', 'kpno')),
             DailyDirectory('/data/focalplane/logs/xytest_data',
                            os.path.join(engineering, 'focalplane', 'logs', 'xytest_data')),
             DailyDirectory('/data/fvc/data',
diff --git a/py/desitransfer/status.py b/py/desitransfer/status.py
index 21cb7a9..e92998f 100644
--- a/py/desitransfer/status.py
+++ b/py/desitransfer/status.py
@@ -14,10 +14,6 @@ import time
 from argparse import ArgumentParser
 from pkg_resources import resource_filename
 from . import __version__ as dtVersion
-# from desiutil.log import get_logger
-
-
-# log = None
 
 
 class TransferStatus(object):
@@ -47,11 +43,44 @@ class TransferStatus(object):
             return
         try:
             with open(self.json) as j:
-                self.status = json.load(j)
+                try:
+                    self.status = json.load(j)
+                except json.JSONDecodeError:
+                    self._handle_malformed()
         except FileNotFoundError:
             pass
         return
 
+    def _handle_malformed(self):
+        """Handle malformed JSON files.
+
+        This function will save the malformed file to a .bad file for
+        later analysis, and write an empty array to a new status file.
+        """
+        from .daemon import log
+        bad = self.json + '.bad'
+        m = "Malformed JSON file detected: %s; saving original file as %s."
+        try:
+            log.error(m, self.json, bad)
+        except AttributeError:
+            # If the status code is running stand-alone, the log object
+            # will be None.
+            print("ERROR: " + (m % (self.json, bad)))
+        m = "shutil.copy2('%s', '%s')"
+        try:
+            log.debug(m, self.json, bad)
+        except AttributeError:
+            print("DEBUG: " + (m % (self.json, bad)))
+        shutil.copy2(self.json, bad)
+        m = "Writing empty array to %s."
+        try:
+            log.info(m, self.json)
+        except AttributeError:
+            print("INFO: " + (m % (self.json,)))
+        with open(self.json, 'w') as j:
+            j.write('[]')
+        return
+
     def update(self, night, exposure, stage, failure=False, last=''):
         """Update the transfer status.
 
@@ -92,6 +121,14 @@ class TransferStatus(object):
             self.status.insert(0, row)
         self.status = sorted(self.status, key=lambda x: x[0]*10000000 + x[1],
                              reverse=True)
+        #
+        # Copy the original file before modifying.
+        # This will overwrite any existing .bak file
+        #
+        try:
+            shutil.copy2(self.json, self.json + '.bak')
+        except FileNotFoundError:
+            pass
         with open(self.json, 'w') as j:
             json.dump(self.status, j, indent=None, separators=(',', ':'))
 
