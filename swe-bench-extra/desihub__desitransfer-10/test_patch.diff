diff --git a/py/desitransfer/test/t/bad.json b/py/desitransfer/test/t/bad.json
new file mode 100644
index 0000000..0f25ee4
--- /dev/null
+++ b/py/desitransfer/test/t/bad.json
@@ -0,0 +1,1 @@
+This is a bad JSON file!
diff --git a/py/desitransfer/test/test_daemon.py b/py/desitransfer/test/test_daemon.py
index f6247df..ab51215 100644
--- a/py/desitransfer/test/test_daemon.py
+++ b/py/desitransfer/test/test_daemon.py
@@ -135,10 +135,10 @@ class TestDaemon(unittest.TestCase):
     @patch('desitransfer.daemon.SMTPHandler')
     @patch('desitransfer.daemon.RotatingFileHandler')
     @patch('desitransfer.daemon.get_logger')
-    def test_TransferDaemon_configure_log(self, gl, rfh, smtp):
+    @patch('desitransfer.daemon.log')  # Needed to restore the module-level log object after test.
+    def test_TransferDaemon_configure_log(self, mock_log, gl, rfh, smtp):
         """Test logging configuration.
         """
-        ll = gl.return_value = MagicMock()
         with patch.dict('os.environ',
                         {'CSCRATCH': self.tmp.name,
                          'DESI_ROOT': '/desi/root',
@@ -149,7 +149,7 @@ class TestDaemon(unittest.TestCase):
         rfh.assert_called_once_with('/desi/root/spectro/staging/logs/desi_transfer_daemon.log',
                                     backupCount=100, maxBytes=100000000)
         gl.assert_called_once_with(timestamp=True)
-        ll.setLevel.assert_called_once_with(logging.DEBUG)
+        gl().setLevel.assert_called_once_with(logging.DEBUG)
 
     @patch.object(TransferDaemon, 'checksum_lock')
     @patch.object(TransferDaemon, 'directory')
diff --git a/py/desitransfer/test/test_daily.py b/py/desitransfer/test/test_daily.py
index 1d8c180..9089131 100644
--- a/py/desitransfer/test/test_daily.py
+++ b/py/desitransfer/test/test_daily.py
@@ -110,7 +110,7 @@ class TestDaily(unittest.TestCase):
                              call().__exit__(None, None, None)])
         mock_popen.assert_has_calls([call(),
                                      call(['fix_permissions.sh', '-a', '/dst/d0'],
-                                          stdout=mo(), stderr=-2), 
+                                          stdout=mo(), stderr=-2),
                                      call().wait()])
 
 
diff --git a/py/desitransfer/test/test_status.py b/py/desitransfer/test/test_status.py
index 0194031..23adbe1 100644
--- a/py/desitransfer/test/test_status.py
+++ b/py/desitransfer/test/test_status.py
@@ -4,9 +4,10 @@
 """
 import json
 import os
+import shutil
 import sys
 import unittest
-from unittest.mock import patch
+from unittest.mock import patch, call
 from tempfile import TemporaryDirectory
 from pkg_resources import resource_filename
 from ..status import TransferStatus, _options
@@ -85,6 +86,45 @@ class TestStatus(unittest.TestCase):
         cp.assert_called_once_with(j, d)
         cf.assert_called_once_with(h, os.path.join(d, 'index.html'))
 
+    @patch('desitransfer.daemon.log')
+    def test_TransferStatus_handle_malformed_with_log(self, mock_log):
+        """Test handling of malformed JSON files.
+        """
+        bad = resource_filename('desitransfer.test', 't/bad.json')
+        with TemporaryDirectory() as d:
+            shutil.copy(bad, os.path.join(d, 'desi_transfer_status.json'))
+            s = TransferStatus(d)
+            self.assertTrue(os.path.exists(os.path.join(d, 'desi_transfer_status.json.bad')))
+            self.assertListEqual(s.status, [])
+            self.assertListEqual(os.listdir(d), ['desi_transfer_status.json.bad',
+                                                 'desi_transfer_status.json'])
+        mock_log.error.assert_called_once_with('Malformed JSON file detected: %s; saving original file as %s.',
+                                               os.path.join(d, 'desi_transfer_status.json'),
+                                               os.path.join(d, 'desi_transfer_status.json.bad'))
+        mock_log.debug.assert_called_once_with("shutil.copy2('%s', '%s')",
+                                               os.path.join(d, 'desi_transfer_status.json'),
+                                               os.path.join(d, 'desi_transfer_status.json.bad'))
+        mock_log.info.assert_called_once_with('Writing empty array to %s.',
+                                              os.path.join(d, 'desi_transfer_status.json'))
+
+    @patch('builtins.print')
+    def test_TransferStatus_handle_malformed_without_log(self, mock_print):
+        """Test handling of malformed JSON files (no log object).
+        """
+        bad = resource_filename('desitransfer.test', 't/bad.json')
+        with TemporaryDirectory() as d:
+            shutil.copy(bad, os.path.join(d, 'desi_transfer_status.json'))
+            s = TransferStatus(d)
+            self.assertTrue(os.path.exists(os.path.join(d, 'desi_transfer_status.json.bad')))
+            self.assertListEqual(s.status, [])
+            self.assertListEqual(os.listdir(d), ['desi_transfer_status.json.bad',
+                                                 'desi_transfer_status.json'])
+        mock_print.assert_has_calls([call('ERROR: Malformed JSON file detected: %s; saving original file as %s.' % (os.path.join(d, 'desi_transfer_status.json'),
+                                                                                                                    os.path.join(d, 'desi_transfer_status.json.bad'))),
+                                     call("DEBUG: shutil.copy2('%s', '%s')" % (os.path.join(d, 'desi_transfer_status.json'),
+                                                                               os.path.join(d, 'desi_transfer_status.json.bad'))),
+                                     call("INFO: Writing empty array to %s." % (os.path.join(d, 'desi_transfer_status.json'),))])
+
     @patch('time.time')
     def test_TransferStatus_update(self, mock_time):
         """Test status reporting mechanism updates.
@@ -98,6 +138,7 @@ class TestStatus(unittest.TestCase):
                 json.dump(st, f, indent=None, separators=(',', ':'))
             s = TransferStatus(d)
             s.update('20200703', '12345678', 'checksum')
+            self.assertTrue(os.path.exists(js + '.bak'))
             self.assertEqual(s.status[0], [20200703, 12345678, 'checksum', True, '', 1565300090000])
             s.update('20200703', '12345680', 'rsync')
             self.assertEqual(s.status[0], [20200703, 12345680, 'rsync', True, '', 1565300090000])
@@ -112,6 +153,35 @@ class TestStatus(unittest.TestCase):
             self.assertTrue(all(b))
             self.assertEqual(len(b), 4)
 
+    @patch('time.time')
+    def test_TransferStatus_update_empty(self, mock_time):
+        """Test status reporting mechanism updates (with no initial JSON file).
+        """
+        mock_time.return_value = 1565300090
+        # st = [[20200703, 12345678, 'rsync', True, '', 1565300074664],
+        #       [20200703, 12345677, 'rsync', True, '', 1565300073000]]
+        with TemporaryDirectory() as d:
+            js = os.path.join(d, 'desi_transfer_status.json')
+            # with open(js, 'w') as f:
+            #     json.dump(st, f, indent=None, separators=(',', ':'))
+            s = TransferStatus(d)
+            s.update('20200703', '12345678', 'checksum')
+            self.assertFalse(os.path.exists(js + '.bak'))
+            self.assertEqual(s.status[0], [20200703, 12345678, 'checksum', True, '', 1565300090000])
+            s.update('20200703', '12345680', 'rsync')
+            self.assertTrue(os.path.exists(js + '.bak'))
+            self.assertEqual(s.status[0], [20200703, 12345680, 'rsync', True, '', 1565300090000])
+            s.update('20200703', '12345678', 'checksum', failure=True)
+            self.assertEqual(s.status[1], [20200703, 12345678, 'checksum', False, '', 1565300090000])
+            s.update('20200703', '12345681', 'pipeline')
+            self.assertEqual(s.status[0], [20200703, 12345681, 'pipeline', True, '', 1565300090000])
+            s.update('20200703', '12345681', 'pipeline', last='arcs')
+            self.assertEqual(s.status[0], [20200703, 12345681, 'pipeline', True, 'arcs', 1565300090000])
+            s.update('20200703', 'all', 'backup')
+            b = [i[3] for i in s.status if i[2] == 'backup']
+            self.assertTrue(all(b))
+            self.assertEqual(len(b), 3)
+
     def test_TransferStatus_find(self):
         """Test status search.
         """
