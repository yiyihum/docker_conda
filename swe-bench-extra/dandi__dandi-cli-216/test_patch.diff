diff --git a/dandi/cli/tests/test_command.py b/dandi/cli/tests/test_command.py
index f16fd323..6721c0b0 100644
--- a/dandi/cli/tests/test_command.py
+++ b/dandi/cli/tests/test_command.py
@@ -1,11 +1,12 @@
+import os
+import re
 import sys
 from subprocess import Popen, PIPE
 
-from ..command import ls, validate
+from ..command import ls, validate, __all_commands__
 
 from click.testing import CliRunner
 import pytest
-import os
 
 
 @pytest.mark.parametrize("command", (ls, validate))
@@ -24,6 +25,16 @@ def test_smoke(simple2_nwb, command):
     assert r.exit_code == 0, f"Exited abnormally. out={r.stdout}"
 
 
+@pytest.mark.parametrize("command", __all_commands__)
+def test_smoke_help(command):
+    runner = CliRunner()
+    r = runner.invoke(command, ["--help"])
+    assert r.exit_code == 0, f"Exited abnormally. out={r.stdout}"
+    assert r.stdout, "There were no output whatsoever"
+
+    assert re.match("Usage: .*Options:.*--help", r.stdout, flags=re.DOTALL) is not None
+
+
 def test_no_heavy_imports():
     # Timing --version for being fast is unreliable, so we will verify that
     # no h5py or numpy (just in case) module is imported upon import of the
diff --git a/dandi/tests/test_organize.py b/dandi/tests/test_organize.py
index 19281434..e8377cb2 100644
--- a/dandi/tests/test_organize.py
+++ b/dandi/tests/test_organize.py
@@ -131,7 +131,7 @@ def test_organize_nwb_test_data(nwb_test_data, tmpdir, clirunner, mode):
     # this beast doesn't capture our logs ATM so cannot check anything there.
     # At the end we endup only with dandiset.yaml and a single file
     produced_paths = sorted(find_files(".*", paths=outdir))
-    produced_nwb_paths = sorted(find_files(".nwb$", paths=outdir))
+    produced_nwb_paths = sorted(find_files(r"\.nwb\Z", paths=outdir))
     produced_relpaths = [op.relpath(p, outdir) for p in produced_paths]
     if mode == "dry":
         assert produced_relpaths == []
diff --git a/dandi/tests/test_upload.py b/dandi/tests/test_upload.py
index addfcf6b..e7a3163e 100644
--- a/dandi/tests/test_upload.py
+++ b/dandi/tests/test_upload.py
@@ -1,3 +1,4 @@
+import os
 import pytest
 
 from .. import girder
@@ -8,7 +9,7 @@ from ..utils import yaml_load
 
 
 def test_upload(local_docker_compose_env, monkeypatch, organized_nwb_dir2):
-    nwb_files = list(organized_nwb_dir2.glob("*/*.nwb"))
+    nwb_files = list(organized_nwb_dir2.glob(f"*{os.sep}*.nwb"))
     assert len(nwb_files) == 2
     dirname1 = nwb_files[0].parent.name
     filename1 = nwb_files[0].name
@@ -43,7 +44,7 @@ def test_upload(local_docker_compose_env, monkeypatch, organized_nwb_dir2):
 def test_upload_existing_error(
     local_docker_compose_env, monkeypatch, organized_nwb_dir
 ):
-    nwb_file, = organized_nwb_dir.glob("*/*.nwb")
+    nwb_file, = organized_nwb_dir.glob(f"*{os.sep}*.nwb")
     dirname = nwb_file.parent.name
     dandi_instance_id = local_docker_compose_env["instance_id"]
     register(
@@ -69,7 +70,7 @@ def test_upload_existing_error(
 
 
 def test_upload_locks(local_docker_compose_env, mocker, monkeypatch, organized_nwb_dir):
-    nwb_file, = organized_nwb_dir.glob("*/*.nwb")
+    nwb_file, = organized_nwb_dir.glob(f"*{os.sep}*.nwb")
     dirname = nwb_file.parent.name
     dandi_instance_id = local_docker_compose_env["instance_id"]
     register(
@@ -92,7 +93,7 @@ def test_upload_locks(local_docker_compose_env, mocker, monkeypatch, organized_n
 
 
 def test_upload_unregistered(local_docker_compose_env, monkeypatch, organized_nwb_dir):
-    nwb_file, = organized_nwb_dir.glob("*/*.nwb")
+    nwb_file, = organized_nwb_dir.glob(f"*{os.sep}*.nwb")
     dirname = nwb_file.parent.name
     dandi_instance_id = local_docker_compose_env["instance_id"]
     (organized_nwb_dir / dandiset_metadata_file).write_text("identifier: '999999'\n")
