diff --git a/tests/func/test_s3.py b/tests/func/test_s3.py
--- a/tests/func/test_s3.py
+++ b/tests/func/test_s3.py
@@ -1,3 +1,6 @@
+import importlib
+import sys
+import textwrap
 from functools import wraps
 
 import boto3
@@ -130,3 +133,82 @@ def test_s3_upload_fobj(tmp_dir, dvc, s3):
         tree.upload_fobj(stream, to_info, 1)
 
     assert to_info.read_text() == "foo"
+
+
+KB = 1024
+MB = KB ** 2
+GB = KB ** 3
+
+
+def test_s3_aws_config(tmp_dir, dvc, s3, monkeypatch):
+    config_directory = tmp_dir / ".aws"
+    config_directory.mkdir()
+    (config_directory / "config").write_text(
+        textwrap.dedent(
+            """\
+    [default]
+    s3 =
+      max_concurrent_requests = 20000
+      max_queue_size = 1000
+      multipart_threshold = 1000KiB
+      multipart_chunksize = 64MB
+      use_accelerate_endpoint = true
+      addressing_style = path
+    """
+        )
+    )
+
+    if sys.platform == "win32":
+        var = "USERPROFILE"
+    else:
+        var = "HOME"
+    monkeypatch.setenv(var, str(tmp_dir))
+
+    # Fresh import to see the effects of changing HOME variable
+    s3_mod = importlib.reload(sys.modules[S3Tree.__module__])
+    tree = s3_mod.S3Tree(dvc, s3.config)
+    assert tree._transfer_config is None
+
+    with tree._get_s3() as s3:
+        s3_config = s3.meta.client.meta.config.s3
+        assert s3_config["use_accelerate_endpoint"]
+        assert s3_config["addressing_style"] == "path"
+
+    transfer_config = tree._transfer_config
+    assert transfer_config.max_io_queue_size == 1000
+    assert transfer_config.multipart_chunksize == 64 * MB
+    assert transfer_config.multipart_threshold == 1000 * KB
+    assert transfer_config.max_request_concurrency == 20000
+
+
+def test_s3_aws_config_different_profile(tmp_dir, dvc, s3, monkeypatch):
+    config_file = tmp_dir / "aws_config.ini"
+    config_file.write_text(
+        textwrap.dedent(
+            """\
+    [default]
+    extra = keys
+    s3 =
+      addressing_style = auto
+      use_accelerate_endpoint = true
+      multipart_threshold = ThisIsNotGoingToBeCasted!
+    [profile dev]
+    some_extra = keys
+    s3 =
+      addresing_style = virtual
+      multipart_threshold = 2GiB
+    """
+        )
+    )
+    monkeypatch.setenv("AWS_CONFIG_FILE", config_file)
+
+    tree = S3Tree(dvc, {**s3.config, "profile": "dev"})
+    assert tree._transfer_config is None
+
+    with tree._get_s3() as s3:
+        s3_config = s3.meta.client.meta.config.s3
+        assert s3_config["addresing_style"] == "virtual"
+        assert "use_accelerate_endpoint" not in s3_config
+
+    transfer_config = tree._transfer_config
+    assert transfer_config.multipart_threshold == 2 * GB
diff --git a/tests/unit/utils/test_conversions.py b/tests/unit/utils/test_conversions.py
new file mode 100644
--- /dev/null
+++ b/tests/unit/utils/test_conversions.py
@@ -0,0 +1,30 @@
+import pytest
+
+from dvc.utils.conversions import human_readable_to_bytes
+
+KB = 1024
+MB = KB ** 2
+GB = KB ** 3
+TB = KB ** 4
+
+
+@pytest.mark.parametrize(
+    "test_input, expected",
+    [
+        ("10", 10),
+        ("10   ", 10),
+        ("1kb", 1 * KB),
+        ("2kb", 2 * KB),
+        ("1000mib", 1000 * MB),
+        ("20gB", 20 * GB),
+        ("10Tib", 10 * TB),
+    ],
+)
+def test_conversions_human_readable_to_bytes(test_input, expected):
+    assert human_readable_to_bytes(test_input) == expected
+
+
+@pytest.mark.parametrize("invalid_input", ["foo", "10XB", "1000Pb", "fooMiB"])
+def test_conversions_human_readable_to_bytes_invalid(invalid_input):
+    with pytest.raises(ValueError):
+        human_readable_to_bytes(invalid_input)
