diff --git a/tests/test_compat.py b/tests/test_compat.py
index f0819ff..8991865 100644
--- a/tests/test_compat.py
+++ b/tests/test_compat.py
@@ -1,5 +1,6 @@
 import sys
 from dataclasses import dataclass
+from datetime import datetime
 from typing import Dict, Generic, List, NewType, Optional, Set, Tuple, TypeVar, Union
 
 import serde
@@ -67,9 +68,18 @@ def test_typename():
     class Foo(Generic[T]):
         nested: Bar[T]
 
-    assert typename(Optional) == "Optional"
     assert typename(Foo[int]) == "Foo"
     assert typename(Foo) == "Foo"
+    assert typename(List[int]) == "List[int]"
+    assert typename(Optional) == "Optional"
+    assert typename(List) == "List"
+    assert typename(List[int]) == "List[int]"
+    assert typename(Tuple) == "Tuple"
+    assert typename(Tuple[int, str]) == "Tuple[int, str]"
+    assert typename(Dict) == "Dict"
+    assert typename(Dict[str, Foo]) == "Dict[str, Foo]"
+    assert typename(Set) == "Set"
+    assert typename(Set[int]) == "Set[int]"
 
 
 def test_iter_types():
@@ -79,6 +89,17 @@ def test_iter_types():
     assert [Tuple, int, str, bool, float] == list(iter_types(Tuple[int, str, bool, float]))
     assert [PriOpt, Optional, int, Optional, str, Optional, float, Optional, bool] == list(iter_types(PriOpt))
 
+    @serde.serde
+    class Foo:
+        a: int
+        b: datetime
+        c: datetime
+        d: Optional[str] = None
+        e: Union[str, int] = 10
+        f: List[int] = serde.field(default_factory=list)
+
+    assert [Foo, int, datetime, datetime, Optional, str, Union, str, int, List, int] == list(iter_types(Foo))
+
 
 def test_iter_unions():
     assert [Union[str, int]] == list(iter_unions(Union[str, int]))
diff --git a/tests/test_custom.py b/tests/test_custom.py
index 060f046..dc75515 100644
--- a/tests/test_custom.py
+++ b/tests/test_custom.py
@@ -2,7 +2,7 @@
 Tests for custom serializer/deserializer.
 """
 from datetime import datetime
-from typing import Optional, Union
+from typing import List, Optional, Union
 
 import pytest
 
@@ -81,14 +81,15 @@ def test_custom_class_serializer():
         c: datetime
         d: Optional[str] = None
         e: Union[str, int] = 10
+        f: List[int] = field(default_factory=list)
 
     dt = datetime(2021, 1, 1, 0, 0, 0)
-    f = Foo(10, dt, dt)
+    f = Foo(10, dt, dt, f=[1, 2, 3])
 
-    assert to_json(f) == '{"a": 10, "b": "01/01/21", "c": "01/01/21", "d": null, "e": 10}'
+    assert to_json(f) == '{"a": 10, "b": "01/01/21", "c": "01/01/21", "d": null, "e": 10, "f": [1, 2, 3]}'
     assert f == from_json(Foo, to_json(f))
 
-    assert to_tuple(f) == (10, '01/01/21', '01/01/21', None, 10)
+    assert to_tuple(f) == (10, '01/01/21', '01/01/21', None, 10, [1, 2, 3])
     assert f == from_tuple(Foo, to_tuple(f))
 
     def fallback(_, __):
