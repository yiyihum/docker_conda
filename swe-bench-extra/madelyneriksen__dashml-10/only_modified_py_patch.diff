diff --git a/dashml/core.py b/dashml/core.py
index 3f44b5c..bc5a3ad 100644
--- a/dashml/core.py
+++ b/dashml/core.py
@@ -8,21 +8,17 @@ else:
     VarArg = lambda x: t.List[x]
     KwArg = lambda x: t.Dict[str, x]
 
-from lxml.etree import Element
+from lxml.etree import _Element as Element
 import lxml.html as html
 from lxml.builder import E as raw_builder
 
-import markupsafe
-
 
 __all__ = ["_", "render", "unsafe_from_string"]
 
 
 T = t.TypeVar("T")
-
-
-Child = t.Union[Element, str, None]
-Prop = t.Union[str, int, bool, None]
+Child = t.Union[Element, str, int, float, None]
+Prop = t.Union[str, int, float, bool, None]
 
 
 class Builder:
@@ -65,23 +61,18 @@ def render(ele: Element) -> str:
     Returns:
         (str) Rendered utf-8 string of the element.
     """
-    raw: bytes = html.tostring(ele)
-    return raw.decode("utf-8")
+    return html.tostring(ele).decode("utf-8")
 
 
 _ = Builder()
 
 
-@singledispatch
 def safe(var: Child) -> Child:
     """Mark a value as safe."""
-    return var
-
-
-@safe.register
-def __safe_string(var: str) -> str:
-    """Escape a string."""
-    return str(markupsafe.escape(var))  # pragma: no cover
+    if isinstance(var, Element):
+        return var
+    else:
+        return str(var)
 
 
 # Like `className` or `htmlFor` in React.
@@ -98,10 +89,19 @@ def swap_attributes(attrs: t.Dict[str, Prop]) -> None:
     class_name and html_for.
     """
     for key, value in attrs.items():
+        if isinstance(value, bool) or value is None:
+            # Convert booleans/Nonetypes into HTML5 compatible booleans.
+            if value:
+                attrs[key] = ""
+            else:
+                del attrs[key]
+                continue
         if key.startswith("data_") or key.startswith("aria_"):
-            attrs[key.replace("_", "-")] = attrs.pop(key)
+            attrs[key.replace("_", "-")] = str(attrs.pop(key))
         elif key in RESERVED_PAIRS:
-            attrs[RESERVED_PAIRS[key]] = attrs.pop(key)
+            attrs[RESERVED_PAIRS[key]] = str(attrs.pop(key))
+        else:
+            attrs[key] = str(value)
 
 
 def unsafe_from_string(unsafe_string: str) -> Element:
diff --git a/setup.py b/setup.py
index 43ca931..7b15847 100644
--- a/setup.py
+++ b/setup.py
@@ -17,7 +17,6 @@ setuptools.setup(
     packages=["dashml"],
     install_requires=[
         "lxml",
-        "markupsafe",
     ],
     classifiers=[
         "Programming Language :: Python :: 3",

