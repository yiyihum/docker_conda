diff --git a/ntab/html.py b/ntab/html.py
index 9ca4ccb..37c25a4 100644
--- a/ntab/html.py
+++ b/ntab/html.py
@@ -82,7 +82,7 @@ def _render(table, css_class="tab-table", max_rows=None):
     yield "<thead>"
     yield "<tr>"
     for name, width in zip(names, widths):
-        yield "<th>{}</th>".format(elide(name, max(width, 8)))
+        yield "<th>{}</th>".format(elide(name, max(width, 8), elide_pos=0.7))
     yield "</tr>"
     yield "</thead>"
     yield "<tbody>"
diff --git a/ntab/lib/text.py b/ntab/lib/text.py
index 8ad3e4b..0812d61 100644
--- a/ntab/lib/text.py
+++ b/ntab/lib/text.py
@@ -27,14 +27,18 @@ def pad(string, length, pad=" ", pos=1.0):
     if left > 0:
         string = pad * (left // pad_len) + pad[: left % pad_len] + string
     if right > 0:
-        string = string + pad[-(right % pad_len) :] + pad * (right // pad_len)
+        string = (
+            string 
+            + pad[pad_len - (right % pad_len) :] 
+            + pad * (right // pad_len)
+        )
     return string
 
 
 _pad = pad
 
 
-def elide(string, length, ellipsis=u"\u2026", pos=0.7):
+def elide(string, length, ellipsis=u"\u2026", pos=1.0):
     """
     Elides characters if necessary to fit `string` in `length` characters.
 
@@ -63,7 +67,7 @@ def elide(string, length, ellipsis=u"\u2026", pos=0.7):
 
 
 def palide(string, length, ellipsis=u"\u2026", pad=" ", pad_pos=1.0, 
-           elide_pos=0.7):
+           elide_pos=1.0):
     """
     A combination of `elide` and `pad`.
     """
diff --git a/ntab/tab.py b/ntab/tab.py
index 5b569b5..010dcb1 100644
--- a/ntab/tab.py
+++ b/ntab/tab.py
@@ -13,7 +13,7 @@ import numpy as np
 import six
 import sys
 
-from   . import nplib
+from   . import fmt, nplib
 from   .lib import *
 
 #-------------------------------------------------------------------------------
@@ -181,11 +181,22 @@ class Row(object):
         )
 
     
+    def __str__(self):
+        return "\n".join(fmt.format_row(self))
+
+
     @property
-    def __index__(self):
+    def __idx__(self):
         return self.__idx
 
 
+    # FIXME: Potentially sketchy.
+    @property
+    def __dict__(self):
+        return odict(
+            (n, a[self.__idx]) for n, a in six.iteritems(self.__arrs) )
+
+
 
 class RowsProxy(collections.Sequence):
     # FIXME: Allow modifying values in rows (i.e. mutable rows)?

