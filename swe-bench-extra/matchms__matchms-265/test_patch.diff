diff --git a/tests/test_add_parent_mass.py b/tests/test_add_parent_mass.py
index ca411603..3fb5d5f7 100644
--- a/tests/test_add_parent_mass.py
+++ b/tests/test_add_parent_mass.py
@@ -1,6 +1,7 @@
 import numpy
 import pytest
 from matchms import Spectrum
+from matchms.constants import PROTON_MASS
 from matchms.filtering import add_parent_mass
 
 
@@ -90,7 +91,9 @@ def test_add_parent_mass_using_adduct(adduct, expected):
     assert isinstance(spectrum.get("parent_mass"), float), "Expected parent mass to be float."
 
 
-def test_add_parent_mass_overwrite():
+@pytest.mark.parametrize("overwrite, expected", [(True, 442.992724),
+                                                 (False, 443.0)])
+def test_add_parent_mass_overwrite(overwrite, expected):
     """Test if parent mass is replaced by newly calculated value."""
     mz = numpy.array([], dtype='float')
     intensities = numpy.array([], dtype='float')
@@ -102,9 +105,9 @@ def test_add_parent_mass_overwrite():
                            intensities=intensities,
                            metadata=metadata)
 
-    spectrum = add_parent_mass(spectrum_in, overwrite_existing_entry=True)
+    spectrum = add_parent_mass(spectrum_in, overwrite_existing_entry=overwrite)
 
-    assert numpy.allclose(spectrum.get("parent_mass"), 442.992724, atol=1e-4), \
+    assert numpy.allclose(spectrum.get("parent_mass"), expected, atol=1e-4), \
         "Expected parent mass to be replaced by new value."
 
 
@@ -128,3 +131,21 @@ def test_empty_spectrum():
     spectrum = add_parent_mass(spectrum_in)
 
     assert spectrum is None, "Expected different handling of None spectrum."
+
+
+@pytest.mark.parametrize("ionmode, expected", [("positive", 444.0 - PROTON_MASS),
+                                               ("negative", 444.0 + PROTON_MASS)])
+def test_use_of_ionmode(ionmode, expected):
+    """Test when there is no charge given, than the ionmode
+    is used to derive parent mass."""
+    mz = numpy.array([], dtype='float')
+    intensities = numpy.array([], dtype='float')
+    metadata = {"precursor_mz": 444.0, "ionmode": ionmode}
+    spectrum_in = Spectrum(mz=mz,
+                           intensities=intensities,
+                           metadata=metadata)
+
+    spectrum = add_parent_mass(spectrum_in)
+
+    assert spectrum.get("parent_mass") == expected, \
+        "Expected a different parent_mass"
diff --git a/tests/test_add_retention.py b/tests/test_add_retention.py
new file mode 100644
index 00000000..452f91f8
--- /dev/null
+++ b/tests/test_add_retention.py
@@ -0,0 +1,66 @@
+import numpy
+import pytest
+from matchms import Spectrum
+from matchms.filtering import add_retention_index
+from matchms.filtering import add_retention_time
+
+
+@pytest.mark.parametrize("metadata, expected", [
+    [{"retention_time": 100.0}, 100.0],
+    [{"retention_time": "NA"}, None],
+    [{"retention_time": "100.0"}, 100.0],
+    [{"retentiontime": 200}, 200.0],
+    [{"retentiontime": -1}, None],
+    [{"retentiontime": "-1"}, None],
+    [{"rt": 200}, 200.0],
+    [{"RT": 200}, 200.0],
+    [{"RT_Query": 200}, 200.0],
+    [{"nothing": "200"}, None],
+    [{'scan_start_time': 0.629566}, 0.629566],
+    [{'scan_start_time': [0.629566]}, 0.629566],
+    [{"rt": "None", "retentiontime": 12.17}, 12.17]
+])
+def test_add_retention_time(metadata, expected):
+    spectrum_in = Spectrum(mz=numpy.array(
+        [], "float"), intensities=numpy.array([], "float"), metadata=metadata)
+
+    spectrum = add_retention_time(spectrum_in)
+    actual = spectrum.get("retention_time")
+
+    if expected is None:
+        assert actual is None
+    else:
+        assert actual == expected and isinstance(actual, float)
+
+
+@pytest.mark.parametrize("metadata, expected", [
+    [{"retention_index": 100.0}, 100.0],
+    [{"retention_index": "NA"}, None],
+    [{"retention_index": "100.0"}, 100.0],
+    [{"retentionindex": 200}, 200.0],
+    [{"retentionindex": -1}, None],
+    [{"retentionindex": "-1"}, None],
+    [{"ri": 200}, 200.0],
+    [{"RI": 200}, 200.0],
+    [{"nothing": "200"}, None]
+])
+def test_add_retention_index(metadata, expected):
+    spectrum_in = Spectrum(mz=numpy.array(
+        [], "float"), intensities=numpy.array([], "float"), metadata=metadata)
+
+    spectrum = add_retention_index(spectrum_in)
+    actual = spectrum.get("retention_index")
+
+    if expected is None:
+        assert actual is None
+    else:
+        assert actual == expected and isinstance(actual, float)
+
+
+def test_empty_spectrum():
+    spectrum_in = None
+    spectrum = add_retention_time(spectrum_in)
+    assert spectrum is None, "Expected different handling of None spectrum."
+
+    spectrum = add_retention_index(spectrum_in)
+    assert spectrum is None, "Expected different handling of None spectrum."
