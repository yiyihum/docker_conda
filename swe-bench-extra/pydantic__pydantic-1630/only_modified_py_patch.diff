diff --git a/pydantic/errors.py b/pydantic/errors.py
--- a/pydantic/errors.py
+++ b/pydantic/errors.py
@@ -1,9 +1,12 @@
 from decimal import Decimal
 from pathlib import Path
-from typing import Any, Set, Type, Union
+from typing import TYPE_CHECKING, Any, Callable, Set, Tuple, Type, Union
 
 from .typing import display_as_type
 
+if TYPE_CHECKING:
+    from .typing import DictStrAny
+
 # explicitly state exports to avoid "from .errors import *" also importing Decimal, Path etc.
 __all__ = (
     'PydanticTypeError',
@@ -91,6 +94,17 @@
 )
 
 
+def cls_kwargs(cls: Type['PydanticErrorMixin'], ctx: 'DictStrAny') -> 'PydanticErrorMixin':
+    """
+    For built-in exceptions like ValueError or TypeError, we need to implement
+    __reduce__ to override the default behaviour (instead of __getstate__/__setstate__)
+    By default pickle protocol 2 calls `cls.__new__(cls, *args)`.
+    Since we only use kwargs, we need a little constructor to change that.
+    Note: the callable can't be a lambda as pickle looks in the namespace to find it
+    """
+    return cls(**ctx)
+
+
 class PydanticErrorMixin:
     code: str
     msg_template: str
@@ -101,6 +115,9 @@ def __init__(self, **ctx: Any) -> None:
     def __str__(self) -> str:
         return self.msg_template.format(**self.__dict__)
 
+    def __reduce__(self) -> Tuple[Callable[..., 'PydanticErrorMixin'], Tuple[Type['PydanticErrorMixin'], 'DictStrAny']]:
+        return cls_kwargs, (self.__class__, self.__dict__)
+
 
 class PydanticTypeError(PydanticErrorMixin, TypeError):
     pass

