diff --git a/access_modifiers/tests/test_private.py b/access_modifiers/tests/test_private.py
index 97ac772..747d525 100644
--- a/access_modifiers/tests/test_private.py
+++ b/access_modifiers/tests/test_private.py
@@ -2,7 +2,7 @@
 
 import unittest
 
-from ..access_modifiers import AccessException, privatemethod, protectedmethod
+from ..access_modifiers import AccessException, disable, enable, privatemethod, protectedmethod
 
 
 class PrivateMethodTests(unittest.TestCase):
@@ -52,16 +52,29 @@ class PrivateMethodTests(unittest.TestCase):
             return "Subclass.private_method -> " + super().private_method()  # pragma: nocover
 
     def test_call_private_method_directly(self):
-        """Test the accessing a private method throws an exception."""
+        """Test that accessing a private method throws an exception."""
         self.assertRaises(AccessException, self.Class().private_method)
-        self.assertRaises(AccessException, self.Class.private_method, self.Class())
+
+    def test_call_private_method_directly_without_access_checks(self):
+        """Test that accessing a private method without access checks works."""
+        try:
+            disable()
+
+            class Class:
+                @privatemethod
+                def private_method(self):  # pylint: disable=no-self-use
+                    return "Class.private_method"
+
+            self.assertEqual("Class.private_method", Class().private_method())
+        finally:
+            enable()
 
     def test_call_private_method_via_public_method(self):
-        """Test the accessing a private method via a public method is allowed."""
+        """Test that accessing a private method via a public method is allowed."""
         self.assertEqual("Class.public_method -> Class.private_method", self.Class().public_method())
 
     def test_call_private_method_via_public_method_from_subclass(self):
-        """Test the accessing a private method via an overridden public method is allowed."""
+        """Test that accessing a private method via an overridden public method is allowed."""
 
         class Subclass(self.Class):
             def public_method(self):
@@ -80,7 +93,7 @@ class PrivateMethodTests(unittest.TestCase):
         self.assertRaises(AccessException, Subclass().public_method)
 
     def test_call_private_method_via_public_method_in_subclass_using_super(self):
-        """Test the accessing a private method via a public method in a subclass is not allowed,
+        """Test that accessing a private method via a public method in a subclass is not allowed,
         not even when using super()."""
 
         class Subclass(self.Class):
@@ -168,3 +181,18 @@ class StaticPrivateMethodTests(PrivateMethodTests):
         @protectedmethod
         def private_method(self):
             return "Subclass.private_method -> " + super().private_method()  # pragma: nocover
+
+    def test_call_private_method_directly_without_access_checks(self):
+        """Test that accessing a private method without access checks works."""
+        try:
+            disable()
+
+            class Class:  # pylint: disable=too-few-public-methods
+                @staticmethod
+                @privatemethod
+                def private_method():
+                    return "Class.private_method"
+
+            self.assertEqual("Class.private_method", Class().private_method())
+        finally:
+            enable()
diff --git a/access_modifiers/tests/test_protected.py b/access_modifiers/tests/test_protected.py
index 414e06d..2ec5a78 100644
--- a/access_modifiers/tests/test_protected.py
+++ b/access_modifiers/tests/test_protected.py
@@ -2,7 +2,7 @@
 
 import unittest
 
-from ..access_modifiers import AccessException, protectedmethod, privatemethod
+from ..access_modifiers import AccessException, enable, disable, protectedmethod, privatemethod
 
 
 class ProtectedMethodTest(unittest.TestCase):
@@ -21,14 +21,27 @@ class ProtectedMethodTest(unittest.TestCase):
     def test_protected_method(self):
         """Test that accessing a protected method throws an exception."""
         self.assertRaises(AccessException, self.Class().protected_method)
-        self.assertRaises(AccessException, self.Class.protected_method, self.Class())
+
+    def test_call_protected_method_directly_without_access_checks(self):
+        """Test that accessing a protected method without access checks works."""
+        try:
+            disable()
+
+            class Class:  # pylint: disable=too-few-public-methods
+                @protectedmethod
+                def protected_method(self):  # pylint: disable=no-self-use
+                    return "Class.protected_method"
+
+            self.assertEqual("Class.protected_method", Class().protected_method())
+        finally:
+            enable()
 
     def test_call_protected_method_via_public_method(self):
-        """Test the accessing a protected method via a public method is allowed."""
+        """Test that accessing a protected method via a public method is allowed."""
         self.assertEqual("Class.public_method -> Class.protected_method", self.Class().public_method())
 
     def test_call_protected_method_via_protected_method(self):
-        """Test the accessing a protected method via a another protected method is allowed."""
+        """Test that accessing a protected method via a another protected method is allowed."""
 
         class Subclass(self.Class):
             @protectedmethod
