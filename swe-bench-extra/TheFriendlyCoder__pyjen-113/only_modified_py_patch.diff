diff --git a/src/pyjen/job.py b/src/pyjen/job.py
index ee9fba0..179e689 100644
--- a/src/pyjen/job.py
+++ b/src/pyjen/job.py
@@ -2,7 +2,7 @@
 import logging
 from pyjen.build import Build
 from pyjen.utils.jobxml import JobXML
-from pyjen.utils.plugin_api import find_plugin
+from pyjen.utils.plugin_api import find_plugin, get_all_plugins
 
 
 class Job(object):
@@ -82,6 +82,18 @@ class Job(object):
 
         return plugin_class(rest_api.clone(job_url))
 
+    @classmethod
+    def get_supported_plugins(cls):
+        """Returns a list of PyJen plugins that derive from this class
+
+        :rtype: :class:`list` of :class:`class`
+        """
+        retval = list()
+        for cur_plugin in get_all_plugins():
+            if issubclass(cur_plugin, cls):
+                retval.append(cur_plugin)
+        return retval
+
     @property
     def name(self):
         """Returns the name of the job managed by this object
diff --git a/src/pyjen/utils/plugin_api.py b/src/pyjen/utils/plugin_api.py
index 0c925e2..0c26416 100644
--- a/src/pyjen/utils/plugin_api.py
+++ b/src/pyjen/utils/plugin_api.py
@@ -24,19 +24,9 @@ def find_plugin(plugin_name):
     formatted_plugin_name = plugin_name.replace("__", "_")
 
     log = logging.getLogger(__name__)
-    all_plugins = list()
-    for entry_point in iter_entry_points(group=PLUGIN_ENTRYPOINT_NAME):
-        all_plugins.append(entry_point.load())
 
     supported_plugins = list()
-    for cur_plugin in all_plugins:
-        if not hasattr(cur_plugin, PLUGIN_METHOD_NAME):
-            log.debug(
-                "Plugin %s does not expose the required %s static method.",
-                cur_plugin.__module__,
-                PLUGIN_METHOD_NAME)
-            continue
-
+    for cur_plugin in get_all_plugins():
         if getattr(cur_plugin, PLUGIN_METHOD_NAME)() == formatted_plugin_name:
             supported_plugins.append(cur_plugin)
 
@@ -50,5 +40,32 @@ def find_plugin(plugin_name):
     return supported_plugins[0]
 
 
+def get_all_plugins():
+    """Returns a list of all PyJen plugins installed on the system
+
+    :returns: list of 0 or more installed plugins
+    :rtype: :class:`list` of :class:`class`
+    """
+    log = logging.getLogger(__name__)
+    # First load all libraries that are registered with the PyJen plugin API
+    all_plugins = list()
+    for entry_point in iter_entry_points(group=PLUGIN_ENTRYPOINT_NAME):
+        all_plugins.append(entry_point.load())
+
+    # Next, filter out those that don't support the current version of our API
+    retval = list()
+    for cur_plugin in all_plugins:
+        if not hasattr(cur_plugin, PLUGIN_METHOD_NAME):
+            log.debug(
+                "Plugin %s does not expose the required %s static method.",
+                cur_plugin.__module__,
+                PLUGIN_METHOD_NAME)
+            continue
+
+        retval.append(cur_plugin)
+
+    return retval
+
+
 if __name__ == "__main__":  # pragma: no cover
     pass
diff --git a/src/pyjen/view.py b/src/pyjen/view.py
index 76ef326..2b94b3a 100644
--- a/src/pyjen/view.py
+++ b/src/pyjen/view.py
@@ -1,7 +1,7 @@
 """Primitives for interacting with Jenkins views"""
 import logging
 from pyjen.job import Job
-from pyjen.utils.plugin_api import find_plugin
+from pyjen.utils.plugin_api import find_plugin, get_all_plugins
 
 
 class View(object):
@@ -68,6 +68,18 @@ class View(object):
 
         return plugin_class(rest_api.clone(view_url))
 
+    @classmethod
+    def get_supported_plugins(cls):
+        """Returns a list of PyJen plugins that derive from this class
+
+        :rtype: :class:`list` of :class:`class`
+        """
+        retval = list()
+        for cur_plugin in get_all_plugins():
+            if issubclass(cur_plugin, cls):
+                retval.append(cur_plugin)
+        return retval
+
     @property
     def name(self):
         """Gets the display name for this view

