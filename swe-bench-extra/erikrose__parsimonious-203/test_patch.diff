diff --git a/parsimonious/tests/test_expressions.py b/parsimonious/tests/test_expressions.py
index 01b7e5d..dbf8af9 100644
--- a/parsimonious/tests/test_expressions.py
+++ b/parsimonious/tests/test_expressions.py
@@ -3,7 +3,7 @@ from unittest import TestCase
 
 from parsimonious.exceptions import ParseError, IncompleteParseError
 from parsimonious.expressions import (Literal, Regex, Sequence, OneOf, Not,
-                                      Optional, ZeroOrMore, OneOrMore, Expression)
+                                      Quantifier, Optional, ZeroOrMore, OneOrMore, Expression)
 from parsimonious.grammar import Grammar, rule_grammar
 from parsimonious.nodes import Node
 
@@ -24,7 +24,7 @@ class LengthTests(TestCase):
 
         """
         node_length = None if node is None else node.end - node.start
-        self.assertTrue(node_length == length)
+        assert node_length == length
 
     def test_regex(self):
         self.len_eq(Literal('hello').match('ehello', 1), 5)  # simple
@@ -50,6 +50,8 @@ class LengthTests(TestCase):
     def test_optional(self):
         self.len_eq(Sequence(Optional(Literal('a')), Literal('b')).match('b'), 1)  # contained expr fails
         self.len_eq(Sequence(Optional(Literal('a')), Literal('b')).match('ab'), 2)  # contained expr succeeds
+        self.len_eq(Optional(Literal('a')).match('aa'), 1)
+        self.len_eq(Optional(Literal('a')).match('bb'), 0)
 
     def test_zero_or_more(self):
         self.len_eq(ZeroOrMore(Literal('b')).match(''), 0)  # zero
@@ -64,7 +66,10 @@ class LengthTests(TestCase):
         self.len_eq(OneOrMore(Literal('b')).match('b'), 1)  # one
         self.len_eq(OneOrMore(Literal('b')).match('bbb'), 3)  # more
         self.len_eq(OneOrMore(Literal('b'), min=3).match('bbb'), 3)  # with custom min; success
+        self.len_eq(Quantifier(Literal('b'), min=3, max=5).match('bbbb'), 4)  # with custom min and max; success
+        self.len_eq(Quantifier(Literal('b'), min=3, max=5).match('bbbbbb'), 5)  # with custom min and max; success
         self.assertRaises(ParseError, OneOrMore(Literal('b'), min=3).match, 'bb')  # with custom min; failure
+        self.assertRaises(ParseError, Quantifier(Literal('b'), min=3, max=5).match, 'bb')  # with custom min and max; failure
         self.len_eq(OneOrMore(Regex('^')).match('bb'), 0)  # attempt infinite loop
 
 
@@ -267,6 +272,20 @@ class RepresentationTests(TestCase):
         self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs")* "spam"')),
                          u"foo = 'bar' ('baz' 'eggs')* 'spam'")
 
+        # Quantifiers
+        self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs"){2,4} "spam"')),
+                         "foo = 'bar' ('baz' 'eggs'){2,4} 'spam'")
+        self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs"){2,} "spam"')),
+                         "foo = 'bar' ('baz' 'eggs'){2,} 'spam'")
+        self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs"){1,} "spam"')),
+                         "foo = 'bar' ('baz' 'eggs')+ 'spam'")
+        self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs"){,4} "spam"')),
+                         "foo = 'bar' ('baz' 'eggs'){,4} 'spam'")
+        self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs"){0,1} "spam"')),
+                         "foo = 'bar' ('baz' 'eggs')? 'spam'")
+        self.assertEqual(str(Grammar('foo = "bar" ("baz" "eggs"){0,} "spam"')),
+                         "foo = 'bar' ('baz' 'eggs')* 'spam'")
+
         # OneOf
         self.assertEqual(str(Grammar('foo = "bar" ("baz" / "eggs") "spam"')),
                          u"foo = 'bar' ('baz' / 'eggs') 'spam'")
@@ -305,7 +324,7 @@ class SlotsTests(TestCase):
         But it does.
 
         """
-        class Smoo(Optional):
+        class Smoo(Quantifier):
             __slots__ = ['smoo']
 
             def __init__(self):
diff --git a/parsimonious/tests/test_grammar.py b/parsimonious/tests/test_grammar.py
index c9f0aa3..e982d61 100644
--- a/parsimonious/tests/test_grammar.py
+++ b/parsimonious/tests/test_grammar.py
@@ -3,8 +3,8 @@
 from sys import version_info
 from unittest import TestCase
 
-import sys
 import pytest
+import sys
 
 from parsimonious.exceptions import BadGrammar, UndefinedLabel, ParseError, VisitationError
 from parsimonious.expressions import Literal, Lookahead, Regex, Sequence, TokenMatcher, is_callable
@@ -286,6 +286,31 @@ class GrammarTests(TestCase):
             """)
         grammar.parse('(34)')
 
+    def test_resolve_refs_completeness(self):
+        """Smoke-test another circumstance where lazy references don't get resolved."""
+        grammar = Grammar(r"""
+            block = "{" _ item* "}" _
+
+            # An item is an element of a block.
+            item = number / word / block / paren
+
+            # Parens are for delimiting subexpressions.
+            paren = "(" _ item* ")" _
+
+            # Words are barewords, unquoted things, other than literals, that can live
+            # in lists. We may renege on some of these chars later, especially ".". We
+            # may add Unicode.
+            word = spaceless_word _
+            spaceless_word = ~r"[-a-z`~!@#$%^&*_+=|\\;<>,.?][-a-z0-9`~!@#$%^&*_+=|\\;<>,.?]*"i
+
+            number = ~r"[0-9]+" _ # There are decimals and strings and other stuff back on the "parsing" branch, once you get this working.
+
+            _ = meaninglessness*
+            meaninglessness = whitespace
+            whitespace = ~r"\s+"
+            """)
+        grammar.parse('{log (add 3 to 5)}')
+
     def test_infinite_loop(self):
         """Smoke-test a grammar that was causing infinite loops while building.
 
@@ -462,6 +487,43 @@ class GrammarTests(TestCase):
             list(grammar.keys()),
             ['r%s' % i for i in range(100)])
 
+    def test_repetitions(self):
+        grammar = Grammar(r'''
+            left_missing = "a"{,5}
+            right_missing = "a"{5,}
+            exact = "a"{5}
+            range = "a"{2,5}
+            optional = "a"?
+            plus = "a"+
+            star = "a"*
+        ''')
+        should_parse = [
+            ("left_missing", ["a" * i for i in range(6)]),
+            ("right_missing", ["a" * i for i in range(5, 8)]),
+            ("exact", ["a" * 5]),
+            ("range", ["a" * i for i in range(2, 6)]),
+            ("optional", ["", "a"]),
+            ("plus", ["a", "aa"]),
+            ("star", ["", "a", "aa"]),
+        ]
+        for rule, examples in should_parse:
+            for example in examples:
+                assert grammar[rule].parse(example)
+
+        should_not_parse = [
+            ("left_missing", ["a" * 6]),
+            ("right_missing", ["a" * i for i in range(5)]),
+            ("exact", ["a" * i for i in list(range(5)) + list(range(6, 10))]),
+            ("range", ["a" * i for i in list(range(2)) + list(range(6, 10))]),
+            ("optional", ["aa"]),
+            ("plus", [""]),
+            ("star", ["b"]),
+        ]
+        for rule, examples in should_not_parse:
+            for example in examples:
+                with pytest.raises(ParseError):
+                    grammar[rule].parse(example)
+
 
 class TokenGrammarTests(TestCase):
     """Tests for the TokenGrammar class and associated machinery"""
@@ -483,17 +545,36 @@ class TokenGrammarTests(TestCase):
         grammar = TokenGrammar("""
             foo = "token1" "token2"
             """)
-        self.assertRaises(ParseError,
-                      grammar.parse,
-                      [Token('tokenBOO'), Token('token2')])
+        with pytest.raises(ParseError) as e:
+            grammar.parse([Token('tokenBOO'), Token('token2')])
+        assert "Rule 'foo' didn't match at" in str(e.value)
 
     def test_token_repr(self):
         t = Token(u'ðŸ’£')
         self.assertTrue(isinstance(t.__repr__(), str))
-        if sys.version_info < (3, 0):
-            self.assertEqual(u'<Token "ðŸ’£">'.encode('utf-8'), t.__repr__())
-        else:
-            self.assertEqual(u'<Token "ðŸ’£">', t.__repr__())
+        self.assertEqual(u'<Token "ðŸ’£">', t.__repr__())
+
+    def test_token_star_plus_expressions(self):
+        a = Token("a")
+        b = Token("b")
+        grammar = TokenGrammar("""
+            foo = "a"*
+            bar = "a"+
+        """)
+        assert grammar["foo"].parse([]) is not None
+        assert grammar["foo"].parse([a]) is not None
+        assert grammar["foo"].parse([a, a]) is not None
+
+        with pytest.raises(ParseError):
+            grammar["foo"].parse([a, b])
+        with pytest.raises(ParseError):
+            grammar["foo"].parse([b])
+
+        assert grammar["bar"].parse([a]) is not None
+        with pytest.raises(ParseError):
+            grammar["bar"].parse([a, b])
+        with pytest.raises(ParseError):
+            grammar["bar"].parse([b])
 
 
 def test_precedence_of_string_modifiers():
