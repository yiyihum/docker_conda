diff --git a/tests/integration/test_dataset.py b/tests/integration/test_dataset.py
index bfcb88a..6b4111d 100644
--- a/tests/integration/test_dataset.py
+++ b/tests/integration/test_dataset.py
@@ -25,7 +25,7 @@ from ..fixtures import CSV
 
 class Describe_Dataset:
     @pytest.mark.parametrize(
-        "nan_ratio, n_columns, expected_many_nan_columns",
+        "nan_ratio, n_columns, expected_nan_columns",
         [
             (0.8, 2, {"nan_0", "nan_1"}),
             (0.8, 1, {"nan_0"}),
@@ -46,17 +46,15 @@ class Describe_Dataset:
             (1.0, 2, {"nan_0", "nan_1"}),
         ],
     )
-    def test_many_nan_columns(
-        self, request, nan_ratio, n_columns, expected_many_nan_columns
-    ):
+    def test_nan_columns(self, request, nan_ratio, n_columns, expected_nan_columns):
         df = DataFrameMock.df_many_nans(nan_ratio, n_columns)
-        dataset = Dataset(df_object=df, nan_percentage_threshold=nan_ratio - 0.01)
+        dataset = Dataset(df_object=df)
 
-        many_nan_columns = dataset.many_nan_columns
+        nan_columns = dataset.nan_columns(nan_ratio - 0.01)
 
-        assert len(many_nan_columns) == len(expected_many_nan_columns)
-        assert isinstance(many_nan_columns, set)
-        assert many_nan_columns == expected_many_nan_columns
+        assert len(nan_columns) == len(expected_nan_columns)
+        assert isinstance(nan_columns, set)
+        assert nan_columns == expected_nan_columns
 
     @pytest.mark.parametrize(
         "n_columns, expected_constant_columns",
@@ -318,24 +316,6 @@ class Describe_Dataset:
         assert isinstance(med_exam_col_list, set)
         assert med_exam_col_list == expected_med_exam_col_list
 
-    @pytest.mark.parametrize(
-        "nan_threshold, expected_least_nan_cols",
-        [
-            (10, {"0nan_col"}),
-            (101, {"0nan_col", "50nan_col"}),
-            (199, {"0nan_col", "50nan_col"}),
-            (200, {"0nan_col", "50nan_col", "99nan_col"}),
-        ],
-    )
-    def test_least_nan_cols(self, request, nan_threshold, expected_least_nan_cols):
-        df_multi_type = DataFrameMock.df_multi_nan_ratio(sample_size=200)
-        dataset = Dataset(df_object=df_multi_type)
-
-        least_nan_cols = dataset.least_nan_cols(nan_threshold)
-
-        assert isinstance(least_nan_cols, set)
-        assert least_nan_cols == expected_least_nan_cols
-
     @pytest.mark.parametrize(
         "duplicated_cols_count, expected_contains_dupl_cols_bool",
         [(0, False), (4, True), (2, True)],
@@ -778,6 +758,23 @@ class Describe_Dataset:
         assert type(columns_name)
         assert columns_name == expected_columns_name
 
+    def test_str(self):
+        df = DataFrameMock.df_multi_type(10)
+        dataset = Dataset(df_object=df)
+        expected_str = (
+            "Columns with:\n\t1.\tMixed types: "
+            "\t\t1\n\t2.\tNumerical types (float/int): \t6\n\t3.\tString types: "
+            "\t\t2\n\t4.\tBool types: \t\t1\n\t5.\tOther types: \t\t1\nAmong these "
+            "categories:\n\t1.\tString categorical columns: 1\n\t2.\tNumeric categorical"
+            " columns: 2\n\t3.\tMedical Exam columns (numerical, no metadata): 6\n\t4."
+            "\tOne repeated value: 1\nColumns with many NaN: 0"
+        )
+
+        str_ = str(dataset)
+
+        assert type(str_) == str
+        assert expected_str == str_
+
 
 class Describe_FeatureOperation:
     @pytest.mark.parametrize(
diff --git a/tests/unit/test_dataset.py b/tests/unit/test_dataset.py
index 5b175db..246d51e 100644
--- a/tests/unit/test_dataset.py
+++ b/tests/unit/test_dataset.py
@@ -3,7 +3,7 @@ import pytest
 from trousse.dataset import Dataset, _ColumnListByType
 
 from ..dataset_util import DataFrameMock
-from ..unitutil import initializer_mock, property_mock
+from ..unitutil import initializer_mock, method_mock, property_mock
 
 
 class DescribeDataset:
@@ -177,3 +177,66 @@ class DescribeDataset:
         assert type(other_type_columns_) == set
         assert other_type_columns_ == {"other0", "other1"}
         _columns_type.assert_called_once()
+
+    def it_knows_its_str(self, request):
+        column_list_by_type = _ColumnListByType(
+            mixed_type_cols={"mixed0", "mixed1"},
+            constant_cols={"constant"},
+            numerical_cols={"numerical0", "numerical1"},
+            med_exam_col_list={"med0", "med1", "med2"},
+            str_cols={"str0", "str1"},
+            str_categorical_cols={"strcat0", "strcat1"},
+            num_categorical_cols={"numcat0", "numcat1"},
+            bool_cols={"bool0", "bool1"},
+            other_cols={"other0", "other1"},
+        )
+        expected_str = (
+            "Columns with:\n\t1.\tMixed types: \t\t2\n\t2.\tNumerical types"
+            " (float/int): \t2\n\t3.\tString types: \t\t2\n\t4.\tBool types: \t\t2\n\t5."
+            "\tOther types: \t\t2\nAmong these categories:\n\t1.\tString categorical "
+            "columns: 2\n\t2.\tNumeric categorical columns: 2\n\t3.\tMedical Exam columns "
+            "(numerical, no metadata): 3\n\t4.\tOne repeated value: 1"
+        )
+
+        str_ = str(column_list_by_type)
+
+        assert type(str_) == str
+        assert str_ == expected_str
+
+
+class DescribeColumnListByType:
+    def it_knows_its_str(self, request):
+        column_list_by_type_str = (
+            "Columns with:\n\t1.\tMixed types: \t\t2\n\t2.\tNumerical types"
+            " (float/int): \t2\n\t3.\tString types: \t\t2\n\t4.\tBool types: \t\t2\n\t5."
+            "\tOther types: \t\t2\nAmong these categories:\n\t1.\tString categorical "
+            "columns: 2\n\t2.\tNumeric categorical columns: 2\n\t3.\tMedical Exam columns "
+            "(numerical, no metadata): 3\n\t4.\tOne repeated value: 1"
+        )
+        _column_list_by_type_str = method_mock(request, _ColumnListByType, "__str__")
+        _column_list_by_type_str.return_value = column_list_by_type_str
+        _column_list_by_type = property_mock(request, Dataset, "_columns_type")
+        column_list_by_type = _ColumnListByType(
+            mixed_type_cols={"mixed0", "mixed1"},
+            constant_cols={"constant"},
+            numerical_cols={"numerical0", "numerical1"},
+            med_exam_col_list={"med0", "med1", "med2"},
+            str_cols={"str0", "str1"},
+            str_categorical_cols={"strcat0", "strcat1"},
+            num_categorical_cols={"numcat0", "numcat1"},
+            bool_cols={"bool0", "bool1"},
+            other_cols={"other0", "other1"},
+        )
+        _column_list_by_type.return_value = column_list_by_type
+        _nan_columns = method_mock(request, Dataset, "nan_columns")
+        _nan_columns.return_value = {"nan0", "nan1"}
+        initializer_mock(request, Dataset)
+        dataset = Dataset(data_file="fake/path")
+        expected_str = column_list_by_type_str + "\nColumns with many NaN: 2"
+
+        str_ = str(dataset)
+
+        assert type(str_) == str
+        assert str_ == expected_str
+        _column_list_by_type.assert_called_once
+        _nan_columns.assert_called_once_with(dataset, 0.999)
