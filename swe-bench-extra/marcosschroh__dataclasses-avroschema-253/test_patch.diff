diff --git a/tests/schemas/test_fastavro_paser_schema.py b/tests/schemas/test_fastavro_paser_schema.py
index 81ae619..5c09b80 100644
--- a/tests/schemas/test_fastavro_paser_schema.py
+++ b/tests/schemas/test_fastavro_paser_schema.py
@@ -152,6 +152,19 @@ def test_one_to_one_repeated_schema():
     assert Trip.fake()
 
 
+def test_repeated_schema_without_namespace():
+    class Bus(AvroModel):
+        "A Bus"
+        engine_name: str
+
+    class UnionSchema(AvroModel):
+        "Some Unions"
+        bus_one: Bus
+        bus_two: Bus
+
+    parse_schema(UnionSchema.avro_schema_to_python())
+
+
 def test_one_to_one_repeated_schema_in_array():
     """
     Test relationship one-to-one with more than once schema
diff --git a/tests/schemas/test_schema.py b/tests/schemas/test_schema.py
index bde9754..9582de6 100644
--- a/tests/schemas/test_schema.py
+++ b/tests/schemas/test_schema.py
@@ -5,7 +5,7 @@ from dataclasses import dataclass
 import pytest
 from fastavro.validation import ValidationError
 
-from dataclasses_avroschema import AvroModel, exceptions
+from dataclasses_avroschema import AvroModel
 from dataclasses_avroschema.schema_definition import BaseSchemaDefinition
 from dataclasses_avroschema.types import JsonDict
 
@@ -123,20 +123,6 @@ def test_not_implementd_methods():
     assert msg == str(excinfo.value)
 
 
-def test_namespace_required():
-    class Bus(AvroModel):
-        "A Bus"
-        engine_name: str
-
-    class UnionSchema(AvroModel):
-        "Some Unions"
-        bus_one: Bus
-        bus_two: Bus
-
-    with pytest.raises(exceptions.NameSpaceRequiredException):
-        assert UnionSchema.avro_schema()
-
-
 def test_inherit_dataclass_missing_docs():
     @dataclass
     class BaseUser:
diff --git a/tests/schemas/test_schema_with_complex_types.py b/tests/schemas/test_schema_with_complex_types.py
index 1fa4f1b..d8d6755 100644
--- a/tests/schemas/test_schema_with_complex_types.py
+++ b/tests/schemas/test_schema_with_complex_types.py
@@ -9,7 +9,7 @@ import uuid
 import pytest
 from fastavro import parse_schema
 
-from dataclasses_avroschema import AvroModel, exceptions
+from dataclasses_avroschema import AvroModel
 from dataclasses_avroschema.types import JsonDict
 
 PY_VER = sys.version_info
@@ -155,7 +155,7 @@ def test_schema_with_new_unions_defaults_syntax(default_union_schema: JsonDict)
     assert User.avro_schema() == json.dumps(default_union_schema)
 
 
-def test_enum_namespace_required() -> None:
+def test_repeated_enum_without_namespace() -> None:
     class UserType(enum.Enum):
         BASIC = "Basic"
         PREMIUM = "Premium"
@@ -165,8 +165,7 @@ def test_enum_namespace_required() -> None:
         user_type: UserType
         user_type_optional: typing.Optional[UserType]
 
-    with pytest.raises(exceptions.NameSpaceRequiredException):
-        User.avro_schema()
+    parse_schema(User.avro_schema_to_python())
 
 
 # This is to explicitly test the behavior for a typing.Optional[T] field with no default
