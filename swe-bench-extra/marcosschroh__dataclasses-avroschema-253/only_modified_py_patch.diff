diff --git a/dataclasses_avroschema/exceptions.py b/dataclasses_avroschema/exceptions.py
index f694907..079718a 100644
--- a/dataclasses_avroschema/exceptions.py
+++ b/dataclasses_avroschema/exceptions.py
@@ -1,22 +1,6 @@
 import typing
 
 
-class NameSpaceRequiredException(Exception):
-    def __init__(self, field_type: typing.Any, field_name: str) -> None:
-        self.field_type = field_type
-        self.field_name = field_name
-
-    def __repr__(self) -> str:
-        class_name = self.__class__.__name__
-        return f"{class_name} {self.field_name},{self.field_type}"
-
-    def __str__(self) -> str:
-        return (  # pragma: no cover
-            f"Required namespace in Meta for type {self.field_type}. "
-            f"The field {self.field_name} is using an exiting type"
-        )
-
-
 class InvalidMap(Exception):
     def __init__(self, field_name: str, key_type: typing.Any) -> None:
         self.field_name = field_name
diff --git a/dataclasses_avroschema/fields.py b/dataclasses_avroschema/fields.py
index 74a22a9..fb4d62a 100644
--- a/dataclasses_avroschema/fields.py
+++ b/dataclasses_avroschema/fields.py
@@ -20,7 +20,7 @@ from pytz import utc
 from dataclasses_avroschema import schema_generator, serialization, types, utils
 
 from . import field_utils
-from .exceptions import InvalidMap, NameSpaceRequiredException
+from .exceptions import InvalidMap
 from .types import JsonDict
 
 PY_VER = sys.version_info
@@ -483,8 +483,9 @@ class EnumField(BaseField):
         else:
             namespace = metadata.get("namespace")
             if namespace is None:
-                raise NameSpaceRequiredException(field_type=self.type, field_name=name)
-            return f"{namespace}.{name}"
+                return name
+            else:
+                return f"{namespace}.{name}"
 
     def get_default_value(self) -> typing.Union[str, dataclasses._MISSING_TYPE, None]:
         if self.default == types.MissingSentinel:
@@ -770,8 +771,9 @@ class RecordField(BaseField):
             record_type["name"] = name
         else:
             if metadata.namespace is None:
-                raise NameSpaceRequiredException(field_type=self.type, field_name=self.name)
-            record_type = f"{metadata.namespace}.{name}"
+                record_type = name
+            else:
+                record_type = f"{metadata.namespace}.{name}"
 
         if self.default is None:
             return [field_utils.NULL, record_type]
