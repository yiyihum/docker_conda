diff --git a/tests/unit_tests/repobee_plug/test_pluginmeta.py b/tests/unit_tests/repobee_plug/test_pluginmeta.py
index b997f00..e2e987a 100644
--- a/tests/unit_tests/repobee_plug/test_pluginmeta.py
+++ b/tests/unit_tests/repobee_plug/test_pluginmeta.py
@@ -159,7 +159,7 @@ class TestDeclarativeExtensionCommand:
         class ExtCommand(plug.Plugin, plug.cli.Command):
             __settings__ = plug.cli.command_settings(
                 category=expected_category,
-                action_name=expected_name,
+                action=expected_name,
                 help=expected_help,
                 description=expected_description,
                 base_parsers=expected_base_parsers,
@@ -353,6 +353,102 @@ class TestDeclarativeExtensionCommand:
 
         assert parsed_args.old == old
 
+    def test_create_new_category(self):
+        """Test that command can be added to a new category."""
+
+        class Greetings(plug.cli.Category):
+            hello: plug.cli.Action
+
+        class Hello(plug.Plugin, plug.cli.Command):
+            __settings__ = plug.cli.command_settings(action=Greetings().hello)
+            name = plug.cli.positional()
+            age = plug.cli.positional(converter=int)
+
+            def command(self, args, api):
+                return plug.Result(
+                    name=self.plugin_name,
+                    msg="Nice!",
+                    status=plug.Status.SUCCESS,
+                    data={"name": args.name, "age": args.age},
+                )
+
+        name = "Bob"
+        age = 24
+        results_mapping = repobee.run(
+            f"greetings hello {name} {age}".split(), plugins=[Hello]
+        )
+        _, results = list(results_mapping.items())[0]
+        result, *_ = results
+
+        assert result.data["name"] == name
+        assert result.data["age"] == age
+
+    def test_add_two_actions_to_new_category(self):
+        """Test that it's possible to add multiple actions to a custom
+        category.
+        """
+
+        class Greetings(plug.cli.Category):
+            hello: plug.cli.Action
+            bye: plug.cli.Action
+
+        category = Greetings()
+
+        class Hello(plug.Plugin, plug.cli.Command):
+            __settings__ = plug.cli.command_settings(action=category.hello)
+            name = plug.cli.positional()
+
+            def command(self, args, api):
+                return plug.Result(
+                    name=self.plugin_name,
+                    msg=f"Hello {args.name}",
+                    status=plug.Status.SUCCESS,
+                )
+
+        class Bye(plug.Plugin, plug.cli.Command):
+            __settings__ = plug.cli.command_settings(action=category.bye)
+            name = plug.cli.positional()
+
+            def command(self, args, api):
+                return plug.Result(
+                    name=self.plugin_name,
+                    msg=f"Bye {args.name}",
+                    status=plug.Status.SUCCESS,
+                )
+
+        name = "Alice"
+        hello_results = repobee.run(
+            f"greetings hello {name}".split(), plugins=[Hello, Bye]
+        )
+        bye_results = repobee.run(
+            f"greetings bye {name}".split(), plugins=[Hello, Bye]
+        )
+
+        assert hello_results[category.hello][0].msg == f"Hello {name}"
+        assert bye_results[category.bye][0].msg == f"Bye {name}"
+
+    def test_raises_when_both_action_and_category_given(self):
+        """It is not allowed to give an Action object to the action argument,
+        and at the same time give a Category, as the Action object defines
+        both.
+        """
+        category = plug.cli.category("cat", action_names=["greetings"])
+
+        with pytest.raises(TypeError) as exc_info:
+
+            class Greetings(plug.Plugin, plug.cli.Command):
+                __settings__ = plug.cli.command_settings(
+                    action=category.greetings, category=category
+                )
+
+                def command(self, args, api):
+                    pass
+
+        assert (
+            "argument 'category' not allowed when argument "
+            "'action' is an Action object"
+        ) in str(exc_info.value)
+
 
 class TestDeclarativeCommandExtension:
     """Test creating command extensions to existing commands."""
