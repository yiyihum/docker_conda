diff --git a/laserchicken/feature_extractor/pulse_penetration_feature_extractor.py b/laserchicken/feature_extractor/pulse_penetration_feature_extractor.py
index f32c94a..65b7abb 100644
--- a/laserchicken/feature_extractor/pulse_penetration_feature_extractor.py
+++ b/laserchicken/feature_extractor/pulse_penetration_feature_extractor.py
@@ -13,6 +13,10 @@ from laserchicken.keys import point
 GROUND_TAGS = [2]
 
 
+def _is_ground(i, point_cloud):
+    return point_cloud[point]['raw_classification']["data"][i] in GROUND_TAGS
+
+
 class PulsePenetrationFeatureExtractor(AbstractFeatureExtractor):
     """Feature extractor for the point density."""
 
@@ -57,14 +61,13 @@ class PulsePenetrationFeatureExtractor(AbstractFeatureExtractor):
                 'Missing raw_classification attribute which is necessary for calculating pulse_penetratio and '
                 'density_absolute_mean features.')
 
-        class_neighbors = [point_cloud[point]['raw_classification']["data"][n] for n in neighborhood]
-
-        ground_indices = self._get_ground_indices(class_neighbors, GROUND_TAGS)
-
+        ground_indices = [i for i in neighborhood if _is_ground(i, point_cloud)]
         pulse_penetration_ratio = self._get_pulse_penetration_ratio(
-            ground_indices, class_neighbors)
+            ground_indices, len(neighborhood))
+
+        non_ground_indices = [i for i in neighborhood if not _is_ground(i, point_cloud)]
         density_absolute_mean = self._get_density_absolute_mean(
-            ground_indices, point_cloud)
+            non_ground_indices, point_cloud)
 
         return pulse_penetration_ratio, density_absolute_mean
 
@@ -77,20 +80,20 @@ class PulsePenetrationFeatureExtractor(AbstractFeatureExtractor):
         return index_grd
 
     @staticmethod
-    def _get_pulse_penetration_ratio(ground_indices, class_neighbors):
-        n_total = np.max((len(class_neighbors), 1))
+    def _get_pulse_penetration_ratio(ground_indices, n_total_points):
+        n_total = max(n_total_points, 1)
         n_ground = len(ground_indices)
         return float(n_ground) / n_total
 
     @staticmethod
-    def _get_density_absolute_mean(ground_indices, source_point_cloud):
-        n_ground = len(ground_indices)
-        z_ground = source_point_cloud[point]['z']["data"][ground_indices]
-        if n_ground == 0:
+    def _get_density_absolute_mean(non_ground_indices, source_point_cloud):
+        n_non_ground = len(non_ground_indices)
+        z_non_ground = source_point_cloud[point]['z']["data"][non_ground_indices]
+        if n_non_ground == 0:
             density_absolute_mean = 0.
         else:
             density_absolute_mean = float(
-                len(z_ground[z_ground > np.mean(z_ground)])) / n_ground * 100.
+                len(z_non_ground[z_non_ground > np.mean(z_non_ground)])) / n_non_ground * 100.
         return density_absolute_mean
 
     def get_params(self):

