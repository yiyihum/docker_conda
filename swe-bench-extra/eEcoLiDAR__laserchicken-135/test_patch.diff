diff --git a/laserchicken/feature_extractor/test_pulse_penetration_extractor.py b/laserchicken/feature_extractor/test_pulse_penetration_extractor.py
index bf88823..ff37642 100644
--- a/laserchicken/feature_extractor/test_pulse_penetration_extractor.py
+++ b/laserchicken/feature_extractor/test_pulse_penetration_extractor.py
@@ -7,6 +7,8 @@ import numpy as np
 from laserchicken import keys, read_las, utils
 from laserchicken.compute_neighbors import compute_neighborhoods
 from laserchicken.feature_extractor.pulse_penetration_feature_extractor import PulsePenetrationFeatureExtractor
+from laserchicken.keys import point
+from laserchicken.test_tools import create_point_cloud
 from laserchicken.volume_specification import InfiniteCylinder
 
 
@@ -16,10 +18,9 @@ class TestPulsePenetrationFeatureExtractorArtificialData(unittest.TestCase):
     def test_pulse(self):
         """Pulse extractor on artificial data should yield expected feature values."""
         extractor = PulsePenetrationFeatureExtractor()
-        pp_ratio, density_absolute_mean = extractor.extract(
+        pp_ratio, _ = extractor.extract(
             self.point_cloud, self.neighborhood, None, None, None)
         self.assertEqual(pp_ratio, self.expected_pp_ratio)
-        self.assertEqual(density_absolute_mean, 50.)
 
     def _set_plane_data(self):
         """Create two planes of ground point at z = +- 0.1."""
@@ -70,6 +71,23 @@ class TestPulsePenetrationFeatureExtractorArtificialData(unittest.TestCase):
         self.expected_pp_ratio = float(self.points_per_plane) / n_points
 
 
+class TestDensityAbsoluteMeanFeatureExtractorArtificialData(unittest.TestCase):
+    def test_simle_case_correct(self):
+        """Check that one out of 4 points above mean of only vegetation points yields a value of 25"""
+        ground = 2  # Ground tag
+        veg = 4  # Medium vegetation tag
+        x = y = z = np.array([10, 10, 10, 1, 1, 1, 2])
+        point_cloud = create_point_cloud(x, y, z)
+        point_cloud[point]['raw_classification'] = {'data': np.array([ground, ground, ground, veg, veg, veg, veg]),
+                                                    'type': 'double'}
+        neighborhood = list(range(len(x)))
+
+        extractor = PulsePenetrationFeatureExtractor()
+        _, density_absolute_mean = extractor.extract(point_cloud, neighborhood, None, None, None)
+
+        self.assertAlmostEqual(density_absolute_mean, 25)
+
+
 class TestPulsePenetratioFeatureExtractorRealData(unittest.TestCase):
     """Test the pulse extractor on real data and make sure it doesn't crash."""
     _test_file_name = 'AHN3.las'
