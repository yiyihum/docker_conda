diff --git a/CHANGES.rst b/CHANGES.rst
index 971d377..a0a7d59 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,19 @@
+2.0 (unreleased)
+----------------
+
+- Breaking change: inputs starting with ``"http://"`` or ``"https://"`` like
+  ``PyQuery("http://example.com")`` will no longer fetch the contents of the URL.
+  Users desiring the old behavior should switch to ``PyQuery(url="http://example.com")``.
+
 1.4.4 (unreleased)
 ------------------
 
 - Add nextUntil method
 
+- ``.remove()`` no longer inserts a space in place of the removed element
+
+- Fix escaping of top-level element text in ``.html()`` output
+
 
 1.4.3 (2020-11-21)
 ------------------
diff --git a/docs/scrap.rst b/docs/scrap.rst
index 86b0b6d..6a469d6 100644
--- a/docs/scrap.rst
+++ b/docs/scrap.rst
@@ -7,17 +7,17 @@ Scraping
 
 PyQuery is able to load an html document from a url::
 
-  >>> pq(your_url)
+  >>> pq(url=your_url)
   [<html>]
 
 By default it uses python's urllib.
 
 If `requests`_ is installed then it will use it. This allow you to use most of `requests`_ parameters::
 
-  >>> pq(your_url, headers={'user-agent': 'pyquery'})
+  >>> pq(url=your_url, headers={'user-agent': 'pyquery'})
   [<html>]
 
-  >>> pq(your_url, {'q': 'foo'}, method='post', verify=True)
+  >>> pq(url=your_url, data={'q': 'foo'}, method='post', verify=True)
   [<html>]
 
 
diff --git a/pyquery/pyquery.py b/pyquery/pyquery.py
index e549f0e..13afbff 100644
--- a/pyquery/pyquery.py
+++ b/pyquery/pyquery.py
@@ -8,6 +8,7 @@ from urllib.parse import urljoin
 from .openers import url_opener
 from .text import extract_text
 from copy import deepcopy
+from html import escape
 from lxml import etree
 import lxml.html
 import inspect
@@ -149,14 +150,6 @@ class PyQuery(list):
         self._base_url = None
         self.parser = kwargs.pop('parser', None)
 
-        if (len(args) >= 1 and
-                isinstance(args[0], str) and
-                args[0].split('://', 1)[0] in ('http', 'https')):
-            kwargs['url'] = args[0]
-            if len(args) >= 2:
-                kwargs['data'] = args[1]
-            args = []
-
         if 'parent' in kwargs:
             self._parent = kwargs.pop('parent')
         else:
@@ -1085,9 +1078,9 @@ class PyQuery(list):
                 return None
             tag = self[0]
             children = tag.getchildren()
+            html = escape(tag.text or '', quote=False)
             if not children:
-                return tag.text or ''
-            html = tag.text or ''
+                return html
             if 'encoding' not in kwargs:
                 kwargs['encoding'] = str
             html += u''.join([etree.tostring(e, **kwargs)
@@ -1456,7 +1449,7 @@ class PyQuery(list):
              >>> d('strong').remove()
              [<strong>]
              >>> print(d)
-             <div>Maybe <em>she</em> does   know</div>
+             <div>Maybe <em>she</em> does  know</div>
         """
         if expr is no_default:
             for tag in self:
@@ -1467,11 +1460,11 @@ class PyQuery(list):
                         if prev is None:
                             if not parent.text:
                                 parent.text = ''
-                            parent.text += ' ' + tag.tail
+                            parent.text += tag.tail
                         else:
                             if not prev.tail:
                                 prev.tail = ''
-                            prev.tail += ' ' + tag.tail
+                            prev.tail += tag.tail
                     parent.remove(tag)
         else:
             results = self._copy(expr, self)
