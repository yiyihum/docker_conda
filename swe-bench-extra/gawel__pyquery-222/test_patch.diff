diff --git a/tests/test_pyquery.py b/tests/test_pyquery.py
index d82a556..1ab40e1 100644
--- a/tests/test_pyquery.py
+++ b/tests/test_pyquery.py
@@ -491,9 +491,9 @@ Bacon</textarea>
         d = pq(self.html)
         d('img').remove()
         val = d('a:first').html()
-        assert val == 'Test My link text', repr(val)
+        assert val == 'TestMy link text', repr(val)
         val = d('a:last').html()
-        assert val == ' My link text 2', repr(val)
+        assert val == 'My link text 2', repr(val)
 
     def test_class(self):
         d = pq('<div></div>')
@@ -534,9 +534,10 @@ Bacon</textarea>
         self.assertEqual(d('#textarea-multi').val(), multi_expected)
         self.assertEqual(d('#textarea-multi').text(), multi_expected)
         multi_new = '''Bacon\n<b>Eggs</b>\nSpam'''
+        multi_new_expected = '''Bacon\n&lt;b&gt;Eggs&lt;/b&gt;\nSpam'''
         d('#textarea-multi').val(multi_new)
-        self.assertEqual(d('#textarea-multi').val(), multi_new)
-        self.assertEqual(d('#textarea-multi').text(), multi_new)
+        self.assertEqual(d('#textarea-multi').val(), multi_new_expected)
+        self.assertEqual(d('#textarea-multi').text(), multi_new_expected)
 
     def test_val_for_select(self):
         d = pq(self.html4)
@@ -622,6 +623,13 @@ Bacon</textarea>
         self.assertEqual(new_html, expected)
         self.assertIn(replacement, new_html)
 
+    def test_html_escape(self):
+        inner_html = 'encoded &lt;script&gt; tag with "quotes".' \
+                     '<span>nested &lt;tag&gt;</span>'
+        html = '<div>' + inner_html + '</div>'
+        d = pq(html)
+        self.assertEqual(d.html(), inner_html)
+
 
 class TestAjax(TestCase):
 
@@ -894,14 +902,14 @@ class TestWebScrapping(TestCase):
         self.application_url = self.s.application_url.rstrip('/')
 
     def test_get(self):
-        d = pq(self.application_url, {'q': 'foo'},
+        d = pq(url=self.application_url, data={'q': 'foo'},
                method='get')
         print(d)
         self.assertIn('REQUEST_METHOD: GET', d('p').text())
         self.assertIn('q=foo', d('p').text())
 
     def test_post(self):
-        d = pq(self.application_url, {'q': 'foo'},
+        d = pq(url=self.application_url, data={'q': 'foo'},
                method='post')
         self.assertIn('REQUEST_METHOD: POST', d('p').text())
         self.assertIn('q=foo', d('p').text())
@@ -911,7 +919,7 @@ class TestWebScrapping(TestCase):
             import requests
             session = requests.Session()
             session.headers.update({'X-FOO': 'bar'})
-            d = pq(self.application_url, {'q': 'foo'},
+            d = pq(url=self.application_url, data={'q': 'foo'},
                    method='get', session=session)
             self.assertIn('HTTP_X_FOO: bar', d('p').text())
         else:
@@ -924,7 +932,7 @@ class TestWebScrapping(TestCase):
 class TestWebScrappingEncoding(TestCase):
 
     def test_get(self):
-        d = pq(u'http://ru.wikipedia.org/wiki/Заглавная_страница',
+        d = pq(url=u'http://ru.wikipedia.org/wiki/Заглавная_страница',
                method='get')
         print(d)
         self.assertEqual(d('#pt-login').text(), u'Войти')
@@ -942,9 +950,9 @@ class TestWebScrappingTimeouts(TestCase):
         self.application_url = self.s.application_url.rstrip('/')
 
     def test_get(self):
-        pq(self.application_url)
+        pq(url=self.application_url)
         with self.assertRaises(Exception):
-            pq(self.application_url, timeout=1)
+            pq(url=self.application_url, timeout=1)
 
     def tearDown(self):
         self.s.shutdown()
