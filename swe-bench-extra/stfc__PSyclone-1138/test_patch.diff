diff --git a/src/psyclone/tests/psyir/backend/fortran_test.py b/src/psyclone/tests/psyir/backend/fortran_test.py
index 138950100..be4738927 100644
--- a/src/psyclone/tests/psyir/backend/fortran_test.py
+++ b/src/psyclone/tests/psyir/backend/fortran_test.py
@@ -945,6 +945,34 @@ def test_fw_routine(fort_writer, monkeypatch, tmpdir):
         _ = fort_writer(schedule)
     assert "Expected node name to have a value." in str(excinfo.value)
 
+
+def test_fw_routine_program(parser, fort_writer, tmpdir):
+    '''Check the FortranWriter class outputs correct code when a routine node
+    is found with is_program set to True i.e. it should be output as a program.
+
+    '''
+    # Generate PSyIR from Fortran code via fparser2 ast
+    code = (
+        "program test\n"
+        "  real :: a\n"
+        "  a = 0.0\n"
+        "end program test")
+    reader = FortranStringReader(code)
+    fp2_ast = parser(reader)
+    fp2_reader = Fparser2Reader()
+    psyir = fp2_reader.generate_psyir(fp2_ast)
+
+    # Generate Fortran from PSyIR
+    result = fort_writer(psyir)
+
+    assert(
+        "program test\n"
+        "  real :: a\n\n"
+        "  a = 0.0\n\n"
+        "end program test\n" in result)
+    assert Compile(tmpdir).string_compiles(result)
+
+
 # assignment and binaryoperation (not intrinsics) are already checked
 # within previous tests
 
diff --git a/src/psyclone/tests/psyir/frontend/fparser2_generate_psyir_test.py b/src/psyclone/tests/psyir/frontend/fparser2_generate_psyir_test.py
index 9fd84b4d2..549f9fcaf 100644
--- a/src/psyclone/tests/psyir/frontend/fparser2_generate_psyir_test.py
+++ b/src/psyclone/tests/psyir/frontend/fparser2_generate_psyir_test.py
@@ -83,10 +83,10 @@ PROGRAM_IN = (
     "a=0.0\n"
     "end program main\n")
 PROGRAM_OUT = (
-    "PROGRAM main\n"
-    "  REAL :: a\n"
-    "  a = 0.0\n"
-    "END PROGRAM main")
+    "program main\n"
+    "  real :: a\n\n"
+    "  a = 0.0\n\n"
+    "end program main\n")
 FUNCTION_IN = (
     "integer function tmp(a)\n"
     "real :: a\n"
@@ -102,7 +102,7 @@ FUNCTION_OUT = (
 @pytest.mark.parametrize("code,expected,node_class",
                          [(MODULE_IN, MODULE_OUT, Container),
                           (SUB_IN, SUB_OUT, Routine),
-                          (PROGRAM_IN, PROGRAM_OUT, CodeBlock),
+                          (PROGRAM_IN, PROGRAM_OUT, Routine),
                           (FUNCTION_IN, FUNCTION_OUT, CodeBlock)])
 def test_generate_psyir(parser, code, expected, node_class):
     '''Test that generate_psyir generates PSyIR from an fparser2 parse
diff --git a/src/psyclone/tests/psyir/frontend/fparser2_main_program_handler_test.py b/src/psyclone/tests/psyir/frontend/fparser2_main_program_handler_test.py
new file mode 100644
index 000000000..7362de4d5
--- /dev/null
+++ b/src/psyclone/tests/psyir/frontend/fparser2_main_program_handler_test.py
@@ -0,0 +1,96 @@
+# -----------------------------------------------------------------------------
+# BSD 3-Clause License
+#
+# Copyright (c) 2021, Science and Technology Facilities Council.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+# * Redistributions of source code must retain the above copyright notice, this
+#   list of conditions and the following disclaimer.
+#
+# * Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
+#
+# * Neither the name of the copyright holder nor the names of its
+#   contributors may be used to endorse or promote products derived from
+#   this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+# -----------------------------------------------------------------------------
+# Author R. W. Ford, STFC Daresbury Lab
+
+'''Module containing pytest tests for the _main_program_handler method
+in the class Fparser2Reader. This handler deals with the translation
+of the fparser2 Main_Program construct to PSyIR.
+
+'''
+from __future__ import absolute_import
+import pytest
+
+from fparser.common.readfortran import FortranStringReader
+from psyclone.psyir.nodes import Routine
+from psyclone.psyir.frontend.fparser2 import Fparser2Reader
+from psyclone.psyir.backend.fortran import FortranWriter
+
+# program no declarations
+PROG1_IN = (
+    "program prog\n"
+    "end program prog\n")
+PROG1_OUT = (
+    "program prog\n\n\n"
+    "end program prog\n")
+# program with symbols/declarations
+PROG2_IN = (
+    "program prog\n"
+    "real :: a\n"
+    "end program\n")
+PROG2_OUT = (
+    "program prog\n"
+    "  real :: a\n\n\n"
+    "end program prog\n")
+# program with executable content
+PROG3_IN = (
+    "program prog\n"
+    "real :: a\n"
+    "a=0.0\n"
+    "end\n")
+PROG3_OUT = (
+    "program prog\n"
+    "  real :: a\n\n"
+    "  a = 0.0\n\n"
+    "end program prog\n")
+
+
+@pytest.mark.parametrize("code,expected",
+                         [(PROG1_IN, PROG1_OUT),
+                          (PROG2_IN, PROG2_OUT),
+                          (PROG3_IN, PROG3_OUT)])
+def test_main_program_handler(parser, code, expected):
+    '''Test that main_program_handler handles valid Fortran subroutines.'''
+
+    processor = Fparser2Reader()
+    reader = FortranStringReader(code)
+    parse_tree = parser(reader)
+    program = parse_tree.children[0]
+    psyir = processor._main_program_handler(program, None)
+    # Check the expected PSyIR nodes are being created
+    assert isinstance(psyir, Routine)
+    assert psyir.is_program
+    assert psyir.parent is None
+    writer = FortranWriter()
+    result = writer(psyir)
+    assert expected == result
