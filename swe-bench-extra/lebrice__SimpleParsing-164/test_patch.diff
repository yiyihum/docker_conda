diff --git a/simple_parsing/helpers/hparams/hyperparameters_test.py b/simple_parsing/helpers/hparams/hyperparameters_test.py
index 23ac082..06d7c9c 100644
--- a/simple_parsing/helpers/hparams/hyperparameters_test.py
+++ b/simple_parsing/helpers/hparams/hyperparameters_test.py
@@ -265,6 +265,6 @@ def test_field_types():
     assert C.get_priors()["f"].discrete is True
 
     if numpy_installed:
-        assert all(c.f.dtype == np.int for c in cs)
+        assert all(c.f.dtype == int for c in cs)
     else:
         assert all(all(isinstance(v, int) for v in c.f) for c in cs)
diff --git a/test/test_conflicts.py b/test/test_conflicts.py
index c2059ce..d1e5cab 100644
--- a/test/test_conflicts.py
+++ b/test/test_conflicts.py
@@ -74,10 +74,10 @@ def test_parent_child_conflict():
         batch_size: int = 32
 
     @dataclass
-    class Parent(TestSetup):
+    class Parent2(TestSetup):
         batch_size: int = 48
         child: HParams = HParams()
 
-    p: Parent = Parent.setup()
+    p: Parent2 = Parent2.setup()
     assert p.child.batch_size == 32
     assert p.batch_size == 48
diff --git a/test/test_docstrings.py b/test/test_docstrings.py
index e91ca5f..a4d5fa6 100644
--- a/test/test_docstrings.py
+++ b/test/test_docstrings.py
@@ -2,7 +2,7 @@ from dataclasses import dataclass
 from typing import List
 
 from simple_parsing import field
-from simple_parsing.docstring import get_attribute_docstring
+from simple_parsing.docstring import AttributeDocString, get_attribute_docstring
 
 from .testutils import TestSetup
 
@@ -84,14 +84,95 @@ def test_docstring_parsing_works_on_extended():
 
 def test_docstring_works_with_field_function():
     @dataclass
-    class Foo(TestSetup):
+    class UniqueFoo(TestSetup):
         """Some class Foo"""
 
         # A sequence of tasks.
         task_sequence: List[str] = field(choices=["train", "test", "ood"])  # side
         """Below"""
 
-    docstring = get_attribute_docstring(Foo, "task_sequence")
+    docstring = get_attribute_docstring(UniqueFoo, "task_sequence")
     assert docstring.comment_above == "A sequence of tasks."
     assert docstring.comment_inline == "side"
     assert docstring.docstring_below == "Below"
+
+
+def test_docstrings_with_multiple_inheritance():
+    """Test to reproduce issue 162: https://github.com/lebrice/SimpleParsing/issues/162"""
+
+    @dataclass
+    class Fooz:
+        bar: int = 123  #: The bar property
+
+    @dataclass
+    class Baz:
+        bat: int = 123  #: The bat property
+
+    @dataclass
+    class FooBaz(Fooz, Baz):
+        foobaz: int = 123  #: The foobaz property
+
+    assert get_attribute_docstring(FooBaz, "bar") == AttributeDocString(
+        comment_inline=": The bar property"
+    )
+    assert get_attribute_docstring(FooBaz, "bat") == AttributeDocString(
+        comment_inline=": The bat property"
+    )
+    assert get_attribute_docstring(FooBaz, "foobaz") == AttributeDocString(
+        comment_inline=": The foobaz property"
+    )
+
+
+def test_weird_docstring_with_field_like():
+    @dataclass
+    class FooA:
+        """
+        @dataclass
+        class weird:
+            bar: int = 123  # WRONG DOCSTRING
+        """
+
+        bar: int = 123  # The bar property
+
+    assert get_attribute_docstring(FooA, "bar") == AttributeDocString(
+        comment_inline="The bar property"
+    )
+
+
+def test_docstring_builds_upon_bases():
+    @dataclass
+    class Base2(TestSetup):
+        """
+        # WRONG ABOVE
+        bar: int = 333 # WRONG INLINE
+        '''WRONG DOCSTRING'''
+        """
+
+        bar: int = 123  # inline
+        """field docstring from base class"""
+
+    @dataclass
+    class FooB(Base2):
+        # Above
+        bar: int = 123  # The bar property
+
+    assert get_attribute_docstring(FooB, "bar") == AttributeDocString(
+        comment_inline="The bar property",
+        comment_above="Above",
+        docstring_below="field docstring from base class",
+    )
+
+    assert "field docstring from base class" in FooB.get_help_text()
+
+
+def test_getdocstring_bug():
+    @dataclass
+    class HParams:
+        batch_size: int = 32
+
+    @dataclass
+    class Parent(TestSetup):
+        batch_size: int = 48
+        child: HParams = HParams()
+
+    assert get_attribute_docstring(Parent, "child") == AttributeDocString()
