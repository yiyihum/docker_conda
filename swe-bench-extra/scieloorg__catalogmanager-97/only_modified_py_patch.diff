diff --git a/managers/__init__.py b/managers/__init__.py
index 38728b9..6cac9ea 100644
--- a/managers/__init__.py
+++ b/managers/__init__.py
@@ -138,8 +138,8 @@ def set_assets_public_url(article_id, xml_content, assets_filenames,
 
     :returns: conteúdo do XML atualizado
     """
-    article = ArticleDocument(article_id)
-    article.xml_file = File(file_name="xml_file.xml", content=xml_content)
+    xml_file = File(file_name="xml_file.xml", content=xml_content)
+    article = ArticleDocument(article_id, xml_file)
     for name in article.assets:
         if name in assets_filenames:
             article.assets[name].href = public_url.format(article_id,
diff --git a/managers/article_manager.py b/managers/article_manager.py
index 3baa212..7c58fa4 100644
--- a/managers/article_manager.py
+++ b/managers/article_manager.py
@@ -37,8 +37,7 @@ class ArticleManager:
         return article.unexpected_files_list, article.missing_files_list
 
     def receive_xml_file(self, id, xml_file):
-        article = ArticleDocument(id)
-        article.xml_file = xml_file
+        article = ArticleDocument(id, xml_file)
 
         article_record = Record(
             document_id=article.id,
@@ -83,18 +82,17 @@ class ArticleManager:
 
     def get_article_file(self, article_id):
         article_record = self.get_article_data(article_id)
-        article = ArticleDocument(article_id)
         try:
             attachment = self.article_db_service.get_attachment(
                 document_id=article_id,
                 file_id=article_record['content']['xml']
             )
-            article.xml_file = File(file_name=article_record['content']['xml'],
-                                    content=attachment)
-            return article.xml_file.content
+            xml_file = File(file_name=article_record['content']['xml'],
+                            content=attachment)
+            return xml_file.content
         except DocumentNotFound:
             raise ArticleManagerException(
-                'Missing XML file {}'.format(article_id)
+                'XML file {} not found'.format(article_id)
             )
 
     def get_asset_files(self, article_id):
diff --git a/managers/models/article_model.py b/managers/models/article_model.py
index 5ff3847..7d9d8ba 100644
--- a/managers/models/article_model.py
+++ b/managers/models/article_model.py
@@ -5,7 +5,6 @@ from ..xml.article_xml_tree import ArticleXMLTree
 
 class AssetDocument:
     """Metadados de um documento do tipo Ativo Digital.
-    
     Um Ativo Digital é um arquivo associado a um documento do tipo Artigo
     por meio de uma referência interna na estrutura da sua representação em
     XML.
@@ -18,8 +17,6 @@ class AssetDocument:
         #gerenciado pela instância mas pelo seu cliente.
         self.file = None
         self.node = asset_node
-        #XXX :attr:`.name` e :attr:`.href` perdem integridade após atribuição
-        #em :attr:`.href`.
         self.name = asset_node.href
 
     @property
@@ -39,21 +36,18 @@ class AssetDocument:
 class ArticleDocument:
     """Metadados de um documento do tipo Artigo.
 
-    Os metadados contam com uma referência ao Artigo codificado em XML e 
+    Os metadados contam com uma referência ao Artigo codificado em XML e
     referências aos seus ativos digitais.
 
     Exemplo de uso:
 
-        #XXX note que a inicialização da instância não é feita por completo no
-        #momento devido.
-
-        >>> doc = ArticleDocument('art01')
-        >>> doc.xml_file = <instância de File>  
+        >>> doc = ArticleDocument('art01', <instância de File>)
     """
-    def __init__(self, article_id):
+    def __init__(self, article_id, xml_file):
         self.id = article_id
         self.assets = {}
         self.unexpected_files_list = []
+        self.xml_file = xml_file
 
     @property
     def xml_file(self):
@@ -62,7 +56,7 @@ class ArticleDocument:
         um novo documento Artigo resultará na identificação dos seus ativos,
         i.e., o valor do atributo :attr:`.assets` será modificado.
 
-        Adicionalmente, a definição de um novo documento Artigo causará a 
+        Adicionalmente, a definição de um novo documento Artigo causará a
         definição do atributo :attr:`.xml_tree`.
 
         O acesso ao documento Artigo antes que este seja inicializado resultará
@@ -73,11 +67,7 @@ class ArticleDocument:
     @xml_file.setter
     def xml_file(self, xml_file):
         self._xml_file = xml_file
-        #XXX o atributo não é definido até que :meth:`xml_file` seja 
-        #executado definindo um documento Artigo, i.e., a API do objeto
-        #varia de acordo com o seu ciclo de vida.
-        self.xml_tree = ArticleXMLTree()   
-        self.xml_tree.content = self._xml_file.content
+        self.xml_tree = ArticleXMLTree(self._xml_file.content)
         self.assets = {
             name: AssetDocument(node)
             for name, node in self.xml_tree.asset_nodes.items()
@@ -99,11 +89,11 @@ class ArticleDocument:
         """Associa o ativo ``file`` aos metadados de um Artigo, sobrescrevendo
         valores associados anteriormente.
 
-        Retorna instância de :class:`AssetDocument` no caso de sucesso, ou 
-        ``None`` caso contrário. Caso o valor retornado seja ``None`` você 
+        Retorna instância de :class:`AssetDocument` no caso de sucesso, ou
+        ``None`` caso contrário. Caso o valor retornado seja ``None`` você
         poderá inspecionar o atributo :attr:`.unexpected_files_list` para
         saber se trata-se de um ativo desconhecido pelo Artigo ou se trata-se
-        de um artigo que não possui o atributo ``name``.                  
+        de um artigo que não possui o atributo ``name``.
         """
         name = file.name
         if name:
diff --git a/managers/xml/xml_tree.py b/managers/xml/xml_tree.py
index 21d0d51..a1283b2 100644
--- a/managers/xml/xml_tree.py
+++ b/managers/xml/xml_tree.py
@@ -1,7 +1,10 @@
 # coding=utf-8
 
 from lxml import etree
-from io import BytesIO
+from io import (
+    BytesIO,
+    StringIO,
+)
 
 
 namespaces = {}
@@ -15,14 +18,14 @@ for namespace_id, namespace_link in namespaces.items():
 
 class XMLTree:
 
-    def __init__(self):
+    def __init__(self, xml_content):
         self.tree = None
         self.xml_error = None
+        self.content = xml_content
 
     @property
     def content(self):
-        if self.tree is not None:
-            return etree.tostring(self.tree.getroot(), encoding='utf-8')
+        return self.otimized
 
     @content.setter
     def content(self, xml_content):
@@ -39,4 +42,28 @@ class XMLTree:
         return (r, message)
 
     def compare(self, xml_content):
-        return self.content == xml_content
+        return self.content == XMLTree(xml_content).content
+
+    @property
+    def tostring(self):
+        if self.tree is not None:
+            return etree.tostring(self.tree.getroot(), encoding='utf-8')
+
+    @property
+    def pretty(self):
+        return etree.tostring(
+            self.tree.getroot(),
+            encoding='utf-8',
+            pretty_print=True)
+
+    @property
+    def otimized(self):
+        parser = etree.XMLParser(remove_blank_text=True)
+        content = self.tostring
+        if content is not None:
+            root = etree.XML(content.decode('utf-8'), parser)
+            b = etree.tostring(root, encoding='utf-8')
+            s = b.decode('utf-8')
+            while ' '*2 in s:
+                s = s.replace(' '*2, ' ')
+            return s.encode('utf-8')

