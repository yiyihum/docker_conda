diff --git a/managers/tests/test_article_manager.py b/managers/tests/test_article_manager.py
index 6356300..e391079 100644
--- a/managers/tests/test_article_manager.py
+++ b/managers/tests/test_article_manager.py
@@ -148,8 +148,7 @@ def test_get_article_file(setup,
     )
     article_check = article_manager.get_article_file('ID')
     assert article_check is not None
-    xml_tree = XMLTree()
-    xml_tree.content = test_package_A[0].content
+    xml_tree = XMLTree(test_package_A[0].content)
     assert xml_tree.compare(article_check)
 
 
diff --git a/managers/tests/test_article_model.py b/managers/tests/test_article_model.py
index 93378ff..cbd8551 100644
--- a/managers/tests/test_article_model.py
+++ b/managers/tests/test_article_model.py
@@ -8,28 +8,21 @@ from managers.xml.xml_tree import (
 
 
 def test_article(test_package_A, test_packA_filenames):
-    article = ArticleDocument('ID')
-    xml_file = test_package_A[0]
-    article.xml_file = xml_file
+    article = ArticleDocument('ID', test_package_A[0])
     article.update_asset_files(test_package_A[1:])
     expected = {
         'assets': [asset for asset in test_packA_filenames[1:]],
         'xml': test_packA_filenames[0],
     }
     assert article.xml_file.name == test_packA_filenames[0]
+    assert article.xml_file.content == test_package_A[0].content
     assert article.xml_tree.xml_error is None
+    assert article.xml_tree.compare(test_package_A[0].content)
     assert article.get_record_content() == expected
-    assert article.xml_file.content == xml_file.content
-    xml_from_file = XMLTree()
-    xml_from_file.content = article.xml_file.content
-    xml_from_tree = XMLTree()
-    xml_from_tree.content = article.xml_tree.content
-    assert xml_from_file.content == xml_from_tree.content
 
 
 def test_missing_files_list(test_package_B):
-    article = ArticleDocument('ID')
-    article.xml_file = test_package_B[0]
+    article = ArticleDocument('ID', test_package_B[0])
     article.update_asset_files(test_package_B[1:])
 
     assert len(article.assets) == 3
@@ -47,8 +40,7 @@ def test_missing_files_list(test_package_B):
 
 
 def test_unexpected_files_list(test_package_C, test_packC_filenames):
-    article = ArticleDocument('ID')
-    article.xml_file = test_package_C[0]
+    article = ArticleDocument('ID', test_package_C[0])
     article.update_asset_files(test_package_C[1:])
 
     assert len(article.assets) == 2
@@ -67,8 +59,7 @@ def test_unexpected_files_list(test_package_C, test_packC_filenames):
 def test_update_href(test_package_A, test_packA_filenames):
     new_href = 'novo href'
     filename = '0034-8910-rsp-S01518-87872016050006741-gf01.jpg'
-    article = ArticleDocument('ID')
-    article.xml_file = test_package_A[0]
+    article = ArticleDocument('ID', test_package_A[0])
     article.update_asset_files(test_package_A[1:])
     content = article.xml_tree.content
     asset = article.assets.get(filename)
diff --git a/managers/tests/test_xml_tree.py b/managers/tests/test_xml_tree.py
index 9379912..e75a1f2 100644
--- a/managers/tests/test_xml_tree.py
+++ b/managers/tests/test_xml_tree.py
@@ -6,17 +6,15 @@ from managers.xml.xml_tree import (
 
 def test_good_xml():
     xml = b'<article id="a1">\n<text/>\n</article>'
-    xml_tree = XMLTree()
-    xml_tree.content = xml
-    assert xml == xml_tree.content
+    xml_tree = XMLTree(xml)
+    assert xml_tree.compare(xml)
     assert xml_tree.xml_error is None
     assert xml_tree.tree is not None
 
 
 def test_bad_xml():
     xml = b'<article id="a1">\n<text>\n</article>'
-    xml_tree = XMLTree()
-    xml_tree.content = xml
+    xml_tree = XMLTree(xml)
     assert xml_tree.content is None
     assert xml_tree.xml_error is not None
     assert xml_tree.tree is None
@@ -24,8 +22,7 @@ def test_bad_xml():
 
 def test_compare_equal_xml():
     xml = b'<article id="a2">\n<text/>\n</article>'
-    xml_tree = XMLTree()
-    xml_tree.content = xml
+    xml_tree = XMLTree(xml)
     assert xml_tree.content is not None
     assert xml_tree.compare(
         b'<article id="a2">\n<text/>\n</article>'
@@ -34,9 +31,88 @@ def test_compare_equal_xml():
 
 def test_compare_not_equal_xml():
     xml = b'<article id="a2">\n<text/>\n</article>'
-    xml_tree = XMLTree()
-    xml_tree.content = xml
+    xml_tree = XMLTree(xml)
     assert xml_tree.content is not None
     assert not xml_tree.compare(
         b'<article id="a1">\n<text/>\n</article>'
     )
+
+
+def test_pretty():
+    s_xml = """<article><p>A ljllj <bold>kjjflajfa,</bold> """ \
+        """<italic>djajflaj</italic></p><p>Parágrafo 2</p></article>"""
+    s_expected = """<article>\n  <p>A ljllj <bold>kjjflajfa,</bold> """ \
+        """<italic>djajflaj</italic></p>\n  <p>Parágrafo 2</p>\n</article>\n"""
+
+    xml = s_xml.encode('utf-8')
+    expected = s_expected.encode('utf-8')
+    xml_tree = XMLTree(xml)
+    assert xml_tree.content is not None
+    assert xml_tree.pretty == expected
+
+
+def otimize(s_xml, s_expected):
+    b_xml = s_xml.encode('utf-8')
+    b_expected = s_expected.encode('utf-8')
+    xml_tree = XMLTree(b_xml)
+    assert xml_tree.content is not None
+    assert xml_tree.otimized == b_expected
+
+
+def test_otimized_preserva_tab_linebreak_em_elementos_que_contenham_texto():
+    s_xml = '<article>' \
+        '\n    <body>' \
+        '\n        <p>A ljllj' \
+        '\n            <bold>kjjflajfa,</bold>' \
+        '\n            <italic>djajflaj</italic>' \
+        '\n        </p>' \
+        '\n        a   ' \
+        '\n        <p>Parágrafo 2</p>' \
+        '\n    </body>' \
+        '\n</article>'
+
+    s_expected = '<article>' \
+        '<body>' \
+        '<p>A ljllj' \
+        '\n <bold>kjjflajfa,</bold>' \
+        '\n <italic>djajflaj</italic>' \
+        '\n </p>' \
+        '\n a ' \
+        '\n <p>Parágrafo 2</p>' \
+        '\n </body></article>'
+    otimize(s_xml, s_expected)
+
+
+def test_otimized_preserva_tab_linebreak_em_elementos_que_contenham_texto2():
+    s_xml = '<article> ' \
+        '\nA ljllj\n          \t\t   \n    \t  ' \
+        '\nkjjflajfa,  ' \
+        '\ndjajflaj ' \
+        '\na  ' \
+        '\nParágrafo 2 ' \
+        '\n</article>'
+    s_expected = '<article> ' \
+        '\nA ljllj\n \t\t \n \t ' \
+        '\nkjjflajfa, ' \
+        '\ndjajflaj ' \
+        '\na ' \
+        '\nParágrafo 2 ' \
+        '\n</article>'
+    otimize(s_xml, s_expected)
+
+
+def test_otimized_estilos():
+    s_xml = '<article><b>Bold</b> <i>itálico</i></article>'
+    s_expected = '<article><b>Bold</b><i>itálico</i></article>'
+    otimize(s_xml, s_expected)
+
+
+def test_otimized_elimina_tab_linebreak_em_elementos_que_nao_contem_texto():
+    s_xml = """
+    <article>            \n\t   
+        <p>A ljllj </p>
+        <p>Parágrafo 2</p>\n\n\n\n
+   </article>\n
+    """
+    s_expected = '<article><p>A ljllj </p><p>Parágrafo 2</p></article>'
+    otimize(s_xml, s_expected)
