diff --git a/tests/units/test_eoproduct.py b/tests/units/test_eoproduct.py
index ed716125..81bdd00f 100644
--- a/tests/units/test_eoproduct.py
+++ b/tests/units/test_eoproduct.py
@@ -453,3 +453,84 @@ class TestEOProduct(EODagTestCase):
         # progress bar finished
         self.assertEqual(progress_callback.n, progress_callback.total)
         self.assertGreater(progress_callback.total, 0)
+
+    def test_eoproduct_register_downloader(self):
+        """eoproduct.register_donwloader must set download and auth plugins"""
+        product = self._dummy_product()
+
+        self.assertIsNone(product.downloader)
+        self.assertIsNone(product.downloader_auth)
+
+        downloader = mock.MagicMock()
+        downloader_auth = mock.MagicMock()
+
+        product.register_downloader(downloader, downloader_auth)
+
+        self.assertEqual(product.downloader, downloader)
+        self.assertEqual(product.downloader_auth, downloader_auth)
+
+    def test_eoproduct_register_downloader_resolve_ok(self):
+        """eoproduct.register_donwloader must resolve locations and properties"""
+        downloadable_product = self._dummy_downloadable_product(
+            product=self._dummy_product(
+                properties=dict(
+                    self.eoproduct_props,
+                    **{
+                        "downloadLink": "%(base_uri)s/is/resolved",
+                        "otherProperty": "%(outputs_prefix)s/also/resolved",
+                    },
+                )
+            )
+        )
+        self.assertEqual(
+            downloadable_product.location,
+            f"{downloadable_product.downloader.config.base_uri}/is/resolved",
+        )
+        self.assertEqual(
+            downloadable_product.remote_location,
+            f"{downloadable_product.downloader.config.base_uri}/is/resolved",
+        )
+        self.assertEqual(
+            downloadable_product.properties["downloadLink"],
+            f"{downloadable_product.downloader.config.base_uri}/is/resolved",
+        )
+        self.assertEqual(
+            downloadable_product.properties["otherProperty"],
+            f"{downloadable_product.downloader.config.outputs_prefix}/also/resolved",
+        )
+
+    def test_eoproduct_register_downloader_resolve_ignored(self):
+        """eoproduct.register_donwloader must ignore unresolvable locations and properties"""
+        with self.assertLogs(level="DEBUG") as cm:
+            downloadable_product = self._dummy_downloadable_product(
+                product=self._dummy_product(
+                    properties=dict(
+                        self.eoproduct_props,
+                        **{
+                            "downloadLink": "%257B/cannot/be/resolved",
+                            "otherProperty": "%/%s/neither/resolved",
+                        },
+                    )
+                )
+            )
+            self.assertEqual(downloadable_product.location, "%257B/cannot/be/resolved")
+            self.assertEqual(
+                downloadable_product.remote_location, "%257B/cannot/be/resolved"
+            )
+            self.assertEqual(
+                downloadable_product.properties["downloadLink"],
+                "%257B/cannot/be/resolved",
+            )
+            self.assertEqual(
+                downloadable_product.properties["otherProperty"],
+                "%/%s/neither/resolved",
+            )
+
+            needed_logs = [
+                f"Could not resolve product.location ({downloadable_product.location})",
+                f"Could not resolve product.remote_location ({downloadable_product.remote_location})",
+                f"Could not resolve downloadLink property ({downloadable_product.properties['downloadLink']})",
+                f"Could not resolve otherProperty property ({downloadable_product.properties['otherProperty']})",
+            ]
+            for needed_log in needed_logs:
+                self.assertTrue(any(needed_log in log for log in cm.output))
