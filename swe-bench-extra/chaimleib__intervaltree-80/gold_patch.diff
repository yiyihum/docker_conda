diff --git a/intervaltree/interval.py b/intervaltree/interval.py
index f38627b..865cca7 100644
--- a/intervaltree/interval.py
+++ b/intervaltree/interval.py
@@ -53,6 +53,29 @@ class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):
         except:
             return self.contains_point(begin)
 
+    def overlap_size(self, begin, end=None):
+        """
+        Return the overlap size between two intervals or a point
+        :param begin: beginning point of the range, or the point, or an Interval
+        :param end: end point of the range. Optional if not testing ranges.
+        :return: Return the overlap size, None if not overlap is found
+        :rtype: depends on the given input (e.g., int will be returned for int interval and timedelta for
+        datetime intervals)
+        """
+        overlaps = self.overlaps(begin, end)
+        if not overlaps:
+            return 0
+
+        if end is not None:
+            # case end is given
+            i0 = max(self.begin, begin)
+            i1 = min(self.end, end)
+            return i1 - i0
+        # assume the type is interval, in other cases, an exception will be thrown
+        i0 = max(self.begin, begin.begin)
+        i1 = min(self.end, begin.end)
+        return i1 - i0
+
     def contains_point(self, p):
         """
         Whether the Interval contains p.
diff --git a/intervaltree/node.py b/intervaltree/node.py
index 7b94406..ff04959 100644
--- a/intervaltree/node.py
+++ b/intervaltree/node.py
@@ -58,13 +58,22 @@ class Node(object):
 
     @classmethod
     def from_intervals(cls, intervals):
+        """
+        :rtype : Node
+        """
+        if not intervals:
+            return None
+        return Node.from_sorted_intervals(sorted(intervals))
+
+    @classmethod
+    def from_sorted_intervals(cls, intervals):
         """
         :rtype : Node
         """
         if not intervals:
             return None
         node = Node()
-        node = node.init_from_sorted(sorted(intervals))
+        node = node.init_from_sorted(intervals)
         return node
 
     def init_from_sorted(self, intervals):
@@ -82,8 +91,8 @@ class Node(object):
                 s_right.append(k)
             else:
                 self.s_center.add(k)
-        self.left_node = Node.from_intervals(s_left)
-        self.right_node = Node.from_intervals(s_right)
+        self.left_node = Node.from_sorted_intervals(s_left)
+        self.right_node = Node.from_sorted_intervals(s_right)
         return self.rotate()
 
     def center_hit(self, interval):
diff --git a/setup.py b/setup.py
index 1afc8e3..32bc151 100644
--- a/setup.py
+++ b/setup.py
@@ -33,7 +33,7 @@ from setuptools.command.test import test as TestCommand
 import subprocess
 
 ## CONFIG
-target_version = '3.0.2'
+target_version = '3.0.3'
 
 
 def version_info(target_version):
