diff --git a/tests/test_db/example_report.json b/tests/test_db/example_report.json
new file mode 100644
index 0000000..a68da92
--- /dev/null
+++ b/tests/test_db/example_report.json
@@ -0,0 +1,23 @@
+[
+    [
+        "django",
+        "<1.2.7",
+        "1.2.2",
+        "django.contrib.sessions in Django before 1.2.7 and 1.3.x before 1.3.1, when session data is stored in the cache, uses the root namespace for both session identifiers and application-data keys, which allows remote attackers to modify a session by triggering use of a key that is equal to that session's identifier.",
+        "33063"
+    ],
+    [
+        "django",
+        "<1.2.7",
+        "1.2.2",
+        "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521.",
+        "33064"
+    ],
+    [
+        "django",
+        "<1.2.7",
+        "1.2.2",
+        "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 originally tests a URL's validity through a HEAD request, but then uses a GET request for the new target URL in the case of a redirect, which might allow remote attackers to trigger arbitrary GET requests with an unintended source IP address via a crafted Location header.",
+        "33065"
+    ]
+]
diff --git a/tests/test_db/invalid_example_report.json b/tests/test_db/invalid_example_report.json
new file mode 100644
index 0000000..5cd3752
--- /dev/null
+++ b/tests/test_db/invalid_example_report.json
@@ -0,0 +1,21 @@
+[
+    [
+        "django",
+        "<1.2.7",
+        "1.2.2",
+        "django.contrib.sessions in Django before 1.2.7 and 1.3.x before 1.3.1, when session data is stored in the cache, uses the root namespace for both session identifiers and application-data keys, which allows remote attackers to modify a session by triggering use of a key that is equal to that session's identifier.",
+        "33063"
+    ],
+    [
+        "django",
+        "<1.2.7",
+        "1.2.2",
+        "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521.",
+        "33064"
+    ],
+    [
+        "django",
+        "<1.2.7",
+        "1.2.2",
+        "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 originally tests a URL's validity through a HEAD request, but then uses a GET request for the new target URL in the case of a redirect, which might allow remote attackers to trigger arbitrary GET requests with an unintended source IP address via a crafted Location header.",
+        "33065"
diff --git a/tests/test_safety.py b/tests/test_safety.py
index 2bde30f..fdb63df 100644
--- a/tests/test_safety.py
+++ b/tests/test_safety.py
@@ -24,6 +24,8 @@ try:
 except ImportError:
     from io import StringIO
 from safety.util import read_requirements
+from safety.util import read_vulnerabilities
+
 
 class TestSafetyCLI(unittest.TestCase):
 
@@ -36,6 +38,21 @@ class TestSafetyCLI(unittest.TestCase):
         assert help_result.exit_code == 0
         assert '--help' in help_result.output
 
+    def test_review_pass(self):
+        runner = CliRunner()
+        dirname = os.path.dirname(__file__)
+        path_to_report = os.path.join(dirname, "test_db", "example_report.json")
+        result = runner.invoke(cli.cli, ['review', '--bare', '--file', path_to_report])
+        assert result.exit_code == 0
+        assert result.output == u'django\n'
+
+    def test_review_fail(self):
+        runner = CliRunner()
+        dirname = os.path.dirname(__file__)
+        path_to_report = os.path.join(dirname, "test_db", "invalid_example_report.json")
+        result = runner.invoke(cli.cli, ['review', '--bare', '--file', path_to_report])
+        assert result.exit_code == -1
+
 
 class TestFormatter(unittest.TestCase):
 
@@ -48,7 +65,7 @@ class TestFormatter(unittest.TestCase):
             self.fail(e)
 
     def test_report_json(self):
-        test_arr = [['libfoo'],['libbar']]
+        test_arr = [['libfoo'], ['libbar']]
         json_report = formatter.report(test_arr, full=False, json_report=True)
         assert json.loads(json_report) == test_arr
 
@@ -103,6 +120,14 @@ class TestFormatter(unittest.TestCase):
 
 
 class TestSafety(unittest.TestCase):
+    def test_review_from_file(self):
+        dirname = os.path.dirname(__file__)
+        path_to_report = os.path.join(dirname, "test_db", "example_report.json")
+        with open(path_to_report) as insecure:
+            input_vulns = read_vulnerabilities(insecure)
+
+        vulns = safety.review(input_vulns)
+        assert(len(vulns), 3)
 
     def test_check_from_file(self):
         reqs = StringIO("Django==1.8.1")
@@ -137,6 +162,7 @@ class TestSafety(unittest.TestCase):
             proxy={}
         )
         self.assertEqual(len(vulns), 4)
+
     def test_check_live(self):
         reqs = StringIO("insecure-package==0.1")
         packages = util.read_requirements(reqs)
