diff --git a/networkx/algorithms/community/tests/test_quality.py b/networkx/algorithms/community/tests/test_quality.py
index 0c5b94c5a..79ce7e7f6 100644
--- a/networkx/algorithms/community/tests/test_quality.py
+++ b/networkx/algorithms/community/tests/test_quality.py
@@ -12,6 +12,7 @@ module.
 """
 from __future__ import division
 
+from nose.tools import assert_equal
 from nose.tools import assert_almost_equal
 
 import networkx as nx
@@ -19,6 +20,7 @@ from networkx import barbell_graph
 from networkx.algorithms.community import coverage
 from networkx.algorithms.community import modularity
 from networkx.algorithms.community import performance
+from networkx.algorithms.community.quality import inter_community_edges
 
 
 class TestPerformance(object):
@@ -61,3 +63,17 @@ def test_modularity():
     assert_almost_equal(-16 / (14 ** 2), modularity(G, C))
     C = [{0, 1, 2}, {3, 4, 5}]
     assert_almost_equal((35 * 2) / (14 ** 2), modularity(G, C))
+
+
+def test_inter_community_edges_with_digraphs():
+    G = nx.complete_graph(2, create_using = nx.DiGraph())
+    partition = [{0}, {1}]
+    assert_equal(inter_community_edges(G, partition), 2)
+
+    G = nx.complete_graph(10, create_using = nx.DiGraph())
+    partition = [{0}, {1, 2}, {3, 4, 5}, {6, 7, 8, 9}]
+    assert_equal(inter_community_edges(G, partition), 70)
+
+    G = nx.cycle_graph(4, create_using = nx.DiGraph())
+    partition = [{0, 1}, {2, 3}]
+    assert_equal(inter_community_edges(G, partition), 2)
diff --git a/networkx/algorithms/tests/test_simple_paths.py b/networkx/algorithms/tests/test_simple_paths.py
index e29255c32..4c701e487 100644
--- a/networkx/algorithms/tests/test_simple_paths.py
+++ b/networkx/algorithms/tests/test_simple_paths.py
@@ -220,6 +220,40 @@ def test_directed_weighted_shortest_simple_path():
         cost = this_cost
 
 
+def test_weighted_shortest_simple_path_issue2427():
+    G = nx.Graph()
+    G.add_edge('IN', 'OUT', weight = 2)
+    G.add_edge('IN', 'A', weight = 1)
+    G.add_edge('IN', 'B', weight = 2)
+    G.add_edge('B', 'OUT', weight = 2)
+    assert_equal(list(nx.shortest_simple_paths(G, 'IN', 'OUT', weight = "weight")),
+                 [['IN', 'OUT'], ['IN', 'B', 'OUT']])
+    G = nx.Graph()
+    G.add_edge('IN', 'OUT', weight = 10)
+    G.add_edge('IN', 'A', weight = 1)
+    G.add_edge('IN', 'B', weight = 1)
+    G.add_edge('B', 'OUT', weight = 1)
+    assert_equal(list(nx.shortest_simple_paths(G, 'IN', 'OUT', weight = "weight")),
+                 [['IN', 'B', 'OUT'], ['IN', 'OUT']])
+
+
+def test_directed_weighted_shortest_simple_path_issue2427():
+    G = nx.DiGraph()
+    G.add_edge('IN', 'OUT', weight = 2)
+    G.add_edge('IN', 'A', weight = 1)
+    G.add_edge('IN', 'B', weight = 2)
+    G.add_edge('B', 'OUT', weight = 2)
+    assert_equal(list(nx.shortest_simple_paths(G, 'IN', 'OUT', weight = "weight")),
+                 [['IN', 'OUT'], ['IN', 'B', 'OUT']])
+    G = nx.DiGraph()
+    G.add_edge('IN', 'OUT', weight = 10)
+    G.add_edge('IN', 'A', weight = 1)
+    G.add_edge('IN', 'B', weight = 1)
+    G.add_edge('B', 'OUT', weight = 1)
+    assert_equal(list(nx.shortest_simple_paths(G, 'IN', 'OUT', weight = "weight")),
+                 [['IN', 'B', 'OUT'], ['IN', 'OUT']])
+
+
 def test_weight_name():
     G = nx.cycle_graph(7)
     nx.set_edge_attributes(G, 1, 'weight')
@@ -303,6 +337,38 @@ def test_bidirectional_shortest_path_restricted_directed_cycle():
     )
 
 
+def test_bidirectional_shortest_path_ignore():
+    G = nx.Graph()
+    nx.add_path(G, [1, 2])
+    nx.add_path(G, [1, 3])
+    nx.add_path(G, [1, 4])
+    assert_raises(
+        nx.NetworkXNoPath,
+        _bidirectional_shortest_path,
+        G,
+        1, 2,
+        ignore_nodes=[1],
+    )
+    assert_raises(
+        nx.NetworkXNoPath,
+        _bidirectional_shortest_path,
+        G,
+        1, 2,
+        ignore_nodes=[2],
+    )
+    G = nx.Graph()
+    nx.add_path(G, [1, 3])
+    nx.add_path(G, [1, 4])
+    nx.add_path(G, [3, 2])
+    assert_raises(
+        nx.NetworkXNoPath,
+        _bidirectional_shortest_path,
+        G,
+        1, 2,
+        ignore_nodes=[1, 2],
+    )
+
+
 def validate_path(G, s, t, soln_len, path):
     assert_equal(path[0], s)
     assert_equal(path[-1], t)
@@ -362,3 +428,30 @@ def test_bidirectional_dijkstra_no_path():
     nx.add_path(G, [1, 2, 3])
     nx.add_path(G, [4, 5, 6])
     path = _bidirectional_dijkstra(G, 1, 6)
+
+
+def test_bidirectional_dijkstra_ignore():
+    G = nx.Graph()
+    nx.add_path(G, [1, 2, 10])
+    nx.add_path(G, [1, 3, 10])
+    assert_raises(
+        nx.NetworkXNoPath,
+        _bidirectional_dijkstra,
+        G,
+        1, 2,
+        ignore_nodes=[1],
+    )
+    assert_raises(
+        nx.NetworkXNoPath,
+        _bidirectional_dijkstra,
+        G,
+        1, 2,
+        ignore_nodes=[2],
+    )
+    assert_raises(
+        nx.NetworkXNoPath,
+        _bidirectional_dijkstra,
+        G,
+        1, 2,
+        ignore_nodes=[1, 2],
+    )
