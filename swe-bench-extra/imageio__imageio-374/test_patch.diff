diff --git a/tests/test_freeimage.py b/tests/test_freeimage.py
index 93e0d74..537fe76 100644
--- a/tests/test_freeimage.py
+++ b/tests/test_freeimage.py
@@ -493,6 +493,30 @@ def test_other():
     raises(Exception, imageio.imsave, fnamebase + ".jng", im, "JNG")
 
 
+def test_gamma_correction():
+    need_internet()
+
+    fname = get_remote_file("images/kodim03.png")
+
+    # Load image three times
+    im1 = imageio.imread(fname, format="PNG-FI")
+    im2 = imageio.imread(fname, ignoregamma=True, format="PNG-FI")
+    im3 = imageio.imread(fname, ignoregamma=False, format="PNG-FI")
+
+    # Default is to ignore gamma
+    assert np.all(im1 == im2)
+
+    # Test result depending of application of gamma
+    assert im1.mean() == im2.mean()
+
+    # TODO: We have assert im2.mean() == im3.mean()
+    # But this is wrong, we want: assert im2.mean() < im3.mean()
+
+    # test_regression_302
+    for im in (im1, im2, im3):
+        assert im.shape == (512, 768, 3) and im.dtype == "uint8"
+
+
 if __name__ == "__main__":
     # test_animated_gif()
     run_tests_if_main()
diff --git a/tests/test_pillow.py b/tests/test_pillow.py
index 290246d..fed9041 100644
--- a/tests/test_pillow.py
+++ b/tests/test_pillow.py
@@ -332,13 +332,27 @@ def test_images_with_transparency():
     assert im.shape == (24, 30, 4)
 
 
-def test_regression_302():
-    # When using gamma correction, the result should keep the same dtype
+def test_gamma_correction():
     need_internet()
 
     fname = get_remote_file("images/kodim03.png")
-    im = imageio.imread(fname)
-    assert im.shape == (512, 768, 3) and im.dtype == "uint8"
+
+    # Load image three times
+    im1 = imageio.imread(fname)
+    im2 = imageio.imread(fname, ignoregamma=True)
+    im3 = imageio.imread(fname, ignoregamma=False)
+
+    # Default is to ignore gamma
+    assert np.all(im1 == im2)
+
+    # Test result depending of application of gamma
+    assert im1.meta["gamma"] < 1
+    assert im1.mean() == im2.mean()
+    assert im2.mean() < im3.mean()
+
+    # test_regression_302
+    for im in (im1, im2, im3):
+        assert im.shape == (512, 768, 3) and im.dtype == "uint8"
 
 
 def test_inside_zipfile():
