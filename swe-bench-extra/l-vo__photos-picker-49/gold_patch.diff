diff --git a/CHANGELOG.md b/CHANGELOG.md
index b17ec72..b760c15 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,7 @@
 * Add CHANGELOG.md
 * Add SmartPicker
 * Take care that photos to retrieve count is not greater than total photos count (at AbstractPicker level)
+* On FilesystemUploader, check that target directory exists and is empty before scanning
 
 # 0.3.1
 * Allow to use a custom target directory in Dropbox
diff --git a/photospicker/uploader/filesystem_uploader.py b/photospicker/uploader/filesystem_uploader.py
index 05af0f9..a2277ae 100644
--- a/photospicker/uploader/filesystem_uploader.py
+++ b/photospicker/uploader/filesystem_uploader.py
@@ -6,7 +6,14 @@ import os
 class FilesystemUploader(AbstractUploader):
     """Copy picked photo to a filesystem empty directory"""
 
-    def initialize(self):  # pragma: no cover
+    def __init__(self, folder_path):
+        """
+        Constructor
+
+        :param str folder_path: target folder path
+        """
+        super(FilesystemUploader, self).__init__(folder_path)
+
         """Check target directory"""
         if not os.path.isdir(self._path):
             raise UploaderException(
@@ -20,6 +27,9 @@ class FilesystemUploader(AbstractUploader):
                 "Directory {path} not empty".format(path=self._path)
             )
 
+    def initialize(self):
+        pass
+
     def upload(self, binary, original_filename):
         """
         Upload or copy files to destination
