diff --git a/src/aiofiles/base.py b/src/aiofiles/base.py
index 6e3e80d..f64d00d 100644
--- a/src/aiofiles/base.py
+++ b/src/aiofiles/base.py
@@ -12,9 +12,9 @@ class AsyncBase:
     def __aiter__(self):
         """We are our own iterator."""
         return self
-    
+
     def __repr__(self):
-        return super().__repr__() + ' wrapping ' + repr(self._file)
+        return super().__repr__() + " wrapping " + repr(self._file)
 
     async def __anext__(self):
         """Simulate normal file iteration."""
diff --git a/src/aiofiles/tempfile/__init__.py b/src/aiofiles/tempfile/__init__.py
index e3363f0..21753aa 100644
--- a/src/aiofiles/tempfile/__init__.py
+++ b/src/aiofiles/tempfile/__init__.py
@@ -113,10 +113,12 @@ def SpooledTemporaryFile(
     )
 
 
-def TemporaryDirectory(loop=None, executor=None):
+def TemporaryDirectory(suffix=None, prefix=None, dir=None, loop=None, executor=None):
     """Async open a temporary directory"""
     return AiofilesContextManagerTempDir(
-        _temporary_directory(loop=loop, executor=executor)
+        _temporary_directory(
+            suffix=suffix, prefix=prefix, dir=dir, loop=loop, executor=executor
+        )
     )
 
 
@@ -213,12 +215,15 @@ async def _spooled_temporary_file(
     return AsyncSpooledTemporaryFile(f, loop=loop, executor=executor)
 
 
-async def _temporary_directory(loop=None, executor=None):
+async def _temporary_directory(
+    suffix=None, prefix=None, dir=None, loop=None, executor=None
+):
     """Async method to open a temporary directory with async interface"""
     if loop is None:
         loop = asyncio.get_event_loop()
 
-    f = await loop.run_in_executor(executor, syncTemporaryDirectory)
+    cb = partial(syncTemporaryDirectory, suffix, prefix, dir)
+    f = await loop.run_in_executor(executor, cb)
 
     return AsyncTemporaryDirectory(f, loop=loop, executor=executor)
 

