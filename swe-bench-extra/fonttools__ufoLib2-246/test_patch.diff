diff --git a/tests/serde/test_json.py b/tests/serde/test_json.py
index 67cdab8..53388a9 100644
--- a/tests/serde/test_json.py
+++ b/tests/serde/test_json.py
@@ -20,6 +20,8 @@ def test_dumps_loads(
 ) -> None:
     if not have_orjson:
         monkeypatch.setattr(ufoLib2.serde.json, "have_orjson", have_orjson)
+    else:
+        pytest.importorskip("orjson")
 
     font = ufo_UbuTestData
     data = font.json_dumps()  # type: ignore
@@ -82,6 +84,7 @@ def test_dump_load(
 
 @pytest.mark.parametrize("indent", [1, 3], ids=["indent-1", "indent-3"])
 def test_indent_not_2_orjson(indent: int) -> None:
+    pytest.importorskip("orjson")
     with pytest.raises(ValueError):
         ufoLib2.serde.json.dumps(None, indent=indent)
 
diff --git a/tests/serde/test_msgpack.py b/tests/serde/test_msgpack.py
index 886582f..78f717c 100644
--- a/tests/serde/test_msgpack.py
+++ b/tests/serde/test_msgpack.py
@@ -1,12 +1,14 @@
 from pathlib import Path
 
-import msgpack  # type: ignore
 import pytest
 
 import ufoLib2.objects
 
 # isort: off
 pytest.importorskip("cattrs")
+pytest.importorskip("msgpack")
+
+import msgpack  # type: ignore  # noqa
 
 import ufoLib2.serde.msgpack  # noqa: E402
 
diff --git a/tests/serde/test_serde.py b/tests/serde/test_serde.py
index f45e210..7fe0be6 100644
--- a/tests/serde/test_serde.py
+++ b/tests/serde/test_serde.py
@@ -1,20 +1,37 @@
 import importlib
-import sys
 from typing import Any, Dict, List
 
 import pytest
 from attrs import define
 
 import ufoLib2.objects
+from ufoLib2.errors import ExtrasNotInstalledError
 from ufoLib2.serde import _SERDE_FORMATS_, serde
 
+cattrs = None
+try:
+    import cattrs  # type: ignore
+except ImportError:
+    pass
 
-def test_raise_import_error(monkeypatch: Any) -> None:
-    # pretend we can't import the module (e.g. msgpack not installed)
-    monkeypatch.setitem(sys.modules, "ufoLib2.serde.msgpack", None)
 
-    with pytest.raises(ImportError, match="ufoLib2.serde.msgpack"):
-        importlib.import_module("ufoLib2.serde.msgpack")
+msgpack = None
+try:
+    import msgpack  # type: ignore
+except ImportError:
+    pass
+
+
+EXTRAS_REQUIREMENTS = {
+    "json": ["cattrs"],
+    "msgpack": ["cattrs", "msgpack"],
+}
+
+
+def assert_extras_not_installed(extras: str, missing_dependency: str) -> None:
+    # sanity check that the dependency is not installed
+    with pytest.raises(ImportError, match=missing_dependency):
+        importlib.import_module(missing_dependency)
 
     @serde
     @define
@@ -24,10 +41,28 @@ def test_raise_import_error(monkeypatch: Any) -> None:
 
     foo = Foo(1)
 
-    with pytest.raises(ImportError, match="ufoLib2.serde.msgpack"):
-        # since the method is only added dynamically at runtime, mypy complains that
-        # "Foo" has no attribute "msgpack_dumps" -- so I shut it up
-        foo.msgpack_dumps()  # type: ignore
+    with pytest.raises(
+        ExtrasNotInstalledError, match=rf"Extras not installed: ufoLib2\[{extras}\]"
+    ) as exc_info:
+        dumps_method = getattr(foo, f"{extras}_dumps")
+        dumps_method()
+
+    assert isinstance(exc_info.value.__cause__, ModuleNotFoundError)
+
+
+@pytest.mark.skipif(cattrs is not None, reason="cattrs installed, not applicable")
+def test_json_cattrs_not_installed() -> None:
+    assert_extras_not_installed("json", "cattrs")
+
+
+@pytest.mark.skipif(cattrs is not None, reason="cattrs installed, not applicable")
+def test_msgpack_cattrs_not_installed() -> None:
+    assert_extras_not_installed("msgpack", "cattrs")
+
+
+@pytest.mark.skipif(msgpack is not None, reason="msgpack installed, not applicable")
+def test_msgpack_not_installed() -> None:
+    assert_extras_not_installed("msgpack", "msgpack")
 
 
 BASIC_EMPTY_OBJECTS: List[Dict[str, Any]] = [
@@ -61,9 +96,8 @@ assert {d["class_name"] for d in BASIC_EMPTY_OBJECTS} == set(ufoLib2.objects.__a
     ids=lambda x: x["class_name"],  # type: ignore
 )
 def test_serde_all_objects(fmt: str, object_info: Dict[str, Any]) -> None:
-    if fmt in ("json", "msgpack"):
-        # skip these format tests if cattrs is not installed
-        pytest.importorskip("cattrs")
+    for req in EXTRAS_REQUIREMENTS[fmt]:
+        pytest.importorskip(req)
 
     klass = getattr(ufoLib2.objects, object_info["class_name"])
     loads = getattr(klass, f"{fmt}_loads")
