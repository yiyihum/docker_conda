diff --git a/evopy/__init__.py b/evopy/__init__.py
index 30a793d..9d11fab 100644
--- a/evopy/__init__.py
+++ b/evopy/__init__.py
@@ -1,2 +1,3 @@
 """The evopy evolutionary strategy algorithm package."""
 from evopy.evopy import EvoPy
+from evopy.progress_report import ProgressReport
diff --git a/evopy/evopy.py b/evopy/evopy.py
index 27d5c5c..83d04db 100644
--- a/evopy/evopy.py
+++ b/evopy/evopy.py
@@ -2,13 +2,14 @@
 import numpy as np
 
 from evopy.individual import Individual
+from evopy.progress_report import ProgressReport
 
 
 class EvoPy:
     """Main class of the EvoPy package."""
 
     def __init__(self, fitness_function, individual_length, warm_start=None, generations=100,
-                 population_size=30, num_children=1, mean=0, std=1, maximize=False):
+                 population_size=30, num_children=1, mean=0, std=1, maximize=False, reporter=None):
         """Initializes an EvoPy instance.
 
         :param fitness_function: the fitness function on which the individuals are evaluated
@@ -19,7 +20,8 @@ class EvoPy:
         :param num_children: the number of children generated per parent individual
         :param mean: the mean for sampling the random offsets of the initial population
         :param std: the standard deviation for sampling the random offsets of the initial population
-        :param maximize: whether the fitness function should be maximized or minimized.
+        :param maximize: whether the fitness function should be maximized or minimized
+        :param reporter: callback to be invoked at each generation with a ProgressReport as argument
         """
         self.fitness_function = fitness_function
         self.individual_length = individual_length
@@ -30,9 +32,13 @@ class EvoPy:
         self.mean = mean
         self.std = std
         self.maximize = maximize
+        self.reporter = reporter
 
     def run(self):
-        """Run the evolutionary strategy algorithm."""
+        """Run the evolutionary strategy algorithm.
+
+        :return the best genotype found
+        """
         if self.individual_length == 0:
             return None
 
@@ -40,7 +46,7 @@ class EvoPy:
         best = sorted(population, reverse=self.maximize,
                       key=lambda individual: individual.evaluate(self.fitness_function))[0]
 
-        for _ in range(self.generations):
+        for generation in range(self.generations):
             children = [parent.reproduce() for _ in range(self.num_children)
                         for parent in population]
             population = sorted(children + population, reverse=self.maximize,
@@ -51,6 +57,9 @@ class EvoPy:
             else:
                 best = population[0] if population[0].fitness < best.fitness else best
 
+            if self.reporter is not None:
+                self.reporter(ProgressReport(generation, best.genotype, best.fitness))
+
         return best.genotype
 
     def _init_population(self):
