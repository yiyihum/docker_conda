diff --git a/tests/test_apns.py b/tests/test_apns.py
index b7b6774..32ccd28 100644
--- a/tests/test_apns.py
+++ b/tests/test_apns.py
@@ -40,6 +40,13 @@ DEVICE_EXAMPLE_WITH_DEFAULT_PAYLOAD = {
     },
 }
 
+DEVICE_EXAMPLE_WITH_BAD_DEFAULT_PAYLOAD = {
+    "app_id": "com.example.apns",
+    "pushkey": "badpayload",
+    "pushkey_ts": 42,
+    "data": {"default_payload": None},
+}
+
 
 class ApnsTestCase(testutils.TestCase):
     def setUp(self):
@@ -264,6 +271,15 @@ class ApnsTestCase(testutils.TestCase):
 
         self.assertEqual({"rejected": []}, resp)
 
+    def test_misconfigured_payload_is_rejected(self):
+        """Test that a malformed default_payload causes pushkey to be rejected"""
+
+        resp = self._request(
+            self._make_dummy_notification([DEVICE_EXAMPLE_WITH_BAD_DEFAULT_PAYLOAD])
+        )
+
+        self.assertEqual({"rejected": ["badpayload"]}, resp)
+
     def test_rejection(self):
         """
         Tests the rejection case: a rejection response from APNS leads to us
diff --git a/tests/test_gcm.py b/tests/test_gcm.py
index 0ad609e..d705751 100644
--- a/tests/test_gcm.py
+++ b/tests/test_gcm.py
@@ -34,6 +34,16 @@ DEVICE_EXAMPLE_WITH_DEFAULT_PAYLOAD = {
         }
     },
 }
+
+DEVICE_EXAMPLE_WITH_BAD_DEFAULT_PAYLOAD = {
+    "app_id": "com.example.gcm",
+    "pushkey": "badpayload",
+    "pushkey_ts": 42,
+    "data": {
+        "default_payload": None,
+    },
+}
+
 DEVICE_EXAMPLE_IOS = {
     "app_id": "com.example.gcm.ios",
     "pushkey": "spqr",
@@ -118,6 +128,22 @@ class GcmTestCase(testutils.TestCase):
         self.assertEqual(resp, {"rejected": []})
         self.assertEqual(gcm.num_requests, 1)
 
+    def test_misformed_default_payload_rejected(self):
+        """
+        Tests that a non-dict default_payload is rejected.
+        """
+        gcm = self.get_test_pushkin("com.example.gcm")
+        gcm.preload_with_response(
+            200, {"results": [{"message_id": "msg42", "registration_id": "badpayload"}]}
+        )
+
+        resp = self._request(
+            self._make_dummy_notification([DEVICE_EXAMPLE_WITH_BAD_DEFAULT_PAYLOAD])
+        )
+
+        self.assertEqual(resp, {"rejected": ["badpayload"]})
+        self.assertEqual(gcm.num_requests, 1)
+
     def test_rejected(self):
         """
         Tests the rejected case: a pushkey rejected to GCM leads to Sygnal
