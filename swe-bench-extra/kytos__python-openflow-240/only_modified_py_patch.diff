diff --git a/pyof/foundation/network_types.py b/pyof/foundation/network_types.py
index a538631..d91847c 100644
--- a/pyof/foundation/network_types.py
+++ b/pyof/foundation/network_types.py
@@ -67,7 +67,7 @@ class GenericTLV:
         """Create an instance and set its attributes."""
         #: type (int): The Type of the TLV Structure
         self.type = tlv_type
-        #: value (int): The value of the TLV Structure
+        #: value (BinaryData): The value of the TLV Structure
         self._value = value
 
     @property
@@ -78,7 +78,7 @@ class GenericTLV:
     @property
     def length(self):
         """Struct length in bytes."""
-        return len(self.value.pack())
+        return len(self._value.pack())
 
     @property
     def header(self):
@@ -101,7 +101,7 @@ class GenericTLV:
         """
         if value is None:
             output = self.header.pack()
-            output += self.value.pack()
+            output += self._value.pack()
             return output
 
         elif isinstance(value, type(self)):
@@ -129,7 +129,7 @@ class GenericTLV:
         self.type = header.value >> 9
         length = header.value & 511
         begin, end = offset + 2, offset + 2 + length
-        self.value = BinaryData(buffer[begin:end])
+        self._value = BinaryData(buffer[begin:end])
 
     def get_size(self, value=None):
         """Return struct size."""
diff --git a/setup.py b/setup.py
index ca5e1f0..b6a20ef 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@ descriptions.
 """
 import sys
 from abc import abstractmethod
-from subprocess import call, check_call
+from subprocess import CalledProcessError, call, check_call
 
 from setuptools import Command, find_packages, setup
 
@@ -15,11 +15,13 @@ from pyof import __version__
 def lint():
     """Run pylama and radon."""
     files = 'tests setup.py pyof'
-    print('Pylama is running. It may take a while...')
+    print('Pylama is running. It may take several seconds...')
     cmd = 'pylama {}'.format(files)
-    check_call(cmd, shell=True)
-    print('Low grades (<= C) for Maintainability Index (if any):')
-    check_call('radon mi --min=C ' + files, shell=True)
+    try:
+        check_call(cmd, shell=True)
+    except CalledProcessError as e:
+        print('Please, fix linter errors above.')
+        sys.exit(e.returncode)
 
 
 class SimpleCommand(Command):

