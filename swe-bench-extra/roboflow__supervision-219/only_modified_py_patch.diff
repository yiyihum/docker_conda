diff --git a/supervision/__init__.py b/supervision/__init__.py
index 76cdde90..9c0252fb 100644
--- a/supervision/__init__.py
+++ b/supervision/__init__.py
@@ -1,6 +1,10 @@
 import importlib.metadata as importlib_metadata
 
-__version__ = importlib_metadata.version(__package__)
+try:
+    # This will read version from pyproject.toml
+    __version__ = importlib_metadata.version(__package__ or __name__)
+except importlib_metadata.PackageNotFoundError:
+    __version__ = "development"
 
 
 from supervision.classification.core import Classifications
diff --git a/supervision/metrics/detection.py b/supervision/metrics/detection.py
index d0e85e63..e7234973 100644
--- a/supervision/metrics/detection.py
+++ b/supervision/metrics/detection.py
@@ -84,8 +84,12 @@ class ConfusionMatrix:
         prediction_tensors = []
         target_tensors = []
         for prediction, target in zip(predictions, targets):
-            prediction_tensors.append(cls.convert_detections_to_tensor(prediction))
-            target_tensors.append(cls.convert_detections_to_tensor(target))
+            prediction_tensors.append(
+                cls.detections_to_tensor(prediction, with_confidence=True)
+            )
+            target_tensors.append(
+                cls.detections_to_tensor(target, with_confidence=False)
+            )
         return cls.from_tensors(
             predictions=prediction_tensors,
             targets=target_tensors,
@@ -95,15 +99,24 @@ class ConfusionMatrix:
         )
 
     @classmethod
-    def convert_detections_to_tensor(cls, detections: Detections) -> np.ndarray:
+    def detections_to_tensor(
+        cls, detections: Detections, with_confidence: bool = False
+    ) -> np.ndarray:
+        if detections.class_id is None:
+            raise ValueError(
+                "ConfusionMatrix can only be calculated for Detections with class_id"
+            )
+
         arrays_to_concat = [detections.xyxy, np.expand_dims(detections.class_id, 1)]
-        if detections.confidence is not None:
+
+        if with_confidence:
+            if detections.confidence is None:
+                raise ValueError(
+                    "ConfusionMatrix can only be calculated for Detections with confidence"
+                )
             arrays_to_concat.append(np.expand_dims(detections.confidence, 1))
 
-        return np.concatenate(
-            arrays_to_concat,
-            axis=1,
-        )
+        return np.concatenate(arrays_to_concat, axis=1)
 
     @classmethod
     def from_tensors(

