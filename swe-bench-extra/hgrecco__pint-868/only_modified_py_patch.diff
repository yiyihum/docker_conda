diff --git a/pint/definitions.py b/pint/definitions.py
index e510a1b..811a471 100644
--- a/pint/definitions.py
+++ b/pint/definitions.py
@@ -52,6 +52,12 @@ class Definition(object):
                     value.decode('utf-8')
                 except UnicodeEncodeError:
                     result.remove(value)
+
+        # @alias name = alias1 = alias2 = ...
+        if name.startswith("@alias "):
+            name = name[len("@alias "):].lstrip()
+            return AliasDefinition(name, tuple(result))
+
         value, aliases = result[0], tuple([x for x in result[1:] if x != ''])
         symbol, aliases = (aliases[0], aliases[1:]) if aliases else (None,
                                                                      aliases)
@@ -83,6 +89,10 @@ class Definition(object):
     def aliases(self):
         return self._aliases
 
+    def add_aliases(self, *alias):
+        alias = tuple(a for a in alias if a not in self._aliases)
+        self._aliases = self._aliases + alias
+
     @property
     def converter(self):
         return self._converter
@@ -166,3 +176,12 @@ class DimensionDefinition(Definition):
 
         super(DimensionDefinition, self).__init__(name, symbol, aliases,
                                                   converter=None)
+
+
+class AliasDefinition(Definition):
+    """Additional alias(es) for an already existing unit
+    """
+    def __init__(self, name, aliases):
+        super(AliasDefinition, self).__init__(
+            name=name, symbol=None, aliases=aliases, converter=None
+        )
diff --git a/pint/registry.py b/pint/registry.py
index 0129ba5..1a24442 100644
--- a/pint/registry.py
+++ b/pint/registry.py
@@ -54,7 +54,7 @@ from .util import (logger, pi_theorem, solve_dependencies, ParserHelper,
 
 from .compat import tokenizer, string_types, meta
 from .definitions import (Definition, UnitDefinition, PrefixDefinition,
-                          DimensionDefinition)
+                          DimensionDefinition, AliasDefinition)
 from .converters import ScaleConverter
 from .errors import (DimensionalityError, UndefinedUnitError,
                      DefinitionSyntaxError, RedefinitionError)
@@ -263,6 +263,11 @@ class BaseRegistry(meta.with_metaclass(_Meta)):
         elif isinstance(definition, PrefixDefinition):
             d, di = self._prefixes, None
 
+        elif isinstance(definition, AliasDefinition):
+            d, di = self._units, self._units_casei
+            self._define_alias(definition, d, di)
+            return d[definition.name], d, di
+
         else:
             raise TypeError('{} is not a valid definition.'.format(definition))
 
@@ -325,6 +330,13 @@ class BaseRegistry(meta.with_metaclass(_Meta)):
         if casei_unit_dict is not None:
             casei_unit_dict[key.lower()].add(key)
 
+    def _define_alias(self, definition, unit_dict, casei_unit_dict):
+        unit = unit_dict[definition.name]
+        unit.add_aliases(*definition.aliases)
+        for alias in unit.aliases:
+            unit_dict[alias] = unit
+            casei_unit_dict[alias.lower()].add(alias)
+
     def _register_parser(self, prefix, parserfunc):
         """Register a loader for a given @ directive..
 
@@ -367,7 +379,7 @@ class BaseRegistry(meta.with_metaclass(_Meta)):
 
         ifile = SourceIterator(file)
         for no, line in ifile:
-            if line and line[0] == '@':
+            if line.startswith('@') and not line.startswith('@alias'):
                 if line.startswith('@import'):
                     if is_resource:
                         path = line[7:].strip()

