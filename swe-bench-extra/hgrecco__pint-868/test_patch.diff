diff --git a/pint/testsuite/test_definitions.py b/pint/testsuite/test_definitions.py
index 3b73fd8..8a66a4e 100644
--- a/pint/testsuite/test_definitions.py
+++ b/pint/testsuite/test_definitions.py
@@ -5,7 +5,7 @@ from __future__ import division, unicode_literals, print_function, absolute_impo
 from pint.util import (UnitsContainer)
 from pint.converters import (ScaleConverter, OffsetConverter)
 from pint.definitions import (Definition, PrefixDefinition, UnitDefinition,
-                              DimensionDefinition)
+                              DimensionDefinition, AliasDefinition)
 
 from pint.testsuite import BaseTestCase
 
@@ -88,3 +88,9 @@ class TestDefinition(BaseTestCase):
         x = Definition.from_string('[speed] = [length]/[time]')
         self.assertIsInstance(x, DimensionDefinition)
         self.assertEqual(x.reference, UnitsContainer({'[length]': 1, '[time]': -1}))
+
+    def test_alias_definition(self):
+        x = Definition.from_string("@alias meter = metro = metr")
+        self.assertIsInstance(x, AliasDefinition)
+        self.assertEqual(x.name, "meter")
+        self.assertEqual(x.aliases, ("metro", "metr"))
diff --git a/pint/testsuite/test_unit.py b/pint/testsuite/test_unit.py
index 5ce35c5..9c6bf51 100644
--- a/pint/testsuite/test_unit.py
+++ b/pint/testsuite/test_unit.py
@@ -648,3 +648,30 @@ class TestConvertWithOffset(QuantityTestCase, ParameterizedTestCase):
             if src != dst:
                 self.assertQuantityAlmostEqual(convert(expected, dst, src),
                                                value, atol=0.001)
+
+    def test_alias(self):
+        # Use load_definitions
+        ureg = UnitRegistry([
+            "canonical = [] = can = alias1 = alias2\n",
+            # overlapping aliases
+            "@alias canonical = alias2 = alias3\n",
+            # Against another alias
+            "@alias alias3 = alias4\n",
+        ])
+
+        # Use define
+        ureg.define("@alias canonical = alias5")
+
+        # Test that new aliases work
+        # Test that pre-existing aliases and symbol are not eliminated
+        for a in ("can", "alias1", "alias2", "alias3", "alias4", "alias5"):
+            self.assertEqual(ureg.Unit(a), ureg.Unit("canonical"))
+
+        # Test that aliases defined multiple times are not duplicated
+        self.assertEqual(
+            ureg._units["canonical"].aliases,
+            ("alias1", "alias2", "alias3", "alias4", "alias5")
+        )
+
+        # Define against unknown name
+        self.assertRaises(KeyError, ureg.define, "@alias notexist = something")
