diff --git a/uvicorn/__init__.py b/uvicorn/__init__.py
index bfd395e..385fbc3 100644
--- a/uvicorn/__init__.py
+++ b/uvicorn/__init__.py
@@ -1,4 +1,4 @@
 from uvicorn.main import main, run
 
-__version__ = "0.2.5"
+__version__ = "0.2.6"
 __all__ = ["main", "run"]
diff --git a/uvicorn/protocols/http/h11.py b/uvicorn/protocols/http/h11.py
index 6848630..073cddd 100644
--- a/uvicorn/protocols/http/h11.py
+++ b/uvicorn/protocols/http/h11.py
@@ -72,11 +72,15 @@ class H11Protocol(asyncio.Protocol):
         if self.access_logs:
             self.logger.debug("%s - Disconnected", self.server[0])
 
-        if self.cycle and self.cycle.more_body:
+        if self.cycle and not self.cycle.response_complete:
             self.cycle.disconnected = True
         if self.conn.our_state != h11.ERROR:
             event = h11.ConnectionClosed()
-            self.conn.send(event)
+            try:
+                self.conn.send(event)
+            except h11.LocalProtocolError:
+                # Premature client disconnect
+                pass
         self.client_event.set()
 
     def eof_received(self):
@@ -215,6 +219,9 @@ class RequestResponseCycle:
         protocol = self.protocol
         message_type = message["type"]
 
+        if self.disconnected:
+            return
+
         if not protocol.writable:
             await protocol.writable_event.wait()
 
diff --git a/uvicorn/protocols/http/httptools.py b/uvicorn/protocols/http/httptools.py
index 7344b01..ebbbb39 100644
--- a/uvicorn/protocols/http/httptools.py
+++ b/uvicorn/protocols/http/httptools.py
@@ -83,7 +83,7 @@ class HttpToolsProtocol(asyncio.Protocol):
         if self.access_logs:
             self.logger.debug("%s - Disconnected", self.server[0])
 
-        if self.cycle and self.cycle.more_body:
+        if self.cycle and not self.cycle.response_complete:
             self.cycle.disconnected = True
         self.client_event.set()
 
@@ -238,6 +238,9 @@ class RequestResponseCycle:
         protocol = self.protocol
         message_type = message["type"]
 
+        if self.disconnected:
+            return
+
         if not protocol.writable:
             await protocol.writable_event.wait()
 

