diff --git a/faker/providers/ssn/en_CA/__init__.py b/faker/providers/ssn/en_CA/__init__.py
index 0349b889..11f4acc6 100644
--- a/faker/providers/ssn/en_CA/__init__.py
+++ b/faker/providers/ssn/en_CA/__init__.py
@@ -2,36 +2,81 @@
 from __future__ import unicode_literals
 from .. import Provider as SsnProvider
 
+def checksum(sin):
+    """
+    Determine validity of a Canadian Social Insurance Number.
+    Validation is performed using a modified Luhn Algorithm.  To check
+    the Every second digit of the SIN is doubled and the result is
+    summed.  If the result is a multiple of ten, the Social Insurance
+    Number is considered valid.
+
+    https://en.wikipedia.org/wiki/Social_Insurance_Number
+    """
+
+    # Remove spaces and create a list of digits.
+    checksumCollection = list(sin.replace(' ', ''))
+    checksumCollection = [int(i) for i in checksumCollection]
+
+    # Discard the last digit, we will be calculating it later.
+    checksumCollection[-1] = 0
+
+    # Iterate over the provided SIN and double every second digit.
+    # In the case that doubling that digit results in a two-digit
+    # number, then add the two digits together and keep that sum.
+
+    for i in range(1, len(checksumCollection), 2):
+        result = checksumCollection[i] * 2
+        if result < 10:
+            checksumCollection[i] = result
+        else:
+            checksumCollection[i] = result - 10 + 1
+
+    # The appropriate checksum digit is the value that, when summed
+    # with the first eight values, results in a value divisible by 10
+
+    check_digit = 10 - (sum(checksumCollection) % 10)
+    check_digit = (0 if check_digit == 10 else check_digit)
+
+    return check_digit
 
 class Provider(SsnProvider):
 
-    # in order to create a valid SIN we need to provide a number that passes a simple modified Luhn Algorithmn checksum
-    # this function essentially reverses the checksum steps to create a random
-    # valid SIN (Social Insurance Number)
+    # In order to create a valid SIN we need to provide a number that 
+    # passes a simple modified Luhn Algorithm checksum. 
+    # 
+    # This function reverses the checksum steps to create a random
+    # valid nine-digit Canadian SIN (Social Insurance Number) in the
+    # format '### ### ###'.
     def ssn(self):
 
-        # create an array of 8 elements initialized randomly
-        digits = self.generator.random.sample(range(10), 8)
+        # Create an array of 8 elements initialized randomly.
+        digits = self.generator.random.sample(range(9), 8)
+
+        # The final step of the validation requires that all of the 
+        # digits sum to a multiple of 10. First, sum the first 8 and
+        # set the 9th to the value that results in a multiple of 10.
+        check_digit = 10 - (sum(digits) % 10)
+        check_digit = (0 if check_digit == 10 else check_digit)
 
-        # All of the digits must sum to a multiple of 10.
-        # sum the first 8 and set 9th to the value to get to a multiple of 10
-        digits.append(10 - (sum(digits) % 10))
+        digits.append(check_digit)
 
-        # digits is now the digital root of the number we want multiplied by the magic number 121 212 121
-        # reverse the multiplication which occurred on every other element
+        # digits is now the digital root of the number we want 
+        # multiplied by the magic number 121 212 121. The next step is
+        # to reverse the multiplication which occurred on every other
+        # element.
         for i in range(1, len(digits), 2):
             if digits[i] % 2 == 0:
-                digits[i] = (digits[i] / 2)
+                digits[i] = (digits[i] // 2)
             else:
-                digits[i] = (digits[i] + 9) / 2
+                digits[i] = (digits[i] + 9) // 2
 
-        # build the resulting SIN string
+        # Build the resulting SIN string.
         sin = ""
-        for i in range(0, len(digits), 1):
+        for i in range(0, len(digits)):
             sin += str(digits[i])
-            # add a space to make it conform to normal standards in Canada
-            if i % 3 == 2:
+            # Add a space to make it conform to Canadian formatting.
+            if i in (2,5):
                 sin += " "
 
-        # finally return our random but valid SIN
+        # Finally return our random but valid SIN.
         return sin
diff --git a/faker/providers/ssn/no_NO/__init__.py b/faker/providers/ssn/no_NO/__init__.py
index 207831b8..2f171d42 100644
--- a/faker/providers/ssn/no_NO/__init__.py
+++ b/faker/providers/ssn/no_NO/__init__.py
@@ -71,7 +71,7 @@ class Provider(SsnProvider):
                 gender_num = self.generator.random.choice((0, 2, 4, 6, 8))
             elif gender == 'M':
                 gender_num = self.generator.random.choice((1, 3, 5, 7, 9))
-            pnr = birthday.strftime('%y%m%d') + suffix.zfill(2) + str(gender_num)
+            pnr = birthday.strftime('%d%m%y') + suffix.zfill(2) + str(gender_num)
             pnr_nums = [int(ch) for ch in pnr]
             k1 = checksum(Provider.scale1, pnr_nums)
             k2 = checksum(Provider.scale2, pnr_nums + [k1])

