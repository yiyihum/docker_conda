diff --git a/doc/protocols.rst b/doc/protocols.rst
index e0ca431..94fe456 100644
--- a/doc/protocols.rst
+++ b/doc/protocols.rst
@@ -103,3 +103,24 @@ figshare dataset:
     ``doi:10.6084/m9.figshare.c.4362224.v1``. Attempting to download files
     from a figshare collection will raise an error.
     See `issue #274 <https://github.com/fatiando/pooch/issues/274>`__ details.
+
+Since this type of repositories store information about the files contained in
+them, we can avoid having to manually type the registry with the file names and
+their hashes.
+Instead, we can use the :meth:`pooch.Pooch.load_registry_from_doi` to
+automatically populate the registry:
+
+.. code-block:: python
+
+    POOCH = pooch.create(
+        path=pooch.os_cache("plumbus"),
+        # Use the figshare DOI
+        base_url="doi:10.6084/m9.figshare.14763051.v1/",
+        registry=None,
+    )
+
+    # Automatically populate the registry
+    POOCH.load_registry_from_doi()
+
+    # Fetch one of the files in the repository
+    fname = POOCH.fetch("tiny-data.txt")
diff --git a/pooch/core.py b/pooch/core.py
index 9375482..aa8ab13 100644
--- a/pooch/core.py
+++ b/pooch/core.py
@@ -27,7 +27,7 @@ from .utils import (
     os_cache,
     unique_file_name,
 )
-from .downloaders import choose_downloader
+from .downloaders import DOIDownloader, choose_downloader, doi_to_repository
 
 
 def retrieve(
@@ -670,6 +670,36 @@ class Pooch:
                         self.urls[file_name] = file_url
                     self.registry[file_name] = file_checksum.lower()
 
+    def load_registry_from_doi(self):
+        """
+        Populate the registry using the data repository API
+
+        Fill the registry with all the files available in the data repository,
+        along with their hashes. It will make a request to the data repository
+        API to retrieve this information. No file is downloaded during this
+        process.
+
+        .. important::
+
+            This method is intended to be used only when the ``base_url`` is
+            a DOI.
+        """
+
+        # Ensure that this is indeed a DOI-based pooch
+        downloader = choose_downloader(self.base_url)
+        if not isinstance(downloader, DOIDownloader):
+            raise ValueError(
+                f"Invalid base_url '{self.base_url}': "
+                + "Pooch.load_registry_from_doi is only implemented for DOIs"
+            )
+
+        # Create a repository instance
+        doi = self.base_url.replace("doi:", "")
+        repository = doi_to_repository(doi)
+
+        # Call registry population for this repository
+        return repository.populate_registry(self)
+
     def is_available(self, fname, downloader=None):
         """
         Check availability of a remote file without downloading it.
diff --git a/pooch/downloaders.py b/pooch/downloaders.py
index b4ff0a0..eabb08a 100644
--- a/pooch/downloaders.py
+++ b/pooch/downloaders.py
@@ -593,33 +593,8 @@ class DOIDownloader:  # pylint: disable=too-few-public-methods
 
         """
 
-        repositories = [
-            FigshareRepository,
-            ZenodoRepository,
-            DataverseRepository,
-        ]
-
-        # Extract the DOI and the repository information
         parsed_url = parse_url(url)
-        doi = parsed_url["netloc"]
-        archive_url = doi_to_url(doi)
-
-        # Try the converters one by one until one of them returned a URL
-        data_repository = None
-        for repo in repositories:
-            if data_repository is None:
-                data_repository = repo.initialize(
-                    archive_url=archive_url,
-                    doi=doi,
-                )
-
-        if data_repository is None:
-            repository = parse_url(archive_url)["netloc"]
-            raise ValueError(
-                f"Invalid data repository '{repository}'. "
-                "To request or contribute support for this repository, "
-                "please open an issue at https://github.com/fatiando/pooch/issues"
-            )
+        data_repository = doi_to_repository(parsed_url["netloc"])
 
         # Resolve the URL
         file_name = parsed_url["path"].split("/")[-1]
@@ -657,6 +632,59 @@ def doi_to_url(doi):
     return url
 
 
+def doi_to_repository(doi):
+    """
+    Instantiate a data repository instance from a given DOI.
+
+    This function implements the chain of responsibility dispatch
+    to the correct data repository class.
+
+    Parameters
+    ----------
+    doi : str
+        The DOI of the archive.
+
+    Returns
+    -------
+    data_repository : DataRepository
+        The data repository object
+    """
+
+    # This should go away in a separate issue: DOI handling should
+    # not rely on the (non-)existence of trailing slashes. The issue
+    # is documented in https://github.com/fatiando/pooch/issues/324
+    if doi[-1] == "/":
+        doi = doi[:-1]
+
+    repositories = [
+        FigshareRepository,
+        ZenodoRepository,
+        DataverseRepository,
+    ]
+
+    # Extract the DOI and the repository information
+    archive_url = doi_to_url(doi)
+
+    # Try the converters one by one until one of them returned a URL
+    data_repository = None
+    for repo in repositories:
+        if data_repository is None:
+            data_repository = repo.initialize(
+                archive_url=archive_url,
+                doi=doi,
+            )
+
+    if data_repository is None:
+        repository = parse_url(archive_url)["netloc"]
+        raise ValueError(
+            f"Invalid data repository '{repository}'. "
+            "To request or contribute support for this repository, "
+            "please open an issue at https://github.com/fatiando/pooch/issues"
+        )
+
+    return data_repository
+
+
 class DataRepository:  # pylint: disable=too-few-public-methods, missing-class-docstring
     @classmethod
     def initialize(cls, doi, archive_url):  # pylint: disable=unused-argument
@@ -697,11 +725,24 @@ class DataRepository:  # pylint: disable=too-few-public-methods, missing-class-d
 
         raise NotImplementedError  # pragma: no cover
 
+    def populate_registry(self, pooch):
+        """
+        Populate the registry using the data repository's API
+
+        Parameters
+        ----------
+        pooch : Pooch
+            The pooch instance that the registry will be added to.
+        """
+
+        raise NotImplementedError  # pragma: no cover
+
 
 class ZenodoRepository(DataRepository):  # pylint: disable=missing-class-docstring
     def __init__(self, doi, archive_url):
         self.archive_url = archive_url
         self.doi = doi
+        self._api_response = None
 
     @classmethod
     def initialize(cls, doi, archive_url):
@@ -729,6 +770,18 @@ class ZenodoRepository(DataRepository):  # pylint: disable=missing-class-docstri
 
         return cls(doi, archive_url)
 
+    @property
+    def api_response(self):
+        """Cached API response from Zenodo"""
+
+        if self._api_response is None:
+            article_id = self.archive_url.split("/")[-1]
+            self._api_response = requests.get(
+                f"https://zenodo.org/api/records/{article_id}"
+            ).json()
+
+        return self._api_response
+
     def download_url(self, file_name):
         """
         Use the repository API to get the download URL for a file given
@@ -744,10 +797,8 @@ class ZenodoRepository(DataRepository):  # pylint: disable=missing-class-docstri
         download_url : str
             The HTTP URL that can be used to download the file.
         """
-        article_id = self.archive_url.split("/")[-1]
-        # With the ID, we can get a list of files and their download links
-        article = requests.get(f"https://zenodo.org/api/records/{article_id}").json()
-        files = {item["key"]: item for item in article["files"]}
+
+        files = {item["key"]: item for item in self.api_response["files"]}
         if file_name not in files:
             raise ValueError(
                 f"File '{file_name}' not found in data archive {self.archive_url} (doi:{self.doi})."
@@ -755,11 +806,25 @@ class ZenodoRepository(DataRepository):  # pylint: disable=missing-class-docstri
         download_url = files[file_name]["links"]["self"]
         return download_url
 
+    def populate_registry(self, pooch):
+        """
+        Populate the registry using the data repository's API
+
+        Parameters
+        ----------
+        pooch : Pooch
+            The pooch instance that the registry will be added to.
+        """
+
+        for filedata in self.api_response["files"]:
+            pooch.registry[filedata["key"]] = filedata["checksum"]
+
 
 class FigshareRepository(DataRepository):  # pylint: disable=missing-class-docstring
     def __init__(self, doi, archive_url):
         self.archive_url = archive_url
         self.doi = doi
+        self._api_response = None
 
     @classmethod
     def initialize(cls, doi, archive_url):
@@ -787,6 +852,25 @@ class FigshareRepository(DataRepository):  # pylint: disable=missing-class-docst
 
         return cls(doi, archive_url)
 
+    @property
+    def api_response(self):
+        """Cached API response from Figshare"""
+
+        if self._api_response is None:
+            # Use the figshare API to find the article ID from the DOI
+            article = requests.get(
+                f"https://api.figshare.com/v2/articles?doi={self.doi}"
+            ).json()[0]
+            article_id = article["id"]
+            # With the ID, we can get a list of files and their download links
+            response = requests.get(
+                f"https://api.figshare.com/v2/articles/{article_id}/files"
+            )
+            response.raise_for_status()
+            self._api_response = response.json()
+
+        return self._api_response
+
     def download_url(self, file_name):
         """
         Use the repository API to get the download URL for a file given
@@ -803,17 +887,7 @@ class FigshareRepository(DataRepository):  # pylint: disable=missing-class-docst
             The HTTP URL that can be used to download the file.
         """
 
-        # Use the figshare API to find the article ID from the DOI
-        article = requests.get(
-            f"https://api.figshare.com/v2/articles?doi={self.doi}"
-        ).json()[0]
-        article_id = article["id"]
-        # With the ID, we can get a list of files and their download links
-        response = requests.get(
-            f"https://api.figshare.com/v2/articles/{article_id}/files"
-        )
-        response.raise_for_status()
-        files = {item["name"]: item for item in response.json()}
+        files = {item["name"]: item for item in self.api_response}
         if file_name not in files:
             raise ValueError(
                 f"File '{file_name}' not found in data archive {self.archive_url} (doi:{self.doi})."
@@ -821,11 +895,25 @@ class FigshareRepository(DataRepository):  # pylint: disable=missing-class-docst
         download_url = files[file_name]["download_url"]
         return download_url
 
+    def populate_registry(self, pooch):
+        """
+        Populate the registry using the data repository's API
+
+        Parameters
+        ----------
+        pooch : Pooch
+            The pooch instance that the registry will be added to.
+        """
+
+        for filedata in self.api_response:
+            pooch.registry[filedata["name"]] = f"md5:{filedata['computed_md5']}"
+
 
 class DataverseRepository(DataRepository):  # pylint: disable=missing-class-docstring
     def __init__(self, doi, archive_url):
         self.archive_url = archive_url
         self.doi = doi
+        self._api_response = None
 
     @classmethod
     def initialize(cls, doi, archive_url):
@@ -847,17 +935,48 @@ class DataverseRepository(DataRepository):  # pylint: disable=missing-class-docs
         """
 
         # Access the DOI as if this was a DataVerse instance
+        response = cls._get_api_response(doi, archive_url)
+
+        # If we failed, this is probably not a DataVerse instance
+        if 400 <= response.status_code < 600:
+            return None
+
+        # Initialize the repository and overwrite the api response
+        repository = cls(doi, archive_url)
+        repository.api_response = response
+        return repository
+
+    @classmethod
+    def _get_api_response(cls, doi, archive_url):
+        """
+        Perform the actual API request
+
+        This has been separated into a separate ``classmethod``, as it can be
+        used prior and after the initialization.
+        """
         parsed = parse_url(archive_url)
         response = requests.get(
             f"{parsed['protocol']}://{parsed['netloc']}/api/datasets/"
             f":persistentId?persistentId=doi:{doi}"
         )
+        return response
 
-        # If we failed, this is probably not a DataVerse instance
-        if 400 <= response.status_code < 600:
-            return None
+    @property
+    def api_response(self):
+        """Cached API response from a DataVerse instance"""
 
-        return cls(doi, archive_url)
+        if self._api_response is None:
+            self._api_response = self._get_api_response(
+                self.doi, self.archive_url
+            )  # pragma: no cover
+
+        return self._api_response
+
+    @api_response.setter
+    def api_response(self, response):
+        """Update the cached API response"""
+
+        self._api_response = response
 
     def download_url(self, file_name):
         """
@@ -875,15 +994,10 @@ class DataverseRepository(DataRepository):  # pylint: disable=missing-class-docs
             The HTTP URL that can be used to download the file.
         """
 
-        # Access the DOI as if this was a DataVerse instance
         parsed = parse_url(self.archive_url)
-        response = requests.get(
-            f"{parsed['protocol']}://{parsed['netloc']}/api/datasets/"
-            f":persistentId?persistentId=doi:{self.doi}"
-        )
 
         # Iterate over the given files until we find one of the requested name
-        for filedata in response.json()["data"]["latestVersion"]["files"]:
+        for filedata in self.api_response.json()["data"]["latestVersion"]["files"]:
             if file_name == filedata["dataFile"]["filename"]:
                 return (
                     f"{parsed['protocol']}://{parsed['netloc']}/api/access/datafile/"
@@ -893,3 +1007,18 @@ class DataverseRepository(DataRepository):  # pylint: disable=missing-class-docs
         raise ValueError(
             f"File '{file_name}' not found in data archive {self.archive_url} (doi:{self.doi})."
         )
+
+    def populate_registry(self, pooch):
+        """
+        Populate the registry using the data repository's API
+
+        Parameters
+        ----------
+        pooch : Pooch
+            The pooch instance that the registry will be added to.
+        """
+
+        for filedata in self.api_response.json()["data"]["latestVersion"]["files"]:
+            pooch.registry[
+                filedata["dataFile"]["filename"]
+            ] = f"md5:{filedata['dataFile']['md5']}"
