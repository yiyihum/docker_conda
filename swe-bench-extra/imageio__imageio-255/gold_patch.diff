diff --git a/imageio/plugins/tifffile.py b/imageio/plugins/tifffile.py
index f6d25ad..a26ea79 100644
--- a/imageio/plugins/tifffile.py
+++ b/imageio/plugins/tifffile.py
@@ -37,8 +37,11 @@ READ_METADATA_KEYS = ('planar_configuration', 'is_fluoview', 'is_nih',
 
 
 class TiffFormat(Format):
-
     """ Provides support for a wide range of Tiff images.
+    
+    Images that contain multiple pages can be read using ``imageio.mimread()``
+    to read the individual pages, or ``imageio.volread()`` to obtain a
+    single (higher dimensional) array.
 
     Parameters for reading
     ----------------------
@@ -177,17 +180,28 @@ class TiffFormat(Format):
 
         def _close(self):
             self._tf.close()
-
+        
         def _get_length(self):
-            return len(self._tf)
-
+            if self.request.mode[1] in 'vV':
+                return 1  # or can there be pages in pages or something?
+            else:
+                return len(self._tf)
+        
         def _get_data(self, index):
-            # Get data
-            if index < 0 or index >= len(self._tf):
-                raise IndexError(
-                    'Index out of range while reading from tiff file')
-            im = self._tf[index].asarray()
-            meta = self._meta or self._get_meta_data(index)
+            if self.request.mode[1] in 'vV':
+                # Read data as single 3D (+ color channels) array
+                if index != 0:
+                    raise IndexError(
+                        'Tiff support no more than 1 "volume" per file')
+                im = self._tf.asarray()  # request as singleton image
+                meta = self._meta
+            else:
+                # Read as 2D image
+                if index < 0 or index >= len(self._tf):
+                    raise IndexError(
+                        'Index out of range while reading from tiff file')
+                im = self._tf[index].asarray()
+                meta = self._meta or self._get_meta_data(index)
             # Return array and empty meta data
             return im, meta
 
@@ -216,6 +230,8 @@ class TiffFormat(Format):
         def _append_data(self, im, meta):
             if meta:
                 self.set_meta_data(meta)
+            # No need to check self.request.mode; tiffile figures out whether
+            # this is a single page, or all page data at once.
             self._tf.save(np.asanyarray(im), **self._meta)
 
         def set_meta_data(self, meta):
