diff --git a/pydantic/main.py b/pydantic/main.py
--- a/pydantic/main.py
+++ b/pydantic/main.py
@@ -35,6 +35,7 @@
 from .types import PyObject, StrBytes
 from .typing import AnyCallable, AnyType, ForwardRef, is_classvar, resolve_annotations, update_field_forward_refs
 from .utils import (
+    ClassAttribute,
     GetterDict,
     Representation,
     ValueItems,
@@ -300,7 +301,8 @@ def __new__(mcs, name, bases, namespace, **kwargs):  # noqa C901
         }
 
         cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)
-        cls.__signature__ = generate_model_signature(cls.__init__, fields, config)
+        # set __signature__ attr only for model class, but not for its instances
+        cls.__signature__ = ClassAttribute('__signature__', generate_model_signature(cls.__init__, fields, config))
         return cls
 
 
diff --git a/pydantic/utils.py b/pydantic/utils.py
--- a/pydantic/utils.py
+++ b/pydantic/utils.py
@@ -45,6 +45,7 @@
     'GetterDict',
     'ValueItems',
     'version_info',  # required here to match behaviour in v1.3
+    'ClassAttribute',
 )
 
 
@@ -439,3 +440,23 @@ def _normalize_indexes(
 
     def __repr_args__(self) -> 'ReprArgs':
         return [(None, self._items)]
+
+
+class ClassAttribute:
+    """
+    Hide class attribute from its instances
+    """
+
+    __slots__ = (
+        'name',
+        'value',
+    )
+
+    def __init__(self, name: str, value: Any) -> None:
+        self.name = name
+        self.value = value
+
+    def __get__(self, instance: Any, owner: Type[Any]) -> None:
+        if instance is None:
+            return self.value
+        raise AttributeError(f'{self.name!r} attribute of {owner.__name__!r} is class-only')

