diff --git a/asv/results.py b/asv/results.py
index 76dbe6b..8513b71 100644
--- a/asv/results.py
+++ b/asv/results.py
@@ -4,6 +4,7 @@
 from __future__ import (absolute_import, division, print_function,
                         unicode_literals)
 
+import sys
 import base64
 import os
 import zlib
@@ -405,15 +406,31 @@ class Results(object):
         self._benchmark_version[benchmark_name] = benchmark_version
 
         if 'profile' in result and result['profile']:
-            self._profiles[benchmark_name] = base64.b64encode(
+            profile_data = base64.b64encode(
                 zlib.compress(result['profile']))
+            if sys.version_info[0] >= 3:
+                profile_data = profile_data.decode('ascii')
+            self._profiles[benchmark_name] = profile_data
 
     def get_profile(self, benchmark_name):
         """
         Get the profile data for the given benchmark name.
+
+        Parameters
+        ----------
+        benchmark_name : str
+            Name of benchmark
+
+        Returns
+        -------
+        profile_data : bytes
+            Raw profile data
+
         """
-        return zlib.decompress(
-            base64.b64decode(self._profiles[benchmark_name]))
+        profile_data = self._profiles[benchmark_name]
+        if sys.version_info[0] >= 3:
+            profile_data = profile_data.encode('ascii')
+        return zlib.decompress(base64.b64decode(profile_data))
 
     def has_profile(self, benchmark_name):
         """
diff --git a/asv/util.py b/asv/util.py
index 748b9ba..8e883dd 100644
--- a/asv/util.py
+++ b/asv/util.py
@@ -375,7 +375,9 @@ def check_output(args, valid_return_codes=(0,), timeout=600, dots=True,
         Setting to None ignores all return codes.
 
     timeout : number, optional
-        Kill the process if it lasts longer than `timeout` seconds.
+        Kill the process if it does not produce any output in `timeout`
+        seconds. If `None`, there is no timeout.
+        Default: 10 min
 
     dots : bool, optional
         If `True` (default) write a dot to the console to show
@@ -475,7 +477,7 @@ def check_output(args, valid_return_codes=(0,), timeout=600, dots=True,
         def watcher_run():
             while proc.returncode is None:
                 time.sleep(0.1)
-                if time.time() - start_time[0] > timeout:
+                if timeout is not None and time.time() - start_time[0] > timeout:
                     was_timeout[0] = True
                     proc.send_signal(signal.CTRL_BREAK_EVENT)
 
@@ -522,8 +524,12 @@ def check_output(args, valid_return_codes=(0,), timeout=600, dots=True,
 
             while proc.poll() is None:
                 try:
-                    rlist, wlist, xlist = select.select(
-                        list(fds.keys()), [], [], timeout)
+                    if timeout is None:
+                        rlist, wlist, xlist = select.select(
+                            list(fds.keys()), [], [])
+                    else:
+                        rlist, wlist, xlist = select.select(
+                            list(fds.keys()), [], [], timeout)
                 except select.error as err:
                     if err.args[0] == errno.EINTR:
                         # interrupted by signal handler; try again
@@ -643,7 +649,11 @@ def write_json(path, data, api_version=None):
         data = dict(data)
         data['version'] = api_version
 
-    with long_path_open(path, 'w') as fd:
+    open_kwargs = {}
+    if sys.version_info[0] >= 3:
+        open_kwargs['encoding'] = 'utf-8'
+
+    with long_path_open(path, 'w', **open_kwargs) as fd:
         json.dump(data, fd, indent=4, sort_keys=True)
 
 
@@ -656,7 +666,11 @@ def load_json(path, api_version=None, cleanup=True):
 
     path = os.path.abspath(path)
 
-    with long_path_open(path, 'r') as fd:
+    open_kwargs = {}
+    if sys.version_info[0] >= 3:
+        open_kwargs['encoding'] = 'utf-8'
+
+    with long_path_open(path, 'r', **open_kwargs) as fd:
         content = fd.read()
 
     if cleanup:

