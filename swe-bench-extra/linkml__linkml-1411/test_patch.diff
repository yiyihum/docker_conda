diff --git a/tests/test_generators/input/jsonschema_multivalued_element_constraints.yaml b/tests/test_generators/input/jsonschema_multivalued_element_constraints.yaml
index a4c0bd89..0eaddd7f 100644
--- a/tests/test_generators/input/jsonschema_multivalued_element_constraints.yaml
+++ b/tests/test_generators/input/jsonschema_multivalued_element_constraints.yaml
@@ -17,8 +17,31 @@ schema:
       multivalued: true
       pattern: e.*
 
-    # TODO: this should also contain test cases for has_member and all_members
-    # See: https://github.com/linkml/linkml/issues/1107
+    int_list_with_all_members:
+      range: integer
+      multivalued: true
+      all_members:
+        minimum_value: 2
+        maximum_value: 5
+
+    int_list_with_has_member:
+      range: integer
+      multivalued: true
+      has_member:
+        minimum_value: 2
+        maximum_value: 5
+
+    string_list_with_all_members:
+      range: string
+      multivalued: true
+      all_members:
+        pattern: e.*
+
+    string_list_with_has_member:
+      range: string
+      multivalued: true
+      has_member:
+        pattern: e.*
 
   classes:
     Test:
@@ -26,6 +49,10 @@ schema:
       slots:
         - int_list
         - string_list
+        - int_list_with_all_members
+        - int_list_with_has_member
+        - string_list_with_all_members
+        - string_list_with_has_member
 json_schema:
   properties:
     int_list:
@@ -35,6 +62,20 @@ json_schema:
     string_list:
       items:
         pattern: e.*
+    int_list_with_all_members:
+      items:
+        minimum: 2
+        maximum: 5
+    int_list_with_has_member:
+      contains:
+        minimum: 2
+        maximum: 5
+    string_list_with_all_members:
+      items:
+        pattern: e.*
+    string_list_with_has_member:
+      contains:
+        pattern: e.*
 data_cases:
   - data: 
       int_list: [2, 3, 4, 5]
@@ -53,3 +94,37 @@ data_cases:
         - echo
         - foxtrot
     error_message: Failed validating 'pattern'
+  - data: 
+      int_list_with_all_members: [2, 3, 4, 5]
+  - data:
+      int_list_with_all_members: [1, 2, 3]
+    error_message: Failed validating 'minimum'
+  - data: 
+      int_list_with_has_member: [2, 3, 4, 5]
+  - data:
+      int_list_with_has_member: [0, 1, 2]
+  - data:
+      int_list_with_has_member: [6, 7, 8]
+    error_message: Failed validating 'contains'
+  - data:
+      string_list_with_all_members: 
+        - echo
+        - elephant
+  - data:
+      string_list_with_all_members: 
+        - echo
+        - foxtrot
+    error_message: Failed validating 'pattern'
+  - data:
+      string_list_with_has_member: 
+        - echo
+        - elephant
+  - data:
+      string_list_with_has_member: 
+        - echo
+        - foxtrot
+  - data:
+      string_list_with_has_member: 
+        - foxtrot
+        - golf
+    error_message: Failed validating 'contains'
diff --git a/tests/test_generators/input/jsonschema_rules_in_non_root_class.yaml b/tests/test_generators/input/jsonschema_rules_in_non_root_class.yaml
new file mode 100644
index 00000000..b6abe7b6
--- /dev/null
+++ b/tests/test_generators/input/jsonschema_rules_in_non_root_class.yaml
@@ -0,0 +1,69 @@
+schema:
+  name: test_rules_in_non_root_class
+  id: http://example.org/test_rules_in_non_root_class
+  prefixes:
+    linkml: https://w3id.org/linkml/
+  imports:
+    - linkml:types
+  slots:
+    addresses:
+      range: Address
+      multivalued: true
+      inlined: true
+      inlined_as_list: true
+    street_address:
+    country:
+    postal_code:
+    telephone:
+
+  classes:
+    Address:
+      slots:
+        - street_address
+        - country
+        - postal_code
+        - telephone
+      rules:
+        - preconditions:
+            slot_conditions:
+              country:
+                any_of:
+                  - equals_string: USA
+                  - equals_string: USA_territory
+          postconditions:
+            slot_conditions:
+              postal_code:
+                pattern: "[0-9]{5}(-[0-9]{4})?"
+              telephone:
+                pattern: "^\\+1 "
+    AddressCollection:
+      slots:
+        - addresses
+      tree_root: true
+
+data_cases:
+  - data: 
+      addresses:
+        - street_address: 123 main street
+          country: USA
+          postal_code: "12345"
+          telephone: "+1 555 555 1234"
+  - data: 
+      addresses:
+        - street_address: 123 main street
+          country: USA_territory
+          postal_code: "12345"
+          telephone: "+1 555 555 1234"
+  - data: 
+      addresses:
+        - street_address: 123 main street
+          country: USA
+          postal_code: "DK-1448"
+          telephone: "+1 555 555 1234"
+    error_message: "'DK-1448' does not match"
+  - data: 
+      addresses:
+        - street_address: Asiatisk Plads 2
+          country: DEN
+          postal_code: "DK-1448"
+          telephone: "+45 5555 5555"
diff --git a/tests/test_generators/test_jsonschemagen.py b/tests/test_generators/test_jsonschemagen.py
index 463733e9..5c1100fd 100644
--- a/tests/test_generators/test_jsonschemagen.py
+++ b/tests/test_generators/test_jsonschemagen.py
@@ -201,6 +201,11 @@ class JsonSchemaTestCase(unittest.TestCase):
                     schema, case["json_schema"], case.get("data_cases", [])
                 )
 
+    def test_rules_in_non_root_class(self):
+        """Tests that rules are applied to slots in non-root classes. """
+
+        self.externalFileTest("jsonschema_rules_in_non_root_class.yaml")
+
     def test_range_unions(self):
         """Tests various permutations of range unions.
 
diff --git a/tests/test_issues/test_linkml_issue_723.py b/tests/test_issues/test_linkml_issue_723.py
index db6db433..a4927b0a 100644
--- a/tests/test_issues/test_linkml_issue_723.py
+++ b/tests/test_issues/test_linkml_issue_723.py
@@ -277,7 +277,6 @@ class Issue723ExportCase(TestEnvironmentTestCase):
         p3.roles = [mod.Role.ANALYST, mod.Role.INVESTIGATOR]
         self.assertEqual(p, p3)
         self.assertEqual(p.status, mod.VitalStatus.ALIVE)
-        self.assertEqual(type(p.status), mod.VitalStatus)
         self.assertEqual(p.roles, [mod.Role.ANALYST, mod.Role.INVESTIGATOR])
         # test the "double wrap" code
         p.status = mod.VitalStatus(mod.VitalStatus.ALIVE)
