diff --git a/sphinx_issues.py b/sphinx_issues.py
index 24b9386..532858e 100644
--- a/sphinx_issues.py
+++ b/sphinx_issues.py
@@ -41,59 +41,89 @@ def user_role(name, rawtext, text, lineno,
     link = nodes.reference(text=text, refuri=ref, **options)
     return [link], []
 
-
-def _make_issue_node(issue_no, config, options=None):
-    options = options or {}
-    if issue_no not in ('-', '0'):
-        if config.issues_uri:
-            ref = config.issues_uri.format(issue=issue_no)
-        elif config.issues_github_path:
-            ref = 'https://github.com/{0}/issues/{1}'.format(
-                config.issues_github_path, issue_no
-            )
+class IssueRole(object):
+    def __init__(self, uri_config_option, format_kwarg, github_uri_template):
+        self.uri_config_option = uri_config_option
+        self.format_kwarg = format_kwarg
+        self.github_uri_template = github_uri_template
+
+    def make_node(self, issue_no, config, options=None):
+        options = options or {}
+        if issue_no not in ('-', '0'):
+            uri_template = getattr(config, self.uri_config_option, None)
+            if uri_template:
+                ref = uri_template.format(**{self.format_kwarg: issue_no})
+            elif config.issues_github_path:
+                ref = self.github_uri_template.format(
+                    issues_github_path=config.issues_github_path,
+                    n=issue_no,
+                )
+            else:
+                raise ValueError(
+                    'Neither {} nor issues_github_path '
+                    'is set'.format(self.uri_config_option)
+                )
+            issue_text = '#{0}'.format(issue_no)
+            link = nodes.reference(text=issue_text, refuri=ref, **options)
         else:
-            raise ValueError('Neither issues_uri nor issues_github_path is set')
-        issue_text = '#{0}'.format(issue_no)
-        link = nodes.reference(text=issue_text, refuri=ref, **options)
-    else:
-        link = None
-    return link
-
-
-def issue_role(name, rawtext, text, lineno,
-               inliner, options=None, content=None):
-    """Sphinx role for linking to an issue. Must have
-    `issues_uri` or `issues_github_path` configured in ``conf.py``.
-
-    Examples: ::
-
-        :issue:`123`
-        :issue:`42,45`
-    """
-    options = options or {}
-    content = content or []
-    issue_nos = [each.strip() for each in utils.unescape(text).split(',')]
-    config = inliner.document.settings.env.app.config
-    ret = []
-    for i, issue_no in enumerate(issue_nos):
-        node = _make_issue_node(issue_no, config, options=options)
-        ret.append(node)
-        if i != len(issue_nos) - 1:
-            sep = nodes.raw(text=', ', format='html')
-            ret.append(sep)
-    return ret, []
+            link = None
+        return link
+
+    def __call__(self, name, rawtext, text, lineno,
+                 inliner, options=None, content=None):
+        options = options or {}
+        content = content or []
+        issue_nos = [each.strip() for each in utils.unescape(text).split(',')]
+        config = inliner.document.settings.env.app.config
+        ret = []
+        for i, issue_no in enumerate(issue_nos):
+            node = self.make_node(issue_no, config, options=options)
+            ret.append(node)
+            if i != len(issue_nos) - 1:
+                sep = nodes.raw(text=', ', format='html')
+                ret.append(sep)
+        return ret, []
+
+
+"""Sphinx role for linking to an issue. Must have
+`issues_uri` or `issues_github_path` configured in ``conf.py``.
+Examples: ::
+    :issue:`123`
+    :issue:`42,45`
+"""
+issue_role = IssueRole(
+    uri_config_option='issues_uri',
+    format_kwarg='issue',
+    github_uri_template='https://github.com/{issues_github_path}/issues/{n}'
+)
+
+"""Sphinx role for linking to a pull request. Must have
+`issues_pr_uri` or `issues_github_path` configured in ``conf.py``.
+Examples: ::
+    :pr:`123`
+    :pr:`42,45`
+"""
+pr_role = IssueRole(
+    uri_config_option='issues_pr_uri',
+    format_kwarg='pr',
+    github_uri_template='https://github.com/{issues_github_path}/pull/{n}'
+)
 
 
 def setup(app):
     # Format template for issues URI
     # e.g. 'https://github.com/sloria/marshmallow/issues/{issue}
     app.add_config_value('issues_uri', default=None, rebuild='html')
+    # Format template for PR URI
+    # e.g. 'https://github.com/sloria/marshmallow/pull/{issue}
+    app.add_config_value('issues_pr_uri', default=None, rebuild='html')
     # Shortcut for Github, e.g. 'sloria/marshmallow'
     app.add_config_value('issues_github_path', default=None, rebuild='html')
     # Format template for user profile URI
     # e.g. 'https://github.com/{user}'
     app.add_config_value('issues_user_uri', default=None, rebuild='html')
     app.add_role('issue', issue_role)
+    app.add_role('pr', pr_role)
     app.add_role('user', user_role)
     return {
         'version': __version__,

