diff --git a/pints/__init__.py b/pints/__init__.py
index e6448e64..1c1591d5 100644
--- a/pints/__init__.py
+++ b/pints/__init__.py
@@ -100,6 +100,7 @@ from ._log_priors import (
     HalfCauchyLogPrior,
     InverseGammaLogPrior,
     LogNormalLogPrior,
+    LogUniformLogPrior,
     MultivariateGaussianLogPrior,
     NormalLogPrior,
     StudentTLogPrior,
diff --git a/pints/_log_priors.py b/pints/_log_priors.py
index eb669ab9..77edbac6 100644
--- a/pints/_log_priors.py
+++ b/pints/_log_priors.py
@@ -748,6 +748,74 @@ class LogNormalLogPrior(pints.LogPrior):
                                        s=self._scale, size=(n, 1))
 
 
+class LogUniformLogPrior(pints.LogPrior):
+    r"""
+    Defines a log-uniform prior over a given range.
+
+    The range includes the lower and upper boundaries, so that any
+    point ``x`` with a non-zero prior must have ``0 < a <= x < b``.
+
+    In 1D this has pdf
+
+    .. math::
+        f(x|a,b)=\begin{cases}0,&\text{if }x\not\in
+        [a,b]\\\frac{1}{x \log(\frac{b}{a})}
+        ,&\text{if }x\in[a,b]\end{cases}.
+
+    A random variable :math:`X` distributed according to this pdf has
+    expectation
+
+    .. math::
+        \mathrm{E}(X)=\frac{b-a}{\log(b/a)}.
+
+    For example, to create a prior with :math:`x\in[1e-2,1e2]`, use::
+
+        p = pints.LogUniformLogPrior(1e-2, 1e2)
+
+    Extends :class:`LogPrior`.
+    """
+    def __init__(self, a, b):
+        if a <= 0:
+            raise ValueError("a must be > 0")
+        if b <= a:
+            raise ValueError("b must be > a > 0")
+
+        self._a = a
+        self._b = b
+        #constant for S1 evaluation
+        self._c = np.divide(1, np.log(np.divide(b, a)))
+
+    def __call__(self, x):
+        return scipy.stats.loguniform.logpdf(x, self._a, self._b)
+
+    def cdf(self, x):
+        """ See :meth:`LogPrior.cdf()`. """
+        return scipy.stats.loguniform.cdf(x, self._a, self._b)
+
+    def icdf(self, p):
+        """ See :meth:`LogPrior.icdf()`. """
+        return scipy.stats.loguniform.ppf(p, self._a, self._b)
+
+    def evaluateS1(self, x):
+        """ See :meth:`LogPrior.evaluateS1()`. """
+        dp = np.array(- 1 / x)
+        # Set values outside limits to nan
+        dp[(np.asarray(x) < self._a) | (np.asarray(x) > self._b)] = np.nan
+        return self(x), dp
+
+    def mean(self):
+        """ See :meth:`LogPrior.mean()`. """
+        return scipy.stats.loguniform.mean(self._a, self._b)
+
+    def n_parameters(self):
+        """ See :meth:`LogPrior.n_parameters()`. """
+        return 1
+
+    def sample(self, n=1):
+        """ See :meth:`LogPrior.sample()`. """
+        return scipy.stats.loguniform.rvs(self._a, self._b, size=(n, 1))
+
+
 class MultivariateGaussianLogPrior(pints.LogPrior):
     r"""
     Defines a multivariate Gaussian (log) prior with a given ``mean`` and

