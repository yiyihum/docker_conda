diff --git a/pynetdicom/tests/test_pdu_items.py b/pynetdicom/tests/test_pdu_items.py
index a2de773e0..1c84825a7 100644
--- a/pynetdicom/tests/test_pdu_items.py
+++ b/pynetdicom/tests/test_pdu_items.py
@@ -178,9 +178,9 @@ class TestPDU(object):
             item.item_length
 
     def test_item_type_raises(self):
-        """Test PDU.pdu_type raises ValueError."""
+        """Test PDUItem.item_type raises ValueError."""
         item = PDUItem()
-        with pytest.raises(ValueError):
+        with pytest.raises(KeyError):
             item.item_type
 
     def test_wrap_bytes(self):
diff --git a/pynetdicom/tests/test_transport.py b/pynetdicom/tests/test_transport.py
index 2650093de..7752eb5ac 100644
--- a/pynetdicom/tests/test_transport.py
+++ b/pynetdicom/tests/test_transport.py
@@ -169,9 +169,16 @@ def client_context(request):
 
 class TestTLS(object):
     """Test using TLS to wrap the association."""
+    def setup(self):
+        self.ae = None
+
+    def teardown(self):
+        if self.ae:
+            self.ae.shutdown()
+
     def test_tls_not_server_not_client(self):
         """Test associating with no TLS on either end."""
-        ae = AE()
+        self.ae = ae = AE()
         ae.add_supported_context('1.2.840.10008.1.1')
         server = ae.start_server(('', 11112), block=False)
 
@@ -183,10 +190,16 @@ class TestTLS(object):
 
         server.shutdown()
 
+        assert len(server.active_associations) == 0
+
     def test_tls_not_server_yes_client(self, client_context):
         """Test wrapping the requestor socket with TLS (but not server)."""
-        ae = AE()
+        self.ae = ae = AE()
+        ae.acse_timeout = 0.5
+        ae.dimse_timeout = 0.5
+        ae.network_timeout = 0.5
         ae.add_supported_context('1.2.840.10008.1.1')
+
         server = ae.start_server(('', 11112), block=False)
 
         ae.add_requested_context('1.2.840.10008.1.1')
@@ -195,9 +208,13 @@ class TestTLS(object):
 
         server.shutdown()
 
+        time.sleep(0.5)
+
+        assert len(server.active_associations) == 0
+
     def test_tls_yes_server_not_client(self, server_context):
         """Test wrapping the requestor socket with TLS (and server)."""
-        ae = AE()
+        self.ae = ae = AE()
         ae.add_supported_context('1.2.840.10008.1.1')
         server = ae.start_server(
             ('', 11112),
@@ -211,9 +228,11 @@ class TestTLS(object):
 
         server.shutdown()
 
+        assert len(server.active_associations) == 0
+
     def test_tls_yes_server_yes_client(self, server_context, client_context):
         """Test associating with no TLS on either end."""
-        ae = AE()
+        self.ae = ae = AE()
         ae.add_supported_context('1.2.840.10008.1.1')
         server = ae.start_server(
             ('', 11112),
@@ -229,6 +248,8 @@ class TestTLS(object):
 
         server.shutdown()
 
+        assert len(server.active_associations) == 0
+
 
 class TestAssociationServer(object):
     def setup(self):
