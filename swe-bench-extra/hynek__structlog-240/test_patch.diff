diff --git a/tests/test_contextvars.py b/tests/test_contextvars.py
index 1257230..c9cf1b0 100644
--- a/tests/test_contextvars.py
+++ b/tests/test_contextvars.py
@@ -7,7 +7,7 @@ import pytest
 from structlog.contextvars import (
     bind_contextvars,
     clear_contextvars,
-    merge_contextvars_context,
+    merge_contextvars,
     unbind_contextvars,
 )
 
@@ -20,12 +20,12 @@ class TestNewContextvars(object):
     async def test_bind(self, event_loop):
         """
         Binding a variable causes it to be included in the result of
-        merge_contextvars_context.
+        merge_contextvars.
         """
 
         async def coro():
             bind_contextvars(a=1)
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         assert {"a": 1, "b": 2} == await event_loop.create_task(coro())
 
@@ -38,7 +38,7 @@ class TestNewContextvars(object):
         async def coro():
             bind_contextvars(a=1, c=3)
             bind_contextvars(c=333, d=4)
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         assert {
             "a": 1,
@@ -55,7 +55,7 @@ class TestNewContextvars(object):
         async def coro():
             bind_contextvars(a=1)
             await event_loop.create_task(nested_coro())
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         async def nested_coro():
             bind_contextvars(c=3)
@@ -64,62 +64,62 @@ class TestNewContextvars(object):
 
     async def test_merge_works_without_bind(self, event_loop):
         """
-        merge_contextvars_context returns values as normal even when there has
+        merge_contextvars returns values as normal even when there has
         been no previous calls to bind_contextvars.
         """
 
         async def coro():
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         assert {"b": 2} == await event_loop.create_task(coro())
 
     async def test_merge_overrides_bind(self, event_loop):
         """
-        Variables included in merge_contextvars_context override previously
+        Variables included in merge_contextvars override previously
         bound variables.
         """
 
         async def coro():
             bind_contextvars(a=1)
-            return merge_contextvars_context(None, None, {"a": 111, "b": 2})
+            return merge_contextvars(None, None, {"a": 111, "b": 2})
 
         assert {"a": 111, "b": 2} == await event_loop.create_task(coro())
 
     async def test_clear(self, event_loop):
         """
         The context-local context can be cleared, causing any previously bound
-        variables to not be included in merge_contextvars_context's result.
+        variables to not be included in merge_contextvars's result.
         """
 
         async def coro():
             bind_contextvars(a=1)
             clear_contextvars()
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         assert {"b": 2} == await event_loop.create_task(coro())
 
     async def test_clear_without_bind(self, event_loop):
         """
         The context-local context can be cleared, causing any previously bound
-        variables to not be included in merge_contextvars_context's result.
+        variables to not be included in merge_contextvars's result.
         """
 
         async def coro():
             clear_contextvars()
-            return merge_contextvars_context(None, None, {})
+            return merge_contextvars(None, None, {})
 
         assert {} == await event_loop.create_task(coro())
 
     async def test_undbind(self, event_loop):
         """
         Unbinding a previously bound variable causes it to be removed from the
-        result of merge_contextvars_context.
+        result of merge_contextvars.
         """
 
         async def coro():
             bind_contextvars(a=1)
             unbind_contextvars("a")
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         assert {"b": 2} == await event_loop.create_task(coro())
 
@@ -130,6 +130,6 @@ class TestNewContextvars(object):
 
         async def coro():
             unbind_contextvars("a")
-            return merge_contextvars_context(None, None, {"b": 2})
+            return merge_contextvars(None, None, {"b": 2})
 
         assert {"b": 2} == await event_loop.create_task(coro())
diff --git a/tests/test_threadlocal.py b/tests/test_threadlocal.py
index 6661ccb..c986723 100644
--- a/tests/test_threadlocal.py
+++ b/tests/test_threadlocal.py
@@ -17,6 +17,7 @@ from structlog.threadlocal import (
     as_immutable,
     bind_threadlocal,
     clear_threadlocal,
+    merge_threadlocal,
     merge_threadlocal_context,
     tmp_bind,
     wrap_dict,
@@ -272,33 +273,37 @@ class TestThreadLocalDict(object):
 
 
 class TestNewThreadLocal(object):
+    def test_alias(self):
+        """
+        We're keeping the old alias around.
+        """
+        assert merge_threadlocal_context is merge_threadlocal
+
     def test_bind_and_merge(self):
         """
         Binding a variable causes it to be included in the result of
-        merge_threadlocal_context.
+        merge_threadlocal.
         """
         bind_threadlocal(a=1)
 
-        assert {"a": 1, "b": 2} == merge_threadlocal_context(
-            None, None, {"b": 2}
-        )
+        assert {"a": 1, "b": 2} == merge_threadlocal(None, None, {"b": 2})
 
     def test_clear(self):
         """
         The thread-local context can be cleared, causing any previously bound
-        variables to not be included in merge_threadlocal_context's result.
+        variables to not be included in merge_threadlocal's result.
         """
         bind_threadlocal(a=1)
         clear_threadlocal()
 
-        assert {"b": 2} == merge_threadlocal_context(None, None, {"b": 2})
+        assert {"b": 2} == merge_threadlocal(None, None, {"b": 2})
 
     def test_merge_works_without_bind(self):
         """
-        merge_threadlocal_context returns values as normal even when there has
+        merge_threadlocal returns values as normal even when there has
         been no previous calls to bind_threadlocal.
         """
-        assert {"b": 2} == merge_threadlocal_context(None, None, {"b": 2})
+        assert {"b": 2} == merge_threadlocal(None, None, {"b": 2})
 
     def test_multiple_binds(self):
         """
@@ -308,6 +313,6 @@ class TestNewThreadLocal(object):
         bind_threadlocal(a=1, b=2)
         bind_threadlocal(c=3)
 
-        assert {"a": 1, "b": 2, "c": 3} == merge_threadlocal_context(
+        assert {"a": 1, "b": 2, "c": 3} == merge_threadlocal(
             None, None, {"b": 2}
         )
