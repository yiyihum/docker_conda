diff --git a/src/structlog/_base.py b/src/structlog/_base.py
index 3b5c461..23acbc1 100644
--- a/src/structlog/_base.py
+++ b/src/structlog/_base.py
@@ -86,7 +86,7 @@ class BoundLoggerBase(object):
 
     def try_unbind(self, *keys):
         """
-        Like :meth:`unbind`, but best effort:  missing keys are ignored.
+        Like :meth:`unbind`, but best effort: missing keys are ignored.
 
         :rtype: `self.__class__`
 
@@ -94,10 +94,8 @@ class BoundLoggerBase(object):
         """
         bl = self.bind()
         for key in keys:
-            try:
-                del bl._context[key]
-            except KeyError:
-                pass
+            bl._context.pop(key, None)
+
         return bl
 
     def new(self, **new_values):
diff --git a/src/structlog/contextvars.py b/src/structlog/contextvars.py
index c780f5b..4fc0bd6 100644
--- a/src/structlog/contextvars.py
+++ b/src/structlog/contextvars.py
@@ -19,7 +19,7 @@ import contextvars
 _CONTEXT = contextvars.ContextVar("structlog_context")
 
 
-def merge_contextvars_context(logger, method_name, event_dict):
+def merge_contextvars(logger, method_name, event_dict):
     """
     A processor that merges in a global (context-local) context.
 
@@ -58,9 +58,9 @@ def bind_contextvars(**kwargs):
     _get_context().update(kwargs)
 
 
-def unbind_contextvars(*args):
+def unbind_contextvars(*keys):
     """
-    Remove keys from the context-local context.
+    Remove *keys* from the context-local context if they are present.
 
     Use this instead of :func:`~structlog.BoundLogger.unbind` when you want to
     remove keys from a global (context-local) context.
@@ -68,7 +68,7 @@ def unbind_contextvars(*args):
     .. versionadded:: 20.1.0
     """
     ctx = _get_context()
-    for key in args:
+    for key in keys:
         ctx.pop(key, None)
 
 
diff --git a/src/structlog/threadlocal.py b/src/structlog/threadlocal.py
index ac7d0ad..c5e4a58 100644
--- a/src/structlog/threadlocal.py
+++ b/src/structlog/threadlocal.py
@@ -170,24 +170,36 @@ class _ThreadLocalDictWrapper(object):
 _CONTEXT = threading.local()
 
 
-def merge_threadlocal_context(logger, method_name, event_dict):
+def merge_threadlocal(logger, method_name, event_dict):
     """
     A processor that merges in a global (thread-local) context.
 
     Use this as your first processor in :func:`structlog.configure` to ensure
     thread-local context is included in all log calls.
+
+    .. versionadded:: 19.2.0
+
+    .. versionchanged:: 20.1.0
+       This function used to be called ``merge_threalocal_context`` and that
+       name is still kept around for backward compatability.
     """
     context = _get_context().copy()
     context.update(event_dict)
     return context
 
 
+# Alias that shouldn't be used anymore.
+merge_threadlocal_context = merge_threadlocal
+
+
 def clear_threadlocal():
     """
     Clear the thread-local context.
 
     The typical use-case for this function is to invoke it early in
     request-handling code.
+
+    .. versionadded:: 19.2.0
     """
     _CONTEXT.context = {}
 
@@ -198,6 +210,8 @@ def bind_threadlocal(**kwargs):
 
     Use this instead of :func:`~structlog.BoundLogger.bind` when you want some
     context to be global (thread-local).
+
+    .. versionadded:: 19.2.0
     """
     _get_context().update(kwargs)
 

