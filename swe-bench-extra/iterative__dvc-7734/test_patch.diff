diff --git a/tests/unit/cli/__init__.py b/tests/unit/cli/__init__.py
new file mode 100644
diff --git a/tests/unit/cli/test_main.py b/tests/unit/cli/test_main.py
new file mode 100644
--- /dev/null
+++ b/tests/unit/cli/test_main.py
@@ -0,0 +1,26 @@
+from argparse import Namespace
+
+from funcy import raiser
+
+from dvc.cli import main
+from dvc.objects.cache import DiskError
+
+
+def test_state_pickle_errors_are_correctly_raised(tmp_dir, caplog, mocker):
+    path = tmp_dir / "dir" / "test"
+    mocker.patch(
+        "dvc.cli.parse_args",
+        return_value=Namespace(
+            func=raiser(DiskError(path, "md5s")),
+            quiet=False,
+            verbose=True,
+        ),
+    )
+
+    assert main() == 255
+    assert (
+        f"Could not open pickled 'md5s' cache.\n"
+        f"Remove the '{path.relative_to(tmp_dir)}' directory "
+        "and then retry this command.\n"
+        "See <https://error.dvc.org/pickle> for more information."
+    ) in caplog.text
diff --git a/tests/unit/utils/test_decorators.py b/tests/unit/objects/test_cache.py
similarity index 52%
rename from tests/unit/utils/test_decorators.py
rename to tests/unit/objects/test_cache.py
--- a/tests/unit/utils/test_decorators.py
+++ b/tests/unit/objects/test_cache.py
@@ -1,27 +1,29 @@
 import pickle
 from typing import Any
 
-import diskcache
 import pytest
 
-from dvc.exceptions import DvcException
-from dvc.utils.decorators import with_diskcache
+from dvc.objects.cache import Cache, DiskError
 
 
-@with_diskcache(name="test")
-def set_value(cache: diskcache.Cache, key: str, value: Any) -> Any:
+def set_value(cache: Cache, key: str, value: Any) -> Any:
     cache[key] = value
     return cache[key]
 
 
-def test_pickle_protocol_error(tmp_dir):
-    with pytest.raises(DvcException) as exc:
-        with diskcache.Cache(
-            directory=(tmp_dir / "test"),
-            disk_pickle_protocol=pickle.HIGHEST_PROTOCOL + 1,
-        ) as cache:
-            set_value(cache, "key", ("value1", "value2"))
-        assert "troubleshooting#pickle" in str(exc)
+@pytest.mark.parametrize("disk_type", [None, "test"])
+def test_pickle_protocol_error(tmp_dir, disk_type):
+    directory = tmp_dir / "test"
+    cache = Cache(
+        directory,
+        disk_pickle_protocol=pickle.HIGHEST_PROTOCOL + 1,
+        disk_type=disk_type,
+    )
+    with pytest.raises(DiskError) as exc, cache as cache:
+        set_value(cache, "key", ("value1", "value2"))
+    assert exc.value.directory == str(directory)
+    assert exc.value.type == "test"
+    assert f"Could not open disk 'test' in {directory}" == str(exc.value)
 
 
 @pytest.mark.parametrize(
@@ -32,12 +34,12 @@ def test_pickle_protocol_error(tmp_dir):
     ],
 )
 def test_pickle_backwards_compat(tmp_dir, proto_a, proto_b):
-    with diskcache.Cache(
+    with Cache(
         directory=(tmp_dir / "test"),
         disk_pickle_protocol=proto_a,
     ) as cache:
         set_value(cache, "key", ("value1", "value2"))
-    with diskcache.Cache(
+    with Cache(
         directory=(tmp_dir / "test"),
         disk_pickle_protocol=proto_b,
     ) as cache:
