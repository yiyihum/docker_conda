diff --git a/.azure-pipelines/windows.yml b/.azure-pipelines/windows.yml
index f2907a5..6365a53 100644
--- a/.azure-pipelines/windows.yml
+++ b/.azure-pipelines/windows.yml
@@ -35,4 +35,9 @@ jobs:
     - script: |
         pytest -vs -n auto --cov pydra --cov-config .coveragerc --cov-report xml:cov.xml --doctest-modules pydra
       displayName: 'Pytest tests'
-
+    - script: |
+        python -m pip install codecov
+        codecov --file cov.xml
+      displayName: 'Upload To Codecov'
+      env:
+        CODECOV_TOKEN: $(CODECOV_TOKEN)
diff --git a/README.md b/README.md
index 44f2bda..17b5c8c 100644
--- a/README.md
+++ b/README.md
@@ -18,6 +18,7 @@ Feature list:
 and Dask (this is an experimental implementation with limited testing)
 
 [[API Documentation](https://nipype.github.io/pydra/)]
+[[PyCon 2020 Poster](https://docs.google.com/presentation/d/10tS2I34rS0G9qz6v29qVd77OUydjP_FdBklrgAGmYSw/edit?usp=sharing)]
 
 ### Tutorial
 This tutorial will walk you through the main concepts of Pydra!
diff --git a/pydra/engine/task.py b/pydra/engine/task.py
index 8cb088a..d8aaa60 100644
--- a/pydra/engine/task.py
+++ b/pydra/engine/task.py
@@ -199,19 +199,21 @@ class FunctionTask(TaskBase):
         del inputs["_func"]
         self.output_ = None
         output = cp.loads(self.inputs._func)(**inputs)
-        if output is not None:
-            output_names = [el[0] for el in self.output_spec.fields]
-            self.output_ = {}
-            if len(output_names) > 1:
-                if len(output_names) == len(output):
+        output_names = [el[0] for el in self.output_spec.fields]
+        if output is None:
+            self.output_ = dict((nm, None) for nm in output_names)
+        else:
+            if len(output_names) == 1:
+                # if only one element in the fields, everything should be returned together
+                self.output_ = {output_names[0]: output}
+            else:
+                if isinstance(output, tuple) and len(output_names) == len(output):
                     self.output_ = dict(zip(output_names, output))
                 else:
                     raise Exception(
                         f"expected {len(self.output_spec.fields)} elements, "
-                        f"but {len(output)} were returned"
+                        f"but {output} were returned"
                     )
-            else:  # if only one element in the fields, everything should be returned together
-                self.output_[output_names[0]] = output
 
 
 class ShellCommandTask(TaskBase):
