diff --git a/tests/test_api.py b/tests/test_api.py
index 14fb31f..181e658 100644
--- a/tests/test_api.py
+++ b/tests/test_api.py
@@ -43,6 +43,19 @@ QWidget {
     );
 }
 """
+QRADIANTGRADIENTS_STR = """
+QWidget {
+    background: qradialgradient(
+        spread: repeat,
+        cx: 0,
+        cy: 0,
+        fx: 0,
+        fy: 1,
+        stop: 0.1 blue,
+        stop: 0.8 green
+    );
+}
+"""
 QNOT_STR = """
 QLineEdit:!editable {
     background: white;
@@ -71,6 +84,7 @@ def test_compile_strings():
 
     qtsass.compile(COLORS_STR)
     qtsass.compile(QLINEARGRADIENTS_STR)
+    qtsass.compile(QRADIANTGRADIENTS_STR)
     qtsass.compile(QNOT_STR)
 
 
diff --git a/tests/test_conformers.py b/tests/test_conformers.py
index 1739036..64c01a3 100644
--- a/tests/test_conformers.py
+++ b/tests/test_conformers.py
@@ -15,7 +15,11 @@ from textwrap import dedent
 import unittest
 
 # Local imports
-from qtsass.conformers import NotConformer, QLinearGradientConformer
+from qtsass.conformers import (
+    NotConformer,
+    QLinearGradientConformer,
+    QRadialGradientConformer,
+)
 
 
 class TestNotConformer(unittest.TestCase):
@@ -155,5 +159,118 @@ class TestQLinearGradientConformer(unittest.TestCase):
                          self.css_float_coords_str)
 
 
+class TestQRadialGradientConformer(unittest.TestCase):
+
+    css_vars_str = "qradialgradient('$spread', $cx, $cy, $radius, $fx, $fy, (0 $red, 1 $blue))"
+    qss_vars_str = (
+        'qradialgradient(spread:$spread, cx:$cx, cy:$cy, radius:$radius, fx:$fx, fy:$fy,'
+        'stop: 0 $red, stop: 1 $blue)'
+    )
+
+    css_nostops_str = "qradialgradient('pad', 0, 0, 0, 0, 0)"
+    qss_nostops_str = 'qradialgradient(spread: pad, cx: 0, cy: 0, fx: 0, fy: 0)'
+
+    css_str = "qradialgradient('pad', 0, 0, 0, 0, 0, (0 red, 1 blue))"
+    qss_singleline_str = (
+        'qradialgradient(spread: pad, cx: 0, cy: 0, fx: 0, fy: 0, '
+        'stop: 0 red, stop: 1 blue)'
+    )
+    qss_multiline_str = dedent("""
+    qradialgradient(
+        spread: pad,
+        cx: 0,
+        cy: 0,
+        fx: 0,
+        fy: 0,
+        stop: 0 red,
+        stop: 1 blue
+    )
+    """).strip()
+    qss_weird_whitespace_str = (
+        'qradialgradient( spread: pad, cx: 0, cy:0, fx: 0, fy:0, '
+        '   stop:0 red, stop: 1 blue )'
+    )
+
+    css_rgba_str = (
+        "qradialgradient('pad', 0, 0, 0, 0, 0, "
+        "(0 rgba(0, 1, 2, 30%), 0.99 rgba(7, 8, 9, 100%)))"
+    )
+    qss_rgba_str = (
+        'qradialgradient(spread: pad, cx: 0, cy: 0, fx: 0, fy: 0, '
+        'stop: 0 rgba(0, 1, 2, 30%), stop: 0.99 rgba(7, 8, 9, 100%))'
+    )
+
+    css_incomplete_coords_str = (
+        "qradialgradient('pad', 0, 1, 0, 0, 0, (0 red, 1 blue))"
+    )
+
+    qss_incomplete_coords_str = (
+        'qradialgradient(spread:pad, cy:1, stop:0 red, stop: 1 blue)'
+    )
+
+    css_float_coords_str = (
+        "qradialgradient('pad', 0, 0.75, 0, 0, 0, (0 green, 1 pink))"
+    )
+
+    qss_float_coords_str = (
+        'qradialgradient(spread: pad, cy:0.75, stop:0 green, stop: 1 pink)'
+    )
+
+    def test_does_not_affect_css_form(self):
+        """QRadialGradientConformer no affect on css qradialgradient func."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.css_str), self.css_str)
+        self.assertEqual(c.to_qss(self.css_str), self.css_str)
+
+    def test_conform_singleline_str(self):
+        """QRadialGradientConformer singleline qss to scss."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_singleline_str), self.css_str)
+
+    def test_conform_multiline_str(self):
+        """QRadialGradientConformer multiline qss to scss."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_multiline_str), self.css_str)
+
+    def test_conform_weird_whitespace_str(self):
+        """QRadialGradientConformer weird whitespace qss to scss."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_weird_whitespace_str), self.css_str)
+
+    def test_conform_nostops_str(self):
+        """QRadialGradientConformer qss with no stops to scss."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_nostops_str), self.css_nostops_str)
+
+    def test_conform_vars_str(self):
+        """QRadialGradientConformer qss with vars to scss."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_vars_str), self.css_vars_str)
+
+    def test_conform_rgba_str(self):
+        """QRadialGradientConformer qss with rgba to scss."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_rgba_str), self.css_rgba_str)
+
+    def test_incomplete_coords(self):
+        """QRadialGradientConformer qss with not all 4 coordinates given."""
+
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_incomplete_coords_str),
+                         self.css_incomplete_coords_str)
+
+    def test_float_coords(self):
+        c = QRadialGradientConformer()
+        self.assertEqual(c.to_scss(self.qss_float_coords_str),
+                         self.css_float_coords_str)
+
+
 if __name__ == "__main__":
     unittest.main(verbosity=2)
diff --git a/tests/test_functions.py b/tests/test_functions.py
index bebbf8b..1821c3e 100644
--- a/tests/test_functions.py
+++ b/tests/test_functions.py
@@ -58,5 +58,21 @@ class TestQLinearGradientFunc(BaseCompileTest):
         )
 
 
+class TestQRadialGradientFunc(BaseCompileTest):
+    def test_color(self):
+        self.assertEqual(
+            self.compile_scss('qradialgradient(pad, 1, 2, 1, 3, 4, (0 red, 1 blue))'),
+            'qradialgradient(spread: pad, cx: 1.0, cy: 2.0, radius: 1.0, fx: 3.0, fy: 4.0, '
+            'stop: 0.0 rgba(255, 0, 0, 100%), stop: 1.0 rgba(0, 0, 255, 100%))'
+        )
+
+    def test_rgba(self):
+        self.assertEqual(
+            self.compile_scss('qradialgradient(pad, 1, 2, 1, 3, 4, (0 red, 0.2 rgba(5, 6, 7, 0.8)))'),
+            'qradialgradient(spread: pad, cx: 1.0, cy: 2.0, radius: 1.0, fx: 3.0, fy: 4.0, '
+            'stop: 0.0 rgba(255, 0, 0, 100%), stop: 0.2 rgba(5, 6, 7, 80%))'
+        )
+
+
 if __name__ == "__main__":
     unittest.main(verbosity=2)
