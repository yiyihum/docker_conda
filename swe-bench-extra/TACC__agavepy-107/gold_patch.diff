diff --git a/agavepy/agave.py b/agavepy/agave.py
index 0cb8010..2d73cf2 100644
--- a/agavepy/agave.py
+++ b/agavepy/agave.py
@@ -26,7 +26,7 @@ from agavepy.tokens import token_create, refresh_token
 from agavepy.utils import load_config, save_config
 from agavepy.files import (files_copy, files_delete, files_download, 
     files_list, files_mkdir, files_move, files_pems_delete, files_pems_list, 
-    files_upload)
+    files_pems_update, files_upload)
 
 
 import sys
@@ -873,6 +873,25 @@ class Agave(object):
         files_pems_list(self.api_server, self.token, path)
 
 
+    def files_pems_update(self, path, username, perms, recursive=False):
+        """ Edit user permissions associated with a file or folder.
+        
+        These permissions are set at the API level and do not reflect *nix or 
+        other file system ACL.
+        Deletes all permissions on a file except those of the owner.
+        Valid values for setting permission with the -P flag are READ, WRITE, 
+        EXECUTE, READ_WRITE, READ_EXECUTE, WRITE_EXECUTE, ALL, and NONE.
+        """
+        # Check if tokens need to be refreshed.
+        self.refresh_tokens()
+
+        # Update api permissions.
+        files_pems_update(
+            self.api_server, self.token, 
+            path, username, perms, 
+            recursive=recursive)
+
+
     def files_upload(self, source, destination):
         """ Upload file to remote system
         """
diff --git a/agavepy/files/__init__.py b/agavepy/files/__init__.py
index b6b95cb..1daf53e 100644
--- a/agavepy/files/__init__.py
+++ b/agavepy/files/__init__.py
@@ -6,4 +6,5 @@ from .mkdir import files_mkdir
 from .move import files_move
 from .pems_delete import files_pems_delete
 from .pems_list import files_pems_list
+from .pems_update import files_pems_update
 from .upload import files_upload
diff --git a/agavepy/files/pems_delete.py b/agavepy/files/pems_delete.py
index 74ea6dc..b1b9dce 100644
--- a/agavepy/files/pems_delete.py
+++ b/agavepy/files/pems_delete.py
@@ -1,5 +1,5 @@
 """
-    pems_list.py
+    pems_delete.py
 """
 import requests
 from .exceptions import AgaveFilesError
diff --git a/agavepy/files/pems_update.py b/agavepy/files/pems_update.py
new file mode 100644
index 0000000..9ae319f
--- /dev/null
+++ b/agavepy/files/pems_update.py
@@ -0,0 +1,39 @@
+"""
+    pems_update.py
+"""
+import requests
+from .exceptions import AgaveFilesError
+from ..utils import handle_bad_response_status_code
+
+
+def files_pems_update(tenant_url, access_token, path, username, perms, recursive=False):
+    """ Edit user permissions associated with a file or folder. 
+    
+    These permissions are set at the API level and do not reflect *nix or other
+    file system ACL.
+    Deletes all permissions on a file except those of the owner.
+    Valid values for setting permission with the -P flag are READ, WRITE, 
+    EXECUTE, READ_WRITE, READ_EXECUTE, WRITE_EXECUTE, ALL, and NONE.
+    """
+    # Set request url.
+    endpoint = "{0}/{1}/{2}".format(tenant_url, "files/v2/pems/system", path)
+
+    # Obtain file path. "path" should include the system name at the begining,
+    # so we get rid of it.
+    destination = '/'.join( path.split('/')[1:] )
+
+    # Make request.
+    try:
+        headers  = {"Authorization":"Bearer {0}".format(access_token)}
+        data     = {
+            "username": username, 
+            "permission": perms, 
+            "recursive": recursive
+        }
+        params   = {"pretty": "true"}
+        resp = requests.post(endpoint, headers=headers, data=data, params=params)
+    except Exception as err:
+        raise AgaveFilesError(err)
+
+    # Handle bad status code.
+    handle_bad_response_status_code(resp)
diff --git a/docs/docsite/files/admin.rst b/docs/docsite/files/admin.rst
index ed7bde0..d120f34 100644
--- a/docs/docsite/files/admin.rst
+++ b/docs/docsite/files/admin.rst
@@ -19,3 +19,18 @@ To remove all the permissions on a file, except those of the owner:
 .. code-block:: pycon
 
     agave.files_pems_delete("system-id/some-dir")
+
+
+To edit permissions for another user, let's say her username is "collab,"
+to view a file:
+
+.. code-block:: pycon
+
+    ag.files_pems_update("system-id/path", "collab", "ALL", recursive=True)
+
+Now, a user with username "collab" has permissions to access the all contents
+of the specified directory (hence the ``recursive=True`` option).
+
+Valid values for setting permission are ``READ``, ``WRITE``, ``EXECUTE``, 
+``READ_WRITE``, ``READ_EXECUTE``, ``WRITE_EXECUTE``, ``ALL``, and ``NONE``.
+This same action can be performed recursively on directories using ``recursive=True``.
