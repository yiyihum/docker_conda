diff --git a/CHANGELOG.md b/CHANGELOG.md
index 613d94f..f6c59c9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -19,6 +19,9 @@ Modifications by (in alphabetical order):
 * A. Voysey, UK Met Office
 
 
+01/02/2023 PR #387 for #386. Support extension to permit in-line '!' 
+           comments in fixed-format Fortran.
+
 30/11/2022 PR #382 for #264. Ignore quotation marks in in-line comments.
 
 18/10/2022 PR #380 towards #379. Improve support for operators and symbol
diff --git a/doc/fparser.rst b/doc/fparser.rst
index ff091cd..f805166 100644
--- a/doc/fparser.rst
+++ b/doc/fparser.rst
@@ -1,7 +1,7 @@
 .. -*- rest -*-
 
 ..
-    Copyright (c) 2017-2018 Science and Technology Facilities Council.
+    Copyright (c) 2017-2023 Science and Technology Facilities Council.
 
     All rights reserved.
 
@@ -100,7 +100,7 @@ As indicated by the above output, the `fparser.api.parse()` function
 returns a `Statement` tree representation of the parsed source code.
 This `parse()` function is actually a convenience method that wraps
 the creation of a reader for Fortran source code (either
-FortranStringReader or FortranFileReader) followed by a call to use
+`FortranStringReader` or `FortranFileReader`) followed by a call to use
 that reader to create the tree, e.g.:
 
 ::
@@ -232,6 +232,14 @@ For example,
   >>> reader.next()
   Line('integer i,incx,incy,ix,iy,m,mp1,n',(9, 9),'')
 
+Owing to its origins in the f2py project, the reader contains functionality
+to identify the format of the provided source by examining Python-style
+encoding information (c.f. `PEP 263`). Since this is not a part of the Fortran
+standard, this functionality is disabled by default. It can be enabled by
+providing the argument `ignore_encoding=False` to the reader.
+
+.. _PEP 263: https://peps.python.org/pep-0263/
+
 Note that the `FortranReaderBase.next()` method may return `Line`,
 `SyntaxErrorLine`, `Comment`, `MultiLine`, or `SyntaxErrorMultiLine`
 instances.
diff --git a/src/fparser/common/readfortran.py b/src/fparser/common/readfortran.py
index 4bb7e97..8efc4c8 100644
--- a/src/fparser/common/readfortran.py
+++ b/src/fparser/common/readfortran.py
@@ -1,6 +1,6 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
-# Modified work Copyright (c) 2017-2022 Science and Technology
+# Modified work Copyright (c) 2017-2023 Science and Technology
 # Facilities Council.
 # Original work Copyright (c) 1999-2008 Pearu Peterson
 
@@ -791,22 +791,13 @@ class FortranReaderBase:
             if self.reader is not None:
                 # inside INCLUDE statement
                 try:
-                    # Manually check to see if something has not
-                    # matched and has been placed in the fifo. We
-                    # can't use _next() as this method is associated
-                    # with the include reader (self.reader._next()),
-                    # not this reader (self._next()).
-                    return self.fifo_item.pop(0)
-                except IndexError:
-                    # There is nothing in the fifo buffer.
-                    try:
-                        # Return a line from the include.
-                        return self.reader.next(ignore_comments)
-                    except StopIteration:
-                        # There is nothing left in the include
-                        # file. Setting reader to None indicates that
-                        # we should now read from the main reader.
-                        self.reader = None
+                    # Return a line from the include.
+                    return self.reader.next(ignore_comments)
+                except StopIteration:
+                    # There is nothing left in the include
+                    # file. Setting reader to None indicates that
+                    # we should now read from the main reader.
+                    self.reader = None
             item = self._next(ignore_comments)
             if isinstance(item, Line) and _IS_INCLUDE_LINE(item.line):
                 # catch INCLUDE statement and create a new FortranReader
@@ -1555,9 +1546,12 @@ class FortranFileReader(FortranReaderBase):
 
     :param file_candidate: A filename or file-like object.
     :param list include_dirs: Directories in which to look for inclusions.
-    :param list source_only: Fortran source files to search for modules
+    :param list source_only: Fortran source files to search for modules \
                              required by "use" statements.
     :param bool ignore_comments: Whether or not to ignore comments
+    :param Optional[bool] ignore_encoding: whether or not to ignore Python-style \
+        encoding information (e.g. "-*- fortran -*-") when attempting to determine \
+        the format of the file. Default is True.
 
     For example:
 
@@ -1568,7 +1562,12 @@ class FortranFileReader(FortranReaderBase):
     """
 
     def __init__(
-        self, file_candidate, include_dirs=None, source_only=None, ignore_comments=True
+        self,
+        file_candidate,
+        include_dirs=None,
+        source_only=None,
+        ignore_comments=True,
+        ignore_encoding=True,
     ):
         # The filename is used as a unique ID. This is then used to cache the
         # contents of the file. Obviously if the file changes content but not
@@ -1592,9 +1591,11 @@ class FortranFileReader(FortranReaderBase):
             message = "FortranFileReader is used with a filename"
             message += " or file-like object."
             raise ValueError(message)
-        mode = fparser.common.sourceinfo.get_source_info(file_candidate)
+        mode = fparser.common.sourceinfo.get_source_info(
+            file_candidate, ignore_encoding
+        )
 
-        FortranReaderBase.__init__(self, self.file, mode, ignore_comments)
+        super().__init__(self.file, mode, ignore_comments)
 
         if include_dirs is None:
             self.include_dirs.insert(0, os.path.dirname(self.id))
@@ -1620,6 +1621,9 @@ class FortranStringReader(FortranReaderBase):
     :param list source_only: Fortran source files to search for modules
                              required by "use" statements.
     :param bool ignore_comments: Whether or not to ignore comments
+    :param Optional[bool] ignore_encoding: whether or not to ignore Python-style \
+        encoding information (e.g. "-*- fortran -*-") when attempting to determine \
+        the format of the source. Default is True.
 
     For example:
 
@@ -1635,7 +1639,12 @@ class FortranStringReader(FortranReaderBase):
     """
 
     def __init__(
-        self, string, include_dirs=None, source_only=None, ignore_comments=True
+        self,
+        string,
+        include_dirs=None,
+        source_only=None,
+        ignore_comments=True,
+        ignore_encoding=True,
     ):
         # The Python ID of the string was used to uniquely identify it for
         # caching purposes. Unfortunately this ID is only unique for the
@@ -1648,8 +1657,10 @@ class FortranStringReader(FortranReaderBase):
         #
         self.id = "string-" + str(hash(string))
         source = StringIO(string)
-        mode = fparser.common.sourceinfo.get_source_info_str(string)
-        FortranReaderBase.__init__(self, source, mode, ignore_comments)
+        mode = fparser.common.sourceinfo.get_source_info_str(
+            string, ignore_encoding=ignore_encoding
+        )
+        super().__init__(source, mode, ignore_comments)
         if include_dirs is not None:
             self.include_dirs = include_dirs[:]
         if source_only is not None:
diff --git a/src/fparser/common/sourceinfo.py b/src/fparser/common/sourceinfo.py
index e8ce5c4..de01d03 100644
--- a/src/fparser/common/sourceinfo.py
+++ b/src/fparser/common/sourceinfo.py
@@ -1,5 +1,5 @@
-# Modified work Copyright (c) 2017-2022 Science and Technology
-# Facilities Council
+# Modified work Copyright (c) 2017-2023 Science and Technology
+# Facilities Council.
 # Original work Copyright (c) 1999-2008 Pearu Peterson
 
 # All rights reserved.
@@ -227,25 +227,35 @@ _HAS_PYF_HEADER = re.compile(r"-[*]-\s*pyf\s*-[*]-", re.I).search
 _FREE_FORMAT_START = re.compile(r"[^c*!]\s*[^\s\d\t]", re.I).match
 
 
-def get_source_info_str(source):
+def get_source_info_str(source, ignore_encoding=True):
     """
     Determines the format of Fortran source held in a string.
 
-    Returns a FortranFormat object.
+    :param bool ignore_encoding: whether or not to ignore any Python-style \
+                                 encoding information in the first line of the file.
+
+    :returns: a FortranFormat object.
+    :rtype: :py:class:`fparser.common.sourceinfo.FortranFormat`
+
     """
     lines = source.splitlines()
     if not lines:
         return FortranFormat(False, False)
 
-    firstline = lines[0].lstrip()
-    if _HAS_F_HEADER(firstline):
-        return FortranFormat(False, True)
-    if _HAS_FIX_HEADER(firstline):
-        return FortranFormat(False, False)
-    if _HAS_FREE_HEADER(firstline):
-        return FortranFormat(True, False)
-    if _HAS_PYF_HEADER(firstline):
-        return FortranFormat(True, True)
+    if not ignore_encoding:
+        # We check to see whether the file contains a comment describing its
+        # encoding. This has nothing to do with the Fortran standard (see e.g.
+        # https://peps.python.org/pep-0263/) and hence is not done by default.
+        firstline = lines[0].lstrip()
+        if _HAS_F_HEADER(firstline):
+            # -*- fortran -*- implies Fortran77 so fixed format.
+            return FortranFormat(False, True)
+        if _HAS_FIX_HEADER(firstline):
+            return FortranFormat(False, False)
+        if _HAS_FREE_HEADER(firstline):
+            return FortranFormat(True, False)
+        if _HAS_PYF_HEADER(firstline):
+            return FortranFormat(True, True)
 
     line_tally = 10000  # Check up to this number of non-comment lines
     is_free = False
@@ -263,7 +273,7 @@ def get_source_info_str(source):
 ##############################################################################
 
 
-def get_source_info(file_candidate):
+def get_source_info(file_candidate, ignore_encoding=True):
     """
     Determines the format of Fortran source held in a file.
 
@@ -303,7 +313,9 @@ def get_source_info(file_candidate):
         #
         pointer = file_candidate.tell()
         file_candidate.seek(0)
-        source_info = get_source_info_str(file_candidate.read())
+        source_info = get_source_info_str(
+            file_candidate.read(), ignore_encoding=ignore_encoding
+        )
         file_candidate.seek(pointer)
         return source_info
 
@@ -322,7 +334,9 @@ def get_source_info(file_candidate):
     with open(
         file_candidate, "r", encoding="utf-8", errors="fparser-logging"
     ) as file_object:
-        string = get_source_info_str(file_object.read())
+        string = get_source_info_str(
+            file_object.read(), ignore_encoding=ignore_encoding
+        )
     return string
 
 
