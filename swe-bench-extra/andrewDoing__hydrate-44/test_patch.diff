diff --git a/tests/test_cluster.py b/tests/test_cluster.py
index 4e9ad86..db77bcb 100644
--- a/tests/test_cluster.py
+++ b/tests/test_cluster.py
@@ -43,13 +43,14 @@ class TestCluster():
         mock_client.CoreV1Api.assert_called_once()
 
     tst_namespaces = ["elasticsearch", "istio", "jaeger"]
-    tst_pods = ["elasticsearch-pod", "istio-pod", "jaeger-pod"]
+    tst_deps = ["elasticsearch-dep", "istio-dep", "jaeger-dep"]
 
-    @pytest.mark.parametrize("tst_namespaces, tst_pods",
-                             [(tst_namespaces, None),
-                              (None, tst_pods)])
+    @pytest.mark.parametrize("tst_namespaces, tst_deps",
+                             [(tst_namespaces, tst_deps),
+                              (tst_namespaces, None),
+                              (None, tst_deps)])
     def test_get_components(self, mocker, cluster_connection,
-                            tst_namespaces, tst_pods):
+                            tst_namespaces, tst_deps):
         """Test the method get_components."""
         mock_get_namespaces = mocker.patch(
             "hydrate.cluster.Cluster.get_namespaces",
@@ -58,23 +59,22 @@ class TestCluster():
             "hydrate.cluster.Cluster.remove_defaults",
             return_value=tst_namespaces)
         mock_get_first_word = mocker.patch("hydrate.cluster.get_first_word")
-        mock_get_namespaced_pods = mocker.patch(
-            "hydrate.cluster.Cluster.get_namespaced_pods",
-            return_value=tst_pods)
-        mock_process_cluster_objects = mocker.patch(
-            "hydrate.cluster.Cluster.process_cluster_objects",
-            return_value=tst_pods)
+        mock_get_namespaced_deployments = mocker.patch(
+            "hydrate.cluster.Cluster.get_namespaced_deployments",
+            return_value=tst_deps
+        )
+        mock_re_sub = mocker.patch("hydrate.cluster.re.sub")
 
         components = cluster_connection.get_components()
 
         assert components
+        mock_get_namespaced_deployments.assert_called_once()
         mock_get_namespaces.assert_called_once()
         mock_remove_defaults.assert_called_once()
         if tst_namespaces:
             mock_get_first_word.assert_called()
-        else:
-            mock_get_namespaced_pods.assert_called_once()
-            mock_process_cluster_objects.assert_called_once()
+        if tst_deps:
+            mock_re_sub.assert_called()
 
     tst_get_namespaces = ["elasticsearch", "istio", "jaeger"]
     @pytest.mark.parametrize("tst_get_namespaces",
diff --git a/tests/test_component.py b/tests/test_component.py
index a99c307..b7b6f04 100644
--- a/tests/test_component.py
+++ b/tests/test_component.py
@@ -50,14 +50,23 @@ tst_repo_components = [Component("dep1-dep2"),
                        Component("dep4-dep5")]
 exp_full_matches = [Component("dep1-dep2"),
                     Component("dep3")]
+exp_leftovers = [Component("dep4"),
+                 Component("dep6")]
 
 
-@pytest.mark.parametrize('repo_components, cluster_components, expected',
+@pytest.mark.parametrize('''repo_components, cluster_components,
+                            expected_fm, expected_leftos''',
                          [(tst_repo_components,
                            tst_cluster_components,
-                           exp_full_matches)])
-def test_get_full_matches(repo_components, cluster_components, expected):
+                           exp_full_matches,
+                           exp_leftovers)])
+def test_get_full_matches(repo_components, cluster_components,
+                          expected_fm, expected_leftos):
     """Test get_full_matches()."""
-    full_matches = get_full_matches(repo_components, cluster_components)
-    for fmc, exp in zip_longest(full_matches, exp_full_matches):
+    fms, leftos = get_full_matches(repo_components, cluster_components)
+
+    for fmc, exp in zip_longest(fms, exp_full_matches):
         assert fmc.name == exp.name
+
+    for lefto, exp_lefto in zip_longest(leftos, exp_leftovers):
+        assert lefto.name == exp_lefto.name
