diff --git a/inlineplz/linters/__init__.py b/inlineplz/linters/__init__.py
index 7fede16..a0fd9a4 100644
--- a/inlineplz/linters/__init__.py
+++ b/inlineplz/linters/__init__.py
@@ -100,9 +100,9 @@ LINTERS = {
         'install': [['npm', 'install', 'eslint']],
         'help': [os.path.normpath('./node_modules/.bin/eslint'), '-h'],
         'run':
-        [os.path.normpath('./node_modules/.bin/eslint'), '.', '-f', 'json'],
+        [os.path.normpath('./node_modules/.bin/eslint'), '.', '-f', 'unix'],
         'rundefault': [
-            os.path.normpath('./node_modules/.bin/eslint'), '.', '-f', 'json',
+            os.path.normpath('./node_modules/.bin/eslint'), '.', '-f', 'unix',
             '-c', '{config_dir}/.eslintrc.js', '--ignore-path', '{config_dir}/.eslintignore'
         ],
         'dotfiles': [
diff --git a/inlineplz/linters/config/.eslintignore b/inlineplz/linters/config/.eslintignore
index 6713aaf..ce2175e 100644
--- a/inlineplz/linters/config/.eslintignore
+++ b/inlineplz/linters/config/.eslintignore
@@ -1,10 +1,10 @@
-coverage/**
-docs/**
-jsdoc/**
-templates/**
-tmp/**
-vendor/**
-src/**
-dist/**
-node_modules/**
+**/coverage/**
+**/docs/**
+**/jsdoc/**
+**/templates/**
+**/tmp/**
+**/vendor/**
+**/src/**
+**/dist/**
 **/node_modules/**
+**/.tox/**
diff --git a/inlineplz/parsers/eslint.py b/inlineplz/parsers/eslint.py
index 3d0e556..972ae1e 100644
--- a/inlineplz/parsers/eslint.py
+++ b/inlineplz/parsers/eslint.py
@@ -12,14 +12,14 @@ class ESLintParser(ParserBase):
 
     def parse(self, lint_data):
         messages = set()
-        for filedata in json.loads(lint_data):
-            if filedata.get('messages'):
-                for msgdata in filedata['messages']:
-                    try:
-                        path = filedata['filePath']
-                        line = msgdata['line']
-                        msgbody = msgdata['message']
-                        messages.add((path, line, msgbody))
-                    except (ValueError, KeyError):
-                        print('Invalid message: {0}'.format(msgdata))
+        for line in lint_data.split('\n'):
+            try:
+                parts = line.split(':')
+                if line.strip() and parts:
+                    path = parts[0].strip()
+                    line = int(parts[1].strip())
+                    msgbody = ':'.join(parts[3:]).strip()
+                    messages.add((path, line, msgbody))
+            except (ValueError, IndexError):
+                print('Invalid message: {0}'.format(line))
         return messages
