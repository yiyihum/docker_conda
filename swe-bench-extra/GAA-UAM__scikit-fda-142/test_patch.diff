diff --git a/tests/test_grid.py b/tests/test_grid.py
index 483a5cab..52a31d98 100644
--- a/tests/test_grid.py
+++ b/tests/test_grid.py
@@ -1,10 +1,10 @@
 import unittest
 
-import numpy as np
 import scipy.stats.mstats
 
-from skfda.exploratory import stats
+import numpy as np
 from skfda import FDataGrid
+from skfda.exploratory import stats
 
 
 class TestFDataGrid(unittest.TestCase):
@@ -20,6 +20,10 @@ class TestFDataGrid(unittest.TestCase):
         np.testing.assert_array_equal(
             fd.sample_points, np.array([[0., 0.25, 0.5, 0.75, 1.]]))
 
+    def test_copy_equals(self):
+        fd = FDataGrid([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6]])
+        self.assertEqual(fd, fd.copy())
+
     def test_mean(self):
         fd = FDataGrid([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6]])
         mean = stats.mean(fd)
@@ -69,21 +73,6 @@ class TestFDataGrid(unittest.TestCase):
                                        [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]])
         np.testing.assert_array_equal(fd1.axes_labels, fd.axes_labels)
 
-    def test_concatenate(self):
-        fd1 = FDataGrid([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6]])
-        fd2 = FDataGrid([[3, 4, 5, 6, 7], [4, 5, 6, 7, 8]])
-
-        fd1.axes_labels = ["x", "y"]
-        fd = fd1.concatenate(fd2)
-
-        np.testing.assert_equal(fd.nsamples, 4)
-        np.testing.assert_equal(fd.ndim_image, 1)
-        np.testing.assert_equal(fd.ndim_domain, 1)
-        np.testing.assert_array_equal(fd.data_matrix[..., 0],
-                                      [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6],
-                                       [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]])
-        np.testing.assert_array_equal(fd1.axes_labels, fd.axes_labels)
-
     def test_concatenate_coordinates(self):
         fd1 = FDataGrid([[1, 2, 3, 4], [2, 3, 4, 5]])
         fd2 = FDataGrid([[3, 4, 5, 6], [4, 5, 6, 7]])
diff --git a/tests/test_pandas.py b/tests/test_pandas.py
new file mode 100644
index 00000000..cf25e9b3
--- /dev/null
+++ b/tests/test_pandas.py
@@ -0,0 +1,45 @@
+import unittest
+
+import pandas as pd
+import skfda
+
+
+class TestPandas(unittest.TestCase):
+
+    def setUp(self):
+        self.fd = skfda.FDataGrid(
+            [[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 9]])
+        self.fd_basis = self.fd.to_basis(skfda.representation.basis.BSpline(
+            domain_range=self.fd.domain_range, nbasis=5))
+
+    def test_fdatagrid_series(self):
+        series = pd.Series(self.fd)
+        self.assertEqual(
+            series.dtype, skfda.representation.grid.FDataGridDType)
+        self.assertEqual(len(series), self.fd.nsamples)
+        self.assertEqual(series[0], self.fd[0])
+
+    def test_fdatabasis_series(self):
+        series = pd.Series(self.fd_basis)
+        self.assertEqual(
+            series.dtype, skfda.representation.basis.FDataBasisDType)
+        self.assertEqual(len(series), self.fd_basis.nsamples)
+        self.assertEqual(series[0], self.fd_basis[0])
+
+    def test_fdatagrid_dataframe(self):
+        df = pd.DataFrame({"function": self.fd})
+        self.assertEqual(
+            df["function"].dtype, skfda.representation.grid.FDataGridDType)
+        self.assertEqual(len(df["function"]), self.fd.nsamples)
+        self.assertEqual(df["function"][0], self.fd[0])
+
+    def test_fdatabasis_dataframe(self):
+        df = pd.DataFrame({"function": self.fd_basis})
+        self.assertEqual(
+            df["function"].dtype, skfda.representation.basis.FDataBasisDType)
+        self.assertEqual(len(df["function"]), self.fd_basis.nsamples)
+        self.assertEqual(df["function"][0], self.fd_basis[0])
+
+    def test_take(self):
+        self.assertEqual(self.fd.take(0), self.fd[0])
+        self.assertEqual(self.fd.take(0, axis=0), self.fd[0])
