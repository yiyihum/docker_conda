diff --git a/src/sqlfluff/cli/commands.py b/src/sqlfluff/cli/commands.py
index 16672d55..ac4b9a00 100644
--- a/src/sqlfluff/cli/commands.py
+++ b/src/sqlfluff/cli/commands.py
@@ -3,6 +3,8 @@
 import sys
 import json
 
+import oyaml as yaml
+
 import click
 # For the profiler
 import pstats
@@ -113,7 +115,7 @@ def rules(**kwargs):
 @cli.command()
 @common_options
 @click.option('-f', '--format', 'format', default='human',
-              type=click.Choice(['human', 'json'], case_sensitive=False),
+              type=click.Choice(['human', 'json', 'yaml'], case_sensitive=False),
               help='What format to return the lint result in.')
 @click.argument('paths', nargs=-1)
 def lint(paths, format, **kwargs):
@@ -136,7 +138,7 @@ def lint(paths, format, **kwargs):
 
     """
     c = get_config(**kwargs)
-    lnt = get_linter(c, silent=format == 'json')
+    lnt = get_linter(c, silent=format in ('json', 'yaml'))
     verbose = c.get('verbose')
 
     config_string = format_config(lnt, verbose=verbose)
@@ -159,6 +161,8 @@ def lint(paths, format, **kwargs):
 
     if format == 'json':
         click.echo(json.dumps(result.as_records()))
+    elif format == 'yaml':
+        click.echo(yaml.dump(result.as_records()))
 
     sys.exit(result.stats()['exit code'])
 
@@ -257,7 +261,7 @@ def fix(force, paths, **kwargs):
 @click.option('-c', '--code-only', is_flag=True,
               help='Output only the code elements of the parse tree.')
 @click.option('-f', '--format', default='human',
-              type=click.Choice(['human', 'yaml'], case_sensitive=False),
+              type=click.Choice(['human', 'json', 'yaml'], case_sensitive=False),
               help='What format to return the parse result in.')
 @click.option('--profiler', is_flag=True,
               help='Set this flag to engage the python profiler.')
@@ -271,7 +275,7 @@ def parse(path, code_only, format, profiler, **kwargs):
     """
     c = get_config(**kwargs)
     # We don't want anything else to be logged if we want a yaml output
-    lnt = get_linter(c, silent=format == 'yaml')
+    lnt = get_linter(c, silent=format in ('json', 'yaml'))
     verbose = c.get('verbose')
     recurse = c.get('recurse')
 
@@ -290,23 +294,54 @@ def parse(path, code_only, format, profiler, **kwargs):
             sys.exit(1)
         pr = cProfile.Profile()
         pr.enable()
+
     try:
-        # A single path must be specified for this command
-        for parsed, violations, time_dict in lnt.parse_path(path, verbosity=verbose, recurse=recurse):
-            if parsed:
-                if format == 'human':
+        # handle stdin if specified via lone '-'
+        if '-' == path:
+            # put the parser result in a list to iterate later
+            config = lnt.config.make_child_from_path('stdin')
+            result = [lnt.parse_string(
+                sys.stdin.read(),
+                'stdin',
+                verbosity=verbose,
+                recurse=recurse,
+                config=config
+            )]
+        else:
+            # A single path must be specified for this command
+            result = lnt.parse_path(path, verbosity=verbose, recurse=recurse)
+
+        # iterative print for human readout
+        if format == 'human':
+            for parsed, violations, time_dict in result:
+                if parsed:
                     lnt.log(parsed.stringify(code_only=code_only))
-                elif format == 'yaml':
-                    click.echo(parsed.to_yaml(code_only=code_only, show_raw=True))
-            else:
-                # TODO: Make this prettier
-                lnt.log('...Failed to Parse...')
-            nv += len(violations)
-            for v in violations:
-                lnt.log(format_violation(v, verbose=verbose))
-            if verbose >= 2:
-                lnt.log("==== timings ====")
-                lnt.log(cli_table(time_dict.items()))
+                else:
+                    # TODO: Make this prettier
+                    lnt.log('...Failed to Parse...')
+                nv += len(violations)
+                for v in violations:
+                    lnt.log(format_violation(v, verbose=verbose))
+                if verbose >= 2:
+                    lnt.log("==== timings ====")
+                    lnt.log(cli_table(time_dict.items()))
+        else:
+            # collect result and print as single payload
+            # will need to zip in the file paths
+            filepaths = ['stdin'] if '-' == path else lnt.paths_from_path(path)
+            result = [
+                dict(
+                    filepath=filepath,
+                    segments=parsed.as_record(code_only=code_only, show_raw=True)
+                )
+                for filepath, (parsed, _, _) in zip(filepaths, result)
+            ]
+
+            if format == 'yaml':
+                click.echo(yaml.dump(result))
+            elif format == 'json':
+                click.echo(json.dumps(result))
+
     except IOError:
         click.echo(colorize('The path {0!r} could not be accessed. Check it exists.'.format(path), 'red'))
         sys.exit(1)
diff --git a/src/sqlfluff/parser/segments_base.py b/src/sqlfluff/parser/segments_base.py
index e2ef6690..55381a92 100644
--- a/src/sqlfluff/parser/segments_base.py
+++ b/src/sqlfluff/parser/segments_base.py
@@ -13,7 +13,7 @@ These are the fundamental building blocks of the rest of the parser.
 """
 
 import logging
-import oyaml as yaml
+
 from io import StringIO
 
 from .match import MatchResult, curtail_string, join_segments_raw
@@ -522,31 +522,33 @@ class BaseSegment:
             result = (self.type, tuple(seg.to_tuple(**kwargs) for seg in self.segments if not seg.is_meta))
         return result
 
-    def to_yaml(self, **kwargs):
-        """Return a yaml structure from this segment."""
-        tpl = self.to_tuple(**kwargs)
-
-        def _structural_simplify(elem):
-            """Simplify the structure recursively so it outputs nicely in yaml."""
-            if isinstance(elem, tuple):
-                # Does this look like an element?
-                if len(elem) == 2 and isinstance(elem[0], str):
-                    # This looks like a single element, make a dict
-                    elem = {elem[0]: _structural_simplify(elem[1])}
-                elif isinstance(elem[0], tuple):
-                    # This looks like a list of elements.
-                    keys = [e[0] for e in elem]
-                    # Any duplicate elements?
-                    if len(set(keys)) == len(keys):
-                        # No, we can use a mapping typle
-                        elem = {e[0]: _structural_simplify(e[1]) for e in elem}
-                    else:
-                        # Yes, this has to be a list :(
-                        elem = [_structural_simplify(e) for e in elem]
-            return elem
+    @classmethod
+    def structural_simplify(cls, elem):
+        """Simplify the structure recursively so it serializes nicely in json/yaml."""
+        if isinstance(elem, tuple):
+            # Does this look like an element?
+            if len(elem) == 2 and isinstance(elem[0], str):
+                # This looks like a single element, make a dict
+                elem = {elem[0]: cls.structural_simplify(elem[1])}
+            elif isinstance(elem[0], tuple):
+                # This looks like a list of elements.
+                keys = [e[0] for e in elem]
+                # Any duplicate elements?
+                if len(set(keys)) == len(keys):
+                    # No, we can use a mapping typle
+                    elem = {e[0]: cls.structural_simplify(e[1]) for e in elem}
+                else:
+                    # Yes, this has to be a list :(
+                    elem = [cls.structural_simplify(e) for e in elem]
+        return elem
+
+    def as_record(self, **kwargs):
+        """Return the segment as a structurally simplified record.
 
-        obj = _structural_simplify(tpl)
-        return yaml.dump(obj)
+        This is useful for serialization to yaml or json.
+        kwargs passed to to_tuple
+        """
+        return self.structural_simplify(self.to_tuple(**kwargs))
 
     @classmethod
     def match(cls, segments, parse_context):

