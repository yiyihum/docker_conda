diff --git a/PyViCare/PyViCareHeatingDevice.py b/PyViCare/PyViCareHeatingDevice.py
index e68be11..13e75df 100644
--- a/PyViCare/PyViCareHeatingDevice.py
+++ b/PyViCare/PyViCareHeatingDevice.py
@@ -432,31 +432,44 @@ class HeatingCircuit(HeatingDeviceWithComponent):
     @handleNotSupported
     def getActiveProgramMinTemperature(self):
         active_program = self.getActiveProgram()
-        if active_program in ['standby']:
+        return self.getProgramMinTemperature(active_program)
+
+    @handleNotSupported
+    def getActiveProgramMaxTemperature(self):
+        active_program = self.getActiveProgram()
+        return self.getProgramMaxTemperature(active_program)
+
+    @handleNotSupported
+    def getActiveProgramStepping(self):
+        active_program = self.getActiveProgram()
+        return self.getProgramStepping(active_program)
+
+    @handleNotSupported
+    def getProgramMinTemperature(self, program: str):        
+        if program in ['standby']:
             return None
         
-        return self.service.getProperty(f"heating.circuits.{self.circuit}.operating.programs.{active_program}")[
+        return self.service.getProperty(f"heating.circuits.{self.circuit}.operating.programs.{program}")[
             "commands"]["setTemperature"]["params"]["targetTemperature"]["constraints"]["min"]
 
     @handleNotSupported
-    def getActiveProgramMaxTemperature(self):
-        active_program = self.getActiveProgram()
-        if active_program in ['standby']:
+    def getProgramMaxTemperature(self, program: str):        
+        if program in ['standby']:
             return None
-       
-        return self.service.getProperty(f"heating.circuits.{self.circuit}.operating.programs.{active_program}")[
+        
+        return self.service.getProperty(f"heating.circuits.{self.circuit}.operating.programs.{program}")[
             "commands"]["setTemperature"]["params"]["targetTemperature"]["constraints"]["max"]
 
     @handleNotSupported
-    def getActiveProgramStepping(self):
-        active_program = self.getActiveProgram()
-        if active_program in ['standby']:
+    def getProgramStepping(self, program: str):        
+        if program in ['standby']:
             return None
-       
-        return self.service.getProperty(f"heating.circuits.{self.circuit}.operating.programs.{active_program}")[
+        
+        return self.service.getProperty(f"heating.circuits.{self.circuit}.operating.programs.{program}")[
             "commands"]["setTemperature"]["params"]["targetTemperature"]["constraints"]["stepping"]
 
 
+
     """ Activate a program
         NOTE
         DEVICE_COMMUNICATION_ERROR can just mean that the program is already on
