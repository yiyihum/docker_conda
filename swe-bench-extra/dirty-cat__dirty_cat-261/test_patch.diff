diff --git a/dirty_cat/datasets/tests/test_fetching.py b/dirty_cat/datasets/tests/test_fetching.py
index b0056c4..a85f425 100644
--- a/dirty_cat/datasets/tests/test_fetching.py
+++ b/dirty_cat/datasets/tests/test_fetching.py
@@ -15,7 +15,7 @@ import warnings
 import pandas as pd
 
 from pathlib import Path
-from distutils.version import LooseVersion
+from dirty_cat.utils import Version
 
 from unittest import mock
 from unittest.mock import mock_open
@@ -152,7 +152,7 @@ def test__download_and_write_openml_dataset(mock_fetch_openml):
     test_data_dir = get_test_data_dir()
     _download_and_write_openml_dataset(1, test_data_dir)
 
-    if LooseVersion(sklearn.__version__) >= LooseVersion('0.22'):
+    if Version(sklearn.__version__) >= Version('0.22'):
         mock_fetch_openml.assert_called_once_with(data_id=1,
                                                   data_home=str(test_data_dir),
                                                   as_frame=True)
diff --git a/dirty_cat/test/test_super_vectorizer.py b/dirty_cat/test/test_super_vectorizer.py
index d299f19..a836dcc 100644
--- a/dirty_cat/test/test_super_vectorizer.py
+++ b/dirty_cat/test/test_super_vectorizer.py
@@ -7,10 +7,10 @@ from sklearn.preprocessing import StandardScaler
 from sklearn.utils.validation import check_is_fitted
 from sklearn.exceptions import NotFittedError
 
-from distutils.version import LooseVersion
 
 from dirty_cat import SuperVectorizer
 from dirty_cat import GapEncoder
+from dirty_cat.utils import Version
 
 
 def check_same_transformers(expected_transformers: dict, actual_transformers: list):
@@ -336,7 +336,7 @@ def test_get_feature_names_out():
     vectorizer_w_pass = SuperVectorizer(remainder='passthrough')
     vectorizer_w_pass.fit(X)
 
-    if LooseVersion(sklearn.__version__) < LooseVersion('0.23'):
+    if Version(sklearn.__version__) < Version('0.23'):
         with pytest.raises(NotImplementedError):
             # Prior to sklearn 0.23, ColumnTransformer.get_feature_names
             # with "passthrough" transformer(s) raises a NotImplementedError
@@ -370,7 +370,7 @@ def test_fit():
     # See GH#193
     sup_vec = SuperVectorizer()
     with pytest.raises(NotFittedError):
-        if LooseVersion(sklearn.__version__) >= LooseVersion('0.22'):
+        if Version(sklearn.__version__) >= Version('0.22'):
             assert check_is_fitted(sup_vec)
         else:
             assert check_is_fitted(sup_vec, attributes=dir(sup_vec))
diff --git a/dirty_cat/test/test_utils.py b/dirty_cat/test/test_utils.py
index 70caf4a..a339c34 100644
--- a/dirty_cat/test/test_utils.py
+++ b/dirty_cat/test/test_utils.py
@@ -1,4 +1,6 @@
-from dirty_cat.utils import LRUDict
+import pytest
+
+from dirty_cat.utils import LRUDict, Version
 
 
 def test_lrudict():
@@ -13,3 +15,28 @@ def test_lrudict():
 
     for x in range(5):
         assert (x not in dict_)
+
+
+def test_version():
+    # Test those specified in its docstring
+    assert Version('1.5') <= Version('1.6.5')
+    assert Version('1.5') <= '1.6.5'
+
+    assert (Version('1-5', separator='-') == Version('1-6-5', separator='-')) is False
+    assert (Version('1-5', separator='-') == '1-6-5') is False
+    with pytest.raises(ValueError):
+        assert not (Version('1-5', separator='-') == '1.6.5')
+
+    # Test all comparison methods
+    assert Version('1.0') == Version('1.0')
+    assert (Version('1.0') != Version('1.0')) is False
+
+    assert Version('1.0') < Version('1.1')
+    assert Version('1.1') <= Version('1.5')
+    assert Version('1.1') <= Version('1.1')
+    assert (Version('1.1') < Version('1.1')) is False
+
+    assert Version('1.1') > Version('0.5')
+    assert Version('1.1') >= Version('0.9')
+    assert Version('1.1') >= Version('1.1')
+    assert (Version('1.1') >= Version('1.9')) is False
