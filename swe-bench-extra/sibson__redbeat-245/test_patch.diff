diff --git a/tests/test_json.py b/tests/test_json.py
index c08ad50..67ff61c 100644
--- a/tests/test_json.py
+++ b/tests/test_json.py
@@ -1,14 +1,18 @@
 import json
-from datetime import datetime
+from datetime import datetime, timedelta, timezone
 from unittest import TestCase
 
 from celery.schedules import crontab, schedule
-from celery.utils.time import FixedOffset, timezone
 from dateutil import rrule as dateutil_rrule
 
 from redbeat.decoder import RedBeatJSONDecoder, RedBeatJSONEncoder
 from redbeat.schedules import rrule
 
+try:
+    import zoneinfo
+except ImportError:
+    from backports import zoneinfo
+
 
 class JSONTestCase(TestCase):
     def dumps(self, d):
@@ -99,14 +103,14 @@ class RedBeatJSONEncoderTestCase(JSONTestCase):
         self.assertEqual(json.loads(result), expected)
 
     def test_datetime_with_tz(self):
-        dt = self.now(tzinfo=timezone.get_timezone('Asia/Shanghai'))
+        dt = self.now(tzinfo=zoneinfo.ZoneInfo('Asia/Shanghai'))
         result = self.dumps(dt)
 
         expected = self.datetime_as_dict(timezone='Asia/Shanghai', __type__='datetime')
         self.assertEqual(json.loads(result), expected)
 
     def test_datetime_with_fixedoffset(self):
-        dt = self.now(tzinfo=FixedOffset(4 * 60))
+        dt = self.now(tzinfo=timezone(timedelta(hours=4)))
         result = self.dumps(dt)
 
         expected = self.datetime_as_dict(timezone=4 * 60 * 60.0)
@@ -134,7 +138,7 @@ class RedBeatJSONEncoderTestCase(JSONTestCase):
         self.assertEqual(json.loads(result), self.rrule())
 
     def test_rrule_timezone(self):
-        tz = timezone.get_timezone('US/Eastern')
+        tz = zoneinfo.ZoneInfo('US/Eastern')
 
         start1 = datetime(2015, 12, 30, 12, 59, 22, tzinfo=timezone.utc)
         start2 = start1.astimezone(tz)
@@ -209,14 +213,14 @@ class RedBeatJSONDecoderTestCase(JSONTestCase):
         result = self.loads(json.dumps(d))
         d.pop('__type__')
         d.pop('timezone')
-        self.assertEqual(result, datetime(tzinfo=timezone.get_timezone('Asia/Shanghai'), **d))
+        self.assertEqual(result, datetime(tzinfo=zoneinfo.ZoneInfo('Asia/Shanghai'), **d))
 
     def test_datetime_with_fixed_offset(self):
         d = self.datetime_as_dict(__type__='datetime', timezone=5 * 60 * 60)
         result = self.loads(json.dumps(d))
         d.pop('__type__')
         d.pop('timezone')
-        self.assertEqual(result, datetime(tzinfo=FixedOffset(5 * 60), **d))
+        self.assertEqual(result, datetime(tzinfo=timezone(timedelta(hours=5)), **d))
 
     def test_schedule(self):
         d = self.schedule()
