diff --git a/src/prefect/agent/local/agent.py b/src/prefect/agent/local/agent.py
index 61cb6ba95a..30ff1588df 100644
--- a/src/prefect/agent/local/agent.py
+++ b/src/prefect/agent/local/agent.py
@@ -225,7 +225,7 @@ class LocalAgent(Agent):
             python_path.append(os.environ["PYTHONPATH"])
         if self.import_paths:
             python_path.extend(self.import_paths)
-        env["PYTHONPATH"] = ":".join(python_path)
+        env["PYTHONPATH"] = os.pathsep.join(python_path)
 
         # 4. Values set on the agent via `--env`
         env.update(self.env_vars)
diff --git a/src/prefect/tasks/prefect/flow_run_rename.py b/src/prefect/tasks/prefect/flow_run_rename.py
index d4127a231c..69bd46312d 100644
--- a/src/prefect/tasks/prefect/flow_run_rename.py
+++ b/src/prefect/tasks/prefect/flow_run_rename.py
@@ -1,6 +1,7 @@
 import warnings
 from typing import Any
 
+import prefect
 from prefect import Task
 from prefect.client import Client
 from prefect.utilities.tasks import defaults_from_attrs
@@ -30,24 +31,30 @@ class RenameFlowRun(Task):
     def run(self, flow_run_id: str, flow_run_name: str) -> bool:
         """
         Args:
-            - flow_run_id (str, optional): The ID of the flow run to rename
+            - flow_run_id (str, optional): The ID of the flow run to rename. If `None`,
+                the `flow_run_id` from `prefect.context` will be used as default value
             - flow_run_name (str, optional): The new flow run name
 
         Returns:
             - bool: Boolean representing whether the flow run was renamed successfully or not.
 
         Raises:
-            - ValueError: If flow_run_id or name is not provided
+            - ValueError: If `flow_run_id` is not provided and `flow_run_id` does not exist
+                in `prefect.context`
+            - ValueError: If `flow_run_name` is not provided
 
         Example:
             ```python
             from prefect.tasks.prefect.flow_rename import FlowRenameTask
 
-            rename_flow = FlowRenameTask(flow_run_id="id123", flow_name="A new flow run name")
+            rename_flow = FlowRenameTask(flow_name="A new flow run name")
             ```
         """
-        if flow_run_id is None:
-            raise ValueError("Must provide a flow run ID.")
+        flow_run_id = flow_run_id or prefect.context.get("flow_run_id")
+        if not flow_run_id:
+            raise ValueError(
+                "`flow_run_id` must be explicitly provided or available in the context"
+            )
         if flow_run_name is None:
             raise ValueError("Must provide a flow name.")
 
diff --git a/src/prefect/utilities/serialization.py b/src/prefect/utilities/serialization.py
index 7225c02b8f..47eb01e970 100644
--- a/src/prefect/utilities/serialization.py
+++ b/src/prefect/utilities/serialization.py
@@ -179,14 +179,23 @@ class JSONCompatible(fields.Field):
         self.validators.insert(0, self._validate_json)
 
     def _serialize(self, value, attr, obj, **kwargs):  # type: ignore
-        self._validate_json(value)
+        try:
+            json.dumps(value)
+        except TypeError:
+            raise ValidationError(
+                "When running with Prefect Cloud/Server, values for "
+                f"`{type(obj).__name__}.{attr}` must be JSON compatible. "
+                f"Unable to serialize `{value!r}`."
+            ) from None
         return super()._serialize(value, attr, obj, **kwargs)
 
     def _validate_json(self, value: Any) -> None:
         try:
             json.dumps(value)
-        except TypeError as type_error:
-            raise ValidationError("Value is not JSON-compatible") from type_error
+        except TypeError:
+            raise ValidationError(
+                f"Values must be JSON compatible, got `{value!r}`"
+            ) from None
 
 
 class Nested(fields.Nested):

