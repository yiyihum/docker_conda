diff --git a/tests/test_expression.py b/tests/test_expression.py
index 509c7d36..6627f900 100644
--- a/tests/test_expression.py
+++ b/tests/test_expression.py
@@ -246,6 +246,9 @@ class TestExpression(unittest.TestCase):
 
         ite = claripy.ite_dict(x, {1: 11, 2: 22, 3: 33, 4: 44, 5: 55, 6: 66, 7: 77, 8: 88, 9: 99}, claripy.BVV(0, 32))
         self.assertEqual(sorted(s.eval(ite, 100)), [0, 11, 22, 33, 44, 55, 66, 77, 88, 99])
+        # calling it a second time should not fail. it was failing on master due to we incorrectly putting the AST
+        # into the eval-exhausted set.
+        self.assertEqual(sorted(s.eval(ite, 100)), [0, 11, 22, 33, 44, 55, 66, 77, 88, 99])
 
         ss = s.branch()
         ss.add(ite == 88)
diff --git a/tests/test_solver.py b/tests/test_solver.py
index bdc269f4..54aee73f 100644
--- a/tests/test_solver.py
+++ b/tests/test_solver.py
@@ -608,6 +608,22 @@ class StandardTests(TestCase):
         print(s.max(x, extra_constraints=[x <= 18]))
         assert s.max(x) == 19
 
+    def test_cached_max(self):
+        s = claripy.Solver()
+        x = claripy.BVS("x", 32)
+        assert not s.constraints
+        assert s.max(x) == 0xffffffff
+        assert len(s.constraints) == 1  # ConstraintExpansionMixin will add a new constraint
+        assert s.max(x) == 0xffffffff  # calling it the second time, the cache should not give a different result
+
+        s = claripy.Solver()
+        y = claripy.BVS("y", 32)
+        s.add(y == 8)
+        assert s.eval(y, n=1)[0] == 8
+        assert len(s.constraints) == 1
+        assert s.max(x) == 0xffffffff
+        assert s.max(x) == 0xffffffff
+
 #
 # Multi-Solver test base classes
 #
