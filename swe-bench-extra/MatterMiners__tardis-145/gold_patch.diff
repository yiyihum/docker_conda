diff --git a/docs/source/changelog.rst b/docs/source/changelog.rst
index d22bc81..fc03530 100644
--- a/docs/source/changelog.rst
+++ b/docs/source/changelog.rst
@@ -1,4 +1,4 @@
-.. Created by changelog.py at 2020-03-19, command
+.. Created by changelog.py at 2020-04-28, command
    '/Users/giffler/.cache/pre-commit/repont7o94ca/py_env-python3.7/bin/changelog docs/source/changes compile --output=docs/source/changelog.rst'
    based on the format of 'https://keepachangelog.com/'
 
@@ -32,9 +32,14 @@ Fixed
 * Fix state transitions for jobs retried by HTCondor
 * Fix state transitions and refactoring of the SLURM site adapter
 
-[Unreleased] - 2020-03-19
+[Unreleased] - 2020-04-28
 =========================
 
+Added
+-----
+
+* Add ssh connection sharing to `SSHExecutor` in order to re-use existing connection
+
 Changed
 -------
 
diff --git a/docs/source/changes/145.add_ssh_connection_sharing.yaml b/docs/source/changes/145.add_ssh_connection_sharing.yaml
new file mode 100644
index 0000000..e556827
--- /dev/null
+++ b/docs/source/changes/145.add_ssh_connection_sharing.yaml
@@ -0,0 +1,9 @@
+category: added
+summary: "Add ssh connection sharing to `SSHExecutor` in order to re-use existing connection"
+pull requests:
+  - 145
+issues:
+  - 135
+description: |
+  The `SSHExector` is now re-using existing connections. Closed connections are automatically reestablished. This will
+  avoid connection problems when bothering a remote ssh server with too many requests in too short intervals.
diff --git a/docs/source/executors/executors.rst b/docs/source/executors/executors.rst
index f0a1398..6169f8d 100644
--- a/docs/source/executors/executors.rst
+++ b/docs/source/executors/executors.rst
@@ -41,9 +41,10 @@ SSH Executor
 
 .. content-tabs:: left-col
 
-    The ssh executor is used to asynchronously execute shell commands remotely via ssh. All parameters specified in the
-    configuration are directly passed as keyword arguments to `asyncssh` `connect` call. You can find all available
-    parameters in the `asyncssh documentation`_
+    The ssh executor is used to asynchronously execute shell commands remotely via ssh. The actual ssh connection to
+    the host is preserved, recycled and automatically reestablished. All parameters specified in the configuration are
+    directly passed as keyword arguments to `asyncssh` `connect` call. You can find all available parameters in the
+    `asyncssh documentation`_
 
     .. _asyncssh documentation: https://asyncssh.readthedocs.io/en/latest/api.html#connect
 
diff --git a/tardis/utilities/executors/sshexecutor.py b/tardis/utilities/executors/sshexecutor.py
index 7f79943..3003b0e 100644
--- a/tardis/utilities/executors/sshexecutor.py
+++ b/tardis/utilities/executors/sshexecutor.py
@@ -3,6 +3,7 @@ from ...exceptions.executorexceptions import CommandExecutionFailure
 from ...interfaces.executor import Executor
 from ..attributedict import AttributeDict
 
+import asyncio
 import asyncssh
 
 
@@ -10,13 +11,45 @@ import asyncssh
 class SSHExecutor(Executor):
     def __init__(self, **parameters):
         self._parameters = parameters
+        self._ssh_connection = None
+        self._lock = None
+
+    async def _establish_connection(self):
+        for retry in range(1, 10):
+            try:
+                return await asyncssh.connect(**self._parameters)
+            except (
+                ConnectionResetError,
+                asyncssh.DisconnectError,
+                asyncssh.ConnectionLost,
+                BrokenPipeError,
+            ):
+                await asyncio.sleep(retry * 10)
+        return await asyncssh.connect(**self._parameters)
+
+    @property
+    async def ssh_connection(self):
+        if self._ssh_connection is None:
+            async with self.lock:
+                # check that connection has not yet been initialize in a different task
+                while self._ssh_connection is None:
+                    self._ssh_connection = await self._establish_connection()
+        return self._ssh_connection
+
+    @property
+    def lock(self):
+        # Create lock once tardis event loop is running.
+        # To avoid got Future <Future pending> attached to a different loop exception
+        if self._lock is None:
+            self._lock = asyncio.Lock()
+        return self._lock
 
     async def run_command(self, command, stdin_input=None):
+        ssh_connection = await self.ssh_connection
         try:
-            async with asyncssh.connect(**self._parameters) as conn:
-                response = await conn.run(
-                    command, check=True, input=stdin_input and stdin_input.encode()
-                )
+            response = await ssh_connection.run(
+                command, check=True, input=stdin_input and stdin_input.encode()
+            )
         except asyncssh.ProcessError as pe:
             raise CommandExecutionFailure(
                 message=f"Run command {command} via SSHExecutor failed",
@@ -25,18 +58,15 @@ class SSHExecutor(Executor):
                 stdout=pe.stdout,
                 stderr=pe.stderr,
             ) from pe
-        except (
-            ConnectionResetError,
-            asyncssh.misc.DisconnectError,
-            asyncssh.misc.ConnectionLost,
-            BrokenPipeError,
-        ) as ce:
+        except asyncssh.ChannelOpenError as coe:
+            # Broken connection will be replaced by a new connection during next call
+            self._ssh_connection = None
             raise CommandExecutionFailure(
-                message=f"Could not run command {command} due to SSH failure: {ce}",
+                message=f"Could not run command {command} due to SSH failure: {coe}",
                 exit_code=255,
                 stdout="",
-                stderr="SSH failure",
-            ) from ce
+                stderr="SSH Broken Connection",
+            ) from coe
         else:
             return AttributeDict(
                 stdout=response.stdout,
