diff --git a/src/canmatrix/tests/test_sym.py b/src/canmatrix/tests/test_sym.py
index 962747e..d5b5ccd 100644
--- a/src/canmatrix/tests/test_sym.py
+++ b/src/canmatrix/tests/test_sym.py
@@ -173,3 +173,48 @@ def test_unterminated_enum():
     else:
         assert isinstance(matrix.load_errors[0], StopIteration)
 
+
+def test_title_read_and_write():
+    f = io.BytesIO(
+        textwrap.dedent(
+            '''\
+            FormatVersion=5.0 // Do not edit this line!
+            Title="An Example Title"
+
+            '''
+        ).encode('utf-8'),
+    )
+
+    matrix = canmatrix.formats.sym.load(f)
+    assert matrix.attribute("Title") == "An Example Title"
+    f_out = io.BytesIO()
+    canmatrix.formats.sym.dump(matrix, f_out)
+    assert f_out.getvalue().decode('utf-8').splitlines()[1] == 'Title="An Example Title"'
+
+@pytest.mark.parametrize(
+    'enum_str, enum_dict, enum_label',
+    (
+        ('enum Animal(0="Dog", 1="Cat", 2="Fox")', {"Animal": {0: "Dog", 1: "Cat", 2: "Fox"}}, "Simple enum"),
+        ('''\
+enum Animal(0="Dog", //A Comment
+1="Cat",
+2="Fox")''',
+         {"Animal": {0: "Dog", 1: "Cat", 2: "Fox"}}, "Multiline enum"),
+        ('enum Animal(0="Dog",1="Cat",2="Fox")', {"Animal": {0: "Dog", 1: "Cat", 2: "Fox"}}, "No Space  in Separator"),
+    )
+)
+def test_enums_read(enum_str, enum_dict, enum_label):
+        f = io.BytesIO('''\
+FormatVersion=5.0 // Do not edit this line!
+Title="An Example Title"
+
+{{ENUMS}}
+{}
+'''.format(enum_str).encode('utf-8'),
+        )
+
+        matrix = canmatrix.formats.sym.load(f)
+        assert matrix.load_errors == [], "Failed to load canmatrix, when testing enum case : '{}'".format(enum_label)
+        assert matrix.value_tables == enum_dict, "Enum not parsed correctly : '{}'".format(enum_label)
+        f_out = io.BytesIO()
+        canmatrix.formats.sym.dump(matrix, f_out)
diff --git a/src/canmatrix/tests/test_utils.py b/src/canmatrix/tests/test_utils.py
index 356990c..2aad410 100644
--- a/src/canmatrix/tests/test_utils.py
+++ b/src/canmatrix/tests/test_utils.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
+import pytest
+
 import canmatrix.utils
 
 
@@ -10,7 +12,31 @@ def test_utils_guess_value():
     assert canmatrix.utils.guess_value("False") == "0"
     assert canmatrix.utils.guess_value("faLse") == "0"
 
+
 def test_decode_number():
     assert canmatrix.utils.decode_number("0x10") == 16
     assert canmatrix.utils.decode_number("0b10") == 2
     assert canmatrix.utils.decode_number("10") == 10
+
+
+@pytest.mark.parametrize(
+    'input_string, expected_list',
+    (
+            ('a,b,c,d',
+             ["a", "b", "c", "d"]),
+
+            ('a,  b, c, d',
+             ["a", "b", "c", "d"]),
+
+            ('a,  b", c", "d"',
+             ['a', 'b", c"', 'd']),
+
+            ('0="a",  1=b, 3="c"d, 4=e',
+             ['0="a"',  '1=b', '3="c"d', '4=e']),
+
+            ('"a,b",","b,c","\'\'d"e',
+             ['a,b', '","b', 'c","\'\'d\"e']),
+    )
+)
+def test_quote_aware_comma_split_function(input_string, expected_list):
+    assert canmatrix.utils.quote_aware_comma_split(input_string) == expected_list
