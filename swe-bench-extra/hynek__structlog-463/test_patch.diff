diff --git a/tests/test_log_levels.py b/tests/test_log_levels.py
index 285dbfc..1a37273 100644
--- a/tests/test_log_levels.py
+++ b/tests/test_log_levels.py
@@ -10,6 +10,11 @@ import pytest
 
 from structlog import make_filtering_bound_logger
 from structlog._log_levels import _LEVEL_TO_NAME
+from structlog.contextvars import (
+    bind_contextvars,
+    clear_contextvars,
+    merge_contextvars,
+)
 from structlog.testing import CapturingLogger
 
 
@@ -88,7 +93,7 @@ class TestFilteringLogger:
 
         assert [] == cl.calls
 
-    def test_filter_bound_below_missing_event_string(self, bl, cl):
+    def test_filter_bound_below_missing_event_string(self, bl):
         """
         Missing event arg causes exception below min_level.
         """
@@ -99,7 +104,7 @@ class TestFilteringLogger:
         message = "missing 1 required positional argument: 'event'"
         assert message in exc_info.value.args[0]
 
-    def test_filter_bound_exact_missing_event_string(self, bl, cl):
+    def test_filter_bound_exact_missing_event_string(self, bl):
         """
         Missing event arg causes exception even at min_level.
         """
@@ -110,23 +115,23 @@ class TestFilteringLogger:
         message = "missing 1 required positional argument: 'event'"
         assert message in exc_info.value.args[0]
 
-    def test_exception(self, bl):
+    def test_exception(self, bl, cl):
         """
         exception ensures that exc_info is set to True, unless it's already
         set.
         """
         bl.exception("boom")
 
-        assert [("error", (), {"event": "boom", "exc_info": True})]
+        assert [("error", (), {"event": "boom", "exc_info": True})] == cl.calls
 
-    async def test_async_exception(self, bl):
+    async def test_async_exception(self, bl, cl):
         """
         exception ensures that exc_info is set to True, unless it's already
         set.
         """
         await bl.aexception("boom")
 
-        assert [("error", (), {"event": "boom", "exc_info": True})]
+        assert [("error", (), {"event": "boom", "exc_info": True})] == cl.calls
 
     def test_exception_passed(self, bl, cl):
         """
@@ -134,7 +139,7 @@ class TestFilteringLogger:
         """
         bl.exception("boom", exc_info=42)
 
-        assert [("error", (), {"event": "boom", "exc_info": 42})]
+        assert [("error", (), {"event": "boom", "exc_info": 42})] == cl.calls
 
     async def test_async_exception_passed(self, bl, cl):
         """
@@ -142,7 +147,7 @@ class TestFilteringLogger:
         """
         await bl.aexception("boom", exc_info=42)
 
-        assert [("error", (), {"event": "boom", "exc_info": 42})]
+        assert [("error", (), {"event": "boom", "exc_info": 42})] == cl.calls
 
     @pytest.mark.parametrize("level", tuple(_LEVEL_TO_NAME.keys()))
     def test_pickle(self, level):
@@ -168,3 +173,21 @@ class TestFilteringLogger:
         await bl.ainfo("hello %s -- %d!", "world", 42)
 
         assert [("info", (), {"event": "hello world -- 42!"})] == cl.calls
+
+    @pytest.mark.parametrize(
+        "meth,args",
+        [
+            ("aexception", ("ev",)),
+            ("ainfo", ("ev",)),
+            ("alog", (logging.INFO, "ev")),
+        ],
+    )
+    async def test_async_contextvars_merged(self, meth, args, cl):
+        clear_contextvars()
+        bl = make_filtering_bound_logger(logging.INFO)(
+            cl, [merge_contextvars], {}
+        )
+        bind_contextvars(context_included="yep")
+        await getattr(bl, meth)(*args)
+        assert len(cl.calls) == 1
+        assert "context_included" in cl.calls[0].kwargs
