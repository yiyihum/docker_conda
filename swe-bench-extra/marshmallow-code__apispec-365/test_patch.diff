diff --git a/tests/test_core.py b/tests/test_core.py
index 6405a35..b1b9aec 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -5,7 +5,7 @@ import pytest
 import yaml
 
 from apispec import APISpec, BasePlugin
-from apispec.exceptions import APISpecError
+from apispec.exceptions import APISpecError, DuplicateComponentNameError
 
 from .utils import get_definitions, get_paths, get_parameters, get_responses
 
@@ -171,6 +171,14 @@ class TestDefinitions:
             defs = spec.to_dict()['components']['schemas']
         assert defs['Pet']['discriminator'] == 'name'
 
+    def test_definition_duplicate_name(self, spec):
+        spec.components.schema('Pet', properties=self.properties)
+        with pytest.raises(
+            DuplicateComponentNameError,
+            match='Another schema with name "Pet" is already registered.',
+        ):
+            spec.components.schema('Pet', properties=self.properties)
+
     def test_to_yaml(self, spec):
         enum = ['name', 'photoUrls']
         spec.components.schema(
@@ -342,6 +350,15 @@ class TestPath:
         assert 'param1' in params
         assert 'param2' in params
 
+    def test_parameter_duplicate_name(self, spec):
+        route_spec = self.paths['/pet/{petId}']['get']
+        spec.components.parameter('test_parameter', 'path', **route_spec['parameters'][0])
+        with pytest.raises(
+            DuplicateComponentNameError,
+            match='Another parameter with name "test_parameter" is already registered.',
+        ):
+            spec.components.parameter('test_parameter', 'path', **route_spec['parameters'][0])
+
     def test_response(self, spec):
         route_spec = self.paths['/pet/{petId}']['get']
 
@@ -371,6 +388,15 @@ class TestPath:
         assert 'resp1' in responses
         assert 'resp2' in responses
 
+    def test_response_duplicate_name(self, spec):
+        route_spec = self.paths['/pet/{petId}']['get']
+        spec.components.response('test_response', **route_spec['responses']['200'])
+        with pytest.raises(
+            DuplicateComponentNameError,
+            match='Another response with name "test_response" is already registered.',
+        ):
+            spec.components.response('test_response', **route_spec['responses']['200'])
+
     def test_path_check_invalid_http_method(self, spec):
         spec.path('/pet/{petId}', operations={'get': {}})
         spec.path('/pet/{petId}', operations={'x-dummy': {}})
diff --git a/tests/test_ext_marshmallow.py b/tests/test_ext_marshmallow.py
index 4437a29..d0d07df 100644
--- a/tests/test_ext_marshmallow.py
+++ b/tests/test_ext_marshmallow.py
@@ -128,7 +128,7 @@ class TestDefinitionHelper:
     def test_warning_when_schema_added_twice(self, spec, schema):
         spec.components.schema('Analysis', schema=schema)
         with pytest.warns(UserWarning, match='has already been added to the spec'):
-            spec.components.schema('Analysis', schema=schema)
+            spec.components.schema('DuplicateAnalysis', schema=schema)
 
     def test_schema_instances_with_different_modifiers_added(self, spec):
         class MultiModifierSchema(Schema):
diff --git a/tests/test_openapi.py b/tests/test_openapi.py
index b4e4e36..abe5368 100644
--- a/tests/test_openapi.py
+++ b/tests/test_openapi.py
@@ -412,12 +412,10 @@ class TestMarshmallowSchemaToModelDefinition:
         class NotASchema(object):
             pass
 
-        with pytest.raises(ValueError) as excinfo:
+        expected_error = "{0!r} doesn't have either `fields` or `_declared_fields`.".format(NotASchema)
+        with pytest.raises(ValueError, match=expected_error):
             openapi.schema2jsonschema(NotASchema)
 
-        assert excinfo.value.args[0] == ("{0!r} doesn't have either `fields` "
-                                         'or `_declared_fields`'.format(NotASchema))
-
 
 class TestMarshmallowSchemaToParameters:
 
@@ -546,12 +544,10 @@ class TestMarshmallowSchemaToParameters:
         class NotASchema(object):
             pass
 
-        with pytest.raises(ValueError) as excinfo:
+        expected_error = "{0!r} doesn't have either `fields` or `_declared_fields`".format(NotASchema)
+        with pytest.raises(ValueError, match=expected_error):
             openapi.schema2jsonschema(NotASchema)
 
-        assert excinfo.value.args[0] == ("{0!r} doesn't have either `fields` "
-                                         'or `_declared_fields`'.format(NotASchema))
-
 
 class CategorySchema(Schema):
     id = fields.Int()
