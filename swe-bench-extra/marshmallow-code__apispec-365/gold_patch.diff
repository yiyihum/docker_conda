diff --git a/apispec/core.py b/apispec/core.py
index 7fdf0d4..147c612 100644
--- a/apispec/core.py
+++ b/apispec/core.py
@@ -3,7 +3,7 @@
 from collections import OrderedDict
 
 from apispec.compat import iterkeys, iteritems
-from .exceptions import APISpecError, PluginMethodNotImplementedError
+from .exceptions import APISpecError, PluginMethodNotImplementedError, DuplicateComponentNameError
 from .utils import OpenAPIVersion, deepupdate
 
 VALID_METHODS = [
@@ -122,6 +122,10 @@ class Components(object):
 
         https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#definitionsObject
         """
+        if name in self._schemas:
+            raise DuplicateComponentNameError(
+                'Another schema with name "{}" is already registered.'.format(name),
+            )
         ret = {}
         # Execute all helpers from plugins
         for plugin in self._plugins:
@@ -147,6 +151,10 @@ class Components(object):
         :param str location: location of the parameter.
         :param dict kwargs: parameter fields.
         """
+        if param_id in self._parameters:
+            raise DuplicateComponentNameError(
+                'Another parameter with name "{}" is already registered.'.format(param_id),
+            )
         ret = kwargs.copy()
         ret.setdefault('name', param_id)
         ret['in'] = location
@@ -165,6 +173,10 @@ class Components(object):
         :param str ref_id: ref_id to use as reference
         :param dict kwargs: response fields
         """
+        if ref_id in self._responses:
+            raise DuplicateComponentNameError(
+                'Another response with name "{}" is already registered.'.format(ref_id),
+            )
         ret = kwargs.copy()
         # Execute all helpers from plugins
         for plugin in self._plugins:
@@ -257,7 +269,7 @@ class APISpec(object):
             if ret is not None:
                 path = ret
         if not path:
-            raise APISpecError('Path template is not specified')
+            raise APISpecError('Path template is not specified.')
 
         # Execute operation helpers
         for plugin in self.plugins:
diff --git a/apispec/exceptions.py b/apispec/exceptions.py
index b382a27..0191810 100644
--- a/apispec/exceptions.py
+++ b/apispec/exceptions.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 """Exception classes."""
-import warnings
 
 class APISpecError(Exception):
     """Base class for all apispec-related errors."""
@@ -8,17 +7,8 @@ class APISpecError(Exception):
 class PluginMethodNotImplementedError(APISpecError, NotImplementedError):
     """Raised when calling an unimplemented helper method in a plugin"""
 
+class DuplicateComponentNameError(APISpecError):
+    """Raised when registering two components with the same name"""
+
 class OpenAPIError(APISpecError):
     """Raised when a OpenAPI spec validation fails."""
-
-class SwaggerError(OpenAPIError):
-    """
-    .. deprecated:: 0.38.0
-        Use `apispec.exceptions.OpenAPIError` instead.
-    """
-    def __init__(self, *args, **kwargs):
-        warnings.warn(
-            'SwaggerError is deprecated. Use OpenAPIError instead.',
-            DeprecationWarning,
-        )
-        super(SwaggerError, self).__init__(*args, **kwargs)
diff --git a/apispec/ext/marshmallow/common.py b/apispec/ext/marshmallow/common.py
index 2cbbf01..f0ef880 100644
--- a/apispec/ext/marshmallow/common.py
+++ b/apispec/ext/marshmallow/common.py
@@ -43,12 +43,12 @@ def get_fields(schema):
         return schema.fields
     elif hasattr(schema, '_declared_fields'):
         return copy.deepcopy(schema._declared_fields)
-    raise ValueError("{0!r} doesn't have either `fields` or `_declared_fields`".format(schema))
+    raise ValueError("{0!r} doesn't have either `fields` or `_declared_fields`.".format(schema))
 
 
 def make_schema_key(schema):
     if not isinstance(schema, marshmallow.Schema):
-        raise TypeError('can only make a schema key based on a Schema instance')
+        raise TypeError('can only make a schema key based on a Schema instance.')
     modifiers = []
     for modifier in MODIFIERS:
         attribute = getattr(schema, modifier)
diff --git a/apispec/ext/marshmallow/openapi.py b/apispec/ext/marshmallow/openapi.py
index a254079..fa620d5 100644
--- a/apispec/ext/marshmallow/openapi.py
+++ b/apispec/ext/marshmallow/openapi.py
@@ -140,7 +140,7 @@ class OpenAPIConverter(object):
         elif len(args) == 2:
             openapi_type_field = args
         else:
-            raise TypeError('Pass core marshmallow field type or (type, fmt) pair')
+            raise TypeError('Pass core marshmallow field type or (type, fmt) pair.')
 
         def inner(field_type):
             self.field_mapping[field_type] = openapi_type_field
diff --git a/setup.py b/setup.py
index 6db211b..4483ff4 100644
--- a/setup.py
+++ b/setup.py
@@ -45,7 +45,7 @@ def find_version(fname):
                 version = m.group(1)
                 break
     if not version:
-        raise RuntimeError('Cannot find version information')
+        raise RuntimeError('Cannot find version information.')
     return version
 
 
