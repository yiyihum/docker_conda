diff --git a/test/test_css.py b/test/test_css.py
index b16939f..86442bc 100644
--- a/test/test_css.py
+++ b/test/test_css.py
@@ -36,3 +36,38 @@ class TestSVGCSS(unittest.TestCase):
 
         self.assertEqual(circ2.fill, "none")
         self.assertEqual(circ2.stroke, "red")
+
+    def test_issue_178(self):
+        """Testing Issue 178 css comment parsing
+        """
+
+        q = io.StringIO(u'''<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80">
+        <defs>
+        <style>
+        //this is a comment.
+        .cls-1,.cls-2{fill:none;stroke-miterlimit:10;}.cls-1{stroke:blue;}.cls-2{stroke:red;}
+        //.cls-2{stroke:pink;}
+        /* Testing this should be functional */
+        </style>
+        </defs>
+        <g id="Layer_2" data-name="Layer 2">
+        <g id="Layer_1-2" data-name="Layer 1">
+        <polygon points="56.59 67.4 39.86 57.28 23.01 67.22 26.34 45.99 12.83 30.88 31.62 27.88 40.12 8.6 48.41 27.97 67.17 31.17 53.5 46.14 56.59 67.4"/>
+        <circle class="cls-1" cx="40" cy="40" r="35"/>
+        <circle class="cls-2" cx="40" cy="40" r="39.5"/>
+        </g>
+        </g>
+        </svg>''')
+        m = SVG.parse(q)
+        poly = m[0][0][0]
+        circ1 = m[0][0][1]
+        circ2 = m[0][0][2]
+
+        self.assertEqual(poly.fill, "black")
+        self.assertEqual(poly.stroke, "none")
+
+        self.assertEqual(circ1.fill, "none")
+        self.assertEqual(circ1.stroke, "blue")
+
+        self.assertEqual(circ2.fill, "none")
+        self.assertEqual(circ2.stroke, "red")
diff --git a/test/test_path_segments.py b/test/test_path_segments.py
index 5af098d..8656fdc 100644
--- a/test/test_path_segments.py
+++ b/test/test_path_segments.py
@@ -40,3 +40,21 @@ class TestBoundingBox(unittest.TestCase):
     def test_null_arc_bbox(self):
         self.assertEqual(Path("M0,0A0,0 0 0 0 0,0z").bbox(), (0,0,0,0))
 
+
+class TestArcControlPoints(unittest.TestCase):
+
+    def test_coincident_end_arc(self):
+        """
+        Tests the creation of a control point with a coincident start and end.
+        """
+        arc = Arc(start=(0,0), control=(50,0), end=(0,0))
+        self.assertAlmostEqual(arc.rx, 25)
+
+    def test_linear_arc(self):
+        """
+        Colinear Arcs should raise value errors.
+        """
+        arc_vertical = Arc(start=(0, 0), control=(25, 0), end=(50, 0))
+        # print(arc_vertical)
+        arc_horizontal = Arc(start=(0, 0), control=(0, 25), end=(0, 50))
+        # print(arc_horizontal)
