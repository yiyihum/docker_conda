diff --git a/responses/test_responses.py b/responses/test_responses.py
index 0584a3c..fdab8da 100644
--- a/responses/test_responses.py
+++ b/responses/test_responses.py
@@ -16,7 +16,7 @@ from responses import BaseResponse, Response
 try:
     from mock import patch, Mock
 except ImportError:
-    from unittest.mock import patch, Mock
+    from unittest.mock import patch, Mock  # type: ignore
 
 
 def assert_reset():
@@ -34,6 +34,14 @@ def assert_response(resp, body=None, content_type="text/plain"):
     assert resp.text == body
 
 
+def assert_params(resp, expected):
+    assert hasattr(resp, "request"), "Missing request"
+    assert hasattr(
+        resp.request, "params"
+    ), "Missing params on request that responses should add"
+    assert getattr(resp.request, "params") == expected, "Incorrect parameters"
+
+
 def test_response():
     @responses.activate
     def run():
@@ -164,6 +172,77 @@ def test_replace_response_object_error():
     assert_reset()
 
 
+@pytest.mark.parametrize(
+    "original,replacement",
+    [
+        ("http://example.com/two", "http://example.com/two"),
+        (
+            Response(method=responses.GET, url="http://example.com/two"),
+            Response(
+                method=responses.GET, url="http://example.com/two", body="testtwo"
+            ),
+        ),
+        (
+            re.compile(r"http://example\.com/two"),
+            re.compile(r"http://example\.com/two"),
+        ),
+    ],
+)
+def test_upsert_replace(original, replacement):
+    @responses.activate
+    def run():
+        responses.add(responses.GET, "http://example.com/one", body="test1")
+
+        if isinstance(original, BaseResponse):
+            responses.add(original)
+        else:
+            responses.add(responses.GET, original, body="test2")
+
+        if isinstance(replacement, BaseResponse):
+            responses.upsert(replacement)
+        else:
+            responses.upsert(responses.GET, replacement, body="testtwo")
+
+        resp = requests.get("http://example.com/two")
+        assert_response(resp, "testtwo")
+
+    run()
+    assert_reset()
+
+
+@pytest.mark.parametrize(
+    "original,replacement",
+    [
+        ("http://example.com/two", "http://example.com/two"),
+        (
+            Response(method=responses.GET, url="http://example.com/two"),
+            Response(
+                method=responses.GET, url="http://example.com/two", body="testtwo"
+            ),
+        ),
+        (
+            re.compile(r"http://example\.com/two"),
+            re.compile(r"http://example\.com/two"),
+        ),
+    ],
+)
+def test_upsert_add(original, replacement):
+    @responses.activate
+    def run():
+        responses.add(responses.GET, "http://example.com/one", body="test1")
+
+        if isinstance(replacement, BaseResponse):
+            responses.upsert(replacement)
+        else:
+            responses.upsert(responses.GET, replacement, body="testtwo")
+
+        resp = requests.get("http://example.com/two")
+        assert_response(resp, "testtwo")
+
+    run()
+    assert_reset()
+
+
 def test_remove():
     @responses.activate
     def run():
@@ -802,7 +881,7 @@ def test_response_callback():
             resp = requests.get("http://example.com")
             assert resp.text == "test"
             assert hasattr(resp, "_is_mocked")
-            assert resp._is_mocked is True
+            assert getattr(resp, "_is_mocked") is True
 
     run()
     assert_reset()
@@ -813,8 +892,8 @@ def test_response_filebody():
 
     def run():
         with responses.RequestsMock() as m:
-            with open("README.rst", "rb") as out:
-                m.add(responses.GET, "http://example.com", body=out, stream=True)
+            with open("README.rst", "r") as out:
+                m.add(responses.GET, "http://example.com", body=out.read(), stream=True)
                 resp = requests.get("http://example.com")
             with open("README.rst", "r") as out:
                 assert resp.text == out.read()
@@ -963,7 +1042,7 @@ def test_handles_buffered_reader_body():
 
     @responses.activate
     def run():
-        responses.add(responses.GET, url, body=BufferedReader(BytesIO(b"test")))
+        responses.add(responses.GET, url, body=BufferedReader(BytesIO(b"test")))  # type: ignore
 
         resp = requests.get(url)
 
@@ -1161,11 +1240,11 @@ def test_request_param(url):
         )
         resp = requests.get(url, params=params)
         assert_response(resp, "test")
-        assert resp.request.params == params
+        assert_params(resp, params)
 
         resp = requests.get(url)
         assert_response(resp, "test")
-        assert resp.request.params == {}
+        assert_params(resp, {})
 
     run()
     assert_reset()
@@ -1183,7 +1262,7 @@ def test_request_param_with_multiple_values_for_the_same_key():
         )
         resp = requests.get(url, params=params)
         assert_response(resp, "test")
-        assert resp.request.params == params
+        assert_params(resp, params)
 
     run()
     assert_reset()
