diff --git a/src/psyclone/tests/psyir/nodes/assignment_test.py b/src/psyclone/tests/psyir/nodes/assignment_test.py
index ac1ad34dc..a753df704 100644
--- a/src/psyclone/tests/psyir/nodes/assignment_test.py
+++ b/src/psyclone/tests/psyir/nodes/assignment_test.py
@@ -41,9 +41,11 @@
 from __future__ import absolute_import
 import pytest
 from psyclone.psyir.nodes import Assignment, Reference, Literal, \
-    ArrayReference, Range
-from psyclone.psyir.symbols import DataSymbol, REAL_SINGLE_TYPE, \
-    INTEGER_SINGLE_TYPE, REAL_TYPE, ArrayType, INTEGER_TYPE
+    ArrayReference, Range, BinaryOperation, StructureReference, \
+    ArrayOfStructuresReference, UnaryOperation
+from psyclone.psyir.symbols import DataSymbol, REAL_SINGLE_TYPE, Symbol, \
+    INTEGER_SINGLE_TYPE, REAL_TYPE, ArrayType, INTEGER_TYPE, StructureType, \
+    TypeSymbol
 from psyclone.errors import InternalError, GenerationError
 from psyclone.psyir.backend.fortran import FortranWriter
 from psyclone.tests.utilities import check_links
@@ -133,28 +135,182 @@ def test_assignment_children_validation():
 
 def test_is_array_range():
     '''test that the is_array_range method behaves as expected, returning
-    true if the LHS of the assignment is an array range access and
-    false otherwise.
+    true if the LHS of the assignment is an array range access.
 
     '''
     one = Literal("1.0", REAL_TYPE)
     int_one = Literal("1", INTEGER_TYPE)
+    int_ten = Literal("10", INTEGER_TYPE)
+
+    # lhs is an array reference with a range
+    array_type = ArrayType(REAL_TYPE, [10, 10])
+    symbol = DataSymbol("x", array_type)
+    x_range = Range.create(int_one, int_ten.copy(), int_one.copy())
+    array_ref = ArrayReference.create(symbol, [x_range, int_one.copy()])
+    assignment = Assignment.create(array_ref, one.copy())
+    assert assignment.is_array_range is True
+
+    # Check when lhs consists of various forms of structure access
+    grid_type = StructureType.create([
+        ("dx", REAL_SINGLE_TYPE, Symbol.Visibility.PUBLIC),
+        ("dy", REAL_SINGLE_TYPE, Symbol.Visibility.PUBLIC)])
+    grid_type_symbol = TypeSymbol("grid_type", grid_type)
+    # Create the definition of the 'field_type', contains array of grid_types
+    field_type_def = StructureType.create(
+        [("data", ArrayType(REAL_SINGLE_TYPE, [10]), Symbol.Visibility.PUBLIC),
+         ("sub_meshes", ArrayType(grid_type_symbol, [3]),
+          Symbol.Visibility.PUBLIC)])
+    field_type_symbol = TypeSymbol("field_type", field_type_def)
+    field_symbol = DataSymbol("wind", field_type_symbol)
+
+    # Array reference to component of derived type using a range
+    lbound = BinaryOperation.create(
+        BinaryOperation.Operator.LBOUND,
+        StructureReference.create(field_symbol, ["data"]), int_one.copy())
+    ubound = BinaryOperation.create(
+        BinaryOperation.Operator.UBOUND,
+        StructureReference.create(field_symbol, ["data"]), int_one.copy())
+    my_range = Range.create(lbound, ubound)
+
+    data_ref = StructureReference.create(field_symbol, [("data", [my_range])])
+    assign = Assignment.create(data_ref, one.copy())
+    assert assign.is_array_range is True
+
+    # Access to slice of 'sub_meshes': wind%sub_meshes(1:3)%dx = 1.0
+    sub_range = Range.create(int_one.copy(), Literal("3", INTEGER_TYPE))
+    dx_ref = StructureReference.create(field_symbol, [("sub_meshes",
+                                                       [sub_range]), "dx"])
+    sub_assign = Assignment.create(dx_ref, one.copy())
+    assert sub_assign.is_array_range is True
+
+    # Create an array of these derived types and assign to a slice:
+    # chi(1:10)%data(1) = 1.0
+    field_bundle_symbol = DataSymbol("chi", ArrayType(field_type_symbol, [3]))
+    fld_range = Range.create(int_one.copy(), Literal("10", INTEGER_TYPE))
+    fld_ref = ArrayOfStructuresReference.create(field_bundle_symbol,
+                                                [fld_range],
+                                                [("data", [int_one.copy()])])
+    fld_assign = Assignment.create(fld_ref, one.copy())
+    assert fld_assign.is_array_range is True
+
+    # When the slice has two operator ancestors, none of which are a reduction
+    # e.g y(1, INT(ABS(map(:, 1)))) = 1.0
+    int_array_type = ArrayType(INTEGER_SINGLE_TYPE, [10, 10])
+    map_sym = DataSymbol("map", int_array_type)
+    lbound1 = BinaryOperation.create(
+        BinaryOperation.Operator.LBOUND,
+        Reference(map_sym), int_one.copy())
+    ubound1 = BinaryOperation.create(
+        BinaryOperation.Operator.UBOUND,
+        Reference(map_sym), int_one.copy())
+    my_range1 = Range.create(lbound1, ubound1)
+    abs_op = UnaryOperation.create(UnaryOperation.Operator.ABS,
+                                   ArrayReference.create(map_sym,
+                                                         [my_range1,
+                                                          int_one.copy()]))
+    int_op = UnaryOperation.create(UnaryOperation.Operator.INT, abs_op)
+    assignment = Assignment.create(
+        ArrayReference.create(symbol, [int_one.copy(), int_op]),
+        one.copy())
+    assert assignment.is_array_range is True
+
+
+@pytest.mark.xfail(reason="#658 needs typing of PSyIR expressions")
+def test_array_range_with_reduction():
+    ''' Test that we correctly identify an array range when it is the result
+        of a reduction from an array, e.g x(1, INT(SUM(map(:, :), 1))) = 1.0
+
+    '''
+    one = Literal("1.0", REAL_TYPE)
+    int_one = Literal("1", INTEGER_TYPE)
+    int_two = Literal("2", INTEGER_TYPE)
+    int_array_type = ArrayType(INTEGER_SINGLE_TYPE, [10, 10])
+    map_sym = DataSymbol("map", int_array_type)
+    array_type = ArrayType(REAL_TYPE, [10, 10])
+    symbol = DataSymbol("x", array_type)
+    lbound1 = BinaryOperation.create(
+        BinaryOperation.Operator.LBOUND,
+        Reference(map_sym), int_one.copy())
+    ubound1 = BinaryOperation.create(
+        BinaryOperation.Operator.UBOUND,
+        Reference(map_sym), int_one.copy())
+    my_range1 = Range.create(lbound1, ubound1)
+    lbound2 = BinaryOperation.create(
+        BinaryOperation.Operator.LBOUND,
+        Reference(map_sym), int_two.copy())
+    ubound2 = BinaryOperation.create(
+        BinaryOperation.Operator.UBOUND,
+        Reference(map_sym), int_two.copy())
+    my_range2 = Range.create(lbound2, ubound2)
+    bsum_op = BinaryOperation.create(BinaryOperation.Operator.SUM,
+                                     ArrayReference.create(map_sym,
+                                                           [my_range1,
+                                                            my_range2]),
+                                     int_one.copy())
+    int_op2 = UnaryOperation.create(UnaryOperation.Operator.INT, bsum_op)
+    assignment = Assignment.create(
+        ArrayReference.create(symbol,
+                              [int_one.copy(), int_op2]),
+        one.copy())
+    assert assignment.is_array_range is True
+
+
+def test_is_not_array_range():
+    ''' Test that is_array_range correctly rejects things that aren't
+    an assignment to an array range.
+
+    '''
+    int_one = Literal("1", INTEGER_SINGLE_TYPE)
+    one = Literal("1.0", REAL_TYPE)
     var = DataSymbol("x", REAL_TYPE)
     reference = Reference(var)
 
     # lhs is not an array
     assignment = Assignment.create(reference, one)
-    assert not assignment.is_array_range
+    assert assignment.is_array_range is False
 
     # lhs is an array reference but has no range
     array_type = ArrayType(REAL_TYPE, [10, 10])
-    symbol = DataSymbol("x", array_type)
+    symbol = DataSymbol("y", array_type)
     array_ref = Reference(symbol)
     assignment = Assignment.create(array_ref, one.copy())
-    assert not assignment.is_array_range
+    assert assignment.is_array_range is False
 
-    # lhs is an array reference with a range
-    my_range = Range.create(int_one, int_one.copy(), int_one.copy())
-    array_ref = ArrayReference.create(symbol, [my_range, int_one.copy()])
-    assignment = Assignment.create(array_ref, one.copy())
-    assert assignment.is_array_range
+    # lhs is an array reference but the single index value is obtained
+    # using an array range, y(1, SUM(map(:), 1)) = 1.0
+    int_array_type = ArrayType(INTEGER_SINGLE_TYPE, [10])
+    map_sym = DataSymbol("map", int_array_type)
+    start = BinaryOperation.create(BinaryOperation.Operator.LBOUND,
+                                   Reference(map_sym), int_one.copy())
+    stop = BinaryOperation.create(BinaryOperation.Operator.UBOUND,
+                                  Reference(map_sym), int_one.copy())
+    my_range = Range.create(start, stop)
+    sum_op = BinaryOperation.create(BinaryOperation.Operator.SUM,
+                                    ArrayReference.create(map_sym, [my_range]),
+                                    int_one.copy())
+    assignment = Assignment.create(
+        ArrayReference.create(symbol, [int_one.copy(), sum_op]),
+        one.copy())
+    assert assignment.is_array_range is False
+
+    # When the slice has two operator ancestors, one of which is a reduction
+    # e.g y(1, SUM(ABS(map(:)), 1)) = 1.0
+    abs_op = UnaryOperation.create(UnaryOperation.Operator.ABS,
+                                   ArrayReference.create(map_sym,
+                                                         [my_range.copy()]))
+    sum_op2 = BinaryOperation.create(BinaryOperation.Operator.SUM,
+                                     abs_op, int_one.copy())
+    assignment = Assignment.create(
+        ArrayReference.create(symbol, [int_one.copy(), sum_op2]),
+        one.copy())
+    assert assignment.is_array_range is False
+
+    # lhs is a scalar member of a structure
+    grid_type = StructureType.create([
+        ("dx", REAL_SINGLE_TYPE, Symbol.Visibility.PUBLIC),
+        ("dy", REAL_SINGLE_TYPE, Symbol.Visibility.PUBLIC)])
+    grid_type_symbol = TypeSymbol("grid_type", grid_type)
+    grid_sym = DataSymbol("grid", grid_type_symbol)
+    assignment = Assignment.create(StructureReference.create(grid_sym, ["dx"]),
+                                   one.copy())
+    assert assignment.is_array_range is False
