diff --git a/README.md b/README.md
index 93ad929..4d9924b 100644
--- a/README.md
+++ b/README.md
@@ -42,6 +42,8 @@ Currently provided functions (see functions docstrings for examples of usage):
   non-generic classes.
 * ``is_union_type(tp)``:
   Test if ``tp`` is a union type.
+* ``is_optional_type(tp)``:
+  Test if ``tp`` is an optional type (either ``type(None)`` or a direct union to it such as in ``Optional[int]``). Nesting and ``TypeVar``s are not unfolded/inspected in this process.
 * ``is_typevar(tp)``:
   Test if ``tp`` represents a type variable.
 * ``is_classvar(tp)``:
diff --git a/typing_inspect.py b/typing_inspect.py
index 6dba71f..ee0de11 100644
--- a/typing_inspect.py
+++ b/typing_inspect.py
@@ -116,6 +116,27 @@ def is_tuple_type(tp):
     return type(tp) is TupleMeta
 
 
+def is_optional_type(tp):
+    """Returns `True` if the type is `type(None)`, or is a direct `Union` to `type(None)`, such as `Optional[T]`.
+
+    NOTE: this method inspects nested `Union` arguments but not `TypeVar` definitions (`bound`/`constraint`). So it
+    will return `False` if
+     - `tp` is a `TypeVar` bound, or constrained to, an optional type
+     - `tp` is a `Union` to a `TypeVar` bound or constrained to an optional type,
+     - `tp` refers to a *nested* `Union` containing an optional type or one of the above.
+
+    Users wishing to check for optionality in types relying on type variables might wish to use this method in
+    combination with `get_constraints` and `get_bound`
+    """
+
+    if tp is type(None):
+        return True
+    elif is_union_type(tp):
+        return any(is_optional_type(tt) for tt in get_args(tp, evaluate=True))
+    else:
+        return False
+
+
 def is_union_type(tp):
     """Test if the type is a union type. Examples::
 
@@ -322,6 +343,36 @@ def get_args(tp, evaluate=None):
     return ()
 
 
+def get_bound(tp):
+    """Returns the type bound to a `TypeVar` if any. It the type is not a `TypeVar`, a `TypeError` is raised
+
+    Examples::
+
+        get_bound(TypeVar('T')) == None
+        get_bound(TypeVar('T', bound=int)) == int
+    """
+
+    if is_typevar(tp):
+        return getattr(tp, '__bound__', None)
+    else:
+        raise TypeError("type is not a `TypeVar`: " + str(tp))
+
+
+def get_constraints(tp):
+    """Returns the constraints of a `TypeVar` if any. It the type is not a `TypeVar`, a `TypeError` is raised
+
+    Examples::
+
+        get_constraints(TypeVar('T')) == ()
+        get_constraints(TypeVar('T', int, str)) == (int, str)
+    """
+
+    if is_typevar(tp):
+        return getattr(tp, '__constraints__', ())
+    else:
+        raise TypeError("type is not a `TypeVar`: " + str(tp))
+
+
 def get_generic_type(obj):
     """Get the generic type of an object if possible, or runtime class otherwise.
     Examples::
