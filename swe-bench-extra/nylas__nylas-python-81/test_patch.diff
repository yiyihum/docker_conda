diff --git a/tests/conftest.py b/tests/conftest.py
index 3bdd6ef..af96ba9 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -33,7 +33,7 @@ def message_body():
 
 @pytest.fixture
 def api_url():
-    return 'http://localhost:2222'
+    return 'https://localhost:2222'
 
 
 @pytest.fixture
diff --git a/tests/test_client.py b/tests/test_client.py
index 2adce17..f7c2f97 100644
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -21,8 +21,8 @@ def urls_equal(url1, url2):
 
 def test_custom_client():
     # Can specify API server
-    custom = APIClient(api_server="http://example.com")
-    assert custom.api_server == "http://example.com"
+    custom = APIClient(api_server="https://example.com")
+    assert custom.api_server == "https://example.com"
     # Must be a valid URL
     with pytest.raises(Exception) as exc:
         APIClient(api_server="invalid")
@@ -185,3 +185,47 @@ def test_call_resource_method(mocked_responses, api_client, api_url):
     )
     assert isinstance(contact, Contact)
     assert len(mocked_responses.calls) == 1
+
+
+def test_201_response(mocked_responses, api_client, api_url):
+    contact_data = {
+        "id": 1,
+        "name": "first",
+        "email": "first@example.com",
+    }
+    mocked_responses.add(
+        responses.POST,
+        api_url + "/contacts/",
+        content_type='application/json',
+        status=201,  # This HTTP status still indicates success,
+                     # even though it's not 200.
+        body=json.dumps(contact_data),
+    )
+    contact = api_client.contacts.create()
+    contact.save()
+    assert len(mocked_responses.calls) == 1
+
+
+def test_301_response(mocked_responses, api_client, api_url):
+    contact_data = {
+        "id": 1,
+        "name": "first",
+        "email": "first@example.com",
+    }
+    mocked_responses.add(
+        responses.GET,
+        api_url + "/contacts/first",
+        status=301,
+        headers={"Location": api_url + "/contacts/1"}
+    )
+    mocked_responses.add(
+        responses.GET,
+        api_url + "/contacts/1",
+        content_type='application/json',
+        status=200,
+        body=json.dumps(contact_data),
+    )
+    contact = api_client.contacts.find("first")
+    assert contact["id"] == 1
+    assert contact["name"] == "first"
+    assert len(mocked_responses.calls) == 2
