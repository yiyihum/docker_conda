diff --git a/testing/test_git.py b/testing/test_git.py
index 6f5246c..1b57fed 100644
--- a/testing/test_git.py
+++ b/testing/test_git.py
@@ -7,7 +7,6 @@ import pytest
 from datetime import datetime
 from os.path import join as opj
 from setuptools_scm.file_finder_git import git_find_files
-import warnings
 
 
 skip_if_win_27 = pytest.mark.skipif(
@@ -16,10 +15,9 @@ skip_if_win_27 = pytest.mark.skipif(
 )
 
 
-with warnings.catch_warnings():
-    warnings.filterwarnings("ignore")
-    if not has_command("git"):
-        pytestmark = pytest.mark.skip(reason="git executable not found")
+pytestmark = pytest.mark.skipif(
+    not has_command("git", warn=False), reason="git executable not found"
+)
 
 
 @pytest.fixture
@@ -59,6 +57,12 @@ setup(use_scm_version={"root": "../..",
     assert res == "0.1.dev0"
 
 
+def test_git_gone(wd, monkeypatch):
+    monkeypatch.setenv("PATH", str(wd.cwd / "not-existing"))
+    with pytest.raises(EnvironmentError, match="'git' was not found"):
+        git.parse(str(wd.cwd), git.DEFAULT_DESCRIBE)
+
+
 @pytest.mark.issue("https://github.com/pypa/setuptools_scm/issues/298")
 @pytest.mark.issue(403)
 def test_file_finder_no_history(wd, caplog):
diff --git a/testing/test_integration.py b/testing/test_integration.py
index 4564897..446aac0 100644
--- a/testing/test_integration.py
+++ b/testing/test_integration.py
@@ -8,11 +8,7 @@ from setuptools_scm import PRETEND_KEY, PRETEND_KEY_NAMED
 
 @pytest.fixture
 def wd(wd):
-    try:
-        wd("git init")
-    except OSError:
-        pytest.skip("git executable not found")
-
+    wd("git init")
     wd("git config user.email test@example.com")
     wd('git config user.name "a test"')
     wd.add_command = "git add ."
diff --git a/testing/test_mercurial.py b/testing/test_mercurial.py
index 815ca00..265e207 100644
--- a/testing/test_mercurial.py
+++ b/testing/test_mercurial.py
@@ -4,13 +4,11 @@ from setuptools_scm import integration
 from setuptools_scm.config import Configuration
 from setuptools_scm.utils import has_command
 import pytest
-import warnings
 
 
-with warnings.catch_warnings():
-    warnings.filterwarnings("ignore")
-    if not has_command("hg"):
-        pytestmark = pytest.mark.skip(reason="hg executable not found")
+pytestmark = pytest.mark.skipif(
+    not has_command("hg", warn=False), reason="hg executable not found"
+)
 
 
 @pytest.fixture
@@ -46,6 +44,12 @@ def test_archival_to_version(expected, data):
     )
 
 
+def test_hg_gone(wd, monkeypatch):
+    monkeypatch.setenv("PATH", str(wd.cwd / "not-existing"))
+    with pytest.raises(EnvironmentError, match="'hg' was not found"):
+        parse(str(wd.cwd))
+
+
 def test_find_files_stop_at_root_hg(wd, monkeypatch):
     wd.commit_testfile()
     project = wd.cwd / "project"
