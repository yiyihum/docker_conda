diff --git a/marge/job.py b/marge/job.py
index 8a562d8..b2078d8 100644
--- a/marge/job.py
+++ b/marge/job.py
@@ -153,6 +153,38 @@ class MergeJob(object):
             except gitlab.Unauthorized:
                 log.warning('Unauthorized!')
                 raise CannotMerge('My user cannot accept merge requests!')
+            except gitlab.NotFound as e:
+                log.warning('Not Found!: %s', e)
+                merge_request.refetch_info()
+                if merge_request.state == 'merged':
+                    # someone must have hit "merge when build succeeds" and we lost the race,
+                    # the branch is gone and we got a 404. Anyway, our job here is done.
+                    # (see #33)
+                    rebased_into_up_to_date_target_branch = True
+                else:
+                    log.warning('For the record, merge request state is %r', merge_request.state)
+                    raise
+            except gitlab.MethodNotAllowed as e:
+                log.warning('Not Allowed!: %s', e)
+                merge_request.refetch_info()
+                if merge_request.work_in_progress:
+                    raise CannotMerge(
+                        'The request was marked as WIP as I was processing it (maybe a WIP commit?)'
+                    )
+                elif merge_request.state == 'reopened':
+                    raise CannotMerge(
+                        'GitLab refused to merge this branch. I suspect that a Push Rule or a git-hook '
+                        'is rejecting my commits; maybe my email needs to be white-listed?'
+                    )
+                elif merge_request.state == 'closed':
+                    raise CannotMerge('Someone closed the merge request while I was attempting to merge it.')
+                elif merge_request.state == 'merged':
+                    # We are not covering any observed behaviour here, but if at this
+                    # point the request is merged, our job is done, so no need to complain
+                    log.info('Merge request is already merged, someone was faster!')
+                    rebased_into_up_to_date_target_branch = True
+                else:
+                    raise CannotMerge("Gitlab refused to merge this request and I don't know why!")
             except gitlab.ApiError:
                 log.exception('Unanticipated ApiError from Gitlab on merge attempt')
                 raise CannotMerge('had some issue with gitlab, check my logs...')
