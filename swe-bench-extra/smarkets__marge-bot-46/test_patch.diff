diff --git a/tests/test_job.py b/tests/test_job.py
index 8e6bf77..984c9c4 100644
--- a/tests/test_job.py
+++ b/tests/test_job.py
@@ -246,6 +246,119 @@ class TestRebaseAndAccept(object):
         assert api.state == 'merged'
         assert api.notes == ["My job would be easier if people didn't jump the queue and pushed directly... *sigh*"]
 
+    def test_handles_races_for_merging(self, time_sleep):
+        api, mocklab = self.api, self.mocklab
+        rewritten_sha = mocklab.rewritten_sha
+        api.add_transition(
+            PUT(
+                '/projects/1234/merge_requests/54/merge',
+                dict(sha=rewritten_sha, should_remove_source_branch=True, merge_when_pipeline_succeeds=True),
+            ),
+            Error(marge.gitlab.NotFound(404, {'message': '404 Branch Not Found'})),
+            from_state='passed', to_state='someone_else_merged',
+        )
+        api.add_merge_request(
+            dict(mocklab.merge_request_info, state='merged'),
+            from_state='someone_else_merged',
+        )
+        with patch('marge.job.push_rebased_and_rewritten_version', side_effect=mocklab.push_rebased):
+            job = self.make_job()
+            job.execute()
+        assert api.state == 'someone_else_merged'
+        assert api.notes == []
+
+    def test_handles_request_becoming_wip_after_push(self, time_sleep):
+        api, mocklab = self.api, self.mocklab
+        rewritten_sha = mocklab.rewritten_sha
+        api.add_transition(
+            PUT(
+                '/projects/1234/merge_requests/54/merge',
+                dict(sha=rewritten_sha, should_remove_source_branch=True, merge_when_pipeline_succeeds=True),
+            ),
+            Error(marge.gitlab.MethodNotAllowed(405, {'message': '405 Method Not Allowed'})),
+            from_state='passed', to_state='now_is_wip',
+        )
+        api.add_merge_request(
+            dict(mocklab.merge_request_info, work_in_progress=True),
+            from_state='now_is_wip',
+        )
+        message = 'The request was marked as WIP as I was processing it (maybe a WIP commit?)'
+        with patch('marge.job.push_rebased_and_rewritten_version', side_effect=mocklab.push_rebased):
+            with mocklab.expected_failure(message):
+                job = self.make_job()
+                job.execute()
+        assert api.state == 'now_is_wip'
+        assert api.notes == ["I couldn't merge this branch: %s" % message]
+
+    def test_guesses_git_hook_error_on_merge_refusal(self, time_sleep):
+        api, mocklab = self.api, self.mocklab
+        rewritten_sha = mocklab.rewritten_sha
+        api.add_transition(
+            PUT(
+                '/projects/1234/merge_requests/54/merge',
+                dict(sha=rewritten_sha, should_remove_source_branch=True, merge_when_pipeline_succeeds=True),
+            ),
+            Error(marge.gitlab.MethodNotAllowed(405, {'message': '405 Method Not Allowed'})),
+            from_state='passed', to_state='rejected_by_git_hook',
+        )
+        api.add_merge_request(
+            dict(mocklab.merge_request_info, state='reopened'),
+            from_state='rejected_by_git_hook',
+        )
+        message = (
+            'GitLab refused to merge this branch. I suspect that a Push Rule or a git-hook '
+            'is rejecting my commits; maybe my email needs to be white-listed?'
+        )
+        with patch('marge.job.push_rebased_and_rewritten_version', side_effect=mocklab.push_rebased):
+            with mocklab.expected_failure(message):
+                job = self.make_job()
+                job.execute()
+        assert api.state == 'rejected_by_git_hook'
+        assert api.notes == ["I couldn't merge this branch: %s" % message]
+
+    def test_guesses_git_hook_error_on_merge_refusal(self, time_sleep):
+        api, mocklab = self.api, self.mocklab
+        rewritten_sha = mocklab.rewritten_sha
+        api.add_transition(
+            PUT(
+                '/projects/1234/merge_requests/54/merge',
+                dict(sha=rewritten_sha, should_remove_source_branch=True, merge_when_pipeline_succeeds=True),
+            ),
+            Error(marge.gitlab.MethodNotAllowed(405, {'message': '405 Method Not Allowed'})),
+            from_state='passed', to_state='oops_someone_closed_it',
+        )
+        api.add_merge_request(
+            dict(mocklab.merge_request_info, state='closed'),
+            from_state='oops_someone_closed_it',
+        )
+        message = 'Someone closed the merge request while I was attempting to merge it.'
+        with patch('marge.job.push_rebased_and_rewritten_version', side_effect=mocklab.push_rebased):
+            with mocklab.expected_failure(message):
+                job = self.make_job()
+                job.execute()
+        assert api.state == 'oops_someone_closed_it'
+        assert api.notes == ["I couldn't merge this branch: %s" % message]
+
+    def test_tells_explicitly_that_gitlab_refused_to_merge(self, time_sleep):
+        api, mocklab = self.api, self.mocklab
+        rewritten_sha = mocklab.rewritten_sha
+        api.add_transition(
+            PUT(
+                '/projects/1234/merge_requests/54/merge',
+                dict(sha=rewritten_sha, should_remove_source_branch=True, merge_when_pipeline_succeeds=True),
+            ),
+            Error(marge.gitlab.MethodNotAllowed(405, {'message': '405 Method Not Allowed'})),
+            from_state='passed', to_state='rejected_for_misterious_reasons',
+        )
+        message = "Gitlab refused to merge this request and I don't know why!"
+        with patch('marge.job.push_rebased_and_rewritten_version', side_effect=mocklab.push_rebased):
+            with mocklab.expected_failure(message):
+                job = self.make_job()
+                job.execute()
+        assert api.state == 'rejected_for_misterious_reasons'
+        assert api.notes == ["I couldn't merge this branch: %s" % message]
+
+
     def test_wont_merge_wip_stuff(self, time_sleep):
         api, mocklab = self.api, self.mocklab
         wip_merge_request = dict(mocklab.merge_request_info, work_in_progress=True)
