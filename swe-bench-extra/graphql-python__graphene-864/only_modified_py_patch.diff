diff --git a/graphene/types/datetime.py b/graphene/types/datetime.py
index 739032b..3519d76 100644
--- a/graphene/types/datetime.py
+++ b/graphene/types/datetime.py
@@ -4,6 +4,7 @@ import datetime
 
 from aniso8601 import parse_date, parse_datetime, parse_time
 from graphql.language import ast
+from six import string_types
 
 from .scalars import Scalar
 
@@ -32,7 +33,10 @@ class Date(Scalar):
     @staticmethod
     def parse_value(value):
         try:
-            return parse_date(value)
+            if isinstance(value, datetime.date):
+                return value
+            elif isinstance(value, string_types):
+                return parse_date(value)
         except ValueError:
             return None
 
@@ -59,7 +63,10 @@ class DateTime(Scalar):
     @staticmethod
     def parse_value(value):
         try:
-            return parse_datetime(value)
+            if isinstance(value, datetime.datetime):
+                return value
+            elif isinstance(value, string_types):
+                return parse_datetime(value)
         except ValueError:
             return None
 
@@ -86,6 +93,9 @@ class Time(Scalar):
     @classmethod
     def parse_value(cls, value):
         try:
-            return parse_time(value)
+            if isinstance(value, datetime.time):
+                return value
+            elif isinstance(value, string_types):
+                return parse_time(value)
         except ValueError:
             return None
diff --git a/graphene/types/resolver.py b/graphene/types/resolver.py
index 888aba8..6a8ea02 100644
--- a/graphene/types/resolver.py
+++ b/graphene/types/resolver.py
@@ -6,7 +6,14 @@ def dict_resolver(attname, default_value, root, info, **args):
     return root.get(attname, default_value)
 
 
-default_resolver = attr_resolver
+def dict_or_attr_resolver(attname, default_value, root, info, **args):
+    resolver = attr_resolver
+    if isinstance(root, dict):
+        resolver = dict_resolver
+    return resolver(attname, default_value, root, info, **args)
+
+
+default_resolver = dict_or_attr_resolver
 
 
 def set_default_resolver(resolver):

