diff --git a/docs/execution/execute.rst b/docs/execution/execute.rst
index 21345aa..1c28548 100644
--- a/docs/execution/execute.rst
+++ b/docs/execution/execute.rst
@@ -24,7 +24,7 @@ You can pass context to a query via ``context``.
     class Query(graphene.ObjectType):
         name = graphene.String()
 
-        def resolve_name(self, info):
+        def resolve_name(root, info):
             return info.context.get('name')
 
     schema = graphene.Schema(Query)
@@ -33,7 +33,7 @@ You can pass context to a query via ``context``.
 
 
 Variables
-_______
+_________
 
 You can pass variables to a query via ``variables``.
 
@@ -41,10 +41,10 @@ You can pass variables to a query via ``variables``.
 .. code:: python
 
     class Query(graphene.ObjectType):
-        user = graphene.Field(User)
+        user = graphene.Field(User, id=graphene.ID(required=True))
 
-        def resolve_user(self, info):
-            return info.context.get('user')
+        def resolve_user(root, info, id):
+            return get_user_by_id(id)
 
     schema = graphene.Schema(Query)
     result = schema.execute(
diff --git a/docs/index.rst b/docs/index.rst
index 3e9577a..aff3960 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -19,3 +19,5 @@ Integrations
 * `Graphene-SQLAlchemy <http://docs.graphene-python.org/projects/sqlalchemy/en/latest/>`_ (`source <https://github.com/graphql-python/graphene-sqlalchemy/>`_)
 * `Graphene-GAE <http://docs.graphene-python.org/projects/gae/en/latest/>`_ (`source <https://github.com/graphql-python/graphene-gae/>`_)
 * `Graphene-Mongo <http://graphene-mongo.readthedocs.io/en/latest/>`_ (`source <https://github.com/graphql-python/graphene-mongo>`_)
+* `Starlette <https://www.starlette.io/graphql/>`_ (`source <https://github.com/encode/starlette>`_)
+* `FastAPI <https://fastapi.tiangolo.com/tutorial/graphql/>`_ (`source <https://github.com/tiangolo/fastapi>`_)
diff --git a/docs/types/objecttypes.rst b/docs/types/objecttypes.rst
index b6eb308..18f91bd 100644
--- a/docs/types/objecttypes.rst
+++ b/docs/types/objecttypes.rst
@@ -57,8 +57,8 @@ so the first argument to the resolver method ``self`` (or ``root``) need
 not be an actual instance of the ``ObjectType``.
 
 If an explicit resolver is not defined on the ``ObjectType`` then Graphene will
-attempt to use a property with the same name on the object that is passed to the
-``ObjectType``.
+attempt to use a property with the same name on the object or dict that is
+passed to the ``ObjectType``.
 
 .. code:: python
 
@@ -70,54 +70,18 @@ attempt to use a property with the same name on the object that is passed to the
 
     class Query(graphene.ObjectType):
         me = graphene.Field(Person)
+        best_friend = graphene.Field(Person)
 
         def resolve_me(_, info):
             # returns an object that represents a Person
             return get_human(name='Luke Skywalker')
 
-If you are passing a dict instead of an object to your ``ObjectType`` you can
-change the default resolver in the ``Meta`` class like this:
-
-.. code:: python
-
-    import graphene
-    from graphene.types.resolver import dict_resolver
-
-    class Person(graphene.ObjectType):
-        class Meta:
-            default_resolver = dict_resolver
-
-        first_name = graphene.String()
-        last_name = graphene.String()
-
-    class Query(graphene.ObjectType):
-        me = graphene.Field(Person)
-
-        def resolve_me(_, info):
+        def resolve_best_friend(_, info):
             return {
-                "first_name": "Luke",
-                "last_name": "Skywalker",
+                "first_name": "R2",
+                "last_name": "D2",
             }
 
-Or you can change the default resolver globally by calling ``set_default_resolver``
-before executing a query.
-
-.. code:: python
-
-    import graphene
-    from graphene.types.resolver import dict_resolver, set_default_resolver
-
-    set_default_resolver(dict_resolver)
-
-    schema = graphene.Schema(query=Query)
-    result = schema.execute('''
-        query {
-            me {
-                firstName
-            }
-        }
-     ''')
-
 
 Resolvers with arguments
 ~~~~~~~~~~~~~~~~~~~~~~~~
@@ -230,4 +194,17 @@ previous example you could do:
     peter.first_name # prints "Peter"
     peter.last_name # prints "Griffin"
 
+Changing the name
+-----------------
+
+By default the type name in the GraphQL schema will the same as the class name
+that defines the ``ObjectType``. This can be changed by setting the ``name``
+property on the ``Meta`` class:
+
+.. code:: python
+
+    class MyGraphQlSong(graphene.ObjectType):
+        class Meta:
+            name = 'Song'
+
 .. _Interface: /docs/interfaces/
diff --git a/graphene/types/datetime.py b/graphene/types/datetime.py
index 739032b..3519d76 100644
--- a/graphene/types/datetime.py
+++ b/graphene/types/datetime.py
@@ -4,6 +4,7 @@ import datetime
 
 from aniso8601 import parse_date, parse_datetime, parse_time
 from graphql.language import ast
+from six import string_types
 
 from .scalars import Scalar
 
@@ -32,7 +33,10 @@ class Date(Scalar):
     @staticmethod
     def parse_value(value):
         try:
-            return parse_date(value)
+            if isinstance(value, datetime.date):
+                return value
+            elif isinstance(value, string_types):
+                return parse_date(value)
         except ValueError:
             return None
 
@@ -59,7 +63,10 @@ class DateTime(Scalar):
     @staticmethod
     def parse_value(value):
         try:
-            return parse_datetime(value)
+            if isinstance(value, datetime.datetime):
+                return value
+            elif isinstance(value, string_types):
+                return parse_datetime(value)
         except ValueError:
             return None
 
@@ -86,6 +93,9 @@ class Time(Scalar):
     @classmethod
     def parse_value(cls, value):
         try:
-            return parse_time(value)
+            if isinstance(value, datetime.time):
+                return value
+            elif isinstance(value, string_types):
+                return parse_time(value)
         except ValueError:
             return None
diff --git a/graphene/types/resolver.py b/graphene/types/resolver.py
index 888aba8..6a8ea02 100644
--- a/graphene/types/resolver.py
+++ b/graphene/types/resolver.py
@@ -6,7 +6,14 @@ def dict_resolver(attname, default_value, root, info, **args):
     return root.get(attname, default_value)
 
 
-default_resolver = attr_resolver
+def dict_or_attr_resolver(attname, default_value, root, info, **args):
+    resolver = attr_resolver
+    if isinstance(root, dict):
+        resolver = dict_resolver
+    return resolver(attname, default_value, root, info, **args)
+
+
+default_resolver = dict_or_attr_resolver
 
 
 def set_default_resolver(resolver):
