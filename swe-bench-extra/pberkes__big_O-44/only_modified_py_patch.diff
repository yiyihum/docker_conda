diff --git a/big_o/complexities.py b/big_o/complexities.py
index a75e4ab..7c58e5d 100755
--- a/big_o/complexities.py
+++ b/big_o/complexities.py
@@ -48,14 +48,21 @@ class ComplexityClass(object):
         tot = 0
         for i in range(len(self.coeff)):
             tot += self.coeff[i] * x[:, i]
-        return tot
+        return self._inverse_transform_time(tot)
+
+    def coefficients(self):
+        """ Return coefficients in standard form. """
+        if self.coeff is None:
+            raise NotFittedError()
+        return self.coeff
 
     def __str__(self):
         prefix = '{}: '.format(self.__class__.__name__)
 
         if self.coeff is None:
-            return prefix + ': not yet fitted'
-        return prefix + self.format_str().format(*tuple(self.coeff)) + ' (sec)'
+            return prefix + 'not yet fitted'
+        return prefix + self.format_str().format(
+            *self.coefficients()) + ' (sec)'
 
     # --- abstract methods
 
@@ -80,6 +87,12 @@ class ComplexityClass(object):
         """
         return t
 
+    def _inverse_transform_time(self, t):
+        """ Inverse transform time as needed for compute.
+        (e.g., t->exp(t)) for exponential class.
+        """
+        return t
+
     def __gt__(self, other):
         return self.order > other.order
 
@@ -176,10 +189,26 @@ class Polynomial(ComplexityClass):
     def _transform_time(self, t):
         return np.log(t)
 
+    def _inverse_transform_time(self, t):
+        return np.exp(t)
+
     @classmethod
     def format_str(cls):
         return 'time = {:.2G} * x^{:.2G}'
 
+    def coefficients(self):
+        """ Return coefficients in standard form. """
+        # The polynomial is stored in the format
+        # exp(a)*n^b where [a, b] are the coefficients
+        # Technical full format is exp(a+b*ln(n))
+        #
+        # Standard form is a*n^b
+        if self.coeff is None:
+            raise NotFittedError()
+
+        a, b = self.coeff
+        return np.exp(a), b
+
 
 class Exponential(ComplexityClass):
     order = 80
@@ -190,10 +219,26 @@ class Exponential(ComplexityClass):
     def _transform_time(self, t):
         return np.log(t)
 
+    def _inverse_transform_time(self, t):
+        return np.exp(t)
+
     @classmethod
     def format_str(cls):
         return 'time = {:.2G} * {:.2G}^n'
 
+    def coefficients(self):
+        """ Return coefficients in standard form. """
+        # The polynomial is stored in the format
+        # exp(a)*exp(b)^n where [a, b] are the coefficients
+        # Technical full format is exp(a+b*n)
+        #
+        # Standard form is a*b^n
+        if self.coeff is None:
+            raise NotFittedError()
+
+        a, b = self.coeff
+        return np.exp(a), np.exp(b)
+
 
 ALL_CLASSES = [Constant, Linear, Quadratic, Cubic, Polynomial,
                Logarithmic, Linearithmic, Exponential]

