diff --git a/plasmapy/formulary/magnetostatics.py b/plasmapy/formulary/magnetostatics.py
index 29eb09ae..2a2de9f0 100644
--- a/plasmapy/formulary/magnetostatics.py
+++ b/plasmapy/formulary/magnetostatics.py
@@ -46,16 +46,21 @@ class MagneticDipole(MagnetoStatics):
         Position of the dipole
 
     """
+
     @validate_quantities
     def __init__(self, moment: u.A * u.m**2, p0: u.m):
         self.moment = moment.value
+        self._moment_u = moment.unit
         self.p0 = p0.value
+        self._p0_u = p0.unit
 
     def __repr__(self):
-        return "{name}(moment={moment}, p0={p0})".format(
+        return "{name}(moment={moment}{moment_u}, p0={p0}{p0_u})".format(
             name=self.__class__.__name__,
             moment=self.moment,
-            p0=self.p0
+            p0=self.p0,
+            moment_u=self._moment_u,
+            p0_u=self._p0_u,
         )
 
     def magnetic_field(self, p: u.m) -> u.T:
@@ -101,11 +106,9 @@ class GeneralWire(Wire):
         electric current
 
     """
+
     @validate_quantities
-    def __init__(self, parametric_eq,
-                 t1,
-                 t2,
-                 current: u.A):
+    def __init__(self, parametric_eq, t1, t2, current: u.A):
         if callable(parametric_eq):
             self.parametric_eq = parametric_eq
         else:
@@ -116,6 +119,20 @@ def __init__(self, parametric_eq,
         else:
             raise ValueError(f"t1={t1} is not smaller than t2={t2}")
         self.current = current.value
+        self._current_u = current.unit
+
+    def __repr__(self):
+        return (
+            "{name}(parametric_eq={parametric_eq}, t1={t1}, t2={t2}, "
+            "current={current}{current_u})".format(
+                name=self.__class__.__name__,
+                parametric_eq=self.parametric_eq.__name__,
+                t1=self.t1,
+                t2=self.t2,
+                current=self.current,
+                current_u=self._current_u,
+            )
+        )
 
     def magnetic_field(self, p: u.m, n: numbers.Integral = 1000) -> u.T:
         r"""
@@ -181,20 +198,27 @@ class FiniteStraightWire(Wire):
         electric current
 
     """
+
     @validate_quantities
     def __init__(self, p1: u.m, p2: u.m, current: u.A):
         self.p1 = p1.value
         self.p2 = p2.value
+        self._p1_u = p1.unit
+        self._p2_u = p2.unit
         if np.all(p1 == p2):
             raise ValueError("p1, p2 should not be the same point.")
         self.current = current.value
+        self._current_u = current.unit
 
     def __repr__(self):
-        return "{name}(p1={p1}, p2={p2}, current={current})".format(
+        return "{name}(p1={p1}{p1_u}, p2={p2}{p2_u}, current={current}{current_u})".format(
             name=self.__class__.__name__,
             p1=self.p1,
             p2=self.p2,
-            current=self.current
+            current=self.current,
+            p1_u=self._p1_u,
+            p2_u=self._p2_u,
+            current_u=self._current_u,
         )
 
     def magnetic_field(self, p) -> u.T:
@@ -261,18 +285,23 @@ class InfiniteStraightWire(Wire):
         electric current
 
     """
+
     @validate_quantities
     def __init__(self, direction, p0: u.m, current: u.A):
-        self.direction = direction/np.linalg.norm(direction)
+        self.direction = direction / np.linalg.norm(direction)
         self.p0 = p0.value
+        self._p0_u = p0.unit
         self.current = current.value
+        self._current_u = current.unit
 
     def __repr__(self):
-        return "{name}(direction={direction}, p0={p0}, current={current})".format(
+        return "{name}(direction={direction}, p0={p0}{p0_u}, current={current}{current_u})".format(
             name=self.__class__.__name__,
             direction=self.direction,
             p0=self.p0,
-            current=self.current
+            current=self.current,
+            p0_u=self._p0_u,
+            current_u=self._current_u,
         )
 
     def magnetic_field(self, p) -> u.T:
@@ -320,16 +349,34 @@ class CircularWire(Wire):
         electric current
 
     """
+
+    def __repr__(self):
+        return (
+            "{name}(normal={normal}, center={center}{center_u}, "
+            "radius={radius}{radius_u}, current={current}{current_u})".format(
+                name=self.__class__.__name__,
+                normal=self.normal,
+                center=self.center,
+                radius=self.radius,
+                current=self.current,
+                center_u=self._center_u,
+                radius_u=self._radius_u,
+                current_u=self._current_u,
+            )
+        )
+
     @validate_quantities
-    def __init__(self, normal, center: u.m, radius: u.m,
-                 current: u.A, n=300):
-        self.normal = normal/np.linalg.norm(normal)
+    def __init__(self, normal, center: u.m, radius: u.m, current: u.A, n=300):
+        self.normal = normal / np.linalg.norm(normal)
         self.center = center.value
+        self._center_u = center.unit
         if radius > 0:
             self.radius = radius.value
+            self._radius_u = radius.unit
         else:
             raise ValueError("Radius should bu larger than 0")
         self.current = current.value
+        self._current_u = current.unit
 
         # parametric equation
         # find other two axises in the disc plane
@@ -362,16 +409,6 @@ def curve(t):
         self.roots_legendre = scipy.special.roots_legendre(n)
         self.n = n
 
-    def __repr__(self):
-        return "{name}(normal={normal}, center={center}, \
-radius={radius}, current={current})".format(
-            name=self.__class__.__name__,
-            normal=self.normal,
-            center=self.center,
-            radius=self.radius,
-            current=self.current
-        )
-
     def magnetic_field(self, p) -> u.T:
         r"""
         Calculate magnetic field generated by this wire at position `p`

