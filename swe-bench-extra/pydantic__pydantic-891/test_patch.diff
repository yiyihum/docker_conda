diff --git a/tests/test_settings.py b/tests/test_settings.py
--- a/tests/test_settings.py
+++ b/tests/test_settings.py
@@ -1,5 +1,5 @@
 import os
-from typing import List, Set
+from typing import Dict, List, Set
 
 import pytest
 
@@ -48,6 +48,32 @@ class Config:
     assert s.apple == 'has_prefix'
 
 
+def test_nested_env_with_basemodel(env):
+    class TopValue(BaseModel):
+        apple: str
+        banana: str
+
+    class Settings(BaseSettings):
+        top: TopValue
+
+    with pytest.raises(ValidationError):
+        Settings()
+    env.set('top', '{"banana": "secret_value"}')
+    s = Settings(top={'apple': 'value'})
+    assert s.top == {'apple': 'value', 'banana': 'secret_value'}
+
+
+def test_nested_env_with_dict(env):
+    class Settings(BaseSettings):
+        top: Dict[str, str]
+
+    with pytest.raises(ValidationError):
+        Settings()
+    env.set('top', '{"banana": "secret_value"}')
+    s = Settings(top={'apple': 'value'})
+    assert s.top == {'apple': 'value', 'banana': 'secret_value'}
+
+
 class DateModel(BaseModel):
     pips: bool = False
 
diff --git a/tests/test_utils.py b/tests/test_utils.py
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -8,7 +8,7 @@
 from pydantic import BaseModel
 from pydantic.color import Color
 from pydantic.typing import display_as_type, is_new_type, new_type_supertype
-from pydantic.utils import ValueItems, import_string, lenient_issubclass, truncate
+from pydantic.utils import ValueItems, deep_update, import_string, lenient_issubclass, truncate
 
 try:
     import devtools
@@ -222,3 +222,43 @@ class Model(BaseModel):
         '    ],\n'
         ')'
     )
+
+
+@pytest.mark.parametrize(
+    'mapping, updating_mapping, expected_mapping, msg',
+    [
+        (
+            {'key': {'inner_key': 0}},
+            {'other_key': 1},
+            {'key': {'inner_key': 0}, 'other_key': 1},
+            'extra keys are inserted',
+        ),
+        (
+            {'key': {'inner_key': 0}, 'other_key': 1},
+            {'key': [1, 2, 3]},
+            {'key': [1, 2, 3], 'other_key': 1},
+            'values that can not be merged are updated',
+        ),
+        (
+            {'key': {'inner_key': 0}},
+            {'key': {'other_key': 1}},
+            {'key': {'inner_key': 0, 'other_key': 1}},
+            'values that have corresponding keys are merged',
+        ),
+        (
+            {'key': {'inner_key': {'deep_key': 0}}},
+            {'key': {'inner_key': {'other_deep_key': 1}}},
+            {'key': {'inner_key': {'deep_key': 0, 'other_deep_key': 1}}},
+            'deeply nested values that have corresponding keys are merged',
+        ),
+    ],
+)
+def test_deep_update(mapping, updating_mapping, expected_mapping, msg):
+    assert deep_update(mapping, updating_mapping) == expected_mapping, msg
+
+
+def test_deep_update_is_not_mutating():
+    mapping = {'key': {'inner_key': {'deep_key': 1}}}
+    updated_mapping = deep_update(mapping, {'key': {'inner_key': {'other_deep_key': 1}}})
+    assert updated_mapping == {'key': {'inner_key': {'deep_key': 1, 'other_deep_key': 1}}}
+    assert mapping == {'key': {'inner_key': {'deep_key': 1}}}
