diff --git a/pydantic/env_settings.py b/pydantic/env_settings.py
--- a/pydantic/env_settings.py
+++ b/pydantic/env_settings.py
@@ -5,6 +5,7 @@
 from .fields import ModelField
 from .main import BaseModel, Extra
 from .typing import display_as_type
+from .utils import deep_update
 
 
 class SettingsError(ValueError):
@@ -24,7 +25,7 @@ def __init__(__pydantic_self__, **values: Any) -> None:
         super().__init__(**__pydantic_self__._build_values(values))
 
     def _build_values(self, init_kwargs: Dict[str, Any]) -> Dict[str, Any]:
-        return {**self._build_environ(), **init_kwargs}
+        return deep_update(self._build_environ(), init_kwargs)
 
     def _build_environ(self) -> Dict[str, Optional[str]]:
         """
diff --git a/pydantic/utils.py b/pydantic/utils.py
--- a/pydantic/utils.py
+++ b/pydantic/utils.py
@@ -5,6 +5,7 @@
     TYPE_CHECKING,
     Any,
     Callable,
+    Dict,
     Generator,
     Iterator,
     List,
@@ -12,6 +13,7 @@
     Set,
     Tuple,
     Type,
+    TypeVar,
     Union,
     no_type_check,
 )
@@ -23,11 +25,12 @@
 except ImportError:
     Literal = None  # type: ignore
 
-
 if TYPE_CHECKING:
     from .main import BaseModel  # noqa: F401
     from .typing import SetIntStr, DictIntStrAny, IntStr, ReprArgs  # noqa: F401
 
+KeyType = TypeVar('KeyType')
+
 
 def import_string(dotted_path: str) -> Any:
     """
@@ -98,6 +101,16 @@ def in_ipython() -> bool:
         return True
 
 
+def deep_update(mapping: Dict[KeyType, Any], updating_mapping: Dict[KeyType, Any]) -> Dict[KeyType, Any]:
+    updated_mapping = mapping.copy()
+    for k, v in updating_mapping.items():
+        if k in mapping and isinstance(mapping[k], dict) and isinstance(v, dict):
+            updated_mapping[k] = deep_update(mapping[k], v)
+        else:
+            updated_mapping[k] = v
+    return updated_mapping
+
+
 def almost_equal_floats(value_1: float, value_2: float, *, delta: float = 1e-8) -> bool:
     """
     Return True if two floats are almost equal
