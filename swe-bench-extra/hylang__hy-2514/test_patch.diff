diff --git a/tests/compilers/test_ast.py b/tests/compilers/test_ast.py
index 27cf3505..001c2e55 100644
--- a/tests/compilers/test_ast.py
+++ b/tests/compilers/test_ast.py
@@ -449,6 +449,15 @@ def test_literal_newlines():
     assert s("#[[\rhello\rworld]]") == "hello\nworld"
 
 
+def test_linear_boolop():
+   """Operations like `(and 1 2 3)` should use only one `BoolOp`,
+   instead of an equivalent nested sequence of `BoolOp`s."""
+   for op in ("and", "or"):
+       node = can_compile(f'({op} 1 2.0 True "hi" 5)').body[0].value
+       assert len(node.values) == 5
+       assert all(isinstance(v, ast.Constant) for v in node.values)
+
+
 def test_compile_error():
     """Ensure we get compile error in tricky cases"""
     with pytest.raises(HyLanguageError) as excinfo:
diff --git a/tests/compilers/test_compiler.py b/tests/compilers/test_compiler.py
index 64fd2a01..4269fe0d 100644
--- a/tests/compilers/test_compiler.py
+++ b/tests/compilers/test_compiler.py
@@ -3,6 +3,8 @@ import types
 
 from hy import compiler
 from hy.models import Expression, Integer, List, Symbol
+from hy.reader import read_many
+from hy.compiler import hy_compile
 
 
 def make_expression(*args):
@@ -14,6 +16,10 @@ def make_expression(*args):
     return h.replace(h)
 
 
+def hy2py(s):
+    return ast.unparse(hy_compile(read_many(s), "test", import_stdlib=False))
+
+
 def test_compiler_bare_names():
     """
     Check that the compiler doesn't drop bare names from code branches
@@ -58,3 +64,15 @@ def test_compiler_yield_return():
     assert isinstance(body[0].value, ast.Yield)
     assert isinstance(body[1], ast.Return)
     assert isinstance(body[1].value, ast.BinOp)
+
+
+# https://github.com/hylang/hy/issues/854
+def test_compact_logic():
+    """
+    Check that we don't generate multiple unnecessary if-statements
+    when compiling the short-circuiting operators.
+    """
+    py = hy2py("(and 1 2 3 (do (setv x 4) x) 5 6)")
+    assert py.count("if") == 1
+    py = hy2py("(or 1 2 3 (do (setv x 4) x) 5 6 (do (setv y 7)))")
+    assert py.count("if") == 2
