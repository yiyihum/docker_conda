diff --git a/datalad/interface/tests/test_results.py b/datalad/interface/tests/test_results.py
new file mode 100644
index 000000000..d573f34e0
--- /dev/null
+++ b/datalad/interface/tests/test_results.py
@@ -0,0 +1,46 @@
+# emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-
+# ex: set sts=4 ts=4 sw=4 noet:
+# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
+#
+#   See COPYING file distributed along with the datalad package for the
+#   copyright and license terms.
+#
+# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
+"""Result utility tests
+
+"""
+
+from datalad.interface.results import (
+    annexjson2result,
+)
+from datalad.distribution.dataset import Dataset
+
+from datalad.tests.utils import (
+    eq_,
+    with_tempfile,
+)
+
+
+@ with_tempfile
+def test_annexjson2result(dspath):
+    # no explicit success means 'error'
+    eq_(annexjson2result(dict(), None),
+        dict(status='error'))
+    # unrecognized -> error
+    eq_(annexjson2result(dict(success='random'), None),
+        dict(status='error'))
+    # success is possible ;-)
+    eq_(annexjson2result(dict(success=True), None),
+        dict(status='ok'))
+
+    # path handling
+    # needs a dataset
+    ds = Dataset(dspath)
+    eq_(annexjson2result(dict(file='file1'), ds),
+        dict(status='error',
+             path=str(ds.pathobj / 'file1')))
+    # on all platforms, paths are reported in platform conventions
+    # although git-annex reports in posix
+    eq_(annexjson2result(dict(file='dir1/file1'), ds),
+        dict(status='error',
+             path=str(ds.pathobj / 'dir1' / 'file1')))
diff --git a/datalad/interface/tests/test_shell_completion.py b/datalad/interface/tests/test_shell_completion.py
new file mode 100644
index 000000000..4ece7833c
--- /dev/null
+++ b/datalad/interface/tests/test_shell_completion.py
@@ -0,0 +1,45 @@
+# emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-
+# ex: set sts=4 ts=4 sw=4 noet:
+# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
+#
+#   See COPYING file distributed along with the datalad package for the
+#   copyright and license terms.
+#
+# ## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
+"""test command datalad shell_completion
+
+"""
+
+__docformat__ = 'restructuredtext'
+
+# Not really worth to be there but it is ATM, so let's use that
+from datalad.api import (
+    shell_completion
+)
+from datalad.cmd import WitlessRunner
+from datalad.tests.utils import (
+    assert_cwd_unchanged,
+    eq_,
+    skip_if_on_windows,
+    swallow_outputs,
+)
+
+
+@assert_cwd_unchanged
+def test_shell_completion_python():
+    # largely a smoke test for our print("hello world")
+    with swallow_outputs() as cmo:
+        res = shell_completion()
+        out = cmo.out.rstrip()
+    # we get it printed and returned for double-pleasure
+    eq_(out, res[0]['content'].rstrip())
+
+
+@skip_if_on_windows  # TODO: make it more specific since might work if bash is available
+def test_shell_completion_source():
+    # just smoke test that produced shell script sources nicely without error
+    WitlessRunner().run(['bash', '-c', 'source <(datalad shell-completion)'])
+    # ideally we should feed that shell with TAB to see the result of completion but
+    # yoh sees no easy way ATM, and googled up
+    # https://stackoverflow.com/questions/9137245/unit-test-for-bash-completion-script
+    # requires too much enthusiasm toward this goal.
\ No newline at end of file
diff --git a/datalad/plugin/tests/test_plugins.py b/datalad/plugin/tests/test_plugins.py
index 6a042b089..11f33fe6c 100644
--- a/datalad/plugin/tests/test_plugins.py
+++ b/datalad/plugin/tests/test_plugins.py
@@ -191,13 +191,30 @@ def test_no_annex(path):
     # add inannex pre configuration
     ds.save(opj('code', 'inannex'))
     no_annex(pattern=['code/**', 'README'], dataset=ds.path)
+
+    inannex = (ds.pathobj / 'code' / 'inannex')
+    # Ensure that notinannex's mtime is as recent or newer than .git/index's so
+    # that, on an adjusted branch, the clean filter runs on the next save. This
+    # avoids a racy failure of the managed-branch assert_repo_status check
+    # below.
+    inannex.touch()
+
     # add inannex and README post configuration
     ds.save([opj('code', 'notinannex'), 'README'])
-    assert_repo_status(ds.path)
-    # one is annex'ed, the other is not, despite no change in add call
-    # importantly, also .gitattribute is not annexed
-    eq_([opj('code', 'inannex')],
-        [str(Path(p)) for p in ds.repo.get_annexed_files()])
+
+    if ds.repo.is_managed_branch():
+        # For unlocked files, if .gitattributes is configured so that a file
+        # should go to git, an annexed file will switch to be tracked by git
+        # the next time the clean filter runs on it.
+        #
+        # https://git-annex.branchable.com/forum/one-off_unlocked_annex_files_that_go_against_large/
+        assert_repo_status(ds.path, modified=[inannex])
+    else:
+        assert_repo_status(ds.path)
+        # one is annex'ed, the other is not, despite no change in add call
+        # importantly, also .gitattribute is not annexed
+        eq_([opj('code', 'inannex')],
+            [str(Path(p)) for p in ds.repo.get_annexed_files()])
 
 
 _ds_template = {
