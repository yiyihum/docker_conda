diff --git a/test/api/test_annotations.py b/test/api/test_annotations.py
index 3299748..3f278f7 100644
--- a/test/api/test_annotations.py
+++ b/test/api/test_annotations.py
@@ -99,29 +99,29 @@ class AnnotationsTestCase(unittest.TestCase):
     @requests_mock.Mocker()
     def test_delete_annotations_by_id_could_not_find(self, m):
         m.delete("http://localhost/api/annotations/None", json={"message": "Could not find annotation to update"},status_code=500)
-        response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
-        self.assertRaises(GrafanaServerError)
+        with self.assertRaises(GrafanaServerError):
+            response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
 
     @requests_mock.Mocker()
     def test_delete_annotations_by_id_forbidden(self, m):
         m.delete("http://localhost/api/annotations/None", json={"message": "Forbidden"},
                  status_code=403)
-        response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
-        self.assertRaises(GrafanaClientError)
+        with self.assertRaises(GrafanaClientError):
+            response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
 
     @requests_mock.Mocker()
     def test_delete_annotations_by_id_unauthorized(self, m):
         m.delete("http://localhost/api/annotations/None", json={"message": "Unauthorized"},
                      status_code=401)
-        response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
-        self.assertRaises(GrafanaUnauthorizedError)
+        with self.assertRaises(GrafanaUnauthorizedError):
+            response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
 
     @requests_mock.Mocker()
     def test_delete_annotations_by_id_bad_input(self, m):
         m.delete("http://localhost/api/annotations/None", json={"message": "Bad Input"},
                  status_code=400)
-        response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
-        self.assertRaises(GrafanaBadInputError)
+        with self.assertRaises(GrafanaBadInputError):
+            response = self.cli.annotations.delete_annotations_by_id(annotations_id=None)
 
 
     @requests_mock.Mocker()
diff --git a/test/api/test_folder.py b/test/api/test_folder.py
index 66b5f44..319eeaa 100644
--- a/test/api/test_folder.py
+++ b/test/api/test_folder.py
@@ -92,8 +92,8 @@ class FolderTestCase(unittest.TestCase):
                 "message": "Folder title cannot be empty"
             }, status_code=400
         )
-        folder = self.cli.folder.create_folder(title="Departmenet ABC")
-        self.assertRaises(GrafanaBadInputError)
+        with self.assertRaises(GrafanaBadInputError):
+            folder = self.cli.folder.create_folder(title="Departmenet ABC")
 
     @requests_mock.Mocker()
     def test_update_folder(self, m):
diff --git a/test/api/test_search.py b/test/api/test_search.py
index 134696b..cffa33c 100644
--- a/test/api/test_search.py
+++ b/test/api/test_search.py
@@ -46,5 +46,5 @@ class AnnotationsTestCase(unittest.TestCase):
             }, status_code=400
         )
 
-        result = self.cli.search.search_dashboards()
-        self.assertRaises(GrafanaBadInputError)
+        with self.assertRaises(GrafanaBadInputError):
+            result = self.cli.search.search_dashboards()
