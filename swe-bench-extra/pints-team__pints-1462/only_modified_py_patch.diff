diff --git a/pints/_optimisers/__init__.py b/pints/_optimisers/__init__.py
index 2c99a600..7d93b029 100644
--- a/pints/_optimisers/__init__.py
+++ b/pints/_optimisers/__init__.py
@@ -455,6 +455,9 @@ class OptimisationController(object):
         self._unchanged_threshold = 1          # smallest significant f change
         self.set_max_unchanged_iterations()
 
+        # Maximum evaluations
+        self._max_evaluations = None
+
         # Threshold value
         self._threshold = None
 
@@ -470,6 +473,13 @@ class OptimisationController(object):
         """
         return self._evaluations
 
+    def max_evaluations(self):
+        """
+        Returns the maximum number of evaluations if this stopping criteria is
+        set, or ``None`` if it is not. See :meth:`set_max_evaluations`.
+        """
+        return self._max_evaluations
+
     def f_guessed_tracking(self):
         """
         Returns ``True`` if the controller is set to track the optimiser
@@ -539,6 +549,7 @@ class OptimisationController(object):
         has_stopping_criterion = False
         has_stopping_criterion |= (self._max_iterations is not None)
         has_stopping_criterion |= (self._unchanged_max_iterations is not None)
+        has_stopping_criterion |= (self._max_evaluations is not None)
         has_stopping_criterion |= (self._threshold is not None)
         if not has_stopping_criterion:
             raise ValueError('At least one stopping criterion must be set.')
@@ -617,7 +628,8 @@ class OptimisationController(object):
 
             # Add fields to log
             max_iter_guess = max(self._max_iterations or 0, 10000)
-            max_eval_guess = max_iter_guess * pop_size
+            max_eval_guess = max(
+                self._max_evaluations or 0, max_iter_guess * pop_size)
             logger.add_counter('Iter.', max_value=max_iter_guess)
             logger.add_counter('Eval.', max_value=max_eval_guess)
             logger.add_float('Best')
@@ -691,6 +703,14 @@ class OptimisationController(object):
                     halt_message = ('No significant change for ' +
                                     str(unchanged_iterations) + ' iterations.')
 
+                # Maximum number of evaluations
+                if (self._max_evaluations is not None and
+                        evaluations >= self._max_evaluations):
+                    running = False
+                    halt_message = (
+                        'Maximum number of evaluations ('
+                        + str(self._max_evaluations) + ') reached.')
+
                 # Threshold value
                 halt = (self._threshold is not None
                         and f_new < self._threshold)
@@ -827,6 +847,21 @@ class OptimisationController(object):
         """
         self._log_to_screen = True if enabled else False
 
+    def set_max_evaluations(self, evaluations=None):
+        """
+        Adds a stopping criterion, allowing the routine to halt after the
+        given number of ``evaluations``.
+
+        This criterion is disabled by default. To enable, pass in any positive
+        integer. To disable again, use ``set_max_evaluations(None)``.
+        """
+        if evaluations is not None:
+            evaluations = int(evaluations)
+            if evaluations < 0:
+                raise ValueError(
+                    'Maximum number of evaluations cannot be negative.')
+        self._max_evaluations = evaluations
+
     def set_max_iterations(self, iterations=10000):
         """
         Adds a stopping criterion, allowing the routine to halt after the

