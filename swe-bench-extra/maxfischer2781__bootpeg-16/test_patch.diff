diff --git a/tests/test_boot.py b/tests/test_boot.py
index b1cd914..50d7c04 100644
--- a/tests/test_boot.py
+++ b/tests/test_boot.py
@@ -5,24 +5,22 @@ from bootpeg.pika import boot
 
 def test_bootstrap():
     boot_peg = boot.boot_path.read_text()
-    parser = boot.parser
+    parser = boot.min_parser
     # ensure each parser handles itself
     for _ in range(2):
         parser = boot.boot(parser, boot_peg)
 
 
 def test_escalate():
-    boot_peg = boot.boot_path.read_text()
     full_peg = boot.full_path.read_text()
-    parser = boot.boot(boot.parser, boot_peg)
+    parser = boot.bootpeg()
     for _ in range(2):
         parser = boot.boot(parser, full_peg)
 
 
 def test_features():
-    boot_peg = boot.boot_path.read_text()
     full_peg = boot.full_path.read_text()
-    parser = boot.boot(boot.boot(boot.parser, boot_peg), full_peg)
+    parser = boot.boot(boot.bootpeg(), full_peg)
     opt_repeat = boot.boot(parser, 'rule:\n    | [ " "+ ]\n')
     non_repeat = boot.boot(parser, 'rule:\n    | " "*\n')
     assert opt_repeat.clauses == non_repeat.clauses
diff --git a/tests/test_grammars/__init__.py b/tests/test_grammars/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/test_grammars/test_bpeg.py b/tests/test_grammars/test_bpeg.py
new file mode 100644
index 0000000..953f3b5
--- /dev/null
+++ b/tests/test_grammars/test_bpeg.py
@@ -0,0 +1,41 @@
+import pytest
+
+from bootpeg.grammars import bpeg
+from bootpeg.pika.front import (
+    Rule,
+    Literal,
+    Nothing,
+    Anything,
+    Sequence,
+    Choice,
+    Repeat,
+    Not,
+    Range,
+    Delimited,
+)
+
+
+clauses = [
+    Nothing(),
+    Anything(1),
+    *(Literal(literal) for literal in ("A", "x", "ÃŸ", " ")),
+    Sequence(Literal("A"), Literal("B"), Literal("A")),
+    Sequence(Literal(" "), Literal(" ")),
+    Choice(Literal("a"), Literal("b"), Nothing()),
+    Repeat(Literal("x")),
+    Repeat(Sequence(Literal("x"), Literal("y"), Literal("z"))),
+    Not(Literal("a")),
+    Range("a", "b"),
+    Delimited(Literal("'"), Literal("'")),
+]
+
+
+@pytest.mark.parametrize("clause", clauses)
+def test_roundtrip(clause):
+    clause = clause
+    literal = bpeg.unparse(clause)
+    assert literal
+    parsed_rule: Rule = bpeg.parse(f"parse_test:\n    | {literal}\n").clauses[
+        "parse_test"
+    ]
+    assert parsed_rule.sub_clauses[0] == clause
