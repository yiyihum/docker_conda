diff --git a/bootpeg/grammars/__init__.py b/bootpeg/grammars/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/bootpeg/pika/act.py b/bootpeg/pika/act.py
index 7f8aafd..54c94c8 100644
--- a/bootpeg/pika/act.py
+++ b/bootpeg/pika/act.py
@@ -1,7 +1,7 @@
 """
 Pika bottom-up Peg parser extension to transform parsed source
 """
-from typing import TypeVar, Any, Dict, Tuple
+from typing import TypeVar, Any, Dict, Tuple, Mapping
 import re
 
 from .peg import Clause, D, Match, MemoTable, MemoKey, Literal, nested_str, Reference
@@ -201,13 +201,13 @@ class TransformFailure(Exception):
         self.exc = exc
 
 
-def transform(head: Match, memo: MemoTable, namespace: Dict[str, Any]):
+def transform(head: Match, memo: MemoTable, namespace: Mapping[str, Any]):
     return postorder_transform(head, memo.source, namespace)
 
 
 # TODO: Use trampoline/coroutines for infinite depth
 def postorder_transform(
-    match: Match, source: D, namespace: Dict[str, Any]
+    match: Match, source: D, namespace: Mapping[str, Any]
 ) -> Tuple[Any, Dict[str, Any]]:
     matches, captures = (), {}
     for sub_match in match.sub_matches:
diff --git a/bootpeg/pika/boot.py b/bootpeg/pika/boot.py
index c06827d..ddc9521 100644
--- a/bootpeg/pika/boot.py
+++ b/bootpeg/pika/boot.py
@@ -1,3 +1,5 @@
+from typing import Optional
+
 import string
 import time
 import pathlib
@@ -129,7 +131,8 @@ namespace = {
 
 end_line = Reference("end_line")  # Literal("\n")
 
-parser = Parser(
+#: Minimal parser required to bootstrap the actual parser
+min_parser = Parser(
     "top",
     literal=Rule(
         Choice(
@@ -292,8 +295,8 @@ parser = Parser(
         Action(".*"),
     ),
 )
-boot_path = pathlib.Path(__file__).parent / "boot.peg"
-full_path = pathlib.Path(__file__).parent.parent / "peg.peg"
+boot_path = pathlib.Path(__file__).parent / "boot.bpeg"
+full_path = pathlib.Path(__file__).parent.parent / "grammars" / "bpeg.bpeg"
 
 
 def boot(base_parser: Parser, source: str) -> Parser:
@@ -306,7 +309,20 @@ def boot(base_parser: Parser, source: str) -> Parser:
     )
 
 
+_parser_cache: Optional[Parser] = None
+
+
+def bootpeg() -> Parser:
+    """Provide the basic bootpeg Pika parser"""
+    global _parser_cache
+    if _parser_cache is None:
+        with open(boot_path) as boot_peg_stream:
+            _parser_cache = boot(min_parser, boot_peg_stream.read())
+    return _parser_cache
+
+
 if __name__ == "__main__":
+    parser = bootpeg()
     for iteration in range(2):
         with open(boot_path) as boot_peg:
             print("Generation:", iteration)
@@ -318,7 +334,7 @@ if __name__ == "__main__":
     for iteration in range(2, 4):
         with open(full_path) as base_peg:
             print("Generation:", iteration)
-            display(parser)
+            display(min_parser)
             parser = range_parse(
                 base_peg.read(),
                 parser,
diff --git a/bootpeg/pika/front.py b/bootpeg/pika/front.py
index aac0c50..f81cb3d 100644
--- a/bootpeg/pika/front.py
+++ b/bootpeg/pika/front.py
@@ -19,6 +19,7 @@ from .peg import (
     D,
 )
 from .act import Debug, Capture, Rule, transform, Action, Discard
+from ..utility import cache_hash
 
 __all__ = [
     # peg
@@ -42,6 +43,7 @@ __all__ = [
     "chain",
     "either",
     "Range",
+    "Delimited",
 ]
 
 
@@ -76,7 +78,7 @@ class Range(Terminal[D]):
     maybe_zero = False
 
     def __init__(self, first: D, last: D):
-        assert len(first) == len(last) > 0
+        assert len(first) == len(last) > 0, "Range bounds must be of same length"
         self.first = first
         self.last = last
         self._length = len(first)
@@ -109,7 +111,7 @@ class Delimited(Clause[D]):
     A pair of clauses with arbitrary intermediate filler
     """
 
-    __slots__ = ("sub_clauses",)
+    __slots__ = ("sub_clauses", "_hash")
 
     @property
     def maybe_zero(self):
@@ -118,6 +120,7 @@ class Delimited(Clause[D]):
 
     def __init__(self, start: Clause[D], stop: Clause[D]):
         self.sub_clauses = start, stop
+        self._hash = None
 
     @property
     def triggers(self) -> "Tuple[Clause[D]]":
@@ -135,6 +138,13 @@ class Delimited(Clause[D]):
                 return Match(offset + tail.length, (head, tail), at, self)
         return None
 
+    def __eq__(self, other):
+        return isinstance(other, Delimited) and self.sub_clauses == other.sub_clauses
+
+    @cache_hash
+    def __hash__(self):
+        return hash(self.sub_clauses)
+
     def __repr__(self):
         start, stop = self.sub_clauses
         return f"{self.__class__.__name__}(start={start!r}, stop={stop!r})"

