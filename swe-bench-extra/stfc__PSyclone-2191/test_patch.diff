diff --git a/src/psyclone/tests/domain/lfric/algorithm/lfric_alg_test.py b/src/psyclone/tests/domain/lfric/algorithm/lfric_alg_test.py
index 8aa1aa826..dbc5f56cf 100644
--- a/src/psyclone/tests/domain/lfric/algorithm/lfric_alg_test.py
+++ b/src/psyclone/tests/domain/lfric/algorithm/lfric_alg_test.py
@@ -126,6 +126,9 @@ def test_create_function_spaces_no_spaces(lfric_alg, prog):
     ''' Check that a Routine is populated as expected, even when there
     are no actual function spaces. '''
     lfric_alg._create_function_spaces(prog, [])
+    fe_config_mod = prog.symbol_table.lookup("finite_element_config_mod")
+    element_order = prog.symbol_table.lookup("element_order")
+    assert element_order.interface.container_symbol == fe_config_mod
     assert prog.symbol_table.lookup("element_order")
     assert isinstance(prog.symbol_table.lookup("fs_continuity_mod"),
                       ContainerSymbol)
@@ -144,6 +147,9 @@ def test_create_function_spaces(lfric_alg, prog, fortran_writer):
     ''' Check that a Routine is populated correctly when valid function-space
     names are supplied. '''
     lfric_alg._create_function_spaces(prog, ["w3", "w1"])
+    fe_config_mod = prog.symbol_table.lookup("finite_element_config_mod")
+    element_order = prog.symbol_table.lookup("element_order")
+    assert element_order.interface.container_symbol == fe_config_mod
     fs_mod_sym = prog.symbol_table.lookup("fs_continuity_mod")
     gen = fortran_writer(prog)
     for space in ["w1", "w3"]:
diff --git a/src/psyclone/tests/psyad/domain/lfric/test_lfric_adjoint_harness.py b/src/psyclone/tests/psyad/domain/lfric/test_lfric_adjoint_harness.py
index d9ec943d9..4bcc6c86f 100644
--- a/src/psyclone/tests/psyad/domain/lfric/test_lfric_adjoint_harness.py
+++ b/src/psyclone/tests/psyad/domain/lfric/test_lfric_adjoint_harness.py
@@ -356,10 +356,11 @@ def test_init_scalar_value(monkeypatch):
     # property of the datatype.
     sym4 = DataSymbol("my_var", LFRicTypes("LFRicRealScalarDataType")())
 
-    class broken_type:
+    class BrokenType:
+        '''Utility class to provide an unsupported type.'''
         def __init__(self):
             self.name = "wrong"
-    monkeypatch.setattr(sym4.datatype, "intrinsic", broken_type())
+    monkeypatch.setattr(sym4.datatype, "intrinsic", BrokenType())
     with pytest.raises(InternalError) as err:
         _init_scalar_value(sym4, routine, {})
     assert ("scalars of REAL, INTEGER or BOOLEAN type are supported but got "
@@ -495,6 +496,7 @@ def test_generate_lfric_adjoint_harness(fortran_reader, fortran_writer):
     tl_psyir = fortran_reader.psyir_from_source(TL_CODE)
     psyir = generate_lfric_adjoint_harness(tl_psyir)
     gen = fortran_writer(psyir).lower()
+    assert "use finite_element_config_mod, only : element_order" in gen
     assert "module adjoint_test_mod" in gen
     assert "subroutine adjoint_test(mesh, chi, panel_id)" in gen
     # We should have a field, a copy of that field and an inner-product value
