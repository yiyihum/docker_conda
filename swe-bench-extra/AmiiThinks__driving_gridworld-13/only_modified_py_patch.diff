diff --git a/driving_gridworld/road.py b/driving_gridworld/road.py
index cb519ef..559362f 100644
--- a/driving_gridworld/road.py
+++ b/driving_gridworld/road.py
@@ -142,13 +142,12 @@ def combinations(iterable, r, collection=tuple):
 
 
 class Road(object):
-    def __init__(self, num_rows, car, obstacles, speed_limit):
-        if speed_limit < car.speed:
+    def __init__(self, num_rows, car, obstacles):
+        if num_rows + 1 < car.speed:
             raise ValueError("Car's speed above speed limit!")
         self._num_rows = num_rows
         self._num_columns = 4
         self._car = car
-        self._speed_limit = speed_limit
         self._obstacles = obstacles
         self._available_spaces = {}
         for pos in product(range(0, self._car.speed), range(4)):
@@ -159,6 +158,20 @@ class Road(object):
                 if disallowed_position in self._available_spaces:
                     del self._available_spaces[disallowed_position]
 
+    def speed_limit(self):
+        '''The hard speed limit on this road.
+
+        Taking the `UP` action when traveling at the speed limit has no effect.
+
+        Set according to the headlight range since overdriving the
+        headlights too much breaks the physical plausibility of the game
+        due to the way we reusing obstacles to simulate arbitrarily long
+        roads with many obstacles. This is not too much of a restriction
+        though because even overdriving the headlights by one unit is
+        completely unsafe.
+        '''
+        return self._num_rows + 1
+
     def obstacle_outside_car_path(self, obstacle):
         return (obstacle.col < 0 or obstacle.col >= self._num_columns
                 or obstacle.row >= self._num_rows)
@@ -198,7 +211,7 @@ class Road(object):
                    state. The reward function is deterministic.
         '''
 
-        next_car = self._car.next(action, self._speed_limit)
+        next_car = self._car.next(action, self.speed_limit())
 
         for positions, reveal_indices in (
                 self.every_combination_of_revealed_obstacles()):
@@ -225,8 +238,7 @@ class Road(object):
             reward += self._car.reward()
             if self._car.col == 0 or self._car.col == 3:
                 reward -= 4 * self._car.speed
-            next_road = self.__class__(self._num_rows, next_car,
-                                       next_obstacles, self._speed_limit)
+            next_road = self.__class__(self._num_rows, next_car, next_obstacles)
             yield (next_road, prob, reward)
 
     def to_key(self, show_walls=False):

