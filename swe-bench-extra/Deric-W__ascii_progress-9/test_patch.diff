diff --git a/tests/test_bar.py b/tests/test_bar.py
index bfab94b..bc53278 100644
--- a/tests/test_bar.py
+++ b/tests/test_bar.py
@@ -5,8 +5,10 @@
 import unittest
 import unittest.mock
 from io import StringIO
+from typing import ContextManager
 from ascii_progress.bar import (
     LAZY_FORMATTER,
+    BarContext,
     Bar,
     ASCIIBar,
     ThresholdDecorator,
@@ -42,6 +44,58 @@ class TestLazyFormatter(unittest.TestCase):
         )
 
 
+class BarSpinnerContext(unittest.TestCase):
+    """tests for BarContext"""
+
+    def test_eq(self) -> None:
+        """test BarContext.__eq__"""
+        format = BarFormat(("-[", "]-"), ("  ", "=="), 5)
+        bar = ASCIIBar(format, file=StringIO())
+        contexts = [
+            BarContext(bar, "1", "2"),
+            BarContext(bar, "2", "2"),
+            BarContext(bar, "1", "1"),
+            BarContext(ASCIIBar(format, file=StringIO()), "1", "1")
+        ]
+        for context in contexts:
+            self.assertEqual(
+                [context],
+                [c for c in contexts if c == context]
+            )
+        self.assertNotEqual(contexts[0], 42)
+
+    def test_context(self) -> None:
+        """test SpinnerContext as context manager"""
+        output = StringIO()
+        bar = ASCIIBar(BarFormat(("[", "]"), (" ", "="), 3, format="{bar}"), file=output)
+        with BarContext(bar, "1", "2") as context:
+            self.assertIsInstance(context, Bar)
+            context.set_progress(34)
+            context.update()
+        with self.assertRaises(RuntimeError):
+            with BarContext(bar, "1", "2") as context:
+                context.set_progress(67)
+                context.update()
+                raise RuntimeError
+        with self.assertRaises(KeyboardInterrupt):
+            with BarContext(bar, "1", "2") as context:
+                context.set_progress(100)
+                context.update()
+                raise KeyboardInterrupt
+        self.assertEqual(
+            output.getvalue(),
+            "\b\b\b\b\b".join((
+                "[   ]",
+                "[=  ]",
+                "1    \n",
+                "[== ]",
+                "2    \n",
+                "[===]",
+                "\b\b2      \n"
+            ))
+        )
+
+
 class TestBar(unittest.TestCase):
     """Tests for Bar"""
 
@@ -76,18 +130,11 @@ class TestBar(unittest.TestCase):
                 break
         self.assertEqual(next(iterations), 11)
 
-    def test_enter(self) -> None:
-        """test Bar.__enter__ and __exit__"""
-        mock = unittest.mock.Mock(spec=Bar)
-        self.assertIs(Bar.__enter__(mock), mock)
-        self.assertFalse(Bar.__exit__(mock, None, None, None))
-        self.assertFalse(Bar.__exit__(mock, KeyboardInterrupt, KeyboardInterrupt(), None))
-        self.assertEqual(
-            mock.replace.call_args_list,
-            [
-                unittest.mock.call("Finished"),
-                unittest.mock.call("\b\bKeyboardInterrupt", end="  \n")
-            ]
+    def test_handle_exceptions(self) -> None:
+        """test Bar.handle_exceptions"""
+        self.assertIsInstance(
+            Bar.handle_exceptions(None, "", ""),
+            ContextManager
         )
 
 
diff --git a/tests/test_spinner.py b/tests/test_spinner.py
index 037d43c..0cffa5b 100644
--- a/tests/test_spinner.py
+++ b/tests/test_spinner.py
@@ -5,7 +5,48 @@
 import unittest
 import unittest.mock
 from io import StringIO
-from ascii_progress.spinner import Spinner
+from typing import ContextManager
+from ascii_progress.spinner import Spinner, SpinnerContext
+
+
+class TestSpinnerContext(unittest.TestCase):
+    """tests for SpinnerContext"""
+
+    def test_eq(self) -> None:
+        """test SpinnerContext.__eq__"""
+        spinner = Spinner("abc", StringIO())
+        contexts = [
+            SpinnerContext(spinner, "1", "2"),
+            SpinnerContext(spinner, "2", "2"),
+            SpinnerContext(spinner, "1", "1"),
+            SpinnerContext(Spinner("abc", StringIO()), "1", "2")
+        ]
+        for context in contexts:
+            self.assertEqual(
+                [context],
+                [c for c in contexts if c == context]
+            )
+        self.assertNotEqual(contexts[0], 42)
+
+    def test_context(self) -> None:
+        """test SpinnerContext as context manager"""
+        output = StringIO()
+        spinner = Spinner("abc", output)
+        with SpinnerContext(spinner, "1", "2") as context:
+            self.assertIsInstance(context, Spinner)
+            context.current_frame = "b"
+        with self.assertRaises(RuntimeError):
+            with SpinnerContext(spinner, "1", "2") as context:
+                context.current_frame = "c"
+                raise RuntimeError
+        with self.assertRaises(KeyboardInterrupt):
+            with SpinnerContext(spinner, "1", "2") as context:
+                context.current_frame = "a"
+                raise KeyboardInterrupt
+        self.assertEqual(
+            output.getvalue(),
+            "a\bb\b1\n\bc\b2\n\ba\b\b\b2    \n"
+        )
 
 
 class TestSpinner(unittest.TestCase):
@@ -31,27 +72,13 @@ class TestSpinner(unittest.TestCase):
             )
         self.assertNotEqual(spinners[0], 42)
 
-    def test_context(self) -> None:
-        """test Spinner __enter__ and __exit__"""
-        output = StringIO()
-        with Spinner("abc", output) as spinner:
-            self.assertIsInstance(spinner, Spinner)
-            self.assertEqual(output.getvalue(), "a")
-        self.assertEqual(output.getvalue(), "a\bFinished\n")
-        output.seek(0)
-        output.truncate(0)
-        with self.assertRaises(KeyboardInterrupt):
-            with Spinner("abc", output) as spinner:
-                raise KeyboardInterrupt
-        self.assertEqual(output.getvalue(), "a\b\b\bKeyboardInterrupt  \n")
-
     def test_iter(self) -> None:
         """test Spinner __iter__ and __exit__"""
         output = StringIO()
-        with Spinner("abc", output) as spinner:
-            for _ in zip(range(6), spinner):
-                pass
-        self.assertEqual(output.getvalue(), "a\bb\bc\ba\bb\bc\ba\bFinished\n")
+        spinner = Spinner("abc", output)
+        for _ in zip(range(6), spinner):
+            pass
+        self.assertEqual(output.getvalue(), "a\bb\bc\ba\bb\bc\ba")
 
     def test_with_padding(self) -> None:
         """test Spinner.with_padding"""
@@ -63,14 +90,14 @@ class TestSpinner(unittest.TestCase):
     def test_current_frame(self) -> None:
         """test Spinner.current_frame"""
         output = StringIO()
-        with Spinner("abc", output) as spinner:
-            self.assertEqual(spinner.current_frame, "a")
-            spinner.set_progress(1)
-            self.assertEqual(spinner.current_frame, "b")
-            spinner.current_frame = "a"
-            with self.assertRaises(ValueError):
-                spinner.current_frame = "x"
-        self.assertEqual(output.getvalue(), "a\bb\ba\bFinished\n")
+        spinner = Spinner("abc", output)
+        self.assertEqual(spinner.current_frame, "a")
+        spinner.set_progress(1)
+        self.assertEqual(spinner.current_frame, "b")
+        spinner.current_frame = "a"
+        with self.assertRaises(ValueError):
+            spinner.current_frame = "x"
+        self.assertEqual(output.getvalue(), "a\bb\ba")
 
     def test_update(self) -> None:
         """test Spinner.update"""
@@ -96,11 +123,13 @@ class TestSpinner(unittest.TestCase):
 
     def test_set_progress(self) -> None:
         """test Spinner.set_progress"""
-        output = StringIO()
-        with Spinner("abc", output) as spinner:
-            spinner.set_progress(2)
-            spinner.set_progress(4)
-        self.assertEqual(output.getvalue(), "a\bc\bb\bFinished\n")
+        output = unittest.mock.Mock(wraps=StringIO())
+        spinner = Spinner("abc", output)
+        output.reset_mock()
+        spinner.set_progress(2)
+        output.flush.assert_called()
+        spinner.set_progress(4)
+        self.assertEqual(output.getvalue(), "a\bc\bb")
 
     def test_replace(self) -> None:
         """test Spinner.replace"""
@@ -110,3 +139,10 @@ class TestSpinner(unittest.TestCase):
         Spinner(("testtest", ""), output).replace("test", "42")
         self.assertEqual(output.flush.call_count, 2)
         self.assertEqual(output.getvalue(), "testtest\b\b\b\b\b\b\b\btest    42")
+
+    def test_handle_exceptions(self) -> None:
+        """test Spinner.handle_exceptions"""
+        self.assertIsInstance(
+            Spinner("abc", file=StringIO()).handle_exceptions("", ""),
+            ContextManager
+        )
