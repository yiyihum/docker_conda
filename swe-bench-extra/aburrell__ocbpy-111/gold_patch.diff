diff --git a/Changelog.rst b/Changelog.rst
index 72966f5..30b8cf1 100644
--- a/Changelog.rst
+++ b/Changelog.rst
@@ -21,6 +21,7 @@ Summary of all changes made since the first stable release
 * ENH: Added function to select data along a satellite track
 * ENH: Changed attributes in VectorData into properties to ensure expected
        behaviour if altering the class data after initialisation
+* ENH: Added IMAGE SI12, SI13, and WIC DMSP corrections to `harmonic`
 * MAINT: Removed support for Python 2.7, 3.5, and 3.6; added support for 3.10
 * MAINT: Improved PEP8 compliance
 * MAINT: Updated pysat routines to v3.0.0 standards
diff --git a/docs/citing.rst b/docs/citing.rst
index 9a60f6a..f0da9fd 100644
--- a/docs/citing.rst
+++ b/docs/citing.rst
@@ -42,8 +42,8 @@ which may also be cited if a description of the package is desired.
 IMAGE FUV Boundaries
 --------------------
 
-Please cite both the papers discussing both the instrument and the boundary
-retrieval method.
+Please cite both the papers discussing the instrument and the appropriate
+boundary retrieval method.
 
 * **SI12/SI13**: Mende, S., et al. Space Science Reviews (2000) 91: 287-318.
   http://doi.org/10.1023/A:1005292301251.
@@ -53,6 +53,8 @@ retrieval method.
   high‐latitude ionospheric climatologies and empirical models,
   J. Geophys. Res. Space Physics, 122, 932–947,
   http://doi.org/10.1002/2016JA023235.
+* **OCB**: Chisham, G. et al. (2022) Ionospheric Boundaries Derived from Auroral
+  Images. In Prep.
 * **OCB**: Chisham, G. (2017) Auroral Boundary Derived from IMAGE Satellite
   Mission Data (May 2000 - Oct 2002), Version 1.1, Polar Data Centre, Natural
   Environment Research Council, UK.
diff --git a/docs/ocb_datasets.rst b/docs/ocb_datasets.rst
index 56fdffb..08138a2 100644
--- a/docs/ocb_datasets.rst
+++ b/docs/ocb_datasets.rst
@@ -19,16 +19,24 @@ provided in the :py:mod:`ocbpy.boundaries.files` sub-module.
 IMAGE
 -----
 
-Data from three auroral instruments provide northern hemisphere OCB and EAB
-locations for 3 May 2000 02:41:43 UT - 31 Oct 2002 20:05:16, though not all of
-the times included in these files contain high-quality estimations of the
-boundary locations. Recommended selection criteria are included as defaults in
-the :py:class:`~ocbpy.OCBoundary` class. There are also boundary
-files that combine the information from all instruments to obtain the OCB and
-EAB. You can read more about the OCB determination, EAB determination, this
-selection criteria, and the three auroral instruments (IMAGE Wideband Imaging
-Camera (WIC) and FUV Spectrographic Imagers SI12 and SI13) in the articles
-listed in :ref:`cite-image`.
+Data from three auroral instruments provide northern hemisphere poleward auroral
+boundary (PAB) and EAB locations for 3 May 2000 02:41:43 UT - 31 Oct 2002
+20:05:16, though not all of the times included in these files contain
+high-quality estimations of the boundary locations. Recommended selection
+criteria are included as defaults in the :py:class:`~ocbpy.OCBoundary` class.
+There are also boundary files that combine the information from all instruments
+to obtain the OCB and EAB. These combined files are the default boundaries for
+the IMAGE time period.  You can read more about the OCB determination, EAB
+determination, this selection criteria, and the three auroral instruments
+(IMAGE Wideband Imaging Camera (WIC) and FUV Spectrographic Imagers SI12 and
+SI13) in the articles listed in :ref:`cite-image`.
+
+The most recent corrects for each instrument that add the DMSP particle
+precipitation corrections to the PAB and EAB locations are included in
+:py:mod:`ocbpy.ocb_correction`.  These corrections should be applied to the
+data used to obtain the circle fits included in the instrument files, not the
+circle fits themselves. These data sets may be obtained from the British
+Antarctic Survey.
 
 
 .. _bound-data-ampere:
diff --git a/ocbpy/boundaries/README.md b/ocbpy/boundaries/README.md
index ad99f4b..9d42e78 100644
--- a/ocbpy/boundaries/README.md
+++ b/ocbpy/boundaries/README.md
@@ -1,8 +1,8 @@
 This directory contains files with Open Closed field line Boundaries obtained
 from different instruments
 
-IMAGE (si12/si13/wic) File Format
----------------------------------
+IMAGE (image/si12/si13/wic) File Format
+---------------------------------------
 YR, SOY, NB, PHICENT, RCENT, R, A, R_ERR, R_MERIT
  
 YR      : Year
@@ -20,7 +20,9 @@ R_MERIT : Radial distance from the most typical pole location in degrees
 There are certain ranges for NB, RCENT, and R that you shouldn’t use that can
 be found (and explained) in Chisham (2017), doi:10.1002/2016JA023235.  These
 ranges are the defaults in OCBoundary.get_next_good_ocb_ind.  When using these
-boundaries, remember to cite Chisham (2017).
+boundaries, remember to cite Chisham (2017). From ocbpy version 0.3.0 onward,
+the SI12, SI13, and WIC files contain uncorrected auroral boundary fits, while
+the IMAGE file contains DMSP corrected average boundaries for the OCB and EAB.
 
 AMPERE (amp) File Format
 ------------------------
diff --git a/ocbpy/ocb_correction.py b/ocbpy/ocb_correction.py
index ba7cf8a..b73a0e6 100644
--- a/ocbpy/ocb_correction.py
+++ b/ocbpy/ocb_correction.py
@@ -9,6 +9,8 @@ References
 ----------
 .. [4] Burrell, A. G. et al.: AMPERE Polar Cap Boundaries, Ann. Geophys., 38,
    481-490, doi:10.5194/angeo-38-481-2020, 2020.
+.. [6] Chisham, G. et al.: Ionospheric Boundaries Derived from Auroral Images,
+    in prep, 2022.
 
 """
 
@@ -18,7 +20,7 @@ from ocbpy.ocb_time import hr2rad
 
 
 def circular(mlt, r_add=0.0):
-    """Return a circular boundary correction
+    """Return a circular boundary correction.
 
     Parameters
     ----------
@@ -42,7 +44,7 @@ def circular(mlt, r_add=0.0):
 
 
 def elliptical(mlt, instrument='ampere', method='median'):
-    """Return the results of an elliptical correction to the data boundary [4]_
+    """Return the results of an elliptical correction to the data boundary.
 
     Parameters
     ----------
@@ -59,6 +61,10 @@ def elliptical(mlt, instrument='ampere', method='median'):
     r_corr : float or array-like
         Radius correction in degrees at this MLT
 
+    References
+    ----------
+    Prefered AMPERE boundary correction validated in [4]_.
+
     """
 
     if instrument.lower() != 'ampere':
@@ -81,7 +87,7 @@ def elliptical(mlt, instrument='ampere', method='median'):
 
 
 def harmonic(mlt, instrument='ampere', method='median'):
-    """Return the results of a harmonic fit correction to the data boundary [4]_
+    """Return the results of a harmonic fit correction to the data boundary.
 
     Parameters
     ----------
@@ -91,38 +97,67 @@ def harmonic(mlt, instrument='ampere', method='median'):
         Data set's instrument name (default='ampere')
     method : str
         Method used to determine coefficients; accepts 'median' or
-        'gaussian' (default='median')
+        'gaussian' when `instrument` is 'ampere'.  Otherwise, accepts 'eab' or
+        'ocb'. (default='median')
 
     Returns
     -------
     r_corr : float or array-like
         Radius correction in degrees at this MLT
 
+    References
+    ----------
+    AMPERE boundaries obtained from [4]_. IMAGE boundaries obtained from [6]_.
+
     """
-    if instrument.lower() != 'ampere':
+    # Define the harmonic coefficients for each instrument and method/location
+    coeff = {'ampere': {'median': [3.31000535, -0.5452934, -1.24389141,
+                                   2.42619653, -0.66677988, -1.03467488,
+                                   -0.30763009, 0.52426756, 0.04359299,
+                                   0.60201848, 0.50618522, 1.04360529,
+                                   0.25186405],
+                        'gaussian': [3.80100827, 0.98555723, -3.43760943,
+                                     1.85084271, -0.36730751, -0.81975654,
+                                     -1.02823832, 1.30637288, -0.53599218,
+                                     0.40380183, -1.22462708, -1.2733629,
+                                     -0.62743381]},
+             'si12': {'ocb': [0.0405, -1.5078, 1.0, 0.5095, 1.0, 0.9371, 1.0,
+                              0.0708, 1.0, 0.0, 1.0, 0.0, 1.0],
+                      'eab': [-0.1447, -1.9779, 1.0, 2.6799, 1.0, 0.5778, 1.0,
+                              -1.2297, 1.0, 0.0, 1.0, 0.0, 1.0]},
+             'si13': {'ocb': [0.5797, -0.6837, 1.0, -0.5020, 1.0, 0.2971, 1.0,
+                              -0.4173, 1.0, 0.0, 1.0, 0.0, 1.0],
+                      'eab': [0.2500, -2.9931, 1.0, 0.8818, 1.0, 0.8511, 1.0,
+                              -0.6300, 1.0, 0.0, 1.0, 0.0, 1.0]},
+             'wic': {'ocb': [1.0298, -1.1249, 1.0, -0.7380, 1.0, 0.1838, 1.0,
+                             -0.6171, 1.0, 0.0, 1.0, 0.0, 1.0],
+                     'eab': [-0.4935, -2.1186, 1.0, 0.3188, 1.0, 0.5749, 1.0,
+                             -0.3118, 1.0, 0.0, 1.0, 0.0, 1.0]}}
+
+    # Check the inputs
+    inst = instrument.lower()
+    if inst not in coeff.keys():
         raise ValueError("no harmonic correction for {:}".format(instrument))
 
     method = method.lower()
-    coeff = {'median': [3.31000535, -0.5452934, -1.24389141, 2.42619653,
-                        -0.66677988, -1.03467488, -0.30763009, 0.52426756,
-                        0.04359299, 0.60201848, 0.50618522, 1.04360529,
-                        0.25186405],
-             'gaussian': [3.80100827, 0.98555723, -3.43760943, 1.85084271,
-                          -0.36730751, -0.81975654, -1.02823832, 1.30637288,
-                          -0.53599218, 0.40380183, -1.22462708, -1.2733629,
-                          -0.62743381]}
-
-    if method not in coeff.keys():
-        raise ValueError("unknown coefficient computation method")
+    if method not in coeff[inst].keys():
+        raise ValueError("".join(["unknown coefficient computation method, ",
+                                  "expects one of: {:}".format(
+                                      coeff[inst].keys())]))
 
+    # Calculate the offset
     rad_mlt = hr2rad(mlt)
-    r_corr = coeff[method][0] \
-        + coeff[method][1] * np.cos(rad_mlt + coeff[method][2]) \
-        + coeff[method][3] * np.sin(rad_mlt + coeff[method][4]) \
-        + coeff[method][5] * np.cos(2.0 * (rad_mlt + coeff[method][6])) \
-        + coeff[method][7] * np.sin(2.0 * (rad_mlt + coeff[method][8])) \
-        + coeff[method][9] * np.cos(3.0 * (rad_mlt + coeff[method][10])) \
-        + coeff[method][11] * np.sin(3.0 * (rad_mlt + coeff[method][12]))
+    r_corr = coeff[inst][method][0] \
+        + coeff[inst][method][1] * np.cos(rad_mlt + coeff[inst][method][2]) \
+        + coeff[inst][method][3] * np.sin(rad_mlt + coeff[inst][method][4]) \
+        + coeff[inst][method][5] * np.cos(2.0 * (
+            rad_mlt + coeff[inst][method][6])) \
+        + coeff[inst][method][7] * np.sin(2.0 * (
+            rad_mlt + coeff[inst][method][8])) \
+        + coeff[inst][method][9] * np.cos(3.0 * (
+            rad_mlt + coeff[inst][method][10])) \
+        + coeff[inst][method][11] * np.sin(3.0 * (
+            rad_mlt + coeff[inst][method][12]))
 
     # Because this is a poleward shift, return the negative of the correction
     return -r_corr
