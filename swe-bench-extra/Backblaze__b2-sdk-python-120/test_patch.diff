diff --git a/test/v0/test_exception.py b/test/v0/test_exception.py
index 5bcb7fca..a90e5329 100644
--- a/test/v0/test_exception.py
+++ b/test/v0/test_exception.py
@@ -50,7 +50,7 @@ class TestExceptions(TestBase):
         try:
             raise BadUploadUrl('foo')
         except BadUploadUrl as e:
-            assert e.should_retry_http()
+            assert not e.should_retry_http()
             assert e.should_retry_upload()
             assert str(e) == 'Bad upload url: foo', str(e)
 
diff --git a/test/v1/test_bucket.py b/test/v1/test_bucket.py
index 0dcccab7..8f71157a 100644
--- a/test/v1/test_bucket.py
+++ b/test/v1/test_bucket.py
@@ -21,6 +21,7 @@ from .test_base import TestBase
 from .deps_exception import (
     AlreadyFailed,
     B2Error,
+    B2RequestTimeoutDuringUpload,
     InvalidAuthToken,
     InvalidMetadataDirective,
     InvalidRange,
@@ -303,6 +304,81 @@ class TestLs(TestCaseWithBucket):
         self.assertBucketContents(expected, '', show_versions=True)
 
 
+class TestListVersions(TestCaseWithBucket):
+    def test_single_version(self):
+        data = six.b('hello world')
+        a_id = self.bucket.upload_bytes(data, 'a').id_
+        b_id = self.bucket.upload_bytes(data, 'b').id_
+        c_id = self.bucket.upload_bytes(data, 'c').id_
+
+        expected = [(a_id, 'a', 11, 'upload')]
+        actual = [
+            (info.id_, info.file_name, info.size, info.action)
+            for info in self.bucket.list_file_versions('a')
+        ]
+        self.assertEqual(expected, actual)
+
+        expected = [(b_id, 'b', 11, 'upload')]
+        actual = [
+            (info.id_, info.file_name, info.size, info.action)
+            for info in self.bucket.list_file_versions('b')
+        ]
+        self.assertEqual(expected, actual)
+
+        expected = [(c_id, 'c', 11, 'upload')]
+        actual = [
+            (info.id_, info.file_name, info.size, info.action)
+            for info in self.bucket.list_file_versions('c')
+        ]
+        self.assertEqual(expected, actual)
+
+    def test_multiple_version(self):
+        a_id1 = self.bucket.upload_bytes(six.b('first version'), 'a').id_
+        a_id2 = self.bucket.upload_bytes(six.b('second version'), 'a').id_
+        a_id3 = self.bucket.upload_bytes(six.b('last version'), 'a').id_
+
+        expected = [
+            (a_id3, 'a', 12, 'upload'), (a_id2, 'a', 14, 'upload'), (a_id1, 'a', 13, 'upload')
+        ]
+        actual = [
+            (info.id_, info.file_name, info.size, info.action)
+            for info in self.bucket.list_file_versions('a')
+        ]
+        self.assertEqual(expected, actual)
+
+    def test_ignores_subdirectory(self):
+        data = six.b('hello world')
+        file_id = self.bucket.upload_bytes(data, 'a/b').id_
+        self.bucket.upload_bytes(data, 'a/b/c')
+
+        expected = [(file_id, 'a/b', 11, 'upload')]
+        actual = [
+            (info.id_, info.file_name, info.size, info.action)
+            for info in self.bucket.list_file_versions('a/b')
+        ]
+        self.assertEqual(expected, actual)
+
+    def test_all_versions_in_response(self):
+        data = six.b('hello world')
+        file_id = self.bucket.upload_bytes(data, 'a/b').id_
+        self.bucket.upload_bytes(data, 'a/b/c')
+
+        expected = [(file_id, 'a/b', 11, 'upload')]
+        actual = [
+            (info.id_, info.file_name, info.size, info.action)
+            for info in self.bucket.list_file_versions('a/b', fetch_count=1)
+        ]
+        self.assertEqual(expected, actual)
+
+    def test_bad_fetch_count(self):
+        try:
+            # Convert to a list to cause the generator to execute.
+            list(self.bucket.list_file_versions('a', fetch_count=0))
+            self.fail('should have raised ValueError')
+        except ValueError as e:
+            self.assertEqual('unsupported fetch_count value', str(e))
+
+
 class TestCopyFile(TestCaseWithBucket):
     def test_copy_without_optional_params(self):
         file_id = self._make_file()
@@ -452,6 +528,11 @@ class TestUpload(TestCaseWithBucket):
         data = six.b('hello world')
         self.bucket.upload_bytes(data, 'file1')
 
+    def test_upload_timeout(self):
+        self.simulator.set_upload_errors([B2RequestTimeoutDuringUpload()])
+        data = six.b('hello world')
+        self.bucket.upload_bytes(data, 'file1')
+
     def test_upload_file_one_fatal_error(self):
         self.simulator.set_upload_errors([CanRetry(False)])
         data = six.b('hello world')
@@ -553,6 +634,18 @@ class TestUpload(TestCaseWithBucket):
         self._check_file_contents('file1', data)
         self.assertEqual("600: 200 400 600 closed", progress_listener.get_history())
 
+    def test_upload_large_file_with_restricted_api_key(self):
+        self.simulator.key_id_to_key[self.account_id].name_prefix_or_none = 'path/to'
+        part_size = self.simulator.MIN_PART_SIZE
+        data = self._make_data(part_size * 3)
+        progress_listener = StubProgressListener()
+        file_info = self.bucket.upload_bytes(
+            data, 'path/to/file1', progress_listener=progress_listener
+        )
+        self.assertEqual(len(data), file_info.size)
+        self._check_file_contents('path/to/file1', data)
+        self.assertEqual("600: 200 400 600 closed", progress_listener.get_history())
+
     def _start_large_file(self, file_name, file_info=None):
         if file_info is None:
             file_info = {}
diff --git a/test/v1/test_exception.py b/test/v1/test_exception.py
index a49969d8..2440a39f 100644
--- a/test/v1/test_exception.py
+++ b/test/v1/test_exception.py
@@ -50,7 +50,7 @@ class TestExceptions(TestBase):
         try:
             raise BadUploadUrl('foo')
         except BadUploadUrl as e:
-            assert e.should_retry_http()
+            assert not e.should_retry_http()
             assert e.should_retry_upload()
             assert str(e) == 'Bad upload url: foo', str(e)
 
