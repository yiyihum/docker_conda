diff --git a/docs/examples/ex19.py b/docs/examples/ex19.py
index 1440373c..1777fd74 100644
--- a/docs/examples/ex19.py
+++ b/docs/examples/ex19.py
@@ -63,33 +63,21 @@ M = asm(mass, basis)
 dt = .01
 print('dt =', dt)
 theta = 0.5                     # Crankâ€“Nicolson
-A = M + theta * L * dt
-B = M - (1 - theta) * L * dt
+L0, M0 = penalize(L, M, D=basis.find_dofs())
+A = M0 + theta * L0 * dt
+B = M0 - (1 - theta) * L0 * dt
 
-boundary = basis.find_dofs()
-interior = basis.complement_dofs(boundary)
-
-# transpose as splu prefers CSC
-backsolve = splu(condense(A, D=boundary, expand=False).T).solve
+backsolve = splu(A.T).solve  # .T as splu prefers CSC
 
 u_init = (np.cos(np.pi * mesh.p[0, :] / 2 / halfwidth[0])
           * np.cos(np.pi * mesh.p[1, :] / 2 / halfwidth[1]))
 
 
-def step(t: float,
-         u: np.ndarray) -> Tuple[float, np.ndarray]:
-    u_new = np.zeros_like(u)              # zero Dirichlet conditions
-    _, b1 = condense(csr_matrix(A.shape),  # ignore condensed matrix
-                     B @ u, u_new, D=boundary, expand=False)
-    u_new[interior] = backsolve(b1)
-    return t + dt, u_new
-
-
 def evolve(t: float,
            u: np.ndarray) -> Iterator[Tuple[float, np.ndarray]]:
 
     while np.linalg.norm(u, np.inf) > 2**-3:
-        t, u = step(t, u)
+        t, u = t + dt, backsolve(B @ u)
         yield t, u
 
 
diff --git a/skfem/__init__.py b/skfem/__init__.py
index 60af8049..5cad2124 100644
--- a/skfem/__init__.py
+++ b/skfem/__init__.py
@@ -20,6 +20,7 @@ __all__ = all_mesh + all_assembly + all_element + [  # noqa
     'build_pc_diag',
     'condense',
     'enforce',
+    'penalize',
     'project',
     'projection',
     'solve',
diff --git a/skfem/utils.py b/skfem/utils.py
index e31e68af..8c5343a1 100644
--- a/skfem/utils.py
+++ b/skfem/utils.py
@@ -288,8 +288,9 @@ def enforce(A: spmatrix,
 
     .. note::
 
-        The original system is both modified (for performance) and returned
-        (for compatibility with :func:`skfem.utils.solve`).
+        The original system is both returned
+        (for compatibility with :func:`skfem.utils.solve`) and optionally (if
+        `overwrite`) modified (for performance).
 
     Parameters
     ----------
@@ -348,6 +349,65 @@ def enforce(A: spmatrix,
     return Aout
 
 
+def penalize(A: spmatrix,
+             b: Optional[Union[ndarray, spmatrix]] = None,
+             x: Optional[ndarray] = None,
+             I: Optional[DofsCollection] = None,
+             D: Optional[DofsCollection] = None,
+             epsilon: Optional[float] = None,
+             overwrite: bool = False) -> LinearSystem:
+    r"""Penalize degrees-of-freedom of a linear system.
+
+    Parameters
+    ----------
+    A
+        The system matrix
+    b
+        Optionally, the right hand side vector.
+    x
+        The values of the penalized degrees-of-freedom. If not given, assumed
+        to be zero.
+    I
+        Specify either this or ``D``: The set of degree-of-freedom indices to
+        solve for.
+    D
+        Specify either this or ``I``: The set of degree-of-freedom indices to
+        enforce (rows/diagonal set to zero/one).
+    epsilon
+        Very small value, the reciprocal of which penalizes deviations from
+        the Dirichlet condition
+    overwrite
+        Optionally, the original system is both modified (for performance) and
+        returned (for compatibility with :func:`skfem.utils.solve`).  By
+        default, ``False``.
+
+    Returns
+    -------
+    LinearSystem
+        A linear system with the penalized diagonal and RHS entries set to
+        very large values, 1/epsilon and x/epsilon, respectively.
+
+    """
+    b, x, I, D = _init_bc(A, b, x, I, D)
+
+    Aout = A if overwrite else A.copy()
+
+    d = Aout.diagonal()
+    if epsilon is None:
+        epsilon = 1e-10 / np.linalg.norm(d[D], np.inf)
+    d[D] = 1/epsilon
+    Aout.setdiag(d)
+
+    if b is None:
+        return Aout
+
+    bout = b if overwrite else b.copy()
+    # Nothing needs doing for mass matrix, but RHS vector needs penalty factor
+    if not isinstance(b, spmatrix):
+        bout[D] = x[D] / epsilon
+    return Aout, bout
+
+
 def condense(A: spmatrix,
              b: Optional[Union[ndarray, spmatrix]] = None,
              x: Optional[ndarray] = None,

