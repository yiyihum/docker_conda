diff --git a/IPython/core/interactiveshell.py b/IPython/core/interactiveshell.py
index 3dfaecb84..2eea7dc56 100644
--- a/IPython/core/interactiveshell.py
+++ b/IPython/core/interactiveshell.py
@@ -112,6 +112,8 @@ def sphinxify_docstring(docstring):
 except ImportError:
     sphinxify = None
 
+if sys.version_info[:2] < (3, 11):
+    from exceptiongroup import BaseExceptionGroup
 
 class ProvisionalWarning(DeprecationWarning):
     """
@@ -2095,25 +2097,38 @@ def showtraceback(self, exc_tuple=None, filename=None, tb_offset=None,
                     stb.extend(self.InteractiveTB.get_exception_only(etype,
                                                                      value))
                 else:
-                    try:
-                        # Exception classes can customise their traceback - we
-                        # use this in IPython.parallel for exceptions occurring
-                        # in the engines. This should return a list of strings.
-                        if hasattr(value, "_render_traceback_"):
-                            stb = value._render_traceback_()
-                        else:
-                            stb = self.InteractiveTB.structured_traceback(
-                                etype, value, tb, tb_offset=tb_offset
-                            )
 
-                    except Exception:
-                        print(
-                            "Unexpected exception formatting exception. Falling back to standard exception"
-                        )
+                    def contains_exceptiongroup(val):
+                        if val is None:
+                            return False
+                        return isinstance(
+                            val, BaseExceptionGroup
+                        ) or contains_exceptiongroup(val.__context__)
+
+                    if contains_exceptiongroup(value):
+                        # fall back to native exception formatting until ultratb
+                        # supports exception groups
                         traceback.print_exc()
-                        return None
+                    else:
+                        try:
+                            # Exception classes can customise their traceback - we
+                            # use this in IPython.parallel for exceptions occurring
+                            # in the engines. This should return a list of strings.
+                            if hasattr(value, "_render_traceback_"):
+                                stb = value._render_traceback_()
+                            else:
+                                stb = self.InteractiveTB.structured_traceback(
+                                    etype, value, tb, tb_offset=tb_offset
+                                )
+
+                        except Exception:
+                            print(
+                                "Unexpected exception formatting exception. Falling back to standard exception"
+                            )
+                            traceback.print_exc()
+                            return None
 
-                    self._showtraceback(etype, value, stb)
+                        self._showtraceback(etype, value, stb)
                     if self.call_pdb:
                         # drop into debugger
                         self.debugger(force=True)
diff --git a/docs/environment.yml b/docs/environment.yml
index 9fe7d4a9c..efc7e578d 100644
--- a/docs/environment.yml
+++ b/docs/environment.yml
@@ -8,6 +8,7 @@ dependencies:
   - sphinx>=4.2
   - sphinx_rtd_theme
   - numpy
+  - exceptiongroup
   - testpath
   - matplotlib
   - pip
diff --git a/docs/source/whatsnew/pr/native_fallback_exceptiongroup.rst b/docs/source/whatsnew/pr/native_fallback_exceptiongroup.rst
new file mode 100644
index 000000000..fd6abff37
--- /dev/null
+++ b/docs/source/whatsnew/pr/native_fallback_exceptiongroup.rst
@@ -0,0 +1,3 @@
+Native fallback for displaying ExceptionGroup
+---------------------------------------------
+ExceptionGroups are now displayed with `traceback.print_exc`, as a temporary fix until UltraTB properly supports displaying child exceptions.
diff --git a/setup.cfg b/setup.cfg
index 6df41c5b6..0ec359aad 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -33,6 +33,7 @@ install_requires =
     backcall
     colorama; sys_platform == "win32"
     decorator
+    exceptiongroup; python_version<'3.11'
     jedi>=0.16
     matplotlib-inline
     pexpect>4.3; sys_platform != "win32"
@@ -56,6 +57,7 @@ doc =
     stack_data
     pytest<7
     typing_extensions
+    exceptiongroup
     %(test)s
 kernel =
     ipykernel
