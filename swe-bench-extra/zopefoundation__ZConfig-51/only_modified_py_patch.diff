diff --git a/ZConfig/components/logger/handlers.py b/ZConfig/components/logger/handlers.py
index 4b9c2e8..f436749 100644
--- a/ZConfig/components/logger/handlers.py
+++ b/ZConfig/components/logger/handlers.py
@@ -110,13 +110,22 @@ class FileHandlerFactory(HandlerFactory):
         old_files = self.section.old_files
         when = self.section.when
         interval = self.section.interval
-        if path == "STDERR":
+        encoding = self.section.encoding
+        delay = self.section.delay
+
+        def check_std_stream():
             if max_bytes or old_files:
-                raise ValueError("cannot rotate STDERR")
+                raise ValueError("cannot rotate " + path)
+            if delay:
+                raise ValueError("cannot delay opening " + path)
+            if encoding:
+                raise ValueError("cannot specify encoding for " + path)
+
+        if path == "STDERR":
+            check_std_stream()
             handler = loghandler.StreamHandler(sys.stderr)
         elif path == "STDOUT":
-            if max_bytes or old_files:
-                raise ValueError("cannot rotate STDOUT")
+            check_std_stream()
             handler = loghandler.StreamHandler(sys.stdout)
         elif when or max_bytes or old_files or interval:
             if not old_files:
@@ -128,15 +137,17 @@ class FileHandlerFactory(HandlerFactory):
                     interval = 1
                 handler = loghandler.TimedRotatingFileHandler(
                     path, when=when, interval=interval,
-                    backupCount=old_files)
+                    backupCount=old_files, encoding=encoding, delay=delay)
             elif max_bytes:
                 handler = loghandler.RotatingFileHandler(
-                    path, maxBytes=max_bytes, backupCount=old_files)
+                    path, maxBytes=max_bytes, backupCount=old_files,
+                    encoding=encoding, delay=delay)
             else:
                 raise ValueError(
                     "max-bytes or when must be set for log rotation")
         else:
-            handler = loghandler.FileHandler(path)
+            handler = loghandler.FileHandler(
+                path, encoding=encoding, delay=delay)
         return handler
 
 
diff --git a/ZConfig/components/logger/loghandler.py b/ZConfig/components/logger/loghandler.py
index 2652b28..ddd042b 100644
--- a/ZConfig/components/logger/loghandler.py
+++ b/ZConfig/components/logger/loghandler.py
@@ -61,29 +61,26 @@ def _remove_from_reopenable(wr):
         pass
 
 
-class FileHandler(logging.StreamHandler):
+class FileHandler(logging.FileHandler):
     """File handler which supports reopening of logs.
 
     Re-opening should be used instead of the 'rollover' feature of
     the FileHandler from the standard library's logging package.
     """
 
-    def __init__(self, filename, mode="a"):
-        filename = os.path.abspath(filename)
-        logging.StreamHandler.__init__(self, open(filename, mode))
-        self.baseFilename = filename
-        self.mode = mode
+    def __init__(self, filename, mode="a", encoding=None, delay=False):
+        logging.FileHandler.__init__(self, filename,
+                                     mode=mode, encoding=encoding, delay=delay)
         self._wr = weakref.ref(self, _remove_from_reopenable)
         _reopenable_handlers.append(self._wr)
 
     def close(self):
-        self.stream.close()
         # This can raise a KeyError if the handler has already been
         # removed, but a later error can be raised if
         # StreamHandler.close() isn't called.  This seems the best
         # compromise.  :-(
         try:
-            logging.StreamHandler.close(self)
+            logging.FileHandler.close(self)
         except KeyError:  # pragma: no cover
             pass
         _remove_from_reopenable(self._wr)
@@ -91,8 +88,12 @@ class FileHandler(logging.StreamHandler):
     def reopen(self):
         self.acquire()
         try:
-            self.stream.close()
-            self.stream = open(self.baseFilename, self.mode)
+            if self.stream is not None:
+                self.stream.close()
+                if self.delay:
+                    self.stream = None
+                else:
+                    self.stream = self._open()
         finally:
             self.release()
 
@@ -113,7 +114,10 @@ class Win32FileHandler(FileHandler):
         except OSError:
             pass
 
-        self.stream = open(self.baseFilename, self.mode)
+        if self.delay:
+            self.stream = None
+        else:
+            self.stream = self._open()
 
 
 if os.name == "nt":
@@ -152,15 +156,9 @@ class TimedRotatingFileHandler(logging.handlers.TimedRotatingFileHandler):
         self.doRollover()
 
 
-class NullHandler(logging.Handler):
+class NullHandler(logging.NullHandler):
     """Handler that does nothing."""
 
-    def emit(self, record):
-        pass
-
-    def handle(self, record):
-        pass
-
 
 class StartupHandler(logging.handlers.BufferingHandler):
     """Handler which stores messages in a buffer until later.
diff --git a/ZConfig/info.py b/ZConfig/info.py
index 525d12b..33f8dfb 100644
--- a/ZConfig/info.py
+++ b/ZConfig/info.py
@@ -35,7 +35,7 @@ class UnboundedThing(object):
     def __eq__(self, other):
         return isinstance(other, self.__class__)
 
-    def __repr__(self):  # pragma: no cover
+    def __repr__(self):
         return "<Unbounded>"
 
 
diff --git a/setup.py b/setup.py
index a837214..35d87ca 100644
--- a/setup.py
+++ b/setup.py
@@ -18,7 +18,7 @@ tests_require = [
 
 options = dict(
     name="ZConfig",
-    version='3.3.1.dev0',
+    version='3.4.0.dev0',
     author="Fred L. Drake, Jr.",
     author_email="fred@fdrake.net",
     maintainer="Zope Foundation and Contributors",
