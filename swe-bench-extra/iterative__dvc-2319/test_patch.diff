diff --git a/tests/func/test_metrics.py b/tests/func/test_metrics.py
--- a/tests/func/test_metrics.py
+++ b/tests/func/test_metrics.py
@@ -7,7 +7,7 @@
 
 from dvc.repo import Repo as DvcRepo
 from dvc.main import main
-from dvc.exceptions import DvcException, BadMetricError, NoMetricsError
+from dvc.exceptions import DvcException, NoMetricsError
 from dvc.repo.metrics.show import NO_METRICS_FILE_AT_REFERENCE_WARNING
 from dvc.stage import Stage
 from dvc.utils import relpath
@@ -85,14 +85,14 @@ def setUp(self):
 
 class TestMetrics(TestMetricsBase):
     def test_show(self):
-        ret = self.dvc.metrics.show("metric", all_branches=True)
+        ret = self.dvc.metrics.show(["metric"], all_branches=True)
         self.assertEqual(len(ret), 3)
         self.assertEqual(ret["foo"]["metric"], "foo")
         self.assertEqual(ret["bar"]["metric"], "bar")
         self.assertEqual(ret["baz"]["metric"], "baz")
 
         ret = self.dvc.metrics.show(
-            "metric_json", typ="json", xpath="branch", all_branches=True
+            ["metric_json"], typ="json", xpath="branch", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         self.assertSequenceEqual(ret["foo"]["metric_json"], ["foo"])
@@ -100,7 +100,7 @@ def test_show(self):
         self.assertSequenceEqual(ret["baz"]["metric_json"], ["baz"])
 
         ret = self.dvc.metrics.show(
-            "metric_tsv", typ="tsv", xpath="0,0", all_branches=True
+            ["metric_tsv"], typ="tsv", xpath="0,0", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         self.assertSequenceEqual(ret["foo"]["metric_tsv"], ["foo"])
@@ -108,7 +108,7 @@ def test_show(self):
         self.assertSequenceEqual(ret["baz"]["metric_tsv"], ["baz"])
 
         ret = self.dvc.metrics.show(
-            "metric_htsv", typ="htsv", xpath="0,branch", all_branches=True
+            ["metric_htsv"], typ="htsv", xpath="0,branch", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         self.assertSequenceEqual(ret["foo"]["metric_htsv"], ["foo"])
@@ -116,7 +116,7 @@ def test_show(self):
         self.assertSequenceEqual(ret["baz"]["metric_htsv"], ["baz"])
 
         ret = self.dvc.metrics.show(
-            "metric_csv", typ="csv", xpath="0,0", all_branches=True
+            ["metric_csv"], typ="csv", xpath="0,0", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         self.assertSequenceEqual(ret["foo"]["metric_csv"], ["foo"])
@@ -124,7 +124,7 @@ def test_show(self):
         self.assertSequenceEqual(ret["baz"]["metric_csv"], ["baz"])
 
         ret = self.dvc.metrics.show(
-            "metric_hcsv", typ="hcsv", xpath="0,branch", all_branches=True
+            ["metric_hcsv"], typ="hcsv", xpath="0,branch", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         self.assertSequenceEqual(ret["foo"]["metric_hcsv"], ["foo"])
@@ -132,7 +132,7 @@ def test_show(self):
         self.assertSequenceEqual(ret["baz"]["metric_hcsv"], ["baz"])
 
         ret = self.dvc.metrics.show(
-            "metric_json_ext",
+            ["metric_json_ext"],
             typ="json",
             xpath="$.metrics[?(@.deviation_mse<0.30) & (@.value_mse>0.4)]",
             all_branches=True,
@@ -153,7 +153,7 @@ def test_show(self):
 
     def test_unknown_type_ignored(self):
         ret = self.dvc.metrics.show(
-            "metric_hcsv", typ="unknown", xpath="0,branch", all_branches=True
+            ["metric_hcsv"], typ="unknown", xpath="0,branch", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -161,7 +161,7 @@ def test_unknown_type_ignored(self):
 
     def test_type_case_normalized(self):
         ret = self.dvc.metrics.show(
-            "metric_hcsv", typ=" hCSV ", xpath="0,branch", all_branches=True
+            ["metric_hcsv"], typ=" hCSV ", xpath="0,branch", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -169,7 +169,7 @@ def test_type_case_normalized(self):
 
     def test_xpath_is_empty(self):
         ret = self.dvc.metrics.show(
-            "metric_json", typ="json", xpath="", all_branches=True
+            ["metric_json"], typ="json", xpath="", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -177,7 +177,7 @@ def test_xpath_is_empty(self):
 
     def test_xpath_is_none(self):
         ret = self.dvc.metrics.show(
-            "metric_json", typ="json", xpath=None, all_branches=True
+            ["metric_json"], typ="json", xpath=None, all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -185,7 +185,7 @@ def test_xpath_is_none(self):
 
     def test_xpath_all_columns(self):
         ret = self.dvc.metrics.show(
-            "metric_hcsv", typ="hcsv ", xpath="0,", all_branches=True
+            ["metric_hcsv"], typ="hcsv ", xpath="0,", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -193,7 +193,7 @@ def test_xpath_all_columns(self):
 
     def test_xpath_all_rows(self):
         ret = self.dvc.metrics.show(
-            "metric_csv", typ="csv", xpath=",0", all_branches=True
+            ["metric_csv"], typ="csv", xpath=",0", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -201,7 +201,7 @@ def test_xpath_all_rows(self):
 
     def test_xpath_all(self):
         ret = self.dvc.metrics.show(
-            "metric_csv", typ="csv", xpath=",", all_branches=True
+            ["metric_csv"], typ="csv", xpath=",", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -209,7 +209,7 @@ def test_xpath_all(self):
 
     def test_xpath_all_with_header(self):
         ret = self.dvc.metrics.show(
-            "metric_hcsv", typ="hcsv", xpath=",", all_branches=True
+            ["metric_hcsv"], typ="hcsv", xpath=",", all_branches=True
         )
         self.assertEqual(len(ret), 3)
         for b in ["foo", "bar", "baz"]:
@@ -412,11 +412,13 @@ def setUp(self):
         self.dvc.scm.checkout("master")
 
     def test(self):
-        with self.assertRaises(BadMetricError):
-            self.dvc.metrics.show("nested", all_branches=True, recursive=False)
+        ret = self.dvc.metrics.show(
+            ["nested"], all_branches=True, recursive=False
+        )
+        self.assertEqual(len(ret), 1)
 
         ret = self.dvc.metrics.show(
-            "nested", all_branches=True, recursive=True
+            ["nested"], all_branches=True, recursive=True
         )
         self.assertEqual(len(ret), 1)
         self.assertEqual(
@@ -697,7 +699,7 @@ def _test_metrics(self, func):
         self.dvc = DvcRepo(".")
 
         res = self.dvc.metrics.show(
-            "metrics.json", all_branches=True, typ="json", xpath="metrics"
+            ["metrics.json"], all_branches=True, typ="json", xpath="metrics"
         )
 
         self.assertEqual(
@@ -711,7 +713,7 @@ def _test_metrics(self, func):
         )
 
         res = self.dvc.metrics.show(
-            "", all_branches=True, typ="json", xpath="metrics"
+            all_branches=True, typ="json", xpath="metrics"
         )
 
         self.assertEqual(
@@ -777,7 +779,9 @@ def test_show(self):
             self._do_show(file_name, xpath)
 
     def _do_show(self, file_name, xpath):
-        ret = self.dvc.metrics.show(file_name, xpath=xpath, all_branches=True)
+        ret = self.dvc.metrics.show(
+            [file_name], xpath=xpath, all_branches=True
+        )
         self.assertEqual(len(ret), 3)
         for branch in self.branches:
             if isinstance(ret[branch][file_name], list):
@@ -844,3 +848,41 @@ def test_show_xpath_should_override_stage_xpath(dvc_repo):
 
     result = dvc_repo.metrics.show(xpath="m1")
     assert result == {"": {metric_file: [0.1]}}
+
+
+def test_show_multiple_outputs(dvc_repo, caplog):
+    with open("1.json", "w") as fobj:
+        json.dump({"AUC": 1}, fobj)
+
+    with open("2.json", "w") as fobj:
+        json.dump({"AUC": 2}, fobj)
+
+    os.mkdir("metrics")
+    with open("metrics/3.json", "w") as fobj:
+        json.dump({"AUC": 3}, fobj)
+
+    dvc_repo.run(cmd="", overwrite=True, metrics=["1.json"])
+    dvc_repo.run(cmd="", overwrite=True, metrics=["2.json"])
+    dvc_repo.run(cmd="", overwrite=True, metrics=["metrics/3.json"])
+
+    with caplog.at_level(logging.INFO, logger="dvc"):
+        assert 0 == main(["metrics", "show", "1.json", "2.json"])
+        assert '1.json: {"AUC": 1}' in caplog.text
+        assert '2.json: {"AUC": 2}' in caplog.text
+
+    caplog.clear()
+
+    with caplog.at_level(logging.INFO, logger="dvc"):
+        assert 0 == main(["metrics", "show", "-R", "1.json", "metrics"])
+        assert '1.json: {"AUC": 1}' in caplog.text
+        assert '3.json: {"AUC": 3}' in caplog.text
+
+    caplog.clear()
+
+    with caplog.at_level(logging.INFO, logger="dvc"):
+        assert 1 == main(["metrics", "show", "1.json", "not-found"])
+        assert '1.json: {"AUC": 1}' in caplog.text
+        assert (
+            "the following metrics do not exists, "
+            "are not metric files or are malformed: 'not-found'"
+        ) in caplog.text
