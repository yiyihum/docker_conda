diff --git a/CHANGELOG b/CHANGELOG
index 62b8063..3d37564 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,4 +1,5 @@
 unreleased
+- Preserve literal newlines in docstrings
 - Fix decompilation of complex infinity
 - Add support for Python 3.10 pattern matching
 - Fix incorrect decompilation of lambdas in comprehension guards on Python 3.9 and higher
diff --git a/ast_decompiler/decompiler.py b/ast_decompiler/decompiler.py
index d21c412..e642df8 100644
--- a/ast_decompiler/decompiler.py
+++ b/ast_decompiler/decompiler.py
@@ -834,13 +834,21 @@ class Decompiler(ast.NodeVisitor):
     def write_string(self, string_value: str, kind: Optional[str] = None) -> None:
         if kind is not None:
             self.write(kind)
+        if isinstance(self.get_parent_node(), ast.Expr) and '"""' not in string_value:
+            self.write('"""')
+            s = string_value.encode("unicode-escape").decode("ascii")
+            s = s.replace("\\n", "\n").replace("\\r", "\r")
+            self.write(s)
+            self.write('"""')
+            return
         if self.has_parent_of_type(ast.FormattedValue):
             delimiter = '"'
         else:
             delimiter = "'"
         self.write(delimiter)
         s = string_value.encode("unicode-escape").decode("ascii")
-        self.write(s.replace(delimiter, "\\" + delimiter))
+        s = s.replace(delimiter, "\\" + delimiter)
+        self.write(s)
         self.write(delimiter)
 
     def visit_FormattedValue(self, node: ast.FormattedValue) -> None:
