diff --git a/tests/conftest.py b/tests/conftest.py
new file mode 100644
index 0000000..6e6c8e9
--- /dev/null
+++ b/tests/conftest.py
@@ -0,0 +1,22 @@
+# Third Party Library
+import pytest
+
+
+@pytest.fixture
+def json0():
+    return {
+        "data": {
+            "users": [
+                {"id": 0, "name": "Vang Stout", "gender": "female"},
+                {"id": 1, "name": "Jeannie Gaines", "gender": "male"},
+                {"id": 2, "name": "Guzman Hunter", "gender": "female"},
+                {"id": 3, "name": "Janine Gross"},
+                {"id": 4, "name": "Clarke Patrick", "gender": "male"},
+                {"id": 5, "name": "Whitney Mcfadden"},
+            ],
+            "start": 0,
+            "size": 5,
+            "total": 100,
+        },
+        "status": 0,
+    }
diff --git a/tests/test_exceptions.py b/tests/test_exceptions.py
new file mode 100644
index 0000000..decde7e
--- /dev/null
+++ b/tests/test_exceptions.py
@@ -0,0 +1,49 @@
+# Standard Library
+import textwrap
+
+# Third Party Library
+import pytest
+
+# First Party Library
+from data_extractor.exceptions import ExtractError
+from data_extractor.item import Field, Item
+from data_extractor.json import JSONExtractor
+
+
+def test_exception_trace(json0):
+    data = json0
+
+    class User(Item):
+        uid = Field(JSONExtractor("id"))
+        name = Field(JSONExtractor("name"))
+        gender = Field(JSONExtractor("gender"))
+
+    class UserResponse(Item):
+        start = Field(JSONExtractor("start"), default=0)
+        size = Field(JSONExtractor("size"))
+        total = Field(JSONExtractor("total"))
+        data = User(JSONExtractor("users[*]"), is_many=True)
+
+    extractor = UserResponse(JSONExtractor("data"))
+    with pytest.raises(ExtractError) as catch:
+        extractor.extract(data)
+
+    exc = catch.value
+    assert len(exc.extractors) == 3
+    assert exc.extractors[0] is User.gender
+    assert exc.extractors[1] is UserResponse.data
+    assert exc.extractors[2] is extractor
+    assert exc.element == {"id": 3, "name": "Janine Gross"}
+
+    assert (
+        str(exc.args[0])
+        == textwrap.dedent(
+            """
+            ExtractError(Field(JSONExtractor('gender'), default=sentinel, is_many=False), element={'id': 3, 'name': 'Janine Gross'})
+            |-UserResponse(JSONExtractor('data'), default=sentinel, is_many=False)
+              |-User(JSONExtractor('users[*]'), default=sentinel, is_many=True)
+                |-Field(JSONExtractor('gender'), default=sentinel, is_many=False)
+                  |-{'id': 3, 'name': 'Janine Gross'}
+            """
+        ).strip()
+    )
diff --git a/tests/test_item.py b/tests/test_item.py
index c8af9e5..e6b518b 100644
--- a/tests/test_item.py
+++ b/tests/test_item.py
@@ -5,6 +5,7 @@ from pathlib import Path
 import pytest
 
 # First Party Library
+from data_extractor.exceptions import ExtractError
 from data_extractor.item import Field, Item
 from data_extractor.json import JSONExtractor
 from data_extractor.lxml import CSSExtractor, TextCSSExtractor, XPathExtractor
@@ -81,8 +82,14 @@ def test_field_extract_with_default(element0, Extractor, expr, expect):
     ids=repr,
 )
 def test_field_extract_without_default(element0, Extractor, expr):
-    with pytest.raises(ValueError):
-        Field(Extractor(expr)).extract(element0)
+    extractor = Field(Extractor(expr))
+    with pytest.raises(ExtractError) as catch:
+        extractor.extract(element0)
+
+    exc = catch.value
+    assert len(exc.extractors) == 1
+    assert exc.extractors[0] is extractor
+    assert exc.element is element0
 
 
 def test_field_parameters_conflict():
@@ -167,8 +174,15 @@ def element2():
 
 
 def test_item_extract_failure_when_last_field_missing(element2, Article0):
-    with pytest.raises(ValueError):
-        Article0(CSSExtractor("li.article"), is_many=True).extract(element2)
+    extractor = Article0(CSSExtractor("li.article"), is_many=True)
+    with pytest.raises(ExtractError) as catch:
+        extractor.extract(element2)
+
+    exc = catch.value
+    assert len(exc.extractors) == 2
+    assert exc.extractors[0] is Article0.content
+    assert exc.extractors[1] is extractor
+    assert exc.element is element2.xpath("//li[@class='article'][2]")[0]
 
 
 def test_item_extract_success_without_is_many_when_last_field_missing(
@@ -258,23 +272,8 @@ def test_complex_item_extract_xml_data():
     }
 
 
-def test_complex_item_extract_json_data():
-    data = {
-        "data": {
-            "users": [
-                {"id": 0, "name": "Vang Stout", "gender": "female"},
-                {"id": 1, "name": "Jeannie Gaines", "gender": "male"},
-                {"id": 2, "name": "Guzman Hunter", "gender": "female"},
-                {"id": 3, "name": "Janine Gross"},
-                {"id": 4, "name": "Clarke Patrick", "gender": "male"},
-                {"id": 5, "name": "Whitney Mcfadden"},
-            ],
-            "start": 0,
-            "size": 5,
-            "total": 100,
-        },
-        "status": 0,
-    }
+def test_complex_item_extract_json_data(json0):
+    data = json0
 
     class User(Item):
         uid = Field(JSONExtractor("id"))
diff --git a/tests/test_lxml.py b/tests/test_lxml.py
index 28ff66a..058d36b 100644
--- a/tests/test_lxml.py
+++ b/tests/test_lxml.py
@@ -4,7 +4,7 @@ import pytest
 from lxml.etree import XPathEvalError
 
 # First Party Library
-from data_extractor.exceptions import ExprError
+from data_extractor.exceptions import ExprError, ExtractError
 from data_extractor.lxml import AttrCSSExtractor, TextCSSExtractor, XPathExtractor
 
 
@@ -87,9 +87,14 @@ def test_extract_first(element, Extractor, expr, expect):
 )
 def test_extract_first_without_default(element, Extractor, expr):
     extractor = Extractor(expr)
-    with pytest.raises(ValueError):
+    with pytest.raises(ExtractError) as catch:
         extractor.extract_first(element)
 
+    exc = catch.value
+    assert len(exc.extractors) == 1
+    assert exc.extractors[0] is extractor
+    assert exc.element is element
+
 
 @pytest.mark.parametrize(
     "expr,attr,expect",
@@ -128,18 +133,24 @@ def test_attr_css_extract_first(element, expr, attr, expect):
 )
 def test_attr_css_extract_first_without_default(element, expr, attr):
     extractor = AttrCSSExtractor(expr=expr, attr=attr)
-    with pytest.raises(ValueError):
+    with pytest.raises(ExtractError) as catch:
         extractor.extract_first(element)
 
+    exc = catch.value
+    assert len(exc.extractors) == 1
+    assert exc.extractors[0] is extractor
+    assert exc.element is element
+
 
 @pytest.mark.parametrize("expr", ["///", "/text(", ""])
 def test_invalid_xpath_expr(element, expr):
     extractor = XPathExtractor(expr)
-    with pytest.raises(ExprError) as exc_info:
+    with pytest.raises(ExprError) as catch:
         extractor.extract(element)
 
-    assert exc_info.value.extractor is extractor
-    assert isinstance(exc_info.value.exc, XPathEvalError)
+    exc = catch.value
+    assert exc.extractor is extractor
+    assert isinstance(exc.exc, XPathEvalError)
 
 
 def test_xpath_result_not_list(element):
diff --git a/tests/test_utils.py b/tests/test_utils.py
new file mode 100644
index 0000000..3310399
--- /dev/null
+++ b/tests/test_utils.py
@@ -0,0 +1,16 @@
+# First Party Library
+from data_extractor.utils import LazyStr
+
+
+def test_lazy_str():
+    string = ""
+
+    def func():
+        nonlocal string
+        return string
+
+    ls = LazyStr(func=func)
+    assert str(ls) == ""
+
+    string = "abc"
+    assert str(ls) == "abc"
