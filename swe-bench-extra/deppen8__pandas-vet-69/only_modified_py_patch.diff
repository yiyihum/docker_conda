diff --git a/pandas_vet/__init__.py b/pandas_vet/__init__.py
index af81139..fd7bee9 100644
--- a/pandas_vet/__init__.py
+++ b/pandas_vet/__init__.py
@@ -18,6 +18,7 @@ class Visitor(ast.NodeVisitor):
     The `check` functions should be called from the `visit_` method that
     would produce a 'fail' condition.
     """
+
     errors = attr.ib(default=attr.Factory(list))
 
     def visit_Import(self, node):
@@ -56,8 +57,16 @@ class Visitor(ast.NodeVisitor):
         """
         Called for `.attribute` nodes.
         """
+        self.generic_visit(node)  # continue checking children
         self.errors.extend(check_for_values(node))
 
+    def visit_Name(self, node):
+        """
+        Called for `Assignment` nodes.
+        """
+        self.generic_visit(node)  # continue checking children
+        self.errors.extend(check_for_df(node))
+
     def check(self, node):
         self.errors = []
         self.visit(node)
@@ -81,6 +90,22 @@ class VetPlugin:
         except Exception as e:
             raise PandasVetException(e)
 
+    @staticmethod
+    def add_options(optmanager):
+        """Informs flake8 to ignore PD9xx by default."""
+        optmanager.extend_default_ignore(disabled_by_default)
+
+        optmanager.add_option(
+            long_option_name="--annoy",
+            action="store_true",
+            dest="annoy",
+            default=False,
+        )
+
+        options, xargs = optmanager.parse_args()
+        if options.annoy:
+            optmanager.remove_from_default_ignore(disabled_by_default)
+
 
 def check_import_name(node: ast.Import) -> List:
     """Check AST for imports of pandas not using the preferred alias 'pd'.
@@ -163,26 +188,23 @@ def check_for_arithmetic_methods(node: ast.Call) -> List:
     Error/warning message to recommend use of binary arithmetic operators.
     """
     arithmetic_methods = [
-        'add',
-        'sub', 'subtract',
-        'mul', 'multiply',
-        'div', 'divide', 'truediv',
-        'pow',
-        'floordiv',
-        'mod',
-        ]
-    arithmetic_operators = [
-        '+',
-        '-',
-        '*',
-        '/',
-        '**',
-        '//',
-        '%',
-        ]
-
-    if isinstance(node.func, ast.Attribute) and \
-       node.func.attr in arithmetic_methods:
+        "add",
+        "sub",
+        "subtract",
+        "mul",
+        "multiply",
+        "div",
+        "divide",
+        "truediv",
+        "pow",
+        "floordiv",
+        "mod",
+    ]
+
+    if (
+        isinstance(node.func, ast.Attribute)
+        and node.func.attr in arithmetic_methods
+    ):
         return [PD005(node.lineno, node.col_offset)]
     return []
 
@@ -193,11 +215,12 @@ def check_for_comparison_methods(node: ast.Call) -> List:
 
     Error/warning message to recommend use of binary comparison operators.
     """
-    comparison_methods = ['gt', 'lt', 'ge', 'le', 'eq', 'ne']
-    comparison_operators = ['>',  '<',  '>=', '<=', '==', '!=']
+    comparison_methods = ["gt", "lt", "ge", "le", "eq", "ne"]
 
-    if isinstance(node.func, ast.Attribute) and \
-       node.func.attr in comparison_methods:
+    if (
+        isinstance(node.func, ast.Attribute)
+        and node.func.attr in comparison_methods
+    ):
         return [PD006(node.lineno, node.col_offset)]
     return []
 
@@ -304,42 +327,55 @@ def check_for_merge(node: ast.Call) -> List:
     # object.  If the object name is `pd`, and if the `.merge()` method has at
     # least two arguments (left, right, ... ) we will assume that it matches
     # the pattern that we are trying to check, `pd.merge(left, right)`
-    if not hasattr(node.func, 'value'):
-        return []   # ignore functions
-    elif not hasattr(node.func.value, 'id'):
-        return [] # it could be the case that id is not present
+    if not hasattr(node.func, "value"):
+        return []  # ignore functions
+    elif not hasattr(node.func.value, "id"):
+        return []  # it could be the case that id is not present
 
-    if node.func.value.id != 'pd': return[]     # assume object name is `pd`
+    if node.func.value.id != "pd":
+        return []  # assume object name is `pd`
 
-    if not len(node.args) >= 2: return []           # at least two arguments
+    if not len(node.args) >= 2:
+        return []  # at least two arguments
 
-    if isinstance(node.func, ast.Attribute) and \
-       node.func.attr == "merge":
+    if isinstance(node.func, ast.Attribute) and node.func.attr == "merge":
         return [PD015(node.lineno, node.col_offset)]
     return []
 
 
+def check_for_df(node: ast.Name) -> List:
+    """
+    Check for variables named `df`
+    """
+    if node.id == "df" and isinstance(node.ctx, ast.Store):
+        return [PD901(node.lineno, node.col_offset)]
+    return []
+
+
 error = namedtuple("Error", ["lineno", "col", "message", "type"])
 VetError = partial(partial, error, type=VetPlugin)
 
+disabled_by_default = ["PD9"]
+
 PD001 = VetError(
     message="PD001 pandas should always be imported as 'import pandas as pd'"
 )
+
 PD002 = VetError(
     message="PD002 'inplace = True' should be avoided; it has inconsistent behavior"
 )
+
 PD003 = VetError(
     message="PD003 '.isna' is preferred to '.isnull'; functionality is equivalent"
 )
+
 PD004 = VetError(
     message="PD004 '.notna' is preferred to '.notnull'; functionality is equivalent"
 )
-PD005 = VetError(
-    message="PD005 Use arithmetic operator instead of method"
-)
-PD006 = VetError(
-    message="PD006 Use comparison operator instead of method"
-)
+PD005 = VetError(message="PD005 Use arithmetic operator instead of method")
+
+PD006 = VetError(message="PD006 Use comparison operator instead of method")
+
 PD007 = VetError(
     message="PD007 '.ix' is deprecated; use more explicit '.loc' or '.iloc'"
 )
@@ -364,3 +400,7 @@ PD013 = VetError(
 PD015 = VetError(
     message="PD015 Use '.merge' method instead of 'pd.merge' function. They have equivalent functionality."
 )
+
+PD901 = VetError(
+    message="PD901 'df' is a bad variable name. Be kinder to your future self."
+)
diff --git a/setup.py b/setup.py
index 96c1e4c..10e1b69 100644
--- a/setup.py
+++ b/setup.py
@@ -1,15 +1,10 @@
 import setuptools
 
-requires = [
-    "flake8 > 3.0.0",
-    "attrs",
-]
+requires = ["flake8 > 3.0.0", "attrs"]
 
-tests_requires = [
-    "pytest > 4.0.0"
-]
+tests_requires = ["pytest > 4.0.0"]
 
-flake8_entry_point = 'flake8.extension'
+flake8_entry_point = "flake8.extension"
 
 with open("README.md", "rt") as f:
     long_description = f.read()
@@ -26,16 +21,10 @@ setuptools.setup(
     author="Jacob Deppen",
     author_email="deppen.8@gmail.com",
     url="https://github.com/deppen8/pandas-vet",
-    packages=[
-        "pandas_vet",
-    ],
+    packages=["pandas_vet"],
     install_requires=requires,
     tests_require=tests_requires,
-    entry_points={
-        flake8_entry_point: [
-            'PD = pandas_vet:VetPlugin',
-        ],
-    },
+    entry_points={flake8_entry_point: ["PD = pandas_vet:VetPlugin"]},
     classifiers=[
         "Development Status :: 4 - Beta",
         "Environment :: Console",

