diff --git a/tests/test_PD005.py b/tests/test_PD005.py
index 1fcc596..78b3eca 100644
--- a/tests/test_PD005.py
+++ b/tests/test_PD005.py
@@ -14,17 +14,9 @@ def test_PD005_pass_arithmetic_operator():
     Test that explicit use of binary arithmetic operator does not
     result in an error.
     """
-    arithmetic_operators = [
-        '+',
-        '-',
-        '*',
-        '/',
-        '**',
-        '//',
-        '%',
-        ]
+    arithmetic_operators = ["+", "-", "*", "/", "**", "//", "%"]
     for op in arithmetic_operators:
-        statement = 'C = A {0} B'.format(op)
+        statement = "C = A {0} B".format(op)
         tree = ast.parse(statement)
         actual = list(VetPlugin(tree).run())
         expected = []
@@ -36,16 +28,20 @@ def test_PD005_fail_arithmetic_method():
     Test that using arithmetic method results in an error.
     """
     arithmetic_methods = [
-        'add',
-        'sub', 'subtract',
-        'mul', 'multiply',
-        'div', 'divide', 'truediv',
-        'pow',
-        'floordiv',
-        'mod',
-        ]
+        "add",
+        "sub",
+        "subtract",
+        "mul",
+        "multiply",
+        "div",
+        "divide",
+        "truediv",
+        "pow",
+        "floordiv",
+        "mod",
+    ]
     for op in arithmetic_methods:
-        statement = 'C = A.{0}(B)'.format(op)
+        statement = "C = A.{0}(B)".format(op)
         tree = ast.parse(statement)
         actual = list(VetPlugin(tree).run())
         expected = [PD005(1, 4)]
diff --git a/tests/test_PD006.py b/tests/test_PD006.py
index 7dae856..b1e1b62 100644
--- a/tests/test_PD006.py
+++ b/tests/test_PD006.py
@@ -14,9 +14,9 @@ def test_PD006_pass_comparison_operator():
     Test that explicit use of binary comparison operator does not
     result in an error.
     """
-    comparison_operators = ['>',  '<',  '>=', '<=', '==', '!=']
+    comparison_operators = [">", "<", ">=", "<=", "==", "!="]
     for op in comparison_operators:
-        statement = 'C = A {0} B'.format(op)
+        statement = "C = A {0} B".format(op)
         tree = ast.parse(statement)
         actual = list(VetPlugin(tree).run())
         expected = []
@@ -27,9 +27,9 @@ def test_PD006_fail_comparison_method():
     """
     Test that using comparison method results in an error.
     """
-    comparison_methods = ['gt', 'lt', 'ge', 'le', 'eq', 'ne']
+    comparison_methods = ["gt", "lt", "ge", "le", "eq", "ne"]
     for op in comparison_methods:
-        statement = 'C = A.{0}(B)'.format(op)
+        statement = "C = A.{0}(B)".format(op)
         tree = ast.parse(statement)
         actual = list(VetPlugin(tree).run())
         expected = [PD006(1, 4)]
diff --git a/tests/test_PD012.py b/tests/test_PD012.py
index 176b2d4..d669b42 100644
--- a/tests/test_PD012.py
+++ b/tests/test_PD012.py
@@ -12,7 +12,7 @@ def test_PD012_pass_read_csv():
     """
     Test that using .read_csv() explicitly does not result in an error.
     """
-    statement = "df = pd.read_csv(input_file)"
+    statement = "employees = pd.read_csv(input_file)"
     tree = ast.parse(statement)
     actual = list(VetPlugin(tree).run())
     expected = []
@@ -23,10 +23,10 @@ def test_PD012_fail_read_table():
     """
     Test that using .read_table() method results in an error.
     """
-    statement = "df = pd.read_table(input_file)"
+    statement = "employees = pd.read_table(input_file)"
     tree = ast.parse(statement)
     actual = list(VetPlugin(tree).run())
-    expected = [PD012(1, 5)]
+    expected = [PD012(1, 12)]
     assert actual == expected
 
 
@@ -34,7 +34,7 @@ def test_PD012_node_Name_pass():
     """
     Test that where 'read_table' is a Name does NOT raise an error
     """
-    statement = "df = read_table"
+    statement = "employees = read_table"
     tree = ast.parse(statement)
     actual = list(VetPlugin(tree).run())
     expected = []
diff --git a/tests/test_PD901.py b/tests/test_PD901.py
new file mode 100644
index 0000000..f4093f1
--- /dev/null
+++ b/tests/test_PD901.py
@@ -0,0 +1,36 @@
+import ast
+
+from pandas_vet import VetPlugin
+from pandas_vet import PD901
+
+
+def test_PD901_pass_non_df():
+    statement = "employees = pd.DataFrame(employee_dict)"
+    tree = ast.parse(statement)
+    actual = list(VetPlugin(tree).run())
+    expected = []
+    assert actual == expected
+
+
+def test_PD901_pass_part_df():
+    statement = "employees_df = pd.DataFrame(employee_dict)"
+    tree = ast.parse(statement)
+    actual = list(VetPlugin(tree).run())
+    expected = []
+    assert actual == expected
+
+
+def test_PD901_pass_df_param():
+    statement = "my_function(df=data)"
+    tree = ast.parse(statement)
+    actual = list(VetPlugin(tree).run())
+    expected = []
+    assert actual == expected
+
+
+def test_PD901_fail_df_var():
+    statement = "df = pd.DataFrame()"
+    tree = ast.parse(statement)
+    actual = list(VetPlugin(tree).run())
+    expected = [PD901(1, 0)]
+    assert actual == expected
