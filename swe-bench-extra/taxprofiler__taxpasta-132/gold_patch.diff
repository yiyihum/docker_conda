diff --git a/CHANGELOG.md b/CHANGELOG.md
index d4c4a92..0678f92 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -14,6 +14,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
     `merge` commands, which inserts a new column `rank_lineage` to results that
     contains semi-colon-separated strings with the ranks (#130).
 
+### Changed
+
+-   Reversed the order of lineages printed to output files (#131).
+
 ## [0.4.1] - (2023-07-13)
 
 ### Fixed
diff --git a/src/taxpasta/infrastructure/domain/service/taxopy_taxonomy_service.py b/src/taxpasta/infrastructure/domain/service/taxopy_taxonomy_service.py
index 9635340..4141e9f 100644
--- a/src/taxpasta/infrastructure/domain/service/taxopy_taxonomy_service.py
+++ b/src/taxpasta/infrastructure/domain/service/taxopy_taxonomy_service.py
@@ -73,7 +73,7 @@ class TaxopyTaxonomyService(TaxonomyService):
             taxon = taxopy.Taxon(taxid=taxonomy_id, taxdb=self._tax_db)
         except TaxidError:
             return None
-        return taxon.name_lineage
+        return list(reversed(taxon.name_lineage))
 
     def get_taxon_identifier_lineage(self, taxonomy_id: int) -> Optional[List[int]]:
         """Return the lineage of a given taxonomy identifier as identifiers."""
@@ -81,7 +81,7 @@ class TaxopyTaxonomyService(TaxonomyService):
             taxon = taxopy.Taxon(taxid=taxonomy_id, taxdb=self._tax_db)
         except TaxidError:
             return None
-        return taxon.taxid_lineage
+        return list(reversed(taxon.taxid_lineage))
 
     def get_taxon_rank_lineage(self, taxonomy_id: int) -> Optional[List[str]]:
         """Return the lineage of a given taxonomy identifier as ranks."""
@@ -89,7 +89,7 @@ class TaxopyTaxonomyService(TaxonomyService):
             taxon = taxopy.Taxon(taxid=taxonomy_id, taxdb=self._tax_db)
         except TaxidError:
             return None
-        return list(taxon.rank_name_dictionary.keys())
+        return list(reversed(taxon.rank_name_dictionary.keys()))
 
     def add_name(self, table: DataFrame[ResultTable]) -> DataFrame[ResultTable]:
         """Add a column for the taxon name to the given table."""
@@ -123,11 +123,10 @@ class TaxopyTaxonomyService(TaxonomyService):
 
     def _name_lineage_as_str(self, taxonomy_id: int) -> Optional[str]:
         """Return the lineage of a taxon as concatenated names."""
-        try:
-            taxon = taxopy.Taxon(taxid=taxonomy_id, taxdb=self._tax_db)
-        except TaxidError:
+        if lineage := self.get_taxon_name_lineage(taxonomy_id):
+            return ";".join(lineage)
+        else:
             return None
-        return ";".join(taxon.name_lineage)
 
     def add_identifier_lineage(
         self, table: DataFrame[ResultTable]
@@ -143,11 +142,10 @@ class TaxopyTaxonomyService(TaxonomyService):
 
     def _taxid_lineage_as_str(self, taxonomy_id: int) -> Optional[str]:
         """Return the lineage of a taxon as concatenated identifiers."""
-        try:
-            taxon = taxopy.Taxon(taxid=taxonomy_id, taxdb=self._tax_db)
-        except TaxidError:
+        if lineage := self.get_taxon_identifier_lineage(taxonomy_id):
+            return ";".join(str(tax_id) for tax_id in lineage)
+        else:
             return None
-        return ";".join([str(tax_id) for tax_id in taxon.taxid_lineage])
 
     def add_rank_lineage(self, table: DataFrame[ResultTable]) -> DataFrame[ResultTable]:
         """Add a column for the taxon lineage as ranks to the given table."""
@@ -161,11 +159,10 @@ class TaxopyTaxonomyService(TaxonomyService):
 
     def _rank_lineage_as_str(self, taxonomy_id: int) -> Optional[str]:
         """Return the rank lineage of a taxon as concatenated identifiers."""
-        try:
-            taxon = taxopy.Taxon(taxid=taxonomy_id, taxdb=self._tax_db)
-        except TaxidError:
+        if lineage := self.get_taxon_rank_lineage(taxonomy_id):
+            return ";".join(lineage)
+        else:
             return None
-        return ";".join(taxon.rank_name_dictionary.keys())
 
     def summarise_at(
         self, profile: DataFrame[StandardProfile], rank: str
