diff --git a/tests/test_adt.py b/tests/test_adt.py
index ee58324..a14967a 100644
--- a/tests/test_adt.py
+++ b/tests/test_adt.py
@@ -1,5 +1,6 @@
 import pytest
-from hwtypes.adt import Product, Sum, Enum, Tuple, new
+from hwtypes.adt import Product, Sum, Enum, Tuple
+from hwtypes.modifiers import new
 
 class En(Enum):
     a = 0
@@ -125,7 +126,7 @@ def test_new():
     t = new(Sum, (En, Pr))
     assert t is not Su
     assert Sum[En, Pr] is Su
-    assert t.__module__ == 'hwtypes.adt'
+    assert t.__module__ == 'hwtypes.modifiers'
 
     t = new(Sum, (En, Pr), module=__name__)
     assert t.__module__ == __name__
diff --git a/tests/test_fp.py b/tests/test_fp.py
index 7cff76d..20628da 100644
--- a/tests/test_fp.py
+++ b/tests/test_fp.py
@@ -127,6 +127,30 @@ def _c_type_vector(T):
 
 NTESTS = 100
 
+@pytest.mark.parametrize("mode", [
+    RoundingMode.RNE,
+    RoundingMode.RNA,
+    RoundingMode.RTP,
+    RoundingMode.RTN,
+    RoundingMode.RTZ,
+    ])
+@pytest.mark.parametrize("ieee", [False, True])
+def test_init(mode, ieee):
+    BigFloat = FPVector[27,100, mode, ieee]
+    class F:
+        def __float__(self):
+            return 0.5
+
+    class I:
+        def __int__(self):
+            return 1
+
+    assert BigFloat(0.5) == BigFloat(F())
+    assert BigFloat(1) == BigFloat(I())
+    assert BigFloat(0.5) == BigFloat('0.5')
+    assert BigFloat('1/3') == BigFloat(1)/BigFloat(3)
+    assert BigFloat('1/3') != BigFloat(1/3) # as 1/3 is performed in python floats
+
 @pytest.mark.parametrize("FT", [
     FPVector[8, 7, RoundingMode.RNE, True],
     FPVector[8, 7, RoundingMode.RNE, False],
diff --git a/tests/test_modifiers.py b/tests/test_modifiers.py
new file mode 100644
index 0000000..e97896f
--- /dev/null
+++ b/tests/test_modifiers.py
@@ -0,0 +1,27 @@
+from hwtypes.modifiers import make_modifier
+from hwtypes import Bit, AbstractBit
+
+
+def test_basic():
+    Global = make_modifier("Global")
+    GlobalBit = Global(Bit)
+
+    assert issubclass(GlobalBit, Bit)
+    assert issubclass(GlobalBit, AbstractBit)
+    assert issubclass(GlobalBit, Global)
+
+    global_bit = GlobalBit(0)
+
+    assert isinstance(global_bit, GlobalBit)
+    assert isinstance(global_bit, Bit)
+    assert isinstance(global_bit, AbstractBit)
+    assert isinstance(global_bit, Global)
+
+def test_cache():
+    G1 = make_modifier("Global", cache=True)
+    G2 = make_modifier("Global", cache=True)
+    G3 = make_modifier("Global")
+
+    assert G1 is G2
+    assert G1 is not G3
+
