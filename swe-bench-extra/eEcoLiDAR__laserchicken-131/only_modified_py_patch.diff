diff --git a/laserchicken/feature_extractor/__init__.py b/laserchicken/feature_extractor/__init__.py
index f909613..f2106f9 100644
--- a/laserchicken/feature_extractor/__init__.py
+++ b/laserchicken/feature_extractor/__init__.py
@@ -95,26 +95,6 @@ def compute_features(env_point_cloud, neighborhoods, target_idx_base, target_poi
             if provided_feature in features_to_do:
                 features_to_do.remove(provided_feature)
 
-    # for feature in extended_features:
-    #     if (target_idx_base == 0) and (not overwrite) and (feature in target_point_cloud[keys.point]):
-    #         continue  # Skip feature calc if it is already there and we do not overwrite
-    #
-    #     if verbose:
-    #         sys.stdout.write('Feature "{}"\n'.format(feature))
-    #         sys.stdout.flush()
-    #         start = time.time()
-    #
-    #     extractor = FEATURES[feature]()
-    #     _add_or_update_feature(env_point_cloud, neighborhoods, target_idx_base,
-    #                            target_point_cloud, extractor, volume, overwrite, kwargs)
-    #     utils.add_metadata(target_point_cloud, type(
-    #         extractor).__module__, extractor.get_params())
-    #
-    #     if verbose:
-    #         elapsed = time.time() - start
-    #         sys.stdout.write(' took {:.2f} seconds\n'.format(elapsed))
-    #         sys.stdout.flush()
-
     _keep_only_wanted_features(target_point_cloud, wanted_feature_names)
 
 
diff --git a/laserchicken/keys.py b/laserchicken/keys.py
index 761dfa8..3c2f9f7 100644
--- a/laserchicken/keys.py
+++ b/laserchicken/keys.py
@@ -1,3 +1,11 @@
+# Name of point data section in point cloud structure
 point = 'vertex'
+
+# Name of the normalized height point attribute
+normalized_height = 'normalized_height'
+
+#
 point_cloud = 'pointcloud'
+
+#
 provenance = 'log'
diff --git a/laserchicken/utils.py b/laserchicken/utils.py
index aa923d7..c660eac 100644
--- a/laserchicken/utils.py
+++ b/laserchicken/utils.py
@@ -67,6 +67,23 @@ def get_features(point_cloud, attribute_names, index=None):
     return (point_cloud[keys.point][f]["data"][index] for f in attribute_names)
 
 
+def create_point_cloud(x, y, z):
+    """
+    Create a point cloud object given only the x y z values.
+
+    :param x: x attribute values
+    :param y: y attribute values
+    :param z: z attribute values
+    :return: point cloud object
+    """
+    return {keys.point: {'x': {'type': 'float', 'data': np.array(x)},
+                         'y': {'type': 'float', 'data': np.array(y)},
+                         'z': {'type': 'float', 'data': np.array(z)}},
+            keys.point_cloud: {},
+            keys.provenance: []
+            }
+
+
 def copy_point_cloud(source_point_cloud, array_mask=None):
     """
     Makes a deep copy of a point cloud dict using the array mask when copying the points.

