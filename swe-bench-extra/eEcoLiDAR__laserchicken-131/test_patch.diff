diff --git a/laserchicken/test_normalize.py b/laserchicken/test_normalize.py
new file mode 100644
index 0000000..bfe02a1
--- /dev/null
+++ b/laserchicken/test_normalize.py
@@ -0,0 +1,41 @@
+import os
+import shutil
+import unittest
+import pytest
+
+import numpy as np
+import pandas as pd
+from numpy.testing import assert_almost_equal, assert_equal
+
+from laserchicken.keys import point, normalized_height
+from laserchicken.normalization import normalize
+from laserchicken.spatial_selections import points_in_polygon_wkt, points_in_polygon_wkt_file, \
+    points_in_polygon_shp_file
+from laserchicken.test_tools import create_point_cloud
+from laserchicken.utils import get_attribute_value
+
+
+class TestNormalize(unittest.TestCase):
+    def test_normalize_empty_point_cloud(self):
+        point_cloud = create_point_cloud([], [], [])
+        normalized_point_cloud = normalize(point_cloud)
+        self.assertTrue(normalized_height in normalized_point_cloud[point])
+
+    def test_normalize_tiny_equal_point_cloud(self):
+        point_cloud = create_point_cloud([0, 0, 0], [0, 0, 0], [0, 0, 0])
+        normalized_point_cloud = normalize(point_cloud)
+        normalized_values = get_attribute_value(normalized_point_cloud, range(3), normalized_height)
+        np.testing.assert_allclose(normalized_values, np.array([0, 0, 0]), atol=1e-7)
+
+    def test_normalize_tiny_unequal_point_cloud(self):
+        point_cloud = create_point_cloud([0, 0, 0], [0, 0, 0], [1, 2, 3])
+        normalized_point_cloud = normalize(point_cloud)
+        normalized_values = get_attribute_value(normalized_point_cloud, range(3), normalized_height)
+        np.testing.assert_allclose(normalized_values, np.array([0, 1, 2]), atol=1e-7)
+
+    def test_normalize_tiny_unequal_point_cloud_multiple_cells(self):
+        """Last of the 3 points is not in the neighborhood of the others."""
+        point_cloud = create_point_cloud([0, 0, 5], [0, 0, 0], [1, 2, 3])
+        normalized_point_cloud = normalize(point_cloud, cell_size=2)
+        normalized_values = get_attribute_value(normalized_point_cloud, range(3), normalized_height)
+        np.testing.assert_allclose(normalized_values, np.array([0, 1, 0]), atol=1e-7)
diff --git a/laserchicken/test_tools.py b/laserchicken/test_tools.py
index 9ed84b2..993099a 100644
--- a/laserchicken/test_tools.py
+++ b/laserchicken/test_tools.py
@@ -6,7 +6,7 @@ import numpy as np
 from laserchicken import keys
 
 
-def generate_test_point_cloud():
+def generate_tiny_test_point_cloud():
     """Generate a simple but valid point cloud with 3 points."""
     pc = {keys.point: {'x': {'type': 'double', 'data': np.array([1, 2, 3], dtype=np.float64)},
                        'y': {'type': 'double', 'data': np.array([2, 3, 4], dtype=np.float64)},
diff --git a/laserchicken/test_utils.py b/laserchicken/test_utils.py
index b028d1e..b691ef8 100644
--- a/laserchicken/test_utils.py
+++ b/laserchicken/test_utils.py
@@ -8,7 +8,7 @@ from time import time
 class TestUtils(unittest.TestCase):
     def test_GetPointCloudPoint(self):
         """ Should not raise exception. """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         x, y, z = utils.get_point(pc, 1)
         self.assertEqual(2, x)
         self.assertEqual(3, y)
@@ -16,7 +16,7 @@ class TestUtils(unittest.TestCase):
 
     def test_GetPointCloudPointFeature(self):
         """ Should not raise exception. """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         cols = 0.5 * (pc[keys.point]["x"]["data"] + pc[keys.point]["y"]["data"])
         pc[keys.point]["color"] = {"type": "double", "data": cols}
         x, y, z = utils.get_point(pc, 1)
@@ -25,7 +25,7 @@ class TestUtils(unittest.TestCase):
 
     def test_GetPointCloudPointFeatures(self):
         """ Should not raise exception. """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         cols = 0.5 * (pc[keys.point]["x"]["data"] + pc[keys.point]["y"]["data"])
         flavs = 0.5 * (pc[keys.point]["x"]["data"] - pc[keys.point]["y"]["data"])
         pc[keys.point]["color"] = {"type": "double", "data": cols}
@@ -37,7 +37,7 @@ class TestUtils(unittest.TestCase):
 
     def test_CopyEmptyPointCloud(self):
         """ Should not raise exception. """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         pc[keys.point]["x"]["data"] = np.array([])
         pc[keys.point]["y"]["data"] = np.array([])
         pc[keys.point]["z"]["data"] = np.array([])
@@ -47,7 +47,7 @@ class TestUtils(unittest.TestCase):
 
     def test_CopyNonEmptyPointCloud(self):
         """ Test whether coordinates are copied """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         x = pc[keys.point]["x"]["data"]
         y = pc[keys.point]["y"]["data"]
         z = pc[keys.point]["z"]["data"]
@@ -59,7 +59,7 @@ class TestUtils(unittest.TestCase):
 
     def test_CopyPointCloudMetaData(self):
         """ Test whether metadata are copied """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         pc["log"] = [
             {"time": datetime.datetime(2018, 1, 23, 12, 15, 59), "module": "filter", "parameters": [("z", "gt", 0.5)]}]
 
@@ -70,7 +70,7 @@ class TestUtils(unittest.TestCase):
 
     def test_CopyNonEmptyPointCloudBoolMask(self):
         """ Test whether coordinates are copied with boolean mask """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         x = pc[keys.point]["x"]["data"][2]
         y = pc[keys.point]["y"]["data"][2]
         z = pc[keys.point]["z"]["data"][2]
@@ -82,7 +82,7 @@ class TestUtils(unittest.TestCase):
 
     def test_CopyNonEmptyPointCloudIntMask(self):
         """ Test whether coordinates are copied with array indexing """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         x0, x1 = pc[keys.point]["x"]["data"][0], pc[keys.point]["x"]["data"][1]
         y0, y1 = pc[keys.point]["y"]["data"][0], pc[keys.point]["y"]["data"][1]
         z0, z1 = pc[keys.point]["z"]["data"][0], pc[keys.point]["z"]["data"][1]
@@ -94,7 +94,7 @@ class TestUtils(unittest.TestCase):
 
     def test_AddMetaDataToPointCloud(self):
         """ Test adding info to the point cloud for test module """
-        pc = test_tools.generate_test_point_cloud()
+        pc = test_tools.generate_tiny_test_point_cloud()
         from laserchicken import select as somemodule
         utils.add_metadata(pc,somemodule,params = (0.5,"cylinder",4))
         self.assertEqual(len(pc[keys.provenance]),1)
