diff --git a/changes/1157.bugfix.rst b/changes/1157.bugfix.rst
new file mode 100644
index 00000000..cb9c13db
--- /dev/null
+++ b/changes/1157.bugfix.rst
@@ -0,0 +1,1 @@
+Briefcase will detect if you attempt to launch an Android app on a device whose OS doesn't meet minimum version requirements.
diff --git a/src/briefcase/integrations/android_sdk.py b/src/briefcase/integrations/android_sdk.py
index 59bf8e77..2147ab07 100644
--- a/src/briefcase/integrations/android_sdk.py
+++ b/src/briefcase/integrations/android_sdk.py
@@ -706,7 +706,6 @@ connection.
             output = self.tools.subprocess.check_output(
                 [os.fsdecode(self.emulator_path), "-list-avds"]
             ).strip()
-
             # AVD names are returned one per line.
             if len(output) == 0:
                 return []
@@ -720,7 +719,6 @@ connection.
             output = self.tools.subprocess.check_output(
                 [os.fsdecode(self.adb_path), "devices", "-l"]
             ).strip()
-
             # Process the output of `adb devices -l`.
             # The first line is header information.
             # Each subsequent line is a single device descriptor.
@@ -1326,7 +1324,7 @@ class ADB:
         # checking that they are valid, then parsing output to notice errors.
         # This keeps performance good in the success case.
         try:
-            return self.tools.subprocess.check_output(
+            output = self.tools.subprocess.check_output(
                 [
                     os.fsdecode(self.tools.android_sdk.adb_path),
                     "-s",
@@ -1338,6 +1336,14 @@ class ADB:
                 ],
                 quiet=quiet,
             )
+            # add returns status code 0 in the case of failure. The only tangible evidence
+            # of failure is the message "Failure [INSTALL_FAILED_OLDER_SDK]" in the,
+            # console output; so if that message exists in the output, raise an exception.
+            if "Failure [INSTALL_FAILED_OLDER_SDK]" in output:
+                raise BriefcaseCommandError(
+                    "Your device doesn't meet the minimum SDK requirements of this app."
+                )
+            return output
         except subprocess.CalledProcessError as e:
             if any(DEVICE_NOT_FOUND.match(line) for line in e.output.split("\n")):
                 raise InvalidDeviceError("device id", self.device) from e
