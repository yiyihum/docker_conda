diff --git a/mockito/mocking.py b/mockito/mocking.py
index 82be9b2..0955e19 100644
--- a/mockito/mocking.py
+++ b/mockito/mocking.py
@@ -18,17 +18,14 @@
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
 
-from collections import deque
-import inspect
 import functools
+import inspect
 import operator
+from collections import deque
 
-from . import invocation
-from . import signature
-from . import utils
+from . import invocation, signature, utils
 from .mock_registry import mock_registry
 
-
 __all__ = ['mock']
 
 __tracebackhide__ = operator.methodcaller(
@@ -75,13 +72,24 @@ class Mock(object):
     # STUBBING
 
     def get_original_method(self, method_name):
+        """
+        Looks up the original method on the `spec` object and returns it
+        together with an indication of whether the method is found
+        "directly" on the `spec` object.
+
+        This is used to decide whether the method should be stored as an
+        original_method and should therefore be replaced when unstubbing.
+        """
         if self.spec is None:
-            return None
+            return None, False
 
         try:
-            return self.spec.__dict__.get(method_name)
-        except AttributeError:
-            return getattr(self.spec, method_name, None)
+            return self.spec.__dict__[method_name], True
+        except (AttributeError, KeyError):
+            # Classes with defined `__slots__` and then no `__dict__` are not
+            # patchable but if we catch the `AttributeError` here, we get
+            # the better error message for the user.
+            return getattr(self.spec, method_name, None), False
 
     def set_method(self, method_name, new_method):
         setattr(self.mocked_obj, method_name, new_method)
@@ -130,8 +138,14 @@ class Mock(object):
         try:
             self.original_methods[method_name]
         except KeyError:
-            original_method = self.get_original_method(method_name)
-            self.original_methods[method_name] = original_method
+            original_method, was_in_spec = self.get_original_method(
+                method_name)
+            if was_in_spec:
+                # This indicates the original method was found directly on
+                # the spec object and should therefore be restored by unstub
+                self.original_methods[method_name] = original_method
+            else:
+                self.original_methods[method_name] = None
 
             self.replace_method(method_name, original_method)
 
diff --git a/mockito/utils.py b/mockito/utils.py
index ed8e7c3..52e8be4 100644
--- a/mockito/utils.py
+++ b/mockito/utils.py
@@ -14,10 +14,7 @@ def contains_strict(seq, element):
 
 
 def newmethod(fn, obj):
-    if PY3:
-        return types.MethodType(fn, obj)
-    else:
-        return types.MethodType(fn, obj, obj.__class__)
+    return types.MethodType(fn, obj)
 
 
 def get_function_host(fn):
