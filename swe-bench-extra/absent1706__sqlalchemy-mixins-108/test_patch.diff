diff --git a/sqlalchemy_mixins/tests/test_activerecord.py b/sqlalchemy_mixins/tests/test_activerecord.py
index 901ac73..8284b2a 100644
--- a/sqlalchemy_mixins/tests/test_activerecord.py
+++ b/sqlalchemy_mixins/tests/test_activerecord.py
@@ -3,13 +3,16 @@ import unittest
 import sqlalchemy as sa
 from sqlalchemy import create_engine
 from sqlalchemy.ext.hybrid import hybrid_property
-from sqlalchemy.orm import Query, Session, DeclarativeBase
+from sqlalchemy.orm import Query, Session, DeclarativeBase, declarative_base
 
 from sqlalchemy_mixins import ActiveRecordMixin
 from sqlalchemy_mixins.activerecord import ModelNotFoundError
 
 class Base(DeclarativeBase):
     __abstract__ = True
+
+AlternativeBase = declarative_base()
+
 engine = create_engine('sqlite:///:memory:', echo=False)
 sess = Session(engine)
 # sess = scoped_session(sessionmaker(bind=engine))
@@ -20,6 +23,9 @@ class BaseModel(Base, ActiveRecordMixin):
     pass
 
 
+class BaseModelAlternative(AlternativeBase, ActiveRecordMixin):
+    __abstract__ = True
+
 class User(BaseModel):
     __tablename__ = 'user'
     __repr_attrs__ = ['name']
@@ -29,6 +35,13 @@ class User(BaseModel):
     posts_viewonly = sa.orm.relationship('Post', viewonly=True)
 
 
+class UserAlternative(BaseModelAlternative):
+    __tablename__ = 'user_alt'
+    __repr_attrs__ = ['name']
+    id = sa.Column(sa.Integer, primary_key=True)
+    name = sa.Column(sa.String)
+
+
 class Post(BaseModel):
     __tablename__ = 'post'
     id = sa.Column(sa.Integer, primary_key=True)
@@ -204,5 +217,21 @@ class TestActiveRecord(unittest.TestCase):
             _ = User.find_or_fail(123456789)
 
 
+class TestActiveRecordAlternative(unittest.TestCase):
+    def setUp(self):
+        sess.rollback()
+
+        BaseModelAlternative.set_session(None)
+        AlternativeBase.metadata.drop_all(engine)
+        AlternativeBase.metadata.create_all(engine)
+
+        BaseModelAlternative.set_session(sess)
+
+    def test_create(self):
+        u1 = UserAlternative.create(name='Bill u1')
+        self.assertEqual(u1, sess.query(UserAlternative).first())
+
+
+
 if __name__ == '__main__': # pragma: no cover
     unittest.main()
