diff --git a/tests/unit_tests/repobee/conftest.py b/tests/unit_tests/repobee/conftest.py
index ac28544..52c8a11 100644
--- a/tests/unit_tests/repobee/conftest.py
+++ b/tests/unit_tests/repobee/conftest.py
@@ -7,10 +7,9 @@ import os
 from unittest.mock import MagicMock
 import pytest
 
-from repobee_plug import manager
-
 import _repobee.constants
 import _repobee.config
+import _repobee.plugin
 
 import constants
 
@@ -64,9 +63,7 @@ def unused_path():
 @pytest.fixture(autouse=True)
 def unregister_plugins():
     """All plugins should be unregistered after each function."""
-    registered = manager.get_plugins()
-    for plugin in registered:
-        manager.unregister(plugin)
+    _repobee.plugin.unregister_all_plugins()
 
 
 @pytest.fixture(autouse=True)
diff --git a/tests/unit_tests/repobee/test_command.py b/tests/unit_tests/repobee/test_command.py
index 7a405e9..f5185e8 100644
--- a/tests/unit_tests/repobee/test_command.py
+++ b/tests/unit_tests/repobee/test_command.py
@@ -535,9 +535,7 @@ class TestCloneRepos:
         monkeypatch.setattr("_repobee.ext.pylint.act", act_hook_func)
         _repobee.ext.pylint.act(None, None)
 
-        plugin_names = plugin.resolve_plugin_names(
-            plugin_names=constants.PLUGINS, config_file=unused_path
-        )
+        plugin_names = constants.PLUGINS
         modules = plugin.load_plugin_modules(plugin_names)
         plugin.register_plugins(modules)
 
diff --git a/tests/unit_tests/repobee/test_plugin.py b/tests/unit_tests/repobee/test_plugin.py
index cbd74cc..2e207f0 100644
--- a/tests/unit_tests/repobee/test_plugin.py
+++ b/tests/unit_tests/repobee/test_plugin.py
@@ -34,21 +34,6 @@ def unregister_plugins():
         plug.manager.unregister(p)
 
 
-class TestResolvePluginNames:
-    """Tests for resolve_plugin_names."""
-
-    def test_plugin_names_override_config_file(self, config_mock, mocker):
-        """Test that the plugin_names argument override the configuration
-        file."""
-        plugin_names = ["awesome", "the_slarse_plugin", "ric_easter_egg"]
-
-        actual_plugin_names = plugin.resolve_plugin_names(
-            config_file=str(config_mock), plugin_names=plugin_names
-        )
-
-        assert actual_plugin_names == plugin_names
-
-
 class TestLoadPluginModules:
     """Tests for load_plugin_modules."""
 
@@ -136,6 +121,33 @@ class TestRegisterPlugins:
         plugin_manager_mock.register.assert_has_calls(expected_calls)
 
 
+class TestTryRegisterPlugin:
+    """Tests for try_register_plugin."""
+
+    def test_modules_unregistered_after_success(self):
+        plugin.try_register_plugin(pylint)
+        assert not plug.manager.get_plugins()
+
+    def test_modules_and_classes_unregistered_after_success(self):
+        plugin.try_register_plugin(javac, javac.JavacCloneHook)
+        assert not plug.manager.get_plugins()
+
+    def test_does_not_unregister_unrelated_plugins(self):
+        plug.manager.register(pylint)
+        plugin.try_register_plugin(javac, javac.JavacCloneHook)
+        assert pylint in plug.manager.get_plugins()
+
+    def test_modules_unregistered_after_fail(self):
+        with pytest.raises(plug.PlugError):
+            plugin.try_register_plugin(pylint, javac.JavacCloneHook)
+        assert not plug.manager.get_plugins()
+
+    def test_fails_if_classes_not_specified(self):
+        with pytest.raises(plug.PlugError) as exc_info:
+            plugin.try_register_plugin(javac)
+        assert javac.JavacCloneHook.__name__ in str(exc_info.value)
+
+
 class TestTasks:
     """Tests for testing RepoBee tasks."""
 
