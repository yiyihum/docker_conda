diff --git a/tests/test_parse/test_parse_identifier.py b/tests/test_parse/test_parse_identifier.py
index cd180863..a5fc6e33 100644
--- a/tests/test_parse/test_parse_identifier.py
+++ b/tests/test_parse/test_parse_identifier.py
@@ -175,19 +175,25 @@ class TestConceptParserRegex(unittest.TestCase):
     """Tests for regular expression parsing"""
 
     def setUp(self) -> None:
-        self.parser = ConceptParser(namespace_to_pattern={'hgnc': re.compile(r'\d+')})
+        self.parser = ConceptParser(namespace_to_pattern={
+            'hgnc': re.compile(r'\d+'),
+            'ec-code': re.compile(r'.+'),
+        })
         self.assertEqual({}, self.parser.namespace_to_identifier_to_encoding)
         self.assertEqual({}, self.parser.namespace_to_name_to_encoding)
 
     def test_valid(self):
-        s = 'hgnc:391'
-        result = self.parser.parseString(s)
-
-        self.assertIn('namespace', result)
-        self.assertIn('name', result)
-        self.assertNotIn('identifier', result)
-        self.assertEqual('hgnc', result['namespace'])
-        self.assertEqual('391', result['name'])
+        for curie, namespace, name in [
+            ('hgnc:391', 'hgnc', '391'),
+            ('ec-code:1.1.1.27', 'ec-code', '1.1.1.27'),
+        ]:
+            with self.subTest(curie=curie):
+                result = self.parser.parseString(curie)
+                self.assertIn('namespace', result)
+                self.assertIn('name', result)
+                self.assertNotIn('identifier', result)
+                self.assertEqual(namespace, result['namespace'])
+                self.assertEqual(name, result['name'])
 
     def test_invalid(self):
         """Test invalid BEL term."""
diff --git a/tests/test_parse/test_parse_metadata.py b/tests/test_parse/test_parse_metadata.py
index af71c512..f1192e34 100644
--- a/tests/test_parse/test_parse_metadata.py
+++ b/tests/test_parse/test_parse_metadata.py
@@ -178,12 +178,15 @@ class TestParseMetadata(FleetingTemporaryCacheMixin):
         self.assertEqual(re.compile(r'\w+'), self.parser.annotation_to_pattern['Test'])
 
     def test_define_namespace_regex(self):
-        s = 'DEFINE NAMESPACE dbSNP AS PATTERN "rs[0-9]*"'
-        self.parser.parseString(s)
-
-        self.assertNotIn('dbSNP', self.parser.namespace_to_term_to_encoding)
-        self.assertIn('dbSNP', self.parser.namespace_to_pattern)
-        self.assertEqual(re.compile('rs[0-9]*'), self.parser.namespace_to_pattern['dbSNP'])
+        for s, namespace, regex in [
+            ('DEFINE NAMESPACE dbSNP AS PATTERN "rs[0-9]*"', 'dbSNP', re.compile(r'rs[0-9]*')),
+            ('DEFINE NAMESPACE ec-code AS PATTERN ".*"', 'ec-code', re.compile(r'.*')),
+        ]:
+            with self.subTest(namespace=namespace):
+                self.parser.parseString(s)
+                self.assertNotIn(namespace, self.parser.namespace_to_term_to_encoding)
+                self.assertIn(namespace, self.parser.namespace_to_pattern)
+                self.assertEqual(regex, self.parser.namespace_to_pattern[namespace])
 
     def test_not_semantic_version(self):
         s = 'SET DOCUMENT Version = "1.0"'
