diff --git a/src/cabinetry/visualize/__init__.py b/src/cabinetry/visualize/__init__.py
index 3f53b86..91e40fb 100644
--- a/src/cabinetry/visualize/__init__.py
+++ b/src/cabinetry/visualize/__init__.py
@@ -56,6 +56,8 @@ def data_mc_from_histograms(
     figure_folder: Union[str, pathlib.Path] = "figures",
     log_scale: Optional[bool] = None,
     log_scale_x: bool = False,
+    channels: Optional[Union[str, List[str]]] = None,
+    colors: Optional[Dict[str, str]] = None,
     close_figure: bool = False,
     save_figure: bool = True,
 ) -> List[Dict[str, Any]]:
@@ -71,11 +73,18 @@ def data_mc_from_histograms(
             defaults to None (automatically determine whether to use linear/log scale)
         log_scale_x (bool, optional): whether to use logarithmic horizontal axis,
             defaults to False
+        channels (Optional[Union[str, List[str]]], optional): name of channel to show,
+            or list of names to include, defaults to None (uses all channels)
+        colors (Optional[Dict[str, str]], optional): map of sample names and colors to
+            use in plot, defaults to None (uses default colors)
         close_figure (bool, optional): whether to close each figure, defaults to False
             (enable when producing many figures to avoid memory issues, prevents
             automatic rendering in notebooks)
         save_figure (bool, optional): whether to save figures, defaults to True
 
+    Raises:
+        ValueError: if color specification is incomplete
+
     Returns:
         List[Dict[str, Any]]: list of dictionaries, where each dictionary contains a
             figure and the associated region name
@@ -83,7 +92,24 @@ def data_mc_from_histograms(
     log.info("visualizing histogram")
     histogram_folder = pathlib.Path(config["General"]["HistogramFolder"])
     figure_dict_list = []
+
+    # if custom colors are provided, ensure that they cover all samples
+    if colors is not None:
+        c_missing = {
+            sample["Name"] for sample in config["Samples"] if not sample.get("Data")
+        }.difference(colors.keys())
+        if c_missing:
+            raise ValueError(
+                f"colors need to be provided for all samples, missing for {c_missing}"
+            )
+
+    # create a list of channels to process
+    if channels is not None and isinstance(channels, str):
+        channels = [channels]
+
     for region in config["Regions"]:
+        if channels is not None and region["Name"] not in channels:
+            continue  # skip region
         histogram_dict_list = []
         model_stdevs = []
         # loop over samples in reverse order, such that samples that appear first in the
@@ -119,6 +145,7 @@ def data_mc_from_histograms(
             log_scale=log_scale,
             log_scale_x=log_scale_x,
             label=label,
+            colors=colors,
             close_figure=close_figure,
         )
         figure_dict_list.append({"figure": fig, "region": region["Name"]})
@@ -134,6 +161,7 @@ def data_mc(
     log_scale: Optional[bool] = None,
     log_scale_x: bool = False,
     channels: Optional[Union[str, List[str]]] = None,
+    colors: Optional[Dict[str, str]] = None,
     close_figure: bool = False,
     save_figure: bool = True,
 ) -> Optional[List[Dict[str, Any]]]:
@@ -159,11 +187,16 @@ def data_mc(
             defaults to False
         channels (Optional[Union[str, List[str]]], optional): name of channel to show,
             or list of names to include, defaults to None (uses all channels)
+        colors (Optional[Dict[str, str]], optional): map of sample names and colors to
+            use in plot, defaults to None (uses default colors)
         close_figure (bool, optional): whether to close each figure, defaults to False
             (enable when producing many figures to avoid memory issues, prevents
             automatic rendering in notebooks)
         save_figure (bool, optional): whether to save figures, defaults to True
 
+    Raises:
+        ValueError: if color specification is incomplete
+
     Returns:
         Optional[List[Dict[str, Any]]]: list of dictionaries, where each dictionary
             contains a figure and the associated region name, or None if no figure was
@@ -172,11 +205,19 @@ def data_mc(
     # strip off auxdata (if needed) and obtain data indexed by channel (and bin)
     data_yields = model_utils._data_per_channel(model_prediction.model, data)
 
-    # channels to include in table, with optional filtering applied
+    # if custom colors are provided, ensure that they cover all samples
+    if colors is not None:
+        c_missing = set(model_prediction.model.config.samples).difference(colors.keys())
+        if c_missing:
+            raise ValueError(
+                f"colors need to be provided for all samples, missing for {c_missing}"
+            )
+
+    # channels to include in plot, with optional filtering applied
     filtered_channels = model_utils._filter_channels(model_prediction.model, channels)
 
     if filtered_channels == []:
-        # nothing to include in tables, warning already raised via _filter_channels
+        # nothing to include in plots, warning already raised via _filter_channels
         return None
 
     # indices of included channels
@@ -241,6 +282,7 @@ def data_mc(
             log_scale=log_scale,
             log_scale_x=log_scale_x,
             label=label,
+            colors=colors,
             close_figure=close_figure,
         )
         figure_dict_list.append({"figure": fig, "region": channel_name})
diff --git a/src/cabinetry/visualize/plot_model.py b/src/cabinetry/visualize/plot_model.py
index 4ae8357..dda23ce 100644
--- a/src/cabinetry/visualize/plot_model.py
+++ b/src/cabinetry/visualize/plot_model.py
@@ -30,6 +30,7 @@ def data_mc(
     log_scale: Optional[bool] = None,
     log_scale_x: bool = False,
     label: str = "",
+    colors: Optional[Dict[str, str]] = None,
     close_figure: bool = False,
 ) -> mpl.figure.Figure:
     """Draws a data/MC histogram with uncertainty bands and ratio panel.
@@ -48,6 +49,8 @@ def data_mc(
         log_scale_x (bool, optional): whether to use logarithmic horizontal axis,
             defaults to False
         label (str, optional): label written on the figure, defaults to ""
+        colors (Optional[Dict[str, str]], optional): map of sample names and colors to
+            use in plot, defaults to None (uses default colors)
         close_figure (bool, optional): whether to close each figure immediately after
             saving it, defaults to False (enable when producing many figures to avoid
             memory issues, prevents rendering in notebooks)
@@ -102,9 +105,13 @@ def data_mc(
         else bin_centers
     )
     mc_containers = []
-    for mc_sample_yield in mc_histograms_yields:
+    for mc_sample_yield, sample_label in zip(mc_histograms_yields, mc_labels):
         mc_container = ax1.bar(
-            bin_centers, mc_sample_yield, width=bin_width, bottom=total_yield
+            bin_centers,
+            mc_sample_yield,
+            width=bin_width,
+            bottom=total_yield,
+            color=colors[sample_label] if colors else None,
         )
         mc_containers.append(mc_container)
 
