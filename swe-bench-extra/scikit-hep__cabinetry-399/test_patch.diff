diff --git a/tests/visualize/test_visualize.py b/tests/visualize/test_visualize.py
index 7ece48b..10c2394 100644
--- a/tests/visualize/test_visualize.py
+++ b/tests/visualize/test_visualize.py
@@ -105,17 +105,21 @@ def test_data_mc_from_histograms(mock_load, mock_draw, mock_stdev):
                 "log_scale": None,
                 "log_scale_x": False,
                 "label": "reg_1\npre-fit",
+                "colors": None,
                 "close_figure": False,
             },
         )
     ]
 
-    # custom log scale settings, close figure, do not save figure
+    # custom log scale settings, close figure, do not save figure, channel specified,
+    # custom colors
     _ = visualize.data_mc_from_histograms(
         config,
         figure_folder=figure_folder,
         log_scale=True,
         log_scale_x=True,
+        channels=["reg_1"],
+        colors={"sample_1": "red"},
         close_figure=True,
         save_figure=False,
     )
@@ -124,9 +128,20 @@ def test_data_mc_from_histograms(mock_load, mock_draw, mock_stdev):
         "log_scale": True,
         "log_scale_x": True,
         "label": "reg_1\npre-fit",
+        "colors": {"sample_1": "red"},
         "close_figure": True,
     }
 
+    # no matching channels
+    assert visualize.data_mc_from_histograms(config, channels="abc") == []
+
+    # incomplete color specification
+    with pytest.raises(
+        ValueError,
+        match="colors need to be provided for all samples, missing for {'sample_1'}",
+    ):
+        _ = visualize.data_mc_from_histograms(config, colors={})
+
 
 @mock.patch(
     "cabinetry.visualize.plot_model.data_mc", return_value=matplotlib.figure.Figure()
@@ -191,12 +206,13 @@ def test_data_mc(mock_data, mock_filter, mock_dict, mock_bins, mock_draw, exampl
         "log_scale": None,
         "log_scale_x": False,
         "label": "Signal Region\npre-fit",
+        "colors": None,
         "close_figure": False,
     }
 
     # post-fit plot (different label in model prediction), custom scale, close figure,
-    # do not save figure, histogram input mode: no binning or variable specified (via
-    # side effect)
+    # do not save figure, custom colors, histogram input mode: no binning or variable
+    # specified (via side effect)
     model_pred = model_utils.ModelPrediction(
         model, [[[11.0]]], [[[0.2], [0.2]]], [[0.2, 0.2]], "post-fit"
     )
@@ -206,6 +222,7 @@ def test_data_mc(mock_data, mock_filter, mock_dict, mock_bins, mock_draw, exampl
         config=config,
         figure_folder=figure_folder,
         log_scale=False,
+        colors={"Signal": "red"},
         close_figure=True,
         save_figure=False,
     )
@@ -224,6 +241,7 @@ def test_data_mc(mock_data, mock_filter, mock_dict, mock_bins, mock_draw, exampl
         "log_scale": False,
         "log_scale_x": False,
         "label": "Signal Region\npost-fit",
+        "colors": {"Signal": "red"},
         "close_figure": True,
     }
 
@@ -239,6 +257,13 @@ def test_data_mc(mock_data, mock_filter, mock_dict, mock_bins, mock_draw, exampl
     assert mock_filter.call_args == ((model, "abc"), {})
     assert mock_draw.call_count == 3  # no new call
 
+    # incomplete color specification
+    with pytest.raises(
+        ValueError,
+        match="colors need to be provided for all samples, missing for {'Signal'}",
+    ):
+        _ = visualize.data_mc(model_pred, data, colors={})
+
 
 @mock.patch(
     "cabinetry.histo.Histogram.from_path",
diff --git a/tests/visualize/test_visualize_plot_model.py b/tests/visualize/test_visualize_plot_model.py
index a6e49f5..2de5908 100644
--- a/tests/visualize/test_visualize_plot_model.py
+++ b/tests/visualize/test_visualize_plot_model.py
@@ -1,6 +1,7 @@
 import copy
 from unittest import mock
 
+import matplotlib as mpl
 import matplotlib.pyplot as plt
 from matplotlib.testing.compare import compare_images
 import numpy as np
@@ -103,19 +104,30 @@ def test_data_mc(tmp_path, caplog):
 
     # do not save figure, but close it
     # one bin with zero model prediction
+    # custom histogram colors
     histo_dict_list[0]["yields"] = np.asarray([0, 14])
     histo_dict_list[1]["yields"] = np.asarray([0, 5])
     caplog.clear()
     with mock.patch("cabinetry.visualize.utils._save_and_close") as mock_close_safe:
         with pytest.warns() as warn_record:
-            fig = fig = plot_model.data_mc(
+            fig = plot_model.data_mc(
                 histo_dict_list,
                 total_model_unc_log,
                 bin_edges_log,
                 label="",
+                colors={"Background": "blue", "Signal": "red"},
                 close_figure=True,
             )
             assert mock_close_safe.call_args_list == [((fig, None, True), {})]
+            # custom colors propagated to histogram
+            assert (
+                fig.axes[0].containers[0].patches[0].get_facecolor()
+                == mpl.colors.to_rgba_array("blue")
+            ).all()
+            assert (
+                fig.axes[0].containers[1].patches[0].get_facecolor()
+                == mpl.colors.to_rgba_array("red")
+            ).all()
 
     assert "predicted yield is zero in 1 bin(s), excluded from ratio plot" in [
         rec.message for rec in caplog.records
