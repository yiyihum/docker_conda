diff --git a/boule/tests/test_ellipsoid.py b/boule/tests/test_ellipsoid.py
index bc74dac..cf833f9 100644
--- a/boule/tests/test_ellipsoid.py
+++ b/boule/tests/test_ellipsoid.py
@@ -248,7 +248,10 @@ def test_normal_gravity_against_somigliana(ellipsoid):
     Check if normal gravity on the surface satisfies Somigliana equation
     """
     latitude = np.linspace(-90, 90, 181)
-    npt.assert_allclose(
-        ellipsoid.normal_gravity(latitude, height=0),
-        normal_gravity_surface(latitude, ellipsoid),
-    )
+    # Somigliana equation applies only to ellipsoids that are their own
+    # equipotential gravity surface. Spheres (with zero flattening) aren't.
+    if ellipsoid.flattening != 0:
+        npt.assert_allclose(
+            ellipsoid.normal_gravity(latitude, height=0),
+            normal_gravity_surface(latitude, ellipsoid),
+        )
diff --git a/boule/tests/test_sphere.py b/boule/tests/test_sphere.py
index cb7676e..17f0c1a 100644
--- a/boule/tests/test_sphere.py
+++ b/boule/tests/test_sphere.py
@@ -13,7 +13,10 @@ from .. import Sphere
 def sphere():
     "A spherical ellipsoid"
     ellipsoid = Sphere(
-        name="unit_sphere", radius=1.0, geocentric_grav_const=2.0, angular_velocity=1.3,
+        name="unit_sphere",
+        radius=1.0,
+        geocentric_grav_const=2.0,
+        angular_velocity=1.3,
     )
     return ellipsoid
 
@@ -141,22 +144,29 @@ def test_normal_gravity_only_rotation():
     """
     radius = 1
     omega = 2
+    heights = [1, 100, 1000]
     sphere = Sphere(
         name="sphere", radius=radius, geocentric_grav_const=0, angular_velocity=omega
     )
     # Check normal gravity on the equator
-    for height in [1, 2, 3, 4]:
-        expected_value = -1e5 * (omega ** 2) * (radius + height)
+    # Expected value is positive because normal gravity is the norm of the
+    # vector.
+    for height in heights:
+        expected_value = 1e5 * (omega ** 2) * (radius + height)
         npt.assert_allclose(
-            expected_value, sphere.normal_gravity(latitude=0, height=height),
+            expected_value,
+            sphere.normal_gravity(latitude=0, height=height),
         )
     # Check normal gravity on the poles (must be equal to zero)
-    for height in [1, 2, 3, 4]:
+    for height in heights:
         assert sphere.normal_gravity(latitude=90, height=height) < 1e-15
         assert sphere.normal_gravity(latitude=-90, height=height) < 1e-15
     # Check normal gravity at 45 degrees latitude
-    for height in [1, 2, 3, 4]:
-        expected_value = -1e5 * (omega ** 2) * (radius + height) * np.sqrt(2) / 2
+    # Expected value is positive because normal gravity is the norm of the
+    # vector.
+    for height in heights:
+        expected_value = 1e5 * (omega ** 2) * (radius + height) * np.sqrt(2) / 2
         npt.assert_allclose(
-            expected_value, sphere.normal_gravity(latitude=45, height=height),
+            expected_value,
+            sphere.normal_gravity(latitude=45, height=height),
         )
