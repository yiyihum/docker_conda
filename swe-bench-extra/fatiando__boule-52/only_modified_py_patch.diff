diff --git a/boule/sphere.py b/boule/sphere.py
index c099e62..166c15f 100644
--- a/boule/sphere.py
+++ b/boule/sphere.py
@@ -12,11 +12,11 @@ from . import Ellipsoid
 @attr.s(frozen=True)
 class Sphere(Ellipsoid):
     """
-    Reference spherical ellipsoid
+    Reference sphere (zero flattening ellipsoids)
 
-    Represents ellipsoids with zero flattening (spheres). Inherits methods and
-    properties of the :class:`boule.Ellipsoid`, guaranteeing no singularities
-    due to zero flattening (and thus zero eccentricity).
+    Inherits methods and properties of the :class:`boule.Ellipsoid` while
+    guaranteeing no singularities due to zero flattening (and thus zero
+    eccentricity) in gravity calculations.
 
     All parameters are in SI units.
 
@@ -56,6 +56,13 @@ class Sphere(Ellipsoid):
     1.00
     >>> print("{:.2f}".format(sphere.mean_radius))
     1.00
+    >>> print(sphere.normal_gravity(latitude=0, height=1))
+    25000.0
+    >>> print(sphere.normal_gravity(latitude=90, height=1))
+    25000.0
+
+    The flattening and eccentricities will all be zero:
+
     >>> print("{:.2f}".format(sphere.flattening))
     0.00
     >>> print("{:.2f}".format(sphere.linear_eccentricity))
@@ -64,10 +71,7 @@ class Sphere(Ellipsoid):
     0.00
     >>> print("{:.2f}".format(sphere.second_eccentricity))
     0.00
-    >>> print(sphere.normal_gravity(latitude=0, height=1))
-    25000.0
-    >>> print(sphere.normal_gravity(latitude=90, height=1))
-    25000.0
+
     """
 
     name = attr.ib()
@@ -88,19 +92,39 @@ class Sphere(Ellipsoid):
         return self.radius
 
     def normal_gravity(self, latitude, height):
-        """
+        r"""
         Calculate normal gravity at any latitude and height
 
         Computes the magnitude of the gradient of the gravity potential
         (gravitational + centrifugal) generated by the sphere at the given
-        latitude and height.
+        latitude :math:`\theta` and height :math:`h`:
+
+        .. math::
+
+            \gamma(\theta, h) =
+            \sqrt{\left( \frac{GM}{(R + h)^2} \right)^2
+            + \left(\omega^2 (R + h) - 2\frac{GM}{(R + h)^2} \right)
+            \omega^2 (R + h) \cos^2 \theta}
+
+        in which :math:`R` is the sphere radius, :math:`G` is the gravitational
+        constant, :math:`M` is the mass of the sphere, and :math:`\omega` is
+        the angular velocity.
+
+        .. note::
+
+            A sphere under rotation is not in hydrostatic equilibrium.
+            Therefore, it is not it's own equipotential gravity surface (as is
+            the case for the ellipsoid) and the normal gravity vector is not
+            normal to the surface of the sphere.
 
         Parameters
         ----------
         latitude : float or array
-            The latitude where the normal gravity will be computed (in degrees).
+            The latitude where the normal gravity will be computed (in
+            degrees). For a reference sphere there is no difference between
+            geodetic and spherical latitudes.
         height : float or array
-            The height (above the sphere) of computation point (in meters).
+            The height (above the sphere) of the computation point (in meters).
 
         Returns
         -------
@@ -110,24 +134,17 @@ class Sphere(Ellipsoid):
         References
         ----------
         [Heiskanen-Moritz]_
-        """
-        return self._gravity_sphere(height) + self._centrifugal_force(latitude, height)
 
-    def _gravity_sphere(self, height):
-        """
-        Calculate the gravity generated by a solid sphere (mGal)
-        """
-        return 1e5 * self.geocentric_grav_const / (self.radius + height) ** 2
-
-    def _centrifugal_force(self, latitude, height):
-        """
-        Calculate the centrifugal force due to the rotation of the sphere (mGal)
         """
-        return 1e5 * (
-            (-1)
+        radial_distance = self.radius + height
+        gravity_acceleration = self.geocentric_grav_const / (radial_distance) ** 2
+        return 1e5 * np.sqrt(
+            gravity_acceleration ** 2
+            + (self.angular_velocity ** 2 * radial_distance - 2 * gravity_acceleration)
             * self.angular_velocity ** 2
-            * (self.radius + height)
-            * np.cos(np.radians(latitude))
+            * radial_distance
+            # replace cos^2 with (1 - sin^2) for more accurate results on the pole
+            * (1 - np.sin(np.radians(latitude)) ** 2)
         )
 
     @property

