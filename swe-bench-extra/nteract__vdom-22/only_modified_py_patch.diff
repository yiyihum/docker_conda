diff --git a/vdom/core.py b/vdom/core.py
index 23bb4e1..448fe7d 100644
--- a/vdom/core.py
+++ b/vdom/core.py
@@ -17,9 +17,11 @@ def toJSON(el, schema=None):
     If you wish to validate the JSON, pass in a schema via the schema keyword argument.
     If a schema is provided, this raises a ValidationError if JSON does not match the schema.
     """
+    if(type(el) is str):
+        return el
     if(type(el) is list):
-        json_el = list(map(toJSON, el))
-    if(type(el) is dict):
+        return list(map(toJSON, el))
+    elif(type(el) is dict):
         assert 'tagName' in el
         json_el = el.copy()
         if 'attributes' not in el:
@@ -45,7 +47,20 @@ def toJSON(el, schema=None):
 
 
 class VDOM():
-    """A basic virtual DOM class"""
+    """A basic virtual DOM class which allows you to write literal VDOM spec
+    
+    >>> VDOM({ 'tagName': 'h1', 'children': 'Hey', 'attributes': {}})
+    
+    It's probably better to use `vdom.h` or the helper functions:
+    
+    >>> from vdom import h
+    >>> h('h1', 'Hey')
+    <h1 />
+    
+    >>> from vdom.helpers import h1
+    >>> h1('Hey')
+    
+    """
     def __init__(self, obj):
         self.obj = obj
 
@@ -74,8 +89,13 @@ def _flatten_children(*children, **kwargs):
     # children as keyword argument takes precedence
     if('children' in kwargs):
         children = kwargs['children']
-    elif children is not None and len(children) > 0:
-        if isinstance(children[0], list):
+    elif children is not None:
+        if len(children) == 0:
+            children = None
+        elif len(children) == 1:
+            # Flatten by default
+            children = children[0]
+        elif isinstance(children[0], list):
             # Only one level of flattening, just to match the old API
             children = children[0]
         else:

