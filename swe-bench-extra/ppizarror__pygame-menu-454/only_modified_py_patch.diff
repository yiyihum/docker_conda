diff --git a/pygame_menu/font.py b/pygame_menu/font.py
index 5378659a..2fe87dff 100644
--- a/pygame_menu/font.py
+++ b/pygame_menu/font.py
@@ -39,7 +39,7 @@ __all__ = [
 ]
 
 from pathlib import Path
-from typing import Union, Optional, Any
+from typing import Union, Optional, Any, Dict, Tuple
 import os.path as path
 
 import pygame.font as __font
@@ -71,12 +71,12 @@ FONT_EXAMPLES = (FONT_8BIT, FONT_BEBAS, FONT_COMIC_NEUE, FONT_DIGITAL, FONT_FRAN
                  FONT_PT_SERIF, FONT_FIRACODE, FONT_FIRACODE_BOLD, FONT_FIRACODE_ITALIC,
                  FONT_FIRACODE_BOLD_ITALIC)
 
-# Stores font cache
-_cache = {}
-
 FontType = Union[str, __font.Font, Path]
 FontInstance = (str, __font.Font, Path)
 
+# Stores font cache
+_cache: Dict[Tuple[FontType, int], '__font.Font'] = {}
+
 
 def assert_font(font: Any) -> None:
     """
diff --git a/pygame_menu/menu.py b/pygame_menu/menu.py
index c40a9dad..2ec416d0 100644
--- a/pygame_menu/menu.py
+++ b/pygame_menu/menu.py
@@ -603,21 +603,29 @@ class Menu(Base):
         width: NumberType,
         height: NumberType,
         screen_dimension: Optional[Vector2IntType] = None,
-        position: Optional[Union[Vector2NumberType, Tuple[NumberType, NumberType, bool]]] = None
+        position: Optional[Union[Vector2NumberType, Tuple[NumberType, NumberType, bool]]] = None,
+        recursive: bool = False
     ) -> 'Menu':
         """
-        Resize the menu to another width/height
+        Resizes the menu to another width/height.
 
         :param width: Menu width (px)
         :param height: Menu height (px)
         :param screen_dimension: List/Tuple representing the dimensions the Menu should reference for sizing/positioning (width, height), if ``None`` pygame is queried for the display mode. This value defines the ``window_size`` of the Menu
         :param position: Position on x-axis and y-axis. If the value is only 2 elements, the position is relative to the window width (thus, values must be 0-100%); else, the third element defines if the position is relative or not. If ``(x, y, False)`` the values of ``(x, y)`` are in px. If ``None`` use the default from the menu constructor
+        :param recursive: If true, resize all submenus in a recursive fashion
         :return: Self reference
         """
         assert isinstance(width, NumberInstance)
         assert isinstance(height, NumberInstance)
         assert width > 0 and height > 0, \
             'menu width and height must be greater than zero'
+        assert isinstance(recursive, bool)
+
+        # Resize recursively
+        if recursive:
+            for menu in self.get_submenus(True):
+                menu.resize(width, height, screen_dimension, position)
 
         # Convert to int
         width, height = int(width), int(height)
diff --git a/pygame_menu/version.py b/pygame_menu/version.py
index b9b93a75..6103afff 100644
--- a/pygame_menu/version.py
+++ b/pygame_menu/version.py
@@ -34,6 +34,6 @@ class Version(tuple):
     patch = property(lambda self: self[2])
 
 
-vernum = Version(4, 3, 8)
+vernum = Version(4, 3, 9)
 ver = str(vernum)
 rev = ''
diff --git a/pygame_menu/widgets/widget/table.py b/pygame_menu/widgets/widget/table.py
index 976e04e1..cb751e15 100644
--- a/pygame_menu/widgets/widget/table.py
+++ b/pygame_menu/widgets/widget/table.py
@@ -265,9 +265,9 @@ class Table(Frame):
 
         # If cells is a previous table row
         if isinstance(cells, Frame) and cells.has_attribute('is_row'):
-            row_cells = list(cells.get_widgets(unpack_subframes=False))
+            _row_cells = list(cells.get_widgets(unpack_subframes=False))
             cells.clear()
-            cells = row_cells
+            cells = _row_cells
         if isinstance(cells, Widget):
             cells = [cells]
 

