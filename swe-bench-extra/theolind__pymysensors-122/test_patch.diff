diff --git a/tests/test_message.py b/tests/test_message.py
index bdd7dda..aac8a1b 100644
--- a/tests/test_message.py
+++ b/tests/test_message.py
@@ -162,6 +162,19 @@ INTERNAL_FIXTURES_20.update({
     'I_REGISTRATION_REQUEST': '2.0.0',
     'I_REGISTRATION_RESPONSE': '1',
     'I_DEBUG': 'test debug',
+})
+
+
+INTERNAL_FIXTURES_21 = dict(INTERNAL_FIXTURES_20)
+INTERNAL_FIXTURES_21.update({
+    'I_FIND_PARENT_REQUEST': '',
+    'I_HEARTBEAT_REQUEST': '',
+    'I_DISCOVER_REQUEST': '',
+})
+
+
+INTERNAL_FIXTURES_22 = dict(INTERNAL_FIXTURES_21)
+INTERNAL_FIXTURES_22.update({
     'I_SIGNAL_REPORT_REQUEST': 'test',
     'I_SIGNAL_REPORT_REVERSE': '123',
     'I_SIGNAL_REPORT_RESPONSE': '123',
@@ -274,7 +287,8 @@ def test_validate_internal():
     """Test Internal messages."""
     versions = [
         ('1.4', INTERNAL_FIXTURES_14), ('1.5', INTERNAL_FIXTURES_15),
-        ('2.0', INTERNAL_FIXTURES_20)]
+        ('2.0', INTERNAL_FIXTURES_20), ('2.1', INTERNAL_FIXTURES_21),
+        ('2.2', INTERNAL_FIXTURES_22)]
     for protocol_version, fixture in versions:
         gateway = get_gateway(protocol_version)
         const = get_const(protocol_version)
@@ -287,7 +301,15 @@ def test_validate_internal():
                 return_value = None
             sub_type = const.Internal[name]
             msg = Message('1;255;3;0;{};{}\n'.format(sub_type, _payload))
-            valid = msg.validate(protocol_version)
+            try:
+                valid = msg.validate(protocol_version)
+            except vol.MultipleInvalid:
+                print('fixture version: ', protocol_version)
+                print('gateway version: ', gateway.protocol_version)
+                print('name: ', name)
+                print('subtype: ', sub_type)
+                print('payload: ', _payload)
+                raise
             assert valid == {
                 'node_id': 1, 'child_id': 255, 'type': 3, 'ack': 0,
                 'sub_type': sub_type, 'payload': _payload}
diff --git a/tests/test_mysensors.py b/tests/test_mysensors.py
index 56879bd..e9eb14b 100644
--- a/tests/test_mysensors.py
+++ b/tests/test_mysensors.py
@@ -668,8 +668,8 @@ class TestGateway20(TestGateway):
         ret = self.gateway.handle_queue()
         self.assertEqual(ret, '1;255;3;0;19;\n')
 
-    def test_heartbeat(self):
-        """Test heartbeat message."""
+    def test_smartsleep(self):
+        """Test smartsleep feature."""
         sensor = self._add_sensor(1)
         sensor.children[0] = ChildSensor(
             0, self.gateway.const.Presentation.S_LIGHT_LEVEL)
@@ -708,8 +708,8 @@ class TestGateway20(TestGateway):
         # nothing has changed
         self.assertEqual(ret, None)
 
-    def test_heartbeat_from_unknown(self):
-        """Test heartbeat message from unknown node."""
+    def test_smartsleep_from_unknown(self):
+        """Test smartsleep message from unknown node."""
         self.gateway.logic('1;255;3;0;22;\n')
         ret = self.gateway.handle_queue()
         self.assertEqual(ret, '1;255;3;0;19;\n')
@@ -774,6 +774,81 @@ class TestGateway20(TestGateway):
             '10.0,10.0,10.0')
 
 
+class TestGateway21(TestGateway20):
+    """Use protocol_version 2.1."""
+
+    def setUp(self):
+        """Set up gateway."""
+        self.gateway = Gateway(protocol_version='2.1')
+
+
+class TestGateway22(TestGateway21):
+    """Use protocol_version 2.2."""
+
+    def setUp(self):
+        """Set up gateway."""
+        self.gateway = Gateway(protocol_version='2.2')
+
+    def test_smartsleep(self):
+        """Test smartsleep feature."""
+        sensor = self._add_sensor(1)
+        sensor.children[0] = ChildSensor(
+            0, self.gateway.const.Presentation.S_LIGHT_LEVEL)
+        self.gateway.logic('1;0;1;0;23;43\n')
+        ret = self.gateway.handle_queue()
+        self.assertEqual(ret, None)
+        # pre sleep message
+        self.gateway.logic('1;255;3;0;32;500\n')
+        ret = self.gateway.handle_queue()
+        # nothing has changed
+        self.assertEqual(ret, None)
+        # change from controller side
+        self.gateway.set_child_value(
+            1, 0, self.gateway.const.SetReq.V_LIGHT_LEVEL, '57')
+        ret = self.gateway.handle_queue()
+        # no pre sleep message
+        self.assertEqual(ret, None)
+        # pre sleep message comes in
+        self.gateway.logic('1;255;3;0;32;500\n')
+        ret = self.gateway.handle_queue()
+        # instance responds with new values
+        self.assertEqual(ret, '1;0;1;0;23;57\n')
+        # request from node
+        self.gateway.logic('1;0;2;0;23;\n')
+        ret = self.gateway.handle_queue()
+        # no pre sleep message
+        self.assertEqual(ret, None)
+        # pre sleep message
+        self.gateway.logic('1;255;3;0;32;500\n')
+        ret = self.gateway.handle_queue()
+        # instance responds to request with current value
+        self.assertEqual(ret, '1;0;1;0;23;57\n')
+        # pre sleep message
+        self.gateway.logic('1;255;3;0;32;500\n')
+        ret = self.gateway.handle_queue()
+        # nothing has changed
+        self.assertEqual(ret, None)
+
+    def test_smartsleep_from_unknown(self):
+        """Test smartsleep message from unknown node."""
+        self.gateway.logic('1;255;3;0;32;500\n')
+        ret = self.gateway.handle_queue()
+        self.assertEqual(ret, '1;255;3;0;19;\n')
+
+    def test_set_with_new_state(self):
+        """Test set message with populated new_state."""
+        sensor = self._add_sensor(1)
+        sensor.children[0] = ChildSensor(
+            0, self.gateway.const.Presentation.S_LIGHT_LEVEL)
+        self.gateway.logic('1;0;1;0;23;43\n')
+        self.gateway.logic('1;255;3;0;32;500\n')
+        self.gateway.logic('1;0;1;0;23;57\n')
+        self.assertEqual(
+            sensor.children[0].values[self.gateway.const.SetReq.V_LIGHT_LEVEL],
+            sensor.new_state[0].values[
+                self.gateway.const.SetReq.V_LIGHT_LEVEL])
+
+
 def test_gateway_bad_protocol():
     """Test initializing gateway with a bad protocol_version."""
     gateway = Gateway(protocol_version=None)
