diff --git a/mysensors/__init__.py b/mysensors/__init__.py
index 520165a..ef9dec3 100644
--- a/mysensors/__init__.py
+++ b/mysensors/__init__.py
@@ -31,6 +31,10 @@ def get_const(protocol_version):
     version = protocol_version
     if parse_ver('1.5') <= parse_ver(version) < parse_ver('2.0'):
         path = 'mysensors.const_15'
+    elif parse_ver(version) >= parse_ver('2.2'):
+        path = 'mysensors.const_22'
+    elif parse_ver(version) >= parse_ver('2.1'):
+        path = 'mysensors.const_21'
     elif parse_ver(version) >= parse_ver('2.0'):
         path = 'mysensors.const_20'
     else:
@@ -127,8 +131,8 @@ class Gateway(object):
                 type=self.const.MessageType.set, payload=value)
         return None
 
-    def _handle_heartbeat(self, msg):
-        """Process a heartbeat message."""
+    def _handle_smartsleep(self, msg):
+        """Process a message before going back to smartsleep."""
         if not self.is_sensor(msg.node_id):
             return
         while self.sensors[msg.node_id].queue:
@@ -411,8 +415,8 @@ class Gateway(object):
         thread has sent all previously queued commands to the FIFO queue.
         If the sensor attribute new_state returns True, the command will not be
         put on the queue, but the internal sensor state will be updated. When a
-        heartbeat response is received, the internal state will be pushed to
-        the sensor, via _handle_heartbeat method.
+        smartsleep message is received, the internal state will be pushed to
+        the sensor, via _handle_smartsleep method.
         """
         if not self.is_sensor(sensor_id, child_id):
             return
diff --git a/mysensors/const_20.py b/mysensors/const_20.py
index 98ff4fd..a27b6cd 100644
--- a/mysensors/const_20.py
+++ b/mysensors/const_20.py
@@ -1,4 +1,4 @@
-"""MySensors constants for version 1.5 of MySensors."""
+"""MySensors constants for version 2.0 of MySensors."""
 from enum import IntEnum
 
 import voluptuous as vol
@@ -246,11 +246,6 @@ class Internal(IntEnum):
     I_REGISTRATION_REQUEST = 26  # Register request to GW
     I_REGISTRATION_RESPONSE = 27  # Register response from GW
     I_DEBUG = 28  # Debug message
-    I_SIGNAL_REPORT_REQUEST = 29  # Device signal strength request
-    I_SIGNAL_REPORT_REVERSE = 30  # Internal
-    I_SIGNAL_REPORT_RESPONSE = 31  # Device signal strength response (RSSI)
-    I_PRE_SLEEP_NOTIFICATION = 32  # Message sent before node is going to sleep
-    I_POST_SLEEP_NOTIFICATION = 33  # Message sent after node woke up
 
 
 class Stream(IntEnum):
@@ -344,15 +339,6 @@ VALID_INTERNAL.update({
     Internal.I_REGISTRATION_REQUEST: str,
     Internal.I_REGISTRATION_RESPONSE: str,
     Internal.I_DEBUG: str,
-    Internal.I_SIGNAL_REPORT_REQUEST: str,
-    Internal.I_SIGNAL_REPORT_REVERSE: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
-    Internal.I_SIGNAL_REPORT_RESPONSE: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
-    Internal.I_PRE_SLEEP_NOTIFICATION: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
-    Internal.I_POST_SLEEP_NOTIFICATION: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
 })
 
 VALID_PAYLOADS = {
@@ -370,7 +356,7 @@ HANDLE_INTERNAL.update({
             'node_id': 255, 'ack': 0, 'sub_type': Internal.I_DISCOVER,
             'payload': ''}},
     Internal.I_HEARTBEAT_RESPONSE: {
-        'fun': '_handle_heartbeat'},
+        'fun': '_handle_smartsleep'},
     Internal.I_DISCOVER_RESPONSE: {
         'is_sensor': True},
 })
diff --git a/mysensors/const_21.py b/mysensors/const_21.py
new file mode 100644
index 0000000..7e08924
--- /dev/null
+++ b/mysensors/const_21.py
@@ -0,0 +1,107 @@
+"""MySensors constants for version 2.1 of MySensors."""
+from enum import IntEnum
+
+# pylint: disable=unused-import
+from mysensors.const_20 import (HANDLE_INTERNAL, MAX_NODE_ID,  # noqa: F401
+                                VALID_INTERNAL, VALID_PRESENTATION,
+                                VALID_SETREQ, VALID_STREAM, VALID_TYPES,
+                                MessageType, Presentation, SetReq, Stream)
+
+
+class Internal(IntEnum):
+    """MySensors internal sub-types."""
+
+    # pylint: disable=too-few-public-methods
+    # Use this to report the battery level (in percent 0-100).
+    I_BATTERY_LEVEL = 0
+    # Sensors can request the current time from the Controller using this
+    # message. The time will be reported as the seconds since 1970
+    I_TIME = 1
+    # Sensors report their library version at startup using this message type
+    I_VERSION = 2
+    # Use this to request a unique node id from the controller.
+    I_ID_REQUEST = 3
+    # Id response back to sensor. Payload contains sensor id.
+    I_ID_RESPONSE = 4
+    # Start/stop inclusion mode of the Controller (1=start, 0=stop).
+    I_INCLUSION_MODE = 5
+    # Config request from node. Reply with (M)etric or (I)mperal back to sensor
+    I_CONFIG = 6
+    # When a sensor starts up, it broadcast a search request to all neighbor
+    # nodes. They reply with a I_FIND_PARENT_RESPONSE.
+    I_FIND_PARENT_REQUEST = 7
+    I_FIND_PARENT = 7  # alias from version 2.0
+    # Reply message type to I_FIND_PARENT request.
+    I_FIND_PARENT_RESPONSE = 8
+    # Sent by the gateway to the Controller to trace-log a message
+    I_LOG_MESSAGE = 9
+    # A message that can be used to transfer child sensors
+    # (from EEPROM routing table) of a repeating node.
+    I_CHILDREN = 10
+    # Optional sketch name that can be used to identify sensor in the
+    # Controller GUI
+    I_SKETCH_NAME = 11
+    # Optional sketch version that can be reported to keep track of the version
+    # of sensor in the Controller GUI.
+    I_SKETCH_VERSION = 12
+    # Used by OTA firmware updates. Request for node to reboot.
+    I_REBOOT = 13
+    # Send by gateway to controller when startup is complete
+    I_GATEWAY_READY = 14
+    # Provides signing related preferences (first byte is preference version).
+    I_SIGNING_PRESENTATION = 15
+    I_REQUEST_SIGNING = 15  # alias from version 1.5
+    # Request for a nonce.
+    I_NONCE_REQUEST = 16
+    I_GET_NONCE = 16  # alias from version 1.5
+    # Payload is nonce data.
+    I_NONCE_RESPONSE = 17
+    I_GET_NONCE_RESPONSE = 17  # alias from version 1.5
+    I_HEARTBEAT_REQUEST = 18
+    I_HEARTBEAT = 18  # alias from version 2.0
+    I_PRESENTATION = 19
+    I_DISCOVER_REQUEST = 20
+    I_DISCOVER = 20  # alias from version 2.0
+    I_DISCOVER_RESPONSE = 21
+    I_HEARTBEAT_RESPONSE = 22
+    # Node is locked (reason in string-payload).
+    I_LOCKED = 23
+    I_PING = 24  # Ping sent to node, payload incremental hop counter
+    # In return to ping, sent back to sender, payload incremental hop counter
+    I_PONG = 25
+    I_REGISTRATION_REQUEST = 26  # Register request to GW
+    I_REGISTRATION_RESPONSE = 27  # Register response from GW
+    I_DEBUG = 28  # Debug message
+
+
+VALID_MESSAGE_TYPES = {
+    MessageType.presentation: list(Presentation),
+    MessageType.set: list(SetReq),
+    MessageType.req: list(SetReq),
+    MessageType.internal: list(Internal),
+    MessageType.stream: list(Stream),
+}
+
+
+VALID_INTERNAL = dict(VALID_INTERNAL)
+VALID_INTERNAL.update({
+    Internal.I_FIND_PARENT_REQUEST: '',
+    Internal.I_HEARTBEAT_REQUEST: '',
+    Internal.I_DISCOVER_REQUEST: '',
+})
+
+VALID_PAYLOADS = {
+    MessageType.presentation: VALID_PRESENTATION,
+    MessageType.set: VALID_SETREQ,
+    MessageType.req: {member: '' for member in list(SetReq)},
+    MessageType.internal: VALID_INTERNAL,
+    MessageType.stream: VALID_STREAM,
+}
+
+HANDLE_INTERNAL = dict(HANDLE_INTERNAL)
+HANDLE_INTERNAL.update({
+    Internal.I_GATEWAY_READY: {
+        'log': 'info', 'msg': {
+            'node_id': 255, 'ack': 0, 'sub_type': Internal.I_DISCOVER_REQUEST,
+            'payload': ''}},
+})
diff --git a/mysensors/const_22.py b/mysensors/const_22.py
new file mode 100644
index 0000000..6289960
--- /dev/null
+++ b/mysensors/const_22.py
@@ -0,0 +1,119 @@
+"""MySensors constants for version 2.2 of MySensors."""
+from enum import IntEnum
+
+import voluptuous as vol
+
+# pylint: disable=unused-import
+from mysensors.const_21 import (HANDLE_INTERNAL, MAX_NODE_ID,  # noqa: F401
+                                VALID_INTERNAL, VALID_PRESENTATION,
+                                VALID_SETREQ, VALID_STREAM, VALID_TYPES,
+                                MessageType, Presentation, SetReq, Stream)
+
+
+class Internal(IntEnum):
+    """MySensors internal sub-types."""
+
+    # pylint: disable=too-few-public-methods
+    # Use this to report the battery level (in percent 0-100).
+    I_BATTERY_LEVEL = 0
+    # Sensors can request the current time from the Controller using this
+    # message. The time will be reported as the seconds since 1970
+    I_TIME = 1
+    # Sensors report their library version at startup using this message type
+    I_VERSION = 2
+    # Use this to request a unique node id from the controller.
+    I_ID_REQUEST = 3
+    # Id response back to sensor. Payload contains sensor id.
+    I_ID_RESPONSE = 4
+    # Start/stop inclusion mode of the Controller (1=start, 0=stop).
+    I_INCLUSION_MODE = 5
+    # Config request from node. Reply with (M)etric or (I)mperal back to sensor
+    I_CONFIG = 6
+    # When a sensor starts up, it broadcast a search request to all neighbor
+    # nodes. They reply with a I_FIND_PARENT_RESPONSE.
+    I_FIND_PARENT_REQUEST = 7
+    I_FIND_PARENT = 7  # alias from version 2.0
+    # Reply message type to I_FIND_PARENT request.
+    I_FIND_PARENT_RESPONSE = 8
+    # Sent by the gateway to the Controller to trace-log a message
+    I_LOG_MESSAGE = 9
+    # A message that can be used to transfer child sensors
+    # (from EEPROM routing table) of a repeating node.
+    I_CHILDREN = 10
+    # Optional sketch name that can be used to identify sensor in the
+    # Controller GUI
+    I_SKETCH_NAME = 11
+    # Optional sketch version that can be reported to keep track of the version
+    # of sensor in the Controller GUI.
+    I_SKETCH_VERSION = 12
+    # Used by OTA firmware updates. Request for node to reboot.
+    I_REBOOT = 13
+    # Send by gateway to controller when startup is complete
+    I_GATEWAY_READY = 14
+    # Provides signing related preferences (first byte is preference version).
+    I_SIGNING_PRESENTATION = 15
+    I_REQUEST_SIGNING = 15  # alias from version 1.5
+    # Request for a nonce.
+    I_NONCE_REQUEST = 16
+    I_GET_NONCE = 16  # alias from version 1.5
+    # Payload is nonce data.
+    I_NONCE_RESPONSE = 17
+    I_GET_NONCE_RESPONSE = 17  # alias from version 1.5
+    I_HEARTBEAT_REQUEST = 18
+    I_HEARTBEAT = 18  # alias from version 2.0
+    I_PRESENTATION = 19
+    I_DISCOVER_REQUEST = 20
+    I_DISCOVER = 20  # alias from version 2.0
+    I_DISCOVER_RESPONSE = 21
+    I_HEARTBEAT_RESPONSE = 22
+    # Node is locked (reason in string-payload).
+    I_LOCKED = 23
+    I_PING = 24  # Ping sent to node, payload incremental hop counter
+    # In return to ping, sent back to sender, payload incremental hop counter
+    I_PONG = 25
+    I_REGISTRATION_REQUEST = 26  # Register request to GW
+    I_REGISTRATION_RESPONSE = 27  # Register response from GW
+    I_DEBUG = 28  # Debug message
+    I_SIGNAL_REPORT_REQUEST = 29  # Device signal strength request
+    I_SIGNAL_REPORT_REVERSE = 30  # Internal
+    I_SIGNAL_REPORT_RESPONSE = 31  # Device signal strength response (RSSI)
+    I_PRE_SLEEP_NOTIFICATION = 32  # Message sent before node is going to sleep
+    I_POST_SLEEP_NOTIFICATION = 33  # Message sent after node woke up
+
+
+VALID_MESSAGE_TYPES = {
+    MessageType.presentation: list(Presentation),
+    MessageType.set: list(SetReq),
+    MessageType.req: list(SetReq),
+    MessageType.internal: list(Internal),
+    MessageType.stream: list(Stream),
+}
+
+
+VALID_INTERNAL = dict(VALID_INTERNAL)
+VALID_INTERNAL.update({
+    Internal.I_SIGNAL_REPORT_REQUEST: str,
+    Internal.I_SIGNAL_REPORT_REVERSE: vol.All(
+        vol.Coerce(int), vol.Coerce(str)),
+    Internal.I_SIGNAL_REPORT_RESPONSE: vol.All(
+        vol.Coerce(int), vol.Coerce(str)),
+    Internal.I_PRE_SLEEP_NOTIFICATION: vol.All(
+        vol.Coerce(int), vol.Coerce(str)),
+    Internal.I_POST_SLEEP_NOTIFICATION: vol.All(
+        vol.Coerce(int), vol.Coerce(str)),
+})
+
+VALID_PAYLOADS = {
+    MessageType.presentation: VALID_PRESENTATION,
+    MessageType.set: VALID_SETREQ,
+    MessageType.req: {member: '' for member in list(SetReq)},
+    MessageType.internal: VALID_INTERNAL,
+    MessageType.stream: VALID_STREAM,
+}
+
+HANDLE_INTERNAL = dict(HANDLE_INTERNAL)
+HANDLE_INTERNAL.pop(Internal.I_HEARTBEAT_RESPONSE, None)
+HANDLE_INTERNAL.update({
+    Internal.I_PRE_SLEEP_NOTIFICATION: {
+        'fun': '_handle_smartsleep'},
+})
