diff --git a/mysensors/__init__.py b/mysensors/__init__.py
index 520165a..ef9dec3 100644
--- a/mysensors/__init__.py
+++ b/mysensors/__init__.py
@@ -31,6 +31,10 @@ def get_const(protocol_version):
     version = protocol_version
     if parse_ver('1.5') <= parse_ver(version) < parse_ver('2.0'):
         path = 'mysensors.const_15'
+    elif parse_ver(version) >= parse_ver('2.2'):
+        path = 'mysensors.const_22'
+    elif parse_ver(version) >= parse_ver('2.1'):
+        path = 'mysensors.const_21'
     elif parse_ver(version) >= parse_ver('2.0'):
         path = 'mysensors.const_20'
     else:
@@ -127,8 +131,8 @@ class Gateway(object):
                 type=self.const.MessageType.set, payload=value)
         return None
 
-    def _handle_heartbeat(self, msg):
-        """Process a heartbeat message."""
+    def _handle_smartsleep(self, msg):
+        """Process a message before going back to smartsleep."""
         if not self.is_sensor(msg.node_id):
             return
         while self.sensors[msg.node_id].queue:
@@ -411,8 +415,8 @@ class Gateway(object):
         thread has sent all previously queued commands to the FIFO queue.
         If the sensor attribute new_state returns True, the command will not be
         put on the queue, but the internal sensor state will be updated. When a
-        heartbeat response is received, the internal state will be pushed to
-        the sensor, via _handle_heartbeat method.
+        smartsleep message is received, the internal state will be pushed to
+        the sensor, via _handle_smartsleep method.
         """
         if not self.is_sensor(sensor_id, child_id):
             return
diff --git a/mysensors/const_20.py b/mysensors/const_20.py
index 98ff4fd..a27b6cd 100644
--- a/mysensors/const_20.py
+++ b/mysensors/const_20.py
@@ -1,4 +1,4 @@
-"""MySensors constants for version 1.5 of MySensors."""
+"""MySensors constants for version 2.0 of MySensors."""
 from enum import IntEnum
 
 import voluptuous as vol
@@ -246,11 +246,6 @@ class Internal(IntEnum):
     I_REGISTRATION_REQUEST = 26  # Register request to GW
     I_REGISTRATION_RESPONSE = 27  # Register response from GW
     I_DEBUG = 28  # Debug message
-    I_SIGNAL_REPORT_REQUEST = 29  # Device signal strength request
-    I_SIGNAL_REPORT_REVERSE = 30  # Internal
-    I_SIGNAL_REPORT_RESPONSE = 31  # Device signal strength response (RSSI)
-    I_PRE_SLEEP_NOTIFICATION = 32  # Message sent before node is going to sleep
-    I_POST_SLEEP_NOTIFICATION = 33  # Message sent after node woke up
 
 
 class Stream(IntEnum):
@@ -344,15 +339,6 @@ VALID_INTERNAL.update({
     Internal.I_REGISTRATION_REQUEST: str,
     Internal.I_REGISTRATION_RESPONSE: str,
     Internal.I_DEBUG: str,
-    Internal.I_SIGNAL_REPORT_REQUEST: str,
-    Internal.I_SIGNAL_REPORT_REVERSE: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
-    Internal.I_SIGNAL_REPORT_RESPONSE: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
-    Internal.I_PRE_SLEEP_NOTIFICATION: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
-    Internal.I_POST_SLEEP_NOTIFICATION: vol.All(
-        vol.Coerce(int), vol.Coerce(str)),
 })
 
 VALID_PAYLOADS = {
@@ -370,7 +356,7 @@ HANDLE_INTERNAL.update({
             'node_id': 255, 'ack': 0, 'sub_type': Internal.I_DISCOVER,
             'payload': ''}},
     Internal.I_HEARTBEAT_RESPONSE: {
-        'fun': '_handle_heartbeat'},
+        'fun': '_handle_smartsleep'},
     Internal.I_DISCOVER_RESPONSE: {
         'is_sensor': True},
 })
