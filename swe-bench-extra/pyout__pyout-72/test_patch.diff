diff --git a/pyout/tests/test_tabular.py b/pyout/tests/test_tabular.py
index 8a4d172..8664f0f 100644
--- a/pyout/tests/test_tabular.py
+++ b/pyout/tests/test_tabular.py
@@ -37,14 +37,36 @@ class Terminal(blessings.Terminal):
     def width(self):
         return 100
 
+    @property
+    def height(self):
+        return 20
+
+
+class TerminalNonInteractive(Terminal):
+
+    @property
+    def width(self):
+        return None
+
+    @property
+    def height(self):
+        return None
+
 
 class Tabular(TheRealTabular):
     """Test-specific subclass of pyout.Tabular.
     """
 
     def __init__(self, *args, **kwargs):
-        with patch("pyout.interface.sys.stdout.isatty", return_value=True):
-            with patch("pyout.tabular.Terminal", Terminal):
+        interactive = kwargs.pop("interactive", True)
+        if interactive:
+            term = Terminal
+        else:
+            term = TerminalNonInteractive
+
+        with patch("pyout.interface.sys.stdout.isatty",
+                   return_value=interactive):
+            with patch("pyout.tabular.Terminal", term):
                 super(Tabular, self).__init__(*args, **kwargs)
 
     @property
@@ -894,6 +916,53 @@ def test_tabular_write_callable_values_multi_return():
     assert_contains_nc(lines, "foo done /tmp/a")
 
 
+@pytest.mark.timeout(10)
+@pytest.mark.parametrize("nrows", [20, 21])
+@pytest.mark.parametrize("interactive", [True, False])
+def test_tabular_callback_to_hidden_row(nrows, interactive):
+    if sys.version_info < (3,):
+        try:
+            import jsonschema
+        except ImportError:
+            pass
+        else:
+            # Ideally we'd also check if the tests are running under
+            # coverage, but I don't know a way to do that.
+            pytest.xfail(
+                "Hangs for unknown reason in py2/coverage/jsonschema run")
+
+    delay = Delayed("OK")
+    out = Tabular(interactive=interactive,
+                  style={"status": {"aggregate": len}})
+    # Make sure we're in update mode even for interactive=False.
+    out.mode = "update"
+    with out:
+        for i in range(1, nrows + 1):
+            status = delay.run if i == 3 else "s{:02d}".format(i)
+            out(OrderedDict([("name", "foo{:02d}".format(i)),
+                             ("status", status)]))
+        delay.now = True
+
+    lines = out.stdout.splitlines()
+    # The test terminal height is 20.  The summary line takes up one
+    # line and the current line takes up another, so we have 18
+    # available rows. Row 3 goes off the screen when we have 21 rows.
+
+    if nrows > 20 and interactive:
+        # No leading escape codes because it was part of a whole repaint.
+        nexpected_plain = 1
+        nexpected_updated = 0
+    else:
+        nexpected_plain = 0
+        nexpected_updated = 1
+
+    assert len([l for l in lines if l == "foo03 OK "]) == nexpected_plain
+
+    cuu1 = unicode_cap("cuu1")
+    updated = [l for l in lines if l.startswith(cuu1) and "foo03 OK " in l]
+    assert len(updated) == nexpected_updated
+
+
 @pytest.mark.timeout(10)
 @pytest.mark.parametrize("result",
                          [{"status": "done", "path": "/tmp/a"},
