diff --git a/pelita/game.py b/pelita/game.py
index b42b52ae..1ecf0a00 100644
--- a/pelita/game.py
+++ b/pelita/game.py
@@ -13,7 +13,7 @@ from warnings import warn
 from . import layout
 from .exceptions import FatalException, NonFatalException, NoFoodWarning
 from .gamestate_filters import noiser
-from .layout import initial_positions, get_legal_moves
+from .layout import initial_positions, get_legal_positions
 from .libpelita import get_python_process, SimplePublisher
 from .network import bind_socket, setup_controller
 from .player.team import make_team
@@ -316,7 +316,7 @@ def setup_game(team_specs, *, layout_dict, max_rounds=300, layout_name="", seed=
         layout_name=None,
         team_names=[None] * 2,
         fatal_errors=[[], []],
-        errors=[[], []],
+        errors=[{}, {}],
         whowins=None,
         rnd=Random(seed),
         viewers=[],
@@ -519,6 +519,7 @@ def play_turn(game_state):
     game_state.update(update_round_counter(game_state))
 
     turn = game_state['turn']
+    round = game_state['round']
     team = turn % 2
     # request a new move from the current team
     try:
@@ -552,11 +553,9 @@ def play_turn(game_state):
         # are collected and added to team_errors
         exception_event = {
             'type': e.__class__.__name__,
-            'description': str(e),
-            'turn': game_state['turn'],
-            'round': game_state['round'],
+            'description': str(e)
         }
-        game_state['errors'][team].append(exception_event)
+        game_state['errors'][team][(round, turn)] = exception_event
         position = None
         game_print(turn, f"{type(e).__name__}: {e}")
 
@@ -624,25 +623,34 @@ def apply_move(gamestate, bot_position):
 
     # previous errors
     team_errors = gamestate["errors"][team]
-    # check is step is legal
-    legal_moves = get_legal_moves(walls, gamestate["bots"][gamestate["turn"]])
-    if bot_position not in legal_moves:
-        bad_bot_position = bot_position
-        bot_position = legal_moves[gamestate['rnd'].randint(0, len(legal_moves)-1)]
-        error_dict = {
-            "turn": turn,
-            "round": n_round,
-            "reason": 'illegal move',
-            "bot_position": bot_position
-            }
-        game_print(turn, f"Illegal move {bad_bot_position} not in {sorted(legal_moves)}. Choosing a random move instead: {bot_position}")
-        team_errors.append(error_dict)
+
+    # the allowed moves for the current bot
+    legal_positions = get_legal_positions(walls, gamestate["bots"][gamestate["turn"]])
+
+    # unless we have already made an error, check if we made a legal move
+    if not (n_round, turn) in team_errors:
+        if bot_position not in legal_positions:
+            error_dict = {
+                "reason": 'illegal move',
+                "bot_position": bot_position
+                }
+            # add the error to the teamâ€™s errors
+            game_print(turn, f"Illegal position. {bot_position} not in legal positions: {sorted(legal_positions)}.")
+            team_errors[(n_round, turn)] = error_dict
 
     # only execute move if errors not exceeded
     gamestate.update(check_gameover(gamestate))
     if gamestate['gameover']:
         return gamestate
 
+    # Now check if we must make a random move
+    if (n_round, turn) in team_errors:
+        # There was an error for this round and turn
+        # but the game is not over.
+        # We execute a random move
+        bot_position = gamestate['rnd'].choice(legal_positions)
+        game_print(turn, f"Setting a legal position at random: {bot_position}")
+
     # take step
     bots[turn] = bot_position
     _logger.info(f"Bot {turn} moves to {bot_position}.")
diff --git a/pelita/layout.py b/pelita/layout.py
index 14c96011..1ad10138 100644
--- a/pelita/layout.py
+++ b/pelita/layout.py
@@ -430,8 +430,9 @@ def initial_positions(walls):
     return [left[0], right[0], left[1], right[1]]
 
 
-def get_legal_moves(walls, bot_position):
-    """ Returns legal moves given a position.
+def get_legal_positions(walls, bot_position):
+    """ Returns all legal positions that a bot at `bot_position`
+    can go to.
 
      Parameters
     ----------
@@ -443,12 +444,12 @@ def get_legal_moves(walls, bot_position):
     Returns
     -------
     list
-        legal moves.
+        legal positions
 
     Raises
     ------
     ValueError
-        if position invalid or on wall
+        if bot_position invalid or on wall
     """
     width, height = wall_dimensions(walls)
     if not (0, 0) <= bot_position < (width, height):

