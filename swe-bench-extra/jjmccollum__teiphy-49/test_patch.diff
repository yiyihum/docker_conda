diff --git a/tests/test_collation.py b/tests/test_collation.py
index 251aab4..484be1f 100644
--- a/tests/test_collation.py
+++ b/tests/test_collation.py
@@ -248,6 +248,26 @@ class CollationOutputTestCase(unittest.TestCase):
         hennig86_symbols = empty_collation.get_hennig86_symbols()
         self.assertEqual(hennig86_symbols, [])
 
+    def test_get_phylip_symbols(self):
+        phylip_symbols = self.collation.get_phylip_symbols()
+        self.assertEqual(phylip_symbols, ["0", "1", "2", "3", "4", "5"])
+
+    def test_get_phylip_symbols_empty(self):
+        empty_xml = et.fromstring("<TEI/>")
+        empty_collation = Collation(empty_xml)
+        phylip_symbols = empty_collation.get_phylip_symbols()
+        self.assertEqual(phylip_symbols, [])
+
+    def test_get_fasta_symbols(self):
+        fasta_symbols = self.collation.get_fasta_symbols()
+        self.assertEqual(fasta_symbols, ["0", "1", "2", "3", "4", "5"])
+
+    def test_get_fasta_symbols_empty(self):
+        empty_xml = et.fromstring("<TEI/>")
+        empty_collation = Collation(empty_xml)
+        fasta_symbols = empty_collation.get_fasta_symbols()
+        self.assertEqual(fasta_symbols, [])
+
     def test_to_numpy_ignore_missing(self):
         matrix, reading_labels, witness_labels = self.collation.to_numpy(split_missing=False)
         self.assertTrue(
diff --git a/tests/test_format.py b/tests/test_format.py
index 77845fb..9fd0611 100644
--- a/tests/test_format.py
+++ b/tests/test_format.py
@@ -8,6 +8,10 @@ class FormatTestCase(unittest.TestCase):
         self.assertEqual(Format.infer(".nex"), Format.NEXUS)
         self.assertEqual(Format.infer(".nxs"), Format.NEXUS)
         self.assertEqual(Format.infer(".nexus"), Format.NEXUS)
+        self.assertEqual(Format.infer(".ph"), Format.PHYLIP)
+        self.assertEqual(Format.infer(".phy"), Format.PHYLIP)
+        self.assertEqual(Format.infer(".fa"), Format.FASTA)
+        self.assertEqual(Format.infer(".fasta"), Format.FASTA)
         self.assertEqual(Format.infer(".tnt"), Format.HENNIG86)
         self.assertEqual(Format.infer(".csv"), Format.CSV)
         self.assertEqual(Format.infer(".tsv"), Format.TSV)
diff --git a/tests/test_main.py b/tests/test_main.py
index 27adc3c..51a2cb2 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -16,6 +16,12 @@ no_dates_example = test_dir / "no_dates_example.xml"
 some_dates_example = test_dir / "some_dates_example.xml"
 
 
+def test_version():
+    with tempfile.TemporaryDirectory() as tmp_dir:
+        result = runner.invoke(app, ["--version"])
+        assert result.stdout != ""
+
+
 def test_non_xml_input():
     with tempfile.TemporaryDirectory() as tmp_dir:
         output = Path(tmp_dir) / "test.nexus"
@@ -104,6 +110,54 @@ def test_to_hennig86():
         assert "xread" in text
 
 
+def test_to_phylip():
+    with tempfile.TemporaryDirectory() as tmp_dir:
+        output = Path(tmp_dir) / "test.phy"
+        result = runner.invoke(
+            app,
+            [
+                "-t reconstructed",
+                "-t defective",
+                "-t orthographic",
+                "-m lac",
+                "-m overlap",
+                "-s *",
+                "-s T",
+                "--fill-correctors",
+                str(input_example),
+                str(output),
+            ],
+        )
+        assert result.exit_code == 0
+        assert output.exists()
+        text = output.read_text(encoding="ascii")
+        assert text.startswith("38 40")
+
+
+def test_to_fasta():
+    with tempfile.TemporaryDirectory() as tmp_dir:
+        output = Path(tmp_dir) / "test.fa"
+        result = runner.invoke(
+            app,
+            [
+                "-t reconstructed",
+                "-t defective",
+                "-t orthographic",
+                "-m lac",
+                "-m overlap",
+                "-s *",
+                "-s T",
+                "--fill-correctors",
+                str(input_example),
+                str(output),
+            ],
+        )
+        assert result.exit_code == 0
+        assert output.exists()
+        text = output.read_text(encoding="ascii")
+        assert text.startswith(">UBS")
+
+
 def test_to_csv():
     with tempfile.TemporaryDirectory() as tmp_dir:
         output = Path(tmp_dir) / "test.csv"
