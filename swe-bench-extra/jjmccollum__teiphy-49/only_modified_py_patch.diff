diff --git a/teiphy/collation.py b/teiphy/collation.py
index f615e01..2bd3ad3 100644
--- a/teiphy/collation.py
+++ b/teiphy/collation.py
@@ -324,28 +324,6 @@ class Collation:
     #     nexus_equate_mapping = {t: possible_symbols[i] for i, t in enumerate(reading_ind_tuples)}
     #     return nexus_equates, nexus_equate_mapping
 
-    def get_hennig86_symbols(self):
-        """Returns a list of one-character symbols needed to represent the states of all substantive readings in Hennig86 format.
-
-        The number of symbols equals the maximum number of substantive readings at any variation unit.
-
-        Returns:
-            A list of individual characters representing states in readings.
-        """
-        possible_symbols = (
-            list(string.digits) + list(string.ascii_uppercase)[:22]
-        )  # NOTE: the maximum number of symbols allowed in Hennig86 format is 32
-        # The number of symbols needed is equal to the length of the longest substantive reading vector:
-        nsymbols = 0
-        # If there are no witnesses, then no symbols are needed at all:
-        if len(self.witnesses) == 0:
-            return []
-        wit_id = self.witnesses[0].id
-        for rdg_support in self.readings_by_witness[wit_id]:
-            nsymbols = max(nsymbols, len(rdg_support))
-        hennig86_symbols = possible_symbols[:nsymbols]
-        return hennig86_symbols
-
     def to_nexus(
         self,
         file_addr: Union[Path, str],
@@ -485,6 +463,28 @@ class Collation:
             f.write("End;")
         return
 
+    def get_hennig86_symbols(self):
+        """Returns a list of one-character symbols needed to represent the states of all substantive readings in Hennig86 format.
+
+        The number of symbols equals the maximum number of substantive readings at any variation unit.
+
+        Returns:
+            A list of individual characters representing states in readings.
+        """
+        possible_symbols = (
+            list(string.digits) + list(string.ascii_uppercase)[:22]
+        )  # NOTE: the maximum number of symbols allowed in Hennig86 format is 32
+        # The number of symbols needed is equal to the length of the longest substantive reading vector:
+        nsymbols = 0
+        # If there are no witnesses, then no symbols are needed at all:
+        if len(self.witnesses) == 0:
+            return []
+        wit_id = self.witnesses[0].id
+        for rdg_support in self.readings_by_witness[wit_id]:
+            nsymbols = max(nsymbols, len(rdg_support))
+        hennig86_symbols = possible_symbols[:nsymbols]
+        return hennig86_symbols
+
     def to_hennig86(self, file_addr: Union[Path, str]):
         """Writes this Collation to a file in Hennig86 format with the given address.
         Note that because Hennig86 format does not support NEXUS-style ambiguities, such ambiguities will be treated as missing data.
@@ -541,6 +541,144 @@ class Collation:
             f.write(";")
         return
 
+    def get_phylip_symbols(self):
+        """Returns a list of one-character symbols needed to represent the states of all substantive readings in PHYLIP format.
+
+        The number of symbols equals the maximum number of substantive readings at any variation unit.
+
+        Returns:
+            A list of individual characters representing states in readings.
+        """
+        possible_symbols = (
+            list(string.digits) + list(string.ascii_lowercase)[:22]
+        )  # NOTE: for RAxML, multistate characters with an alphabet sizes up to 32 are supported
+        # The number of symbols needed is equal to the length of the longest substantive reading vector:
+        nsymbols = 0
+        # If there are no witnesses, then no symbols are needed at all:
+        if len(self.witnesses) == 0:
+            return []
+        wit_id = self.witnesses[0].id
+        for rdg_support in self.readings_by_witness[wit_id]:
+            nsymbols = max(nsymbols, len(rdg_support))
+        phylip_symbols = possible_symbols[:nsymbols]
+        return phylip_symbols
+
+    def to_phylip(self, file_addr: Union[Path, str]):
+        """Writes this Collation to a file in PHYLIP format with the given address.
+        Note that because PHYLIP format does not support NEXUS-style ambiguities, such ambiguities will be treated as missing data.
+
+        Args:
+            file_addr: A string representing the path to an output file.
+        """
+        # Start by calculating the values we will be using here:
+        ntax = len(self.witnesses)
+        nchar = (
+            len(self.readings_by_witness[self.witnesses[0].id]) if ntax > 0 else 0
+        )  # if the number of taxa is 0, then the number of characters is irrelevant
+        taxlabels = []
+        for wit in self.witnesses:
+            taxlabel = wit.id
+            # Then replace any disallowed characters in the string with an underscore:
+            taxlabel = slugify(taxlabel, lowercase=False, separator='_')
+            taxlabels.append(taxlabel)
+        max_taxlabel_length = max(
+            [len(taxlabel) for taxlabel in taxlabels]
+        )  # keep track of the longest taxon label for tabular alignment purposes
+        missing_symbol = '?'
+        symbols = self.get_phylip_symbols()
+        with open(file_addr, "w", encoding="ascii") as f:
+            # Write the dimensions:
+            f.write("%d %d\n" % (ntax, nchar))
+            # Now write the matrix:
+            for i, wit in enumerate(self.witnesses):
+                taxlabel = taxlabels[i]
+                # Add enough space after this label ensure that all sequences are nicely aligned:
+                sequence = taxlabel + (" " * (max_taxlabel_length - len(taxlabel))) + "\t"
+                for rdg_support in self.readings_by_witness[wit.id]:
+                    # If this reading is lacunose in this witness, then use the missing character:
+                    if sum(rdg_support) == 0:
+                        sequence += missing_symbol
+                        continue
+                    rdg_inds = [
+                        i for i, w in enumerate(rdg_support) if w > 0
+                    ]  # the index list consists of the indices of all readings with any degree of certainty assigned to them
+                    # For singleton readings, just print the symbol:
+                    if len(rdg_inds) == 1:
+                        sequence += symbols[rdg_inds[0]]
+                        continue
+                    # For multiple readings, print the missing symbol:
+                    sequence += missing_symbol
+                f.write("%s\n" % (sequence))
+        return
+
+    def get_fasta_symbols(self):
+        """Returns a list of one-character symbols needed to represent the states of all substantive readings in FASTA format.
+
+        The number of symbols equals the maximum number of substantive readings at any variation unit.
+
+        Returns:
+            A list of individual characters representing states in readings.
+        """
+        possible_symbols = (
+            list(string.digits) + list(string.ascii_lowercase)[:22]
+        )  # NOTE: for RAxML, multistate characters with an alphabet sizes up to 32 are supported
+        # The number of symbols needed is equal to the length of the longest substantive reading vector:
+        nsymbols = 0
+        # If there are no witnesses, then no symbols are needed at all:
+        if len(self.witnesses) == 0:
+            return []
+        wit_id = self.witnesses[0].id
+        for rdg_support in self.readings_by_witness[wit_id]:
+            nsymbols = max(nsymbols, len(rdg_support))
+        fasta_symbols = possible_symbols[:nsymbols]
+        return fasta_symbols
+
+    def to_fasta(self, file_addr: Union[Path, str]):
+        """Writes this Collation to a file in FASTA format with the given address.
+        Note that because FASTA format does not support NEXUS-style ambiguities, such ambiguities will be treated as missing data.
+
+        Args:
+            file_addr: A string representing the path to an output file.
+        """
+        # Start by calculating the values we will be using here:
+        ntax = len(self.witnesses)
+        nchar = (
+            len(self.readings_by_witness[self.witnesses[0].id]) if ntax > 0 else 0
+        )  # if the number of taxa is 0, then the number of characters is irrelevant
+        taxlabels = []
+        for wit in self.witnesses:
+            taxlabel = wit.id
+            # Then replace any disallowed characters in the string with an underscore:
+            taxlabel = slugify(taxlabel, lowercase=False, separator='_')
+            taxlabels.append(taxlabel)
+        max_taxlabel_length = max(
+            [len(taxlabel) for taxlabel in taxlabels]
+        )  # keep track of the longest taxon label for tabular alignment purposes
+        missing_symbol = '?'
+        symbols = self.get_fasta_symbols()
+        with open(file_addr, "w", encoding="ascii") as f:
+            # Now write the matrix:
+            for i, wit in enumerate(self.witnesses):
+                taxlabel = taxlabels[i]
+                # Add enough space after this label ensure that all sequences are nicely aligned:
+                sequence = ">%s\n" % taxlabel
+                for rdg_support in self.readings_by_witness[wit.id]:
+                    # If this reading is lacunose in this witness, then use the missing character:
+                    if sum(rdg_support) == 0:
+                        sequence += missing_symbol
+                        continue
+                    rdg_inds = [
+                        i for i, w in enumerate(rdg_support) if w > 0
+                    ]  # the index list consists of the indices of all readings with any degree of certainty assigned to them
+                    # For singleton readings, just print the symbol:
+                    if len(rdg_inds) == 1:
+                        sequence += symbols[rdg_inds[0]]
+                        continue
+                    # For multiple readings, print the missing symbol:
+                    sequence += missing_symbol
+                f.write("%s\n" % (sequence))
+        return
+
     def to_numpy(self, split_missing: bool = True):
         """Returns this Collation in the form of a NumPy array, along with arrays of its row and column labels.
 
@@ -820,7 +958,7 @@ class Collation:
             split_missing (bool, optional): An optional flag indicating whether to treat
                 missing characters/variation units as having a contribution of 1 split over all states/readings;
                 if False, then missing data is ignored (i.e., all states are 0).
-                Not applicable for NEXUS, HENNIG86, or STEMMA format.
+                Not applicable for NEXUS, HENNIG86, PHYLIP, FASTA, or STEMMA format.
                 Default value is True.
             char_state_labels (bool, optional): An optional flag indicating whether to print
                 the CharStateLabels block in NEXUS output.
@@ -851,6 +989,12 @@ class Collation:
         if format == format.HENNIG86:
             return self.to_hennig86(file_addr)
 
+        if format == format.PHYLIP:
+            return self.to_phylip(file_addr)
+
+        if format == format.FASTA:
+            return self.to_fasta(file_addr)
+
         if format == Format.CSV:
             return self.to_csv(file_addr, split_missing=split_missing)
 
diff --git a/teiphy/format.py b/teiphy/format.py
index fd6654d..d122a24 100644
--- a/teiphy/format.py
+++ b/teiphy/format.py
@@ -8,6 +8,8 @@ class FormatUnknownException(Exception):
 class Format(Enum):
     NEXUS = 'NEXUS'
     HENNIG86 = 'HENNIG86'
+    PHYLIP = 'PHYLIP'
+    FASTA = 'FASTA'
     CSV = 'CSV'
     TSV = 'TSV'
     EXCEL = 'EXCEL'
@@ -19,6 +21,10 @@ class Format(Enum):
             ".nex": cls.NEXUS,
             ".nexus": cls.NEXUS,
             ".nxs": cls.NEXUS,
+            ".ph": cls.PHYLIP,
+            ".phy": cls.PHYLIP,
+            ".fa": cls.FASTA,
+            ".fasta": cls.FASTA,
             ".tnt": cls.HENNIG86,
             ".csv": cls.CSV,
             ".tsv": cls.TSV,
diff --git a/teiphy/main.py b/teiphy/main.py
index 8d25a32..a8fec14 100644
--- a/teiphy/main.py
+++ b/teiphy/main.py
@@ -1,4 +1,5 @@
 from typing import List  # for list-like inputs
+from importlib.metadata import version # for checking package version
 from pathlib import Path  # for validating file address inputs
 from lxml import etree as et  # for parsing XML input
 import typer
@@ -9,6 +10,11 @@ from .collation import Collation
 
 app = typer.Typer(rich_markup_mode="rich")
 
+def version_callback(value: bool):
+    if value:
+        teiphy_version = version("teiphy")
+        typer.echo(teiphy_version)
+        raise typer.Exit()
 
 @app.command()
 def to_file(
@@ -44,6 +50,12 @@ def to_file(
         help="Use the missing symbol instead of Equate symbols (and thus treat all ambiguities as missing data) in NEXUS output; this option is only applied if the --states-present option is also set.",
     ),
     verbose: bool = typer.Option(False, help="Enable verbose logging (mostly for debugging purposes)."),
+    version: bool = typer.Option(
+        False,
+        callback=version_callback,
+        is_eager=True,
+        help="Print the current version.",
+    ),
     format: Format = typer.Option(None, case_sensitive=False, help="The output format."),
     input: Path = typer.Argument(
         ...,

