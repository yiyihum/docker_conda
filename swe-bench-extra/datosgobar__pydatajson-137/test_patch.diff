diff --git a/tests/test_ckan_utils.py b/tests/test_ckan_utils.py
index f90406e..83a7697 100644
--- a/tests/test_ckan_utils.py
+++ b/tests/test_ckan_utils.py
@@ -2,12 +2,8 @@
 
 import unittest
 import os
-import json
-import re
-import sys
-from dateutil import parser, tz
 from .context import pydatajson
-from pydatajson.ckan_utils import map_dataset_to_package, map_distributions_to_resources, convert_iso_string_to_utc
+from pydatajson.ckan_utils import *
 from pydatajson.helpers import title_to_name
 SAMPLES_DIR = os.path.join("tests", "samples")
 
@@ -216,6 +212,57 @@ class DatasetConversionTestCase(unittest.TestCase):
                 self.assertIsNone(resource.get('attributesDescription'))
 
 
+class ThemeConversionTests(unittest.TestCase):
+
+    @classmethod
+    def get_sample(cls, sample_filename):
+        return os.path.join(SAMPLES_DIR, sample_filename)
+
+    @classmethod
+    def setUpClass(cls):
+        catalog = pydatajson.DataJson(cls.get_sample('full_data.json'))
+        cls.theme = catalog.get_theme(identifier='adjudicaciones')
+
+    def test_all_attributes_are_replicated_if_present(self):
+        group = map_theme_to_group(self.theme)
+        self.assertEqual('adjudicaciones', group['name'])
+        self.assertEqual('Adjudicaciones', group['title'])
+        self.assertEqual('Datasets sobre licitaciones adjudicadas.', group['description'])
+
+    def test_label_is_used_as_name_if_id_not_present(self):
+        missing_id = dict(self.theme)
+        missing_id['label'] = u'#Will be used as name#'
+        missing_id.pop('id')
+        group = map_theme_to_group(missing_id)
+        self.assertEqual('will-be-used-as-name', group['name'])
+        self.assertEqual('#Will be used as name#', group['title'])
+        self.assertEqual('Datasets sobre licitaciones adjudicadas.', group['description'])
+
+    def test_theme_missing_label(self):
+        missing_label = dict(self.theme)
+        missing_label.pop('label')
+        group = map_theme_to_group(missing_label)
+        self.assertEqual('adjudicaciones', group['name'])
+        self.assertIsNone(group.get('title'))
+        self.assertEqual('Datasets sobre licitaciones adjudicadas.', group['description'])
+
+    def test_theme_missing_description(self):
+        missing_description = dict(self.theme)
+        missing_description.pop('description')
+        group = map_theme_to_group(missing_description)
+        self.assertEqual('adjudicaciones', group['name'])
+        self.assertEqual('Adjudicaciones', group['title'])
+        self.assertIsNone(group['description'])
+
+    def test_id_special_characters_are_removed(self):
+        special_char_id = dict(self.theme)
+        special_char_id['id'] = u'#Th√©me& $id?'
+        group = map_theme_to_group(special_char_id)
+        self.assertEqual('theme-id', group['name'])
+        self.assertEqual('Adjudicaciones', group['title'])
+        self.assertEqual('Datasets sobre licitaciones adjudicadas.', group['description'])
+
+
 class DatetimeConversionTests(unittest.TestCase):
 
     def test_timezones_are_handled_correctly(self):
diff --git a/tests/test_federation.py b/tests/test_federation.py
index e6804b9..fd8284e 100644
--- a/tests/test_federation.py
+++ b/tests/test_federation.py
@@ -3,14 +3,14 @@
 import unittest
 import os
 import re
-import sys
+
 try:
     from mock import patch, MagicMock
 except ImportError:
     from unittest.mock import patch, MagicMock
 
 from .context import pydatajson
-from pydatajson.federation import push_dataset_to_ckan, remove_datasets_from_ckan
+from pydatajson.federation import push_dataset_to_ckan, remove_datasets_from_ckan, push_theme_to_ckan
 from ckanapi.errors import NotFound
 
 SAMPLES_DIR = os.path.join("tests", "samples")
@@ -215,3 +215,40 @@ class RemoveDatasetTestCase(unittest.TestCase):
             'portal', 'key', only_time_series=True, organization='some_org')
         mock_portal.return_value.call_action.assert_called_with(
             'dataset_purge', data_dict={'id': 'id_2'})
+
+
+class PushThemeTestCase(unittest.TestCase):
+
+    @classmethod
+    def get_sample(cls, sample_filename):
+        return os.path.join(SAMPLES_DIR, sample_filename)
+
+    @classmethod
+    def setUpClass(cls):
+        cls.catalog = pydatajson.DataJson(cls.get_sample('full_data.json'))
+
+    @patch('pydatajson.federation.RemoteCKAN', autospec=True)
+    def test_empty_theme_search_raises_exception(self, mock_portal):
+        with self.assertRaises(AssertionError):
+            push_theme_to_ckan(self.catalog, 'portal_url', 'apikey')
+
+    @patch('pydatajson.federation.RemoteCKAN', autospec=True)
+    def test_function_pushes_theme_by_identifier(self, mock_portal):
+        mock_portal.return_value.call_action = MagicMock(return_value={'name': 'group_name'})
+        result = push_theme_to_ckan(self.catalog, 'portal_url', 'apikey', identifier='compras')
+        self.assertEqual('group_name', result)
+
+    @patch('pydatajson.federation.RemoteCKAN', autospec=True)
+    def test_function_pushes_theme_by_label(self, mock_portal):
+        mock_portal.return_value.call_action = MagicMock(return_value={'name': 'other_name'})
+        result = push_theme_to_ckan(self.catalog, 'portal_url', 'apikey', label='Adjudicaciones')
+        self.assertEqual('other_name', result)
+
+    @patch('pydatajson.federation.RemoteCKAN', autospec=True)
+    def test_ckan_portal_is_called_with_correct_parametres(self, mock_portal):
+        mock_portal.return_value.call_action = MagicMock(return_value={'name': u'contrataciones'})
+        group = {'name': u'contrataciones',
+                 'title': u'Contrataciones',
+                 'description': u'Datasets sobre contrataciones.'}
+        push_theme_to_ckan(self.catalog, 'portal_url', 'apikey', identifier='contrataciones')
+        mock_portal.return_value.call_action.assert_called_once_with('group_create', data_dict=group)
