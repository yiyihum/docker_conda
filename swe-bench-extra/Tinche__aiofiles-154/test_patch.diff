diff --git a/tests/test_os.py b/tests/test_os.py
index 2d920d1..34b4b63 100644
--- a/tests/test_os.py
+++ b/tests/test_os.py
@@ -75,9 +75,9 @@ async def test_renames():
     assert exists(old_filename) is False and exists(new_filename)
     await aiofiles.os.renames(new_filename, old_filename)
     assert (
-        exists(old_filename) and
-        exists(new_filename) is False and
-        exists(dirname(new_filename)) is False
+        exists(old_filename)
+        and exists(new_filename) is False
+        and exists(dirname(new_filename)) is False
     )
 
 
@@ -323,6 +323,7 @@ async def test_listdir_dir_with_only_one_file():
     await aiofiles.os.remove(some_file)
     await aiofiles.os.rmdir(some_dir)
 
+
 @pytest.mark.asyncio
 async def test_listdir_dir_with_only_one_dir():
     """Test the listdir call when the dir has one dir."""
@@ -335,6 +336,7 @@ async def test_listdir_dir_with_only_one_dir():
     await aiofiles.os.rmdir(other_dir)
     await aiofiles.os.rmdir(some_dir)
 
+
 @pytest.mark.asyncio
 async def test_listdir_dir_with_multiple_files():
     """Test the listdir call when the dir has multiple files."""
@@ -353,6 +355,7 @@ async def test_listdir_dir_with_multiple_files():
     await aiofiles.os.remove(other_file)
     await aiofiles.os.rmdir(some_dir)
 
+
 @pytest.mark.asyncio
 async def test_listdir_dir_with_a_file_and_a_dir():
     """Test the listdir call when the dir has files and other dirs."""
@@ -406,6 +409,7 @@ async def test_scandir_dir_with_only_one_file():
     await aiofiles.os.remove(some_file)
     await aiofiles.os.rmdir(some_dir)
 
+
 @pytest.mark.asyncio
 async def test_scandir_dir_with_only_one_dir():
     """Test the scandir call when the dir has one dir."""
diff --git a/tests/test_stdio.py b/tests/test_stdio.py
new file mode 100644
index 0000000..61442af
--- /dev/null
+++ b/tests/test_stdio.py
@@ -0,0 +1,25 @@
+import sys
+import pytest
+from aiofiles import stdin, stdout, stderr, stdin_bytes, stdout_bytes, stderr_bytes
+
+
+@pytest.mark.asyncio
+async def test_stdio(capsys):
+    await stdout.write("hello")
+    await stderr.write("world")
+    out, err = capsys.readouterr()
+    assert out == "hello"
+    assert err == "world"
+    with pytest.raises(OSError):
+        await stdin.read()
+
+
+@pytest.mark.asyncio
+async def test_stdio_bytes(capsysbinary):
+    await stdout_bytes.write(b"hello")
+    await stderr_bytes.write(b"world")
+    out, err = capsysbinary.readouterr()
+    assert out == b"hello"
+    assert err == b"world"
+    with pytest.raises(OSError):
+        await stdin_bytes.read()
diff --git a/tests/test_tempfile.py b/tests/test_tempfile.py
index 9bf743e..3ebb149 100644
--- a/tests/test_tempfile.py
+++ b/tests/test_tempfile.py
@@ -69,9 +69,9 @@ async def test_spooled_temporary_file(mode):
 @pytest.mark.skipif(
     sys.version_info < (3, 7),
     reason=(
-       "text-mode SpooledTemporaryFile is implemented with StringIO in py3.6"
-       "it doesn't support `newlines`"
-    )
+        "text-mode SpooledTemporaryFile is implemented with StringIO in py3.6"
+        "it doesn't support `newlines`"
+    ),
 )
 @pytest.mark.parametrize(
     "test_string, newlines", [("LF\n", "\n"), ("CRLF\r\n", "\r\n")]
