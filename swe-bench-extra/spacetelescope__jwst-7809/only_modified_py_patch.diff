diff --git a/jwst/assign_wcs/util.py b/jwst/assign_wcs/util.py
index f0e312c0b..50c8ba31d 100644
--- a/jwst/assign_wcs/util.py
+++ b/jwst/assign_wcs/util.py
@@ -958,6 +958,7 @@ def update_s_region_imaging(model):
 
     if bbox is None:
         bbox = wcs_bbox_from_shape(model.data.shape)
+        model.meta.wcs.bounding_box = bbox
 
     # footprint is an array of shape (2, 4) as we
     # are interested only in the footprint on the sky
diff --git a/jwst/pipeline/calwebb_detector1.py b/jwst/pipeline/calwebb_detector1.py
index 788d29c37..889e5f492 100644
--- a/jwst/pipeline/calwebb_detector1.py
+++ b/jwst/pipeline/calwebb_detector1.py
@@ -19,8 +19,8 @@ from ..linearity import linearity_step
 from ..dark_current import dark_current_step
 from ..reset import reset_step
 from ..persistence import persistence_step
+from ..undersampling_correction import undersampling_correction_step
 from ..jump import jump_step
-from ..undersampling_correction import  undersampling_correction_step
 from ..ramp_fitting import ramp_fit_step
 from ..gain_scale import gain_scale_step
 
@@ -60,8 +60,8 @@ class Detector1Pipeline(Pipeline):
                  'dark_current': dark_current_step.DarkCurrentStep,
                  'reset': reset_step.ResetStep,
                  'persistence': persistence_step.PersistenceStep,
-                 'jump': jump_step.JumpStep,
                  'undersampling_correction': undersampling_correction_step.UndersamplingCorrectionStep,
+                 'jump': jump_step.JumpStep,
                  'ramp_fit': ramp_fit_step.RampFitStep,
                  'gain_scale': gain_scale_step.GainScaleStep,
                  }
@@ -119,12 +119,12 @@ class Detector1Pipeline(Pipeline):
 
             input = self.dark_current(input)
 
-        # apply the jump step
-        input = self.jump(input)
-
         # apply the undersampling_correction step
         input = self.undersampling_correction(input)
 
+        # apply the jump step
+        input = self.jump(input)
+
         # save the corrected ramp data, if requested
         if self.save_calibrated_ramp:
             self.save_model(input, 'ramp')
diff --git a/jwst/undersampling_correction/undersampling_correction.py b/jwst/undersampling_correction/undersampling_correction.py
index f1b48513b..49c1a67ef 100644
--- a/jwst/undersampling_correction/undersampling_correction.py
+++ b/jwst/undersampling_correction/undersampling_correction.py
@@ -8,6 +8,11 @@ from stdatamodels.jwst.datamodels import dqflags
 log = logging.getLogger(__name__)
 log.setLevel(logging.DEBUG)
 
+GOOD = dqflags.group["GOOD"]
+DNU = dqflags.group["DO_NOT_USE"]
+UNSA = dqflags.group["UNDERSAMP"]
+UNSA_DNU = UNSA + DNU
+
 
 def undersampling_correction(input_model, signal_threshold):
     """
@@ -24,8 +29,8 @@ def undersampling_correction(input_model, signal_threshold):
     Returns
     -------
     output_model : `~jwst.datamodels.RampModel`
-        Data model with undersampling_correction applied; add UNDERSAMP flag
-        to groups exceeding signal_threshold
+        Data model with undersampling_correction applied; add UNDERSAMP and
+        DO_NOT_USE flags to groups exceeding signal_threshold
     """
     data = input_model.data
     gdq = input_model.groupdq
@@ -45,8 +50,8 @@ def undersampling_correction(input_model, signal_threshold):
 
 def flag_pixels(data, gdq, signal_threshold):
     """
-    Flag first group in each ramp that exceeds signal_threshold as UNDERSAMP and DO_NOT_USE,
-    skipping groups already flagged as DO_NOT_USE; then flag all subsequent groups in the ramp.
+    Flag each group in each ramp that exceeds signal_threshold as UNDERSAMP and DO_NOT_USE,
+    skipping groups already flagged as DO_NOT_USE.
 
     Parameters
     ----------
@@ -61,44 +66,78 @@ def flag_pixels(data, gdq, signal_threshold):
 
     Returns
     -------
-    gdq : int, 4D array
+    new_gdq : int, 4D array
         updated group dq array
     """
     n_ints, n_grps, n_rows, n_cols = gdq.shape
-    num_pix = n_cols * n_rows
+    ncols = data.shape[3]
+    nrows = data.shape[2]
+
+    new_gdq = gdq.copy()   # Updated gdq
+
+    # Flag all exceedances with UNDERSAMP and NO_NOT_USE
+    undersamp_pix = (data > signal_threshold) & (gdq != DNU)
+
+    new_gdq[undersamp_pix] = np.bitwise_or(new_gdq[undersamp_pix], UNSA | DNU)
+
+    # Reset groups previously flagged as DNU
+    gdq_orig = gdq.copy()  # For resetting to previously flagged DNU
+    wh_gdq_DNU = np.bitwise_and(gdq_orig, DNU)
+
+    # Get indices for exceedances
+    arg_where = np.argwhere(new_gdq == UNSA_DNU)
+    a_int = arg_where[:, 0]  # array of integrations
+    a_grp = arg_where[:, 1]  # array of groups
+    a_row = arg_where[:, 2]  # array of rows
+    a_col = arg_where[:, 3]  # array of columns
+
+    # Process the 4 nearest neighbors of each exceedance
+    # Pixel to the east
+    xx_max_p1 = a_col[a_col < (ncols-1)] + 1
+    i_int = a_int[a_col < (ncols-1)]
+    i_grp = a_grp[a_col < (ncols-1)]
+    i_row = a_row[a_col < (ncols-1)]
+
+    if len(xx_max_p1) > 0:
+        new_gdq[i_int, i_grp, i_row, xx_max_p1] = \
+            np.bitwise_or(new_gdq[i_int, i_grp, i_row, xx_max_p1], UNSA | DNU)
+
+    new_gdq[wh_gdq_DNU == 1] = gdq_orig[wh_gdq_DNU == 1]  # reset for earlier DNUs
+
+    # Pixel to the west
+    xx_m1 = a_col[a_col > 0] - 1
+    i_int = a_int[a_col > 0]
+    i_grp = a_grp[a_col > 0]
+    i_row = a_row[a_col > 0]
 
-    lowest_exc_1d = np.zeros(num_pix) + n_grps
+    if len(xx_m1) > 0:
+        new_gdq[i_int, i_grp, i_row, xx_m1] = \
+            np.bitwise_or(new_gdq[i_int, i_grp, i_row, xx_m1], UNSA | DNU)
 
-    for ii_int in range(n_ints):
-        for ii_grp in range(n_grps):
-            data_1d = data[ii_int, ii_grp, :, :].reshape(num_pix)  # vectorize slice
-            gdq_1d = gdq[ii_int, ii_grp, :, :].reshape(num_pix)
+    new_gdq[wh_gdq_DNU == 1] = gdq_orig[wh_gdq_DNU == 1]  # reset for earlier DNUs
 
-            wh_not_dnu = np.logical_not(gdq_1d & dqflags.group['DO_NOT_USE'])
+    # Pixel to the north
+    yy_m1 = a_row[a_row > 0] - 1
+    i_int = a_int[a_row > 0]
+    i_grp = a_grp[a_row > 0]
+    i_col = a_col[a_row > 0]
 
-            # In the current group for all ramps, locate pixels that :
-            #  a) exceed the signal_threshold, and
-            #  b) have not been previously flagged as an exceedance, and
-            #  c) were not flagged in an earlier step as DO_NOT_USE
-            wh_exc_1d = np.where((data_1d > signal_threshold) &
-                                 (lowest_exc_1d == n_grps) & wh_not_dnu)
+    if len(yy_m1) > 0:
+        new_gdq[i_int, i_grp, yy_m1, i_col] = \
+            np.bitwise_or(new_gdq[i_int, i_grp, yy_m1, i_col], UNSA | DNU)
 
-            # ... and mark those pixels, as current group is their first exceedance
-            if len(wh_exc_1d[0] > 0):  # For ramps previously unflagged ...
-                lowest_exc_1d[wh_exc_1d] = ii_grp
+    new_gdq[wh_gdq_DNU == 1] = gdq_orig[wh_gdq_DNU == 1]  # reset for earlier DNUs
 
-    # Flag current and subsequent groups
-    lowest_exc_2d = lowest_exc_1d.reshape((n_rows, n_cols))
-    for ii_int in range(n_ints):
-        for ii_grp in range(n_grps):
-            wh_set_flag = np.where(lowest_exc_2d == ii_grp)
+    # Pixel to the south
+    yy_max_p1 = a_row[a_row < (nrows-1)] + 1
+    i_int = a_int[a_row < (nrows-1)]
+    i_grp = a_grp[a_row < (nrows-1)]
+    i_col = a_col[a_row < (nrows-1)]
 
-            # set arrays of components
-            yy = wh_set_flag[0]
-            xx = wh_set_flag[1]
+    if len(yy_max_p1) > 0:
+        new_gdq[i_int, i_grp, yy_max_p1, i_col] = \
+            np.bitwise_or(new_gdq[i_int, i_grp, yy_max_p1, i_col], UNSA | DNU)
 
-            gdq[ii_int, ii_grp:, yy, xx] = \
-                np.bitwise_or(gdq[ii_int, ii_grp:, yy, xx], dqflags.group['UNDERSAMP']
-                              | dqflags.group['DO_NOT_USE'])
+    new_gdq[wh_gdq_DNU == 1] = gdq_orig[wh_gdq_DNU == 1]  # reset for earlier DNUs
 
-    return gdq
+    return new_gdq
diff --git a/jwst/undersampling_correction/undersampling_correction_step.py b/jwst/undersampling_correction/undersampling_correction_step.py
index e5b8ba6b0..190846058 100755
--- a/jwst/undersampling_correction/undersampling_correction_step.py
+++ b/jwst/undersampling_correction/undersampling_correction_step.py
@@ -21,7 +21,7 @@ class UndersamplingCorrectionStep(Step):
     class_alias = "undersampling_correction"
 
     spec = """
-        signal_threshold = float(default=30000)
+        signal_threshold = float(default=25000)
         skip = boolean(default=True)
     """
 
@@ -31,7 +31,7 @@ class UndersamplingCorrectionStep(Step):
         with datamodels.RampModel(input) as input_model:
             if (input_model.data.shape[1] < 3):  # skip step if only 1 or 2 groups/integration
                 log.info('Too few groups per integration; skipping undersampling_correction')
-                
+
                 result = input_model
                 result.meta.cal_step.undersampling_correction = 'SKIPPED'
 

