diff --git a/jwst/regtest/test_associations_sdp_pools.py b/jwst/regtest/test_associations_sdp_pools.py
index de7e20033..7f29fac43 100644
--- a/jwst/regtest/test_associations_sdp_pools.py
+++ b/jwst/regtest/test_associations_sdp_pools.py
@@ -32,11 +32,6 @@ SPECIAL_DEFAULT = {
     'slow': False,
 }
 SPECIAL_POOLS = {
-    'jw00016_20230331t130733_pool': {
-        'args': [],
-        'xfail': 'See issue JP-3230',
-        'slow': False,
-    },
     'jw00623_20190607t021101_pool': {
         'args': [],
         'xfail': None,
diff --git a/jwst/undersampling_correction/tests/test_undersampling_correction.py b/jwst/undersampling_correction/tests/test_undersampling_correction.py
index 12b90e751..806a47a3b 100644
--- a/jwst/undersampling_correction/tests/test_undersampling_correction.py
+++ b/jwst/undersampling_correction/tests/test_undersampling_correction.py
@@ -12,8 +12,8 @@ test_dq_flags = dqflags.pixel
 GOOD = test_dq_flags["GOOD"]
 DNU = test_dq_flags["DO_NOT_USE"]
 UNSA = test_dq_flags["UNDERSAMP"]
-ADFL = test_dq_flags["AD_FLOOR"]
 DROU = test_dq_flags["DROPOUT"]
+UNSA_DNU = UNSA + DNU
 
 
 def test_pix_0():
@@ -21,7 +21,7 @@ def test_pix_0():
     Having all data in ramp below the signal threshold, the only non-GOOD
     groups in the output GROUPDQ should be those DNU propagated from the input.
     """
-    ngroups, nints, nrows, ncols = set_scalars()
+    ngroups, nints, nrows, ncols = 10, 1, 1, 1
     ramp_model, pixdq, groupdq, err = create_mod_arrays(
         ngroups, nints, nrows, ncols)
 
@@ -42,59 +42,35 @@ def test_pix_0():
 
 def test_pix_1():
     """
-    All input GROUPDQ = 'GOOD'. Some ramp data exceed the signal threshold, so the
-    only non-GOOD groups in the output GROUPDQ should be UNSA + DNU for the first
-    group exceeding the signal threshold and all subsequent groups.
+    Tests groups whose data exceeds the signal threshold; 1 group is already
+    flagged as DNU from a previous calibration step, and 1 group is GOOD.
+    Also tests groups whose data does not exceed the signal threshold;
+    similarly 1 group is already flagged as DNU from a previous calibration
+    step, and 1 is GOOD. All data beyond the first exceedance are also
+    flagged as UNDERSAMP and DNU.
     """
-    ngroups, nints, nrows, ncols = set_scalars()
+    ngroups, nints, nrows, ncols = 10, 1, 1, 1
     ramp_model, pixdq, groupdq, err = create_mod_arrays(
         ngroups, nints, nrows, ncols)
 
     signal_threshold = 20000.
 
-    # Populate pixel-specific SCI and GROUPDQ arrays
-    # Set seom groups' SCI to be above the signal threshold, and all input
-    # GROUPDQ to be GOOD
-    ramp_model.data[0, 3, 0, 0] = np.array((signal_threshold + 100.), dtype=np.float32)
-    ramp_model.data[0, 5, 0, 0] = np.array((signal_threshold - 200.), dtype=np.float32)
-    ramp_model.data[0, 8, 0, 0] = np.array((signal_threshold + 100.), dtype=np.float32)
-    ramp_model.groupdq[0, :, 0, 0] = [GOOD] * ngroups
-
-    true_out_gdq = ramp_model.groupdq.copy()  # all GOOD
-    true_out_gdq[0, :, 0, 0] = [GOOD] * ngroups
-    true_out_gdq[0, 3:, 0, 0] = np.bitwise_or(UNSA, DNU)
-
-    out_model = undersampling_correction(ramp_model, signal_threshold)
-    out_gdq = out_model.groupdq
-
-    npt.assert_array_equal(out_gdq, true_out_gdq)
-
-
-def test_pix_2():
-    """
-    Tests groups having data exceeding the signal threshold, Some groups are
-    already flagged as DO_NOT_USE; they will not be checked for UC,  Other
-    groups will have 'DNU'+'UNSA' added to their GROUPDQ, as will all later
-    groups.
-    """
-    ngroups, nints, nrows, ncols = set_scalars()
-    ramp_model, pixdq, groupdq, err = create_mod_arrays(
-        ngroups, nints, nrows, ncols)
+    # Populate SCI and GROUPDQ arrays.
+    ramp_model.data[0, 1, 0, 0] = np.array((0.5 * signal_threshold), dtype=np.float32)
 
-    signal_threshold = 20000.
+    ramp_model.data[0, 2, 0, 0] = np.array((0.8 * signal_threshold), dtype=np.float32)
+    ramp_model.groupdq[0, 2, 0, 0] = DNU  # should not get UNSA, not an exceedance
 
-    # Populate SCI and GROUPDQ arrays.
-    ramp_model.data[0, 1, 0, 0] = np.array((signal_threshold + 100.), dtype=np.float32)
-    ramp_model.data[0, 2, 0, 0] = np.array((signal_threshold + 100.), dtype=np.float32)
-    ramp_model.data[0, 3, 0, 0] = np.array((signal_threshold + 100.), dtype=np.float32)
+    ramp_model.data[0, 3, 0, 0] = np.array((signal_threshold + 5000.), dtype=np.float32)
+    ramp_model.groupdq[0, 3, 0, 0] = DNU  # should not get UNSA, although exceedance
 
-    ramp_model.groupdq[0, 1, 0, 0] = DNU  # should not get UNSA
-    ramp_model.groupdq[0, 2, 0, 0] = np.bitwise_or(ADFL, DNU)  # should not get UNSA
-    ramp_model.groupdq[0, 3, 0, 0] = ADFL  # should get UNSA + DNU
+    ramp_model.data[0, 4:, 0, 0] = np.array((signal_threshold + 6000.), dtype=np.float32)
+    ramp_model.groupdq[0, 4:, 0, 0] = GOOD
 
     true_out_gdq = ramp_model.groupdq.copy()
-    true_out_gdq[0, 3, 0, 0] = np.bitwise_or(np.bitwise_or(DNU, UNSA), ADFL)
-    true_out_gdq[0, 4:, 0, 0] = np.bitwise_or(DNU, UNSA)
+    true_out_gdq[0, 2, 0, 0] = DNU
+    true_out_gdq[0, 3, 0, 0] = DNU
+    true_out_gdq[0, 4:, 0, 0] = UNSA_DNU
 
     out_model = undersampling_correction(ramp_model, signal_threshold)
     out_gdq = out_model.groupdq
@@ -107,9 +83,7 @@ def test_too_few_groups():
     Test that processing for datasets having too few (<3) groups per integration
     are skipped.
     """
-    ngroups, nints, nrows, ncols = set_scalars()
-    ngroups = 2
-
+    ngroups, nints, nrows, ncols = 2, 1, 1, 1
     ramp_model, pixdq, groupdq, err = create_mod_arrays(
         ngroups, nints, nrows, ncols)
 
@@ -123,16 +97,92 @@ def test_too_few_groups():
     npt.assert_string_equal(status, "SKIPPED")
 
 
-def set_scalars():
+def test_flag_neighbors():
     """
-    Set needed scalars for the size of the dataset,
+    Test flagging of 4 nearest neighbors of exceedances. Tests pixels on
+    array edges, Tests exclusion of groups previously flagged as DO_NOT_USE.
     """
-    ngroups = 10
-    nints = 1
-    nrows = 1
-    ncols = 1
+    ngroups, nints, nrows, ncols = 6, 1, 4, 3
+    ramp_model, pixdq, groupdq, err = create_mod_arrays(
+        ngroups, nints, nrows, ncols)
+
+    signal_threshold = 4400.
+
+    # Populate pixel-specific SCI and GROUPDQ arrays
+    ramp_model.data[0, :, :, :] = \
+        np.array([[
+            [1900., 2666., 2100.],
+            [3865., 2300., 3177.],
+            [3832., 3044., 3588.],
+            [3799., 3233., 3000.]],
+
+           [[2100., 2866., 2300.],
+            [4065., 2500., 3377.],
+            [4032., 3244., 3788.],
+            [3999., 3433., 3200.]],
+
+           [[2300., 3066., 2500.],
+            [4265., 2700., 3577.],
+            [4232., 3444., 3988.],
+            [4199., 3633., 3400.]],
+
+           [[2500., 3266., 2700.],
+            [4465., 2900., 3777.],
+            [4432., 3644., 4188.],
+            [4399., 3833., 3600.]],
+
+           [[2700., 3466., 2900.],
+            [4665., 3100., 3977.],
+            [4632., 3844., 4388.],
+            [4599., 4033., 3800.]],
+
+           [[2900., 3666., 3100.],
+            [4865., 3300., 4177.],
+            [4832., 4044., 4588.],
+            [4799., 4233., 4000.]]], dtype=np.float32)
+
+    # These group DQ values should propagate unchanged to the output
+    ramp_model.groupdq[:, 4, 2, 0] = [DNU]
+    ramp_model.groupdq[:, 1, 2, 2] = [DNU]
+    ramp_model.groupdq[:, 2, 1, 1] = [DROU + DNU]
+
+    out_model = undersampling_correction(ramp_model, signal_threshold)
+    out_gdq = out_model.groupdq
 
-    return ngroups, nints, nrows, ncols
+    true_out_gdq = ramp_model.groupdq.copy()
+    true_out_gdq[0, :, :, :] = \
+        np.array([[
+            [0,   0,   0],
+            [0,   0,   0],
+            [0,   0,   0],
+            [0,   0,   0]],
+
+           [[0,   0,   0],
+            [0,   0,   0],
+            [0,   0,   DNU],
+            [0,   0,   0]],
+
+           [[0,   0,   0],
+            [0,   9,   0],
+            [0,   0,   0],
+            [0,   0,   0]],
+
+           [[UNSA_DNU,   0,      0],
+            [UNSA_DNU, UNSA_DNU, 0],
+            [UNSA_DNU, UNSA_DNU, 0],
+            [UNSA_DNU,   0,      0]],
+
+           [[UNSA_DNU,   0,      0],
+            [UNSA_DNU, UNSA_DNU, 0],
+            [DNU,        0,      0],
+            [UNSA_DNU, UNSA_DNU, 0]],
+
+           [[UNSA_DNU,   0,       0],
+            [UNSA_DNU, UNSA_DNU, UNSA_DNU],
+            [UNSA_DNU, UNSA_DNU, UNSA_DNU],
+            [UNSA_DNU, UNSA_DNU, UNSA_DNU]]], dtype=np.uint8)
+
+    npt.assert_array_equal(out_gdq, true_out_gdq)
 
 
 def create_mod_arrays(ngroups, nints, nrows, ncols):
