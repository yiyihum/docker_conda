diff --git a/tdclient/client.py b/tdclient/client.py
index 691b225..85c2258 100644
--- a/tdclient/client.py
+++ b/tdclient/client.py
@@ -527,10 +527,7 @@ class Client(object):
         [:class:`tdclient.models.Schedule`]
         """
         result = self.api.list_schedules()
-        def schedule(m):
-            name,cron,query,database,result_url,timezone,delay,next_time,priority,retry_limit,org_name = m
-            return models.Schedule(self, name, cron, query, database, result_url, timezone, delay, next_time, priority, retry_limit, org_name)
-        return [ schedule(m) for m in result ]
+        return [ models.Schedule(self, m.get("name"), m.get("cron"), m.get("query"), **m) for m in result ]
 
     def update_schedule(self, name, params=None):
         """
diff --git a/tdclient/schedule_api.py b/tdclient/schedule_api.py
index 8d9ec3b..02e7106 100644
--- a/tdclient/schedule_api.py
+++ b/tdclient/schedule_api.py
@@ -50,17 +50,12 @@ class ScheduleAPI(object):
                 self.raise_error("List schedules failed", res, body)
             js = self.checked_json(body, ["schedules"])
             def schedule(m):
-                name = m.get("name")
-                cron = m.get("cron")
-                query = m.get("query")
-                database = m.get("database")
-                result_url = m.get("result")
-                timezone = m.get("timezone", "UTC")
-                delay = m.get("delay")
-                next_time = self._parsedate(self.get_or_else(m, "next_time", "1970-01-01T00:00:00Z"), "%Y-%m-%dT%H:%M:%SZ")
-                priority = m.get("priority")
-                retry_limit = m.get("retry_limit")
-                return (name, cron, query, database, result_url, timezone, delay, next_time, priority, retry_limit, None) # same as database
+                m = dict(m)
+                if "timezone" not in m:
+                    m["timezone"] = "UTC"
+                m["created_at"] = self._parsedate(self.get_or_else(m, "created_at", "1970-01-01T00:00:00Z"), "%Y-%m-%dT%H:%M:%SZ")
+                m["next_time"] = self._parsedate(self.get_or_else(m, "next_time", "1970-01-01T00:00:00Z"), "%Y-%m-%dT%H:%M:%SZ")
+                return m
             return [ schedule(m) for m in js["schedules"] ]
 
     def update_schedule(self, name, params=None):
diff --git a/tdclient/schedule_model.py b/tdclient/schedule_model.py
index 104550d..888ae08 100644
--- a/tdclient/schedule_model.py
+++ b/tdclient/schedule_model.py
@@ -24,19 +24,27 @@ class Schedule(Model):
     """Schedule on Treasure Data Service
     """
 
-    def __init__(self, client, name, cron, query, database=None, result_url=None, timezone=None, delay=None, next_time=None, priority=None, retry_limit=None, org_name=None):
+    def __init__(self, client, name, cron, query, **kwargs):
         super(Schedule, self).__init__(client)
         self._name = name
         self._cron = cron
+        self._timezone = kwargs.get("timezone")
+        self._delay = kwargs.get("delay")
+        self._created_at = kwargs.get("created_at")
+        self._type = kwargs.get("type")
         self._query = query
-        self._database = database
-        self._result_url = result_url
-        self._timezone = timezone
-        self._delay = delay
-        self._next_time = next_time
-        self._priority = priority
-        self._retry_limit = retry_limit
-        self._org_name = org_name
+        self._database = kwargs.get("database")
+        self._user_name = kwargs.get("user_name")
+        self._priority = kwargs.get("priority")
+        self._retry_limit = kwargs.get("retry_limit")
+        if "result_url" in kwargs:
+            # backward compatibility for td-client-python < 0.6.0
+            # TODO: remove this code if not necessary with fixing test
+            self._result = kwargs.get("result_url")
+        else:
+            self._result = kwargs.get("result")
+        self._next_time = kwargs.get("next_time")
+        self._org_name = kwargs.get("org_name")
 
     @property
     def name(self):
@@ -68,7 +76,7 @@ class Schedule(Model):
     def result_url(self):
         """The result output configuration in URL form of a scheduled job
         """
-        return self._result_url
+        return self._result
 
     @property
     def timezone(self):
@@ -88,7 +96,10 @@ class Schedule(Model):
     def priority(self):
         """The priority of a scheduled job
         """
-        return self._priority
+        if self._priority in Job.JOB_PRIORITY:
+            return Job.JOB_PRIORITY[self._priority]
+        else:
+            return str(self._priority)
 
     @property
     def retry_limit(self):
@@ -111,6 +122,27 @@ class Schedule(Model):
         """
         return self._next_time
 
+    @property
+    def created_at(self):
+        """
+        TODO: add docstring
+        """
+        return self._created_at
+
+    @property
+    def type(self):
+        """
+        TODO: add docstring
+        """
+        return self._type
+
+    @property
+    def user_name(self):
+        """
+        TODO: add docstring
+        """
+        return self._user_name
+
     def run(self, time, num=None):
         """Run a scheduled job
         """

