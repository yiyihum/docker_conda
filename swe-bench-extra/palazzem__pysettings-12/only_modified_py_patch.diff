diff --git a/pysettings/base.py b/pysettings/base.py
index 3fe864d..9a00916 100644
--- a/pysettings/base.py
+++ b/pysettings/base.py
@@ -1,3 +1,5 @@
+import copy
+
 from .options import Option
 from .exceptions import OptionNotAvailable, ConfigNotValid
 
@@ -25,7 +27,11 @@ class BaseSettings(object):
         for attr, value in self.__class__.__dict__.items():
             option = self._get_option(attr)
             if isinstance(option, Option):
+                # Store the attribute name in the options list and copy the
+                # Option object to avoid sharing the same instance across
+                # settings instances
                 self._options.append(attr)
+                object.__setattr__(self, attr, copy.deepcopy(option))
 
     def __setattr__(self, name, value):
         """Config attributes must be of type Option. This setattr() ensures that the
@@ -68,12 +74,18 @@ class BaseSettings(object):
         find the attribute. In that case it means the given attribute is not
         a configuration option that was defined as class attributes.
 
+        Internal attributes are still accessible.
+
         Args:
             name: the attribute name to retrieve.
         Raise:
             OptionNotAvailable: the configuration option is not present.
         """
-        raise OptionNotAvailable("the option is not present in the current config")
+        if name.startswith("__") and name.endswith("__"):
+            # Providing access to internal attributes is required for pickle and copy
+            return object.__getattribute__(self, name)
+        else:
+            raise OptionNotAvailable("the option is not present in the current config")
 
     def _get_option(self, name):
         """Retrieve the Option instance instead of proxying the call to retrieve

