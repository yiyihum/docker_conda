diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/conftest.py b/tests/conftest.py
new file mode 100644
index 0000000..57e8978
--- /dev/null
+++ b/tests/conftest.py
@@ -0,0 +1,11 @@
+import copy
+import pytest
+
+from .fixtures import settings as config
+
+
+@pytest.fixture
+def settings():
+    previous_config = copy.deepcopy(config.settings)
+    yield config.settings
+    config.settings = previous_config
diff --git a/tests/fixtures/__init__.py b/tests/fixtures/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/fixtures/settings.py b/tests/fixtures/settings.py
new file mode 100644
index 0000000..75761c9
--- /dev/null
+++ b/tests/fixtures/settings.py
@@ -0,0 +1,16 @@
+from pysettings.base import BaseSettings
+from pysettings.options import Option
+from pysettings.validators import is_https_url
+
+
+# Class definition
+class TestSettings(BaseSettings):
+    url = Option(validators=[is_https_url])
+    description = Option()
+
+
+# Use settings in your application
+settings = TestSettings()
+settings.url = "https://example.com"
+settings.description = "A shiny Website!"
+settings.is_valid()
diff --git a/tests/test_fixtures.py b/tests/test_fixtures.py
new file mode 100644
index 0000000..1e15763
--- /dev/null
+++ b/tests/test_fixtures.py
@@ -0,0 +1,10 @@
+def test_settings_changes_1(settings):
+    assert settings.description == "A shiny Website!"
+    settings.description = "Test 1"
+    assert settings.description == "Test 1"
+
+
+def test_settings_changes_2(settings):
+    assert settings.description == "A shiny Website!"
+    settings.description = "Test 2"
+    assert settings.description == "Test 2"
diff --git a/tests/test_settings.py b/tests/test_settings.py
index d00d0f9..b672d3f 100644
--- a/tests/test_settings.py
+++ b/tests/test_settings.py
@@ -1,4 +1,5 @@
 import pytest
+import copy
 
 from pysettings.base import BaseSettings
 from pysettings.options import Option
@@ -41,6 +42,18 @@ def test_config_get_value():
     assert config.home == "test"
 
 
+def test_config_instance():
+    """Should return a new instance of the config and not use the Class options"""
+
+    class SettingsTest(BaseSettings):
+        home = Option(default="klass")
+
+    config = SettingsTest()
+    config.home = "instance"
+    assert SettingsTest.home.value == "klass"
+    assert config.home == "instance"
+
+
 def test_config_set_value_not_available():
     """Should raise an exception if the option is not present"""
 
@@ -132,3 +145,33 @@ def test_config_is_not_valid_exception(mocker):
 
     with pytest.raises(ConfigNotValid):
         assert config.is_valid()
+
+
+def test_config_deepcopy():
+    """Should clone the configuration when deepcopy() is called"""
+
+    class SettingsTest(BaseSettings):
+        home = Option(default="original")
+
+    config = SettingsTest()
+    clone_config = copy.deepcopy(config)
+    clone_config.home = "clone"
+    # Should be different Settings
+    assert config != clone_config
+    assert config.home == "original"
+    assert clone_config.home == "clone"
+
+
+def test_config_copy():
+    """Should clone the configuration when copy() is called"""
+
+    class SettingsTest(BaseSettings):
+        home = Option(default="original")
+
+    config = SettingsTest()
+    clone_config = copy.copy(config)
+    clone_config.home = "shallow-copy"
+    # Should be different Settings but same Option (shallow copy)
+    assert config != clone_config
+    assert config.home == "shallow-copy"
+    assert clone_config.home == "shallow-copy"
