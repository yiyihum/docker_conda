diff --git a/sre_yield/tests/test_compatibility.py b/sre_yield/tests/test_compatibility.py
index 654b3c6..517c219 100644
--- a/sre_yield/tests/test_compatibility.py
+++ b/sre_yield/tests/test_compatibility.py
@@ -40,6 +40,7 @@ class CompatibilityTest(UnitTest):
         pat: str,
         max_length: int,
         expected_failure: bool = False,
+        relaxed: bool = False,
         m: Optional[List[str]] = None,
     ):
         # If this changes, some examples will need to be updated, especially
@@ -55,12 +56,16 @@ class CompatibilityTest(UnitTest):
             [
                 x
                 for x in sre_yield.AllStrings(
-                    pat, charset=charset, max_count=max_length
+                    pat, charset=charset, max_count=max_length, relaxed=relaxed
                 )
                 if len(x) <= max_length
             ],
             key=lambda i: (len(i), i),
         )
+        if relaxed:
+            # This test has no guardrails against having way too many matches
+            # that the caller should filter.
+            actual = [x for x in actual if pat_re.fullmatch(x)]
 
         # These document current behavior, even when it's wrong, and when they
         # start passing we want to know.
@@ -113,6 +118,34 @@ class CompatibilityTest(UnitTest):
     def test_anchors(self, pat: str, max_length: int) -> None:
         self._verify(pat, max_length)
 
+    @data_provider(
+        (
+            {"pat": r"(?=a)a", "max_length": 2},
+            {"pat": r"(?=a)a.", "max_length": 2},
+            {"pat": r"(?=a)b", "max_length": 2},
+            {"pat": r"(?=a).{3}", "max_length": 3},
+            {"pat": r"(?!a)a", "max_length": 2},
+            {"pat": r"(?!a)a.", "max_length": 2},
+            {"pat": r"(?!a)b", "max_length": 2},
+        )
+    )
+    def test_lookahead(
+        self, pat: str, max_length: int, expected_failure: bool = False
+    ) -> None:
+        self._verify(pat, max_length, expected_failure, relaxed=True)
+
+    @data_provider(
+        (
+            {"pat": r"\b.", "max_length": 2},
+            {"pat": r"[a-]\b[a-]", "max_length": 2, "m": ["-a", "a-"]},
+            {"pat": r"^.", "max_length": 2, "m": ["-", "a", "b", "c"]},
+            # This only passes because _verify does filtering
+            {"pat": r"^\b.", "max_length": 2, "m": ["a", "b", "c"]},
+        )
+    )
+    def test_boundary(self, **kwargs) -> None:
+        self._verify(relaxed=True, **kwargs)
+
 
 if __name__ == "__main__":
     unittest.main()
diff --git a/sre_yield/tests/test_sre_yield.py b/sre_yield/tests/test_sre_yield.py
index 3027058..9d54183 100644
--- a/sre_yield/tests/test_sre_yield.py
+++ b/sre_yield/tests/test_sre_yield.py
@@ -18,6 +18,7 @@
 import codecs
 import io
 import re
+import sre_parse
 import sys
 import unittest
 
@@ -113,6 +114,28 @@ class YieldTest(unittest.TestCase):
         self.assertTrue("0101" in parsed)
         self.assertFalse("0201" in parsed)
 
+    def testPreparsedInstantiation(self):
+        self.assertSequenceEqual(sre_yield.AllStrings(r"(?:[aeiou])\Z"), list("aeiou"))
+        preparsed = sre_parse.parse("[aeiou]")
+        self.assertSequenceEqual(sre_yield.AllStrings(preparsed), list("aeiou"))
+        preparsed = sre_parse.parse(r"(?:[aeiou])\Z")
+        self.assertSequenceEqual(sre_yield.AllStrings(preparsed), list("aeiou"))
+
+        preparsed = sre_parse.parse("[01]+")
+        parsed = sre_yield.AllStrings(preparsed)
+        self.assertTrue("0101" in parsed)
+        self.assertFalse("0201" in parsed)
+
+        preparsed = sre_parse.parse("[01]+")
+        parsed = sre_yield.AllStrings(preparsed)
+        self.assertTrue("0101" in parsed)
+        self.assertFalse("0201" in parsed)
+
+        preparsed = sre_parse.parse(r"(?:[01]+)\Z")
+        parsed = sre_yield.AllStrings(preparsed)
+        self.assertTrue("0101" in parsed)
+        self.assertFalse("0201" in parsed)
+
     def testNaturalOrder(self):
         parsed = sre_yield.AllStrings("[0-9]{2}")
         self.assertEqual(parsed[0], "00")
