diff --git a/changelog.d/20220812_190404_benjaminpoldrack_fix_push_patch.md b/changelog.d/20220812_190404_benjaminpoldrack_fix_push_patch.md
new file mode 100644
index 0000000..b092504
--- /dev/null
+++ b/changelog.d/20220812_190404_benjaminpoldrack_fix_push_patch.md
@@ -0,0 +1,7 @@
+### üêõ Bug Fixes
+
+- Fixed datalad-push always reporting success when pushing to
+  an export remote.
+  Fixes https://github.com/datalad/datalad-next/issues/88 via
+  https://github.com/datalad/datalad-next/pull/93 (by @bpoldrack)
+
diff --git a/datalad_next/patches/push_to_export_remote.py b/datalad_next/patches/push_to_export_remote.py
index d6b82ed..432f209 100644
--- a/datalad_next/patches/push_to_export_remote.py
+++ b/datalad_next/patches/push_to_export_remote.py
@@ -167,6 +167,8 @@ def _transfer_data(repo: AnnexRepo,
         )
         return
 
+    from datalad.interface.results import annexjson2result
+
     # TODO:
     #  - check for configuration entries, e.g. what to export
 
@@ -221,12 +223,13 @@ def _transfer_data(repo: AnnexRepo,
                 ],
                 progress=True
             ):
-                yield {
-                    **res_kwargs,
-                    "action": "copy",
-                    "status": "ok",
-                    "path": str(Path(res_kwargs["path"]) / result["file"])
-                }
+                result_adjusted = \
+                    annexjson2result(result, ds, **res_kwargs)
+                # annexjson2result overwrites 'action' with annex' 'command',
+                # even if we provided our 'action' within res_kwargs. Therefore,
+                # change afterwards instead:
+                result_adjusted['action'] = "copy"
+                yield result_adjusted
 
         except CommandError as cmd_error:
             ce = CapturedException(cmd_error)
diff --git a/docs/policy/release-management.md b/docs/policy/release-management.md
new file mode 100644
index 0000000..fdf9313
--- /dev/null
+++ b/docs/policy/release-management.md
@@ -0,0 +1,15 @@
+# Release team
+
+The release team (RT) is an charge reviewing merge requests, and issuing new releases.
+
+The members of the RT are defined in `docs/CODEOWNERS` in the `main` branch of the repository.
+
+The RT itself adds or removes RT members.
+
+It is the RT's duty to act on any merge request in a timely manner.
+
+A code review of at least one RT member is required for any changeset to be merged into the `main` branch.
+
+When all technical checks pass (e.g., CI success, resolved pull-request conversations), any RT member approval is a sufficient condition for an (automatic) merge of a changeset into the `main` branch.
+
+RT members are not expected to be an expert in all techniques, features, and parts of the code base. Consequently, a team member should seek feedback prior to approving merge requests whenever necessary.
