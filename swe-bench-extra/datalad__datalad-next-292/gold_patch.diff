diff --git a/datalad_next/commands/download.py b/datalad_next/commands/download.py
index 03d464b..4f91ccd 100644
--- a/datalad_next/commands/download.py
+++ b/datalad_next/commands/download.py
@@ -8,7 +8,6 @@ from pathlib import (
     Path,
     PurePosixPath,
 )
-from typing import Dict
 from urllib.parse import urlparse
 
 import datalad
@@ -27,6 +26,7 @@ from datalad_next.exceptions import (
 )
 from datalad_next.utils import ensure_list
 from datalad_next.constraints import (
+    AnyOf,
     EnsureChoice,
     EnsureGeneratorFromFileLike,
     EnsureJSON,
@@ -34,10 +34,8 @@ from datalad_next.constraints import (
     EnsureMapping,
     EnsurePath,
     EnsureURL,
-    EnsureParsedURL,
     EnsureValue,
 )
-from datalad_next.constraints.base import AltConstraints
 from datalad_next.constraints.dataset import EnsureDataset
 from datalad_next.url_operations.any import AnyUrlOperations
 
@@ -127,10 +125,7 @@ class Download(ValidatedInterface):
     # - a single item
     # - as a list of items
     # - a list given in a file, or via stdin (or any file-like in Python)
-    #
-    # Must not OR: https://github.com/datalad/datalad/issues/7164
-    #spec=spec_item_constraint | EnsureListOf(spec_item_constraint)# \
-    spec_constraint = AltConstraints(
+    spec_constraint = AnyOf(
         spec_item_constraint,
         EnsureListOf(spec_item_constraint),
         EnsureGeneratorFromFileLike(
diff --git a/datalad_next/constraints/__init__.py b/datalad_next/constraints/__init__.py
index 1791ded..e6e97e0 100644
--- a/datalad_next/constraints/__init__.py
+++ b/datalad_next/constraints/__init__.py
@@ -13,7 +13,12 @@
    dataset
    exceptions
 """
-
+from .base import (
+    AllOf,
+    AnyOf,
+    Constraint,
+    DatasetParameter,
+)
 # expose constraints with direct applicability, but not
 # base and helper classes
 from .basic import (
diff --git a/datalad_next/constraints/base.py b/datalad_next/constraints/base.py
index 6603aa4..78cd888 100644
--- a/datalad_next/constraints/base.py
+++ b/datalad_next/constraints/base.py
@@ -5,8 +5,7 @@ from __future__ import annotations
 
 __docformat__ = 'restructuredtext'
 
-__all__ = ['Constraint', 'Constraints', 'AltConstraints',
-           'DatasetParameter']
+__all__ = ['Constraint', 'AllOf', 'AnyOf', 'DatasetParameter']
 
 from .exceptions import ConstraintError
 
@@ -53,10 +52,10 @@ class Constraint:
             raise ConstraintError(self, value, msg)
 
     def __and__(self, other):
-        return Constraints(self, other)
+        return AllOf(self, other)
 
     def __or__(self, other):
-        return AltConstraints(self, other)
+        return AnyOf(self, other)
 
     def __call__(self, value):
         # do any necessary checks or conversions, potentially catch exceptions
@@ -115,7 +114,7 @@ class _MultiConstraint(Constraint):
             return doc
 
 
-class AltConstraints(_MultiConstraint):
+class AnyOf(_MultiConstraint):
     """Logical OR for constraints.
 
     An arbitrary number of constraints can be given. They are evaluated in the
@@ -134,11 +133,12 @@ class AltConstraints(_MultiConstraint):
         super().__init__(*constraints)
 
     def __or__(self, other):
-        if isinstance(other, AltConstraints):
-            self.constraints.extend(other.constraints)
+        constraints = list(self.constraints)
+        if isinstance(other, AnyOf):
+            constraints.extend(other.constraints)
         else:
-            self.constraints.append(other)
-        return self
+            constraints.append(other)
+        return AnyOf(*constraints)
 
     def __call__(self, value):
         e_list = []
@@ -159,7 +159,7 @@ class AltConstraints(_MultiConstraint):
         return self._get_description('short_description', 'or')
 
 
-class Constraints(_MultiConstraint):
+class AllOf(_MultiConstraint):
     """Logical AND for constraints.
 
     An arbitrary number of constraints can be given. They are evaluated in the
@@ -179,11 +179,12 @@ class Constraints(_MultiConstraint):
         super().__init__(*constraints)
 
     def __and__(self, other):
-        if isinstance(other, Constraints):
-            self.constraints.extend(other.constraints)
+        constraints = list(self.constraints)
+        if isinstance(other, AllOf):
+            constraints.extend(other.constraints)
         else:
-            self.constraints.append(other)
-        return self
+            constraints.append(other)
+        return AllOf(*constraints)
 
     def __call__(self, value):
         for c in (self.constraints):
@@ -195,3 +196,9 @@ class Constraints(_MultiConstraint):
 
     def short_description(self):
         return self._get_description('short_description', 'and')
+
+
+# keep for backward compatibility
+Constraints = AllOf
+AltConstraints = AnyOf
+
