diff --git a/spikeinterface/core/base.py b/spikeinterface/core/base.py
index 7775dfae9..c210cc4c5 100644
--- a/spikeinterface/core/base.py
+++ b/spikeinterface/core/base.py
@@ -24,6 +24,8 @@ class BaseExtractor:
 
     """
 
+    default_missing_property_values = {"f": np.nan, "O": None, "S": "", "U": ""}
+
     # This replaces the old key_properties
     # These are annotations/properties/features that always need to be
     # dumped (for instance locations, groups, is_fileterd, etc.)
@@ -174,7 +176,6 @@ class BaseExtractor:
             it specifies the how the missing values should be filled, by default None.
             The missing_value has to be specified for types int and unsigned int.
         """
-        default_missing_values = {"f": np.nan, "O": None, "S": "", "U": ""}
         
         if values is None:
             if key in self._properties:
@@ -200,12 +201,12 @@ class BaseExtractor:
                     
         
                     if missing_value is None:
-                        if dtype_kind not in default_missing_values.keys():
-                            raise Exception("For values dtypes other than float, string or unicode, the missing value "
+                        if dtype_kind not in self.default_missing_property_values.keys():
+                            raise Exception("For values dtypes other than float, string, object or unicode, the missing value "
                                             "cannot be automatically inferred. Please specify it with the 'missing_value' "
                                             "argument.")
                         else:
-                            missing_value = default_missing_values[dtype_kind]
+                            missing_value = self.default_missing_property_values[dtype_kind]
                     else:
                         assert dtype_kind == np.array(missing_value).dtype.kind, ("Mismatch between values and "
                                                                                   "missing_value types. Provide a "
diff --git a/spikeinterface/core/unitsaggregationsorting.py b/spikeinterface/core/unitsaggregationsorting.py
index d36409145..c91bcafb9 100644
--- a/spikeinterface/core/unitsaggregationsorting.py
+++ b/spikeinterface/core/unitsaggregationsorting.py
@@ -3,6 +3,7 @@ import warnings
 import numpy as np
 
 from .core_tools import define_function_from_class
+from .base import BaseExtractor
 from .basesorting import BaseSorting, BaseSortingSegment
 
 
@@ -51,23 +52,48 @@ class UnitsAggregationSorting(BaseSorting):
 
         BaseSorting.__init__(self, sampling_frequency, unit_ids)
 
-        property_keys = sorting_list[0].get_property_keys()
+        annotation_keys = sorting_list[0].get_annotation_keys()
+        for annotation_name in annotation_keys:
+            if not all([annotation_name in sort.get_annotation_keys() for sort in sorting_list]):
+                continue
+
+            annotations = np.array([sort.get_annotation(annotation_name, copy=False) for sort in sorting_list])
+            if np.all(annotations == annotations[0]):
+                self.set_annotation(annotation_name, sorting_list[0].get_annotation(annotation_name))
+
+        property_keys = {}
         property_dict = {}
+        deleted_keys = []
+        for sort in sorting_list:
+            for prop_name in sort.get_property_keys():
+                if prop_name in deleted_keys:
+                    continue
+                if prop_name in property_keys:
+                    if property_keys[prop_name] != sort.get_property(prop_name).dtype:
+                        print(f"Skipping property '{prop_name}: difference in dtype between sortings'")
+                        del property_keys[prop_name]
+                        deleted_keys.append(prop_name)
+                else:
+                    property_keys[prop_name] = sort.get_property(prop_name).dtype
         for prop_name in property_keys:
-            if all([prop_name in sort.get_property_keys() for sort in sorting_list]):
-                for i_s, sort in enumerate(sorting_list):
-                    prop_value = sort.get_property(prop_name)
-                    if i_s == 0:
-                        property_dict[prop_name] = prop_value
-                    else:
-                        try:
-                            property_dict[prop_name] = np.concatenate((property_dict[prop_name],
-                                                                       sort.get_property(prop_name)))
-                        except Exception as e:
-                            print(f"Skipping property '{prop_name}' for shape inconsistency")
-                            del property_dict[prop_name]
-                            break
-
+            dtype = property_keys[prop_name]
+            property_dict[prop_name] = np.array([], dtype=dtype)
+
+            for sort in sorting_list:
+                if prop_name in sort.get_property_keys():
+                    values = sort.get_property(prop_name)
+                else:
+                    if dtype.kind not in BaseExtractor.default_missing_property_values:
+                        del property_dict[prop_name]
+                        break
+                    values = np.full(sort.get_num_units(), BaseExtractor.default_missing_property_values[dtype.kind], dtype=dtype)
+
+                try:
+                    property_dict[prop_name] = np.concatenate((property_dict[prop_name], values))
+                except Exception as e:
+                    print(f"Skipping property '{prop_name}' for shape inconsistency")
+                    del property_dict[prop_name]
+                    break
         for prop_name, prop_values in property_dict.items():
             self.set_property(key=prop_name, values=prop_values)
 
