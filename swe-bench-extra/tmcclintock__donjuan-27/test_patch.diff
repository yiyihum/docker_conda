diff --git a/tests/cell_test.py b/tests/cell_test.py
index d5a1437..0dbee62 100644
--- a/tests/cell_test.py
+++ b/tests/cell_test.py
@@ -22,6 +22,14 @@ class SquareCellTest(TestCase):
         c = SquareCell()
         assert c.n_sides == 4
 
+    def test_coordinates(self):
+        c = SquareCell()
+        assert c.coordinates is None
+        c.set_coordinates(1, 2)
+        assert c.coordinates == (1, 2)
+        assert c.x == 1
+        assert c.y == 2
+
 
 class HexCellTest(TestCase):
     def test_smoke(self):
@@ -35,3 +43,11 @@ class HexCellTest(TestCase):
     def test_n_sides(self):
         c = HexCell()
         assert c.n_sides == 6
+
+    def test_coordinates(self):
+        c = HexCell()
+        assert c.coordinates is None
+        c.set_coordinates(1, 2)
+        assert c.coordinates == (1, 2)
+        assert c.x == 1
+        assert c.y == 2
diff --git a/tests/dungeon_test.py b/tests/dungeon_test.py
index f4649a9..733ba44 100644
--- a/tests/dungeon_test.py
+++ b/tests/dungeon_test.py
@@ -1,6 +1,6 @@
 from unittest import TestCase
 
-from donjuan import Dungeon, SquareGrid
+from donjuan import Dungeon, HexGrid, SquareGrid
 
 
 class DungeonTest(TestCase):
@@ -8,6 +8,17 @@ class DungeonTest(TestCase):
         d = Dungeon()
         assert d is not None
 
+    def test_initial_attributes(self):
+        d = Dungeon()
+        assert d.rooms == {}
+
+    def test_hex_grid(self):
+        hg = HexGrid(4, 5)
+        d = Dungeon(grid=hg)
+        assert isinstance(d.grid, HexGrid)
+        assert d.grid.n_rows == 4
+        assert d.grid.n_cols == 5
+
     def test_pass_dimensions(self):
         d = Dungeon(n_rows=4, n_cols=5)
         assert d.grid.n_rows == 4
diff --git a/tests/grid_test.py b/tests/grid_test.py
index d1bd39e..b0f5d0f 100644
--- a/tests/grid_test.py
+++ b/tests/grid_test.py
@@ -20,24 +20,41 @@ class SquareGridTest(TestCase):
         assert sg.n_rows == 5
         assert isinstance(sg.cells[0][0], SquareCell)
 
+    def test_cell_coordinates(self):
+        sg = SquareGrid(5, 4)
+        for i in range(sg.n_rows):
+            for j in range(sg.n_cols):
+                assert sg.cells[i][j].coordinates == (i, j)
+
     def test_get_filled_grid(self):
-        sg = SquareGrid(5, 5)
+        sg = SquareGrid(5, 4)
         fg = sg.get_filled_grid()
         assert all(fg)
 
     def test_get_filled_grid_some_unfilled(self):
-        sg = SquareGrid(5, 5)
+        sg = SquareGrid(5, 4)
         for i in range(5):
             sg.cells[i][3].filled = True
         fg = sg.get_filled_grid()
         for i in range(5):
-            for j in range(5):
+            for j in range(4):
                 assert fg[i][j] == sg.cells[i][j].filled, (i, j)
                 if j != 3:
                     assert not fg[i][j], (i, j)
                 else:
                     assert fg[i][j], (i, j)
 
+    def test_reset_cell_coordinates(self):
+        cells = [[SquareCell() for i in range(4)] for j in range(5)]
+        sg = SquareGrid.from_cells(cells)
+        for i in range(sg.n_rows):
+            for j in range(sg.n_cols):
+                assert sg.cells[i][j].coordinates is None
+        sg.reset_cell_coordinates()
+        for i in range(sg.n_rows):
+            for j in range(sg.n_cols):
+                assert sg.cells[i][j].coordinates == (i, j)
+
 
 class HexGridTest(TestCase):
     def test_smoke(self):
diff --git a/tests/room_test.py b/tests/room_test.py
new file mode 100644
index 0000000..8d7e5fa
--- /dev/null
+++ b/tests/room_test.py
@@ -0,0 +1,34 @@
+from copy import deepcopy
+from unittest import TestCase
+
+import pytest
+
+from donjuan import Room, SquareCell
+
+
+class RoomTest(TestCase):
+    def test_smoke(self):
+        r = Room()
+        assert r is not None
+        assert r.cells == [[]]
+
+    def test_assert_cell_coords(self):
+        c = SquareCell()
+        with pytest.raises(AssertionError):
+            Room(cells=[[c]])
+
+    def test_overlaps(self):
+        cs = [[SquareCell(coordinates=(i, j)) for j in range(5)] for i in range(4)]
+        r1 = Room(cs)
+        r2 = Room(deepcopy(cs))
+        assert r1.overlaps(r2)
+
+    def test_no_overlap(self):
+        cs = [[SquareCell(coordinates=(i, j)) for j in range(5)] for i in range(4)]
+        r1 = Room(cs)
+        cs2 = deepcopy(cs)
+        for i in range(len(cs)):
+            for j in range(len(cs[0])):
+                cs2[i][j].set_coordinates(100 + i, j)
+        r2 = Room(cs2)
+        assert not r1.overlaps(r2)
