diff --git a/src/elcaminoreal/test/some_plugins.py b/src/elcaminoreal/test/some_plugins.py
index a885594..9507b74 100644
--- a/src/elcaminoreal/test/some_plugins.py
+++ b/src/elcaminoreal/test/some_plugins.py
@@ -21,6 +21,18 @@ def a_foo(dependencies, _possible_dependencies):
     return dict(bar=dependencies['bar'])
 
 
+@COMMANDS.dependency(dependencies=["bar", "quux"],
+                     possible_dependencies=["foo"],
+                     regular=True)
+def regular(bar, quux, build_foo):
+    """
+    Depend on bar, maybe on foo
+
+    Use regular arguments.
+    """
+    return dict(bar=bar, quux=quux, foo=build_foo())
+
+
 @COMMANDS.dependency(possible_dependencies=["bar"])
 def foo_2(_dependencies, possible_dependencies):
     """
@@ -37,6 +49,14 @@ def a_bar(_dependencies, _possible_dependencies):
     return "I'm a bar"
 
 
+@COMMANDS.dependency(name="quux")
+def a_quux(_dependencies, _possible_dependencies):
+    """
+    Return a quux-like object.
+    """
+    return "I'm a quux"
+
+
 @COMMANDS.dependency()
 def rand(_dependencies, _possible_dependencies):
     """
@@ -83,6 +103,28 @@ def _print(_dependencies, _possible_dependencies):
     return print
 
 
+@COMMANDS.dependency(name='output')
+def dummy_output(_dependencies, _possible_dependencies):
+    """
+    Literally do nothing.
+
+    This is designed for being overridden.
+    """
+
+
+@COMMANDS.command(dependencies=['foo', 'output'],
+                  parser=ca.command('',
+                                    ca.positional('lili', type=str)),
+                  regular=True)
+def regular_command(foo, lili, output):
+    """
+    Use regular arguments
+
+    Output results
+    """
+    output(foo, lili)
+
+
 @COMMANDS.command(dependencies=['foo', 'print'],
                   parser=ca.command('',
                                     ca.positional('lala', type=str)))
diff --git a/src/elcaminoreal/test/test_gathering.py b/src/elcaminoreal/test/test_gathering.py
index 8049cd1..7ec2028 100644
--- a/src/elcaminoreal/test/test_gathering.py
+++ b/src/elcaminoreal/test/test_gathering.py
@@ -46,6 +46,15 @@ class DependencyResolverTester(unittest.TestCase):
         result = some_plugins.COMMANDS.mkgraph(['foo_2'])
         self.assertEquals(result['foo_2'], dict(bar="I'm a bar"))
 
+    def test_mkgraph_regular(self):
+        """
+        mkgraph regular functions work
+        """
+        result = some_plugins.COMMANDS.mkgraph(['regular'])
+        self.assertEquals(result['regular']['bar'], result['bar'])
+        self.assertEquals(result['regular']['quux'], result['quux'])
+        self.assertEquals(result['regular']['foo'], result['foo'])
+
 
 class RunnerResolverTester(unittest.TestCase):
 
@@ -100,3 +109,18 @@ class RunnerResolverTester(unittest.TestCase):
             some_plugins.COMMANDS.run(['no-such-command'])
         error_message = filep.getvalue().splitlines()
         self.assertEquals(error_message.pop(0), 'Usage:')
+
+    def test_regular(self):
+        """
+        Asking for regular arguments calls functions with argument names
+        """
+        output = []
+
+        def _my_output(*args):
+            output.append(args)
+        dependencies = dict(output=_my_output)
+        some_plugins.COMMANDS.run(['regular-command', 'thing'],
+                                  override_dependencies=dependencies)
+        self.assertEquals(len(output), 1)
+        self.assertEquals(output[0][0]['bar'], "I'm a bar")
+        self.assertEquals(output[0][1], 'thing')
