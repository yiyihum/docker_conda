diff --git a/tests/test_validation/input/Person-02.yaml b/tests/test_validation/input/Person-02.yaml
new file mode 100644
index 00000000..6aa60c50
--- /dev/null
+++ b/tests/test_validation/input/Person-02.yaml
@@ -0,0 +1,15 @@
+id: P:004
+name: eventful life
+has_events:
+  - employed_at: ROR:1
+    started_at_time: "2019-01-01"
+    is_current: true
+  - started_at_time: "2023-01-01"
+    in_location: GEO:1234
+    diagnosis:
+      id: CODE:P1789
+      name: hypertension
+    procedure:
+      id: CODE:P1846
+      name: valve repair
+
diff --git a/tests/test_validation/input/kitchen_sink.yaml b/tests/test_validation/input/kitchen_sink.yaml
index ea0b5b7b..ac7aaeb5 100644
--- a/tests/test_validation/input/kitchen_sink.yaml
+++ b/tests/test_validation/input/kitchen_sink.yaml
@@ -74,6 +74,7 @@ classes:
       - age in years
       - addresses
       - has birth event
+      - has events
     slot_usage:
       name:
         pattern: "^\\S+ \\S+"  ## do not do this in a real schema, people have all kinds of names
@@ -240,6 +241,10 @@ slots:
   city:
   has birth event:
     range: BirthEvent
+  has events:
+    multivalued: True
+    range: Event
+    inlined_as_list: true
 
 enums:
   FamilialRelationshipType:
diff --git a/tests/test_validation/test_jsonschemavalidation.py b/tests/test_validation/test_jsonschemavalidation.py
index 30981d22..a7968595 100644
--- a/tests/test_validation/test_jsonschemavalidation.py
+++ b/tests/test_validation/test_jsonschemavalidation.py
@@ -16,6 +16,7 @@ SCHEMA = env.input_path("kitchen_sink.yaml")
 DATASET_1 = env.input_path("Dataset-01.yaml")
 DATASET_2 = env.input_path("Dataset-02.yaml")
 PERSON_1 = env.input_path("Person-01.yaml")
+PERSON_2 = env.input_path("Person-02.yaml")
 PERSON_INVALID_1 = env.input_path("Person-invalid-01.yaml")
 
 
@@ -48,6 +49,35 @@ class JsonSchemaValidatorTestCase(unittest.TestCase):
         result = validator.validate_dict(obj, "Person")
         self.assertIsNone(result)
 
+        with open(PERSON_2) as file:
+            obj = yaml.safe_load(file)
+
+        with self.assertRaises(JsonSchemaDataValidatorError) as ctx:
+            validator.validate_dict(obj, "Person")
+
+        with open(PERSON_INVALID_1) as file:
+            obj = yaml.safe_load(file)
+
+        with self.assertRaises(JsonSchemaDataValidatorError) as ctx:
+            validator.validate_dict(obj, "Person")
+
+        messages = ctx.exception.validation_messages
+        self.assertEqual(len(messages), 1)
+        self.assertIn("name", messages[0])
+
+    def test_validate_dict_including_descendants(self):
+        validator = JsonSchemaDataValidator(schema=SCHEMA, include_range_class_descendants=True)
+
+        with open(PERSON_1) as file:
+            obj = yaml.safe_load(file)
+        result = validator.validate_dict(obj, "Person")
+        self.assertIsNone(result)
+
+        with open(PERSON_2) as file:
+            obj = yaml.safe_load(file)
+        result = validator.validate_dict(obj, "Person")
+        self.assertIsNone(result)
+
         with open(PERSON_INVALID_1) as file:
             obj = yaml.safe_load(file)
 
