diff --git a/traits_futures/tests/background_call_tests.py b/traits_futures/tests/background_call_tests.py
index 62661ed..d79c0e3 100644
--- a/traits_futures/tests/background_call_tests.py
+++ b/traits_futures/tests/background_call_tests.py
@@ -292,7 +292,7 @@ class BackgroundCallTests:
             future.result
 
     def assertException(self, future, exc_type):
-        self.assertEqual(future.exception[0], str(exc_type))
+        self.assertIn(exc_type.__name__, future.exception[0])
 
     def assertNoException(self, future):
         with self.assertRaises(AttributeError):
diff --git a/traits_futures/tests/background_iteration_tests.py b/traits_futures/tests/background_iteration_tests.py
index 754740f..bc78e8e 100644
--- a/traits_futures/tests/background_iteration_tests.py
+++ b/traits_futures/tests/background_iteration_tests.py
@@ -448,7 +448,7 @@ class BackgroundIterationTests:
             future.result
 
     def assertException(self, future, exc_type):
-        self.assertEqual(future.exception[0], str(exc_type))
+        self.assertIn(exc_type.__name__, future.exception[0])
 
     def assertNoException(self, future):
         with self.assertRaises(AttributeError):
diff --git a/traits_futures/tests/background_progress_tests.py b/traits_futures/tests/background_progress_tests.py
index 9f8c5a6..9d11bd6 100644
--- a/traits_futures/tests/background_progress_tests.py
+++ b/traits_futures/tests/background_progress_tests.py
@@ -332,4 +332,4 @@ class BackgroundProgressTests:
             future.exception
 
     def assertException(self, future, exc_type):
-        self.assertEqual(future.exception[0], str(exc_type))
+        self.assertIn(exc_type.__name__, future.exception[0])
diff --git a/traits_futures/tests/test_exception_handling.py b/traits_futures/tests/test_exception_handling.py
index 6de33ed..894e4c1 100644
--- a/traits_futures/tests/test_exception_handling.py
+++ b/traits_futures/tests/test_exception_handling.py
@@ -13,6 +13,10 @@ import unittest
 from traits_futures.exception_handling import marshal_exception
 
 
+class CustomException(Exception):
+    """Custom exception for testing purposes."""
+
+
 class TestExceptionHandling(unittest.TestCase):
     def test_marshal_exception(self):
         try:
@@ -25,7 +29,7 @@ class TestExceptionHandling(unittest.TestCase):
         self.assertIsInstance(exc_value, str)
         self.assertIsInstance(exc_traceback, str)
 
-        self.assertEqual(exc_type, str(RuntimeError))
+        self.assertEqual(exc_type, "RuntimeError")
         self.assertIn("something went wrong", exc_value)
         self.assertIn("test_marshal_exception", exc_traceback)
 
@@ -41,7 +45,7 @@ class TestExceptionHandling(unittest.TestCase):
         self.assertIsInstance(exc_value, str)
         self.assertIsInstance(exc_traceback, str)
 
-        self.assertEqual(exc_type, str(ValueError))
+        self.assertEqual(exc_type, "ValueError")
         self.assertIn(message, exc_value)
         self.assertIn("test_marshal_exception", exc_traceback)
 
@@ -59,6 +63,41 @@ class TestExceptionHandling(unittest.TestCase):
         self.assertIsInstance(exc_value, str)
         self.assertIsInstance(exc_traceback, str)
 
-        self.assertEqual(exc_type, str(RuntimeError))
+        self.assertEqual(exc_type, "RuntimeError")
         self.assertIn("something went wrong", exc_value)
         self.assertIn("test_marshal_exception", exc_traceback)
+
+    def test_marshal_exception_non_builtin(self):
+        message = "printer on fire"
+        try:
+            raise CustomException(message)
+        except BaseException as exception:
+            marshalled = marshal_exception(exception)
+
+        exc_type, exc_value, exc_traceback = marshalled
+        self.assertIsInstance(exc_type, str)
+        self.assertIsInstance(exc_value, str)
+        self.assertIsInstance(exc_traceback, str)
+
+        self.assertEqual(
+            exc_type,
+            f"{__name__}.CustomException",
+        )
+        self.assertIn(message, exc_value)
+        self.assertIn("test_marshal_exception", exc_traceback)
+
+    def test_marshal_exception_nested_exception(self):
+        class NestedException(Exception):
+            pass
+
+        try:
+            raise NestedException()
+        except BaseException as exception:
+            marshalled = marshal_exception(exception)
+
+        exc_type, exc_value, exc_traceback = marshalled
+        self.assertEqual(
+            exc_type,
+            f"{__name__}.TestExceptionHandling."
+            "test_marshal_exception_nested_exception.<locals>.NestedException",
+        )
