diff --git a/traits_futures/exception_handling.py b/traits_futures/exception_handling.py
index c382978..1165b38 100644
--- a/traits_futures/exception_handling.py
+++ b/traits_futures/exception_handling.py
@@ -14,6 +14,34 @@ Support for transferring exception information from a background task.
 import traceback
 
 
+def _qualified_type_name(class_):
+    """
+    Compute a descriptive string representing a class, including
+    a module name where relevant.
+
+    Example outputs are "RuntimeError" for the built-in RuntimeError
+    exception, or "struct.error" for the struct module exception class.
+
+    Parameters
+    ----------
+    class_ : type
+
+    Returns
+    -------
+    class_name : str
+    """
+    # We're being extra conservative here and allowing for the possibility that
+    # the class doesn't have __module__ and/or __qualname__ attributes. This
+    # function is called during exception handling, so we want to minimise the
+    # possibility that it raises a new exception.
+    class_module = getattr(class_, "__module__", "<unknown>")
+    class_qualname = getattr(class_, "__qualname__", "<unknown>")
+    if class_module == "builtins":
+        return f"{class_qualname}"
+    else:
+        return f"{class_module}.{class_qualname}"
+
+
 def marshal_exception(exception):
     """
     Turn exception details into something that can be safely
@@ -31,7 +59,7 @@ def marshal_exception(exception):
         formatted traceback.
     """
     return (
-        str(type(exception)),
+        _qualified_type_name(type(exception)),
         str(exception),
         "".join(
             traceback.format_exception(

