diff --git a/starlette/testclient.py b/starlette/testclient.py
index 2f901c1..53afb45 100644
--- a/starlette/testclient.py
+++ b/starlette/testclient.py
@@ -126,6 +126,7 @@ class _ASGIAdapter(requests.adapters.HTTPAdapter):
             "headers": headers,
             "client": ["testclient", 50000],
             "server": [host, port],
+            "extensions": {"http.response.template": {}},
         }
 
         async def receive() -> Message:
@@ -147,7 +148,7 @@ class _ASGIAdapter(requests.adapters.HTTPAdapter):
             return {"type": "http.request", "body": body_bytes}
 
         async def send(message: Message) -> None:
-            nonlocal raw_kwargs, response_started, response_complete
+            nonlocal raw_kwargs, response_started, response_complete, template, context
 
             if message["type"] == "http.response.start":
                 assert (
@@ -177,10 +178,15 @@ class _ASGIAdapter(requests.adapters.HTTPAdapter):
                 if not more_body:
                     raw_kwargs["body"].seek(0)
                     response_complete = True
+            elif message["type"] == "http.response.template":
+                template = message["template"]
+                context = message["context"]
 
         response_started = False
         response_complete = False
         raw_kwargs = {"body": io.BytesIO()}  # type: typing.Dict[str, typing.Any]
+        template = None
+        context = None
 
         try:
             loop = asyncio.get_event_loop()
@@ -209,7 +215,11 @@ class _ASGIAdapter(requests.adapters.HTTPAdapter):
             }
 
         raw = requests.packages.urllib3.HTTPResponse(**raw_kwargs)
-        return self.build_response(request, raw)
+        response = self.build_response(request, raw)
+        if template is not None:
+            response.template = template
+            response.context = context
+        return response
 
 
 class WebSocketTestSession:
diff --git a/tests/test_responses.py b/tests/test_responses.py
index e68958e..0b79051 100644
--- a/tests/test_responses.py
+++ b/tests/test_responses.py
@@ -11,6 +11,7 @@ from starlette.responses import (
     RedirectResponse,
     Response,
     StreamingResponse,
+    TemplateResponse,
     UJSONResponse,
 )
 from starlette.testclient import TestClient
@@ -243,3 +244,34 @@ def test_delete_cookie():
     assert response.cookies["mycookie"]
     response = client.get("/")
     assert not response.cookies.get("mycookie")
+
+
+def test_template_response():
+    def app(scope):
+        request = Request(scope)
+
+        class Template:
+            def __init__(self, name):
+                self.name = name
+
+            def render(self, context):
+                return "username: %s" % context["username"]
+
+        async def asgi(receive, send):
+            template = Template("index.html")
+            context = {"username": "tomchristie", "request": request}
+            response = TemplateResponse(template, context)
+            await response(receive, send)
+
+        return asgi
+
+    client = TestClient(app)
+    response = client.get("/")
+    assert response.text == "username: tomchristie"
+    assert response.template.name == "index.html"
+    assert response.context["username"] == "tomchristie"
+
+
+def test_template_response_requires_request():
+    with pytest.raises(ValueError):
+        TemplateResponse(None, {})
