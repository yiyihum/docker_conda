diff --git a/src/streamlink/plugins/linelive.py b/src/streamlink/plugins/linelive.py
index 24a2c33b..e524a32c 100644
--- a/src/streamlink/plugins/linelive.py
+++ b/src/streamlink/plugins/linelive.py
@@ -23,26 +23,43 @@ class LineLive(Plugin):
                 "360": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
                 "240": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
                 "144": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
-            })
-        }
-     )
+            }),
+            "archivedHLSURLs": validate.any(None, {
+                "720": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "480": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "360": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "240": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "144": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+            }),
+        })
 
     @classmethod
     def can_handle_url(cls, url):
         return cls._url_re.match(url) is not None
 
+    def _get_live_streams(self, json):
+        for stream in json["liveHLSURLs"]:
+            url = json["liveHLSURLs"][stream]
+            if url is not None:
+                yield "{0}p.".format(stream), HLSStream(self.session, url)
+
+    def _get_vod_streams(self, json):
+        for stream in json["archivedHLSURLs"]:
+            url = json["archivedHLSURLs"][stream]
+            if url is not None:
+                yield "{0}p.".format(stream), HLSStream(self.session, url)
+
     def _get_streams(self):
         match = self._url_re.match(self.url)
         channel = match.group("channel")
         broadcast = match.group("broadcast")
         res = self.session.http.get(self._api_url.format(channel, broadcast))
         json = self.session.http.json(res, schema=self._player_status_schema)
-        if json["liveStatus"] != "LIVE":
-            return
-        for stream in json["liveHLSURLs"]:
-            url = json["liveHLSURLs"][stream]
-            if url != None:
-                yield "{0}p".format(stream), HLSStream(self.session, url)
+        if json["liveStatus"] == "LIVE":
+            return self._get_live_streams(json)
+        elif json["liveStatus"] == "FINISHED":
+            return self._get_vod_streams(json)
+        return
 
 
 __plugin__ = LineLive
