diff --git a/docs/plugin_matrix.rst b/docs/plugin_matrix.rst
index b88febc7..1423894b 100644
--- a/docs/plugin_matrix.rst
+++ b/docs/plugin_matrix.rst
@@ -110,7 +110,7 @@ itvplayer               itv.com/itvplayer    Yes   Yes   Streams may be geo-rest
 kanal7                  - kanal7.com         Yes   No
                         - tvt.tv.tr
 kingkong                kingkong.com.tw      Yes   --
-linelive                live.line.me         Yes   --
+linelive                live.line.me         Yes   Yes
 live_russia_tv          live.russia.tv       Yes   --
 liveedu                 - liveedu.tv         Yes   --    Some streams require a login.
                         - livecoding.tv
@@ -267,6 +267,7 @@ vimeo                   vimeo.com            Yes   Yes   Password-protected vide
 vinhlongtv              thvli.vn             Yes   No    Streams are geo-restricted to Vietnam
 viutv                   viu.tv               Yes   No    Streams are geo-restricted to Hong Kong
 vk                      vk.com               Yes   Yes
+vlive                   vlive.tv             Yes   No    Embedded Naver VODs are not supported.
 vrtbe                   vrt.be/vrtnu         Yes   Yes
 vtvgo                   vtvgo.vn             Yes   No
 webcast_india_gov       webcast.gov.in       Yes   No    You can use #Channel to indicate CH number.
diff --git a/src/streamlink/plugins/linelive.py b/src/streamlink/plugins/linelive.py
index 24a2c33b..e524a32c 100644
--- a/src/streamlink/plugins/linelive.py
+++ b/src/streamlink/plugins/linelive.py
@@ -23,26 +23,43 @@ class LineLive(Plugin):
                 "360": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
                 "240": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
                 "144": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
-            })
-        }
-     )
+            }),
+            "archivedHLSURLs": validate.any(None, {
+                "720": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "480": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "360": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "240": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+                "144": validate.any(None, validate.url(scheme="http", path=validate.endswith(".m3u8"))),
+            }),
+        })
 
     @classmethod
     def can_handle_url(cls, url):
         return cls._url_re.match(url) is not None
 
+    def _get_live_streams(self, json):
+        for stream in json["liveHLSURLs"]:
+            url = json["liveHLSURLs"][stream]
+            if url is not None:
+                yield "{0}p.".format(stream), HLSStream(self.session, url)
+
+    def _get_vod_streams(self, json):
+        for stream in json["archivedHLSURLs"]:
+            url = json["archivedHLSURLs"][stream]
+            if url is not None:
+                yield "{0}p.".format(stream), HLSStream(self.session, url)
+
     def _get_streams(self):
         match = self._url_re.match(self.url)
         channel = match.group("channel")
         broadcast = match.group("broadcast")
         res = self.session.http.get(self._api_url.format(channel, broadcast))
         json = self.session.http.json(res, schema=self._player_status_schema)
-        if json["liveStatus"] != "LIVE":
-            return
-        for stream in json["liveHLSURLs"]:
-            url = json["liveHLSURLs"][stream]
-            if url != None:
-                yield "{0}p".format(stream), HLSStream(self.session, url)
+        if json["liveStatus"] == "LIVE":
+            return self._get_live_streams(json)
+        elif json["liveStatus"] == "FINISHED":
+            return self._get_vod_streams(json)
+        return
 
 
 __plugin__ = LineLive
diff --git a/src/streamlink/plugins/vlive.py b/src/streamlink/plugins/vlive.py
new file mode 100644
index 00000000..71a3f645
--- /dev/null
+++ b/src/streamlink/plugins/vlive.py
@@ -0,0 +1,55 @@
+import re
+import json
+
+from streamlink.plugin import Plugin, PluginError
+from streamlink.stream import HLSStream
+
+
+class Vlive(Plugin):
+    _url_re = re.compile(r"https?://(?:www.)vlive\.tv/video/(\d+)")
+    _video_status = re.compile(r'oVideoStatus = (.+)<', re.DOTALL)
+    _video_init_url = "https://www.vlive.tv/video/init/view"
+
+    @classmethod
+    def can_handle_url(cls, url):
+        return cls._url_re.match(url) is not None
+
+    @property
+    def video_id(self):
+        return self._url_re.match(self.url).group(1)
+
+    def _get_streams(self):
+        vinit_req = self.session.http.get(self._video_init_url,
+                                          params=dict(videoSeq=self.video_id),
+                                          headers=dict(referer=self.url))
+        if vinit_req.status_code != 200:
+            raise PluginError('Could not get video init page (HTTP Status {})'
+                              .format(vinit_req.status_code))
+
+        video_status_js = self._video_status.search(vinit_req.text)
+        if not video_status_js:
+            raise PluginError('Could not find video status information!')
+
+        video_status = json.loads(video_status_js.group(1))
+
+        if video_status['viewType'] == 'vod':
+            raise PluginError('VODs are not supported')
+
+        if 'liveStreamInfo' not in video_status:
+            raise PluginError('Stream is offline')
+
+        stream_info = json.loads(video_status['liveStreamInfo'])
+
+        streams = dict()
+        # All "resolutions" have a variant playlist with only one entry, so just combine them
+        for i in stream_info['resolutions']:
+            res_streams = HLSStream.parse_variant_playlist(self.session, i['cdnUrl'])
+            if len(res_streams.values()) > 1:
+                self.logger.warning('More than one stream in variant playlist, using first entry!')
+
+            streams[i['name']] = res_streams.popitem()[1]
+
+        return streams
+
+
+__plugin__ = Vlive
