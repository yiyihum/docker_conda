diff --git a/sosw/components/test/unit/test_helpers.py b/sosw/components/test/unit/test_helpers.py
index cbb18b7..7d0f762 100644
--- a/sosw/components/test/unit/test_helpers.py
+++ b/sosw/components/test/unit/test_helpers.py
@@ -576,11 +576,11 @@ class helpers_UnitTestCase(unittest.TestCase):
             (("olleh", "hello"), False),
             (("hello", "hello"), True),
             (({1: 'a', 2: 'b'}, {2: 'b', 1: 'a'}), True),  # Unordered Dictionary
-            (({1: 'a', 2: {'2a': {'set', 42}}}, {1: 'a', 2: {'2a': {42, 'set'}}}), True),  # Nested Dictionary
+            (({1: 'a', 'bar': {'2a': {'set', 42}}}, {'bar': {'2a': {42, 'set'}}, 1: 'a'}), True),  # Nested Dictionary
         ]
 
         for test, expected in TESTS:
-            self.assertEqual(make_hash(test[0]) == make_hash(test[1]), expected)
+            self.assertEqual(make_hash(test[0]) == make_hash(test[1]), expected, f"Failed specific test: {test}")
 
 
 if __name__ == '__main__':
diff --git a/sosw/managers/test/unit/test_ecology.py b/sosw/managers/test/unit/test_ecology.py
index 90f552f..c4154cb 100644
--- a/sosw/managers/test/unit/test_ecology.py
+++ b/sosw/managers/test/unit/test_ecology.py
@@ -4,9 +4,10 @@ import time
 import unittest
 import os
 
-from collections import defaultdict
+from copy import deepcopy
 from unittest.mock import MagicMock, patch
 
+from sosw.components.helpers import make_hash
 
 logging.getLogger('botocore').setLevel(logging.WARNING)
 
@@ -21,6 +22,11 @@ from sosw.test.variables import TEST_ECOLOGY_CLIENT_CONFIG
 class ecology_manager_UnitTestCase(unittest.TestCase):
     TEST_CONFIG = TEST_ECOLOGY_CLIENT_CONFIG
     LABOURER = Labourer(id='some_function', arn='arn:aws:lambda:us-west-2:000000000000:function:some_function')
+    SAMPLE_HEALTH_METRICS = {
+        'test1': {'details': {'Name': 'CPUUtilization', 'Namespace': 'AWS/RDS'}},
+        'test2': {'details': {'Name': 'CPUUtilization2', 'Namespace': 'AWS/RDS'}},
+        'test3': {'details': {'Name': 'CPUUtilization3', 'Namespace': 'AWS/RDS'}},
+    }
 
 
     def setUp(self):
@@ -116,3 +122,93 @@ class ecology_manager_UnitTestCase(unittest.TestCase):
         self.manager.task_client.lambda_client.get_function_configuration.return_value = {'Timeout': 300}
 
         self.assertEqual(self.manager.get_max_labourer_duration(self.LABOURER), 300)
+
+
+    def test_get_health(self):
+        METRIC = {
+            'details':                     {},
+            'feelings':                    {
+                3: 50,
+                4: 25,
+            },
+            'feeling_comparison_operator': '__le__'
+        }
+
+        TESTS = [
+            (0, 4),
+            (1.0, 4),
+            (25, 4),
+            (25.000001, 3),
+            (30, 3),
+            (50, 3),
+            (51, 0),
+        ]
+
+        for value, expected in TESTS:
+            self.assertEqual(self.manager.get_health(value, METRIC), expected, f"Failed: {value} t")
+
+
+    def test_get_health__invalid(self):
+        METRIC = {
+            'details':                     {},
+            'feelings':                    {
+                1: 40,
+                3: 50,
+                4: 25,
+            },
+            'feeling_comparison_operator': '__le__'
+        }
+
+        self.assertRaises(ValueError, self.manager.get_health, 60, METRIC), \
+        "Did not raise while the feelings are invalid. Order of values should respect order of health statuses."
+
+
+    def test_get_labourer_status(self):
+        self.manager.get_health = MagicMock(side_effect=[3, 2, 4])
+        self.manager.register_task_manager(MagicMock())
+        self.manager.fetch_metric_stats = MagicMock()
+        self.health_metrics = dict()
+
+        labourer = deepcopy(self.LABOURER)
+        setattr(labourer, 'health_metrics', self.SAMPLE_HEALTH_METRICS)
+
+        # Calling the actual tested method.
+        result = self.manager.get_labourer_status(labourer)
+
+        # The result should be the lowest of values get_health would have returned out of three calls.
+        self.assertEqual(result, 2, f"Did not get the lowest health result. Received: {result}")
+
+        # Chech the the get_health had been called three times (for each metric).
+        self.manager.get_health.assert_called()
+        self.assertEqual(self.manager.get_health.call_count, 3)
+
+        self.manager.fetch_metric_stats.assert_called()
+        self.assertEqual(self.manager.fetch_metric_stats.call_count, 3)
+
+
+    def test_get_labourer_status__uses_cache(self):
+
+        self.manager.get_health = MagicMock(return_value=0)
+        self.manager.register_task_manager(MagicMock())
+        self.manager.fetch_metric_stats = MagicMock()
+
+        labourer = deepcopy(self.LABOURER)
+        setattr(labourer, 'health_metrics', self.SAMPLE_HEALTH_METRICS)
+
+        self.manager.health_metrics = {make_hash(labourer.health_metrics['test1']['details']): 42}
+
+        # Calling the actual tested method.
+        result = self.manager.get_labourer_status(labourer)
+
+        # Assert calculator (get_health) was called 3 times.
+        self.assertEqual(self.manager.get_health.call_count, 3)
+        self.assertEqual(self.manager.fetch_metric_stats.call_count, 2,
+                         f"Fetcher was supposed to be called only for 2 metrics. One is in cache.")
+
+
+    def test_fetch_metric_stats__calls_boto(self):
+
+        self.manager.cloudwatch_client = MagicMock()
+        self.manager.fetch_metric_stats(a=1, b={3: 42})
+
+        self.manager.cloudwatch_client.get_metric_statistics.assert_called_once_with(a=1, b={3: 42})
diff --git a/sosw/managers/test/unit/test_task.py b/sosw/managers/test/unit/test_task.py
index 7c79ea7..77455fb 100644
--- a/sosw/managers/test/unit/test_task.py
+++ b/sosw/managers/test/unit/test_task.py
@@ -521,3 +521,36 @@ class task_manager_UnitTestCase(unittest.TestCase):
             test.pop(field)
 
             self.assertFalse(self.manager.is_valid_task(test))
+
+
+    def test_health_metrics_received(self):
+        TEST_CFG = {
+            'some_function': {
+                'arn':                          'arn:aws:lambda:us-west-2:0000000000:function:some_function',
+                'max_simultaneous_invocations': 10,
+                'health_metrics':               {
+                    'SomeDBCPU': {
+                        'Name':                        'CPUUtilization',
+                        'Namespace':                   'AWS/RDS',
+                        'Period':                      60,
+                        'Statistics':                  ['Average'],
+                        'Dimensions':                  [
+                            {
+                                'Name':  'DBInstanceIdentifier',
+                                'Value': 'YOUR-DB'
+                            },
+                        ],
+
+                        # These is the mapping of how the Labourer should "feel" about this metric.
+                        # See EcologyManager.ECO_STATUSES.
+                        # This is just a mapping ``ECO_STATUS: value`` using ``feeling_comparison_operator``.
+                        'feelings':                    {
+                            3: 50,
+                            4: 25,
+                        },
+                        'feeling_comparison_operator': '<='
+                    },
+                },
+            }
+        }
+
