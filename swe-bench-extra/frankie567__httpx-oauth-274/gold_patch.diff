diff --git a/docs/oauth2.md b/docs/oauth2.md
index dbb7178..35f0ce1 100644
--- a/docs/oauth2.md
+++ b/docs/oauth2.md
@@ -123,6 +123,23 @@ A utility method is provided to quickly determine if the token is still valid or
 
 We provide several ready-to-use clients for widely used services with configured endpoints and specificites took into account.
 
+### Discord
+
+Contributed by [William Hatcher](https://github.com/williamhatcher)
+
+```py
+from httpx_oauth.clients.discord import DiscordOAuth2
+
+client = DiscordOAuth2("CLIENT_ID", "CLIENT_SECRET")
+```
+
+* ✅ `refresh_token`
+* ✅ `revoke_token`
+
+!!! warning "Warning about get_id_email()"
+    Email is optional for Discord accounts. This method will error if the user does not have a verified email address.
+    Furthermore, you should always make sure to include `identify`, and `email` in your scopes. (This is the default)
+
 ### Facebook
 
 ```py
diff --git a/httpx_oauth/clients/discord.py b/httpx_oauth/clients/discord.py
new file mode 100644
index 0000000..fe3473f
--- /dev/null
+++ b/httpx_oauth/clients/discord.py
@@ -0,0 +1,53 @@
+from typing import Any, Dict, List, Optional, Tuple, cast
+
+from httpx_oauth.errors import GetIdEmailError
+from httpx_oauth.oauth2 import BaseOAuth2
+
+AUTHORIZE_ENDPOINT = "https://discord.com/api/oauth2/authorize"
+ACCESS_TOKEN_ENDPOINT = "https://discord.com/api/oauth2/token"
+REVOKE_TOKEN_ENDPOINT = "https://discord.com/api/oauth2/token/revoke"
+BASE_SCOPES = ("identify", "email")
+PROFILE_ENDPOINT = "https://discord.com/api/users/@me"
+
+
+class DiscordOAuth2(BaseOAuth2[Dict[str, Any]]):
+    def __init__(
+        self,
+        client_id: str,
+        client_secret: str,
+        scopes: Optional[List[str]] = BASE_SCOPES,
+        name: str = "discord",
+    ):
+        super().__init__(
+            client_id,
+            client_secret,
+            AUTHORIZE_ENDPOINT,
+            ACCESS_TOKEN_ENDPOINT,
+            ACCESS_TOKEN_ENDPOINT,
+            REVOKE_TOKEN_ENDPOINT,
+            name=name,
+            base_scopes=scopes,
+        )
+
+    async def get_id_email(self, token: str) -> Tuple[str, str]:
+        async with self.get_httpx_client() as client:
+            response = await client.get(
+                PROFILE_ENDPOINT,
+                headers={**self.request_headers, "Authorization": f"Bearer {token}"},
+            )
+
+            if response.status_code >= 400:
+                raise GetIdEmailError(response.json())
+
+            data = cast(Dict[str, Any], response.json())
+
+            user_id = data["id"]
+
+            if 'verified' not in data or 'email' not in data:  # No email on discord account
+                raise GetIdEmailError({'error': 'Email not provided'})
+            elif not data['verified']:  # Email present, but not verified
+                raise GetIdEmailError({'error': 'Email not verified'})
+            else:
+                user_email = data["email"]
+
+            return user_id, user_email
