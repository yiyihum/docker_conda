diff --git a/blocklib/blocks_generator.py b/blocklib/blocks_generator.py
index a62e044..21a91cd 100644
--- a/blocklib/blocks_generator.py
+++ b/blocklib/blocks_generator.py
@@ -1,7 +1,7 @@
 """Module that implement final block generations."""
 from collections import defaultdict
 from typing import Any, Dict, Sequence, Set, List, cast
-
+import ast
 import numpy as np
 
 from blocklib import PPRLIndex
@@ -89,6 +89,7 @@ def generate_blocks_psig(reversed_indices: Sequence[Dict], block_states: Sequenc
     for reversed_index, state in zip(reversed_indices, block_states):
         cbf = set()  # type: Set[int]
         for bf_set in reversed_index:
+            bf_set = ast.literal_eval(bf_set)
             cbf = cbf.union(bf_set)
 
         bf_len = int(block_states[0].blocking_config.get("bf-len", None))
@@ -102,10 +103,11 @@ def generate_blocks_psig(reversed_indices: Sequence[Dict], block_states: Sequenc
 
     # filter reversed_indices with block filter
     for reversed_index in reversed_indices:
-        has_matches = {bf_set: all(block_filter[i] for i in bf_set) for bf_set in reversed_index}
+        has_matches = {bf_set: all(block_filter[i] for i in ast.literal_eval(bf_set)) for bf_set in reversed_index}
         for bf_set in has_matches:
             if not has_matches[bf_set]:
                 del reversed_index[bf_set]
+
     # because of collisions in counting bloom filter, there are blocks only unique to one filtered index
     # only keep blocks that exist in at least threshold many reversed indices
     keys = defaultdict(int)  # type: Dict[Set, int]
@@ -116,4 +118,5 @@ def generate_blocks_psig(reversed_indices: Sequence[Dict], block_states: Sequenc
     clean_reversed_indices = []  # type: List[Dict[Set, List]]
     for reversed_index in reversed_indices:
         clean_reversed_indices.append(dict((k, reversed_index[k]) for k in common_keys if k in reversed_index))
+
     return clean_reversed_indices
diff --git a/blocklib/pprlpsig.py b/blocklib/pprlpsig.py
index 6ba617d..d0eabb3 100644
--- a/blocklib/pprlpsig.py
+++ b/blocklib/pprlpsig.py
@@ -94,10 +94,10 @@ class PPRLIndexPSignature(PPRLIndex):
         num_hash_func = int(self.blocking_config.get("number-hash-functions", None))
         bf_len = int(self.blocking_config.get("bf-len", None))
 
-        reversed_index = {}  # type: Dict[Any, List[Any]]
+        reversed_index = {}  # type: Dict[str, List[Any]]
 
         for signature, rec_ids in filtered_reversed_index.items():
-            bf_set = tuple(flip_bloom_filter(signature, bf_len, num_hash_func))
+            bf_set = str(tuple(flip_bloom_filter(signature, bf_len, num_hash_func)))
             if bf_set in reversed_index:
                 reversed_index[bf_set].extend(rec_ids)
             else:

