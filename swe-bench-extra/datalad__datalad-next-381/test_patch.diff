diff --git a/datalad_next/types/tests/test_annexkey.py b/datalad_next/types/tests/test_annexkey.py
index 80c68c0..a4e3878 100644
--- a/datalad_next/types/tests/test_annexkey.py
+++ b/datalad_next/types/tests/test_annexkey.py
@@ -1,9 +1,26 @@
+import pytest
+
 from ..annexkey import AnnexKey
 
 
 def test_annexkey():
     for key in (
         'MD5E-s792207360--985e680a221e47db05063a12b91d7d89.tar',
+        'SHA256E-s31390--f50d7ac4c6b9031379986bc362fcefb65f1e52621ce1708d537e740fefc59cc0.mp3',
+        'URL-s1899248--http&c%%ai.stanford.edu%,126nilsson%MLBOOK.pdf/URL-s1899248--http&c%%ai.stanford.edu%,126nilsson%MLBOOK.pdf',
     ):
         # round-tripping for any key must give same outcome
         assert key == str(AnnexKey.from_str(key))
+
+    # check that it can be used as a dict-key, i.e. is hashable
+    key = AnnexKey.from_str('MD5-s9--985e680a221e47db05063a12b91d7d89')
+    d = {key: 'some'}
+
+
+def test_annexkey_errors():
+    for wrong in (
+        'MD5E-985e680a221e47db05063a12b91d7d89.tar',
+        'MD5E-SUPRISE--985e680a221e47db05063a12b91d7d89.tar',
+    ):
+        with pytest.raises(ValueError):
+            AnnexKey.from_str(wrong)
diff --git a/datalad_next/types/tests/test_archivist.py b/datalad_next/types/tests/test_archivist.py
new file mode 100644
index 0000000..8f78163
--- /dev/null
+++ b/datalad_next/types/tests/test_archivist.py
@@ -0,0 +1,53 @@
+import pytest
+
+from ..annexkey import AnnexKey
+from ..archivist import ArchivistLocator
+from ..enums import ArchiveType
+
+some_key = 'MD5-s389--e9f624eb778e6f945771c543b6e9c7b2'
+
+
+def test_archivistlocator():
+    test_locator = \
+        f'dl+archive:{some_key}#path=dir/file.csv&size=234&atype=tar'
+
+    al = ArchivistLocator.from_str(test_locator)
+
+    assert al.akey == AnnexKey.from_str(some_key)
+    assert al.atype == ArchiveType.tar
+
+    # round trip
+    assert str(al) == test_locator
+
+    # type determination from key
+    assert ArchivistLocator.from_str(
+        'dl+archive:MD5E-s1--e9f624eb778e6f945771c543b6e9c7b2.tar#path=f.txt'
+    ).atype == ArchiveType.tar
+    assert ArchivistLocator.from_str(
+        'dl+archive:MD5E-s1--e9f624eb778e6f945771c543b6e9c7b2.zip#path=f.txt'
+    ).atype == ArchiveType.zip
+
+
+def test_archivistlocatori_errors():
+    for wrong in (
+        # no chance without prefix
+        'bogus',
+        # not just a prefix or some bogus properties
+        'dl+archive:',
+        'dl+archive:#',
+        'dl+archive:keything',
+        'dl+archive:#props',
+        'dl+archive:keything#props',
+        # a real key is required, but not sufficient
+        f'dl+archive:{some_key}#props',
+        # we require a member path, the rest is optional
+        f'dl+archive:{some_key}#size=123',
+        f'dl+archive:{some_key}#size=123&atype=tar',
+        # must be a proper POSIX path, relative, no ..
+        f'dl+archive:{some_key}#path=/dummy',
+        f'dl+archive:{some_key}#path=../dd',
+        # cannot work with unknown archive type
+        f'dl+archive:{some_key}#path=good&size=123&atype=eh!',
+    ):
+        with pytest.raises(ValueError):
+            ArchivistLocator.from_str(wrong)
