diff --git a/tests/peering/test_resource_guessing.py b/tests/peering/test_resource_guessing.py
index 7f3c4e1..65212f1 100644
--- a/tests/peering/test_resource_guessing.py
+++ b/tests/peering/test_resource_guessing.py
@@ -1,20 +1,21 @@
 import pytest
 
-from kopf.engines.peering import guess_selector
-from kopf.structs.references import CLUSTER_PEERINGS, NAMESPACED_PEERINGS
+from kopf.engines.peering import guess_selectors
+from kopf.structs.references import CLUSTER_PEERINGS_K, CLUSTER_PEERINGS_Z, \
+                                    NAMESPACED_PEERINGS_K, NAMESPACED_PEERINGS_Z
 
 
-@pytest.mark.parametrize('namespaced, expected_resource', [
-    (False, CLUSTER_PEERINGS),
-    (True, NAMESPACED_PEERINGS),
+@pytest.mark.parametrize('namespaced, expected_selectors', [
+    (False, [CLUSTER_PEERINGS_K, CLUSTER_PEERINGS_Z]),
+    (True, [NAMESPACED_PEERINGS_K, NAMESPACED_PEERINGS_Z]),
 ])
 @pytest.mark.parametrize('mandatory', [False, True])
-def test_resource_when_not_standalone(settings, namespaced, mandatory, expected_resource):
+def test_resource_when_not_standalone(settings, namespaced, mandatory, expected_selectors):
     settings.peering.standalone = False
     settings.peering.namespaced = namespaced
     settings.peering.mandatory = mandatory
-    selector = guess_selector(settings=settings)
-    assert selector == expected_resource
+    selectors = guess_selectors(settings=settings)
+    assert selectors == expected_selectors
 
 
 @pytest.mark.parametrize('namespaced', [False, True])
@@ -23,5 +24,5 @@ def test_resource_when_standalone(settings, namespaced, mandatory):
     settings.peering.standalone = True
     settings.peering.namespaced = namespaced
     settings.peering.mandatory = mandatory
-    selector = guess_selector(settings=settings)
-    assert selector is None
+    selectors = guess_selectors(settings=settings)
+    assert not selectors
diff --git a/tests/references/test_backbone.py b/tests/references/test_backbone.py
index 9087c07..2f858aa 100644
--- a/tests/references/test_backbone.py
+++ b/tests/references/test_backbone.py
@@ -3,12 +3,15 @@ import asyncio
 import async_timeout
 import pytest
 
-from kopf.structs.references import CLUSTER_PEERINGS, CRDS, EVENTS, NAMESPACED_PEERINGS, \
+from kopf.structs.references import CLUSTER_PEERINGS_K, CLUSTER_PEERINGS_Z, CRDS, EVENTS, \
+                                    NAMESPACED_PEERINGS_K, NAMESPACED_PEERINGS_Z, \
                                     NAMESPACES, Backbone, Resource, Selector
 
 
 @pytest.mark.parametrize('selector', [
-    CRDS, EVENTS, NAMESPACES, CLUSTER_PEERINGS, NAMESPACED_PEERINGS,
+    CRDS, EVENTS, NAMESPACES,
+    CLUSTER_PEERINGS_K, NAMESPACED_PEERINGS_K,
+    CLUSTER_PEERINGS_Z, NAMESPACED_PEERINGS_Z,
 ])
 def test_empty_backbone(selector: Selector):
     backbone = Backbone()
@@ -24,10 +27,10 @@ def test_empty_backbone(selector: Selector):
     (CRDS, Resource('apiextensions.k8s.io', 'vX', 'customresourcedefinitions')),
     (EVENTS, Resource('', 'v1', 'events')),
     (NAMESPACES, Resource('', 'v1', 'namespaces')),
-    (CLUSTER_PEERINGS, Resource('kopf.dev', 'v1', 'clusterkopfpeerings')),
-    (NAMESPACED_PEERINGS, Resource('kopf.dev', 'v1', 'kopfpeerings')),
-    (CLUSTER_PEERINGS, Resource('zalando.org', 'v1', 'clusterkopfpeerings')),
-    (NAMESPACED_PEERINGS, Resource('zalando.org', 'v1', 'kopfpeerings')),
+    (CLUSTER_PEERINGS_K, Resource('kopf.dev', 'v1', 'clusterkopfpeerings')),
+    (NAMESPACED_PEERINGS_K, Resource('kopf.dev', 'v1', 'kopfpeerings')),
+    (CLUSTER_PEERINGS_Z, Resource('zalando.org', 'v1', 'clusterkopfpeerings')),
+    (NAMESPACED_PEERINGS_Z, Resource('zalando.org', 'v1', 'kopfpeerings')),
 ])
 async def test_refill_populates_the_resources(selector: Selector, resource: Resource):
     backbone = Backbone()
