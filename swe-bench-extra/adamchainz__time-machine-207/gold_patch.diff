diff --git a/HISTORY.rst b/HISTORY.rst
index 78e067b..7af039e 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -2,6 +2,10 @@
 History
 =======
 
+* Add ``time_machine.escape_hatch``, which provides functions to bypass time-machine.
+
+  Thanks to Matt Pegler for the feature request in `Issue #206 <https://github.com/adamchainz/time-machine/issues/206>`__.
+
 2.4.1 (2021-11-27)
 ------------------
 
diff --git a/README.rst b/README.rst
index 4532090..f23ce06 100644
--- a/README.rst
+++ b/README.rst
@@ -310,6 +310,52 @@ For example:
 
         assert dt.date.today().isoformat() == "2015-10-21"
 
+``escape_hatch``
+----------------
+
+The ``escape_hatch`` object provides functions to bypass time-machine.
+These allow you to call the real datetime functions, without any mocking.
+It also provides a way to check if time-machine is currently time travelling.
+
+These capabilities are useful in rare circumstances.
+For example, if you need to authenticate with an external service during time travel, you may need the real value of ``datetime.now()``.
+
+The functions are:
+
+* ``escape_hatch.is_travelling() -> bool`` - returns ``True`` if ``time_machine.travel()`` is active, ``False`` otherwise.
+
+* ``escape_hatch.datetime.datetime.now()`` - wraps the real ``datetime.datetime.now()``.
+
+* ``escape_hatch.datetime.datetime.utcnow()`` - wraps the real ``datetime.datetime.utcnow()``.
+
+* ``escape_hatch.time.clock_gettime()`` - wraps the real ``time.clock_gettime()``.
+
+* ``escape_hatch.time.clock_gettime_ns()`` - wraps the real ``time.clock_gettime_ns()``.
+
+* ``escape_hatch.time.gmtime()`` - wraps the real ``time.gmtime()``.
+
+* ``escape_hatch.time.localtime()`` - wraps the real ``time.localtime()``.
+
+* ``escape_hatch.time.strftime()`` - wraps the real ``time.strftime()``.
+
+* ``escape_hatch.time.time()`` - wraps the real ``time.time()``.
+
+* ``escape_hatch.time.time_ns()`` - wraps the real ``time.time_ns()``.
+
+For example:
+
+.. code-block:: python
+
+    import time_machine
+
+
+    with time_machine.travel(...):
+        if time_machine.escape_hatch.is_travelling():
+            print("We need to go back to the future!")
+
+        real_now = time_machine.escape_hatch.datetime.datetime.now()
+        external_authenticate(now=real_now)
+
 Caveats
 =======
 
diff --git a/src/time_machine/__init__.py b/src/time_machine/__init__.py
index 0e67b1b..4c57870 100644
--- a/src/time_machine/__init__.py
+++ b/src/time_machine/__init__.py
@@ -77,6 +77,9 @@ DestinationType = Union[
     TypingGenerator[DestinationBaseType, None, None],
 ]
 
+# copied from typeshed:
+_TimeTuple = Tuple[int, int, int, int, int, int, int, int, int]
+
 
 def extract_timestamp_tzname(
     destination: DestinationType,
@@ -389,10 +392,6 @@ def localtime(secs: Optional[float] = None) -> struct_time:
     return _time_machine.original_localtime(coordinates_stack[-1].time())
 
 
-# copied from typeshed:
-_TimeTuple = Tuple[int, int, int, int, int, int, int, int, int]
-
-
 def strftime(format: str, t: Union[_TimeTuple, struct_time, None] = None) -> str:
     if t is not None:
         return _time_machine.original_strftime(format, t)
@@ -453,3 +452,63 @@ if pytest is not None:  # pragma: no branch
             yield fixture
         finally:
             fixture.stop()
+
+
+# escape hatch
+
+
+class _EscapeHatchDatetimeDatetime:
+    def now(self, tz: Optional[dt.tzinfo] = None) -> dt.datetime:
+        return _time_machine.original_now(tz)
+
+    def utcnow(self) -> dt.datetime:
+        return _time_machine.original_utcnow()
+
+
+class _EscapeHatchDatetime:
+    def __init__(self) -> None:
+        self.datetime = _EscapeHatchDatetimeDatetime()
+
+
+class _EscapeHatchTime:
+    def clock_gettime(self, clk_id: int) -> float:
+        return _time_machine.original_clock_gettime(clk_id)
+
+    if sys.version_info >= (3, 7):
+
+        def clock_gettime_ns(self, clk_id: int) -> int:
+            return _time_machine.original_clock_gettime_ns(clk_id)
+
+    def gmtime(self, secs: Optional[float] = None) -> struct_time:
+        return _time_machine.original_gmtime(secs)
+
+    def localtime(self, secs: Optional[float] = None) -> struct_time:
+        return _time_machine.original_localtime(secs)
+
+    def strftime(
+        self, format: str, t: Union[_TimeTuple, struct_time, None] = None
+    ) -> str:
+        if t is not None:
+            return _time_machine.original_strftime(format, t)
+        else:
+            return _time_machine.original_strftime(format)
+
+    def time(self) -> float:
+        return _time_machine.original_time()
+
+    if sys.version_info >= (3, 7):
+
+        def time_ns(self) -> int:
+            return _time_machine.original_time_ns()
+
+
+class _EscapeHatch:
+    def __init__(self) -> None:
+        self.datetime = _EscapeHatchDatetime()
+        self.time = _EscapeHatchTime()
+
+    def is_travelling(self) -> bool:
+        return bool(coordinates_stack)
+
+
+escape_hatch = _EscapeHatch()
