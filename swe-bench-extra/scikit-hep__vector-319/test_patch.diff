diff --git a/tests/backends/test_awkward.py b/tests/backends/test_awkward.py
index 6ad8766..c8e043c 100644
--- a/tests/backends/test_awkward.py
+++ b/tests/backends/test_awkward.py
@@ -9,11 +9,58 @@ import pytest
 
 import vector
 
-pytest.importorskip("awkward")
+ak = pytest.importorskip("awkward")
 
 pytestmark = pytest.mark.awkward
 
 
+def test_dimension_conversion():
+    # 2D -> 3D
+    vec = vector.Array(
+        [
+            [{"x": 1, "y": 1.1}, {"x": 2, "y": 2.1}],
+            [],
+        ]
+    )
+    assert ak.all(vec.to_Vector3D(z=1).z == 1)
+    assert ak.all(vec.to_Vector3D(eta=1).eta == 1)
+    assert ak.all(vec.to_Vector3D(theta=1).theta == 1)
+
+    assert ak.all(vec.to_Vector3D(z=1).x == vec.x)
+    assert ak.all(vec.to_Vector3D(z=1).y == vec.y)
+
+    # 2D -> 4D
+    assert ak.all(vec.to_Vector4D(z=1, t=1).t == 1)
+    assert ak.all(vec.to_Vector4D(z=1, t=1).z == 1)
+    assert ak.all(vec.to_Vector4D(eta=1, t=1).eta == 1)
+    assert ak.all(vec.to_Vector4D(eta=1, t=1).t == 1)
+    assert ak.all(vec.to_Vector4D(theta=1, t=1).theta == 1)
+    assert ak.all(vec.to_Vector4D(theta=1, t=1).t == 1)
+    assert ak.all(vec.to_Vector4D(z=1, tau=1).z == 1)
+    assert ak.all(vec.to_Vector4D(z=1, tau=1).tau == 1)
+    assert ak.all(vec.to_Vector4D(eta=1, tau=1).eta == 1)
+    assert ak.all(vec.to_Vector4D(eta=1, tau=1).tau == 1)
+    assert ak.all(vec.to_Vector4D(theta=1, tau=1).theta == 1)
+    assert ak.all(vec.to_Vector4D(theta=1, tau=1).tau == 1)
+
+    assert ak.all(vec.to_Vector4D(z=1, t=1).x == vec.x)
+    assert ak.all(vec.to_Vector4D(z=1, t=1).y == vec.y)
+
+    # 3D -> 4D
+    vec = vector.Array(
+        [
+            [{"x": 1, "y": 1.1, "z": 1.2}, {"x": 2, "y": 2.1, "z": 2.2}],
+            [],
+        ]
+    )
+    assert ak.all(vec.to_Vector4D(t=1).t == 1)
+    assert ak.all(vec.to_Vector4D(tau=1).tau == 1)
+
+    assert ak.all(vec.to_Vector4D(t=1).x == vec.x)
+    assert ak.all(vec.to_Vector4D(t=1).y == vec.y)
+    assert ak.all(vec.to_Vector4D(t=1).z == vec.z)
+
+
 def test_type_checks():
     with pytest.raises(TypeError):
         vector.Array(
diff --git a/tests/backends/test_numpy.py b/tests/backends/test_numpy.py
index 89d433e..47a5272 100644
--- a/tests/backends/test_numpy.py
+++ b/tests/backends/test_numpy.py
@@ -14,6 +14,49 @@ import pytest
 import vector.backends.numpy
 
 
+def test_dimension_conversion():
+    # 2D -> 3D
+    vec = vector.VectorNumpy2D(
+        [(1.0, 1.0), (2.0, 2.0)],
+        dtype=[("x", float), ("y", float)],
+    )
+    assert all(vec.to_Vector3D(z=1).z == 1)
+    assert all(vec.to_Vector3D(eta=1).eta == 1)
+    assert all(vec.to_Vector3D(theta=1).theta == 1)
+
+    assert all(vec.to_Vector3D(z=1).x == vec.x)
+    assert all(vec.to_Vector3D(z=1).y == vec.y)
+
+    # 2D -> 4D
+    assert all(vec.to_Vector4D(z=1, t=1).t == 1)
+    assert all(vec.to_Vector4D(z=1, t=1).z == 1)
+    assert all(vec.to_Vector4D(eta=1, t=1).eta == 1)
+    assert all(vec.to_Vector4D(eta=1, t=1).t == 1)
+    assert all(vec.to_Vector4D(theta=1, t=1).theta == 1)
+    assert all(vec.to_Vector4D(theta=1, t=1).t == 1)
+    assert all(vec.to_Vector4D(z=1, tau=1).z == 1)
+    assert all(vec.to_Vector4D(z=1, tau=1).tau == 1)
+    assert all(vec.to_Vector4D(eta=1, tau=1).eta == 1)
+    assert all(vec.to_Vector4D(eta=1, tau=1).tau == 1)
+    assert all(vec.to_Vector4D(theta=1, tau=1).theta == 1)
+    assert all(vec.to_Vector4D(theta=1, tau=1).tau == 1)
+
+    assert all(vec.to_Vector4D(z=1, t=1).x == vec.x)
+    assert all(vec.to_Vector4D(z=1, t=1).y == vec.y)
+
+    # 3D -> 4D
+    vec = vector.VectorNumpy3D(
+        [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0)],
+        dtype=[("x", float), ("y", float), ("z", float)],
+    )
+    assert all(vec.to_Vector4D(t=1).t == 1)
+    assert all(vec.to_Vector4D(tau=1).tau == 1)
+
+    assert all(vec.to_Vector4D(t=1).x == vec.x)
+    assert all(vec.to_Vector4D(t=1).y == vec.y)
+    assert all(vec.to_Vector4D(t=1).z == vec.z)
+
+
 def test_type_checks():
     with pytest.raises(TypeError):
         vector.backends.numpy.VectorNumpy2D(
diff --git a/tests/backends/test_object.py b/tests/backends/test_object.py
index bad9574..a976611 100644
--- a/tests/backends/test_object.py
+++ b/tests/backends/test_object.py
@@ -11,6 +11,43 @@ import pytest
 import vector
 
 
+def test_dimension_conversion():
+    # 2D -> 3D
+    vec = vector.VectorObject2D(x=1, y=2)
+    assert vec.to_Vector3D(z=1).z == 1
+    assert vec.to_Vector3D(eta=1).eta == 1
+    assert vec.to_Vector3D(theta=1).theta == 1
+
+    assert vec.to_Vector3D(z=1).x == vec.x
+    assert vec.to_Vector3D(z=1).y == vec.y
+
+    # 2D -> 4D
+    assert vec.to_Vector4D(z=1, t=1).z == 1
+    assert vec.to_Vector4D(z=1, t=1).t == 1
+    assert vec.to_Vector4D(eta=1, t=1).eta == 1
+    assert vec.to_Vector4D(eta=1, t=1).t == 1
+    assert vec.to_Vector4D(theta=1, t=1).theta == 1
+    assert vec.to_Vector4D(theta=1, t=1).t == 1
+    assert vec.to_Vector4D(z=1, tau=1).z == 1
+    assert vec.to_Vector4D(z=1, tau=1).tau == 1
+    assert vec.to_Vector4D(eta=1, tau=1).eta == 1
+    assert vec.to_Vector4D(eta=1, tau=1).tau == 1
+    assert vec.to_Vector4D(theta=1, tau=1).theta == 1
+    assert vec.to_Vector4D(theta=1, tau=1).tau == 1
+
+    assert vec.to_Vector4D(z=1, t=1).x == vec.x
+    assert vec.to_Vector4D(z=1, t=1).y == vec.y
+
+    # 3D -> 4D
+    vec = vector.VectorObject3D(x=1, y=2, z=3)
+    assert vec.to_Vector4D(t=1).t == 1
+    assert vec.to_Vector4D(tau=1).tau == 1
+
+    assert vec.to_Vector4D(t=1).x == vec.x
+    assert vec.to_Vector4D(t=1).y == vec.y
+    assert vec.to_Vector4D(t=1).z == vec.z
+
+
 def test_constructors_2D():
     vec = vector.VectorObject2D(x=1, y=2)
     assert vec.x == 1
