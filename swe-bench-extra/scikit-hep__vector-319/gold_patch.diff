diff --git a/src/vector/_methods.py b/src/vector/_methods.py
index 85befae..c95d5e9 100644
--- a/src/vector/_methods.py
+++ b/src/vector/_methods.py
@@ -2966,32 +2966,103 @@ class Vector2D(Vector, VectorProtocolPlanar):
         theta: float | None = None,
         eta: float | None = None,
     ) -> VectorProtocolSpatial:
+        """
+        Converts a 2D vector to 3D vector.
+
+        The scalar longitudinal coordinate is broadcasted for NumPy and Awkward
+        vectors. Only a single longitudinal coordinate should be provided. Generic
+        coordinate counterparts should be provided for the momentum coordinates.
+
+        Examples:
+            >>> import vector
+            >>> vec = vector.VectorObject2D(x=1, y=2)
+            >>> vec.to_Vector3D(z=1)
+            VectorObject3D(x=1, y=2, z=1)
+            >>> vec = vector.MomentumObject2D(px=1, py=2)
+            >>> vec.to_Vector3D(z=4)
+            MomentumObject3D(px=1, py=2, pz=4)
+        """
         if sum(x is not None for x in (z, theta, eta)) > 1:
-            raise TypeError("Only one non-None parameter allowed")
+            raise TypeError(
+                "At most one longitudinal coordinate (`z`, `theta`, or `eta`) may be assigned (non-None)"
+            )
 
-        coord_value = 0.0
+        l_value = 0.0
         l_type: type[Longitudinal] = LongitudinalZ
         if z is not None:
-            coord_value = z
+            l_value = z
         elif eta is not None:
-            coord_value = eta
+            l_value = eta
             l_type = LongitudinalEta
         elif theta is not None:
-            coord_value = theta
+            l_value = theta
             l_type = LongitudinalTheta
 
         return self._wrap_result(
             type(self),
-            (*self.azimuthal.elements, coord_value),
+            (*self.azimuthal.elements, l_value),
             [_aztype(self), l_type, None],
             1,
         )
 
-    def to_Vector4D(self) -> VectorProtocolLorentz:
+    def to_Vector4D(
+        self,
+        *,
+        z: float | None = None,
+        theta: float | None = None,
+        eta: float | None = None,
+        t: float | None = None,
+        tau: float | None = None,
+    ) -> VectorProtocolLorentz:
+        """
+        Converts a 2D vector to 4D vector.
+
+        The scalar longitudinal and temporal coordinates are broadcasted for NumPy and
+        Awkward vectors. Only a single longitudinal and temporal coordinate should be
+        provided. Generic coordinate counterparts should be provided for the momentum
+        coordinates.
+
+        Examples:
+            >>> import vector
+            >>> vec = vector.VectorObject2D(x=1, y=2)
+            >>> vec.to_Vector4D(z=3, t=4)
+            VectorObject4D(x=1, y=2, z=3, t=4)
+            >>> vec = vector.MomentumObject2D(px=1, py=2)
+            >>> vec.to_Vector4D(z=4, t=4)
+            MomentumObject4D(px=1, py=2, pz=4, E=4)
+        """
+        if sum(x is not None for x in (z, theta, eta)) > 1:
+            raise TypeError(
+                "At most one longitudinal coordinate (`z`, `theta`, or `eta`) may be assigned (non-None)"
+            )
+        elif sum(x is not None for x in (t, tau)) > 1:
+            raise TypeError(
+                "At most one longitudinal coordinate (`t`, `tau`) may be assigned (non-None)"
+            )
+
+        t_value = 0.0
+        t_type: type[Temporal] = TemporalT
+        if t is not None:
+            t_value = t
+        elif tau is not None:
+            t_value = tau
+            t_type = TemporalTau
+
+        l_value = 0.0
+        l_type: type[Longitudinal] = LongitudinalZ
+        if z is not None:
+            l_value = z
+        elif eta is not None:
+            l_value = eta
+            l_type = LongitudinalEta
+        elif theta is not None:
+            l_value = theta
+            l_type = LongitudinalTheta
+
         return self._wrap_result(
             type(self),
-            (*self.azimuthal.elements, 0, 0),
-            [_aztype(self), LongitudinalZ, TemporalT],
+            (*self.azimuthal.elements, l_value, t_value),
+            [_aztype(self), l_type, t_type],
             1,
         )
 
@@ -3008,11 +3079,45 @@ class Vector3D(Vector, VectorProtocolSpatial):
     def to_Vector3D(self) -> VectorProtocolSpatial:
         return self
 
-    def to_Vector4D(self) -> VectorProtocolLorentz:
+    def to_Vector4D(
+        self,
+        *,
+        t: float | None = None,
+        tau: float | None = None,
+    ) -> VectorProtocolLorentz:
+        """
+        Converts a 3D vector to 4D vector.
+
+        The scalar temporal coordinate are broadcasted for NumPy and Awkward vectors.
+        Only a single temporal coordinate should be provided. Generic coordinate
+        counterparts should be provided for the momentum coordinates.
+
+        Examples:
+            >>> import vector
+            >>> vec = vector.VectorObject3D(x=1, y=2, z=3)
+            >>> vec.to_Vector4D(t=4)
+            VectorObject4D(x=1, y=2, z=3, t=4)
+            >>> vec = vector.MomentumObject3D(px=1, py=2, pz=3)
+            >>> vec.to_Vector4D(tau=4)
+            MomentumObject4D(px=1, py=2, pz=3, mass=4)
+        """
+        if sum(x is not None for x in (t, tau)) > 1:
+            raise TypeError(
+                "At most one longitudinal coordinate (`t`, `tau`) may be assigned (non-None)"
+            )
+
+        t_value = 0.0
+        t_type: type[Temporal] = TemporalT
+        if t is not None:
+            t_value = t
+        elif tau is not None:
+            t_value = tau
+            t_type = TemporalTau
+
         return self._wrap_result(
             type(self),
-            self.azimuthal.elements + self.longitudinal.elements + (0,),
-            [_aztype(self), _ltype(self), TemporalT],
+            (*self.azimuthal.elements, *self.longitudinal.elements, t_value),
+            [_aztype(self), _ltype(self), t_type],
             1,
         )
 
diff --git a/src/vector/backends/object.py b/src/vector/backends/object.py
index 6891a07..0f44ce5 100644
--- a/src/vector/backends/object.py
+++ b/src/vector/backends/object.py
@@ -1259,7 +1259,7 @@ class MomentumObject3D(SpatialMomentum, VectorObject3D):
         for x in lnames:
             y = _repr_generic_to_momentum.get(x, x)
             out.append(f"{y}={getattr(self.longitudinal, x)}")
-        return "vector.MomentumObject3D(" + ", ".join(out) + ")"
+        return "MomentumObject3D(" + ", ".join(out) + ")"
 
     def __array__(self) -> FloatArray:
         from vector.backends.numpy import MomentumNumpy3D
