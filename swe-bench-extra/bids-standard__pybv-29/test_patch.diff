diff --git a/pybv/tests/test_bv_writer.py b/pybv/tests/test_bv_writer.py
index b5ff9e9..222029b 100644
--- a/pybv/tests/test_bv_writer.py
+++ b/pybv/tests/test_bv_writer.py
@@ -11,6 +11,8 @@ import os
 import os.path as op
 from shutil import rmtree
 from tempfile import mkdtemp
+from time import gmtime
+from datetime import datetime
 
 import pytest
 
@@ -75,13 +77,31 @@ def test_bv_bad_format():
     rmtree(tmpdir)
 
 
-def test_bv_writer_oi_cycle():
+@pytest.mark.parametrize("meas_date,match",
+                         [(1, '`meas_date` must be of type str, datetime'),
+                          ('', 'Got a str for `meas_date`, but it was'),
+                          ('1973', 'Got a str for `meas_date`, but it was')])
+def test_bad_meas_date(meas_date, match):
+    """Test that bad measurement dates raise errors."""
+    tmpdir = _mktmpdir()
+    with pytest.raises(ValueError, match=match):
+        write_brainvision(data, sfreq, ch_names, fname, tmpdir,
+                          meas_date=meas_date)
+
+    rmtree(tmpdir)
+
+
+@pytest.mark.parametrize("meas_date",
+                         [('20000101120000000000'),
+                          (datetime(2000, 1, 1, 12, 0, 0, 0))])
+def test_bv_writer_oi_cycle(meas_date):
     """Test that a write-read cycle produces identical data."""
     tmpdir = _mktmpdir()
 
     # Write, then read the data to BV format
     write_brainvision(data, sfreq, ch_names, fname, tmpdir, events=events,
-                      resolution=np.power(10., -np.arange(10)))
+                      resolution=np.power(10., -np.arange(10)),
+                      meas_date=meas_date)
     vhdr_fname = op.join(tmpdir, fname + '.vhdr')
     raw_written = mne.io.read_raw_brainvision(vhdr_fname, preload=True)
     # Delete the first annotation because it's just marking a new segment
@@ -92,8 +112,8 @@ def test_bv_writer_oi_cycle():
     # sfreq
     assert sfreq == raw_written.info['sfreq']
 
-    # Event timing should be within one index of originals
-    assert_allclose(events[:, 0], events_written[:, 0], 1)
+    # Event timing should be exactly the same
+    assert_array_equal(events[:, 0], events_written[:, 0])
     assert_array_equal(events[:, 1], events_written[:, 2])
     # Should be 2 unique event types
     assert len(event_id) == 2
@@ -104,6 +124,11 @@ def test_bv_writer_oi_cycle():
     # channels
     assert ch_names == raw_written.ch_names
 
+    # measurement date, we do not test microsecs
+    unix_seconds = raw_written.info['meas_date'][0]
+    time_str = ('{:04}{:02}{:02}{:02}{:02}{:02}'.format(*gmtime(unix_seconds)))
+    assert time_str == '20000101120000'  # 1st of Jan, 2000 at 12:00 and 0 secs
+
     rmtree(tmpdir)
 
 
