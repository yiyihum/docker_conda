diff --git a/tests/test_compaction.py b/tests/test_compaction.py
index f9036d0..e3db65c 100644
--- a/tests/test_compaction.py
+++ b/tests/test_compaction.py
@@ -1,58 +1,56 @@
-from pdf417gen.compaction import compact, compact_bytes, compact_numbers, compact_text, compact_text_interim
-
-
-# def test_byte_encoder_can_encode():
-#     enc = ByteEncoder()
-#     # Can encode any byte from 0 to 255
-#     for x in range(0, 255):
-#         assert enc.can_encode(chr(x))
-
+from pdf417gen.encoding import to_bytes
+from pdf417gen.compaction import (
+    compact, compact_bytes, compact_numbers, compact_text, compact_text_interim)
 
 
 def test_byte_compactor():
-    assert list(compact_bytes("alcool")) == [163, 238, 432, 766, 244]
-    assert list(compact_bytes("alcoolique")) == [163, 238, 432, 766, 244, 105, 113, 117, 101]
-
+    def do_compact(str):
+        return list(compact_bytes(to_bytes(str)))
 
-# def test_text_encoder_can_encode():
-#     enc = TextEncoder()
-#     # Can encode ASCII 9, 10, 13, 32, 33 and 35-126
-#     # TODO: should be able to encode double quote (ASCII 34), but doesn't currently
-#     for x in range(0, 255):
-#         can_encode = x in [9, 10, 13, 32, 33] or x in range(35, 127)
-#         assert enc.can_encode(chr(x)) == can_encode
+    assert do_compact("alcool") == [163, 238, 432, 766, 244]
+    assert do_compact("alcoolique") == [163, 238, 432, 766, 244, 105, 113, 117, 101]
 
 
 def test_text_compactor_interim():
+    def do_compact(str):
+        return list(compact_text_interim(to_bytes(str)))
+
     # Upper transitions
-    assert compact_text_interim("Ff") == [5, 27, 5]
-    assert compact_text_interim("F#") == [5, 28, 15]
-    assert compact_text_interim("F!") == [5, 28, 25, 10]
+    assert do_compact("Ff") == [5, 27, 5]
+    assert do_compact("F#") == [5, 28, 15]
+    assert do_compact("F!") == [5, 28, 25, 10]
 
     # Lower transitions
-    assert compact_text_interim("fF") == [27, 5, 28, 28, 5]
-    assert compact_text_interim("f#") == [27, 5, 28, 15]
-    assert compact_text_interim("f!") == [27, 5, 28, 25, 10]
+    assert do_compact("fF") == [27, 5, 28, 28, 5]
+    assert do_compact("f#") == [27, 5, 28, 15]
+    assert do_compact("f!") == [27, 5, 28, 25, 10]
 
 
 def test_text_compactor():
-    assert compact_text("Super ") == [567, 615, 137, 809]
-    assert compact_text("Super !") == [567, 615, 137, 808, 760]
+    def do_compact(str):
+        return list(compact_text(to_bytes(str)))
+
+    assert do_compact("Super ") == [567, 615, 137, 809]
+    assert do_compact("Super !") == [567, 615, 137, 808, 760]
 
 
 def test_numbers_compactor():
-    assert list(compact_numbers("01234")) == [112, 434]
+    numbers = [ord(x) for x in "01234"]
+    assert list(compact_numbers(numbers)) == [112, 434]
 
 
 def test_compact():
+    def do_compact(str):
+        return list(compact(to_bytes(str)))
+
     # When starting with text, the first code word does not need to be the switch
-    assert list(compact("ABC123")) == [1, 89, 902, 1, 223]
+    assert do_compact("ABC123") == [1, 89, 902, 1, 223]
 
     # When starting with numbers, we do need to switch
-    assert list(compact("123ABC")) == [902, 1, 223, 900, 1, 89]
+    assert do_compact("123ABC") == [902, 1, 223, 900, 1, 89]
 
     # Also with bytes
-    assert list(compact("\x0B")) == [901, 11]
+    assert do_compact(b"\x0B") == [901, 11]
 
     # Alternate bytes switch code when number of bytes is divisble by 6
-    assert list(compact("\x0B\x0B\x0B\x0B\x0B\x0B")) == [924, 18, 455, 694, 754, 291]
+    assert do_compact(b"\x0B\x0B\x0B\x0B\x0B\x0B") == [924, 18, 455, 694, 754, 291]
diff --git a/tests/test_encode.py b/tests/test_encode.py
index 6d2b5d1..756f99b 100644
--- a/tests/test_encode.py
+++ b/tests/test_encode.py
@@ -1,4 +1,6 @@
-from pdf417gen.encoding import encode, encode_high
+# -*- coding: utf-8 -*-
+
+from pdf417gen.encoding import encode, encode_high, to_bytes
 
 TEST_DATA = '\n'.join([
     'HRVHUB30',
@@ -34,7 +36,7 @@ def test_encode_high():
         570, 805, 26, 30, 536, 314, 104, 634, 865, 479, 900, 713, 846, 93, 59,
         313, 515, 294, 844]
 
-    assert encode_high(TEST_DATA, 6, 2) == expected
+    assert encode_high(to_bytes(TEST_DATA), 6, 2) == expected
 
 
 def test_encode_low():
@@ -69,3 +71,17 @@ def test_encode_low():
     ]
 
     assert list(encode(TEST_DATA, 6, 2)) == expected
+
+
+def test_encode_unicode():
+    # These two should encode to the same string
+    uc = u"love ðŸ’”"
+    by = b"love \xf0\x9f\x92\x94"
+
+    expected = [
+        [130728, 120256, 108592, 115526, 126604, 103616, 66594, 126094, 128318, 260649],
+        [130728, 125456, 83916, 107396, 83872, 97968, 77702, 98676, 128352, 260649],
+        [130728, 86496, 128114, 90190, 98038, 72124, 72814, 81040, 86256, 260649]]
+
+    assert encode(uc) == expected
+    assert encode(by) == expected
