diff --git a/pre_commit_hooks/check_executables_have_shebangs.py b/pre_commit_hooks/check_executables_have_shebangs.py
index c34c7b7..1c50ea0 100644
--- a/pre_commit_hooks/check_executables_have_shebangs.py
+++ b/pre_commit_hooks/check_executables_have_shebangs.py
@@ -2,26 +2,60 @@
 import argparse
 import shlex
 import sys
+from typing import List
 from typing import Optional
 from typing import Sequence
+from typing import Set
 
+from pre_commit_hooks.util import cmd_output
 
-def check_has_shebang(path: str) -> int:
+EXECUTABLE_VALUES = frozenset(('1', '3', '5', '7'))
+
+
+def check_executables(paths: List[str]) -> int:
+    if sys.platform == 'win32':  # pragma: win32 cover
+        return _check_git_filemode(paths)
+    else:  # pragma: win32 no cover
+        retv = 0
+        for path in paths:
+            if not _check_has_shebang(path):
+                _message(path)
+                retv = 1
+
+        return retv
+
+
+def _check_git_filemode(paths: Sequence[str]) -> int:
+    outs = cmd_output('git', 'ls-files', '--stage', '--', *paths)
+    seen: Set[str] = set()
+    for out in outs.splitlines():
+        metadata, path = out.split('\t')
+        tagmode = metadata.split(' ', 1)[0]
+
+        is_executable = any(b in EXECUTABLE_VALUES for b in tagmode[-3:])
+        has_shebang = _check_has_shebang(path)
+        if is_executable and not has_shebang:
+            _message(path)
+            seen.add(path)
+
+    return int(bool(seen))
+
+
+def _check_has_shebang(path: str) -> int:
     with open(path, 'rb') as f:
         first_bytes = f.read(2)
 
-    if first_bytes != b'#!':
-        quoted = shlex.quote(path)
-        print(
-            f'{path}: marked executable but has no (or invalid) shebang!\n'
-            f"  If it isn't supposed to be executable, try: "
-            f'`chmod -x {quoted}`\n'
-            f'  If it is supposed to be executable, double-check its shebang.',
-            file=sys.stderr,
-        )
-        return 1
-    else:
-        return 0
+    return first_bytes == b'#!'
+
+
+def _message(path: str) -> None:
+    print(
+        f'{path}: marked executable but has no (or invalid) shebang!\n'
+        f"  If it isn't supposed to be executable, try: "
+        f'`chmod -x {shlex.quote(path)}`\n'
+        f'  If it is supposed to be executable, double-check its shebang.',
+        file=sys.stderr,
+    )
 
 
 def main(argv: Optional[Sequence[str]] = None) -> int:
@@ -29,12 +63,7 @@ def main(argv: Optional[Sequence[str]] = None) -> int:
     parser.add_argument('filenames', nargs='*')
     args = parser.parse_args(argv)
 
-    retv = 0
-
-    for filename in args.filenames:
-        retv |= check_has_shebang(filename)
-
-    return retv
+    return check_executables(args.filenames)
 
 
 if __name__ == '__main__':
diff --git a/pre_commit_hooks/requirements_txt_fixer.py b/pre_commit_hooks/requirements_txt_fixer.py
index 6190692..78103a1 100644
--- a/pre_commit_hooks/requirements_txt_fixer.py
+++ b/pre_commit_hooks/requirements_txt_fixer.py
@@ -1,4 +1,5 @@
 import argparse
+import re
 from typing import IO
 from typing import List
 from typing import Optional
@@ -10,6 +11,9 @@ FAIL = 1
 
 
 class Requirement:
+    UNTIL_COMPARISON = re.compile(b'={2,3}|!=|~=|>=?|<=?')
+    UNTIL_SEP = re.compile(rb'[^;\s]+')
+
     def __init__(self) -> None:
         self.value: Optional[bytes] = None
         self.comments: List[bytes] = []
@@ -17,11 +21,20 @@ class Requirement:
     @property
     def name(self) -> bytes:
         assert self.value is not None, self.value
+        name = self.value.lower()
         for egg in (b'#egg=', b'&egg='):
             if egg in self.value:
-                return self.value.lower().partition(egg)[-1]
+                return name.partition(egg)[-1]
+
+        m = self.UNTIL_SEP.match(name)
+        assert m is not None
+
+        name = m.group()
+        m = self.UNTIL_COMPARISON.search(name)
+        if not m:
+            return name
 
-        return self.value.lower().partition(b'==')[0]
+        return name[:m.start()]
 
     def __lt__(self, requirement: 'Requirement') -> int:
         # \n means top of file comment, so always return True,

