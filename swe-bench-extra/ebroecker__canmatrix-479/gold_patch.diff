diff --git a/src/canmatrix/canmatrix.py b/src/canmatrix/canmatrix.py
index 9a5dd66..bb21b55 100644
--- a/src/canmatrix/canmatrix.py
+++ b/src/canmatrix/canmatrix.py
@@ -156,6 +156,8 @@ class Signal(object):
 
     mux_value = attr.ib(default=None)
     is_float = attr.ib(default=False)  # type: bool
+    is_ascii = attr.ib(default=False)  # type: bool
+    type_label = attr.ib(default="")
     enumeration = attr.ib(default=None)  # type: typing.Optional[str]
     comments = attr.ib(factory=dict)  # type: typing.MutableMapping[int, str]
     attributes = attr.ib(factory=dict)  # type: typing.MutableMapping[str, typing.Any]
diff --git a/src/canmatrix/formats/sym.py b/src/canmatrix/formats/sym.py
index a67d137..7567864 100644
--- a/src/canmatrix/formats/sym.py
+++ b/src/canmatrix/formats/sym.py
@@ -104,11 +104,25 @@ def create_signal(db, signal):  # type: (canmatrix.CanMatrix, canmatrix.Signal)
     global enums
     global enum_dict
     output = ""
-    output += "Var=%s " % signal.name
-    if not signal.is_signed:
-        output += "unsigned "
+    if sys.version_info > (3, 0):
+        quote_name = not signal.name.isidentifier()
     else:
-        output += "signed "
+        from future.utils import isidentifier
+        quote_name = not isidentifier(signal.name)
+    if quote_name:
+        output += 'Var="%s" ' % signal.name
+    else:
+        output += "Var=%s " % signal.name
+    if signal.type_label:
+        output += signal.type_label + " "
+    else:
+        if signal.is_signed:
+            output += "signed "
+        elif signal.is_float:
+            output += "float "
+        else:
+            output += "unsigned "
+
     start_bit = signal.get_startbit()
     if not signal.is_little_endian:
         # Motorola
@@ -419,29 +433,29 @@ def load(f, **options):  # type: (typing.IO, **typing.Any) -> canmatrix.CanMatri
                     sig_name = temp_array[0]
 
                     is_float = False
+                    is_ascii = False
                     if index_offset != 1:
                         is_signed = True
                     else:
                         is_signed = False
 
-                        if temp_array[1] == 'unsigned':
+                        type_label = temp_array[1]
+
+                        if type_label == 'unsigned':
+                            pass
+                        elif type_label == 'bit':
                             pass
-                        elif temp_array[1] == 'bit':
-                            # TODO: actually support bit instead of interpreting as
-                            # an unsigned
+                        elif type_label == 'raw':
                             pass
-                        elif temp_array[1] == 'signed':
+                        elif type_label == 'signed':
                             is_signed = True
-                        elif temp_array[1] in ['float', 'double']:
+                        elif type_label in ['float', 'double']:
                             is_float = True
-                        elif temp_array[1] in ['string']:
-                            # TODO: actually support these variable types instead
-                            # of skipping
-                            print('Variable type \'{}\' found and skipped'
-                                  .format(temp_array[1]))
-                            continue
+                        elif type_label in ['char', 'string']:
+                            is_ascii = True
+                            pass
                         else:
-                            raise ValueError('Unknown type \'{}\' found'.format(temp_array[1]))
+                            raise ValueError('Unknown type \'{}\' found'.format(type_label))
 
                     start_bit = int(temp_array[index_offset + 1].split(',')[0])
                     signal_length = int(temp_array[index_offset + 1].split(',')[1])
@@ -521,6 +535,7 @@ def load(f, **options):  # type: (typing.IO, **typing.Any) -> canmatrix.CanMatri
                                 is_little_endian=intel,
                                 is_signed=is_signed,
                                 is_float=is_float,
+                                is_ascii=is_ascii,
                                 factor=factor,
                                 offset=offset,
                                 unit=unit,
@@ -560,6 +575,7 @@ def load(f, **options):  # type: (typing.IO, **typing.Any) -> canmatrix.CanMatri
                             unit=unit,
                             multiplex=multiplexor,
                             comment=comment,
+                            type_label=type_label,
                             **extras)
                         if min_value is not None:
                             signal.min = float_factory(min_value)
