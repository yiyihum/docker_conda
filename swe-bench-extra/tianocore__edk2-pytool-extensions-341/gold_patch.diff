diff --git a/docs/usability/environment_variables.md b/docs/usability/environment_variables.md
index 5dab021..52611e5 100644
--- a/docs/usability/environment_variables.md
+++ b/docs/usability/environment_variables.md
@@ -28,3 +28,13 @@ calling `stuart_update` and make it far easier to switch between multiple branch
 scopes where dependencies may change.
 
 For more info, see [the External Dependencies docs](using_extdep.md).
+
+## EDK_BUILD_CMD
+
+If present, the absolute path to an application to use for the edk build process will be
+invoked instead of `build`. This is primarily used to allow a tool to wrap around `build`.
+
+## EDK_BUILD_PARAMS
+
+If present, these parameters will be passed to the build command. This is primarily used to
+pair wrapper-specific parameters with the wrapper passed in `EDK_BUILD_CMD`.
diff --git a/edk2toolext/environment/uefi_build.py b/edk2toolext/environment/uefi_build.py
index 0863b12..575bcab 100644
--- a/edk2toolext/environment/uefi_build.py
+++ b/edk2toolext/environment/uefi_build.py
@@ -310,7 +310,18 @@ def Build(self):
         pre_build_env_chk = env.checkpoint()
         env.set_shell_var('PYTHONHASHSEED', '0')
         env.log_environment()
-        ret = RunCmd("build", params)
+
+        edk2_build_cmd = self.env.GetValue("EDK_BUILD_CMD")
+        if edk2_build_cmd is None:
+            edk2_build_cmd = "build"
+        logging.debug(f"The edk2 build command is {edk2_build_cmd}")
+
+        edk2_build_params = self.env.GetValue("EDK_BUILD_PARAMS")
+        if edk2_build_params is None:
+            edk2_build_params = params
+        logging.debug(f"Edk2 build parameters are {edk2_build_params}")
+
+        ret = RunCmd(edk2_build_cmd, edk2_build_params)
         # WORKAROUND - Undo the workaround.
         env.restore_checkpoint(pre_build_env_chk)
 
