diff --git a/ariadne/resolvers.py b/ariadne/resolvers.py
index 9e9bf80..e01bdbc 100644
--- a/ariadne/resolvers.py
+++ b/ariadne/resolvers.py
@@ -1,3 +1,4 @@
+from collections.abc import Mapping
 from typing import Any
 
 from graphql import default_field_resolver
@@ -41,7 +42,7 @@ snake_case_fallback_resolvers = SnakeCaseFallbackResolversSetter()
 
 
 def resolve_parent_field(parent: Any, field_name: str) -> Any:
-    if isinstance(parent, dict):
+    if isinstance(parent, Mapping):
         return parent.get(field_name)
     return getattr(parent, field_name, None)
 
diff --git a/ariadne/utils.py b/ariadne/utils.py
index 2a3e3bf..e855588 100644
--- a/ariadne/utils.py
+++ b/ariadne/utils.py
@@ -1,4 +1,5 @@
 import asyncio
+from collections.abc import Mapping
 from functools import wraps
 from typing import Optional, Union, Callable, Dict, Any
 
@@ -49,13 +50,15 @@ def unwrap_graphql_error(
 
 
 def convert_kwargs_to_snake_case(func: Callable) -> Callable:
-    def convert_to_snake_case(d: Dict) -> Dict:
+    def convert_to_snake_case(m: Mapping) -> Dict:
         converted: Dict = {}
-        for k, v in d.items():
-            if isinstance(v, dict):
+        for k, v in m.items():
+            if isinstance(v, Mapping):
                 v = convert_to_snake_case(v)
             if isinstance(v, list):
-                v = [convert_to_snake_case(i) if isinstance(i, dict) else i for i in v]
+                v = [
+                    convert_to_snake_case(i) if isinstance(i, Mapping) else i for i in v
+                ]
             converted[convert_camel_case_to_snake(k)] = v
         return converted
 

