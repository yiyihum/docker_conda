diff --git a/tests/conftest.py b/tests/conftest.py
index eef6627..b545a3d 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -1,3 +1,5 @@
+from collections.abc import Mapping
+
 import pytest
 from graphql.validation.rules import ValidationRule
 
@@ -123,3 +125,21 @@ def validation_rule():
         pass
 
     return NoopRule
+
+
+@pytest.fixture
+def fake_mapping():
+    class FakeMapping(Mapping):
+        def __init__(self, **kwargs):
+            self._dummy = {**kwargs}
+
+        def __getitem__(self, key):
+            return self._dummy[key]
+
+        def __iter__(self):
+            return iter(self._dummy)
+
+        def __len__(self):
+            return len(self._dummy.keys())
+
+    return FakeMapping
diff --git a/tests/test_kwargs_camel_case_conversion.py b/tests/test_kwargs_camel_case_conversion.py
index f1812e1..4a37103 100644
--- a/tests/test_kwargs_camel_case_conversion.py
+++ b/tests/test_kwargs_camel_case_conversion.py
@@ -5,30 +5,46 @@ from ariadne import convert_kwargs_to_snake_case
 
 def test_decorator_converts_kwargs_to_camel_case():
     @convert_kwargs_to_snake_case
-    def my_func(*_, **kwargs):
+    def wrapped_func(*_, **kwargs):
         assert kwargs == {
             "first_parameter": True,
             "second_parameter": "value",
             "nested_parameter": {"first_sub_entry": 1, "second_sub_entry": 2},
         }
 
-    my_func(
+    wrapped_func(
         firstParameter=True,
         secondParameter="value",
         nestedParameter={"firstSubEntry": 1, "secondSubEntry": 2},
     )
 
 
+def test_decorator_converts_kwargs_to_camel_case_for_mapping(fake_mapping):
+    @convert_kwargs_to_snake_case
+    def wrapped_func(*_, **kwargs):
+        assert kwargs == {
+            "first_parameter": True,
+            "second_parameter": "value",
+            "nested_parameter": {"first_sub_entry": 1, "second_sub_entry": 2},
+        }
+
+    wrapped_func(
+        firstParameter=True,
+        secondParameter="value",
+        nestedParameter=fake_mapping(firstSubEntry=1, secondSubEntry=2),
+    )
+
+
 def test_decorator_leaves_snake_case_kwargs_unchanged():
     @convert_kwargs_to_snake_case
-    def my_func(*_, **kwargs):
+    def wrapped_func(*_, **kwargs):
         assert kwargs == {
             "first_parameter": True,
             "second_parameter": "value",
             "nested_parameter": {"first_sub_entry": 1, "second_sub_entry": 2},
         }
 
-    my_func(
+    wrapped_func(
         first_parameter=True,
         second_parameter="value",
         nested_parameter={"first_sub_entry": 1, "second_sub_entry": 2},
@@ -37,7 +53,7 @@ def test_decorator_leaves_snake_case_kwargs_unchanged():
 
 def test_decorator_converts_objects_in_lists_to_camel_case():
     @convert_kwargs_to_snake_case
-    def my_func(*_, **kwargs):
+    def wrapped_func(*_, **kwargs):
         assert kwargs == {
             "first_parameter": True,
             "list_of_items": [
@@ -45,21 +61,37 @@ def test_decorator_converts_objects_in_lists_to_camel_case():
             ],
         }
 
-    my_func(
+    wrapped_func(
         firstParameter=True,
         listOfItems=[{"firstProperty": 1, "secondProperty": 2}],
     )
 
 
+def test_decorator_converts_mappings_in_lists_to_camel_case(fake_mapping):
+    @convert_kwargs_to_snake_case
+    def wrapped_func(*_, **kwargs):
+        assert kwargs == {
+            "first_parameter": True,
+            "list_of_items": [
+                {"first_property": 1, "second_property": 2},
+            ],
+        }
+
+    wrapped_func(
+        firstParameter=True,
+        listOfItems=[fake_mapping(firstProperty=1, secondProperty=2)],
+    )
+
+
 def test_decorator_leaves_primitives_in_lists_unchanged():
     @convert_kwargs_to_snake_case
-    def my_func(*_, **kwargs):
+    def wrapped_func(*_, **kwargs):
         assert kwargs == {
             "first_parameter": True,
             "list_of_items": ["firstItem", "secondItem"],
         }
 
-    my_func(
+    wrapped_func(
         firstParameter=True,
         listOfItems=["firstItem", "secondItem"],
     )
@@ -68,14 +100,14 @@ def test_decorator_leaves_primitives_in_lists_unchanged():
 @pytest.mark.asyncio
 async def test_decorator_converts_kwargs_to_camel_case_for_async_resolver():
     @convert_kwargs_to_snake_case
-    async def my_func(*_, **kwargs):
+    async def wrapped_func(*_, **kwargs):
         assert kwargs == {
             "first_parameter": True,
             "second_parameter": "value",
             "nested_parameter": {"first_sub_entry": 1, "second_sub_entry": 2},
         }
 
-    await my_func(
+    await wrapped_func(
         firstParameter=True,
         secondParameter="value",
         nestedParameter={"firstSubEntry": 1, "secondSubEntry": 2},
@@ -85,14 +117,14 @@ async def test_decorator_converts_kwargs_to_camel_case_for_async_resolver():
 @pytest.mark.asyncio
 async def test_decorator_leaves_snake_case_kwargs_unchanged_for_async_resolver():
     @convert_kwargs_to_snake_case
-    async def my_func(*_, **kwargs):
+    async def wrapped_func(*_, **kwargs):
         assert kwargs == {
             "first_parameter": True,
             "second_parameter": "value",
             "nested_parameter": {"first_sub_entry": 1, "second_sub_entry": 2},
         }
 
-    await my_func(
+    await wrapped_func(
         first_parameter=True,
         second_parameter="value",
         nested_parameter={"first_sub_entry": 1, "second_sub_entry": 2},
