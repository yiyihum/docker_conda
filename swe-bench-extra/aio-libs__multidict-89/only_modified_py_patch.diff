diff --git a/benchmark.py b/benchmark.py
index 492e582..379b998 100644
--- a/benchmark.py
+++ b/benchmark.py
@@ -11,22 +11,22 @@ dct[key]
 """
 
 cython_multidict = """\
-from multidict import MultiDict
+from multidict import MultiDict, istr
 dct = MultiDict()
 """
 
 python_multidict = """\
-from multidict._multidict_py import MultiDict
+from multidict._multidict_py import MultiDict, istr
 dct = MultiDict()
 """
 
 cython_cimultidict = """\
-from multidict import CIMultiDict, upstr
+from multidict import CIMultiDict, istr
 dct = CIMultiDict()
 """
 
 python_cimultidict = """\
-from multidict._multidict_py import CIMultiDict, upstr
+from multidict._multidict_py import CIMultiDict, istr
 dct = CIMultiDict()
 """
 
@@ -37,20 +37,20 @@ for i in range(20):
 key = 'key10'
 """
 
-fill_upstr = """\
+fill_istr = """\
 for i in range(20):
-    key = upstr('key'+str(i))
+    key = istr('key'+str(i))
     dct[key] = str(i)
 
-key = upstr('key10')
+key = istr('key10')
 """
 
-upstr_from_upstr = """\
-upstr(val)
+istr_from_istr = """\
+istr(val)
 """
 
-make_upstr = """\
-val = upstr('VaLuE')
+make_istr = """\
+val = istr('VaLuE')
 """
 
 print("Cython / Python / x")
@@ -60,7 +60,14 @@ gc.collect()
 t2 = timeit.timeit(setitem, python_multidict+fill)
 gc.collect()
 
-print("MD.setitem str: {:.3f}s {:3f}s {:1f}x".format(t1, t2, t2/t1))
+print("MD.setitem str: {:.3f}s {:.3f}s {:.1f}x".format(t1, t2, t2/t1))
+
+t1 = timeit.timeit(setitem, cython_multidict+fill_istr)
+gc.collect()
+t2 = timeit.timeit(setitem, python_multidict+fill_istr)
+gc.collect()
+
+print("MD.setitem istr: {:.3f}s {:.3f}s {:.1f}x".format(t1, t2, t2/t1))
 
 
 t1 = timeit.timeit(getitem, cython_multidict+fill)
@@ -68,23 +75,23 @@ gc.collect()
 t2 = timeit.timeit(getitem, python_multidict+fill)
 gc.collect()
 
-print("MD.getitem str: {:.3f}s {:3f}s {:1f}x".format(t1, t2, t2/t1))
+print("MD.getitem str: {:.3f}s {:.3f}s {:.1f}x".format(t1, t2, t2/t1))
 
 
 t1 = timeit.timeit(getitem, cython_cimultidict+fill)
 gc.collect()
 t2 = timeit.timeit(getitem, python_cimultidict+fill)
 gc.collect()
-print("CI.getitem str: {:.3f}s {:3f}s {:1f}x".format(t1, t2, t2/t1))
+print("CI.getitem str: {:.3f}s {:.3f}s {:.1f}x".format(t1, t2, t2/t1))
 
-t1 = timeit.timeit(getitem, cython_cimultidict+fill_upstr)
+t1 = timeit.timeit(getitem, cython_cimultidict+fill_istr)
 gc.collect()
-t2 = timeit.timeit(getitem, python_cimultidict+fill_upstr)
+t2 = timeit.timeit(getitem, python_cimultidict+fill_istr)
 gc.collect()
-print("CI.getitem istr: {:.3f}s {:3f}s {:1f}x".format(t1, t2, t2/t1))
+print("CI.getitem istr: {:.3f}s {:.3f}s {:.1f}x".format(t1, t2, t2/t1))
 
-t1 = timeit.timeit(upstr_from_upstr, cython_cimultidict+make_upstr)
+t1 = timeit.timeit(istr_from_istr, cython_cimultidict+make_istr)
 gc.collect()
-t2 = timeit.timeit(upstr_from_upstr, python_cimultidict+make_upstr)
+t2 = timeit.timeit(istr_from_istr, python_cimultidict+make_istr)
 gc.collect()
-print("istr from istr: {:.3f}s {:3f}s {:1f}x".format(t1, t2, t2/t1))
+print("istr from istr: {:.3f}s {:.3f}s {:.1f}x".format(t1, t2, t2/t1))
diff --git a/multidict/_multidict_py.py b/multidict/_multidict_py.py
index 3428081..c8fb628 100644
--- a/multidict/_multidict_py.py
+++ b/multidict/_multidict_py.py
@@ -167,9 +167,16 @@ class MultiDict(_Base, abc.MutableMapping):
     def _title(self, key):
         return key
 
+    def _key(self, key):
+        if isinstance(key, str):
+            return str(key)
+        else:
+            raise TypeError("MultiDict keys should be either str "
+                            "or subclasses of str")
+
     def add(self, key, value):
         identity = self._title(key)
-        self._items.append((identity, key, value))
+        self._items.append((identity, self._key(key), value))
 
     def copy(self):
         """Return a copy of itself."""
@@ -272,6 +279,7 @@ class MultiDict(_Base, abc.MutableMapping):
         self._extend(args, kwargs, 'update', self._replace)
 
     def _replace(self, key, value):
+        key = self._key(key)
         identity = self._title(key)
         items = self._items
 

