diff --git a/tests/integration/examples_test.py b/tests/integration/examples_test.py
index 463673d..e0d8e6f 100644
--- a/tests/integration/examples_test.py
+++ b/tests/integration/examples_test.py
@@ -1,4 +1,3 @@
-import sys
 import subprocess
 import pytest
 from pathlib import Path
@@ -15,12 +14,6 @@ if platform.python_implementation() == "PyPy":
     examples.remove("mocket_example.py")
 
 
-if sys.version_info >= (3, 12):
-    # See pyproject.toml note on aiohttp dependency
-    examples.remove("aiohttp_client.py")
-    examples.remove("decorator_activate_async.py")
-
-
 @pytest.mark.parametrize("example", examples)
 def test_examples(example):
     result = subprocess.run(["python", "examples/{}".format(example)])
diff --git a/tests/unit/exceptions_test.py b/tests/unit/exceptions_test.py
index 0c64d2d..9245410 100644
--- a/tests/unit/exceptions_test.py
+++ b/tests/unit/exceptions_test.py
@@ -4,6 +4,5 @@ from pook import exceptions as ex
 def test_exceptions():
     assert isinstance(ex.PookNoMatches(), Exception)
     assert isinstance(ex.PookInvalidBody(), Exception)
-    assert isinstance(ex.PookExpiredMock(), Exception)
     assert isinstance(ex.PookNetworkFilterError(), Exception)
     assert isinstance(ex.PookInvalidArgument(), Exception)
diff --git a/tests/unit/mock_test.py b/tests/unit/mock_test.py
index 35d342d..856a5e7 100644
--- a/tests/unit/mock_test.py
+++ b/tests/unit/mock_test.py
@@ -4,6 +4,7 @@ import json
 import pook
 from pook.mock import Mock
 from pook.request import Request
+from pook.exceptions import PookNoMatches
 from urllib.request import urlopen
 
 
@@ -123,3 +124,34 @@ def test_mock_params(url, params, req, expected, mock):
 
 def test_new_response(mock):
     assert mock.reply() != mock.reply(new_response=True, json={})
+
+
+def test_times(mock):
+    url = "https://example.com"
+    mock.url(url)
+    mock.times(2)
+
+    req = Request(url=url)
+
+    assert mock.match(req) == (True, [])
+    assert mock.match(req) == (True, [])
+    matches, errors = mock.match(req)
+    assert not matches
+    assert len(errors) == 1
+    assert "Mock matches request but is expired." in errors[0]
+    assert repr(mock) in errors[0]
+
+
+@pytest.mark.pook
+def test_times_integrated(httpbin):
+    url = f"{httpbin.url}/status/404"
+    pook.get(url).times(2).reply(200).body("hello from pook")
+
+    res = urlopen(url)
+    assert res.read() == "hello from pook"
+
+    res = urlopen(url)
+    assert res.read() == "hello from pook"
+
+    with pytest.raises(PookNoMatches, match="Mock matches request but is expired."):
+        urlopen(url)
