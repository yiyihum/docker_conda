diff --git a/keg_elements/forms/__init__.py b/keg_elements/forms/__init__.py
index c045e2c..4bde279 100644
--- a/keg_elements/forms/__init__.py
+++ b/keg_elements/forms/__init__.py
@@ -365,6 +365,8 @@ class FormGenerator(FormGeneratorBase):
     def create_validators(self, prop, column):
         validators = super(FormGenerator, self).create_validators(prop, column)
         if isinstance(column.type, sa.Numeric) and not isinstance(column.type, sa.Float):
+            if column.type.precision is None or column.type.scale is None:
+                raise ValueError('Numeric fields must specify precision and scale')
             max_ = _max_for_numeric(column.type.precision, column.type.scale)
             validators.append(NumberRange(min=-max_, max=max_))
             validators.append(NumberScale(column.type.scale))
diff --git a/keg_elements/forms/validators.py b/keg_elements/forms/validators.py
index 62be761..56e0dc1 100644
--- a/keg_elements/forms/validators.py
+++ b/keg_elements/forms/validators.py
@@ -44,7 +44,7 @@ def numeric(form, field):
 
 
 class NumberScale(object):
-    def __init__(self, scale=-1, message=None):
+    def __init__(self, scale, message=None):
         self.scale = scale
         if not message:
             message = _(u'Field must have no more than {scale} decimal places.', scale=scale)
@@ -56,7 +56,7 @@ class NumberScale(object):
             return
         # use decimal's quantization to see if it's equal to field data at the full scale.
         #   If it isn't, user entered too many decimal places
-        if field.data != field.data.quantize(Decimal('0.{}1'.format('0' * (self.scale - 1)))):
+        if field.data != field.data.quantize(Decimal(1) / 10 ** self.scale):
             raise ValidationError(self.message)
 
 
diff --git a/kegel_app/model/entities.py b/kegel_app/model/entities.py
index 59c5a0e..83a6abe 100644
--- a/kegel_app/model/entities.py
+++ b/kegel_app/model/entities.py
@@ -219,3 +219,9 @@ class SoftDeleteTester(mixins.SoftDeleteMixin, mixins.DefaultMixin, db.Model):
     def testing_create(cls, **kwargs):
         kwargs['hdp_id'] = kwargs.get('hpd_id') or HardDeleteParent.testing_create().id
         return super().testing_create(**kwargs)
+
+
+class DefaultNumeric(mixins.DefaultMixin, db.Model):
+    __tablename__ = 'default_numeric'
+
+    number = sa.Column(sa.Numeric)

