diff --git a/text_to_num/lang/english.py b/text_to_num/lang/english.py
index 4286476..9332a37 100644
--- a/text_to_num/lang/english.py
+++ b/text_to_num/lang/english.py
@@ -32,6 +32,8 @@ from .base import Language
 # Those words multiplies lesser numbers (see Rules)
 # Special case: "hundred" is processed apart.
 MULTIPLIERS = {
+    "hundred": 100,
+    "hundreds": 100,
     "thousand": 1_000,
     "thousands": 1_000,
     "million": 1_000_000,
diff --git a/text_to_num/parsers.py b/text_to_num/parsers.py
index 72c3add..b406b81 100644
--- a/text_to_num/parsers.py
+++ b/text_to_num/parsers.py
@@ -120,11 +120,11 @@ class WordStreamValueParser(WordStreamValueParserInterface):
             return coef != self.value
 
         """Is this multiplier expected?"""
-        if coef > self.value and (self.value > 0 or coef >= 1000):
+        if coef > self.value and (self.value > 0 or coef >= 100):
             # a multiplier can be applied to anything lesser than itself,
             # as long as it not zero (special case for 1000 which then implies 1)
             return True
-        if coef * 1000 <= self.n000_val:
+        if coef * 1000 <= self.n000_val or coef == 100 and 100 > self.grp_val:
             # a multiplier can not be applied to a value bigger than itself,
             # so it must be applied to the current group only.
             # ex. for "mille": "deux millions cent cinquante mille"
@@ -133,7 +133,7 @@ class WordStreamValueParser(WordStreamValueParserInterface):
             # we test the 1000 × ``coef`` (as the multipliers above 100,
             # are a geometric progression of ratio 1000)
             return (
-                self.grp_val > 0 or coef == 1000
+                self.grp_val > 0 or coef == 1000 or coef == 100
             )  # "mille" without unit      is additive
         # TODO: There is one exception to the above rule: "de milliard"
         # ex. : "mille milliards de milliards"
@@ -175,6 +175,10 @@ class WordStreamValueParser(WordStreamValueParserInterface):
                 return False
             # a multiplier can not be applied to a value bigger than itself,
             # so it must be applied to the current group
+            if coef < 1000:
+                self.grp_val = (self.grp_val or 1) * coef
+                self.last_word = None
+                return True
             if coef < self.n000_val:
                 self.n000_val = self.n000_val + coef * (
                     self.grp_val or 1
