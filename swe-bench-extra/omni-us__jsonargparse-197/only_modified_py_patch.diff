diff --git a/jsonargparse/actions.py b/jsonargparse/actions.py
index c93b2df..e9ee140 100644
--- a/jsonargparse/actions.py
+++ b/jsonargparse/actions.py
@@ -480,7 +480,7 @@ class ActionParser:
         """Initializer for ActionParser instance.
 
         Args:
-            parser: A parser to parse the option with.
+            parser (Optional[ArgumentParser]): A parser to parse the option with.
 
         Raises:
             ValueError: If the parser parameter is invalid.
diff --git a/jsonargparse/core.py b/jsonargparse/core.py
index 57bf6d7..f700fdc 100644
--- a/jsonargparse/core.py
+++ b/jsonargparse/core.py
@@ -212,7 +212,7 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
             self.groups = {}
         self.required_args: Set[str] = set()
         self.save_path_content: Set[str] = set()
-        self.default_config_files = default_config_files
+        self.default_config_files = default_config_files  # type: ignore
         self.default_meta = default_meta
         self.default_env = default_env
         self.env_prefix = env_prefix
@@ -861,11 +861,11 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
 
     ## Methods related to defaults ##
 
-    def set_defaults(self, *args, **kwargs) -> None:
+    def set_defaults(self, *args: Dict[str, Any], **kwargs: Any) -> None:
         """Sets default values from dictionary or keyword arguments.
 
         Args:
-            *args (dict): Dictionary defining the default values to set.
+            *args: Dictionary defining the default values to set.
             **kwargs: Sets default values based on keyword arguments.
 
         Raises:
@@ -938,7 +938,6 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
         """Returns a namespace with all default values.
 
         Args:
-            nested: Whether the namespace should be nested.
             skip_check: Whether to skip check if configuration is valid.
 
         Returns:
@@ -1314,7 +1313,7 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
     ## Properties ##
 
     @property
-    def error_handler(self):
+    def error_handler(self) -> Optional[Callable[['ArgumentParser', str], None]]:
         """Property for the error_handler function that is called when there are parsing errors.
 
         :getter: Returns the current error_handler function.
@@ -1327,7 +1326,7 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
 
 
     @error_handler.setter
-    def error_handler(self, error_handler):
+    def error_handler(self, error_handler: Optional[Callable[['ArgumentParser', str], None]]):
         if callable(error_handler) or error_handler is None:
             self._error_handler = error_handler
         else:
@@ -1335,7 +1334,7 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
 
 
     @property
-    def default_config_files(self):
+    def default_config_files(self) -> List[str]:
         """Default config file locations.
 
         :getter: Returns the current default config file locations.
@@ -1348,7 +1347,7 @@ class ArgumentParser(ActionsContainer, ArgumentLinking, argparse.ArgumentParser)
 
 
     @default_config_files.setter
-    def default_config_files(self, default_config_files:Optional[List[str]]):
+    def default_config_files(self, default_config_files: Optional[List[str]]):
         if default_config_files is None:
             self._default_config_files = []
         elif isinstance(default_config_files, list) and all(isinstance(x, str) for x in default_config_files):
diff --git a/jsonargparse/typehints.py b/jsonargparse/typehints.py
index 5c7a680..f3344ce 100644
--- a/jsonargparse/typehints.py
+++ b/jsonargparse/typehints.py
@@ -384,7 +384,7 @@ class ActionTypeHint(Action):
                 path_meta = val.pop('__path__', None) if isinstance(val, dict) else None
 
                 prev_val = cfg.get(self.dest) if cfg else None
-                if not prev_val and not sub_defaults.get() and is_subclass_spec(self.default):
+                if prev_val is None and not sub_defaults.get() and is_subclass_spec(self.default):
                     prev_val = Namespace(class_path=self.default.class_path)
 
                 kwargs = {
diff --git a/jsonargparse/util.py b/jsonargparse/util.py
index e71042e..0f86ba8 100644
--- a/jsonargparse/util.py
+++ b/jsonargparse/util.py
@@ -586,12 +586,12 @@ class LoggerProperty:
 
     def __init__(self, *args, logger: Union[bool, str, dict, logging.Logger] = False, **kwargs):
         """Initializer for LoggerProperty class."""
-        self.logger = logger
+        self.logger = logger  # type: ignore
         super().__init__(*args, **kwargs)
 
 
     @property
-    def logger(self):
+    def logger(self) -> logging.Logger:
         """The logger property for the class.
 
         :getter: Returns the current logger.

