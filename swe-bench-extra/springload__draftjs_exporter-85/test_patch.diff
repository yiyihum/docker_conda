diff --git a/tests/test_composite_decorators.py b/tests/test_composite_decorators.py
index 721f4dd..aeb029c 100644
--- a/tests/test_composite_decorators.py
+++ b/tests/test_composite_decorators.py
@@ -55,7 +55,7 @@ class TestHashtag(unittest.TestCase):
         self.assertEqual(DOM.render(DOM.create_element(HASHTAG_DECORATOR['component'], {'block': {'type': BLOCK_TYPES.UNSTYLED}}, '#hashtagtest')), '<span class="hashtag">#hashtagtest</span>')
 
     def test_render_code_block(self):
-        self.assertEqual(DOM.render(DOM.create_element(HASHTAG_DECORATOR['component'], {'block': {'type': BLOCK_TYPES.CODE}}, '#hashtagtest')), '#hashtagtest')
+        self.assertEqual(DOM.create_element(HASHTAG_DECORATOR['component'], {'block': {'type': BLOCK_TYPES.CODE}}, '#hashtagtest'), '#hashtagtest')
 
 
 class TestBR(unittest.TestCase):
@@ -68,7 +68,7 @@ class TestBR(unittest.TestCase):
 
 class TestCompositeDecorators(unittest.TestCase):
     def test_render_decorators_empty(self):
-        self.assertEqual(DOM.render(render_decorators([], 'test https://www.example.com#hash #hashtagtest', {'type': BLOCK_TYPES.UNSTYLED, 'depth': 0})), 'test https://www.example.com#hash #hashtagtest')
+        self.assertEqual(render_decorators([], 'test https://www.example.com#hash #hashtagtest', {'type': BLOCK_TYPES.UNSTYLED, 'depth': 0}), 'test https://www.example.com#hash #hashtagtest')
 
     def test_render_decorators_single(self):
         self.assertEqual(DOM.render(render_decorators([LINKIFY_DECORATOR], 'test https://www.example.com#hash #hashtagtest', {'type': BLOCK_TYPES.UNSTYLED, 'depth': 0})), 'test <a href="https://www.example.com#hash">https://www.example.com#hash</a> #hashtagtest')
diff --git a/tests/test_dom.py b/tests/test_dom.py
index 48eed62..e5d5172 100644
--- a/tests/test_dom.py
+++ b/tests/test_dom.py
@@ -5,6 +5,7 @@ import unittest
 from draftjs_exporter.dom import DOM
 from draftjs_exporter.engines.html5lib import DOM_HTML5LIB
 from draftjs_exporter.engines.lxml import DOM_LXML
+from draftjs_exporter.engines.string import DOMString
 from tests.test_entities import icon
 
 
@@ -29,6 +30,10 @@ class TestDOM(unittest.TestCase):
         DOM.use(DOM.HTML5LIB)
         self.assertEqual(DOM.dom, DOM_HTML5LIB)
 
+    def test_use_string(self):
+        DOM.use(DOM.STRING)
+        self.assertEqual(DOM.dom, DOMString)
+
     def test_use_invalid(self):
         with self.assertRaises(ImportError):
             DOM.use('test')
diff --git a/tests/test_html.py b/tests/test_html.py
index 86a2ceb..069196a 100644
--- a/tests/test_html.py
+++ b/tests/test_html.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import, unicode_literals
 import unittest
 
 from draftjs_exporter.command import Command
+from draftjs_exporter.dom import DOM
+from draftjs_exporter.engines.string import DOMString
 from draftjs_exporter.html import HTML
 
 config = {
@@ -29,6 +31,10 @@ class TestHTML(unittest.TestCase):
     def test_init(self):
         self.assertIsInstance(self.exporter, HTML)
 
+    def test_init_dom_engine_default(self):
+        HTML()
+        self.assertEqual(DOM.dom, DOMString)
+
     def test_render_block_exists(self):
         self.assertTrue('render_block' in dir(self.exporter))
 
diff --git a/tests/test_output.py b/tests/test_output.py
index 28726d7..3922ee4 100644
--- a/tests/test_output.py
+++ b/tests/test_output.py
@@ -43,7 +43,7 @@ config = {
             'props': {'style': {'textDecoration': 'underline'}},
         },
     },
-    'engine': DOM.HTML5LIB
+    'engine': DOM.STRING,
 }
 
 
diff --git a/tests/test_style_state.py b/tests/test_style_state.py
index 8101933..44b3120 100644
--- a/tests/test_style_state.py
+++ b/tests/test_style_state.py
@@ -32,7 +32,7 @@ style_map = {
 
 class TestStyleState(unittest.TestCase):
     def setUp(self):
-        DOM.use(DOM.HTML5LIB)
+        DOM.use(DOM.STRING)
         self.style_state = StyleState(style_map)
 
     def test_init(self):
diff --git a/tests/test_wrapper_state.py b/tests/test_wrapper_state.py
index 60deb78..8d2cebe 100644
--- a/tests/test_wrapper_state.py
+++ b/tests/test_wrapper_state.py
@@ -9,7 +9,7 @@ from example import blockquote, list_item, ordered_list
 
 class TestWrapperState(unittest.TestCase):
     def setUp(self):
-        DOM.use(DOM.HTML5LIB)
+        DOM.use(DOM.STRING)
 
         self.wrapper_state = WrapperState({
             'header-one': 'h1',
@@ -106,7 +106,7 @@ class TestWrapperState(unittest.TestCase):
 
 class TestBlockquote(unittest.TestCase):
     def setUp(self):
-        DOM.use(DOM.HTML5LIB)
+        DOM.use(DOM.STRING)
 
     def test_render_debug(self):
         self.assertEqual(DOM.render_debug(DOM.create_element(blockquote, {
@@ -120,7 +120,7 @@ class TestBlockquote(unittest.TestCase):
 
 class TestListItem(unittest.TestCase):
     def setUp(self):
-        DOM.use(DOM.HTML5LIB)
+        DOM.use(DOM.STRING)
 
     def test_render_debug(self):
         self.assertEqual(DOM.render_debug(DOM.create_element(list_item, {
