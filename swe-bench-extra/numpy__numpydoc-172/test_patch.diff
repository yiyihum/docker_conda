diff --git a/numpydoc/tests/test_docscrape.py b/numpydoc/tests/test_docscrape.py
index 2085948..b4b7e03 100644
--- a/numpydoc/tests/test_docscrape.py
+++ b/numpydoc/tests/test_docscrape.py
@@ -150,6 +150,25 @@ int
 doc_yields = NumpyDocString(doc_yields_txt)
 
 
+doc_sent_txt = """
+Test generator
+
+Yields
+------
+a : int
+    The number of apples.
+
+Receives
+--------
+b : int
+    The number of bananas.
+c : int
+    The number of oranges.
+
+"""
+doc_sent = NumpyDocString(doc_sent_txt)
+
+
 def test_signature():
     assert doc['Signature'].startswith('numpy.multivariate_normal(')
     assert doc['Signature'].endswith('spam=None)')
@@ -216,6 +235,38 @@ def test_yields():
         assert desc[0].endswith(end)
 
 
+def test_sent():
+    section = doc_sent['Receives']
+    assert len(section) == 2
+    truth = [('b', 'int', 'bananas.'),
+             ('c', 'int', 'oranges.')]
+    for (arg, arg_type, desc), (arg_, arg_type_, end) in zip(section, truth):
+        assert arg == arg_
+        assert arg_type == arg_type_
+        assert desc[0].startswith('The number of')
+        assert desc[0].endswith(end)
+
+
+def test_returnyield():
+    doc_text = """
+Test having returns and yields.
+
+Returns
+-------
+int
+    The number of apples.
+
+Yields
+------
+a : int
+    The number of apples.
+b : int
+    The number of bananas.
+
+"""
+    assert_raises(ValueError, NumpyDocString, doc_text)
+
+
 def test_returnyield():
     doc_text = """
 Test having returns and yields.
@@ -335,7 +386,7 @@ def line_by_line_compare(a, b):
     b = textwrap.dedent(b)
     a = [l.rstrip() for l in _strip_blank_lines(a).split('\n')]
     b = [l.rstrip() for l in _strip_blank_lines(b).split('\n')]
-    assert all(x == y for x, y in zip(a, b))
+    assert all(x == y for x, y in zip(a, b)), str([[x, y] for x, y in zip(a, b) if x != y])
 
 
 def test_str():
@@ -403,7 +454,7 @@ See Also
 --------
 
 `some`_, `other`_, `funcs`_
-
+    ..
 `otherfunc`_
     relationship
 
@@ -468,6 +519,25 @@ int
 .. index:: """)
 
 
+def test_receives_str():
+    line_by_line_compare(str(doc_sent),
+"""Test generator
+
+Yields
+------
+a : int
+    The number of apples.
+
+Receives
+--------
+b : int
+    The number of bananas.
+c : int
+    The number of oranges.
+
+.. index:: """)
+
+
 def test_no_index_in_str():
     assert "index" not in str(NumpyDocString("""Test idx
 
@@ -553,7 +623,7 @@ of the one-dimensional normal distribution to higher dimensions.
 .. seealso::
 
     :obj:`some`, :obj:`other`, :obj:`funcs`
-
+        ..
     :obj:`otherfunc`
         relationship
 
@@ -709,36 +779,46 @@ def test_see_also():
              multiple lines
     func_f, func_g, :meth:`func_h`, func_j,
     func_k
+    func_f1, func_g1, :meth:`func_h1`, func_j1
+    func_f2, func_g2, :meth:`func_h2`, func_j2 : description of multiple
     :obj:`baz.obj_q`
     :obj:`~baz.obj_r`
     :class:`class_j`: fubar
         foobar
     """)
 
-    assert len(doc6['See Also']) == 13
-    for func, desc, role in doc6['See Also']:
-        if func in ('func_a', 'func_b', 'func_c', 'func_f',
-                    'func_g', 'func_h', 'func_j', 'func_k', 'baz.obj_q',
-                    '~baz.obj_r'):
-            assert(not desc)
-        else:
-            assert(desc)
-
-        if func == 'func_h':
-            assert role == 'meth'
-        elif func == 'baz.obj_q' or func == '~baz.obj_r':
-            assert role == 'obj'
-        elif func == 'class_j':
-            assert role == 'class'
-        else:
-            assert role is None
+    assert len(doc6['See Also']) == 10
+    for funcs, desc in doc6['See Also']:
+        for func, role in funcs:
+            if func in ('func_a', 'func_b', 'func_c', 'func_f',
+                        'func_g', 'func_h', 'func_j', 'func_k', 'baz.obj_q',
+                        'func_f1', 'func_g1', 'func_h1', 'func_j1',
+                        '~baz.obj_r'):
+                assert not desc, str([func, desc])
+            elif func in ('func_f2', 'func_g2', 'func_h2', 'func_j2'):
+                assert desc, str([func, desc])
+            else:
+                assert desc, str([func, desc])
+
+            if func == 'func_h':
+                assert role == 'meth'
+            elif func == 'baz.obj_q' or func == '~baz.obj_r':
+                assert role == 'obj'
+            elif func == 'class_j':
+                assert role == 'class'
+            elif func in ['func_h1', 'func_h2']:
+                assert role == 'meth'
+            else:
+                assert role is None, str([func, role])
 
-        if func == 'func_d':
-            assert desc == ['some equivalent func']
-        elif func == 'foo.func_e':
-            assert desc == ['some other func over', 'multiple lines']
-        elif func == 'class_j':
-            assert desc == ['fubar', 'foobar']
+            if func == 'func_d':
+                assert desc == ['some equivalent func']
+            elif func == 'foo.func_e':
+                assert desc == ['some other func over', 'multiple lines']
+            elif func == 'class_j':
+                assert desc == ['fubar', 'foobar']
+            elif func in ['func_f2', 'func_g2', 'func_h2', 'func_j2']:
+                assert desc == ['description of multiple'], str([desc, ['description of multiple']])
 
 
 def test_see_also_parse_error():
@@ -796,11 +876,13 @@ This should be ignored and warned about
         pass
 
     with warnings.catch_warnings(record=True) as w:
+        warnings.filterwarnings('always', '', UserWarning)
         NumpyDocString(doc_text)
         assert len(w) == 1
         assert "Unknown section Mope" == str(w[0].message)
 
     with warnings.catch_warnings(record=True) as w:
+        warnings.filterwarnings('always', '', UserWarning)
         SphinxClassDoc(BadSection)
         assert len(w) == 1
         assert('test_docscrape.test_unknown_section.<locals>.BadSection'
@@ -1267,6 +1349,24 @@ def test_args_and_kwargs():
         Keyword arguments
     """)
 
+def test_autoclass():
+    cfg=dict(show_class_members=True,
+             show_inherited_class_members=True)
+    doc = SphinxClassDoc(str, '''
+A top section before
+
+.. autoclass:: str
+    ''', config=cfg)
+    line_by_line_compare(str(doc), r'''
+A top section before
+
+.. autoclass:: str
+
+.. rubric:: Methods
+
+
+    ''')
+
 
 if __name__ == "__main__":
     import pytest
diff --git a/numpydoc/tests/test_numpydoc.py b/numpydoc/tests/test_numpydoc.py
new file mode 100644
index 0000000..3a0bd12
--- /dev/null
+++ b/numpydoc/tests/test_numpydoc.py
@@ -0,0 +1,56 @@
+# -*- encoding:utf-8 -*-
+from __future__ import division, absolute_import, print_function
+
+from numpydoc.numpydoc import mangle_docstrings
+from sphinx.ext.autodoc import ALL
+
+class MockConfig():
+    numpydoc_use_plots = False
+    numpydoc_use_blockquotes = True
+    numpydoc_show_class_members = True
+    numpydoc_show_inherited_class_members = True
+    numpydoc_class_members_toctree = True
+    templates_path = []
+    numpydoc_edit_link = False
+    numpydoc_citation_re = '[a-z0-9_.-]+'
+
+class MockBuilder():
+    config = MockConfig()
+
+class MockApp():
+    config = MockConfig()
+    builder = MockBuilder()
+    translator = None
+
+
+app = MockApp()
+app.builder.app = app
+
+def test_mangle_docstrings():
+    s ='''
+A top section before
+
+.. autoclass:: str
+    '''
+    lines = s.split('\n')
+    doc = mangle_docstrings(MockApp(), 'class', 'str', str, {}, lines)
+    assert 'rpartition' in [x.strip() for x in lines]
+
+    lines = s.split('\n')
+    doc = mangle_docstrings(MockApp(), 'class', 'str', str, {'members': ['upper']}, lines)
+    assert 'rpartition' not in [x.strip() for x in lines]
+    assert 'upper' in [x.strip() for x in lines]
+    
+    lines = s.split('\n')
+    doc = mangle_docstrings(MockApp(), 'class', 'str', str, {'exclude-members': ALL}, lines)
+    assert 'rpartition' not in [x.strip() for x in lines]
+    assert 'upper' not in [x.strip() for x in lines]
+
+    lines = s.split('\n')
+    doc = mangle_docstrings(MockApp(), 'class', 'str', str,
+                            {'exclude-members': ['upper']}, lines)
+    assert 'rpartition' in [x.strip() for x in lines]
+    assert 'upper' not in [x.strip() for x in lines]
+
+if __name__ == "__main__":
+    import pytest
