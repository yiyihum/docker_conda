diff --git a/beautifultable/beautifultable.py b/beautifultable/beautifultable.py
index 38eca7b..1566643 100644
--- a/beautifultable/beautifultable.py
+++ b/beautifultable/beautifultable.py
@@ -814,7 +814,10 @@ class BeautifulTable(object):
                 header, self.detect_numerics, self.precision, self.sign.value
             ).split("\n"):
                 output_str = pre_process(
-                    i, self.detect_numerics, self.precision, self.sign.value,
+                    i,
+                    self.detect_numerics,
+                    self.precision,
+                    self.sign.value,
                 )
                 max_length = max(max_length, termwidth(output_str))
             maxwidths[index] += max_length
@@ -952,7 +955,8 @@ class BeautifulTable(object):
             if termwidth(self.border.left) > 0:
                 if not (self.border.left.isspace() and visible_junc):
                     length = min(
-                        termwidth(self.border.left), termwidth(intersect_left),
+                        termwidth(self.border.left),
+                        termwidth(intersect_left),
                     )
                     for i in range(length):
                         line[i] = intersect_left[i] if mask[0] else " "
diff --git a/beautifultable/helpers.py b/beautifultable/helpers.py
index 2171fb1..16f960b 100644
--- a/beautifultable/helpers.py
+++ b/beautifultable/helpers.py
@@ -239,7 +239,10 @@ class BTRowData(BTBaseRow):
         for row in map(list, zip_longest(*rows, fillvalue="")):
             for i in range(len(row)):
                 row[i] = pre_process(
-                    row[i], table.detect_numerics, table.precision, sign.value,
+                    row[i],
+                    table.detect_numerics,
+                    table.precision,
+                    sign.value,
                 )
             for row_ in self._clamp_row(row):
                 for i in range(len(table.columns)):
@@ -1145,7 +1148,9 @@ class BTColumnCollection(object):
             self.padding_left = [padding_left]
             self.padding_right = [padding_right]
             self.alignment = [alignment]
-            self._table._data = [BTRowData(self._table, [i]) for i in column]
+            self._table._data = type(self._table._data)(
+                self._table, [BTRowData(self._table, [i]) for i in column]
+            )
         else:
             if (not isinstance(header, basestring)) and (header is not None):
                 raise TypeError(
diff --git a/beautifultable/utils.py b/beautifultable/utils.py
index 69e4893..06a44eb 100644
--- a/beautifultable/utils.py
+++ b/beautifultable/utils.py
@@ -83,7 +83,10 @@ def deprecation_message(
 
 
 def deprecated(
-    deprecated_in, removed_in, replacement=None, details=None,
+    deprecated_in,
+    removed_in,
+    replacement=None,
+    details=None,
 ):  # pragma: no cover
     def decorator(f):
         @functools.wraps(f)
@@ -93,20 +96,29 @@ def deprecated(
                 if replacement:
                     details = replacement.__qualname__
                     details = details.replace(
-                        "BTColumns", "BeautifulTable.columns",
+                        "BTColumns",
+                        "BeautifulTable.columns",
                     )
-                    details = details.replace("BTRows", "BeautifulTable.rows",)
                     details = details.replace(
-                        "BTColumnHeader", "BeautifulTable.columns.header",
+                        "BTRows",
+                        "BeautifulTable.rows",
                     )
                     details = details.replace(
-                        "BTRowHeader", "BeautifulTable.rows.header",
+                        "BTColumnHeader",
+                        "BeautifulTable.columns.header",
+                    )
+                    details = details.replace(
+                        "BTRowHeader",
+                        "BeautifulTable.rows.header",
                     )
                     details = "Use '{}' instead.".format(details)
                 else:
                     details = ""
             message = deprecation_message(
-                f.__qualname__, deprecated_in, removed_in, details,
+                f.__qualname__,
+                deprecated_in,
+                removed_in,
+                details,
             )
             if replacement:
                 f.__doc__ = "{}\n\n{}".format(replacement.__doc__, message)
@@ -119,7 +131,11 @@ def deprecated(
 
 
 def deprecated_param(
-    deprecated_in, removed_in, old_name, new_name=None, details=None,
+    deprecated_in,
+    removed_in,
+    old_name,
+    new_name=None,
+    details=None,
 ):  # pragma: no cover
     def decorator(f):
         @functools.wraps(f)
@@ -130,7 +146,10 @@ def deprecated_param(
                     "Use '{}' instead.".format(new_name) if new_name else ""
                 )
             message = deprecation_message(
-                old_name, deprecated_in, removed_in, details,
+                old_name,
+                deprecated_in,
+                removed_in,
+                details,
             )
             if old_name in kwargs:
                 warnings.warn(message, FutureWarning)
