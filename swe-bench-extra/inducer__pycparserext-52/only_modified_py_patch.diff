diff --git a/pycparserext/ext_c_generator.py b/pycparserext/ext_c_generator.py
index 3ecccad..297793d 100644
--- a/pycparserext/ext_c_generator.py
+++ b/pycparserext/ext_c_generator.py
@@ -63,7 +63,13 @@ class AsmAndAttributesMixin(object):
                 if isinstance(modifier, c_ast.ArrayDecl):
                     if (i != 0 and isinstance(modifiers[i - 1], c_ast.PtrDecl)):
                         nstr = '(' + nstr + ')'
-                    nstr += '[' + self.visit(modifier.dim) + ']'
+
+                    # BUG FIX: pycparser ignores quals
+                    dim_quals = (' '.join(modifier.dim_quals) + ' '
+                                 if modifier.dim_quals else '')
+
+                    nstr += '[' + dim_quals + self.visit(modifier.dim) + ']'
+
                 elif isinstance(modifier, c_ast.FuncDecl):
                     if (i != 0 and isinstance(modifiers[i - 1], c_ast.PtrDecl)):
                         nstr = '(' + nstr + ')'
diff --git a/pycparserext/ext_c_lexer.py b/pycparserext/ext_c_lexer.py
index 1f8126c..5acff45 100644
--- a/pycparserext/ext_c_lexer.py
+++ b/pycparserext/ext_c_lexer.py
@@ -61,16 +61,30 @@ def add_lexer_keywords(cls, keywords):
             kw.upper() for kw in keywords)
 
 
-add_lexer_keywords(GnuCLexer, [
-    '__attribute__', '__asm__', '__asm', '__typeof__',
-    '__real__', '__imag__', '__builtin_types_compatible_p',
-    '__const', '__restrict', '__inline', '__inline__',
-    '__extension__', 'asm', '__attribute'])
-
-_CL_KEYWORDS = ['kernel', 'constant', 'global', 'local', 'private',
-        "read_only", "write_only", "read_write"]
-add_lexer_keywords(OpenCLCLexer, [
-    '__attribute__', '__attribute', '__asm__', '__asm', 'asm']
-    + _CL_KEYWORDS + ["__"+kw for kw in _CL_KEYWORDS])
+_COMMON_KEYWORDS = [
+    '__attribute__', '__attribute',
+    '__asm__', '__asm', 'asm']
+
+_GNU_KEYWORDS = [
+    '__typeof__',
+    '__real__', '__imag__',
+    '__builtin_types_compatible_p',
+    '__const',
+    '__restrict__', '__restrict',
+    '__inline__', '__inline',
+    '__extension__',
+    '__volatile', '__volatile__']
+
+add_lexer_keywords(GnuCLexer, _COMMON_KEYWORDS + _GNU_KEYWORDS)
+
+# These will be added as unadorned keywords and keywords with '__' prepended
+_CL_BASE_KEYWORDS = [
+    'kernel', 'constant', 'global', 'local', 'private',
+    'read_only', 'write_only', 'read_write']
+
+_CL_KEYWORDS = _COMMON_KEYWORDS
+_CL_KEYWORDS += _CL_BASE_KEYWORDS + ["__"+kw for kw in _CL_BASE_KEYWORDS]
+
+add_lexer_keywords(OpenCLCLexer, _CL_KEYWORDS)
 
 # vim: fdm=marker
diff --git a/pycparserext/ext_c_parser.py b/pycparserext/ext_c_parser.py
index 00fad2a..abbb381 100644
--- a/pycparserext/ext_c_parser.py
+++ b/pycparserext/ext_c_parser.py
@@ -387,17 +387,17 @@ class _AsmMixin(object):
         p[0] = Asm(p[1], p[3], p[5], p[7], p[9], coord=self._coord(p.lineno(2)))
 
     def p_asm_keyword(self, p):
-        """ asm_keyword : __ASM__ asm_volatile
-                        | __ASM asm_volatile
-                        | ASM asm_volatile
+        """ asm_keyword : __ASM__ asm_volatile_opt
+                        | __ASM asm_volatile_opt
+                        | ASM asm_volatile_opt
         """
         p[0] = p[1]
         if p[2]:
             p[0] += ' ' + p[2]
 
-    def p_asm_volatile(self, p):
-        """ asm_volatile : VOLATILE
-                         | empty
+    def p_asm_volatile_opt(self, p):
+        """ asm_volatile_opt : unified_volatile
+                             | empty
         """
         p[0] = p[1]
 
@@ -475,7 +475,10 @@ class GnuCParser(_AsmAndAttributesMixin, CParserBase):
     def p_type_qualifier_gnu(self, p):
         """ type_qualifier  : __CONST
                             | __RESTRICT
+                            | __RESTRICT__
                             | __EXTENSION__
+                            | __VOLATILE
+                            | __VOLATILE__
         """
         p[0] = p[1]
 
@@ -540,6 +543,12 @@ class GnuCParser(_AsmAndAttributesMixin, CParserBase):
         """
         p[0] = RangeExpression(p[2], p[4], coord=self._coord(p.lineno(1)))
 
+    def p_unified_volatile_gnu(self, p):
+        """ unified_volatile : VOLATILE
+                             | __VOLATILE
+                             | __VOLATILE__
+        """
+        p[0] = p[1]
 # }}}
 
 
@@ -615,4 +624,9 @@ class OpenCLCParser(_AsmAndAttributesMixin, CParserBase):
         """
         p[0] = p[1]
 
+    def p_unified_volatile_cl(self, p):
+        """ unified_volatile : VOLATILE
+        """
+        p[0] = p[1]
+
 # vim: fdm=marker

