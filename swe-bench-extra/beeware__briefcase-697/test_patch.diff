diff --git a/tests/platforms/android/gradle/test_create.py b/tests/platforms/android/gradle/test_create.py
index 429035aa..49c5ecb3 100644
--- a/tests/platforms/android/gradle/test_create.py
+++ b/tests/platforms/android/gradle/test_create.py
@@ -43,7 +43,8 @@ def test_version_code(create_command, first_app_config, version, build, version_
     if build:
         first_app_config.build = build
     assert create_command.output_format_template_context(first_app_config) == {
-        'version_code': version_code
+        'version_code': version_code,
+        'safe_formal_name': 'First App',
     }
     # Version code must be less than a 32 bit signed integer MAXINT.
     assert int(version_code) < 2147483647
diff --git a/tests/platforms/android/gradle/test_safe_formal_name.py b/tests/platforms/android/gradle/test_safe_formal_name.py
new file mode 100644
index 00000000..b0919524
--- /dev/null
+++ b/tests/platforms/android/gradle/test_safe_formal_name.py
@@ -0,0 +1,38 @@
+import pytest
+
+from briefcase.platforms.android.gradle import safe_formal_name
+
+
+@pytest.mark.parametrize(
+    'formal_name, safe_name',
+    [
+        ('Hello World', 'Hello World'),
+
+        # The invalid list is all stripped
+        ('Hello/World/', 'HelloWorld'),
+        ('Hello\\World', 'HelloWorld'),
+        ('Hello:World', 'HelloWorld'),
+        ('Hello<World', 'HelloWorld'),
+        ('Hello>World', 'HelloWorld'),
+        ('Hello "World"', 'Hello World'),
+        ('Hello World?', 'Hello World'),
+        ('Hello|World', 'HelloWorld'),
+        ('Hello World!', 'Hello World'),
+
+        # All invalid punctuation is removed
+        # Valid punctuation is preserved
+        ('Hello! (World?)', 'Hello (World)'),
+
+        # Position of punctuation doesn't matter
+        ('Hello! World', 'Hello World'),
+        ('!Hello World', 'Hello World'),
+
+        # If removing punctuation leads to double spaces, reduce the double spaces
+        ('Hello | World', 'Hello World'),
+        ('Hello World |', 'Hello World'),
+        ('| Hello World', 'Hello World'),
+
+    ]
+)
+def test_safe_formal_name(formal_name, safe_name):
+    assert safe_formal_name(formal_name) == safe_name
