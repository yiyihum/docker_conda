diff --git a/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_save_locals.py b/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_save_locals.py
index fa1a1252..c6bc3754 100644
--- a/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_save_locals.py
+++ b/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_save_locals.py
@@ -70,6 +70,8 @@ def make_save_locals_impl():
 
 save_locals_impl = make_save_locals_impl()
 
+_SENTINEL = []  # Any mutable will do.
+
 
 def update_globals_and_locals(updated_globals, initial_globals, frame):
     # We don't have the locals and passed all in globals, so, we have to
@@ -83,8 +85,11 @@ def update_globals_and_locals(updated_globals, initial_globals, frame):
     # one that enabled creating and using variables during the same evaluation.
     assert updated_globals is not None
     f_locals = None
+
+    removed = set(initial_globals).difference(updated_globals)
+
     for key, val in updated_globals.items():
-        if initial_globals.get(key) is not val:
+        if val is not initial_globals.get(key, _SENTINEL):
             if f_locals is None:
                 # Note: we call f_locals only once because each time
                 # we call it the values may be reset.
@@ -92,5 +97,17 @@ def update_globals_and_locals(updated_globals, initial_globals, frame):
 
             f_locals[key] = val
 
+    if removed:
+        if f_locals is None:
+            # Note: we call f_locals only once because each time
+            # we call it the values may be reset.
+            f_locals = frame.f_locals
+
+        for key in removed:
+            try:
+                del f_locals[key]
+            except KeyError:
+                pass
+
     if f_locals is not None:
         save_locals(frame)
diff --git a/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_vars.py b/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_vars.py
index 2634714a..cdbe3085 100644
--- a/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_vars.py
+++ b/src/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_vars.py
@@ -523,6 +523,10 @@ def evaluate_expression(py_db, frame, expression, is_exec):
     updated_globals = {}
     updated_globals.update(frame.f_globals)
     updated_globals.update(frame.f_locals)
+    if 'globals' not in updated_globals:
+        # If the user explicitly uses 'globals()' then we provide the
+        # frame globals (unless he has shadowed it already).
+        updated_globals['globals'] = lambda: frame.f_globals
 
     initial_globals = updated_globals.copy()
 

