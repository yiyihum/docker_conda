diff --git a/setup_cfg_fmt.py b/setup_cfg_fmt.py
index d12d92c..44d3cb3 100644
--- a/setup_cfg_fmt.py
+++ b/setup_cfg_fmt.py
@@ -4,7 +4,9 @@ import glob
 import io
 import os.path
 import re
+import string
 from typing import Dict
+from typing import Generator
 from typing import List
 from typing import Match
 from typing import Optional
@@ -69,6 +71,11 @@ LICENSE_TO_CLASSIFIER = {
     'Zlib': 'License :: OSI Approved :: zlib/libpng License',
 }
 
+TOX_TO_CLASSIFIERS = {
+    'py': 'Programming Language :: Python :: Implementation :: CPython',
+    'pypy': 'Programming Language :: Python :: Implementation :: PyPy',
+}
+
 
 def _adjacent_filename(setup_cfg: str, filename: str) -> str:
     return os.path.join(os.path.dirname(setup_cfg), filename)
@@ -145,6 +152,19 @@ def _parse_python_requires(
     return minimum, excluded
 
 
+def _tox_envlist(setup_cfg: str) -> Generator[str, None, None]:
+    tox_ini = _adjacent_filename(setup_cfg, 'tox.ini')
+    if os.path.exists(tox_ini):
+        cfg = configparser.ConfigParser()
+        cfg.read(tox_ini)
+
+        envlist = cfg.get('tox', 'envlist', fallback='')
+        if envlist:
+            for env in envlist.split(','):
+                env, _, _ = env.strip().partition('-')  # py36-foo
+                yield env
+
+
 def _python_requires(
         setup_cfg: str, *, min_py3_version: Tuple[int, int],
 ) -> Optional[str]:
@@ -158,24 +178,15 @@ def _python_requires(
     except UnknownVersionError:  # assume they know what's up with weird things
         return current_value
 
-    tox_ini = _adjacent_filename(setup_cfg, 'tox.ini')
-    if os.path.exists(tox_ini):
-        cfg = configparser.ConfigParser()
-        cfg.read(tox_ini)
-
-        envlist = cfg.get('tox', 'envlist', fallback='')
-        if envlist:
-            for env in envlist.split(','):
-                env = env.strip()
-                env, _, _ = env.partition('-')  # py36-foo
-                if (
-                        env.startswith('py') and
-                        len(env) == 4 and
-                        env[2:].isdigit()
-                ):
-                    version = _to_ver('.'.join(env[2:]))
-                    if minimum is None or version < minimum[:2]:
-                        minimum = version
+    for env in _tox_envlist(setup_cfg):
+        if (
+                env.startswith('py') and
+                len(env) == 4 and
+                env[2:].isdigit()
+        ):
+            version = _to_ver('.'.join(env[2:]))
+            if minimum is None or version < minimum[:2]:
+                minimum = version
 
     for classifier in classifiers.strip().splitlines():
         if classifier.startswith('Programming Language :: Python ::'):
@@ -316,6 +327,18 @@ def _trim_py_classifiers(
     return [s for s in classifiers if _is_ok_classifier(s)]
 
 
+def _imp_classifiers(setup_cfg: str) -> str:
+    classifiers = set()
+
+    for env in _tox_envlist(setup_cfg):
+        # remove trailing digits: py39-django31
+        classifier = TOX_TO_CLASSIFIERS.get(env.rstrip(string.digits))
+        if classifier is not None:
+            classifiers.add(classifier)
+
+    return '\n'.join(sorted(classifiers))
+
+
 def format_file(
         filename: str, *,
         min_py3_version: Tuple[int, int],
@@ -386,6 +409,13 @@ def format_file(
             f'\n{py_classifiers}'
         )
 
+    imp_classifiers = _imp_classifiers(filename)
+    if imp_classifiers:
+        cfg['metadata']['classifiers'] = (
+            cfg['metadata'].get('classifiers', '').rstrip() +
+            f'\n{imp_classifiers}'
+        )
+
     # sort the classifiers if present
     if 'classifiers' in cfg['metadata']:
         classifiers = sorted(set(cfg['metadata']['classifiers'].split('\n')))

