diff --git a/docs/source/actions/custom-action.rst b/docs/source/actions/custom-action.rst
index b1401f2..81b81b9 100644
--- a/docs/source/actions/custom-action.rst
+++ b/docs/source/actions/custom-action.rst
@@ -13,3 +13,41 @@ the `run_action` method.
         def run_action(self):
             # Include here the logic of your action
             # (...)
+
+
+Fallback Actions
+================
+
+When creating your own custom actions, you can also add a fallback action to run if
+an action throws an unhandled exception. To do this, add a fallback attribute to
+your custom action.
+
+.. code-block:: python
+
+    from spidermon.core.actions import Action
+
+    class MyFallbackAction(Action):
+        def run_action(self):
+            # Include here the logic of your action
+            # Runs if MyCustomAction().run_action() throws an unhandled exception
+            # (...)
+
+    class MyCustomAction(Action):
+        fallback = MyFallbackAction
+        def run_action(self):
+            # Include here the logic of your action
+            # (...)
+
+
+You can also add fallbacks to spidermon built-in actions by subclassing them. For
+example, send an email if a slack message could not be sent.
+
+.. code-block:: python
+
+    from spidermon.core.actions import Action
+    from spidermon.contrib.actions import Slack
+    from spidermon.contrib.actions.email.smtp import SendSmtpEmail
+
+    class MyCustomSlackAction(Slack):
+        fallback = SendSmtpEmail
+
diff --git a/spidermon/core/actions.py b/spidermon/core/actions.py
index a9ae690..c7a0441 100644
--- a/spidermon/core/actions.py
+++ b/spidermon/core/actions.py
@@ -11,9 +11,13 @@ class Action(metaclass=ActionOptionsMetaclass):
     Base class for actions.
     """
 
+    fallback = None
+
     def __init__(self):
         self.result = None
         self.data = None
+        if self.fallback is not None:
+            self.fallback = self.fallback()
 
     @classmethod
     def from_crawler(cls, crawler):
@@ -37,6 +41,8 @@ class Action(metaclass=ActionOptionsMetaclass):
             result.add_action_skip(self, e.args[0])
         except:
             result.add_action_error(self, traceback.format_exc())
+            if self.fallback is not None:
+                self.fallback.run(self.result, self.data)
         else:
             result.add_action_success(self)
         data.meta.update(self.get_meta())
