diff --git a/fakeredis/_commands.py b/fakeredis/_commands.py
index f5c8b99..6b231de 100644
--- a/fakeredis/_commands.py
+++ b/fakeredis/_commands.py
@@ -1,7 +1,6 @@
 import functools
-import re
-
 import math
+import re
 
 from . import _msgs as msgs
 from ._helpers import MAX_STRING_SIZE, null_terminate, SimpleError
@@ -239,13 +238,15 @@ class AfterAny:
 class ScoreTest:
     """Argument converter for sorted set score endpoints."""
 
-    def __init__(self, value, exclusive=False):
+    def __init__(self, value, exclusive=False, bytes_val=None):
         self.value = value
         self.exclusive = exclusive
+        self.bytes_val = bytes_val
 
     @classmethod
     def decode(cls, value):
         try:
+            original_value = value
             exclusive = False
             if value[:1] == b'(':
                 exclusive = True
@@ -253,7 +254,7 @@ class ScoreTest:
             value = Float.decode(
                 value, allow_leading_whitespace=True, allow_erange=True,
                 allow_empty=True, crop_null=True)
-            return cls(value, exclusive)
+            return cls(value, exclusive, original_value)
         except SimpleError:
             raise SimpleError(msgs.INVALID_MIN_MAX_FLOAT_MSG)
 
diff --git a/fakeredis/_fakesocket.py b/fakeredis/_fakesocket.py
index 3b3a3b2..b25ed85 100644
--- a/fakeredis/_fakesocket.py
+++ b/fakeredis/_fakesocket.py
@@ -1,13 +1,13 @@
 import functools
 import hashlib
 import itertools
+import math
 import pickle
 import queue
 import random
 import time
 import weakref
 
-import math
 import redis
 import six
 
@@ -793,7 +793,7 @@ class FakeSocket:
         c = Float.decode(key.get(b'0')) + Float.decode(amount)
         if not math.isfinite(c):
             raise SimpleError(msgs.NONFINITE_MSG)
-        encoded = self._encodefloat(c, True, )
+        encoded = self._encodefloat(c, True)
         key.update(encoded)
         return encoded
 
@@ -1561,23 +1561,30 @@ class FakeSocket:
     def _zrange(self, key, start, stop, reverse, *args):
         zset = key.value
         withscores = False
+        byscore = False
         for arg in args:
             if casematch(arg, b'withscores'):
                 withscores = True
+            elif casematch(arg, b'byscore'):
+                byscore = True
             else:
                 raise SimpleError(msgs.SYNTAX_ERROR_MSG)
-        start, stop = self._fix_range(start, stop, len(zset))
-        if reverse:
-            start, stop = len(zset) - stop, len(zset) - start
-        items = zset.islice_score(start, stop, reverse)
+        if byscore:
+            items = zset.irange_score(start.lower_bound, stop.upper_bound, reverse=reverse)
+        else:
+            start, stop = Int.decode(start.bytes_val), Int.decode(stop.bytes_val)
+            start, stop = self._fix_range(start, stop, len(zset))
+            if reverse:
+                start, stop = len(zset) - stop, len(zset) - start
+            items = zset.islice_score(start, stop, reverse)
         items = self._apply_withscores(items, withscores)
         return items
 
-    @command((Key(ZSet), Int, Int), (bytes,))
+    @command((Key(ZSet), ScoreTest, ScoreTest), (bytes,))
     def zrange(self, key, start, stop, *args):
         return self._zrange(key, start, stop, False, *args)
 
-    @command((Key(ZSet), Int, Int), (bytes,))
+    @command((Key(ZSet), ScoreTest, ScoreTest), (bytes,))
     def zrevrange(self, key, start, stop, *args):
         return self._zrange(key, start, stop, True, *args)
 
