diff --git a/test/test_fakeredis6.py b/test/test_fakeredis6.py
index 12e8dec..8d6e99a 100644
--- a/test/test_fakeredis6.py
+++ b/test/test_fakeredis6.py
@@ -1,3 +1,4 @@
+import math
 import os
 import threading
 from collections import OrderedDict
@@ -5,7 +6,6 @@ from datetime import datetime, timedelta
 from queue import Queue
 from time import sleep, time
 
-import math
 import pytest
 import redis
 import redis.client
@@ -1952,7 +1952,6 @@ def test_zadd_minus_zero(r):
     assert raw_command(r, 'zscore', 'foo', 'a') == b'-0'
 
 
-
 def test_zadd_wrong_type(r):
     r.sadd('foo', 'bar')
     with pytest.raises(redis.ResponseError):
@@ -2262,6 +2261,14 @@ def test_zrevrange_score_cast(r):
     )
 
 
+def test_zrange_with_large_int(r):
+    with pytest.raises(redis.ResponseError, match='value is not an integer or out of range'):
+        r.zrange('', 0, 9223372036854775808)
+    with pytest.raises(redis.ResponseError, match='value is not an integer or out of range'):
+        r.zrange('', 0, -9223372036854775809)
+
+
+
 def test_zrangebyscore(r):
     testtools.zadd(r, 'foo', {'zero': 0})
     testtools.zadd(r, 'foo', {'two': 2})
diff --git a/test/test_hypothesis.py b/test/test_hypothesis.py
index ee8ab08..9325852 100644
--- a/test/test_hypothesis.py
+++ b/test/test_hypothesis.py
@@ -1,5 +1,6 @@
 import functools
 import operator
+import sys
 
 import hypothesis
 import hypothesis.stateful
@@ -291,6 +292,7 @@ class CommonMachine(hypothesis.stateful.RuleBasedStateMachine):
         real_result, real_exc = self._evaluate(self.real, command)
 
         if fake_exc is not None and real_exc is None:
+            print('{} raised on only on fake when running {}'.format(fake_exc, command), file=sys.stderr)
             raise fake_exc
         elif real_exc is not None and fake_exc is None:
             assert real_exc == fake_exc, "Expected exception {} not raised".format(real_exc)
@@ -305,7 +307,10 @@ class CommonMachine(hypothesis.stateful.RuleBasedStateMachine):
                 assert n(f) == n(r)
             self.transaction_normalize = []
         else:
-            assert fake_result == real_result
+            if fake_result != real_result:
+                print('{}!={} when running {}'.format(fake_result, real_result, command),
+                      file=sys.stderr)
+            assert fake_result == real_result, "Discrepency when running command {}".format(command)
             if real_result == b'QUEUED':
                 # Since redis removes the distinction between simple strings and
                 # bulk strings, this might not actually indicate that we're in a
diff --git a/test/test_redispy4_plus.py b/test/test_redispy4_plus.py
index 3fe439a..1ae39e8 100644
--- a/test/test_redispy4_plus.py
+++ b/test/test_redispy4_plus.py
@@ -28,6 +28,29 @@ def test_lmove_to_nonexistent_destination(r):
     assert r.rpop('bar') == b'one'
 
 
+def test_zrange_with_byscore(r):
+    testtools.zadd(r, 'foo', {'zero': 0})
+    testtools.zadd(r, 'foo', {'two': 2})
+    testtools.zadd(r, 'foo', {'two_a_also': 2})
+    testtools.zadd(r, 'foo', {'two_b_also': 2})
+    testtools.zadd(r, 'foo', {'four': 4})
+    assert r.zrange('foo', 1, 3, byscore=True) == [b'two', b'two_a_also', b'two_b_also']
+    assert r.zrange('foo', 2, 3, byscore=True) == [b'two', b'two_a_also', b'two_b_also']
+    assert (
+            r.zrange('foo', 0, 4, byscore=True)
+            == [b'zero', b'two', b'two_a_also', b'two_b_also', b'four']
+    )
+    assert r.zrange('foo', '-inf', 1, byscore=True) == [b'zero']
+    assert (
+            r.zrange('foo', 2, '+inf', byscore=True)
+            == [b'two', b'two_a_also', b'two_b_also', b'four']
+    )
+    assert (
+            r.zrange('foo', '-inf', '+inf', byscore=True)
+            == [b'zero', b'two', b'two_a_also', b'two_b_also', b'four']
+    )
+
+
 def test_lmove_expiry(r):
     r.rpush('foo', 'one')
     r.rpush('bar', 'two')
