diff --git a/tests/contract/test_resource_generator.py b/tests/contract/test_resource_generator.py
index c02f34a..0ba9ea8 100644
--- a/tests/contract/test_resource_generator.py
+++ b/tests/contract/test_resource_generator.py
@@ -22,9 +22,28 @@ def test_terminate_regex_end_of_line_like_a_normal_person():
     assert re.match(modified_regex, "dfqh3eqefhq")
 
 
-def test_terminate_regex_no_termination_needed():
+def test_terminate_regex_line_start_change():
     original_regex = r"^[a-zA-Z0-9]{1,219}\Z"
-    assert terminate_regex(original_regex) == original_regex
+    terminated_regex = r"\A[a-zA-Z0-9]{1,219}\Z"
+    assert terminate_regex(original_regex) == terminated_regex
+
+
+def test_terminate_regex_line_end_change():
+    original_regex = r"\A[a-zA-Z0-9]{1,219}$"
+    terminated_regex = r"\A[a-zA-Z0-9]{1,219}\Z"
+    assert terminate_regex(original_regex) == terminated_regex
+
+
+def test_terminate_regex_line_start_and_end_change():
+    original_regex = r"^[a-zA-Z0-9]{1,219}$"
+    terminated_regex = r"\A[a-zA-Z0-9]{1,219}\Z"
+    assert terminate_regex(original_regex) == terminated_regex
+
+
+def test_terminate_regex_no_termination_needed():
+    original_regex = r"\A[a-zA-Z0-9]{1,219}\Z"
+    terminated_regex = r"\A[a-zA-Z0-9]{1,219}\Z"
+    assert terminate_regex(original_regex) == terminated_regex
 
 
 @pytest.mark.parametrize("schema_type", ["integer", "number"])
@@ -68,11 +87,34 @@ def test_generate_string_strategy_regex():
     assert re.fullmatch(schema["pattern"], regex_strategy.example())
 
 
+def test_generate_string_strategy_ascii():
+    schema = {"type": "string", "pattern": "^\\w{1,6}$"}
+    strategy = ResourceGenerator(schema).generate_schema_strategy(schema)
+    for _ in range(100):
+        assert re.match("^[A-Za-z0-9_]{1,6}$", strategy.example())
+
+
 def test_generate_string_strategy_format():
     schema = {"type": "string", "format": "arn"}
     strategy = ResourceGenerator(schema).generate_schema_strategy(schema)
     assert re.fullmatch(STRING_FORMATS["arn"], strategy.example())
 
+    schema = {"type": "string", "format": "date-time"}
+    strategy = ResourceGenerator(schema).generate_schema_strategy(schema)
+    assert re.match(STRING_FORMATS["date-time"], strategy.example())
+
+    schema = {"type": "string", "format": "time"}
+    strategy = ResourceGenerator(schema).generate_schema_strategy(schema)
+    assert re.match(STRING_FORMATS["time"], strategy.example())
+
+    schema = {"type": "string", "format": "date"}
+    strategy = ResourceGenerator(schema).generate_schema_strategy(schema)
+    assert re.match(STRING_FORMATS["date"], strategy.example())
+
+    schema = {"type": "string", "format": "email"}
+    strategy = ResourceGenerator(schema).generate_schema_strategy(schema)
+    assert re.match(STRING_FORMATS["email"], strategy.example())
+
 
 def test_generate_string_strategy_length():
     schema = {"type": "string", "minLength": 5, "maxLength": 10}
