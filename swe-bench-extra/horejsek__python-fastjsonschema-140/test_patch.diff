diff --git a/tests/test_compile_to_code.py b/tests/test_compile_to_code.py
index 84bc981..8e40db5 100644
--- a/tests/test_compile_to_code.py
+++ b/tests/test_compile_to_code.py
@@ -121,4 +121,4 @@ def test_compile_to_code_custom_format_with_refs():
     assert validate({"a": ["identifier"]}, formats) is not None
     with pytest.raises(JsonSchemaValueException) as exc:
         validate({"a": ["identifier", "not-valid"]}, formats)
-    assert exc.value.message == "data[1] must be my-format"
\ No newline at end of file
+    assert exc.value.message == "data.a[1] must be my-format"
diff --git a/tests/test_object.py b/tests/test_object.py
index d880dc4..19967a3 100644
--- a/tests/test_object.py
+++ b/tests/test_object.py
@@ -225,4 +225,24 @@ def test_dependencies(asserter, value, expected):
         "dependencies": {
             "foo": ["bar"],
         },
-    }, value, expected)
\ No newline at end of file
+    }, value, expected)
+
+
+@pytest.mark.parametrize('value, expected', [
+    ({"prop1": {"str": 1}}, JsonSchemaValueException('data.prop1.str must be string', value=1, name='data.prop1.str', definition={'type': 'string'}, rule='type')),
+])
+def test_full_name_after_ref(asserter, value, expected):
+    asserter({
+        "definitions": {
+            "SomeType": {
+                "type": "object",
+                "properties": {
+                    "str": {"type": "string"},
+                },
+            },
+        },
+        "type": "object",
+        "properties": {
+            "prop1": {"$ref": "#/definitions/SomeType"},
+        }
+    }, value, expected)
