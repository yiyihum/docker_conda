diff --git a/nimba/core/exceptions.py b/nimba/core/exceptions.py
index 8cbe421..a77b14b 100644
--- a/nimba/core/exceptions.py
+++ b/nimba/core/exceptions.py
@@ -13,4 +13,8 @@ class AppNameIncorrect(Exception):
 	pass
 
 class CommandError(Exception):
-	pass
\ No newline at end of file
+	pass
+
+class NoReverseFound(Exception):
+	pass
+	
\ No newline at end of file
diff --git a/nimba/http/__init__.py b/nimba/http/__init__.py
index 417220d..12cc753 100644
--- a/nimba/http/__init__.py
+++ b/nimba/http/__init__.py
@@ -1,8 +1,9 @@
-from .utils import router, render
+from .utils import router, render, path_reverse
 from .utils import ROUTES
 
 all = [
 	'router',
 	'render'
+	'path_reverse',
 	'ROUTES',
 ]
\ No newline at end of file
diff --git a/nimba/http/resolver.py b/nimba/http/resolver.py
index 824f89e..4113ca4 100644
--- a/nimba/http/resolver.py
+++ b/nimba/http/resolver.py
@@ -97,7 +97,4 @@ def is_valid_method(methods:list) -> None:
 	if not isinstance(methods, list) or len(methods) > 2 or len(methods) < 0:
 		raise ImproperlyMethodsConfig('ErrorConfig : methods must be list and use the valid element GET or POST.')
 
-
-def reverse(name_path:str) -> str:
-	pass
 	
\ No newline at end of file
diff --git a/nimba/http/utils.py b/nimba/http/utils.py
index 6cdd0fa..eb06e85 100644
--- a/nimba/http/utils.py
+++ b/nimba/http/utils.py
@@ -4,6 +4,7 @@ import re
 import http.client
 from wsgiref.headers import Headers
 import pathlib
+import urllib.parse
 
 import traceback
 import mimetypes
@@ -29,10 +30,44 @@ from nimba.http.errors import (
 	error_404,
 	error_500
 )
+from nimba.core.exceptions import (
+	NoReverseFound
+)
 
 ROUTES = {}
+REVERSE_ROUTE_INFO = {}
 PROJECT_MASK = 'PROJECT_MASK_PATH'
 
+def path_reverse(name_path:str, args=None, kwargs=None) -> str:
+	if not isinstance(name_path, str) or not re.match(r"^[^\d\W][\w-]*\Z", name_path):
+			raise ValueError("Name path must but a valid identifier name.")
+	args = args or {}
+	kwargs = kwargs or {}
+	if args and kwargs:
+		raise ValueError(("Don't use *args and **kwargs."
+			"*args is for get and **kwargs for post method."))
+	path = REVERSE_ROUTE_INFO.get(name_path)
+	if not path:
+		raise NoReverseFound(f"Reverse for {name_path} not found.")
+	
+	if args:
+		path = path +'?'+ urllib.parse.urlencode(args)
+	else:
+		regex = r'<(?:(?P<converter>[^>:]+):)?(?P<parameter>[^>]+)>'
+		url  = re.compile(regex, 0)
+		helper_path = path
+		for match in url.finditer(path):
+			value = kwargs.get(match['parameter'])
+			if not value:
+				raise NoReverseFound((f"Reverse for {name_path} not found. " 
+					"Keyword arguments '%s' not found." % match['parameter']))
+			path = re.sub(
+				helper_path[match.start():match.end()], 
+				str(value), 
+				path
+			)
+	return path	
+
 def load_static(value):
 	return os.path.join('/staticfiles/', value)
 
@@ -58,6 +93,7 @@ def render(template, contexts=None, status=200, charset='utf-8', content_type='t
 	)
 	#load env jinja2
 	contexts['load_static'] = load_static
+	contexts['path_reverse'] = path_reverse
 	with open(path, 'r') as content_file:
 		content = content_file.read()
 		html_render = env.from_string(content)
@@ -75,7 +111,7 @@ def render(template, contexts=None, status=200, charset='utf-8', content_type='t
 	return response
 
 
-def router(path, methods=['GET']):
+def router(path, methods=['GET'], name=None):
 	"""
 		Routing app
 	"""
@@ -87,6 +123,9 @@ def router(path, methods=['GET']):
 		#format url value url
 		new_path, converters = resolve_pattern(path, callback)
 		ROUTES[new_path] = (callback, converters, path, methods)
+
+		# if: pass
+		REVERSE_ROUTE_INFO[name or callback.__name__] = path
 		def application(environ, start_response):
 			request = Request(environ)
 			#authorized
