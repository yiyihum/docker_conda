diff --git a/.travis.yml b/.travis.yml
index 1df6b51..08d9ac6 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,11 +1,10 @@
 language: python
 python:
   - 2.7
-  - 3.3
   - 3.4
   - 3.5
   - 3.6
-  - 3.7-dev
+  - 3.7
   - nightly
   - pypy
 install: pip install -r requirements.txt
diff --git a/sparse_list.py b/sparse_list.py
index e6a0cd1..abf2648 100644
--- a/sparse_list.py
+++ b/sparse_list.py
@@ -69,14 +69,26 @@ class SparseList(object):
     def __delitem__(self, item):
         if isinstance(item, slice):
             indices = xrange(*item.indices(self.size))
+        elif item < 0:
+            indices = (self.size + item, )
         else:
             indices = (item, )
 
-        for i in indices:
-            try:
-                del self.elements[i]
-            except KeyError:
-                pass
+        offset = 0
+
+        for k in sorted(self.elements.keys()):
+            if k < indices[0]:
+                continue
+            elif offset < len(indices) and k > indices[offset]:
+                offset += 1
+
+            if offset:
+                self.elements[k - offset] = self.elements[k]
+
+            del self.elements[k]
+
+        self.size -= len(indices)
+
 
     def __delslice__(self, start, stop):
         '''
@@ -184,7 +196,6 @@ class SparseList(object):
             raise IndexError('pop from empty SparseList')
         value = self[-1]
         del self[-1]
-        self.size -= 1
         return value
 
     def remove(self, value):
diff --git a/time_sparse_list.py b/time_sparse_list.py
index 429097d..68dadef 100755
--- a/time_sparse_list.py
+++ b/time_sparse_list.py
@@ -37,5 +37,27 @@ class Benchmark_Retrieval(benchmark.Benchmark):
     def test_list(self):
         self.list[100]
 
+class Benchmark_Slice_Deletion(benchmark.Benchmark):
+    def setUp(self):
+        self.sparse_list = sparse_list.SparseList(xrange(1000))
+        self.list = list(xrange(1000))
+
+    def test_sparse_list(self):
+        del self.sparse_list[1::2]
+
+    def test_list(self):
+        del self.list[1::2]
+
+class Benchmark_Deletion(benchmark.Benchmark):
+    def setUp(self):
+        self.sparse_list = sparse_list.SparseList(xrange(1000))
+        self.list = list(xrange(1000))
+
+    def test_sparse_list(self):
+        del self.sparse_list[100]
+
+    def test_list(self):
+        del self.list[100]
+
 if __name__ == '__main__':
     benchmark.main(format="markdown", numberFormat="%.4g")
