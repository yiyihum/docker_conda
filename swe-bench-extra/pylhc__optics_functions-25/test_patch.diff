diff --git a/tests/unit/test_coupling.py b/tests/unit/test_coupling.py
index c3731e0..aa4ce44 100644
--- a/tests/unit/test_coupling.py
+++ b/tests/unit/test_coupling.py
@@ -6,7 +6,7 @@ import tfs
 
 from optics_functions.constants import NAME, S, ALPHA, Y, BETA, X, GAMMA, REAL, IMAG, TUNE, PHASE_ADV
 from optics_functions.coupling import (closest_tune_approach, coupling_via_rdts,
-                                       coupling_via_cmatrix, COUPLING_RDTS)
+                                       coupling_via_cmatrix, COUPLING_RDTS, rmatrix_from_coupling)
 from optics_functions.utils import prepare_twiss_dataframe
 from tests.unit.test_rdt import arrays_are_close_almost_everywhere
 
@@ -23,9 +23,10 @@ def test_cmatrix():
     assert all(c in df_res.columns for c in ("F1001", "F1010", "C11", "C12", "C21", "C22", GAMMA))
     assert not df_res.isna().any().any()
 
-    detC = (df_res["C11"]*df_res["C22"] - df_res["C12"]*df_res["C21"])
+    # Checks based on CalagaBetatronCoupling2005
+    detC = (df_res["C11"] * df_res["C22"] - df_res["C12"] * df_res["C21"])
     fsq_diff = np.abs(df_res["F1001"])**2 - np.abs(df_res["F1010"])**2
-    f_term = 1/(1+4*fsq_diff)
+    f_term = 1/(1 + 4 * fsq_diff)
     g_sq = df_res[GAMMA]**2
     assert all(np.abs(detC + g_sq - 1) < 1e-15)
     assert all(np.abs(detC / (4 * g_sq) - fsq_diff) < 1e-15)  # Eq. (13)
@@ -33,6 +34,29 @@ def test_cmatrix():
     assert all(np.abs(g_sq - f_term) < 1e-15)  # Eq. (14)
 
 
+@pytest.mark.basic
+@pytest.mark.parametrize('source', ['real', 'fake'])
+def test_rmatrix_to_coupling_to_rmatrix(source):
+    if source == "fake":
+        n = 5
+        np.random.seed(487423872)
+        df = get_df(n)
+    else:
+        df = tfs.read(INPUT / "coupling_bump" / f"twiss.lhc.b1.coupling_bump.tfs", index=NAME)
+
+    df_coupling = coupling_via_cmatrix(df)
+    for col in ("ALFX", "BETX", "ALFY", "BETY"):
+        df_coupling[col] = df[col]
+
+    df_res = rmatrix_from_coupling(df_coupling)
+
+    for col in ("R11", "R12", "R21", "R22"):
+        # For debugging:
+        # print(col)
+        # print(max(np.abs(df[col] - df_res[col])))
+        assert all(np.abs(df[col] - df_res[col]) < 5e-15)
+
+
 @pytest.mark.basic
 def test_real_output():
     n = 7
diff --git a/tests/unit/test_utils.py b/tests/unit/test_utils.py
index 68162a5..96efe9a 100644
--- a/tests/unit/test_utils.py
+++ b/tests/unit/test_utils.py
@@ -10,7 +10,7 @@ from optics_functions.constants import PHASE_ADV, Y, X, REAL, IMAG, NAME, DELTA_
 from optics_functions.utils import (add_missing_columns, dphi,
                                     get_all_phase_advances, tau, seq2str, i_pow,
                                     prepare_twiss_dataframe, switch_signs_for_beam4,
-                                    get_format_keys, dphi_at_element, split_complex_columns)
+                                    get_format_keys, dphi_at_element, split_complex_columns, merge_complex_columns)
 
 INPUT = Path(__file__).parent.parent / "inputs"
 
@@ -93,6 +93,21 @@ def test_split_complex_columns():
             assert (fun(df[col]) == df_split[f"{col}{part}"]).all()
 
 
+@pytest.mark.basic
+def test_merge_complex_columns():
+    df = pd.DataFrame([1+2j, 3j + 4], columns=["Col"], index=["A", "B"])
+    df_split = split_complex_columns(df, df.columns, drop=True)
+
+    df_merged = merge_complex_columns(df_split, df.columns, drop=False)
+    assert len(df_merged.columns) == 3
+
+    df_merged = merge_complex_columns(df_split, df.columns, drop=True)
+    assert len(df_merged.columns) == 1
+
+    for col in df.columns:
+        assert (df[col] == df_merged[col]).all()
+
+
 @pytest.mark.basic
 def test_dphi():
     n, qx, qy = 5, 4, 5
