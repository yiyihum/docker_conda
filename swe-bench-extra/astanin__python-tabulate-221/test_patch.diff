diff --git a/test/common.py b/test/common.py
index d95e84f..4cd3709 100644
--- a/test/common.py
+++ b/test/common.py
@@ -1,6 +1,6 @@
 import pytest  # noqa
 from pytest import skip, raises  # noqa
-
+import warnings
 
 def assert_equal(expected, result):
     print("Expected:\n%s\n" % expected)
@@ -27,3 +27,18 @@ def rows_to_pipe_table_str(rows):
         lines.append(line)
 
     return "\n".join(lines)
+
+def check_warnings(func_args_kwargs, *, num=None, category=None, contain=None):
+    func, args, kwargs = func_args_kwargs
+    with warnings.catch_warnings(record=True) as W:
+        # Causes all warnings to always be triggered inside here.
+        warnings.simplefilter("always")
+        func(*args, **kwargs)
+        # Checks
+        if num is not None:
+            assert len(W) == num
+        if category is not None:
+            assert all([issubclass(w.category, category) for w in W])
+        if contain is not None:
+            assert all([contain in str(w.message) for w in W])
+
diff --git a/test/test_api.py b/test/test_api.py
index 046d752..e658e82 100644
--- a/test/test_api.py
+++ b/test/test_api.py
@@ -48,8 +48,11 @@ def test_tabulate_signature():
         ("missingval", ""),
         ("showindex", "default"),
         ("disable_numparse", False),
+        ("colglobalalign", None),
         ("colalign", None),
         ("maxcolwidths", None),
+        ("headersglobalalign", None),
+        ("headersalign", None),
         ("rowalign", None),
         ("maxheadercolwidths", None),
     ]
diff --git a/test/test_output.py b/test/test_output.py
index 9043aed..d572498 100644
--- a/test/test_output.py
+++ b/test/test_output.py
@@ -1,7 +1,7 @@
 """Test output of the various forms of tabular data."""
 
 import tabulate as tabulate_module
-from common import assert_equal, raises, skip
+from common import assert_equal, raises, skip, check_warnings
 from tabulate import tabulate, simple_separated_format, SEPARATING_LINE
 
 # _test_table shows
@@ -2680,6 +2680,60 @@ def test_colalign_multi_with_sep_line():
     expected = "  one  two\n\nthree  four"
     assert_equal(expected, result)
 
+def test_column_global_and_specific_alignment():
+    """ Test `colglobalalign` and `"global"` parameter for `colalign`. """
+    table = [[1,2,3,4],[111,222,333,444]]
+    colglobalalign = 'center'
+    colalign = ('global','left', 'right')
+    result = tabulate(table, colglobalalign=colglobalalign, colalign=colalign)
+    expected = '\n'.join([
+        "---  ---  ---  ---",
+        " 1   2      3   4",
+        "111  222  333  444",
+        "---  ---  ---  ---"])
+    assert_equal(expected, result)
+
+def test_headers_global_and_specific_alignment():
+    """ Test `headersglobalalign` and `headersalign`. """
+    table = [[1,2,3,4,5,6],[111,222,333,444,555,666]]
+    colglobalalign = 'center'
+    colalign = ('left',)
+    headers = ['h', 'e', 'a', 'd', 'e', 'r']
+    headersglobalalign = 'right'
+    headersalign = ('same', 'same', 'left', 'global', 'center')
+    result = tabulate(table, headers=headers, colglobalalign=colglobalalign, colalign=colalign, headersglobalalign=headersglobalalign, headersalign=headersalign)
+    expected = '\n'.join([
+        "h     e   a      d   e     r",
+        "---  ---  ---  ---  ---  ---",
+        "1     2    3    4    5    6",
+        "111  222  333  444  555  666"])
+    assert_equal(expected, result)
+
+def test_colalign_or_headersalign_too_long():
+    """ Test `colalign` and `headersalign` too long. """
+    table = [[1,2],[111,222]]
+    colalign = ('global', 'left', 'center')
+    headers = ['h']
+    headersalign = ('center', 'right', 'same')
+    result = tabulate(table, headers=headers, colalign=colalign, headersalign=headersalign)
+    expected = '\n'.join([
+        "      h",
+        "---  ---",
+        "  1  2",
+        "111  222"])
+    assert_equal(expected, result)
+
+def test_warning_when_colalign_or_headersalign_is_string():
+    """ Test user warnings when `colalign` or `headersalign` is a string. """
+    table = [[1,"bar"]]
+    opt = {
+        'colalign': "center",
+        'headers': ['foo', '2'],
+        'headersalign': "center"}
+    check_warnings((tabulate, [table], opt),
+        num = 2,
+        category = UserWarning,
+        contain = "As a string")
 
 def test_float_conversions():
     "Output: float format parsed"
