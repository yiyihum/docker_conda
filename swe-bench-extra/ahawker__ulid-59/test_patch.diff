diff --git a/tests/test_base32.py b/tests/test_base32.py
index ab2df67..cac8214 100644
--- a/tests/test_base32.py
+++ b/tests/test_base32.py
@@ -9,6 +9,14 @@ import pytest
 from ulid import base32
 
 
+@pytest.fixture(scope='session')
+def decoding_alphabet():
+    """
+    Fixture that yields the entire alphabet that is valid for base32 decoding.
+    """
+    return base32.ENCODING + 'lLiIoO'
+
+
 def test_encode_handles_ulid_and_returns_26_char_string(valid_bytes_128):
     """
     Assert that :func:`~ulid.base32.encode` encodes a valid 128 bit bytes object into a :class:`~str`
@@ -235,3 +243,12 @@ def test_decode_randomness_raises_on_non_ascii_str(invalid_str_encoding):
     """
     with pytest.raises(ValueError):
         base32.decode_randomness(invalid_str_encoding)
+
+
+def test_decode_table_has_value_for_entire_decoding_alphabet(decoding_alphabet):
+    """
+    Assert that :attr:`~ulid.base32.DECODING` stores a valid value mapping for all characters that
+    can be base32 decoded.
+    """
+    for char in decoding_alphabet:
+        assert base32.DECODING[ord(char)] != 0xFF, 'Character "{}" decoded improperly'.format(char)
diff --git a/tests/test_bugs.py b/tests/test_bugs.py
new file mode 100644
index 0000000..6ab8fcb
--- /dev/null
+++ b/tests/test_bugs.py
@@ -0,0 +1,21 @@
+"""
+    test_bugs
+    ~~~~~~~~~
+
+    Tests for validating reported bugs have been fixed.
+"""
+from ulid import api
+
+
+def test_github_issue_58():
+    """
+    Assert that :func:`~ulid.api.from_str` can properly decode strings that
+    contain Base32 "translate" characters.
+
+    Base32 "translate" characters are: "iI, lL, oO".
+
+    Issue: https://github.com/ahawker/ulid/issues/58
+    """
+    value = '01BX73KC0TNH409RTFD1JXKmO0'
+    instance = api.from_str(value)
+    assert instance.str == '01BX73KC0TNH409RTFD1JXKM00'
