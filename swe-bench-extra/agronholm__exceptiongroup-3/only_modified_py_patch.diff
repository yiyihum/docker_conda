diff --git a/src/exceptiongroup/_exceptions.py b/src/exceptiongroup/_exceptions.py
index dda85e0..0d40a6b 100644
--- a/src/exceptiongroup/_exceptions.py
+++ b/src/exceptiongroup/_exceptions.py
@@ -70,6 +70,7 @@ class BaseExceptionGroup(BaseException, Generic[EBase]):
         super().__init__(__message, __exceptions, *args)
         self._message = __message
         self._exceptions = __exceptions
+        self.__note__ = None
 
     @property
     def message(self) -> str:
@@ -149,7 +150,9 @@ class BaseExceptionGroup(BaseException, Generic[EBase]):
         return matching_group, nonmatching_group
 
     def derive(self: T, __excs: Sequence[EBase]) -> T:
-        return BaseExceptionGroup(self.message, __excs)
+        eg = BaseExceptionGroup(self.message, __excs)
+        eg.__note__ = self.__note__
+        return eg
 
     def __str__(self) -> str:
         return self.message
diff --git a/src/exceptiongroup/_formatting.py b/src/exceptiongroup/_formatting.py
index 4bf973c..6c073c4 100644
--- a/src/exceptiongroup/_formatting.py
+++ b/src/exceptiongroup/_formatting.py
@@ -15,11 +15,11 @@ from ._exceptions import BaseExceptionGroup
 max_group_width = 15
 max_group_depth = 10
 _cause_message = (
-    "\nThe above exception was the direct cause " "of the following exception:\n\n"
+    "\nThe above exception was the direct cause of the following exception:\n\n"
 )
 
 _context_message = (
-    "\nDuring handling of the above exception, " "another exception occurred:\n\n"
+    "\nDuring handling of the above exception, another exception occurred:\n\n"
 )
 
 
@@ -51,6 +51,7 @@ def traceback_exception_init(
         _seen=_seen,
         **kwargs,
     )
+    self.__note__ = getattr(exc_value, "__note__", None) if exc_value else None
 
     seen_was_none = _seen is None
 
@@ -134,6 +135,8 @@ def traceback_exception_format(self, *, chain=True, _ctx=None):
                 yield from _ctx.emit("Traceback (most recent call last):\n")
                 yield from _ctx.emit(exc.stack.format())
             yield from _ctx.emit(exc.format_exception_only())
+            if isinstance(exc.__note__, str):
+                yield from _ctx.emit(line + "\n" for line in exc.__note__.split("\n"))
         elif _ctx.exception_group_depth > max_group_depth:
             # exception group, but depth exceeds limit
             yield from _ctx.emit(f"... (max_group_depth is {max_group_depth})\n")
@@ -151,6 +154,8 @@ def traceback_exception_format(self, *, chain=True, _ctx=None):
                 yield from _ctx.emit(exc.stack.format())
 
             yield from _ctx.emit(exc.format_exception_only())
+            if isinstance(exc.__note__, str):
+                yield from _ctx.emit(line + "\n" for line in exc.__note__.split("\n"))
             num_excs = len(exc.exceptions)
             if num_excs <= max_group_width:
                 n = num_excs

