diff --git a/privacypanda/__init__.py b/privacypanda/__init__.py
index ab09290..16ccf12 100644
--- a/privacypanda/__init__.py
+++ b/privacypanda/__init__.py
@@ -1,5 +1,6 @@
 from .addresses import *
 from .anonymize import *
+from .email import *
 from .report import *
 
 __version__ = "0.1.0dev"
diff --git a/privacypanda/anonymize.py b/privacypanda/anonymize.py
index 44596a7..7904b9e 100644
--- a/privacypanda/anonymize.py
+++ b/privacypanda/anonymize.py
@@ -5,6 +5,7 @@ import pandas as pd
 from numpy import unique as np_unique
 
 from .addresses import check_addresses
+from .email import check_emails
 
 
 def anonymize(df: pd.DataFrame) -> pd.DataFrame:
@@ -27,7 +28,7 @@ def anonymize(df: pd.DataFrame) -> pd.DataFrame:
     """
     private_cols = []
 
-    checks = [check_addresses]
+    checks = [check_addresses, check_emails]
     for check in checks:
         new_private_cols = check(df)
         private_cols += new_private_cols
diff --git a/privacypanda/email.py b/privacypanda/email.py
new file mode 100644
index 0000000..822f081
--- /dev/null
+++ b/privacypanda/email.py
@@ -0,0 +1,55 @@
+"""
+Code for identifying emails
+"""
+import re
+from typing import List
+
+import pandas as pd
+from numpy import dtype as np_dtype
+
+__all__ = ["check_emails"]
+
+OBJECT_DTYPE = np_dtype("O")
+
+# Whitelisted email suffix.
+# TODO extend this
+WHITELIST_EMAIL_SUFFIXES = [".co.uk", ".com", ".org", ".edu"]
+EMAIL_SUFFIX_REGEX = "[" + r"|".join(WHITELIST_EMAIL_SUFFIXES) + "]"
+
+# Simple email pattern
+SIMPLE_EMAIL_PATTERN = re.compile(".*@.*" + EMAIL_SUFFIX_REGEX, re.I)
+
+
+def check_emails(df: pd.DataFrame) -> List:
+    """
+    Check a dataframe for columns containing emails. Returns a list of column
+    names which contain at least one emails
+
+    "Emails" currently only concerns common emails, with one of the following
+    suffixes: ".co.uk", ".com", ".org", ".edu"
+
+    Parameters
+    ----------
+    df : pandas.DataFrame
+        The dataframe to check
+
+    Returns
+    -------
+    List
+        The names of columns which contain at least one email
+    """
+    private_cols = []
+
+    for col in df:
+        row = df[col]
+
+        # Only check column if it may contain strings
+        if row.dtype == OBJECT_DTYPE:
+            for item in row:
+                item = str(item)  # convert incase column has mixed data types
+
+                if SIMPLE_EMAIL_PATTERN.match(item):
+                    private_cols.append(col)
+                    break  # 1 failure is enough
+
+    return private_cols
diff --git a/privacypanda/report.py b/privacypanda/report.py
index e8af3a3..7f3b1c7 100644
--- a/privacypanda/report.py
+++ b/privacypanda/report.py
@@ -5,6 +5,7 @@ from collections import defaultdict
 from typing import TYPE_CHECKING, List, Union
 
 from .addresses import check_addresses
+from .email import check_emails
 
 if TYPE_CHECKING:
     import pandas
@@ -57,7 +58,7 @@ class Report:
 def report_privacy(df: "pandas.DataFrame") -> Report:
     report = Report()
 
-    checks = {"address": check_addresses}
+    checks = {"address": check_addresses, "email": check_emails}
 
     for breach, check in checks.items():
         columns = check(df)
