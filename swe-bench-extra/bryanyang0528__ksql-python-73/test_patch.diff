diff --git a/tests/test_client.py b/tests/test_client.py
index 42a89db..6e9075f 100644
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -53,6 +53,13 @@ class TestKSQLAPI(unittest.TestCase):
         property = [i for i in properties if i["name"] == "ksql.schema.registry.url"][0]
         self.assertEqual(property.get("value"), "http://schema-registry:8081")
 
+    @vcr.use_cassette("tests/vcr_cassettes/ksql_show_table_with_api_key.yml")
+    def test_ksql_show_tables_with_api_key(self):
+        api_client = KSQLAPI(url=self.url, check_version=False, api_key='foo', secret='bar')
+        ksql_string = "show tables;"
+        r = api_client.ksql(ksql_string)
+        self.assertEqual(r, [{"@type": "tables", "statementText": "show tables;", "tables": [], "warnings": []}])
+
     @vcr.use_cassette("tests/vcr_cassettes/ksql_show_table.yml")
     def test_ksql_show_tables(self):
         """ Test GET requests """
diff --git a/tests/unit-tests/test_api.py b/tests/unit-tests/test_api.py
index 0bce5d4..98a2c60 100644
--- a/tests/unit-tests/test_api.py
+++ b/tests/unit-tests/test_api.py
@@ -1,5 +1,6 @@
 import unittest
 import responses
+import urllib
 
 from ksql.api import BaseAPI
 
diff --git a/tests/vcr_cassettes/ksql_show_table_with_api_key.yml b/tests/vcr_cassettes/ksql_show_table_with_api_key.yml
new file mode 100644
index 0000000..df994fc
--- /dev/null
+++ b/tests/vcr_cassettes/ksql_show_table_with_api_key.yml
@@ -0,0 +1,34 @@
+interactions:
+- request:
+    body: '{"ksql": "show tables;"}'
+    headers:
+      Accept:
+      - application/json
+      Authorization:
+      - Basic {}
+      Connection:
+      - close
+      Content-Length:
+      - '24'
+      Content-Type:
+      - application/json
+      Host:
+      - localhost:8088
+      User-Agent:
+      - Python-urllib/3.8
+    method: POST
+    uri: http://localhost:8088/ksql
+  response:
+    body:
+      string: '[{"@type":"tables","statementText":"show tables;","tables":[],"warnings":[]}]'
+    headers:
+      connection:
+      - close
+      content-length:
+      - '77'
+      content-type:
+      - application/json
+    status:
+      code: 200
+      message: OK
+version: 1
diff --git a/tests/vcr_cassettes_backup/bad_requests.yml b/tests/vcr_cassettes_backup/bad_requests.yml
deleted file mode 100644
index 024ac7a..0000000
--- a/tests/vcr_cassettes_backup/bad_requests.yml
+++ /dev/null
@@ -1,25 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "noi;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['16']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"generic_error","error_code":40000,"message":"line 1:1:
-        mismatched input ''noi'' expecting {<EOF>, ''('', ''SELECT'', ''VALUES'',
-        ''CREATE'', ''REGISTER'', ''TABLE'', ''INSERT'', ''DESCRIBE'', ''PRINT'',
-        ''EXPLAIN'', ''SHOW'', ''LIST'', ''TERMINATE'', ''LOAD'', ''DROP'', ''SET'',
-        ''EXPORT'', ''UNSET'', ''RUN''}\nCaused by: org.antlr.v4.runtime.InputMismatchException","stack_trace":["io.confluent.ksql.parser.KsqlParser.buildAst(KsqlParser.java:66)","io.confluent.ksql.KsqlEngine.getStatements(KsqlEngine.java:497)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:171)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 21:19:08 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-version: 1
diff --git a/tests/vcr_cassettes_backup/get_ksql_server.yml b/tests/vcr_cassettes_backup/get_ksql_server.yml
deleted file mode 100644
index e0a3c83..0000000
--- a/tests/vcr_cassettes_backup/get_ksql_server.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-interactions:
-- request:
-    body: null
-    headers:
-      Accept: ['*/*']
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      User-Agent: [python-requests/2.19.1]
-    method: GET
-    uri: http://localhost:8088/info
-  response:
-    body: {string: '{"KsqlServerInfo":{"version":"5.0.0-SNAPSHOT","kafkaClusterId":"9HvFRIoMSyy1YUxjpOt-gg","ksqlServiceId":"default_"}}'}
-    headers:
-      Content-Type: [application/vnd.ksql.v1+json]
-      Date: ['Fri, 20 Jul 2018 20:08:04 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/get_properties.yml b/tests/vcr_cassettes_backup/get_properties.yml
deleted file mode 100644
index 0ffd904..0000000
--- a/tests/vcr_cassettes_backup/get_properties.yml
+++ /dev/null
@@ -1,20 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "show properties;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['28']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"properties","statementText":"show properties;","properties":{"ksql.extension.dir":"ext","ksql.streams.cache.max.bytes.buffering":"10000000","ksql.transient.prefix":"transient_","ksql.schema.registry.url":"http://localhost:8081","ssl.secure.random.implementation":null,"ksql.streams.default.deserialization.exception.handler":"io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler","ksql.output.topic.name.prefix":"","ksql.streams.auto.offset.reset":"latest","ksql.sink.partitions":"4","ssl.keystore.type":"JKS","ssl.trustmanager.algorithm":"PKIX","ksql.statestore.suffix":"_ksql_statestore","ssl.key.password":null,"ksql.service.id":"default_","ssl.truststore.password":null,"ssl.endpoint.identification.algorithm":"https","ksql.streams.bootstrap.servers":"localhost:29092","ssl.protocol":"TLS","ksql.streams.commit.interval.ms":"2000","ksql.sink.replicas":"1","ssl.provider":null,"ssl.enabled.protocols":"TLSv1.2,TLSv1.1,TLSv1","ssl.keystore.location":null,"ksql.streams.num.stream.threads":"4","ssl.cipher.suites":null,"ssl.truststore.type":"JKS","ksql.udfs.enabled":"true","ssl.truststore.location":null,"ksql.udf.enable.security.manager":"true","ssl.keystore.password":null,"ssl.keymanager.algorithm":"SunX509","ksql.streams.application.id":"KSQL_REST_SERVER_DEFAULT_APP_ID","ksql.sink.window.change.log.additional.retention":"1000000","ksql.udf.collect.metrics":"false","ksql.persistent.prefix":"query_"},"overwrittenProperties":[]}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:06 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/healthcheck.yml b/tests/vcr_cassettes_backup/healthcheck.yml
deleted file mode 100644
index 95b7873..0000000
--- a/tests/vcr_cassettes_backup/healthcheck.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-interactions:
-- request:
-    body: null
-    headers:
-      Accept: ['*/*']
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      User-Agent: [python-requests/2.19.1]
-    method: GET
-    uri: http://localhost:8088/status
-  response:
-    body: {string: '{"commandStatuses":{"stream/PREBID_TRAFFIC_LOG_TOTAL_STREAM/create":"SUCCESS","stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH/create":"SUCCESS","stream/TEST_TABLE/drop":"SUCCESS","stream/PREBID_TRAFFIC_LOG_TOTAL_STREAM/drop":"SUCCESS","stream/CREATE_STREAM_AS_WITHOUT_CONDITIONS/create":"SUCCESS","stream/PAGEVIEWS_ORIGINAL/drop":"SUCCESS","stream/KSQL_PYTHON_TESTTEST_KSQL_CREATE_STREAM/create":"SUCCESS","stream/TEST_TABLE/create":"SUCCESS","stream/PREBID_TRAFFIC_LOG_VALID_STREAM/drop":"SUCCESS","stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITHOUT_STARTWITH/create":"SUCCESS","stream/PAGEVIEWS_ORIGINAL/create":"SUCCESS","stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH_WITH_AND/create":"SUCCESS","stream/PREBID_TRAFFIC_LOG_VALID_STREAM/create":"ERROR","stream/KSQL_PYTHON_TESTTEST_KSQL_CREATE_STREAM/drop":"SUCCESS","stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH/drop":"QUEUED"}}'}
-    headers:
-      Content-Type: [application/vnd.ksql.v1+json]
-      Date: ['Fri, 20 Jul 2018 20:10:10 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream.yml b/tests/vcr_cassettes_backup/ksql_create_stream.yml
deleted file mode 100644
index e40a8cc..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream.yml
+++ /dev/null
@@ -1,25 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_testtest_ksql_create_stream (viewtime
-      bigint, userid varchar, pageid varchar)                        WITH (kafka_topic=''exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['198']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_testtest_ksql_create_stream
-        (viewtime bigint, userid varchar, pageid varchar)                        WITH
-        (kafka_topic=''exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TESTTEST_KSQL_CREATE_STREAM/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:09 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_with_startwith.yml b/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_with_startwith.yml
deleted file mode 100644
index 642cc7b..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_with_startwith.yml
+++ /dev/null
@@ -1,132 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED pageviews_original;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['49']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''PAGEVIEWS_ORIGINAL'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED pageviews_original;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:41 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    pageviews_original;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['63']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    pageviews_original;","commandId":"stream/PAGEVIEWS_ORIGINAL/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        PAGEVIEWS_ORIGINAL does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:41 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED create_stream_as_with_conditions_with_startwith;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['78']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH''
-        in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED create_stream_as_with_conditions_with_startwith;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:42 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    create_stream_as_with_conditions_with_startwith;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['92']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    create_stream_as_with_conditions_with_startwith;","commandId":"stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:42 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream pageviews_original (name string, age bigint, userid
-      string, pageid bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['160']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream pageviews_original
-        (name string, age bigint, userid string, pageid bigint) WITH (kafka_topic=''exist_topic'',
-        value_format=''DELIMITED'');","commandId":"stream/PAGEVIEWS_ORIGINAL/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:42 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream create_stream_as_with_conditions_with_startwith
-      WITH (kafka_topic=''create_stream_as_with_conditions_with_startwith'', value_format=''DELIMITED'',
-      timestamp=''logtime'') AS SELECT rowtime as logtime, * FROM pageviews_original
-      where userid = ''foo_%'';"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['269']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream create_stream_as_with_conditions_with_startwith
-        WITH (kafka_topic=''create_stream_as_with_conditions_with_startwith'', value_format=''DELIMITED'',
-        timestamp=''logtime'') AS SELECT rowtime as logtime, * FROM pageviews_original
-        where userid = ''foo_%'';","commandId":"stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created and running"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:43 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_with_startwith_with_and.yml b/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_with_startwith_with_and.yml
deleted file mode 100644
index 62d4a1d..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_with_startwith_with_and.yml
+++ /dev/null
@@ -1,50 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "CREATE stream pageviews_original (name string, age bigint, userid
-      string, pageid bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['160']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Topic
-        already registered.","stack_trace":["io.confluent.ksql.ddl.commands.RegisterTopicCommand.run(RegisterTopicCommand.java:99)","io.confluent.ksql.ddl.commands.CreateStreamCommand.run(CreateStreamCommand.java:43)","io.confluent.ksql.ddl.commands.DdlCommandExec.executeOnMetaStore(DdlCommandExec.java:61)","io.confluent.ksql.ddl.commands.DdlCommandExec.execute(DdlCommandExec.java:54)","io.confluent.ksql.rest.server.resources.KsqlResource.executeDdlCommand(KsqlResource.java:783)","io.confluent.ksql.rest.server.resources.KsqlResource.lambda$registerDdlCommandTasks$20(KsqlResource.java:716)","io.confluent.ksql.rest.server.resources.KsqlResource.getStatementExecutionPlan(KsqlResource.java:635)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:258)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"CREATE
-        stream pageviews_original (name string, age bigint, userid string, pageid
-        bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:50 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "CREATE stream create_stream_as_with_conditions_with_startwith_with_and
-      WITH (kafka_topic=''create_stream_as_with_conditions_with_startwith_with_and'',
-      value_format=''DELIMITED'', timestamp=''logtime'') AS SELECT rowtime as logtime,
-      * FROM pageviews_original where userid = ''foo_%'' and age > 10;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['300']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream create_stream_as_with_conditions_with_startwith_with_and
-        WITH (kafka_topic=''create_stream_as_with_conditions_with_startwith_with_and'',
-        value_format=''DELIMITED'', timestamp=''logtime'') AS SELECT rowtime as logtime,
-        * FROM pageviews_original where userid = ''foo_%'' and age > 10;","commandId":"stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH_WITH_AND/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created and running"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:50 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_without_startwith.yml b/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_without_startwith.yml
deleted file mode 100644
index 96aa9fb..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_conditions_without_startwith.yml
+++ /dev/null
@@ -1,50 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "CREATE stream pageviews_original (name string, age bigint, userid
-      string, pageid bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['160']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Topic
-        already registered.","stack_trace":["io.confluent.ksql.ddl.commands.RegisterTopicCommand.run(RegisterTopicCommand.java:99)","io.confluent.ksql.ddl.commands.CreateStreamCommand.run(CreateStreamCommand.java:43)","io.confluent.ksql.ddl.commands.DdlCommandExec.executeOnMetaStore(DdlCommandExec.java:61)","io.confluent.ksql.ddl.commands.DdlCommandExec.execute(DdlCommandExec.java:54)","io.confluent.ksql.rest.server.resources.KsqlResource.executeDdlCommand(KsqlResource.java:783)","io.confluent.ksql.rest.server.resources.KsqlResource.lambda$registerDdlCommandTasks$20(KsqlResource.java:716)","io.confluent.ksql.rest.server.resources.KsqlResource.getStatementExecutionPlan(KsqlResource.java:635)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:258)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"CREATE
-        stream pageviews_original (name string, age bigint, userid string, pageid
-        bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:56 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "CREATE stream create_stream_as_with_conditions_without_startwith
-      WITH (kafka_topic=''create_stream_as_with_conditions_without_startwith'', value_format=''DELIMITED'',
-      timestamp=''logtime'') AS SELECT rowtime as logtime, * FROM pageviews_original
-      where userid = ''foo'';"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['273']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream create_stream_as_with_conditions_without_startwith
-        WITH (kafka_topic=''create_stream_as_with_conditions_without_startwith'',
-        value_format=''DELIMITED'', timestamp=''logtime'') AS SELECT rowtime as logtime,
-        * FROM pageviews_original where userid = ''foo'';","commandId":"stream/CREATE_STREAM_AS_WITH_CONDITIONS_WITHOUT_STARTWITH/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created and running"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:07:56 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_wrong_timestamp.yml b/tests/vcr_cassettes_backup/ksql_create_stream_as_with_wrong_timestamp.yml
deleted file mode 100644
index c18ad24..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_as_with_wrong_timestamp.yml
+++ /dev/null
@@ -1,145 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED prebid_traffic_log_total_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['62']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''PREBID_TRAFFIC_LOG_TOTAL_STREAM'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED prebid_traffic_log_total_stream;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:10 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    prebid_traffic_log_total_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['76']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    prebid_traffic_log_total_stream;","commandId":"stream/PREBID_TRAFFIC_LOG_TOTAL_STREAM/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        PREBID_TRAFFIC_LOG_TOTAL_STREAM does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:11 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED prebid_traffic_log_valid_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['62']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''PREBID_TRAFFIC_LOG_VALID_STREAM'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED prebid_traffic_log_valid_stream;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:11 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    prebid_traffic_log_valid_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['76']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    prebid_traffic_log_valid_stream;","commandId":"stream/PREBID_TRAFFIC_LOG_VALID_STREAM/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        PREBID_TRAFFIC_LOG_VALID_STREAM does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:11 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream prebid_traffic_log_total_stream (name string, age
-      bigint, userid string, pageid bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['173']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream prebid_traffic_log_total_stream
-        (name string, age bigint, userid string, pageid bigint) WITH (kafka_topic=''exist_topic'',
-        value_format=''DELIMITED'');","commandId":"stream/PREBID_TRAFFIC_LOG_TOTAL_STREAM/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:11 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream prebid_traffic_log_valid_stream WITH (kafka_topic=''prebid_traffic_log_valid_topic'',
-      value_format=''DELIMITED'', timestamp=''foo'') AS SELECT * FROM prebid_traffic_log_total_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['202']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream prebid_traffic_log_valid_stream
-        WITH (kafka_topic=''prebid_traffic_log_valid_topic'', value_format=''DELIMITED'',
-        timestamp=''foo'') AS SELECT * FROM prebid_traffic_log_total_stream;","commandId":"stream/PREBID_TRAFFIC_LOG_VALID_STREAM/create","commandStatus":{"status":"ERROR","message":"io.confluent.ksql.util.KsqlException:
-        No column with the provided timestamp column name in the WITH clause, FOO,
-        exists in the defined schema.\n\tat io.confluent.ksql.util.timestamp.TimestampExtractionPolicyFactory.lambda$create$0(TimestampExtractionPolicyFactory.java:41)\n\tat
-        java.util.Optional.orElseThrow(Optional.java:290)\n\tat io.confluent.ksql.util.timestamp.TimestampExtractionPolicyFactory.create(TimestampExtractionPolicyFactory.java:41)\n\tat
-        io.confluent.ksql.planner.LogicalPlanner.getTimestampExtractionPolicy(LogicalPlanner.java:126)\n\tat
-        io.confluent.ksql.planner.LogicalPlanner.buildOutputNode(LogicalPlanner.java:93)\n\tat
-        io.confluent.ksql.planner.LogicalPlanner.buildPlan(LogicalPlanner.java:83)\n\tat
-        io.confluent.ksql.QueryEngine.buildQueryLogicalPlan(QueryEngine.java:118)\n\tat
-        io.confluent.ksql.QueryEngine.buildLogicalPlans(QueryEngine.java:90)\n\tat
-        io.confluent.ksql.KsqlEngine.planQueries(KsqlEngine.java:221)\n\tat io.confluent.ksql.KsqlEngine.buildMultipleQueries(KsqlEngine.java:211)\n\tat
-        io.confluent.ksql.rest.server.computation.StatementExecutor.startQuery(StatementExecutor.java:372)\n\tat
-        io.confluent.ksql.rest.server.computation.StatementExecutor.handleCreateAsSelect(StatementExecutor.java:317)\n\tat
-        io.confluent.ksql.rest.server.computation.StatementExecutor.executeStatement(StatementExecutor.java:234)\n\tat
-        io.confluent.ksql.rest.server.computation.StatementExecutor.handleStatementWithTerminatedQueries(StatementExecutor.java:206)\n\tat
-        io.confluent.ksql.rest.server.computation.StatementExecutor.handleStatement(StatementExecutor.java:112)\n\tat
-        io.confluent.ksql.rest.server.computation.CommandRunner.executeStatement(CommandRunner.java:105)\n\tat
-        io.confluent.ksql.rest.server.computation.CommandRunner.fetchAndRunCommands(CommandRunner.java:88)\n\tat
-        io.confluent.ksql.rest.server.computation.CommandRunner.run(CommandRunner.java:63)\n\tat
-        java.lang.Thread.run(Thread.java:748)\n"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:12 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_as_without_conditions.yml b/tests/vcr_cassettes_backup/ksql_create_stream_as_without_conditions.yml
deleted file mode 100644
index 1fb4cde..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_as_without_conditions.yml
+++ /dev/null
@@ -1,48 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "CREATE stream pageviews_original (name string, age bigint, userid
-      string, pageid bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['160']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Topic
-        already registered.","stack_trace":["io.confluent.ksql.ddl.commands.RegisterTopicCommand.run(RegisterTopicCommand.java:99)","io.confluent.ksql.ddl.commands.CreateStreamCommand.run(CreateStreamCommand.java:43)","io.confluent.ksql.ddl.commands.DdlCommandExec.executeOnMetaStore(DdlCommandExec.java:61)","io.confluent.ksql.ddl.commands.DdlCommandExec.execute(DdlCommandExec.java:54)","io.confluent.ksql.rest.server.resources.KsqlResource.executeDdlCommand(KsqlResource.java:783)","io.confluent.ksql.rest.server.resources.KsqlResource.lambda$registerDdlCommandTasks$20(KsqlResource.java:716)","io.confluent.ksql.rest.server.resources.KsqlResource.getStatementExecutionPlan(KsqlResource.java:635)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:258)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"CREATE
-        stream pageviews_original (name string, age bigint, userid string, pageid
-        bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:00 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "CREATE stream create_stream_as_without_conditions WITH (kafka_topic=''create_stream_as_without_conditions'',
-      value_format=''DELIMITED'', timestamp=''logtime'') AS SELECT rowtime as logtime,
-      * FROM pageviews_original;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['222']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream create_stream_as_without_conditions
-        WITH (kafka_topic=''create_stream_as_without_conditions'', value_format=''DELIMITED'',
-        timestamp=''logtime'') AS SELECT rowtime as logtime, * FROM pageviews_original;","commandId":"stream/CREATE_STREAM_AS_WITHOUT_CONDITIONS/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created and running"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:01 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_by_builder.yml b/tests/vcr_cassettes_backup/ksql_create_stream_by_builder.yml
deleted file mode 100644
index d78aae9..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_by_builder.yml
+++ /dev/null
@@ -1,65 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED test_table;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['41']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''TEST_TABLE'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED test_table;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:15 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    test_table;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['55']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    test_table;","commandId":"stream/TEST_TABLE/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        TEST_TABLE does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:15 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream test_table (viewtime bigint, userid varchar, pageid
-      varchar) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['146']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream test_table
-        (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic=''exist_topic'',
-        value_format=''DELIMITED'');","commandId":"stream/TEST_TABLE/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:15 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_create_stream_by_builder_api.yml b/tests/vcr_cassettes_backup/ksql_create_stream_by_builder_api.yml
deleted file mode 100644
index 647f201..0000000
--- a/tests/vcr_cassettes_backup/ksql_create_stream_by_builder_api.yml
+++ /dev/null
@@ -1,63 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED test_table;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['41']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        test_table;","sourceDescription":{"name":"TEST_TABLE","readQueries":[],"writeQueries":[],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"exist_topic","partitions":1,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:16 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    test_table;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['55']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    test_table;","commandId":"stream/TEST_TABLE/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        TEST_TABLE was dropped. "}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:16 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream test_table (viewtime bigint, userid varchar, pageid
-      varchar) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['146']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream test_table
-        (viewtime bigint, userid varchar, pageid varchar) WITH (kafka_topic=''exist_topic'',
-        value_format=''DELIMITED'');","commandId":"stream/TEST_TABLE/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:08:16 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_show_table.yml b/tests/vcr_cassettes_backup/ksql_show_table.yml
deleted file mode 100644
index 0d2d6fb..0000000
--- a/tests/vcr_cassettes_backup/ksql_show_table.yml
+++ /dev/null
@@ -1,20 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "show tables;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['24']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"tables","statementText":"show tables;","tables":[]}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:11 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/ksql_topic_already_registered.yml b/tests/vcr_cassettes_backup/ksql_topic_already_registered.yml
deleted file mode 100644
index 6ecb9fe..0000000
--- a/tests/vcr_cassettes_backup/ksql_topic_already_registered.yml
+++ /dev/null
@@ -1,87 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED foo_table;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['40']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''FOO_TABLE'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED foo_table;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:14 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    foo_table;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['54']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    foo_table;","commandId":"stream/FOO_TABLE/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        FOO_TABLE does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:14 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream foo_table (name string, age bigint) WITH (kafka_topic=''exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['121']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE stream foo_table
-        (name string, age bigint) WITH (kafka_topic=''exist_topic'', value_format=''DELIMITED'');","commandId":"stream/FOO_TABLE/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:14 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE stream foo_table (name string, age bigint) WITH (kafka_topic=''exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['121']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Topic
-        already registered.","stack_trace":["io.confluent.ksql.ddl.commands.RegisterTopicCommand.run(RegisterTopicCommand.java:99)","io.confluent.ksql.ddl.commands.CreateStreamCommand.run(CreateStreamCommand.java:43)","io.confluent.ksql.ddl.commands.DdlCommandExec.executeOnMetaStore(DdlCommandExec.java:61)","io.confluent.ksql.ddl.commands.DdlCommandExec.execute(DdlCommandExec.java:54)","io.confluent.ksql.rest.server.resources.KsqlResource.executeDdlCommand(KsqlResource.java:783)","io.confluent.ksql.rest.server.resources.KsqlResource.lambda$registerDdlCommandTasks$20(KsqlResource.java:716)","io.confluent.ksql.rest.server.resources.KsqlResource.getStatementExecutionPlan(KsqlResource.java:635)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:258)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"CREATE
-        stream foo_table (name string, age bigint) WITH (kafka_topic=''exist_topic'',
-        value_format=''DELIMITED'');","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:15 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-version: 1
diff --git a/tests/vcr_cassettes_backup/raise_create_error_no_topic.yml b/tests/vcr_cassettes_backup/raise_create_error_no_topic.yml
deleted file mode 100644
index 3cbc375..0000000
--- a/tests/vcr_cassettes_backup/raise_create_error_no_topic.yml
+++ /dev/null
@@ -1,25 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "CREATE stream foo_table (name string, age bigint) WITH (kafka_topic=''this_topic_is_not_exist'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['133']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Kafka
-        topic does not exist: this_topic_is_not_exist","stack_trace":["io.confluent.ksql.ddl.commands.AbstractCreateStreamCommand.registerTopicFirst(AbstractCreateStreamCommand.java:184)","io.confluent.ksql.ddl.commands.AbstractCreateStreamCommand.<init>(AbstractCreateStreamCommand.java:81)","io.confluent.ksql.ddl.commands.CreateStreamCommand.<init>(CreateStreamCommand.java:34)","io.confluent.ksql.rest.server.resources.KsqlResource.lambda$registerDdlCommandTasks$20(KsqlResource.java:713)","io.confluent.ksql.rest.server.resources.KsqlResource.getStatementExecutionPlan(KsqlResource.java:635)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:258)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"CREATE
-        stream foo_table (name string, age bigint) WITH (kafka_topic=''this_topic_is_not_exist'',
-        value_format=''DELIMITED'');","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:13 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-version: 1
diff --git a/tests/vcr_cassettes_backup/utils_test_drop_all_streams.yml b/tests/vcr_cassettes_backup/utils_test_drop_all_streams.yml
deleted file mode 100644
index e3dd6b7..0000000
--- a/tests/vcr_cassettes_backup/utils_test_drop_all_streams.yml
+++ /dev/null
@@ -1,144 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_all_streams;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['69']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_drop_all_streams;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:17 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_drop_all_streams;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['83']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_drop_all_streams;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:17 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_drop_all_streams (viewtime
-      bigint, userid varchar, pageid varchar)                         WITH (kafka_topic=''ksql_python_test_exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['215']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_drop_all_streams
-        (viewtime bigint, userid varchar, pageid varchar)                         WITH
-        (kafka_topic=''ksql_python_test_exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:17 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "SHOW STREAMS;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['25']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"streams","statementText":"SHOW STREAMS;","streams":[{"type":"STREAM","name":"TEST_TABLE","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITH_CONDITIONS_WITHOUT_STARTWITH","topic":"create_stream_as_with_conditions_without_startwith","format":"DELIMITED"},{"type":"STREAM","name":"PREBID_TRAFFIC_LOG_TOTAL_STREAM","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"PAGEVIEWS_ORIGINAL","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITHOUT_CONDITIONS","topic":"create_stream_as_without_conditions","format":"DELIMITED"},{"type":"STREAM","name":"KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS","topic":"ksql_python_test_exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"FOO_TABLE","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH_WITH_AND","topic":"create_stream_as_with_conditions_with_startwith_with_and","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH","topic":"create_stream_as_with_conditions_with_startwith","format":"DELIMITED"}]}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:18 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['69']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS","readQueries":[],"writeQueries":[],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"ksql_python_test_exist_topic","partitions":1,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:18 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['83']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS was dropped. "}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:18 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_all_streams;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['69']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_DROP_ALL_STREAMS'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_drop_all_streams;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:18 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-version: 1
diff --git a/tests/vcr_cassettes_backup/utils_test_drop_stream.yml b/tests/vcr_cassettes_backup/utils_test_drop_stream.yml
deleted file mode 100644
index b329d22..0000000
--- a/tests/vcr_cassettes_backup/utils_test_drop_stream.yml
+++ /dev/null
@@ -1,145 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['64']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_DROP_STREAM'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_drop_stream;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:18 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['78']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_drop_stream;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_DROP_STREAM does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:18 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_drop_stream (viewtime bigint,
-      userid varchar, pageid varchar)                        WITH (kafka_topic=''ksql_python_test_exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['209']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_drop_stream
-        (viewtime bigint, userid varchar, pageid varchar)                        WITH
-        (kafka_topic=''ksql_python_test_exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:19 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['64']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        ksql_python_test_test_drop_stream;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_DROP_STREAM","readQueries":[],"writeQueries":[],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"ksql_python_test_exist_topic","partitions":1,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:19 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['64']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        ksql_python_test_test_drop_stream;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_DROP_STREAM","readQueries":[],"writeQueries":[],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"ksql_python_test_exist_topic","partitions":1,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:19 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['78']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_drop_stream;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_DROP_STREAM was dropped. "}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:19 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['64']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_DROP_STREAM'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_drop_stream;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:19 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-version: 1
diff --git a/tests/vcr_cassettes_backup/utils_test_drop_stream_create_as_stream.yml b/tests/vcr_cassettes_backup/utils_test_drop_stream_create_as_stream.yml
deleted file mode 100644
index b8c8de2..0000000
--- a/tests/vcr_cassettes_backup/utils_test_drop_stream_create_as_stream.yml
+++ /dev/null
@@ -1,187 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['64']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_DROP_STREAM'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_drop_stream;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:21 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['78']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_drop_stream;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_DROP_STREAM does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:21 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_drop_stream (viewtime bigint,
-      userid varchar, pageid varchar)                        WITH (kafka_topic=''ksql_python_test_exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['209']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_drop_stream
-        (viewtime bigint, userid varchar, pageid varchar)                        WITH
-        (kafka_topic=''ksql_python_test_exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:21 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_drop_stream_as as select
-      * from ksql_python_test_test_drop_stream;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['114']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_drop_stream_as
-        as select * from ksql_python_test_test_drop_stream;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created and running"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:21 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream_as;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['67']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        ksql_python_test_test_drop_stream_as;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS","readQueries":[],"writeQueries":[{"sinks":["KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS"],"id":"CSAS_KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS_4","queryString":"CREATE
-        STREAM ksql_python_test_test_drop_stream_as as select * from ksql_python_test_test_drop_stream;"}],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS","partitions":4,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:23 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream_as;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['67']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        ksql_python_test_test_drop_stream_as;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS","readQueries":[],"writeQueries":[{"sinks":["KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS"],"id":"CSAS_KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS_4","queryString":"CREATE
-        STREAM ksql_python_test_test_drop_stream_as as select * from ksql_python_test_test_drop_stream;"}],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS","partitions":4,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:24 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "TERMINATE CSAS_KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS_4;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['66']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"TERMINATE CSAS_KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS_4;","commandId":"terminate/CSAS_KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS_4/execute","commandStatus":{"status":"QUEUED","message":"Statement
-        written to command topic"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:24 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_drop_stream_as;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['81']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_drop_stream_as;","commandId":"stream/KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS was dropped. "}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:29 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_drop_stream_as;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['67']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_DROP_STREAM_AS'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_drop_stream_as;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:30 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-version: 1
diff --git a/tests/vcr_cassettes_backup/utils_test_get_all_streams.yml b/tests/vcr_cassettes_backup/utils_test_get_all_streams.yml
deleted file mode 100644
index 3dfbca3..0000000
--- a/tests/vcr_cassettes_backup/utils_test_get_all_streams.yml
+++ /dev/null
@@ -1,84 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_get_all_streams;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['68']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_GET_ALL_STREAMS'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_get_all_streams;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:31 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_get_all_streams;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['82']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_get_all_streams;","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_ALL_STREAMS/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_GET_ALL_STREAMS does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:31 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_get_all_streams (viewtime
-      bigint, userid varchar, pageid varchar)                         WITH (kafka_topic=''ksql_python_test_exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['214']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_get_all_streams
-        (viewtime bigint, userid varchar, pageid varchar)                         WITH
-        (kafka_topic=''ksql_python_test_exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_ALL_STREAMS/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:31 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "SHOW STREAMS;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['25']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"streams","statementText":"SHOW STREAMS;","streams":[{"type":"STREAM","name":"TEST_TABLE","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITH_CONDITIONS_WITHOUT_STARTWITH","topic":"create_stream_as_with_conditions_without_startwith","format":"DELIMITED"},{"type":"STREAM","name":"PREBID_TRAFFIC_LOG_TOTAL_STREAM","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"KSQL_PYTHON_TEST_TEST_GET_ALL_STREAMS","topic":"ksql_python_test_exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"PAGEVIEWS_ORIGINAL","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITHOUT_CONDITIONS","topic":"create_stream_as_without_conditions","format":"DELIMITED"},{"type":"STREAM","name":"FOO_TABLE","topic":"exist_topic","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH_WITH_AND","topic":"create_stream_as_with_conditions_with_startwith_with_and","format":"DELIMITED"},{"type":"STREAM","name":"CREATE_STREAM_AS_WITH_CONDITIONS_WITH_STARTWITH","topic":"create_stream_as_with_conditions_with_startwith","format":"DELIMITED"}]}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:32 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/utils_test_get_dependent_queries.yml b/tests/vcr_cassettes_backup/utils_test_get_dependent_queries.yml
deleted file mode 100644
index 46a1d57..0000000
--- a/tests/vcr_cassettes_backup/utils_test_get_dependent_queries.yml
+++ /dev/null
@@ -1,108 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_get_dependent_queries;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['74']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES'' in the
-        Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_get_dependent_queries;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:33 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_get_dependent_queries;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['88']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_get_dependent_queries;","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:33 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_get_dependent_queries (viewtime
-      bigint, userid varchar, pageid varchar)                        WITH (kafka_topic=''ksql_python_test_exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['219']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_get_dependent_queries
-        (viewtime bigint, userid varchar, pageid varchar)                        WITH
-        (kafka_topic=''ksql_python_test_exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:33 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_get_dependent_queries_as
-      as select * from ksql_python_test_test_get_dependent_queries;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['134']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_get_dependent_queries_as
-        as select * from ksql_python_test_test_get_dependent_queries;","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES_AS/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created and running"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:33 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_get_dependent_queries_as;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['77']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        ksql_python_test_test_get_dependent_queries_as;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES_AS","readQueries":[],"writeQueries":[{"sinks":["KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES_AS"],"id":"CSAS_KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES_AS_5","queryString":"CREATE
-        STREAM ksql_python_test_test_get_dependent_queries_as as select * from ksql_python_test_test_get_dependent_queries;"}],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"KSQL_PYTHON_TEST_TEST_GET_DEPENDENT_QUERIES_AS","partitions":4,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:35 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
diff --git a/tests/vcr_cassettes_backup/utils_test_get_stream_info.yml b/tests/vcr_cassettes_backup/utils_test_get_stream_info.yml
deleted file mode 100644
index a6378fb..0000000
--- a/tests/vcr_cassettes_backup/utils_test_get_stream_info.yml
+++ /dev/null
@@ -1,85 +0,0 @@
-interactions:
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_get_stream_info;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['68']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '{"@type":"statement_error","error_code":40001,"message":"Could
-        not find STREAM/TABLE ''KSQL_PYTHON_TEST_TEST_GET_STREAM_INFO'' in the Metastore","stack_trace":["io.confluent.ksql.rest.server.resources.KsqlResource.describe(KsqlResource.java:457)","io.confluent.ksql.rest.server.resources.KsqlResource.validateStatement(KsqlResource.java:248)","io.confluent.ksql.rest.server.resources.KsqlResource.handleKsqlStatements(KsqlResource.java:190)","sun.reflect.GeneratedMethodAccessor6.invoke(Unknown
-        Source)","sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","java.lang.reflect.Method.invoke(Method.java:498)","org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)","org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200)","org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)","org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)","org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)","org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)","org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)","org.glassfish.jersey.internal.Errors.process(Errors.java:316)","org.glassfish.jersey.internal.Errors.process(Errors.java:298)","org.glassfish.jersey.internal.Errors.process(Errors.java:268)","org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)","org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)","org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)","org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)","org.glassfish.jersey.servlet.ServletContainer.serviceImpl(ServletContainer.java:409)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:584)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:525)","org.glassfish.jersey.servlet.ServletContainer.doFilter(ServletContainer.java:462)","org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)","org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)","org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)","org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)","org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)","org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)","org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)","org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)","org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)","org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)","org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)","org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)","org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)","org.eclipse.jetty.server.Server.handle(Server.java:531)","org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)","org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)","org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)","org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)","org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)","org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)","org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)","org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760)","org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678)","java.lang.Thread.run(Thread.java:748)"],"statementText":"DESCRIBE
-        EXTENDED ksql_python_test_test_get_stream_info;","entities":[]}'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:44 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 400, message: Bad Request}
-- request:
-    body: '{"ksql": "DROP\n    STREAM IF EXISTS\n    ksql_python_test_test_get_stream_info;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['82']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"DROP\n    STREAM IF
-        EXISTS\n    ksql_python_test_test_get_stream_info;","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_STREAM_INFO/drop","commandStatus":{"status":"SUCCESS","message":"Source
-        KSQL_PYTHON_TEST_TEST_GET_STREAM_INFO does not exist."}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:45 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "CREATE STREAM ksql_python_test_test_get_stream_info (viewtime
-      bigint, userid varchar, pageid varchar)                         WITH (kafka_topic=''ksql_python_test_exist_topic'',
-      value_format=''DELIMITED'');"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['214']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"currentStatus","statementText":"CREATE STREAM ksql_python_test_test_get_stream_info
-        (viewtime bigint, userid varchar, pageid varchar)                         WITH
-        (kafka_topic=''ksql_python_test_exist_topic'', value_format=''DELIMITED'');","commandId":"stream/KSQL_PYTHON_TEST_TEST_GET_STREAM_INFO/create","commandStatus":{"status":"SUCCESS","message":"Stream
-        created"}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:45 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-- request:
-    body: '{"ksql": "DESCRIBE EXTENDED ksql_python_test_test_get_stream_info;"}'
-    headers:
-      Accept: [application/json]
-      Accept-Encoding: ['gzip, deflate']
-      Connection: [keep-alive]
-      Content-Length: ['68']
-      Content-Type: [application/json]
-      User-Agent: [python-requests/2.19.1]
-    method: POST
-    uri: http://localhost:8088/ksql
-  response:
-    body: {string: '[{"@type":"sourceDescription","statementText":"DESCRIBE EXTENDED
-        ksql_python_test_test_get_stream_info;","sourceDescription":{"name":"KSQL_PYTHON_TEST_TEST_GET_STREAM_INFO","readQueries":[],"writeQueries":[],"fields":[{"name":"ROWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"ROWKEY","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"VIEWTIME","schema":{"type":"BIGINT","fields":null,"memberSchema":null}},{"name":"USERID","schema":{"type":"STRING","fields":null,"memberSchema":null}},{"name":"PAGEID","schema":{"type":"STRING","fields":null,"memberSchema":null}}],"type":"STREAM","key":"","timestamp":"","statistics":"","errorStats":"","extended":true,"format":"DELIMITED","topic":"ksql_python_test_exist_topic","partitions":1,"replication":1}}]'}
-    headers:
-      Content-Type: [application/json]
-      Date: ['Fri, 20 Jul 2018 20:10:45 GMT']
-      Server: [Jetty(9.4.10.v20180503)]
-    status: {code: 200, message: OK}
-version: 1
