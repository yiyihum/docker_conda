diff --git a/tests/data/placebo/test_account_org_info/iam.ListAccountAliases_1.json b/tests/data/placebo/test_account_org_info/iam.ListAccountAliases_1.json
new file mode 100644
index 000000000..97b529abe
--- /dev/null
+++ b/tests/data/placebo/test_account_org_info/iam.ListAccountAliases_1.json
@@ -0,0 +1,10 @@
+{
+    "status_code": 200,
+    "data": {
+        "AccountAliases": [
+            "realms-root"
+        ],
+        "IsTruncated": false,
+        "ResponseMetadata": {}
+    }
+}
\ No newline at end of file
diff --git a/tests/data/placebo/test_account_org_info/organizations.DescribeOrganization_1.json b/tests/data/placebo/test_account_org_info/organizations.DescribeOrganization_1.json
new file mode 100644
index 000000000..a4d13e1e5
--- /dev/null
+++ b/tests/data/placebo/test_account_org_info/organizations.DescribeOrganization_1.json
@@ -0,0 +1,20 @@
+{
+    "status_code": 200,
+    "data": {
+        "Organization": {
+            "Id": "o-vjtynx2e3h",
+            "Arn": "arn:aws:organizations::644160558196:organization/o-vjtynx4d1h",
+            "FeatureSet": "ALL",
+            "MasterAccountArn": "arn:aws:organizations::644160558196:account/o-vjtynx4d1h/644160558196",
+            "MasterAccountId": "644160558196",
+            "MasterAccountEmail": "kapilt@gmail.com",
+            "AvailablePolicyTypes": [
+                {
+                    "Type": "SERVICE_CONTROL_POLICY",
+                    "Status": "ENABLED"
+                }
+            ]
+        },
+        "ResponseMetadata": {}
+    }
+}
diff --git a/tests/data/placebo/test_account_org_info_denied/iam.ListAccountAliases_1.json b/tests/data/placebo/test_account_org_info_denied/iam.ListAccountAliases_1.json
new file mode 100644
index 000000000..97b529abe
--- /dev/null
+++ b/tests/data/placebo/test_account_org_info_denied/iam.ListAccountAliases_1.json
@@ -0,0 +1,10 @@
+{
+    "status_code": 200,
+    "data": {
+        "AccountAliases": [
+            "realms-root"
+        ],
+        "IsTruncated": false,
+        "ResponseMetadata": {}
+    }
+}
\ No newline at end of file
diff --git a/tests/data/placebo/test_account_org_info_denied/organizations.DescribeOrganization_1.json b/tests/data/placebo/test_account_org_info_denied/organizations.DescribeOrganization_1.json
new file mode 100644
index 000000000..1ab801caa
--- /dev/null
+++ b/tests/data/placebo/test_account_org_info_denied/organizations.DescribeOrganization_1.json
@@ -0,0 +1,11 @@
+{
+    "status_code": 403,
+    "data": {
+        "Error": {
+            "Message": "not authorized",
+            "Code": "AccessDeniedException"
+        },
+        "ResponseMetadata": {},
+        "message": "not authorized"
+    }
+}
diff --git a/tests/data/placebo/test_account_org_no_org/iam.ListAccountAliases_1.json b/tests/data/placebo/test_account_org_no_org/iam.ListAccountAliases_1.json
new file mode 100644
index 000000000..97b529abe
--- /dev/null
+++ b/tests/data/placebo/test_account_org_no_org/iam.ListAccountAliases_1.json
@@ -0,0 +1,10 @@
+{
+    "status_code": 200,
+    "data": {
+        "AccountAliases": [
+            "realms-root"
+        ],
+        "IsTruncated": false,
+        "ResponseMetadata": {}
+    }
+}
\ No newline at end of file
diff --git a/tests/data/placebo/test_account_org_no_org/organizations.DescribeOrganization_1.json b/tests/data/placebo/test_account_org_no_org/organizations.DescribeOrganization_1.json
new file mode 100644
index 000000000..a84394039
--- /dev/null
+++ b/tests/data/placebo/test_account_org_no_org/organizations.DescribeOrganization_1.json
@@ -0,0 +1,14 @@
+{
+    "status_code": 404, 
+    "data": {
+        "ResponseMetadata": {
+            "HTTPStatusCode": 404, 
+            "HostId": "4tbXPrkIvHzDe7UTWOeiJGxuomJ8SVVvn9cSKQHVTVJdJtVeYDAkwOkd7C0K9k4WtVzvKf1R2iU=", 
+            "RequestId": "29DAAD9315A10452"
+        }, 
+        "Error": {
+            "Message": "dunno", 
+            "Code": "AWSOrganizationsNotInUseException"
+        }
+    }
+}
diff --git a/tests/test_account.py b/tests/test_account.py
index 821a6841c..aec2e7464 100644
--- a/tests/test_account.py
+++ b/tests/test_account.py
@@ -69,6 +69,57 @@ class AccountTests(BaseTest):
         resources = p.run()
         self.assertEqual(len(resources), 1)
 
+    def test_org_no_org(self):
+        factory = self.replay_flight_data(
+            'test_account_org_no_org')
+        p = self.load_policy({
+            'name': 'org-check',
+            'resource': 'aws.account',
+            'filters': [{
+                'type': 'organization',
+                'key': 'Id',
+                'value': 'absent'
+            }]},
+            session_factory=factory
+        )
+        resources = p.run()
+        self.assertEqual(len(resources), 1)
+
+    def test_org_denied(self):
+        factory = self.replay_flight_data(
+            'test_account_org_info_denied')
+        p = self.load_policy({
+            'name': 'org-check',
+            'resource': 'aws.account',
+            'filters': [{
+                'type': 'organization',
+                'key': 'Id',
+                'value': 'absent'
+            }]},
+            session_factory=factory
+        )
+        resources = p.run()
+        self.assertEqual(len(resources), 0)
+
+    def test_org_info(self):
+        factory = self.replay_flight_data(
+            'test_account_org_info')
+        p = self.load_policy({
+            'name': 'org-check',
+            'resource': 'aws.account',
+            'filters': [{
+                'type': 'organization',
+                'key': 'Id',
+                'op': 'not-equal',
+                'value': 'o-xyz'
+            }]},
+            session_factory=factory
+        )
+        resources = p.run()
+
+        self.assertEqual(len(resources), 1)
+        self.assertEqual(resources[0]['c7n:org']['FeatureSet'], 'ALL')
+
     def test_missing(self):
         session_factory = self.replay_flight_data(
             'test_account_missing_resource_ec2')
