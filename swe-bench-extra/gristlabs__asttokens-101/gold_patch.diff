diff --git a/asttokens/astroid_compat.py b/asttokens/astroid_compat.py
new file mode 100644
index 0000000..3ba5e8d
--- /dev/null
+++ b/asttokens/astroid_compat.py
@@ -0,0 +1,14 @@
+try:
+  from astroid import nodes as astroid_node_classes
+
+  # astroid_node_classes should be whichever module has the NodeNG class
+  from astroid.nodes import NodeNG
+except Exception:
+  try:
+    from astroid import node_classes as astroid_node_classes
+    from astroid.node_classes import NodeNG
+  except Exception:  # pragma: no cover
+    astroid_node_classes = None
+    NodeNG = None
+
+__all__ = ["astroid_node_classes", "NodeNG"]
diff --git a/asttokens/mark_tokens.py b/asttokens/mark_tokens.py
index 0f935c0..0aa497f 100644
--- a/asttokens/mark_tokens.py
+++ b/asttokens/mark_tokens.py
@@ -24,12 +24,7 @@ import six
 from . import util
 from .asttokens import ASTTokens
 from .util import AstConstant
-
-try:
-  import astroid.node_classes as nc
-except Exception:
-  # This is only used for type checking, we don't need it if astroid isn't installed.
-  nc = None
+from .astroid_compat import astroid_node_classes as nc
 
 if TYPE_CHECKING:
   from .util import AstNode
@@ -88,6 +83,9 @@ class MarkTokens(object):
     first = token
     last = None
     for child in cast(Callable, self._iter_children)(node):
+      # astroid slices have especially wrong positions, we don't want them to corrupt their parents.
+      if util.is_empty_astroid_slice(child):
+        continue
       if not first or child.first_token.index < first.index:
         first = child.first_token
       if not last or child.last_token.index > last.index:
diff --git a/asttokens/util.py b/asttokens/util.py
index 96fa931..4abc83e 100644
--- a/asttokens/util.py
+++ b/asttokens/util.py
@@ -24,8 +24,9 @@ from typing import Callable, Dict, Iterable, Iterator, List, Optional, Tuple, Un
 
 from six import iteritems
 
+
 if TYPE_CHECKING:  # pragma: no cover
-  from astroid.node_classes import NodeNG
+  from .astroid_compat import NodeNG
 
   # Type class used to expand out the definition of AST to include fields added by this library
   # It's not actually used for anything other than type checking though!
@@ -218,6 +219,15 @@ def is_slice(node):
   )
 
 
+def is_empty_astroid_slice(node):
+  # type: (AstNode) -> bool
+  return (
+      node.__class__.__name__ == "Slice"
+      and not isinstance(node, ast.AST)
+      and node.lower is node.upper is node.step is None
+  )
+
+
 # Sentinel value used by visit_tree().
 _PREVISIT = object()
 
diff --git a/pyproject.toml b/pyproject.toml
index ea6e65f..2543e24 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -20,5 +20,5 @@ disallow_untyped_calls=false
 ignore_missing_imports=true
 
 [[tool.mypy.overrides]]
-module = ["astroid", "astroid.node_classes"]
-ignore_missing_imports = true
\ No newline at end of file
+module = ["astroid", "astroid.node_classes", "astroid.nodes", "astroid.nodes.utils"]
+ignore_missing_imports = true
diff --git a/setup.cfg b/setup.cfg
index a2bde84..f506500 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -39,7 +39,7 @@ install_requires =
 setup_requires = setuptools>=44; setuptools_scm[toml]>=3.4.3
 
 [options.extras_require]
-test = astroid<=2.5.3; pytest
+test = astroid; pytest
 
 [options.package_data]
 asttokens = py.typed
