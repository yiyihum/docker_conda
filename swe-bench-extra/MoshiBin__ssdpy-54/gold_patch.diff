diff --git a/CHANGES.md b/CHANGES.md
index 6617b09..3583296 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,7 @@
 - Fixed an issue where `ssdpy.client.discover()` was using wrong syntax.
 - Changed the exception raised by `ssdpy.compat.if_nametoindex()` to be the same as in Python 3 (OSError).
 - Added tests for `ssdpy.client`, `ssdpy.compat` and created more tests for `ssdpy.server` to increase coverage.
+- Added support for custom fields in NOTIFY. Pass `extra_fields={"field": "value"}` to `ssdpy.SSDPServer` or pass `-e|--extra-field NAME VALUE` to `ssdpy-server`.
 
 ### 0.3.0
 (2020-08-10)
diff --git a/ssdpy/cli/server.py b/ssdpy/cli/server.py
index bbbb22d..b7f280f 100644
--- a/ssdpy/cli/server.py
+++ b/ssdpy/cli/server.py
@@ -11,17 +11,11 @@ logging.basicConfig()
 
 def parse_args(argv):
     parser = argparse.ArgumentParser(description="Start an SSDP server")
-    parser.add_argument(
-        "-V", "--version", action="version", version="%(prog)s {}".format(VERSION)
-    )
+    parser.add_argument("-V", "--version", action="version", version="%(prog)s {}".format(VERSION))
     parser.add_argument("-v", "--verbose", help="Be more verbose", action="store_true")
     proto_group = parser.add_mutually_exclusive_group()
-    proto_group.add_argument(
-        "-4", "--ipv4", help="Listen on IPv4 (default: True)", action="store_true"
-    )
-    proto_group.add_argument(
-        "-6", "--ipv6", help="Listen on IPv6 instead of IPv4", action="store_true"
-    )
+    proto_group.add_argument("-4", "--ipv4", help="Listen on IPv4 (default: True)", action="store_true")
+    proto_group.add_argument("-6", "--ipv6", help="Listen on IPv6 instead of IPv4", action="store_true")
     parser.add_argument("usn", help="Unique server name", nargs=1)
     parser.add_argument(
         "-t",
@@ -52,11 +46,22 @@ def parse_args(argv):
         "--address",
         help="Address of the interface to listen on. Only valid for IPv4.",
     )
+    parser.add_argument(
+        "-e",
+        "--extra-field",
+        action="append",
+        nargs=2,
+        metavar=("NAME", "VALUE"),
+        help="Extra fields to pass in NOTIFY packets. Pass multiple times for multiple extra headers",
+    )
     return parser.parse_args(argv)
 
 
 def main(argv=None):
     args = parse_args(argv)
+    extra_fields = None
+    if args.extra_field is not None:
+        extra_fields = dict(args.extra_field)
 
     if args.ipv6:
         proto = "ipv6"
@@ -76,6 +81,7 @@ def main(argv=None):
         max_age=args.max_age,
         al=args.location,
         location=args.location,
+        extra_fields=extra_fields,
     )
 
     logger = logging.getLogger("ssdpy.server")
diff --git a/ssdpy/protocol.py b/ssdpy/protocol.py
index a3b24e3..4961366 100644
--- a/ssdpy/protocol.py
+++ b/ssdpy/protocol.py
@@ -29,7 +29,7 @@ def create_msearch_payload(host, st, mx=1):
     return data.encode("utf-8")
 
 
-def create_notify_payload(host, nt, usn, location=None, al=None, max_age=None):
+def create_notify_payload(host, nt, usn, location=None, al=None, max_age=None, extra_fields=None):
     """
     Create a NOTIFY packet using the given parameters.
     Returns a bytes object containing a valid NOTIFY request.
@@ -63,6 +63,8 @@ def create_notify_payload(host, nt, usn, location=None, al=None, max_age=None):
     :param max_age: Amount of time in seconds that the NOTIFY packet should be cached by clients receiving it. In UPnP, this header is required.
     :type max_age: int
 
+    :param extra_fields: Extra header fields to send. UPnP SSDP section 1.1.3 allows for extra vendor-specific fields to be sent in the NOTIFY packet. According to the spec, the field names MUST be in the format of `token`.`domain-name`, for example `myheader.philips.com`. SSDPy, however, does not check this. Normally, headers should be in ASCII - but this function does not enforce that.
+
     :return: A bytes object containing the generated NOTIFY payload.
     """
     if max_age is not None and not isinstance(max_age, int):
@@ -80,5 +82,8 @@ def create_notify_payload(host, nt, usn, location=None, al=None, max_age=None):
         data += "AL:{}\r\n".format(al)
     if max_age is not None:
         data += "Cache-Control:max-age={}\r\n".format(max_age)
+    if extra_fields is not None:
+        for field, value in extra_fields.items():
+            data += "{}:{}\r\n".format(field, value)
     data += "\r\n"
     return data.encode("utf-8")
diff --git a/ssdpy/server.py b/ssdpy/server.py
index 1a2f026..28d789d 100644
--- a/ssdpy/server.py
+++ b/ssdpy/server.py
@@ -42,6 +42,8 @@ class SSDPServer(object):
     :type location: str
     :param al: Canonical URL of the service, but only supported in the IETF version of SSDP. Should be the same as ``location``.
     :type al: str
+    :param extra_fields: Extra header fields to send. UPnP SSDP section 1.1.3 allows for extra vendor-specific fields to be sent in the NOTIFY packet. According to the spec, the field names MUST be in the format of `token`.`domain-name`, for example `myheader.philips.com`. SSDPy, however, does not check this and allows any field name - as long as it's ASCII.
+    :type extra_fields: dict
     """
 
     def __init__(
@@ -55,6 +57,7 @@ class SSDPServer(object):
         max_age=None,
         location=None,
         al=None,
+        extra_fields=None,
     ):
         allowed_protos = ("ipv4", "ipv6")
         if proto not in allowed_protos:
@@ -67,6 +70,14 @@ class SSDPServer(object):
         self.max_age = max_age
         self._iface = iface
 
+        self._extra_fields = {}
+        if extra_fields is not None:
+            for field, value in extra_fields.items():
+                try:
+                    self._extra_fields[field.encode("ascii")] = value.encode("ascii")
+                except (UnicodeDecodeError, UnicodeEncodeError):
+                    raise ValueError("Invalid value for extra_field: %s=%s is not ASCII", field, value)
+
         if proto == "ipv4":
             self._af_type = socket.AF_INET
             self._broadcast_ip = ipv4_multicast_ip
@@ -125,7 +136,13 @@ class SSDPServer(object):
             logger.info("Received qualifying M-SEARCH from {}".format(address))
             logger.debug("M-SEARCH data: {}".format(headers))
             notify = create_notify_payload(
-                self._broadcast_ip, self.device_type, self.usn, self.location, self.al, self.max_age,
+                host=self._broadcast_ip,
+                nt=self.device_type,
+                usn=self.usn,
+                location=self.location,
+                al=self.al,
+                max_age=self.max_age,
+                extra_fields=self._extra_fields,
             )
             logger.debug("Created NOTIFY: {}".format(notify))
             try:
