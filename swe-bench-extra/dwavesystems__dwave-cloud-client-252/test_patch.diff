diff --git a/tests/test_mock_submission.py b/tests/test_mock_submission.py
index 2c72d09..7eb3f97 100644
--- a/tests/test_mock_submission.py
+++ b/tests/test_mock_submission.py
@@ -12,7 +12,7 @@ from dateutil.tz import UTC
 from dateutil.parser import parse as parse_datetime
 from requests.structures import CaseInsensitiveDict
 
-from dwave.cloud.utils import evaluate_ising
+from dwave.cloud.utils import evaluate_ising, generate_random_ising_problem
 from dwave.cloud.qpu import Client, Solver
 from dwave.cloud.exceptions import SolverFailureError, CanceledFutureError
 from dwave.cloud.testing import mock
@@ -84,6 +84,14 @@ def error_reply(id_, solver_name, error):
     })
 
 
+def immediate_error_reply(code, msg):
+    """A reply saying an error has occurred (before scheduling for execution)."""
+    return json.dumps({
+        "error_code": code,
+        "error_msg": msg
+    })
+
+
 def cancel_reply(id_, solver_name):
     """A reply saying a problem was canceled."""
     return json.dumps({
@@ -204,6 +212,20 @@ class MockSubmission(_QueryTest):
             with self.assertRaises(SolverFailureError):
                 results.samples
 
+    def test_submit_immediate_error_reply(self):
+        """Handle an (obvious) error on problem submission."""
+        with Client('endpoint', 'token') as client:
+            client.session = mock.Mock()
+            client.session.post = lambda a, _: choose_reply(a, {
+                'endpoint/problems/': '[%s]' % immediate_error_reply(400, "Missing parameter 'num_reads' in problem JSON")})
+            solver = Solver(client, solver_data('abc123'))
+
+            linear, quad = generate_random_ising_problem(solver)
+            results = solver.sample_ising(linear, quad)
+
+            with self.assertRaises(SolverFailureError):
+                results.samples
+
     def test_submit_cancel_reply(self):
         """Handle a response for a canceled job."""
         with Client('endpoint', 'token') as client:
diff --git a/tests/test_solver.py b/tests/test_solver.py
index 957d3b5..15e1a73 100644
--- a/tests/test_solver.py
+++ b/tests/test_solver.py
@@ -40,7 +40,7 @@ class PropertyLoading(unittest.TestCase):
         """Ensure that the parameters are populated."""
         with Client(**config) as client:
             solver = client.get_solver()
-            assert 'not_a_parameter' not in solver.parameters
+            self.assertNotIn('not_a_parameter', solver.parameters)
             with self.assertRaises(KeyError):
                 solver.sample_ising({}, {}, not_a_parameter=True)
 
@@ -48,7 +48,7 @@ class PropertyLoading(unittest.TestCase):
         """Ensure that the experimental parameters are populated."""
         with Client(**config) as client:
             solver = client.get_solver()
-            assert 'x_test' not in solver.parameters
+            self.assertNotIn('x_test', solver.parameters)
             with self.assertRaises(SolverFailureError):
                 self.assertTrue(solver.sample_ising([0], {}, x_test=123).result())
 
