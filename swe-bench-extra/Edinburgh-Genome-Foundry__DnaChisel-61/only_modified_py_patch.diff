diff --git a/dnachisel/Location.py b/dnachisel/Location.py
index 853064f..6a3fdca 100644
--- a/dnachisel/Location.py
+++ b/dnachisel/Location.py
@@ -40,20 +40,25 @@ class Location:
 
     def overlap_region(self, other_location):
         """Return the overlap span between two locations (None if None)."""
-        strand = self.strand
         if other_location.start < self.start:
-            self, other_location = other_location, self
-
-        if other_location.start < self.end:
-            start = other_location.start
-            end = min(self.end, other_location.end)
-            strand = self.strand
-            return Location(start, end, strand)
+            left_location, right_location = other_location, self
         else:
+            left_location, right_location = self, other_location
+
+        if right_location.start >= left_location.end:
             return None
 
+        start = right_location.start
+        end = min(left_location.end, right_location.end)
+        return Location(start, end, self.strand)
+
     def extended(
-        self, extension_length, lower_limit=0, upper_limit=None, left=True, right=True,
+        self,
+        extension_length,
+        lower_limit=0,
+        upper_limit=None,
+        left=True,
+        right=True,
     ):
         """Extend the location of a few basepairs on each side."""
 
@@ -183,5 +188,7 @@ class Location:
         """Return a Biopython SeqFeature with same location and custom
         qualifiers."""
         return SeqFeature(
-            self.to_biopython_location(), type=feature_type, qualifiers=qualifiers,
+            self.to_biopython_location(),
+            type=feature_type,
+            qualifiers=qualifiers,
         )
diff --git a/dnachisel/builtin_specifications/AvoidPattern.py b/dnachisel/builtin_specifications/AvoidPattern.py
index e367e35..28642bd 100644
--- a/dnachisel/builtin_specifications/AvoidPattern.py
+++ b/dnachisel/builtin_specifications/AvoidPattern.py
@@ -38,9 +38,7 @@ class AvoidPattern(Specification):
     priority = 1
     shorthand_name = "no"  # will appear as, for instance, @no(BsmBI_site)
 
-    def __init__(
-        self, pattern=None, location=None, strand="from_location", boost=1.0
-    ):
+    def __init__(self, pattern=None, location=None, strand="from_location", boost=1.0):
         """Initialize."""
         if isinstance(pattern, str):
             pattern = SequencePattern.from_string(pattern)
@@ -72,7 +70,7 @@ class AvoidPattern(Specification):
             return "No %s" % self.pattern.name
         else:
             return "No %s" % self.pattern
-    
+
     def breach_label(self):
         if self.pattern.name is not None:
             return str(self.pattern.name)

