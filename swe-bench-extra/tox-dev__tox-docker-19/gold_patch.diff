diff --git a/README.md b/README.md
index c99702c..efd4f4f 100644
--- a/README.md
+++ b/README.md
@@ -31,17 +31,24 @@ your test suite as it runs, as ordinary environment variables:
         POSTGRES_USER=username
         POSTGRES_DB=dbname
 
-## Port Mapping
+## Host and Port Mapping
 
 tox-docker runs docker with the "publish all ports" option. Any port the
 container exposes will be made available to your test suite via environment
-variables of the form `<image-basename>_<exposed-port>_<proto>`. For
+variables of the form `<image-basename>_<exposed-port>_<protocol>_PORT`. For
 instance, for the postgresql container, there will be an environment
-variable `POSTGRES_5432_TCP` whose value is the ephemeral port number that
-docker has bound the container's port 5432 to.
+variable `POSTGRES_5432_TCP_PORT` whose value is the ephemeral port number
+that docker has bound the container's port 5432 to.
 
 Likewise, exposed UDP ports will have environment variables like
-`TELEGRAF_8092_UDP` whose value is the ephemeral port number that docker has
-bound. NB! Since it's not possible to check whether UDP port is open it's
-just mapping to environment variable without any checks that service up and
-running.
+`TELEGRAF_8092_UDP_PORT` Since it's not possible to check whether UDP port
+is open it's just mapping to environment variable without any checks that
+service up and running.
+
+The host name for each service is also exposed via environment as
+`<image-basename>_HOST`, which is `POSTGRES_HOST` and `TELEGRAF_HOST` for
+the two examples above.
+
+*Deprecation Note:* In older versions of tox-docker, the port was exposed as
+`<image-basename>-<exposed-port>-<protocol>`. This additional environment
+variable is deprecated, but will be supported until tox-docker 2.0.
diff --git a/tox.ini b/tox.ini
index cafee7d..f20bc70 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,11 +1,18 @@
 [tox]
-envlist = py27
+envlist = integration,registry
 
-[testenv]
+[testenv:integration]
 docker =
     nginx:1.13-alpine
-    telegraf:1.8-alpine
+    ksdn117/tcp-udp-test
 dockerenv =
     ENV_VAR=env-var-value
 deps = pytest
 commands = py.test [] test_integration.py
+
+[testenv:registry]
+docker = docker.io/library/nginx:1.13-alpine
+dockerenv =
+    ENV_VAR=env-var-value
+deps = pytest
+commands = py.test [] test_registry.py
diff --git a/tox_docker.py b/tox_docker.py
index a120a61..8095735 100644
--- a/tox_docker.py
+++ b/tox_docker.py
@@ -7,6 +7,28 @@ from docker.errors import ImageNotFound
 import docker as docker_module
 
 
+def escape_env_var(varname):
+    """
+    Convert a string to a form suitable for use as an environment variable.
+
+    The result will be all uppercase, and will have all invalid characters
+    replaced by an underscore.
+
+    The result will match the following regex: [a-zA-Z_][a-zA-Z0-9_]*
+
+    Example:
+        "my.private.registry/cat/image" will become
+        "MY_PRIVATE_REGISTRY_CAT_IMAGE"
+    """
+    varname = list(varname.upper())
+    if not varname[0].isalpha():
+        varname[0] = '_'
+    for i, c in enumerate(varname):
+        if not c.isalnum() and c != '_':
+            varname[i] = '_'
+    return "".join(varname)
+
+
 def _newaction(venv, message):
     try:
         # tox 3.7 and later
@@ -62,20 +84,33 @@ def tox_runtest_pre(venv):
         conf._docker_containers.append(container)
 
         container.reload()
+        gateway_ip = container.attrs["NetworkSettings"]["Gateway"] or "0.0.0.0"
         for containerport, hostports in container.attrs["NetworkSettings"]["Ports"].items():
-            hostport = None
+
             for spec in hostports:
                 if spec["HostIp"] == "0.0.0.0":
                     hostport = spec["HostPort"]
                     break
-
-            if not hostport:
+            else:
                 continue
 
-            envvar = "{}_{}".format(
-                name.upper(),
-                containerport.replace("/", "_").upper(),
-            )
+            envvar = escape_env_var("{}_HOST".format(
+                name,
+            ))
+            venv.envconfig.setenv[envvar] = gateway_ip
+
+            envvar = escape_env_var("{}_{}_PORT".format(
+                name,
+                containerport,
+            ))
+            venv.envconfig.setenv[envvar] = hostport
+
+            # TODO: remove in 2.0
+            _, proto = containerport.split("/")
+            envvar = escape_env_var("{}_{}".format(
+                name,
+                containerport,
+            ))
             venv.envconfig.setenv[envvar] = hostport
 
             _, proto = containerport.split("/")
@@ -88,7 +123,7 @@ def tox_runtest_pre(venv):
             while (time.time() - start) < 30:
                 try:
                     sock = socket.create_connection(
-                        address=("0.0.0.0", int(hostport)),
+                        address=(gateway_ip, int(hostport)),
                         timeout=0.1,
                     )
                 except socket.error:
