diff --git a/tests/config/loader/ini/replace/test_replace_posargs.py b/tests/config/loader/ini/replace/test_replace_posargs.py
index 20f4091f..d2ebed4b 100644
--- a/tests/config/loader/ini/replace/test_replace_posargs.py
+++ b/tests/config/loader/ini/replace/test_replace_posargs.py
@@ -5,23 +5,27 @@ import pytest
 from tests.config.loader.ini.replace.conftest import ReplaceOne
 
 
-def test_replace_pos_args_none_sys_argv(replace_one: ReplaceOne) -> None:
-    result = replace_one("{posargs}", None)
+@pytest.mark.parametrize("syntax", ["{posargs}", "[]"])
+def test_replace_pos_args_none_sys_argv(syntax: str, replace_one: ReplaceOne) -> None:
+    result = replace_one(syntax, None)
     assert result == ""
 
 
-def test_replace_pos_args_empty_sys_argv(replace_one: ReplaceOne) -> None:
-    result = replace_one("{posargs}", [])
+@pytest.mark.parametrize("syntax", ["{posargs}", "[]"])
+def test_replace_pos_args_empty_sys_argv(syntax: str, replace_one: ReplaceOne) -> None:
+    result = replace_one(syntax, [])
     assert result == ""
 
 
-def test_replace_pos_args_extra_sys_argv(replace_one: ReplaceOne) -> None:
-    result = replace_one("{posargs}", [sys.executable, "magic"])
+@pytest.mark.parametrize("syntax", ["{posargs}", "[]"])
+def test_replace_pos_args_extra_sys_argv(syntax: str, replace_one: ReplaceOne) -> None:
+    result = replace_one(syntax, [sys.executable, "magic"])
     assert result == f"{sys.executable} magic"
 
 
-def test_replace_pos_args(replace_one: ReplaceOne) -> None:
-    result = replace_one("{posargs}", ["ok", "what", " yes "])
+@pytest.mark.parametrize("syntax", ["{posargs}", "[]"])
+def test_replace_pos_args(syntax: str, replace_one: ReplaceOne) -> None:
+    result = replace_one(syntax, ["ok", "what", " yes "])
     quote = '"' if sys.platform == "win32" else "'"
     assert result == f"ok what {quote} yes {quote}"
 
@@ -31,8 +35,8 @@ def test_replace_pos_args(replace_one: ReplaceOne) -> None:
     [
         ("magic", "magic"),
         ("magic:colon", "magic:colon"),
-        ("magic\n b:c", "magic\nb:c"),  # unescaped newline keeps the newline
-        ("magi\\\n c:d", "magic:d"),  # escaped newline merges the lines
+        ("magic\n b:c", "magic\nb:c"),  # an unescaped newline keeps the newline
+        ("magi\\\n c:d", "magic:d"),  # an escaped newline merges the lines
         ("\\{a\\}", "{a}"),  # escaped curly braces
     ],
 )
@@ -50,9 +54,24 @@ def test_replace_pos_args_default(replace_one: ReplaceOne, value: str, result: s
         "\\{posargs\\}",
         "{\\{posargs}",
         "{\\{posargs}{}",
+        "\\[]",
+        "[\\]",
+        "\\[\\]",
     ],
 )
 def test_replace_pos_args_escaped(replace_one: ReplaceOne, value: str) -> None:
     result = replace_one(value, None)
-    outcome = value.replace("\\{", "{").replace("\\}", "}")
+    outcome = value.replace("\\", "")
+    assert result == outcome
+
+
+@pytest.mark.parametrize(
+    ("value", "result"),
+    [
+        ("[]-{posargs}", "foo-foo"),
+        ("{posargs}-[]", "foo-foo"),
+    ],
+)
+def test_replace_mixed_brackets_and_braces(replace_one: ReplaceOne, value: str, result: str) -> None:
+    outcome = replace_one(value, ["foo"])
     assert result == outcome
