diff --git a/tests/test_cli.py b/tests/test_cli.py
index c4675fc..8f77fc9 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -198,6 +198,28 @@ class TestSafetyCLI(unittest.TestCase):
         # TODO: Add test for the screen formatter, this only test that the command doesn't crash
         self.assertEqual(result.exit_code, 0)
 
+    @patch("safety.safety.check")
+    def test_check_ignore_format_backward_compatible(self, check):
+        runner = CliRunner()
+
+        check.return_value = []
+
+        dirname = os.path.dirname(__file__)
+        reqs_path = os.path.join(dirname, "reqs_4.txt")
+
+        _ = runner.invoke(cli.cli, ['check', '--file', reqs_path, '--ignore', "123,456", '--ignore', "789"])
+        try:
+            check_call_kwargs = check.call_args[1]  # Python < 3.8
+        except IndexError:
+            check_call_kwargs = check.call_args.kwargs
+
+        ignored_transformed = {
+            '123': {'expires': None, 'reason': ''},
+            '456': {'expires': None, 'reason': ''},
+            '789': {'expires': None, 'reason': ''}
+        }
+        self.assertEqual(check_call_kwargs['ignore_vulns'], ignored_transformed)
+
     def test_validate_with_unsupported_argument(self):
         result = self.runner.invoke(cli.cli, ['validate', 'safety_ci'])
         msg = 'This Safety version only supports "policy_file" validation. "safety_ci" is not supported.\n'
diff --git a/tests/test_safety.py b/tests/test_safety.py
index 28ac318..49d7f2c 100644
--- a/tests/test_safety.py
+++ b/tests/test_safety.py
@@ -60,6 +60,29 @@ class TestSafety(unittest.TestCase):
         )
         self.assertEqual(len(vulns), 2)
 
+    def test_check_ignores(self):
+        reqs = StringIO("Django==1.8.1")
+        packages = util.read_requirements(reqs)
+
+        # Second that ignore works
+        ignored_vulns = {'some id': {'expires': None, 'reason': ''}}
+
+        vulns, _ = safety.check(
+            packages=packages,
+            key=None,
+            db_mirror=os.path.join(
+                os.path.dirname(os.path.realpath(__file__)),
+                "test_db"
+            ),
+            cached=0,
+            ignore_vulns=ignored_vulns,
+            ignore_severity_rules=None,
+            proxy={},
+            telemetry=False
+        )
+        self.assertEqual(len(vulns), 1)
+        self.assertEqual(vulns[0].vulnerability_id, "some other id")
+
     def test_check_from_file_with_hash_pins(self):
         reqs = StringIO(("Django==1.8.1 "
                          "--hash=sha256:c6c7e7a961e2847d050d214ca96dc3167bb5f2b25cd5c6cb2eea96e1717f4ade"))
diff --git a/tests/test_util.py b/tests/test_util.py
index 43cb3cf..8df8286 100644
--- a/tests/test_util.py
+++ b/tests/test_util.py
@@ -7,7 +7,7 @@ from unittest.mock import patch, Mock
 import click as click
 
 from safety import util
-from safety.util import read_requirements, get_processed_options, SafetyPolicyFile
+from safety.util import read_requirements, get_processed_options, SafetyPolicyFile, transform_ignore
 
 
 class ReadRequirementsTestCase(unittest.TestCase):
@@ -122,5 +122,16 @@ class ReadRequirementsTestCase(unittest.TestCase):
         EXPECTED = not security_pf.get('continue-on-vulnerability-error')
         self.assertEqual(exit_code, EXPECTED)
 
-
-
+    def test_transform_ignore(self):
+        ignored_transformed = {'123': {'expires': None, 'reason': ''}, '456': {'expires': None, 'reason': ''}}
+        self.assertEqual(transform_ignore(None, None, value=("123", "456")), ignored_transformed)
+        self.assertEqual(transform_ignore(None, None, value=("123,456",)), ignored_transformed)
+
+    def test_transform_ignore_mixed_arguments(self):
+        # mix old and new way of providing --ignore
+        ignored_transformed = {
+            '123': {'expires': None, 'reason': ''},
+            '456': {'expires': None, 'reason': ''},
+            '789': {'expires': None, 'reason': ''}
+        }
+        self.assertEqual(transform_ignore(None, None, value=("123,456", "789")), ignored_transformed)
