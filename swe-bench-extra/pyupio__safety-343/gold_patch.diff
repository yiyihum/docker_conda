diff --git a/.gitignore b/.gitignore
index c6372ce..6e1aa8a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -66,7 +66,6 @@ target/
 # pyenv python configuration file
 .python-version
 sandbox.py
-<<<<<<< HEAD
 
 # PyCharm
 .idea
@@ -74,4 +73,4 @@ sandbox.py
 
 # Virtual Env
 venv/
-.venv/
\ No newline at end of file
+.venv/
diff --git a/CHANGELOG.md b/CHANGELOG.md
index de7b18c..5b7fafd 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -6,6 +6,7 @@ The format is partly based on [Keep a Changelog](https://keepachangelog.com/en/1
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html) and [PEP 440](https://peps.python.org/pep-0440/)
 
 ## [Unreleased] 2.4.0.dev
+- Add support for coma separated ignore (--ignore=123,456) on top of existing --ignore=123 --ignore=456
 
 ## [2.3.5] - 2022-12-08
 - Pinned packaging dependency to a compatible range.
diff --git a/README.md b/README.md
index 1a98563..a26b2b5 100644
--- a/README.md
+++ b/README.md
@@ -466,6 +466,10 @@ safety check -i 1234
 safety check --ignore=1234
 ```
 ```bash
+safety check -i 1234,4567,89101
+```
+The following is also supported (backward compatibility)
+```bash
 safety check -i 1234 -i 4567 -i 89101
 ```
 
diff --git a/safety/cli.py b/safety/cli.py
index 149fcba..feed6cf 100644
--- a/safety/cli.py
+++ b/safety/cli.py
@@ -113,7 +113,7 @@ def clean_check_command(f):
               mutually_exclusive=["stdin"],
               help="Read input from one (or multiple) requirement files. Default: empty")
 @click.option("--ignore", "-i", multiple=True, type=str, default=[], callback=transform_ignore,
-              help="Ignore one (or multiple) vulnerabilities by ID. Default: empty")
+              help="Ignore one (or multiple) vulnerabilities by ID (coma separated). Default: empty")
 @click.option('--json', default=False, cls=MutuallyExclusiveOption, mutually_exclusive=["output", "bare"],
               with_values={"output": ['screen', 'text', 'bare', 'json'], "bare": [True, False]}, callback=json_alias,
               hidden=True, is_flag=True, show_default=True)
@@ -165,7 +165,6 @@ def check(ctx, key, db, full_report, stdin, files, cache, ignore, output, json,
         ignore_severity_rules = None
         ignore, ignore_severity_rules, exit_code = get_processed_options(policy_file, ignore,
                                                                          ignore_severity_rules, exit_code)
-
         is_env_scan = not stdin and not files
         params = {'stdin': stdin, 'files': files, 'policy_file': policy_file, 'continue_on_error': not exit_code,
                   'ignore_severity_rules': ignore_severity_rules, 'project': project,
diff --git a/safety/util.py b/safety/util.py
index 95403ba..e124909 100644
--- a/safety/util.py
+++ b/safety/util.py
@@ -354,8 +354,15 @@ class DependentOption(click.Option):
 
 
 def transform_ignore(ctx, param, value):
+    ignored_default_dict = {'reason': '', 'expires': None}
     if isinstance(value, tuple):
-        return dict(zip(value, [{'reason': '', 'expires': None} for _ in range(len(value))]))
+        # Following code is required to support the 2 ways of providing 'ignore'
+        # --ignore=1234,567,789
+        # or, the historical way (supported for backward compatibility)
+        # -i 1234 -i 567
+        combined_value = ','.join(value)
+        ignore_ids = {vuln_id.strip() for vuln_id in combined_value.split(',')}
+        return {ignore_id: dict(ignored_default_dict) for ignore_id in ignore_ids}
 
     return {}
 
