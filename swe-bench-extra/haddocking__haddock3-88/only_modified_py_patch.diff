diff --git a/src/haddock/clis/cli.py b/src/haddock/clis/cli.py
index 36932a86..bcb48ac3 100755
--- a/src/haddock/clis/cli.py
+++ b/src/haddock/clis/cli.py
@@ -6,7 +6,8 @@ from argparse import ArgumentTypeError
 from functools import partial
 
 from haddock.version import CURRENT_VERSION
-from haddock.libs.libutil import file_exists, non_negative_int
+from haddock.libs.libutil import file_exists
+from haddock.gear.restart_run import add_restart_arg
 
 
 # Command line interface parser
@@ -22,17 +23,7 @@ ap.add_argument(
     help="The input recipe file path",
     )
 
-_arg_pos_int = partial(
-    non_negative_int,
-    exception=ArgumentTypeError,
-    emsg="Minimum value is 0, {!r} given.",
-    )
-ap.add_argument(
-    "--restart",
-    type=_arg_pos_int,
-    default=0,
-    help="Restart the recipe from this course",
-    )
+add_restart_arg(ap)
 
 ap.add_argument(
     "--setup",
@@ -75,7 +66,7 @@ def maincli():
 
 def main(
         recipe,
-        restart=0,
+        restart=None,
         setup_only=False,
         log_level="INFO",
         ):
@@ -112,7 +103,7 @@ def main(
     logging.info(get_initial_greeting())
 
     try:
-        params, other_params = setup_run(recipe)
+        params, other_params = setup_run(recipe, restart_from=restart)
 
     except ConfigurationError as err:
         logging.error(err)
diff --git a/src/haddock/gear/prepare_run.py b/src/haddock/gear/prepare_run.py
index 2f6ffbb5..5e2e5bf6 100644
--- a/src/haddock/gear/prepare_run.py
+++ b/src/haddock/gear/prepare_run.py
@@ -11,6 +11,7 @@ from haddock import haddock3_source_path
 from haddock.modules import modules_category
 from haddock.error import ConfigurationError
 from haddock.gear.parameters import config_mandatory_general_parameters
+from haddock.gear.restart_run import remove_folders_after_number
 from haddock.libs.libutil import (
     copy_files_to_dir,
     make_list_if_string,
@@ -41,7 +42,7 @@ def with_config_error(func):
     return wrapper
 
 
-def setup_run(workflow_path):
+def setup_run(workflow_path, restart_from=None):
     """
     Setup HADDOCK3 run.
 
@@ -55,6 +56,15 @@ def setup_run(workflow_path):
     #6 : create the needed folders/files to start the run
     #7 : copy additional files to run folder
 
+    Parameters
+    ----------
+    workflow_path : str or pathlib.Path
+        The path to the configuration file.
+
+    erase_previous : bool
+        Whether to erase the previous run folder and reprare from
+        scratch. Defaults to `True`.
+
     Returns
     -------
     tuple of two dicts
@@ -77,12 +87,16 @@ def setup_run(workflow_path):
         )
     validate_modules_params(modules_params)
 
-    # prepares the run folders
-    remove_folder(params['run_dir'])
-    begin_dir, _ = create_begin_files(params)
+    if restart_from is None:
+        # prepares the run folders
+        remove_folder(params['run_dir'])
+        begin_dir, _ = create_begin_files(params)
+
+        # prepare other files
+        copy_ambig_files(modules_params, begin_dir)
 
-    # prepare other files
-    copy_ambig_files(modules_params, begin_dir)
+    else:
+        remove_folders_after_number(params['run_dir'], restart_from)
 
     # return the modules' parameters and other parameters that may serve
     # the workflow, the "other parameters" can be expanded in the future
diff --git a/src/haddock/libs/libutil.py b/src/haddock/libs/libutil.py
index dcd42376..cac05d66 100644
--- a/src/haddock/libs/libutil.py
+++ b/src/haddock/libs/libutil.py
@@ -111,7 +111,7 @@ def parse_ncores(n=None, njobs=None, max_cpus=None):
         raise SetupError(_msg) from err
 
     if n < 1:
-        _msg = "`n` is not positive, this is not possible."
+        _msg = f"`n` is not positive, this is not possible: {n!r}"
         raise SetupError(_msg)
 
     if njobs:
diff --git a/src/haddock/modules/__init__.py b/src/haddock/modules/__init__.py
index 5a5d2529..e7e1ffcf 100644
--- a/src/haddock/modules/__init__.py
+++ b/src/haddock/modules/__init__.py
@@ -102,7 +102,7 @@ class BaseHaddockModule(ABC):
     def previous_path(self):
         previous = sorted(list(self.path.resolve().parent.glob('[0-9][0-9]*/')))
         try:
-            return previous[-2]
+            return previous[self.order - 1]
         except IndexError:
             return self.path
 

