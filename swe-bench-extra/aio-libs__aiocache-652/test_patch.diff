diff --git a/tests/acceptance/test_decorators.py b/tests/acceptance/test_decorators.py
index f5be29b..f9608e5 100644
--- a/tests/acceptance/test_decorators.py
+++ b/tests/acceptance/test_decorators.py
@@ -49,6 +49,31 @@ class TestCached:
         await fn("self", 1, 3)
         assert await cache.exists(build_key(fn, "self", 1, 3)) is True
 
+    @pytest.mark.parametrize("decorator", (cached, cached_stampede))
+    async def test_cached_skip_cache_func(self, cache, decorator):
+        @decorator(skip_cache_func=lambda r: r is None)
+        async def sk_func(x):
+            return x if x > 0 else None
+
+        arg = 1
+        res = await sk_func(arg)
+        assert res
+
+        key = decorator().get_cache_key(sk_func, args=(1,), kwargs={})
+
+        assert key
+        assert await cache.exists(key)
+        assert await cache.get(key) == res
+
+        arg = -1
+
+        await sk_func(arg)
+
+        key = decorator().get_cache_key(sk_func, args=(-1,), kwargs={})
+
+        assert key
+        assert not await cache.exists(key)
+
     async def test_cached_without_namespace(self, cache):
         """Default cache key is created when no namespace is provided"""
         @cached(namespace=None)
@@ -149,6 +174,19 @@ class TestMultiCachedDecorator:
         assert await cache.exists("fn_" + _ensure_key(Keys.KEY) + "_ES") is True
         assert await cache.exists("fn_" + _ensure_key(Keys.KEY_1) + "_ES") is True
 
+    async def test_multi_cached_skip_keys(self, cache):
+        @multi_cached(keys_from_attr="keys", skip_cache_func=lambda _, v: v is None)
+        async def multi_sk_fn(keys, values):
+            return {k: v for k, v in zip(keys, values)}
+
+        res = await multi_sk_fn(keys=[Keys.KEY, Keys.KEY_1], values=[42, None])
+        assert res
+        assert Keys.KEY in res and Keys.KEY_1 in res
+
+        assert await cache.exists(Keys.KEY)
+        assert await cache.get(Keys.KEY) == res[Keys.KEY]
+        assert not await cache.exists(Keys.KEY_1)
+
     async def test_fn_with_args(self, cache):
         @multi_cached("keys")
         async def fn(keys, *args):
