diff --git a/tests/unittests/test_arguments.py b/tests/unittests/test_arguments.py
index 7dc6ce6..4c7bbf9 100644
--- a/tests/unittests/test_arguments.py
+++ b/tests/unittests/test_arguments.py
@@ -22,7 +22,7 @@ class NoArgumentTest(unittest.TestCase):
     @patch.object(sys, "argv", ["next-action"])
     def test_filename(self):
         """ Test that the argument parser returns the default filename if the user doesn't pass one. """
-        self.assertEqual(["todo.txt"], parse_arguments().filenames)
+        self.assertEqual([os.path.expanduser("~/todo.txt")], parse_arguments().filenames)
 
 
 class FilenameTest(unittest.TestCase):
diff --git a/tests/unittests/test_cli.py b/tests/unittests/test_cli.py
index 99da454..0cabed3 100644
--- a/tests/unittests/test_cli.py
+++ b/tests/unittests/test_cli.py
@@ -73,7 +73,7 @@ optional arguments:
   --version             show program's version number and exit
   -f <filename>, --file <filename>
                         filename of todo.txt file to read; can be - to read from standard input; argument can be
-                        repeated to read tasks from multiple todo.txt files (default: ['todo.txt'])
+                        repeated to read tasks from multiple todo.txt files (default: ['~/todo.txt'])
   -n <number>, --number <number>
                         number of next actions to show (default: 1)
   -a, --all             show all next actions (default: False)
diff --git a/tests/unittests/test_pick_action.py b/tests/unittests/test_pick_action.py
index 82cbc42..8fec9cc 100644
--- a/tests/unittests/test_pick_action.py
+++ b/tests/unittests/test_pick_action.py
@@ -145,4 +145,4 @@ class IgnoredTasksTest(unittest.TestCase):
         completed_task1 = todotxt.Task("x Completed")
         completed_task2 = todotxt.Task("x Completed too")
         future_task = todotxt.Task("(A) 9999-01-01 Start preparing for five-digit years")
-        self.assertEqual([], pick_action.next_actions([completed_task1, completed_task2, future_task]))
\ No newline at end of file
+        self.assertEqual([], pick_action.next_actions([completed_task1, completed_task2, future_task]))
