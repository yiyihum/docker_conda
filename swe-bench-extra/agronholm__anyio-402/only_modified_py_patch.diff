diff --git a/src/anyio/_backends/_asyncio.py b/src/anyio/_backends/_asyncio.py
index 4cb5f3b..f2929b4 100644
--- a/src/anyio/_backends/_asyncio.py
+++ b/src/anyio/_backends/_asyncio.py
@@ -946,16 +946,18 @@ class Process(abc.Process):
 async def open_process(command: Union[str, Sequence[str]], *, shell: bool,
                        stdin: int, stdout: int, stderr: int,
                        cwd: Union[str, bytes, PathLike, None] = None,
-                       env: Optional[Mapping[str, str]] = None) -> Process:
+                       env: Optional[Mapping[str, str]] = None,
+                       start_new_session: bool = False) -> Process:
     await checkpoint()
     if shell:
         process = await asyncio.create_subprocess_shell(
             command, stdin=stdin, stdout=stdout,  # type: ignore[arg-type]
-            stderr=stderr, cwd=cwd, env=env,
+            stderr=stderr, cwd=cwd, env=env, start_new_session=start_new_session,
         )
     else:
         process = await asyncio.create_subprocess_exec(*command, stdin=stdin, stdout=stdout,
-                                                       stderr=stderr, cwd=cwd, env=env)
+                                                       stderr=stderr, cwd=cwd, env=env,
+                                                       start_new_session=start_new_session)
 
     stdin_stream = StreamWriterWrapper(process.stdin) if process.stdin else None
     stdout_stream = StreamReaderWrapper(process.stdout) if process.stdout else None
diff --git a/src/anyio/_backends/_trio.py b/src/anyio/_backends/_trio.py
index 34c65a5..440e54f 100644
--- a/src/anyio/_backends/_trio.py
+++ b/src/anyio/_backends/_trio.py
@@ -318,9 +318,11 @@ class Process(abc.Process):
 async def open_process(command: Union[str, Sequence[str]], *, shell: bool,
                        stdin: int, stdout: int, stderr: int,
                        cwd: Union[str, bytes, PathLike, None] = None,
-                       env: Optional[Mapping[str, str]] = None) -> Process:
+                       env: Optional[Mapping[str, str]] = None,
+                       start_new_session: bool = False) -> Process:
     process = await trio_open_process(command, stdin=stdin, stdout=stdout, stderr=stderr,
-                                      shell=shell, cwd=cwd, env=env)
+                                      shell=shell, cwd=cwd, env=env,
+                                      start_new_session=start_new_session)
     stdin_stream = SendStreamWrapper(process.stdin) if process.stdin else None
     stdout_stream = ReceiveStreamWrapper(process.stdout) if process.stdout else None
     stderr_stream = ReceiveStreamWrapper(process.stderr) if process.stderr else None
diff --git a/src/anyio/_core/_subprocesses.py b/src/anyio/_core/_subprocesses.py
index 832184f..f4ae139 100644
--- a/src/anyio/_core/_subprocesses.py
+++ b/src/anyio/_core/_subprocesses.py
@@ -11,7 +11,8 @@ from ._tasks import create_task_group
 async def run_process(command: Union[str, Sequence[str]], *, input: Optional[bytes] = None,
                       stdout: int = PIPE, stderr: int = PIPE, check: bool = True,
                       cwd: Union[str, bytes, 'PathLike[str]', None] = None,
-                      env: Optional[Mapping[str, str]] = None) -> 'CompletedProcess[bytes]':
+                      env: Optional[Mapping[str, str]] = None, start_new_session: bool = False,
+                      ) -> 'CompletedProcess[bytes]':
     """
     Run an external command in a subprocess and wait until it completes.
 
@@ -28,6 +29,8 @@ async def run_process(command: Union[str, Sequence[str]], *, input: Optional[byt
     :param cwd: If not ``None``, change the working directory to this before running the command
     :param env: if not ``None``, this mapping replaces the inherited environment variables from the
         parent process
+    :param start_new_session: if ``true`` the setsid() system call will be made in the child
+        process prior to the execution of the subprocess. (POSIX only)
     :return: an object representing the completed process
     :raises ~subprocess.CalledProcessError: if ``check`` is ``True`` and the process exits with a
         nonzero return code
@@ -41,7 +44,8 @@ async def run_process(command: Union[str, Sequence[str]], *, input: Optional[byt
         stream_contents[index] = buffer.getvalue()
 
     async with await open_process(command, stdin=PIPE if input else DEVNULL, stdout=stdout,
-                                  stderr=stderr, cwd=cwd, env=env) as process:
+                                  stderr=stderr, cwd=cwd, env=env,
+                                  start_new_session=start_new_session) as process:
         stream_contents: List[Optional[bytes]] = [None, None]
         try:
             async with create_task_group() as tg:
@@ -68,7 +72,8 @@ async def run_process(command: Union[str, Sequence[str]], *, input: Optional[byt
 async def open_process(command: Union[str, Sequence[str]], *, stdin: int = PIPE,
                        stdout: int = PIPE, stderr: int = PIPE,
                        cwd: Union[str, bytes, 'PathLike[str]', None] = None,
-                       env: Optional[Mapping[str, str]] = None) -> Process:
+                       env: Optional[Mapping[str, str]] = None,
+                       start_new_session: bool = False) -> Process:
     """
     Start an external command in a subprocess.
 
@@ -83,9 +88,12 @@ async def open_process(command: Union[str, Sequence[str]], *, stdin: int = PIPE,
     :param cwd: If not ``None``, the working directory is changed before executing
     :param env: If env is not ``None``, it must be a mapping that defines the environment
         variables for the new process
+    :param start_new_session: if ``true`` the setsid() system call will be made in the child
+        process prior to the execution of the subprocess. (POSIX only)
     :return: an asynchronous process object
 
     """
     shell = isinstance(command, str)
     return await get_asynclib().open_process(command, shell=shell, stdin=stdin, stdout=stdout,
-                                             stderr=stderr, cwd=cwd, env=env)
+                                             stderr=stderr, cwd=cwd, env=env,
+                                             start_new_session=start_new_session)

