diff --git a/src/spdx/model/package.py b/src/spdx/model/package.py
index bbeff65..0a62170 100644
--- a/src/spdx/model/package.py
+++ b/src/spdx/model/package.py
@@ -11,7 +11,7 @@
 from dataclasses import field
 from datetime import datetime
 from enum import Enum, auto
-from typing import Optional, Union, List
+from typing import Optional, Union, List, Dict
 
 from spdx.model.actor import Actor
 from spdx.model.checksum import Checksum
@@ -54,6 +54,13 @@ class ExternalPackageRefCategory(Enum):
     OTHER = auto()
 
 
+CATEGORY_TO_EXTERNAL_PACKAGE_REF_TYPES: Dict[ExternalPackageRefCategory, List[str]] = {
+    ExternalPackageRefCategory.SECURITY : ["cpe22Type", "cpe23Type", "advisory", "fix", "url", "swid"],
+    ExternalPackageRefCategory.PACKAGE_MANAGER : ["maven-central", "npm", "nuget", "bower", "purl"],
+    ExternalPackageRefCategory.PERSISTENT_ID : ["swh", "gitoid"]
+}
+
+
 @dataclass_with_properties
 class ExternalPackageRef:
     category: ExternalPackageRefCategory
diff --git a/src/spdx/validation/external_package_ref_validator.py b/src/spdx/validation/external_package_ref_validator.py
index 10ff0ee..7be94f6 100644
--- a/src/spdx/validation/external_package_ref_validator.py
+++ b/src/spdx/validation/external_package_ref_validator.py
@@ -8,11 +8,34 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
+import re
+from typing import List, Dict
 
-from typing import List
+from spdx.model.package import ExternalPackageRef, ExternalPackageRefCategory, CATEGORY_TO_EXTERNAL_PACKAGE_REF_TYPES
+from spdx.validation.uri_validators import validate_url, validate_uri
+from spdx.validation.validation_message import ValidationMessage, ValidationContext, SpdxElementType
 
-from spdx.model.package import ExternalPackageRef
-from spdx.validation.validation_message import ValidationMessage
+CPE22TYPE_REGEX = r'^c[pP][eE]:/[AHOaho]?(:[A-Za-z0-9._\-~%]*){0,6}$'
+CPE23TYPE_REGEX = r'^cpe:2\.3:[aho\*\-](:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&\'\(\)\+,\/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[\*\-]))(:(((\?*|\*?)([a-zA-Z0-9\-\._]|(\\[\\\*\?!"#$$%&\'\(\)\+,\/:;<=>@\[\]\^`\{\|}~]))+(\?*|\*?))|[\*\-])){4}$'
+MAVEN_CENTRAL_REGEX = r'^[^:]+:[^:]+(:[^:]+)?$'
+NPM_REGEX = r'^[^@]+@[^@]+$'
+NUGET_REGEX = r'^[^/]+/[^/]+$'
+BOWER_REGEX = r'^[^#]+#[^#]+$'
+PURL_REGEX = r'^pkg:.+(\/.+)?\/.+(@.+)?(\?.+)?(#.+)?$'
+SWH_REGEX = r'^swh:1:(snp|rel|rev|dir|cnt):[0-9a-fA-F]{40}$'
+GITOID_REGEX = r'^gitoid:(blob|tree|commit|tag):(sha1:[0-9a-fA-F]{40}|sha256:[0-9a-fA-F]{64})$'
+
+TYPE_TO_REGEX: Dict[str, str] = {
+    "cpe22Type": CPE22TYPE_REGEX,
+    "cpe23Type": CPE23TYPE_REGEX,
+    "maven-central": MAVEN_CENTRAL_REGEX,
+    "npm": NPM_REGEX,
+    "nuget": NUGET_REGEX,
+    "bower": BOWER_REGEX,
+    "purl": PURL_REGEX,
+    "swh": SWH_REGEX,
+    "gitoid": GITOID_REGEX
+}
 
 
 def validate_external_package_refs(external_package_refs: List[ExternalPackageRef], parent_id: str) -> List[
@@ -25,5 +48,47 @@ def validate_external_package_refs(external_package_refs: List[ExternalPackageRe
 
 
 def validate_external_package_ref(external_package_ref: ExternalPackageRef, parent_id: str) -> List[ValidationMessage]:
-    # TODO: https://github.com/spdx/tools-python/issues/373
+    context = ValidationContext(parent_id=parent_id, element_type=SpdxElementType.EXTERNAL_PACKAGE_REF,
+                                full_element=external_package_ref)
+
+    category = external_package_ref.category
+    locator = external_package_ref.locator
+    reference_type = external_package_ref.reference_type
+
+    if category == ExternalPackageRefCategory.OTHER:
+        if " " in locator:
+            return [ValidationMessage(
+                f"externalPackageRef locator in category OTHER must contain no spaces, but is: {locator}",
+                context)]
+        return []
+
+    if reference_type not in CATEGORY_TO_EXTERNAL_PACKAGE_REF_TYPES[category]:
+        return [ValidationMessage(
+            f"externalPackageRef type in category {category.name} must be one of {CATEGORY_TO_EXTERNAL_PACKAGE_REF_TYPES[category]}, but is: {reference_type}",
+            context)]
+
+    if reference_type in ["advisory", "fix", "url"]:
+        if validate_url(locator):
+            return [ValidationMessage(
+                f'externalPackageRef locator of type "{reference_type}" must be a valid URL, but is: {locator}',
+                context)]
+        return []
+
+    if reference_type == "swid":
+        if validate_uri(locator) or not locator.startswith("swid"):
+            return [ValidationMessage(
+                f'externalPackageRef locator of type "swid" must be a valid URI with scheme swid, but is: {locator}',
+                context)]
+        return []
+
+    return validate_against_regex(locator, reference_type, context)
+
+
+def validate_against_regex(string_to_validate: str, reference_type: str, context: ValidationContext) -> List[
+    ValidationMessage]:
+    regex = TYPE_TO_REGEX[reference_type]
+    if not re.match(regex, string_to_validate):
+        return [ValidationMessage(
+            f'externalPackageRef locator of type "{reference_type}" must conform with the regex {regex}, but is: {string_to_validate}',
+            context)]
     return []
