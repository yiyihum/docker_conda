diff --git a/CHANGELOG.md b/CHANGELOG.md
index b472cb2..2bc541d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,6 +4,10 @@ All notable changes to this project will be documented in this file.
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+## [Unreleased]
+### Fixed
+- Error in calling a dynamic stub endpoint
+
 ## [2.3.0] - 2019-03-25
 ### Added
 - `pytest.ini` for `pytest` configuration
diff --git a/apiron/client.py b/apiron/client.py
index d0259fd..227b031 100644
--- a/apiron/client.py
+++ b/apiron/client.py
@@ -210,7 +210,7 @@ class ServiceCaller:
                 'Stub call for endpoint defined by {}'
                 .format(getattr(endpoint, 'endpoint_params', {}))
             )
-            if hasattr(endpoint.stub_response, '__call__'):
+            if callable(endpoint.stub_response):
                 return endpoint.stub_response(
                     method=method or endpoint.default_method,
                     path_kwargs=path_kwargs,
diff --git a/apiron/endpoint/stub.py b/apiron/endpoint/stub.py
index 89239c0..85fe5fa 100644
--- a/apiron/endpoint/stub.py
+++ b/apiron/endpoint/stub.py
@@ -1,4 +1,7 @@
-class StubEndpoint:
+from apiron.endpoint.endpoint import Endpoint
+
+
+class StubEndpoint(Endpoint):
     """
     A stub endpoint designed to return a pre-baked response
 
@@ -16,16 +19,15 @@ class StubEndpoint:
             Example of a response-determining function::
 
                 def stub_response(**kwargs):
-                    response_map = {
-                        'param_value': {'stub response': 'for param_key=param_value'},
-                        'default': {'default': 'response'},
-                    }
-                    data_key = kwargs['params'].setdefault('param_key', 'default')
-                    return response_map[data_key]
+                    if kwargs.get('params') and kwargs['params'].get('param_key') == 'param_value':
+                        return {'stub response': 'for param_key=param_value'}
+                    else:
+                        return {'default': 'response'}
 
         :param ``**kwargs``:
             Arbitrary parameters that can match the intended real endpoint.
             These don't do anything for the stub but streamline the interface.
         """
-        self.endpoint_params = kwargs if kwargs else {}
+        self.endpoint_params = kwargs or {}
         self.stub_response = stub_response or 'stub for {}'.format(self.endpoint_params)
+        super().__init__(**kwargs)
