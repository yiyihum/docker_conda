diff --git a/gabbi/tests/test_driver.py b/gabbi/tests/test_driver.py
index 0b2ce0a..8f6bca0 100644
--- a/gabbi/tests/test_driver.py
+++ b/gabbi/tests/test_driver.py
@@ -70,3 +70,20 @@ class DriverTest(unittest.TestCase):
         first_test = suite._tests[0]._tests[0]
         full_url = first_test._parse_url(first_test.test_data['url'])
         self.assertEqual('http://localhost:8001/', full_url)
+
+    def test_build_url_target(self):
+        suite = driver.build_tests(self.test_dir, self.loader,
+                                   host='localhost', port='999',
+                                   url='https://example.com:1024/theend')
+        first_test = suite._tests[0]._tests[0]
+        full_url = first_test._parse_url(first_test.test_data['url'])
+        self.assertEqual('https://example.com:1024/theend/', full_url)
+
+    def test_build_url_target_forced_ssl(self):
+        suite = driver.build_tests(self.test_dir, self.loader,
+                                   host='localhost', port='999',
+                                   url='http://example.com:1024/theend',
+                                   require_ssl=True)
+        first_test = suite._tests[0]._tests[0]
+        full_url = first_test._parse_url(first_test.test_data['url'])
+        self.assertEqual('https://example.com:1024/theend/', full_url)
diff --git a/gabbi/tests/test_runner.py b/gabbi/tests/test_runner.py
index 3c132b1..a854cf9 100644
--- a/gabbi/tests/test_runner.py
+++ b/gabbi/tests/test_runner.py
@@ -229,93 +229,6 @@ class RunnerTest(unittest.TestCase):
         self._stderr.write(sys.stderr.read())
 
 
-class RunnerHostArgParse(unittest.TestCase):
-
-    def _test_hostport(self, url_or_host, expected_host,
-                       provided_prefix=None, expected_port=None,
-                       expected_prefix=None, expected_ssl=False):
-        host, port, prefix, ssl = runner.process_target_args(
-            url_or_host, provided_prefix)
-
-        # normalize hosts, they are case insensitive
-        self.assertEqual(expected_host.lower(), host.lower())
-        # port can be a string or int depending on the inputs
-        self.assertEqual(expected_port, port)
-        self.assertEqual(expected_prefix, prefix)
-        self.assertEqual(expected_ssl, ssl)
-
-    def test_plain_url_no_port(self):
-        self._test_hostport('http://foobar.com/news',
-                            'foobar.com',
-                            expected_port=None,
-                            expected_prefix='/news')
-
-    def test_plain_url_with_port(self):
-        self._test_hostport('http://foobar.com:80/news',
-                            'foobar.com',
-                            expected_port=80,
-                            expected_prefix='/news')
-
-    def test_ssl_url(self):
-        self._test_hostport('https://foobar.com/news',
-                            'foobar.com',
-                            expected_prefix='/news',
-                            expected_ssl=True)
-
-    def test_ssl_port80_url(self):
-        self._test_hostport('https://foobar.com:80/news',
-                            'foobar.com',
-                            expected_prefix='/news',
-                            expected_port=80,
-                            expected_ssl=True)
-
-    def test_ssl_port_url(self):
-        self._test_hostport('https://foobar.com:999/news',
-                            'foobar.com',
-                            expected_prefix='/news',
-                            expected_port=999,
-                            expected_ssl=True)
-
-    def test_simple_hostport(self):
-        self._test_hostport('foobar.com:999',
-                            'foobar.com',
-                            expected_port='999')
-
-    def test_simple_hostport_with_prefix(self):
-        self._test_hostport('foobar.com:999',
-                            'foobar.com',
-                            provided_prefix='/news',
-                            expected_port='999',
-                            expected_prefix='/news')
-
-    def test_ipv6_url_long(self):
-        self._test_hostport(
-            'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:999/news',
-            'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210',
-            expected_port=999,
-            expected_prefix='/news')
-
-    def test_ipv6_url_localhost(self):
-        self._test_hostport(
-            'http://[::1]:999/news',
-            '::1',
-            expected_port=999,
-            expected_prefix='/news')
-
-    def test_ipv6_host_localhost(self):
-        # If a user wants to use the hostport form, then they need
-        # to hack it with the brackets.
-        self._test_hostport(
-            '[::1]',
-            '::1')
-
-    def test_ipv6_hostport_localhost(self):
-        self._test_hostport(
-            '[::1]:999',
-            '::1',
-            expected_port='999')
-
-
 class HTMLResponseHandler(handlers.ResponseHandler):
 
     test_key_suffix = 'html'
diff --git a/gabbi/tests/test_utils.py b/gabbi/tests/test_utils.py
index 1754dad..d5b8b50 100644
--- a/gabbi/tests/test_utils.py
+++ b/gabbi/tests/test_utils.py
@@ -158,3 +158,90 @@ class CreateURLTest(unittest.TestCase):
             '/foo', 'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210', port=999)
         self.assertEqual(
             'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:999/foo', url)
+
+
+class UtilsHostInfoFromTarget(unittest.TestCase):
+
+    def _test_hostport(self, url_or_host, expected_host,
+                       provided_prefix=None, expected_port=None,
+                       expected_prefix=None, expected_ssl=False):
+        host, port, prefix, ssl = utils.host_info_from_target(
+            url_or_host, provided_prefix)
+
+        # normalize hosts, they are case insensitive
+        self.assertEqual(expected_host.lower(), host.lower())
+        # port can be a string or int depending on the inputs
+        self.assertEqual(expected_port, port)
+        self.assertEqual(expected_prefix, prefix)
+        self.assertEqual(expected_ssl, ssl)
+
+    def test_plain_url_no_port(self):
+        self._test_hostport('http://foobar.com/news',
+                            'foobar.com',
+                            expected_port=None,
+                            expected_prefix='/news')
+
+    def test_plain_url_with_port(self):
+        self._test_hostport('http://foobar.com:80/news',
+                            'foobar.com',
+                            expected_port=80,
+                            expected_prefix='/news')
+
+    def test_ssl_url(self):
+        self._test_hostport('https://foobar.com/news',
+                            'foobar.com',
+                            expected_prefix='/news',
+                            expected_ssl=True)
+
+    def test_ssl_port80_url(self):
+        self._test_hostport('https://foobar.com:80/news',
+                            'foobar.com',
+                            expected_prefix='/news',
+                            expected_port=80,
+                            expected_ssl=True)
+
+    def test_ssl_port_url(self):
+        self._test_hostport('https://foobar.com:999/news',
+                            'foobar.com',
+                            expected_prefix='/news',
+                            expected_port=999,
+                            expected_ssl=True)
+
+    def test_simple_hostport(self):
+        self._test_hostport('foobar.com:999',
+                            'foobar.com',
+                            expected_port='999')
+
+    def test_simple_hostport_with_prefix(self):
+        self._test_hostport('foobar.com:999',
+                            'foobar.com',
+                            provided_prefix='/news',
+                            expected_port='999',
+                            expected_prefix='/news')
+
+    def test_ipv6_url_long(self):
+        self._test_hostport(
+            'http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:999/news',
+            'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210',
+            expected_port=999,
+            expected_prefix='/news')
+
+    def test_ipv6_url_localhost(self):
+        self._test_hostport(
+            'http://[::1]:999/news',
+            '::1',
+            expected_port=999,
+            expected_prefix='/news')
+
+    def test_ipv6_host_localhost(self):
+        # If a user wants to use the hostport form, then they need
+        # to hack it with the brackets.
+        self._test_hostport(
+            '[::1]',
+            '::1')
+
+    def test_ipv6_hostport_localhost(self):
+        self._test_hostport(
+            '[::1]:999',
+            '::1',
+            expected_port='999')
