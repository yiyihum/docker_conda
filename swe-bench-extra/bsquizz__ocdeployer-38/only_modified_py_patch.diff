diff --git a/ocdeployer/env.py b/ocdeployer/env.py
index 7ef3e7a..c644e9a 100644
--- a/ocdeployer/env.py
+++ b/ocdeployer/env.py
@@ -277,15 +277,12 @@ class LegacyEnvConfigHandler(EnvConfigHandler):
     def _get_env_name(file_path):
         return os.path.splitext(os.path.basename(file_path))[0]
 
-    def __init__(self, env_files):
+    def __init__(self, env_files, env_dir_name="env"):
         self.env_files = env_files
-        self._last_service_set = None
         _env_names = [self._get_env_name(fp) for fp in self.env_files]
-        self.env_names = _dedupe_preserve_order(_env_names)
-        if len(_env_names) != len(self.env_names):
-            log.warning("Duplicate env names provided: %s", _env_names)
+        super().__init__(_env_names, env_dir_name)
 
-    def _load_vars_per_env(self):
+    def _load_vars_per_env(self, path=None):
         data = {}
 
         for file_path in self.env_files:
diff --git a/ocdeployer/templates.py b/ocdeployer/templates.py
index 005fea1..4560693 100644
--- a/ocdeployer/templates.py
+++ b/ocdeployer/templates.py
@@ -160,6 +160,17 @@ class Template(object):
         with open(self.path, "r") as f:
             return self._jinja_safe(f.read())
 
+    @staticmethod
+    def _format_oc_parameter(param_value):
+        """
+        Hack around yaml dump behaviour for different datatypes
+        Examples:
+            yaml.dump(True) -> 'true\n...\n'
+            yaml.dump('True') -> "'True'\n"
+            yaml.dump('123') -> "'123'\n"
+        """
+        return yaml.dump(param_value).replace("\n...\n", "").strip()
+
     def _process_via_oc(self, content, parameters=None, label=None):
         """
         Run 'oc process' on the template and update content with the processed output
@@ -176,10 +187,11 @@ class Template(object):
         if not parameters:
             parameters = {}
 
-        # Create set of param strings to pass into 'oc process'
         params_and_vals = {}
         for param_name, param_value in parameters.items():
-            params_and_vals[param_name] = "{}={}".format(param_name, param_value)
+            params_and_vals[param_name] = "{}={}".format(
+                param_name, self._format_oc_parameter(param_value)
+            )
 
         extra_args = []
         # Only insert the parameter if it was defined in the template
