diff --git a/tests/test_ast_language.py b/tests/test_ast_language.py
index 68aa6f8..fc2900d 100644
--- a/tests/test_ast_language.py
+++ b/tests/test_ast_language.py
@@ -230,3 +230,10 @@ def test_CrossJoin():
     crossjoin_node = CrossJoin(first=unwrap_ast(ast.parse('left')),
                                second=unwrap_ast(ast.parse('right')))
     assert_equivalent_python_ast_and_text_ast(wrap_ast(crossjoin_node), '(CrossJoin left right)')
+
+
+def test_Choose():
+    choose_node = Choose(source=unwrap_ast(ast.parse('data_source')),
+                         n=unwrap_ast(ast.parse('2')))
+    assert_equivalent_python_ast_and_text_ast(wrap_ast(choose_node),
+                                              '(Choose data_source 2)')
diff --git a/tests/test_linq_util.py b/tests/test_linq_util.py
index a4576d2..d363e29 100644
--- a/tests/test_linq_util.py
+++ b/tests/test_linq_util.py
@@ -300,3 +300,24 @@ def test_crossjoin_composite():
 def test_crossjoin_bad():
     with pytest.raises(SyntaxError):
         insert_linq_nodes(ast.parse('left.CrossJoin()'))
+
+
+def test_choose():
+    initial_ast = ast.parse("the_source.Choose(2)")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(Choose(source=unwrap_ast(ast.parse('the_source')),
+                                   n=unwrap_ast(ast.parse('2'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_choose_composite():
+    initial_ast = ast.parse("the_source.First().Choose(2)")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(Choose(source=First(source=unwrap_ast(ast.parse('the_source'))),
+                                   n=unwrap_ast(ast.parse('2'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_choose_bad():
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.Choose()'))
