diff --git a/README.md b/README.md
index cbf062f..4b09741 100644
--- a/README.md
+++ b/README.md
@@ -79,6 +79,8 @@ All defined s-expressions are listed here, though this specification will be exp
   - OrderBy: `(OrderBy <source> <key_selector>)`
     - `key_selector` must be a `lambda` with one argument
   - CrossJoin: `(CrossJoin <first> <second>)`
+  - Choose: `(Choose <source> <n>)`
+    - `n` must be an integer
 
 
 ## Example
diff --git a/qastle/linq_util.py b/qastle/linq_util.py
index 9fb9251..017dcb5 100644
--- a/qastle/linq_util.py
+++ b/qastle/linq_util.py
@@ -82,6 +82,13 @@ class CrossJoin(ast.AST):
         self.second = second
 
 
+class Choose(ast.AST):
+    def __init__(self, source, n):
+        self._fields = ['source', 'n']
+        self.source = source
+        self.n = n
+
+
 linq_operator_names = ('Where',
                        'Select',
                        'SelectMany',
@@ -93,7 +100,8 @@ linq_operator_names = ('Where',
                        'Sum',
                        'Zip',
                        'OrderBy',
-                       'CrossJoin')
+                       'CrossJoin',
+                       'Choose')
 
 
 class InsertLINQNodesTransformer(ast.NodeTransformer):
@@ -191,6 +199,10 @@ class InsertLINQNodesTransformer(ast.NodeTransformer):
                 raise SyntaxError('CrossJoin() call must have exactly one argument')
             return CrossJoin(first=self.visit(source),
                              second=self.visit(args[0]))
+        elif function_name == 'Choose':
+            if len(args) != 1:
+                raise SyntaxError('Choose() call must have exactly one argument')
+            return Choose(source=self.visit(source), n=self.visit(args[0]))
         else:
             raise NameError('Unhandled LINQ operator: ' + function_name)
 
diff --git a/qastle/transform.py b/qastle/transform.py
index fe9a820..2026c8e 100644
--- a/qastle/transform.py
+++ b/qastle/transform.py
@@ -1,5 +1,5 @@
 from .linq_util import (Where, Select, SelectMany, First, Aggregate, Count, Max,
-                        Min, Sum, Zip, OrderBy, CrossJoin)
+                        Min, Sum, Zip, OrderBy, CrossJoin, Choose)
 from .ast_util import wrap_ast, unwrap_ast
 
 import lark
@@ -214,6 +214,11 @@ class PythonASTToTextASTTransformer(ast.NodeVisitor):
                                                self.visit(node.first),
                                                self.visit(node.second))
 
+    def visit_Choose(self, node):
+        return self.make_composite_node_string('Choose',
+                                               self.visit(node.source),
+                                               self.visit(node.n))
+
     def generic_visit(self, node):
         raise SyntaxError('Unsupported node type: ' + str(type(node)))
 
@@ -465,5 +470,10 @@ class TextASTToPythonASTTransformer(lark.Transformer):
                 raise SyntaxError('CrossJoin node must have two fields; found ' + str(len(fields)))
             return CrossJoin(first=fields[0], second=fields[1])
 
+        elif node_type == 'Choose':
+            if len(fields) != 2:
+                raise SyntaxError('Choose node must have two fields; found ' + str(len(fields)))
+            return Choose(source=fields[0], n=fields[1])
+
         else:
             raise SyntaxError('Unknown composite node type: ' + node_type)
