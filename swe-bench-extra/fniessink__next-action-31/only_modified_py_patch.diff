diff --git a/next_action/arguments.py b/next_action/arguments.py
index 51249fc..ec87cb1 100644
--- a/next_action/arguments.py
+++ b/next_action/arguments.py
@@ -3,6 +3,7 @@
 import argparse
 import os
 import shutil
+import sys
 from typing import Any, Sequence, Union
 
 import next_action
@@ -17,12 +18,12 @@ class ContextProjectAction(argparse.Action):  # pylint: disable=too-few-public-m
         contexts = []
         projects = []
         for value in values:
-            if self.__is_valid("Context", "@", value, parser):
+            if self.__is_valid("context", "@", value, parser):
                 contexts.append(value.strip("@"))
-            elif self.__is_valid("Project", "+", value, parser):
+            elif self.__is_valid("project", "+", value, parser):
                 projects.append(value.strip("+"))
             else:
-                parser.error("Unrecognized argument '{0}'.".format(value))
+                parser.error("unrecognized argument: {0}".format(value))
         if namespace.contexts is None:
             namespace.contexts = contexts
         if namespace.projects is None:
@@ -35,7 +36,7 @@ class ContextProjectAction(argparse.Action):  # pylint: disable=too-few-public-m
             if len(value) > 1:
                 return True
             else:
-                parser.error("{0} name cannot be empty.".format(argument_type.capitalize()))
+                parser.error("{0} name cannot be empty".format(argument_type))
         return False
 
 
@@ -48,9 +49,14 @@ def parse_arguments() -> argparse.Namespace:
                                      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
     parser.add_argument("--version", action="version", version="%(prog)s {0}".format(next_action.__version__))
     parser.add_argument("-f", "--file", help="filename of the todo.txt file to read", type=str, default="todo.txt")
-    parser.add_argument("-n", "--number", metavar="N", help="number of next actions to show", type=int, default=1)
+    group = parser.add_mutually_exclusive_group()
+    group.add_argument("-n", "--number", metavar="N", help="number of next actions to show", type=int, default=1)
+    group.add_argument("-a", "--all", help="show all next actions", action="store_true")
     parser.add_argument("contexts", metavar="@CONTEXT", help="show the next action in the specified contexts",
                         nargs="*", type=str, default=None, action=ContextProjectAction)
     parser.add_argument("projects", metavar="+PROJECT", help="show the next action for the specified projects",
                         nargs="*", type=str, default=None, action=ContextProjectAction)
-    return parser.parse_args()
+    namespace = parser.parse_args()
+    if namespace.all:
+        namespace.number = sys.maxsize
+    return namespace

