diff --git a/tests/unittests/test_arguments.py b/tests/unittests/test_arguments.py
index 25d20ee..6fa5f60 100644
--- a/tests/unittests/test_arguments.py
+++ b/tests/unittests/test_arguments.py
@@ -11,7 +11,7 @@ from next_action.arguments import parse_arguments
 class ArgumentParserTest(unittest.TestCase):
     """ Unit tests for the argument parses. """
 
-    usage_message = "usage: next-action [-h] [--version] [-f FILE] [-n N] [@CONTEXT [@CONTEXT ...]] " \
+    usage_message = "usage: next-action [-h] [--version] [-f FILE] [-n N | -a] [@CONTEXT [@CONTEXT ...]] " \
                     "[+PROJECT [+PROJECT ...]]\n"
 
     @patch.object(sys, "argv", ["next-action"])
@@ -50,7 +50,7 @@ class ArgumentParserTest(unittest.TestCase):
         """ Test that the argument parser exits if the context is empty. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, parse_arguments)
-        self.assertEqual([call(self.usage_message), call("next-action: error: Context name cannot be empty.\n")],
+        self.assertEqual([call(self.usage_message), call("next-action: error: context name cannot be empty\n")],
                          mock_stderr_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "+DogHouse"])
@@ -69,7 +69,7 @@ class ArgumentParserTest(unittest.TestCase):
         """ Test that the argument parser exits if the project is empty. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, parse_arguments)
-        self.assertEqual([call(self.usage_message), call("next-action: error: Project name cannot be empty.\n")],
+        self.assertEqual([call(self.usage_message), call("next-action: error: project name cannot be empty\n")],
                          mock_stderr_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "+DogHouse", "@home", "+PaintHouse", "@weekend"])
@@ -84,7 +84,7 @@ class ArgumentParserTest(unittest.TestCase):
         """ Test that the argument parser exits if the option is faulty. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, parse_arguments)
-        self.assertEqual([call(self.usage_message), call("next-action: error: Unrecognized argument 'home'.\n")],
+        self.assertEqual([call(self.usage_message), call("next-action: error: unrecognized argument: home\n")],
                          mock_stderr_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action"])
@@ -106,3 +106,19 @@ class ArgumentParserTest(unittest.TestCase):
         self.assertEqual([call(self.usage_message),
                           call("next-action: error: argument -n/--number: invalid int value: 'not_a_number'\n")],
                          mock_stderr_write.call_args_list)
+
+    @patch.object(sys, "argv", ["next-action", "--all"])
+    def test_all_actions(self):
+        """ Test that --all option also sets the number of actions to show to a very big number. """
+        self.assertTrue(parse_arguments().all)
+        self.assertEqual(sys.maxsize, parse_arguments().number)
+
+    @patch.object(sys, "argv", ["next-action", "--all", "--number", "3"])
+    @patch.object(sys.stderr, "write")
+    def test_all_and_number(self, mock_stderr_write):
+        """ Test that the argument parser exits if the both --all and --number are used. """
+        os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
+        self.assertRaises(SystemExit, parse_arguments)
+        self.assertEqual([call(self.usage_message),
+                          call("next-action: error: argument -n/--number: not allowed with argument -a/--all\n")],
+                         mock_stderr_write.call_args_list)
diff --git a/tests/unittests/test_cli.py b/tests/unittests/test_cli.py
index 8f8e68f..1b80920 100644
--- a/tests/unittests/test_cli.py
+++ b/tests/unittests/test_cli.py
@@ -59,7 +59,7 @@ class CLITest(unittest.TestCase):
         """ Test the help message. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, next_action)
-        self.assertEqual(call("""usage: next-action [-h] [--version] [-f FILE] [-n N] [@CONTEXT [@CONTEXT ...]] \
+        self.assertEqual(call("""usage: next-action [-h] [--version] [-f FILE] [-n N | -a] [@CONTEXT [@CONTEXT ...]] \
 [+PROJECT [+PROJECT ...]]
 
 Show the next action in your todo.txt
@@ -73,6 +73,7 @@ optional arguments:
   --version             show program's version number and exit
   -f FILE, --file FILE  filename of the todo.txt file to read (default: todo.txt)
   -n N, --number N      number of next actions to show (default: 1)
+  -a, --all             show all next actions (default: False)
 """),
                          mock_stdout_write.call_args_list[0])
 
