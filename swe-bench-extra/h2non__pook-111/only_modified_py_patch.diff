diff --git a/src/pook/helpers.py b/src/pook/helpers.py
index 193c2c9..6af0685 100644
--- a/src/pook/helpers.py
+++ b/src/pook/helpers.py
@@ -1,8 +1,24 @@
+import re
+
 from inspect import ismethod, isfunction
 from .exceptions import PookInvalidArgument
 
 
-def trigger_methods(instance, args):
+reply_response_re = re.compile("^(response|reply)_")
+
+
+def _get_key(key_order):
+    def key(x):
+        raw = reply_response_re.sub("", x)
+        try:
+            return key_order.index(raw)
+        except KeyError:
+            raise PookInvalidArgument("Unsupported argument: {}".format(x))
+
+    return key
+
+
+def trigger_methods(instance, args, key_order=None):
     """
     Triggers specific class methods using a simple reflection
     mechanism based on the given input dictionary params.
@@ -10,18 +26,25 @@ def trigger_methods(instance, args):
     Arguments:
         instance (object): target instance to dynamically trigger methods.
         args (iterable): input arguments to trigger objects to
+        key_order (None|iterable): optional order in which to process keys; falls back to `sorted`'s default behaviour if not present
 
     Returns:
         None
     """
     # Start the magic
-    for name in sorted(args):
+    if key_order:
+        key = _get_key(key_order)
+        sorted_args = sorted(args, key=key)
+    else:
+        sorted_args = sorted(args)
+
+    for name in sorted_args:
         value = args[name]
         target = instance
 
         # If response attibutes
-        if name.startswith("response_") or name.startswith("reply_"):
-            name = name.replace("response_", "").replace("reply_", "")
+        if reply_response_re.match(name):
+            name = reply_response_re.sub("", name)
             # If instance has response attribute, use it
             if hasattr(instance, "_response"):
                 target = instance._response
diff --git a/src/pook/mock.py b/src/pook/mock.py
index 1c0316b..dd6fed6 100644
--- a/src/pook/mock.py
+++ b/src/pook/mock.py
@@ -96,6 +96,46 @@ class Mock(object):
         pook.Mock
     """
 
+    _KEY_ORDER = (
+        "add_matcher",
+        "body",
+        "callback",
+        "calls",
+        "content",
+        "delay",
+        "done",
+        "error",
+        "file",
+        "filter",
+        "header",
+        "header_present",
+        "headers",
+        "headers_present",
+        "isdone",
+        "ismatched",
+        "json",
+        "jsonschema",
+        "map",
+        "match",
+        "matched",
+        "matches",
+        "method",
+        "url",
+        "param",
+        "param_exists",
+        "params",
+        "path",
+        "persist",
+        "reply",
+        "response",
+        "status",
+        "times",
+        "total_matches",
+        "type",
+        "use",
+        "xml",
+    )
+
     def __init__(self, request=None, response=None, **kw):
         # Stores the number of times the mock should live
         self._times = 1
@@ -126,7 +166,7 @@ class Mock(object):
         self.callbacks = []
 
         # Triggers instance methods based on argument names
-        trigger_methods(self, kw)
+        trigger_methods(self, kw, self._KEY_ORDER)
 
         # Trigger matchers based on predefined request object, if needed
         if request:
diff --git a/src/pook/request.py b/src/pook/request.py
index 27e57d9..abd8733 100644
--- a/src/pook/request.py
+++ b/src/pook/request.py
@@ -44,7 +44,7 @@ class Request(object):
         self._extra = kw.get("extra")
         self._headers = HTTPHeaderDict()
 
-        trigger_methods(self, kw)
+        trigger_methods(self, kw, self.keys)
 
     @property
     def method(self):
diff --git a/src/pook/response.py b/src/pook/response.py
index 6cceae9..9effd56 100644
--- a/src/pook/response.py
+++ b/src/pook/response.py
@@ -23,6 +23,20 @@ class Response(object):
         mock (pook.Mock): reference to mock instance.
     """
 
+    _KEY_ORDER = (
+        "body",
+        "content",
+        "file",
+        "header",
+        "headers",
+        "json",
+        "mock",
+        "set",
+        "status",
+        "type",
+        "xml",
+    )
+
     def __init__(self, **kw):
         self._status = 200
         self._mock = None
@@ -31,7 +45,7 @@ class Response(object):
         self._headers = HTTPHeaderDict()
 
         # Trigger response method based on input arguments
-        trigger_methods(self, kw)
+        trigger_methods(self, kw, self._KEY_ORDER)
 
     def status(self, code=200):
         """

