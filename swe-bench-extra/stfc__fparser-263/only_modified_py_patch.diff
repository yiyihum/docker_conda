diff --git a/src/fparser/common/readfortran.py b/src/fparser/common/readfortran.py
index 2409318..60e4ea2 100644
--- a/src/fparser/common/readfortran.py
+++ b/src/fparser/common/readfortran.py
@@ -870,12 +870,18 @@ class FortranReaderBase(object):
 
         Resolves ``;`` statement terminations.
 
-        :param bool ignore_comments: Whether or not to ignore comments
-                                     (overrides self._ignore_comments)
-
         See also
         --------
         next, get_source_item
+
+        :param bool ignore_comments: Whether or not to ignore comments \
+                                     (overrides self._ignore_comments)
+
+        :returns: the next line of Fortran.
+        :rtype: :py:class:`fparser.common.readfortran.Line`
+
+        :raises StopIteration: if no new items are found.
+
         """
         if ignore_comments is None:
             ignore_comments = self._ignore_comments
@@ -887,9 +893,9 @@ class FortranReaderBase(object):
             except IndexError:
                 # construct a new item from source
                 item = self.get_source_item()
-                if item is None:
-                    raise StopIteration
-            if not (item.isempty(ignore_comments)):
+            if item is None:
+                raise StopIteration
+            if not item.isempty(ignore_comments):
                 break
             # else ignore empty lines and comments by getting next line
 
diff --git a/src/fparser/two/C99Preprocessor.py b/src/fparser/two/C99Preprocessor.py
index 8557a9b..4a4fc94 100644
--- a/src/fparser/two/C99Preprocessor.py
+++ b/src/fparser/two/C99Preprocessor.py
@@ -76,7 +76,8 @@ def match_cpp_directive(reader):
     if isinstance(reader, FortranReaderBase):
         item = reader.get_item()
         is_potential_cpp_directive = isinstance(item, CppDirective)
-        reader.put_item(item)
+        if item:
+            reader.put_item(item)
         # Do not bail out early here to have a catch all return statement
         # at the end (that would not be reachable by tests otherwise)
     if is_potential_cpp_directive:

