diff --git a/boule/__init__.py b/boule/__init__.py
index 00640f1..e83adcf 100644
--- a/boule/__init__.py
+++ b/boule/__init__.py
@@ -2,6 +2,7 @@
 # Import functions/classes to make the public API
 from . import version
 from .ellipsoid import Ellipsoid
+from .sphere import Sphere
 from .realizations import WGS84, GRS80, MARS
 
 
diff --git a/boule/ellipsoid.py b/boule/ellipsoid.py
index 441d9d6..8ed4217 100644
--- a/boule/ellipsoid.py
+++ b/boule/ellipsoid.py
@@ -1,6 +1,7 @@
 """
 Module for defining and setting the reference ellipsoid.
 """
+from warnings import warn
 import attr
 import numpy as np
 
@@ -41,30 +42,30 @@ class Ellipsoid:
     Examples
     --------
 
-    We can define a reference unit sphere by using 0 as the flattening:
+    We can define an ellipsoid with flattening equal to 0.5 and unit semimajor axis:
 
-    >>> sphere = Ellipsoid(
-    ...     name="sphere",
-    ...     long_name="Unit sphere",
+    >>> ellipsoid = Ellipsoid(
+    ...     name="oblate-ellipsoid",
+    ...     long_name="Oblate Ellipsoid",
     ...     semimajor_axis=1,
-    ...     flattening=0,
+    ...     flattening=0.5,
     ...     geocentric_grav_const=1,
     ...     angular_velocity=0
     ... )
-    >>> print(sphere) # doctest: +ELLIPSIS
-    Ellipsoid(name='sphere', ...)
-    >>> print(sphere.long_name)
-    Unit sphere
-    >>> print("{:.2f}".format(sphere.semiminor_axis))
-    1.00
-    >>> print("{:.2f}".format(sphere.mean_radius))
-    1.00
-    >>> print("{:.2f}".format(sphere.linear_eccentricity))
-    0.00
-    >>> print("{:.2f}".format(sphere.first_eccentricity))
-    0.00
-    >>> print("{:.2f}".format(sphere.second_eccentricity))
-    0.00
+    >>> print(ellipsoid) # doctest: +ELLIPSIS
+    Ellipsoid(name='oblate-ellipsoid', ...)
+    >>> print(ellipsoid.long_name)
+    Oblate Ellipsoid
+    >>> print("{:.2f}".format(ellipsoid.semiminor_axis))
+    0.50
+    >>> print("{:.2f}".format(ellipsoid.mean_radius))
+    0.83
+    >>> print("{:.2f}".format(ellipsoid.linear_eccentricity))
+    0.87
+    >>> print("{:.2f}".format(ellipsoid.first_eccentricity))
+    0.87
+    >>> print("{:.2f}".format(ellipsoid.second_eccentricity))
+    1.73
 
     """
 
@@ -76,6 +77,19 @@ class Ellipsoid:
     long_name = attr.ib(default=None)
     reference = attr.ib(default=None)
 
+    @flattening.validator
+    def check_flattening(
+        self, flattening, value
+    ):  # pylint: disable=no-self-use,unused-argument
+        """
+        Check if flattening is not equal (or almost) zero
+        """
+        warn_msg = "Use boule.Sphere for representing ellipsoids with zero flattening."
+        if value == 0:
+            warn("Flattening equal to zero. " + warn_msg)
+        if value < 1e-7:
+            warn("Flattening '{}' too close to zero. ".format(value) + warn_msg)
+
     @property
     def semiminor_axis(self):
         "The small (polar) axis of the ellipsoid [meters]"
diff --git a/boule/sphere.py b/boule/sphere.py
new file mode 100644
index 0000000..498ec3b
--- /dev/null
+++ b/boule/sphere.py
@@ -0,0 +1,161 @@
+"""
+Module for defining and setting the reference sphere.
+"""
+import attr
+import numpy as np
+
+from . import Ellipsoid
+
+
+# Don't let ellipsoid parameters be changed to avoid messing up calculations
+# accidentally.
+@attr.s(frozen=True)
+class Sphere(Ellipsoid):
+    """
+    Reference spherical ellipsoid
+
+    Represents ellipsoids with zero flattening (spheres). Inherits methods and
+    properties of the :class:`boule.Ellipsoid`, guaranteeing no singularities
+    due to zero flattening (and thus zero eccentricity).
+
+    All parameters are in SI units.
+
+    Parameters
+    ----------
+    name : str
+        A short name for the ellipsoid, for example ``'MOON'``.
+    radius : float
+        The radius of the sphere [meters].
+    geocentric_grav_const : float
+        The geocentric gravitational constant (GM) [m^3 s^-2].
+    angular_velocity : float
+        The angular velocity of the rotating ellipsoid (omega) [rad s^-1].
+    long_name : str or None
+        A long name for the ellipsoid, for example ``"Moon Reference System"``
+        (optional).
+    reference : str or None
+        Citation for the ellipsoid parameter values (optional).
+
+    Examples
+    --------
+
+    We can define a unit sphere:
+
+    >>> sphere = Sphere(
+    ...     name="sphere",
+    ...     radius=1,
+    ...     geocentric_grav_const=1,
+    ...     angular_velocity=0,
+    ...     long_name="Spherical Ellipsoid",
+    ... )
+    >>> print(sphere) # doctest: +ELLIPSIS
+    Sphere(name='sphere', ...)
+    >>> print(sphere.long_name)
+    Spherical Ellipsoid
+    >>> print("{:.2f}".format(sphere.semiminor_axis))
+    1.00
+    >>> print("{:.2f}".format(sphere.mean_radius))
+    1.00
+    >>> print("{:.2f}".format(sphere.flattening))
+    0.00
+    >>> print("{:.2f}".format(sphere.linear_eccentricity))
+    0.00
+    >>> print("{:.2f}".format(sphere.first_eccentricity))
+    0.00
+    >>> print("{:.2f}".format(sphere.second_eccentricity))
+    0.00
+    >>> print(sphere.normal_gravity(latitude=0, height=1))
+    25000.0
+    >>> print(sphere.normal_gravity(latitude=90, height=1))
+    25000.0
+    """
+
+    name = attr.ib()
+    radius = attr.ib()
+    geocentric_grav_const = attr.ib()
+    angular_velocity = attr.ib()
+    long_name = attr.ib(default=None)
+    reference = attr.ib(default=None)
+    # semimajor_axis and flattening shouldn't be defined on initialization:
+    #   - semimajor_axis will be equal to radius
+    #   - flattening will be equal to zero
+    semimajor_axis = attr.ib(init=False)
+    flattening = attr.ib(init=False, default=0)
+
+    @semimajor_axis.default
+    def _set_semimajor_axis(self):
+        "The semimajor axis should be the radius"
+        return self.radius
+
+    def normal_gravity(self, latitude, height):
+        """
+        Calculate normal gravity at any latitude and height
+
+        Computes the magnitude of the gradient of the gravity potential
+        (gravitational + centrifugal) generated by the sphere at the given
+        latitude and height.
+
+        Parameters
+        ----------
+        latitude : float or array
+            The latitude where the normal gravity will be computed (in degrees).
+        height : float or array
+            The height (above the sphere) of computation point (in meters).
+
+        Returns
+        -------
+        gamma : float or array
+            The normal gravity in mGal.
+
+        References
+        ----------
+        [Heiskanen-Moritz]_
+        """
+        return self._gravity_sphere(height) + self._centrifugal_force(latitude, height)
+
+    def _gravity_sphere(self, height):
+        """
+        Calculate the gravity generated by a solid sphere (mGal)
+        """
+        return 1e5 * self.geocentric_grav_const / (self.radius + height) ** 2
+
+    def _centrifugal_force(self, latitude, height):
+        """
+        Calculate the centrifugal force due to the rotation of the sphere (mGal)
+        """
+        return 1e5 * (
+            (-1)
+            * self.angular_velocity ** 2
+            * (self.radius + height)
+            * np.cos(np.radians(latitude))
+        )
+
+    @property
+    def gravity_equator(self):
+        """
+        The norm of the gravity vector at the equator on the sphere [m/s^2]
+
+        Overrides the inherited method from :class:`boule.Ellipsoid` to avoid
+        singularities due to zero flattening.
+        """
+        return self._gravity_on_surface
+
+    @property
+    def gravity_pole(self):
+        """
+        The norm of the gravity vector at the poles on the sphere [m/s^2]
+
+        Overrides the inherited method from :class:`boule.Ellipsoid` to avoid
+        singularities due to zero flattening.
+        """
+        return self._gravity_on_surface
+
+    @property
+    def _gravity_on_surface(self):
+        """
+        Compute norm of the gravity vector on the surface of the sphere [m/s^2]
+
+        Due to rotational symmetry, the norm of the gravity vector is the same
+        on every point of the surface.
+        """
+        return self.geocentric_grav_const / self.radius ** 2
diff --git a/doc/api/index.rst b/doc/api/index.rst
index 74052c5..225d36a 100644
--- a/doc/api/index.rst
+++ b/doc/api/index.rst
@@ -14,10 +14,12 @@ Reference Ellipsoid
    :toctree: generated/
 
     Ellipsoid
+    Sphere
 
-All ellipsoids are instances of the :class:`~boule.Ellipsoid` class. See the
-class reference documentation for a list its derived physical properties
-(attributes) and computations/transformations that it can perform (methods).
+All ellipsoids are instances of the :class:`~boule.Ellipsoid` or the
+:class:`~boule.Sphere` classes. See the class reference documentation for
+a list their derived physical properties (attributes) and
+computations/transformations that they can perform (methods).
 
 Utilities
 ---------
diff --git a/doc/references.rst b/doc/references.rst
index faeac11..924b508 100644
--- a/doc/references.rst
+++ b/doc/references.rst
@@ -2,6 +2,7 @@ References
 ==========
 
 .. [Ardalan2009] Ardalan, A. A., Karimi, R., & Grafarend, E. W. (2009). A New Reference Equipotential Surface, and Reference Ellipsoid for the Planet Mars. Earth, Moon, and Planets, 106(1), 1. https://doi.org/10.1007/s11038-009-9342-7
+.. [Heiskanen-Moritz] Heiskanen, W.A. & Moritz, H. (1967) Physical Geodesy. W.H. Freeman and Company.
 .. [Hofmann-WellenhofMoritz2006] Hofmann-Wellenhof, B., & Moritz, H. (2006). Physical Geodesy (2nd, corr. ed. 2006 edition ed.). Wienâ€¯; New York: Springer.
 .. [LiGotze2001] Li, X. and H. J. Gotze, 2001, Tutorial: Ellipsoid, geoid, gravity, geodesy, and geophysics, Geophysics, 66(6), p. 1660-1668, doi:`10.1190/1.1487109 <https://doi.org/10.1190/1.1487109>`__
 .. [Vermeille2002] Vermeille, H., 2002. Direct transformation from geocentric coordinates to geodetic coordinates. Journal of Geodesy. 76. 451-454. doi:`10.1007/s00190-002-0273-6 <https://doi.org/10.1007/s00190-002-0273-6>`__
diff --git a/tutorials/overview.py b/tutorials/overview.py
index cc2ad88..a540ffb 100644
--- a/tutorials/overview.py
+++ b/tutorials/overview.py
@@ -62,28 +62,36 @@ print(bl.MARS.gravity_pole)
 print(bl.MARS.gravity_equator)
 
 ###############################################################################
-# You can also define your own ellipsoid. For example, this would be the
-# definition of a sphere with 1000 m radius and dummy values for :math:`GM` and
-# :math:`\omega`:
-
-sphere = bl.Ellipsoid(
-    name="Sphere",
-    long_name="Ellipsoid with 0 flattening",
-    flattening=0,
+# You can also define your own ellipsoid. For example, this would be a definition of an
+# ellipsoid with 1000 m semimajor axis, flattening equal to 0.5 and dummy values for
+# :math:`GM` and :math:`\omega`:
+
+ellipsoid = bl.Ellipsoid(
+    name="Ellipsoid",
+    long_name="Ellipsoid with 0.5 flattening",
+    flattening=0.5,
     semimajor_axis=1000,
     geocentric_grav_const=1,
     angular_velocity=1,
 )
-print(sphere)
-print(sphere.semiminor_axis)
-print(sphere.first_eccentricity)
+print(ellipsoid)
+print(ellipsoid.semiminor_axis)
+print(ellipsoid.first_eccentricity)
+
 
 ###############################################################################
-# However, the equations for calculating gravity are not suited for the 0
-# flattening case. **So don't define reference spheres like this.** This is due
-# to the first eccentricity being 0 (it appears in divisions in the equations).
+# If the ellipsoid has zero flattening (a sphere), you must use the
+# :class:`boule.Sphere` class instead. For example, this would be the definition of
+# a sphere with 1000 m radius and dummy values for :math:`GM` and :math:`\omega`:
 
-print(sphere.gravity_pole)
+sphere = bl.Sphere(
+    name="Sphere",
+    long_name="Ellipsoid with 0 flattening",
+    radius=1000,
+    geocentric_grav_const=1,
+    angular_velocity=1,
+)
+print(sphere)
 
 ###############################################################################
 # Computations
