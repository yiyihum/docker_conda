diff --git a/boule/__init__.py b/boule/__init__.py
index 00640f1..e83adcf 100644
--- a/boule/__init__.py
+++ b/boule/__init__.py
@@ -2,6 +2,7 @@
 # Import functions/classes to make the public API
 from . import version
 from .ellipsoid import Ellipsoid
+from .sphere import Sphere
 from .realizations import WGS84, GRS80, MARS
 
 
diff --git a/boule/ellipsoid.py b/boule/ellipsoid.py
index 441d9d6..8ed4217 100644
--- a/boule/ellipsoid.py
+++ b/boule/ellipsoid.py
@@ -1,6 +1,7 @@
 """
 Module for defining and setting the reference ellipsoid.
 """
+from warnings import warn
 import attr
 import numpy as np
 
@@ -41,30 +42,30 @@ class Ellipsoid:
     Examples
     --------
 
-    We can define a reference unit sphere by using 0 as the flattening:
+    We can define an ellipsoid with flattening equal to 0.5 and unit semimajor axis:
 
-    >>> sphere = Ellipsoid(
-    ...     name="sphere",
-    ...     long_name="Unit sphere",
+    >>> ellipsoid = Ellipsoid(
+    ...     name="oblate-ellipsoid",
+    ...     long_name="Oblate Ellipsoid",
     ...     semimajor_axis=1,
-    ...     flattening=0,
+    ...     flattening=0.5,
     ...     geocentric_grav_const=1,
     ...     angular_velocity=0
     ... )
-    >>> print(sphere) # doctest: +ELLIPSIS
-    Ellipsoid(name='sphere', ...)
-    >>> print(sphere.long_name)
-    Unit sphere
-    >>> print("{:.2f}".format(sphere.semiminor_axis))
-    1.00
-    >>> print("{:.2f}".format(sphere.mean_radius))
-    1.00
-    >>> print("{:.2f}".format(sphere.linear_eccentricity))
-    0.00
-    >>> print("{:.2f}".format(sphere.first_eccentricity))
-    0.00
-    >>> print("{:.2f}".format(sphere.second_eccentricity))
-    0.00
+    >>> print(ellipsoid) # doctest: +ELLIPSIS
+    Ellipsoid(name='oblate-ellipsoid', ...)
+    >>> print(ellipsoid.long_name)
+    Oblate Ellipsoid
+    >>> print("{:.2f}".format(ellipsoid.semiminor_axis))
+    0.50
+    >>> print("{:.2f}".format(ellipsoid.mean_radius))
+    0.83
+    >>> print("{:.2f}".format(ellipsoid.linear_eccentricity))
+    0.87
+    >>> print("{:.2f}".format(ellipsoid.first_eccentricity))
+    0.87
+    >>> print("{:.2f}".format(ellipsoid.second_eccentricity))
+    1.73
 
     """
 
@@ -76,6 +77,19 @@ class Ellipsoid:
     long_name = attr.ib(default=None)
     reference = attr.ib(default=None)
 
+    @flattening.validator
+    def check_flattening(
+        self, flattening, value
+    ):  # pylint: disable=no-self-use,unused-argument
+        """
+        Check if flattening is not equal (or almost) zero
+        """
+        warn_msg = "Use boule.Sphere for representing ellipsoids with zero flattening."
+        if value == 0:
+            warn("Flattening equal to zero. " + warn_msg)
+        if value < 1e-7:
+            warn("Flattening '{}' too close to zero. ".format(value) + warn_msg)
+
     @property
     def semiminor_axis(self):
         "The small (polar) axis of the ellipsoid [meters]"
diff --git a/tutorials/overview.py b/tutorials/overview.py
index cc2ad88..a540ffb 100644
--- a/tutorials/overview.py
+++ b/tutorials/overview.py
@@ -62,28 +62,36 @@ print(bl.MARS.gravity_pole)
 print(bl.MARS.gravity_equator)
 
 ###############################################################################
-# You can also define your own ellipsoid. For example, this would be the
-# definition of a sphere with 1000 m radius and dummy values for :math:`GM` and
-# :math:`\omega`:
-
-sphere = bl.Ellipsoid(
-    name="Sphere",
-    long_name="Ellipsoid with 0 flattening",
-    flattening=0,
+# You can also define your own ellipsoid. For example, this would be a definition of an
+# ellipsoid with 1000 m semimajor axis, flattening equal to 0.5 and dummy values for
+# :math:`GM` and :math:`\omega`:
+
+ellipsoid = bl.Ellipsoid(
+    name="Ellipsoid",
+    long_name="Ellipsoid with 0.5 flattening",
+    flattening=0.5,
     semimajor_axis=1000,
     geocentric_grav_const=1,
     angular_velocity=1,
 )
-print(sphere)
-print(sphere.semiminor_axis)
-print(sphere.first_eccentricity)
+print(ellipsoid)
+print(ellipsoid.semiminor_axis)
+print(ellipsoid.first_eccentricity)
+
 
 ###############################################################################
-# However, the equations for calculating gravity are not suited for the 0
-# flattening case. **So don't define reference spheres like this.** This is due
-# to the first eccentricity being 0 (it appears in divisions in the equations).
+# If the ellipsoid has zero flattening (a sphere), you must use the
+# :class:`boule.Sphere` class instead. For example, this would be the definition of
+# a sphere with 1000 m radius and dummy values for :math:`GM` and :math:`\omega`:
 
-print(sphere.gravity_pole)
+sphere = bl.Sphere(
+    name="Sphere",
+    long_name="Ellipsoid with 0 flattening",
+    radius=1000,
+    geocentric_grav_const=1,
+    angular_velocity=1,
+)
+print(sphere)
 
 ###############################################################################
 # Computations

