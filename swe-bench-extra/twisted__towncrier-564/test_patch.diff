diff --git a/src/towncrier/test/test_build.py b/src/towncrier/test/test_build.py
index 780a3c8..938814c 100644
--- a/src/towncrier/test/test_build.py
+++ b/src/towncrier/test/test_build.py
@@ -43,6 +43,14 @@ class TestCli(TestCase):
                 f.write("Orphaned feature")
             with open("foo/newsfragments/+xxx.feature", "w") as f:
                 f.write("Another orphaned feature")
+            with open("foo/newsfragments/+123_orphaned.feature", "w") as f:
+                f.write("An orphaned feature starting with a number")
+            with open("foo/newsfragments/+12.3_orphaned.feature", "w") as f:
+                f.write("An orphaned feature starting with a dotted number")
+            with open("foo/newsfragments/+orphaned_123.feature", "w") as f:
+                f.write("An orphaned feature ending with a number")
+            with open("foo/newsfragments/+orphaned_12.3.feature", "w") as f:
+                f.write("An orphaned feature ending with a dotted number")
             # Towncrier ignores files that don't have a dot
             with open("foo/newsfragments/README", "w") as f:
                 f.write("Blah blah")
@@ -52,7 +60,7 @@ class TestCli(TestCase):
 
             result = runner.invoke(command, ["--draft", "--date", "01-01-2001"])
 
-        self.assertEqual(0, result.exit_code)
+        self.assertEqual(0, result.exit_code, result.output)
         self.assertEqual(
             result.output,
             dedent(
@@ -70,9 +78,13 @@ class TestCli(TestCase):
                 --------
 
                 - Baz levitation (baz)
-                - Baz fix levitation (#2)
+                - Baz fix levitation (fix-1.2)
                 - Adds levitation (#123)
                 - Extends levitation (#124)
+                - An orphaned feature ending with a dotted number
+                - An orphaned feature ending with a number
+                - An orphaned feature starting with a dotted number
+                - An orphaned feature starting with a number
                 - Another orphaned feature
                 - Orphaned feature
 
@@ -405,6 +417,7 @@ class TestCli(TestCase):
             call(["git", "init"])
             call(["git", "config", "user.name", "user"])
             call(["git", "config", "user.email", "user@example.com"])
+            call(["git", "config", "commit.gpgSign", "false"])
             call(["git", "add", "."])
             call(["git", "commit", "-m", "Initial Commit"])
 
@@ -429,6 +442,7 @@ class TestCli(TestCase):
             call(["git", "init"])
             call(["git", "config", "user.name", "user"])
             call(["git", "config", "user.email", "user@example.com"])
+            call(["git", "config", "commit.gpgSign", "false"])
             call(["git", "add", "."])
             call(["git", "commit", "-m", "Initial Commit"])
 
@@ -458,6 +472,7 @@ class TestCli(TestCase):
         call(["git", "init"])
         call(["git", "config", "user.name", "user"])
         call(["git", "config", "user.email", "user@example.com"])
+        call(["git", "config", "commit.gpgSign", "false"])
         call(["git", "add", "."])
         call(["git", "commit", "-m", "Initial Commit"])
 
@@ -491,6 +506,7 @@ class TestCli(TestCase):
         call(["git", "init"])
         call(["git", "config", "user.name", "user"])
         call(["git", "config", "user.email", "user@example.com"])
+        call(["git", "config", "commit.gpgSign", "false"])
         call(["git", "add", "."])
         call(["git", "commit", "-m", "Initial Commit"])
 
@@ -519,6 +535,7 @@ class TestCli(TestCase):
             call(["git", "init"])
             call(["git", "config", "user.name", "user"])
             call(["git", "config", "user.email", "user@example.com"])
+            call(["git", "config", "commit.gpgSign", "false"])
             call(["git", "add", "."])
             call(["git", "commit", "-m", "Initial Commit"])
 
diff --git a/src/towncrier/test/test_builder.py b/src/towncrier/test/test_builder.py
index 62630af..b62033a 100644
--- a/src/towncrier/test/test_builder.py
+++ b/src/towncrier/test/test_builder.py
@@ -8,63 +8,73 @@ from .._builder import parse_newfragment_basename
 
 class TestParseNewsfragmentBasename(TestCase):
     def test_simple(self):
+        """<number>.<category> generates a counter value of 0."""
         self.assertEqual(
             parse_newfragment_basename("123.feature", ["feature"]),
             ("123", "feature", 0),
         )
 
     def test_invalid_category(self):
+        """Files without a valid category are rejected."""
         self.assertEqual(
             parse_newfragment_basename("README.ext", ["feature"]),
             (None, None, None),
         )
 
     def test_counter(self):
+        """<number>.<category>.<counter> generates a custom counter value."""
         self.assertEqual(
             parse_newfragment_basename("123.feature.1", ["feature"]),
             ("123", "feature", 1),
         )
 
     def test_counter_with_extension(self):
+        """File extensions are ignored."""
         self.assertEqual(
             parse_newfragment_basename("123.feature.1.ext", ["feature"]),
             ("123", "feature", 1),
         )
 
     def test_ignores_extension(self):
+        """File extensions are ignored."""
         self.assertEqual(
             parse_newfragment_basename("123.feature.ext", ["feature"]),
             ("123", "feature", 0),
         )
 
     def test_non_numeric_ticket(self):
+        """Non-numeric issue identifiers are preserved verbatim."""
         self.assertEqual(
             parse_newfragment_basename("baz.feature", ["feature"]),
             ("baz", "feature", 0),
         )
 
     def test_non_numeric_ticket_with_extension(self):
+        """File extensions are ignored."""
         self.assertEqual(
             parse_newfragment_basename("baz.feature.ext", ["feature"]),
             ("baz", "feature", 0),
         )
 
     def test_dots_in_ticket_name(self):
+        """Non-numeric issue identifiers are preserved verbatim."""
         self.assertEqual(
             parse_newfragment_basename("baz.1.2.feature", ["feature"]),
-            ("2", "feature", 0),
+            ("baz.1.2", "feature", 0),
         )
 
     def test_dots_in_ticket_name_invalid_category(self):
+        """Files without a valid category are rejected."""
         self.assertEqual(
             parse_newfragment_basename("baz.1.2.notfeature", ["feature"]),
             (None, None, None),
         )
 
     def test_dots_in_ticket_name_and_counter(self):
+        """Non-numeric issue identifiers are preserved verbatim."""
         self.assertEqual(
             parse_newfragment_basename("baz.1.2.feature.3", ["feature"]),
-            ("2", "feature", 3),
+            ("baz.1.2", "feature", 3),
         )
 
     def test_strip(self):
@@ -77,7 +87,41 @@ class TestParseNewsfragmentBasename(TestCase):
         )
 
     def test_strip_with_counter(self):
+        """Leading spaces and subsequent leading zeros are stripped
+        when parsing newsfragment names into ticket numbers etc.
+        """
         self.assertEqual(
             parse_newfragment_basename("  007.feature.3", ["feature"]),
             ("7", "feature", 3),
         )
+
+    def test_orphan(self):
+        """Orphaned snippets must remain the orphan marker in the issue
+        identifier."""
+        self.assertEqual(
+            parse_newfragment_basename("+orphan.feature", ["feature"]),
+            ("+orphan", "feature", 0),
+        )
+
+    def test_orphan_with_number(self):
+        """Orphaned snippets can contain numbers in the identifier."""
+        self.assertEqual(
+            parse_newfragment_basename("+123_orphan.feature", ["feature"]),
+            ("+123_orphan", "feature", 0),
+        )
+        self.assertEqual(
+            parse_newfragment_basename("+orphan_123.feature", ["feature"]),
+            ("+orphan_123", "feature", 0),
+        )
+
+    def test_orphan_with_dotted_number(self):
+        """Orphaned snippets can contain numbers with dots in the
+        identifier."""
+        self.assertEqual(
+            parse_newfragment_basename("+12.3_orphan.feature", ["feature"]),
+            ("+12.3_orphan", "feature", 0),
+        )
+        self.assertEqual(
+            parse_newfragment_basename("+orphan_12.3.feature", ["feature"]),
+            ("+orphan_12.3", "feature", 0),
+        )
