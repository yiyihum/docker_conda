diff --git a/tests/error_examples/invalid-YAML-indentation.yaml b/tests/error_examples/invalid-YAML-indentation.yaml
new file mode 100644
index 0000000..b49c958
--- /dev/null
+++ b/tests/error_examples/invalid-YAML-indentation.yaml
@@ -0,0 +1,7 @@
+- step:
+  name: outdented
+    image: python:3.7
+    inputs: []
+    command:
+            - pip install -r requirements.txt
+            - python ./test.py {parameters}
diff --git a/tests/error_examples/invalid-indentation-with-valid-YAML.yaml b/tests/error_examples/invalid-indentation-with-valid-YAML.yaml
new file mode 100644
index 0000000..97489fe
--- /dev/null
+++ b/tests/error_examples/invalid-indentation-with-valid-YAML.yaml
@@ -0,0 +1,7 @@
+- step:
+  name: valid-yaml-but-unindented
+  image: python:3.7
+  inputs: []
+  command:
+          - pip install -r requirements.txt
+          - python ./test.py {parameters}
diff --git a/tests/test_linter.py b/tests/test_linter.py
index b6a6a67..19950af 100644
--- a/tests/test_linter.py
+++ b/tests/test_linter.py
@@ -2,7 +2,7 @@ from itertools import chain
 
 import pytest
 
-from tests.utils import get_warning_example_path
+from tests.utils import get_error_example_path, get_warning_example_path
 from valohai_yaml.lint import lint_file
 
 
@@ -22,3 +22,16 @@ def test_invalid_parameter_default(file, expected_message):
     items = lint_file(get_warning_example_path(file))
     messages = [item['message'] for item in chain(items.warnings, items.errors)]
     assert any(expected_message in message for message in messages), messages  # pragma: no branch
+
+
+@pytest.mark.parametrize('file, expected_message', [
+    ('invalid-indentation-with-valid-YAML.yaml',
+     '\x1b[34mFile contains valid YAML but there '
+     'might be an indentation error in following '
+     'configuration: \x1b[1m0.step\x1b'),
+    ('invalid-YAML-indentation.yaml', 'Indentation Error at line 3, column 10'),
+])
+def test_invalid_indentation(file, expected_message):
+    items = lint_file(get_error_example_path(file))
+    messages = [item['message'] for item in chain(items.hints, items.errors)]
+    assert any(expected_message in message for message in messages), messages  # pragma: no branch
