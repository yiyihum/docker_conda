diff --git a/valohai_yaml/lint.py b/valohai_yaml/lint.py
index 52ef31c..0df3be0 100644
--- a/valohai_yaml/lint.py
+++ b/valohai_yaml/lint.py
@@ -1,5 +1,6 @@
 from typing import Iterator, List, Optional
 
+import yaml as pyyaml
 from jsonschema.exceptions import relevance
 
 from valohai_yaml.excs import ValidationError
@@ -21,6 +22,9 @@ class LintResult:
     def add_warning(self, message: str, location: None = None, exception: Optional[Exception] = None) -> None:
         self.messages.append({'type': 'warning', 'message': message, 'location': location, 'exception': exception})
 
+    def add_hint(self, message: str, location: None = None, exception: Optional[Exception] = None) -> None:
+        self.messages.append({'type': 'hint', 'message': message, 'location': location, 'exception': exception})
+
     @property
     def warning_count(self) -> int:
         return sum(1 for m in self.messages if m['type'] == 'warning')
@@ -37,6 +41,10 @@ class LintResult:
     def errors(self) -> Iterator[LintResultMessage]:
         return (m for m in self.messages if m['type'] == 'error')
 
+    @property
+    def hints(self) -> Iterator[LintResultMessage]:
+        return (m for m in self.messages if m['type'] == 'hint')
+
     def is_valid(self) -> bool:
         return (self.warning_count == 0 and self.error_count == 0)
 
@@ -60,7 +68,17 @@ def lint_file(file_path: str) -> LintResult:
 def lint(yaml: YamlReadable) -> LintResult:
     lr = LintResult()
 
-    data = read_yaml(yaml)
+    try:
+        data = read_yaml(yaml)
+    except pyyaml.YAMLError as err:
+        if hasattr(err, 'problem_mark'):
+            mark = err.problem_mark
+            indent_error = f"Indentation Error at line {mark.line + 1}, column {mark.column + 1}"
+            lr.add_error(indent_error)
+        else:
+            lr.add_error(str(err))
+        return lr
+
     validator = get_validator()
     errors = sorted(
         validator.iter_errors(data),
@@ -79,6 +97,14 @@ def lint(yaml: YamlReadable) -> LintResult:
         styled_message = style(error.message, fg='red')
         styled_path = style('.'.join(obj_path), bold=True)
         lr.add_error(f'  {styled_validator} validation on {styled_schema_path}: {styled_message} ({styled_path})')
+        # when path has only 2 nodes. it means it has problem in main steps/pipelines/endpoints objects
+        if len(error.path) == 2 and not error.instance:
+            styled_hint = style(
+                "File contains valid YAML but there might be an indentation "
+                f"error in following configuration: {styled_path}",
+                fg='blue',
+            )
+            lr.add_hint(styled_hint)
 
     if len(errors) > 0:
         return lr

