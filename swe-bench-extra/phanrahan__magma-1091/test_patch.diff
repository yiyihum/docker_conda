diff --git a/tests/test_conversion.py b/tests/test_conversion.py
index 145525b1..323729e8 100644
--- a/tests/test_conversion.py
+++ b/tests/test_conversion.py
@@ -84,3 +84,19 @@ def test_bits_upcast(T):
 def test_bit_upcast():
     x = m.Enable()
     assert type(m.bit(x)) is m.Bit
+
+
+@pytest.mark.parametrize(
+    'T,conversion,expected_T',
+    [
+        (m.Bit, m.clock, m.Clock),
+        (m.Bits[4], m.uint, m.UInt),
+        (m.UInt[4], m.bits, m.Bits),
+        (m.Reset, m.bit, m.Bit)
+    ]
+)
+def test_name(T, conversion, expected_T):
+    x = T(name="x")
+    y = conversion(x, name="y")
+    assert str(y) == 'y'
+    assert isinstance(y, expected_T)
diff --git a/tests/test_value_utils.py b/tests/test_value_utils.py
index bbaeae78..7cad99c2 100644
--- a/tests/test_value_utils.py
+++ b/tests/test_value_utils.py
@@ -1,6 +1,13 @@
+import pytest
+
 import magma as m
-from magma.value_utils import (ValueVisitor, ArraySelector, TupleSelector,
-                               make_selector)
+from magma.value_utils import (
+    ValueVisitor,
+    ArraySelector,
+    TupleSelector,
+    make_selector,
+    fill,
+)
 
 
 class _Prod(m.Product):
@@ -67,3 +74,26 @@ def test_selector():
 
     assert str(selector) == "[0].x[0]"
     assert selector.select(_Foo.I) is _Foo.I[0].x[0]
+
+
+@pytest.mark.parametrize("fill_value", (True, False))
+def test_fill(fill_value):
+    S = m.AnonProduct[{"x": m.Bits[8], "y": m.Bit}]
+    T = m.AnonProduct[{"s": S, "u": m.Array[4, m.Bits[6]]}]
+
+    t = T()
+    fill(t, fill_value)
+
+    value = t.value()
+    assert value is not None
+
+    assert value.s.const()
+    assert value.s.x.const()
+    assert value.s.y.const()
+    assert int(value.s.x) == (0 if not fill_value else 255)
+    assert int(value.s.y) == (0 if not fill_value else 1)
+
+    assert value.u.const()
+    for u_i in value.u:
+        assert u_i.const()
+        assert int(u_i) == (0 if not fill_value else 63)
