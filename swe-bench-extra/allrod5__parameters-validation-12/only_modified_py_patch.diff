diff --git a/parameters_validation/builtin_validations.py b/parameters_validation/builtin_validations.py
index c56476e..7c8a52b 100644
--- a/parameters_validation/builtin_validations.py
+++ b/parameters_validation/builtin_validations.py
@@ -210,4 +210,4 @@ def _build_arg(arg_name, arg_type):
             arg += " <{t}>".format(t=arg_type.__name__)
         except AttributeError:
             arg += " <{t}>".format(t=arg_type._name)
-    return arg
\ No newline at end of file
+    return arg
diff --git a/parameters_validation/validate_parameters_decorator.py b/parameters_validation/validate_parameters_decorator.py
index fa843a6..b59ed56 100644
--- a/parameters_validation/validate_parameters_decorator.py
+++ b/parameters_validation/validate_parameters_decorator.py
@@ -1,7 +1,55 @@
 import inspect
+from copy import deepcopy
 from functools import wraps
 
 
+def _get_parameter_value_dict(specs, args, kwargs):
+    parameters = kwargs.copy()
+    for arg_value, parameter in zip(args, specs.args):
+        parameters[parameter] = arg_value
+    if specs.defaults:
+        for default_parameter, default_value in zip(
+                specs.args[len(specs.args) - len(specs.defaults):], specs.defaults
+        ):
+            if default_parameter in parameters:
+                continue
+            parameters[default_parameter] = default_value
+    if specs.kwonlydefaults:
+        for default_parameter, default_value in specs.kwonlydefaults.items():
+            if default_parameter in parameters:
+                continue
+            parameters[default_parameter] = default_value
+    return parameters
+
+
+def _get_wrapper(f: callable, specs: inspect.FullArgSpec, validations: dict = None):
+    if validations is None:
+        validations = specs.annotations
+
+    @wraps(f)
+    def wrapper(*args, **kwargs):
+        parameters = _get_parameter_value_dict(specs, args, kwargs)
+        for parameter, annotation in validations.items():
+            if not hasattr(annotation, "_parameter_validation"):
+                continue
+            annotation(parameters[parameter], parameter)
+
+        return f(*args, **kwargs)
+
+    def parameter_validation_mock(pseudo_validation_function: callable):
+        mock = deepcopy(pseudo_validation_function)
+        mock._parameter_validation = True
+        return mock
+
+    def mock_validations(mocks: dict):
+        valid_mocks = {p: parameter_validation_mock(v) for p, v in mocks.items()}
+        return _get_wrapper(f, specs, {**validations, **valid_mocks})
+    wrapper.mock_validations = mock_validations
+    wrapper.skip_validations = lambda: f
+
+    return wrapper
+
+
 def validate_parameters(func):
     """
     Decorator to apply validations in the parameters type hints before executing the
@@ -18,36 +66,28 @@ def validate_parameters(func):
     ... foo("")                 # invalid, empty
     ... foo(None)               # invalid, none
 
+    Validations can be skipped with `.skip_validations()`:
+
+    >>> from parameters_validation import non_blank
+    ...
+    ... @validate_parameters
+    ... def foo(s: non_blank(str)):
+    ...     pass
+    ...
+    ... foo.skip_validations()("")  # does not throw since validations are skipped
+
+    Validations can be mocked for testing purposes with `.mock_validations({...})`:
+
+    >>> from parameters_validation import non_blank
+    ...
+    ... @validate_parameters
+    ... def foo(s: non_blank(str)):
+    ...     pass
+    ...
+    ... foo.mock_validations({"s": lambda *_: print("mocked")})("")  # prints "mocked"
+
     :param func: decorated function
     :return: wrapped function
     """
     specs = inspect.getfullargspec(func)
-    @wraps(func)
-    def wrapper(*args, **kwargs):
-        parameters = get_parameter_value_dict(args, kwargs)
-        for parameter, annotation in specs.annotations.items():
-            if not hasattr(annotation, "_parameter_validation"):
-                continue
-            annotation(parameters[parameter], parameter)
-
-        return func(*args, **kwargs)
-
-    def get_parameter_value_dict(args, kwargs):
-        parameters = kwargs.copy()
-        for arg_value, parameter in zip(args, specs.args):
-            parameters[parameter] = arg_value
-        if specs.defaults:
-            for default_parameter, default_value in zip(
-                    specs.args[len(specs.args)-len(specs.defaults):], specs.defaults
-            ):
-                if default_parameter in parameters:
-                    continue
-                parameters[default_parameter] = default_value
-        if specs.kwonlydefaults:
-            for default_parameter, default_value in specs.kwonlydefaults.items():
-                if default_parameter in parameters:
-                    continue
-                parameters[default_parameter] = default_value
-        return parameters
-
-    return wrapper
+    return _get_wrapper(func, specs)
diff --git a/setup.py b/setup.py
index 128adc3..99d95d4 100644
--- a/setup.py
+++ b/setup.py
@@ -16,7 +16,7 @@ extras = {
 
 setup(
     name='parameters-validation',
-    version='1.1.5',
+    version='1.2.0',
     packages=['parameters_validation'],
     url='https://github.com/allrod5/parameters-validation',
     license='MIT',

