diff --git a/src/pymor/vectorarrays/block.py b/src/pymor/vectorarrays/block.py
index 3aa9eb29a..9fdb31fbd 100644
--- a/src/pymor/vectorarrays/block.py
+++ b/src/pymor/vectorarrays/block.py
@@ -65,6 +65,9 @@ class BlockVectorArray(VectorArray):
             return 0
 
     def __getitem__(self, ind):
+        if isinstance(ind, Number) and (ind >= len(self) or ind < -len(self)):
+            raise IndexError('VectorArray index out of range')
+        assert self.check_ind(ind)
         return BlockVectorArrayView(self, ind)
 
     def __delitem__(self, ind):
diff --git a/src/pymor/vectorarrays/interface.py b/src/pymor/vectorarrays/interface.py
index f2871ef06..7825d088a 100644
--- a/src/pymor/vectorarrays/interface.py
+++ b/src/pymor/vectorarrays/interface.py
@@ -664,14 +664,22 @@ class VectorArray(BasicObject):
         return len({i if i >= 0 else l+i for i in ind})
 
     def normalize_ind(self, ind):
-        """Normalize given indices such that they are independent of the array length."""
+        """Normalize given indices such that they are independent of the array length.
+
+        Does not check validity of the indices.
+        """
+        l = len(self)
         if type(ind) is slice:
-            return slice(*ind.indices(len(self)))
+            start, stop, step = ind.indices(l)
+            if start == stop:
+                return slice(0, 0, 1)
+            assert start >= 0
+            assert stop >= 0 or (step < 0 and stop >= -1)
+            return slice(start, None if stop == -1 else stop, step)
         elif not hasattr(ind, '__len__'):
-            ind = ind if 0 <= ind else len(self)+ind
+            ind = ind if 0 <= ind else l+ind
             return slice(ind, ind+1)
         else:
-            l = len(self)
             return [i if 0 <= i else l+i for i in ind]
 
     def sub_index(self, ind, ind_ind):
diff --git a/src/pymor/vectorarrays/list.py b/src/pymor/vectorarrays/list.py
index 8537648dd..23bd976bc 100644
--- a/src/pymor/vectorarrays/list.py
+++ b/src/pymor/vectorarrays/list.py
@@ -385,6 +385,7 @@ class ListVectorArray(VectorArray):
     def __getitem__(self, ind):
         if isinstance(ind, Number) and (ind >= len(self) or ind < -len(self)):
             raise IndexError('VectorArray index out of range')
+        assert self.check_ind(ind)
         return ListVectorArrayView(self, ind)
 
     def __delitem__(self, ind):
diff --git a/src/pymor/vectorarrays/mpi.py b/src/pymor/vectorarrays/mpi.py
index 9bb24aa4f..64dbb0c3e 100644
--- a/src/pymor/vectorarrays/mpi.py
+++ b/src/pymor/vectorarrays/mpi.py
@@ -13,6 +13,8 @@ The implementations are based on the event loop provided
 by :mod:`pymor.tools.mpi`.
 """
 
+from numbers import Number
+
 import numpy as np
 
 from pymor.core.pickle import unpicklable
@@ -54,12 +56,16 @@ class MPIVectorArray(VectorArray):
         return mpi.call(mpi.method_call, self.obj_id, '__len__')
 
     def __getitem__(self, ind):
+        if isinstance(ind, Number) and (ind >= len(self) or ind < -len(self)):
+            raise IndexError('VectorArray index out of range')
+        assert self.check_ind(ind)
         U = type(self)(mpi.call(mpi.method_call_manage, self.obj_id, '__getitem__', ind),
                        self.space)
         U.is_view = True
         return U
 
     def __delitem__(self, ind):
+        assert self.check_ind(ind)
         mpi.call(mpi.method_call, self.obj_id, '__delitem__', ind)
 
     def copy(self, deep=False):
diff --git a/src/pymor/vectorarrays/numpy.py b/src/pymor/vectorarrays/numpy.py
index e4e2c0981..67de3d149 100644
--- a/src/pymor/vectorarrays/numpy.py
+++ b/src/pymor/vectorarrays/numpy.py
@@ -70,6 +70,7 @@ class NumpyVectorArray(VectorArray):
     def __getitem__(self, ind):
         if isinstance(ind, Number) and (ind >= self._len or ind < -self._len):
             raise IndexError('VectorArray index out of range')
+        assert self.check_ind(ind)
         return NumpyVectorArrayView(self, ind)
 
     def __delitem__(self, ind):
@@ -451,7 +452,6 @@ class NumpyVectorArrayView(NumpyVectorArray):
     is_view = True
 
     def __init__(self, array, ind):
-        assert array.check_ind(ind)
         self.base = array
         self.ind = array.normalize_ind(ind)
         self.space = array.space
