diff --git a/src/pymortests/strategies.py b/src/pymortests/strategies.py
index 07ad9d0b6..0f17d2542 100644
--- a/src/pymortests/strategies.py
+++ b/src/pymortests/strategies.py
@@ -254,20 +254,15 @@ def valid_inds(v, length=None, random_module=None):
         yield []
 
 
-# TODO: remove old assumptions on slice values
-def _filtered_slices(length):
-    def _filter(sl):
-        return sl.step is None or sl.step > 0
-    return hyst.slices(length).filter(_filter)
-
-
 @hyst.composite
 def valid_indices(draw, array_strategy, length=None):
     v = draw(array_strategy)
     ints = hyst.integers(min_value=-len(v), max_value=max(len(v)-1, 0))
     indices = hyst.nothing()
     if length is None:
-        indices = indices | hyst.just([]) | hyst.lists(ints, max_size=2*len(v)) | _filtered_slices(len(v))
+        indices = indices | hyst.just([]) | hyst.lists(ints, max_size=2*len(v))
+    else:
+        indices = indices | hyst.slices(length)
     if len(v) > 0:
         inds = [-len(v), 0, len(v) - 1]
         if len(v) == length:
@@ -317,13 +312,13 @@ def st_valid_inds_of_same_length(draw, v1, v2):
     # `| hynp.integer_array_indices(shape=(LEN_X,))`
     if len1 == len2:
         ints = hyst.integers(min_value=-len1, max_value=max(len1 - 1, 0))
-        slicer = _filtered_slices(len1) | hyst.lists(ints, max_size=len1)
+        slicer = hyst.slices(len1) | hyst.lists(ints, max_size=len1)
         ret = ret | hyst.tuples(hyst.shared(slicer, key="st_valid_inds_of_same_length"),
                                 hyst.shared(slicer, key="st_valid_inds_of_same_length"))
     if len1 > 0 and len2 > 0:
         mlen = min(len1, len2)
         ints = hyst.integers(min_value=-mlen, max_value=max(mlen - 1, 0))
-        slicer = _filtered_slices(mlen) | ints | hyst.lists(ints, max_size=mlen)
+        slicer = hyst.slices(mlen) | ints | hyst.lists(ints, max_size=mlen)
         ret = ret | hyst.tuples(hyst.shared(slicer, key="st_valid_inds_of_same_length_uneven"),
                                 hyst.shared(slicer, key="st_valid_inds_of_same_length_uneven"))
     return draw(ret)
@@ -383,8 +378,8 @@ def st_valid_inds_of_different_length(draw, v1, v2):
 
     len1, len2 = len(v1), len(v2)
     # TODO we should include integer arrays here
-    val1 = _filtered_slices(len1)  # | hynp.integer_array_indices(shape=(len1,))
-    val2 = _filtered_slices(len2)  # | hynp.integer_array_indices(shape=(len1,))
+    val1 = hyst.slices(len1)  # | hynp.integer_array_indices(shape=(len1,))
+    val2 = hyst.slices(len2)  # | hynp.integer_array_indices(shape=(len1,))
     ret = hyst.tuples(val1, val2).filter(_filter)
     return draw(ret)
 
diff --git a/src/pymortests/vectorarray.py b/src/pymortests/vectorarray.py
index 28a0c972c..ad462ce85 100644
--- a/src/pymortests/vectorarray.py
+++ b/src/pymortests/vectorarray.py
@@ -315,6 +315,15 @@ def test_copy_repeated_index(vector_array):
             pass
 
 
+@pyst.given_vector_arrays(index_strategy=pyst.valid_indices)
+def test_normalize_ind(vectors_and_indices):
+    v, ind = vectors_and_indices
+    assert v.check_ind(ind)
+    normalized = v.normalize_ind(ind)
+    assert v.len_ind(normalized) == v.len_ind(ind)
+    assert v.len_ind_unique(normalized) == v.len_ind_unique(ind)
+
+
 @pyst.given_vector_arrays(count=2, index_strategy=pyst.pairs_both_lengths)
 def test_append(vectors_and_indices):
     (v1, v2), (_, ind) = vectors_and_indices
