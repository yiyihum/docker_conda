diff --git a/python/snewpy/flavor_transformation.py b/python/snewpy/flavor_transformation.py
index bab1190..d30959c 100644
--- a/python/snewpy/flavor_transformation.py
+++ b/python/snewpy/flavor_transformation.py
@@ -1144,23 +1144,14 @@ class NeutrinoDecay(FlavorTransformation):
         prob : float or ndarray
             Transition probability.
         """
-        pe_array = []
-
         # NMO case.
         if self.mass_order == MassHierarchy.NORMAL:
-            for energy in E:
-                pe_array.append(
-                    self.De1*(1-np.exp(-self.gamma(energy)*self.d)) +
-                    self.De3*np.exp(-self.gamma(energy)*self.d))
-            pe_array = np.array(pe_array)
+            pe_array = self.De1*(1-np.exp(-self.gamma(E)*self.d)) + \
+                       self.De3*np.exp(-self.gamma(E)*self.d)
         # IMO case.
         else:
-            for energy in E:
-                pe_array.append(
-                    self.De2*np.exp(-self.gamma(energy)*self.d) +
-                    self.De3*(1-np.exp(-self.gamma(energy)*self.d)))
-            pe_array = np.array(pe_array)
-
+            pe_array = self.De2*np.exp(-self.gamma(E)*self.d) + \
+                       self.De3*(1-np.exp(-self.gamma(E)*self.d))
         return pe_array
 
     def prob_ex(self, t, E):
@@ -1251,23 +1242,14 @@ class NeutrinoDecay(FlavorTransformation):
         prob : float or ndarray
             Transition probability.
         """
-        pxbar_array = []
-
         # NMO case.
         if self.mass_order == MassHierarchy.NORMAL:
-            for energy in E:
-                pxbar_array.append(
-                    self.De1*(1-np.exp(-self.gamma(energy)*self.d)) +
-                    self.De2 + self.De3*np.exp(-self.gamma(energy)*self.d))
-            pxbar_array = np.array(pxbar_array)
+            pxbar_array = self.De1*(1-np.exp(-self.gamma(E)*self.d)) + \
+                          self.De2 + self.De3*np.exp(-self.gamma(E)*self.d)
         # IMO case.
         else:
-            for energy in E:
-                pxbar_array.append(
-                    self.De1 + self.De2*np.exp(-self.gamma(energy)*self.d) +
-                    self.De3*(1-np.exp(-self.gamma(energy)*self.d)))
-            pxbar_array = np.array(pxbar_array)
-
+            pxbar_array = self.De1 + self.De2*np.exp(-self.gamma(E)*self.d) + \
+                          self.De3*(1-np.exp(-self.gamma(E)*self.d))
         return pxbar_array
 
     def prob_xxbar(self, t, E):
diff --git a/python/snewpy/models.py b/python/snewpy/models.py
index e807386..4778d0a 100644
--- a/python/snewpy/models.py
+++ b/python/snewpy/models.py
@@ -1018,7 +1018,7 @@ class Warren_2020(SupernovaModel):
         # Set model metadata.
         self.filename = os.path.basename(filename)
         self.EOS = eos
-        self.progenitor_mass = float(filename.split('_')[-1].strip('m%.h5')) * u.Msun
+        self.progenitor_mass = float(filename.split('_')[-1][1:-3]) * u.Msun
         self.turbmixing_param = float(filename.split('_')[-2].strip('a%'))
 
         # Get grid of model times.
@@ -1251,7 +1251,12 @@ class Fornax_2019(SupernovaModel):
         # Set up model metadata.
         self.filename = filename
 
-        self.progenitor_mass = float(filename.split('_')[-1][:-4]) * u.Msun
+        mass_str = filename.split('_')[-1]
+        if 'M' in mass_str:
+            self.progenitor_mass = float(mass_str[:-4]) * u.Msun
+        else:
+            mass_str = filename.split('_')[-2]
+            self.progenitor_mass = float(mass_str[:-1]) * u.Msun
 
         self.fluxunit = 1e50 * u.erg/(u.s*u.MeV)
         self.time = None
@@ -1637,7 +1642,7 @@ class Fornax_2021(SupernovaModel):
             Absolute or relative path to FITS file with model data.
         """
         # Set up model metadata.
-        self.progenitor_mass = float(filename.split('_')[-3][:-1]) * u.Msun
+        self.progenitor_mass = float(filename.split('/')[-1].split('_')[2][:-1]) * u.Msun
 
         # Conversion of flavor to key name in the model HDF5 file.
         self._flavorkeys = { Flavor.NU_E : 'nu0',
