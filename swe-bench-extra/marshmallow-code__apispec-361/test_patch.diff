diff --git a/tests/test_ext_marshmallow.py b/tests/test_ext_marshmallow.py
index 72271ad..4437a29 100644
--- a/tests/test_ext_marshmallow.py
+++ b/tests/test_ext_marshmallow.py
@@ -425,6 +425,66 @@ class TestOperationHelper:
             spec_fixture.spec,
         ) + 'Pet'
 
+    def test_schema_uses_ref_if_available_name_resolver_returns_none_v2(self):
+        def resolver(schema):
+            return None
+        spec = APISpec(
+            title='Test auto-reference',
+            version='0.1',
+            openapi_version='2.0',
+            plugins=(
+                MarshmallowPlugin(schema_name_resolver=resolver,),
+            ),
+        )
+        spec.components.schema('Pet', schema=PetSchema)
+        spec.path(
+            path='/pet',
+            operations={
+                'get': {
+                    'responses': {
+                        200: {
+                            'schema': PetSchema,
+                        },
+                    },
+                },
+            },
+        )
+        get = get_paths(spec)['/pet']['get']
+        assert get['responses'][200]['schema']['$ref'] == ref_path(spec) + 'Pet'
+
+    def test_schema_uses_ref_if_available_name_resolver_returns_none_v3(self):
+        def resolver(schema):
+            return None
+        spec = APISpec(
+            title='Test auto-reference',
+            version='0.1',
+            openapi_version='3.0.0',
+            plugins=(
+                MarshmallowPlugin(schema_name_resolver=resolver,),
+            ),
+        )
+        spec.components.schema('Pet', schema=PetSchema)
+        spec.path(
+            path='/pet',
+            operations={
+                'get': {
+                    'responses': {
+                        200: {
+                            'content': {
+                                'application/json': {
+                                    'schema': PetSchema,
+                                },
+                            },
+                        },
+                    },
+                },
+            },
+        )
+        get = get_paths(spec)['/pet']['get']
+        assert get['responses'][200]['content']['application/json']['schema']['$ref'] == ref_path(
+            spec,
+        ) + 'Pet'
+
     @pytest.mark.parametrize('spec_fixture', ('2.0', ), indirect=True)
     def test_schema_uses_ref_in_parameters_and_request_body_if_available_v2(self, spec_fixture):
         spec_fixture.spec.components.schema('Pet', schema=PetSchema)
diff --git a/tests/test_openapi.py b/tests/test_openapi.py
index df990b3..a8b83b5 100644
--- a/tests/test_openapi.py
+++ b/tests/test_openapi.py
@@ -648,6 +648,20 @@ class TestNesting:
 
         assert props['category']['items'] == {'$ref': ref_path(spec_fixture.spec) + 'Category'}
 
+    @pytest.mark.parametrize('modifier', ('only', 'exclude'))
+    def test_schema2jsonschema_with_nested_fields_only_exclude(self, spec_fixture, modifier):
+        class Child(Schema):
+            i = fields.Int()
+            j = fields.Int()
+
+        class Parent(Schema):
+            child = fields.Nested(Child, **{modifier: ('i', )})
+
+        spec_fixture.openapi.schema2jsonschema(Parent)
+        props = get_definitions(spec_fixture.spec)['Child']['properties']
+        assert ('i' in props) == (modifier == 'only')
+        assert ('j' not in props) == (modifier == 'only')
+
     def test_schema2jsonschema_with_nested_fields_with_adhoc_changes(self, spec_fixture):
         category_schema = CategorySchema(many=True)
         category_schema.fields['id'].required = True
