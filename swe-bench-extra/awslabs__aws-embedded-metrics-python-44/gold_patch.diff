diff --git a/aws_embedded_metrics/sinks/tcp_client.py b/aws_embedded_metrics/sinks/tcp_client.py
index a1e3a93..5ff737d 100644
--- a/aws_embedded_metrics/sinks/tcp_client.py
+++ b/aws_embedded_metrics/sinks/tcp_client.py
@@ -15,6 +15,7 @@ from aws_embedded_metrics.sinks import SocketClient
 import logging
 import socket
 import threading
+import errno
 from urllib.parse import ParseResult
 
 log = logging.getLogger(__name__)
@@ -25,24 +26,44 @@ log = logging.getLogger(__name__)
 class TcpClient(SocketClient):
     def __init__(self, endpoint: ParseResult):
         self._endpoint = endpoint
-        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
-        self._write_lock = threading.Lock()
+        # using reentrant lock so that we can retry through recursion
+        self._write_lock = threading.RLock()
+        self._connect_lock = threading.RLock()
         self._should_connect = True
 
     def connect(self) -> "TcpClient":
-        try:
-            self._sock.connect((self._endpoint.hostname, self._endpoint.port))
-            self._should_connect = False
-        except socket.timeout as e:
-            log.error("Socket timeout durring connect %s" % (e,))
-            self._should_connect = True
-        except Exception as e:
-            log.error("Failed to connect to the socket. %s" % (e,))
-            self._should_connect = True
-        return self
-
-    def send_message(self, message: bytes) -> None:
-        if self._sock._closed or self._should_connect:  # type: ignore
+        with self._connect_lock:
+            try:
+                self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+                self._sock.connect((self._endpoint.hostname, self._endpoint.port))
+                self._should_connect = False
+            except socket.timeout as e:
+                log.error("Socket timeout durring connect %s" % (e,))
+            except OSError as e:
+                if e.errno == errno.EISCONN:
+                    log.debug("Socket is already connected.")
+                    self._should_connect = False
+                else:
+                    log.error("Failed to connect to the socket. %s" % (e,))
+                    self._should_connect = True
+            except Exception as e:
+                log.error("Failed to connect to the socket. %s" % (e,))
+                self._should_connect = True
+            return self
+
+    # TODO: once #21 lands, we should increase the max retries
+    #       the reason this is only 1 is to allow for a single
+    #       reconnect attempt in case the agent disconnects
+    #       additional retries and backoff would impose back
+    #       pressure on the caller that may not be accounted
+    #       for. Before we do that, we need to run the I/O
+    #       operations on a background thread.s
+    def send_message(self, message: bytes, retry: int = 1) -> None:
+        if retry < 0:
+            log.error("Max retries exhausted, dropping message")
+            return
+
+        if self._sock is None or self._sock._closed or self._should_connect:  # type: ignore
             self.connect()
 
         with self._write_lock:
@@ -52,9 +73,12 @@ class TcpClient(SocketClient):
             except socket.timeout as e:
                 log.error("Socket timeout durring send %s" % (e,))
                 self.connect()
+                self.send_message(message, retry - 1)
             except socket.error as e:
                 log.error("Failed to write metrics to the socket due to socket.error. %s" % (e,))
                 self.connect()
+                self.send_message(message, retry - 1)
             except Exception as e:
                 log.error("Failed to write metrics to the socket due to exception. %s" % (e,))
                 self.connect()
+                self.send_message(message, retry - 1)
diff --git a/setup.py b/setup.py
index f6490c8..8f8a4a7 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@ with open("README.md", "r") as fh:
 
 setup(
     name="aws-embedded-metrics",
-    version="1.0.3",
+    version="1.0.4",
     author="Amazon Web Services",
     author_email="jarnance@amazon.com",
     description="AWS Embedded Metrics Package",
