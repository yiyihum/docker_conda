diff --git a/docs/mobly.rst b/docs/mobly.rst
index ee4b412..91ecb1b 100644
--- a/docs/mobly.rst
+++ b/docs/mobly.rst
@@ -35,6 +35,14 @@ mobly.config_parser module
     :undoc-members:
     :show-inheritance:
 
+mobly.expects module
+--------------------------
+
+.. automodule:: mobly.expects
+    :members:
+    :undoc-members:
+    :show-inheritance:
+
 mobly.keys module
 -----------------
 
@@ -59,6 +67,14 @@ mobly.records module
     :undoc-members:
     :show-inheritance:
 
+mobly.runtime_test_info module
+------------------------------
+
+.. automodule:: mobly.runtime_test_info
+    :members:
+    :undoc-members:
+    :show-inheritance:
+
 mobly.signals module
 --------------------
 
@@ -67,6 +83,14 @@ mobly.signals module
     :undoc-members:
     :show-inheritance:
 
+mobly.suite_runner module
+-------------------------
+
+.. automodule:: mobly.suite_runner
+    :members:
+    :undoc-members:
+    :show-inheritance:
+
 mobly.test_runner module
 ------------------------
 
diff --git a/mobly/controllers/android_device.py b/mobly/controllers/android_device.py
index 14828a4..746f819 100644
--- a/mobly/controllers/android_device.py
+++ b/mobly/controllers/android_device.py
@@ -436,8 +436,9 @@ class AndroidDevice(object):
         self._log_path = os.path.join(self._log_path_base,
                                       'AndroidDevice%s' % self._serial)
         self._debug_tag = self._serial
-        self.log = AndroidDeviceLoggerAdapter(logging.getLogger(),
-                                              {'tag': self.debug_tag})
+        self.log = AndroidDeviceLoggerAdapter(logging.getLogger(), {
+            'tag': self.debug_tag
+        })
         self.sl4a = None
         self.ed = None
         self._adb_logcat_process = None
@@ -680,6 +681,9 @@ class AndroidDevice(object):
         execution result after device got reconnected.
 
         Example Usage:
+
+        .. code-block:: python
+
             with ad.handle_usb_disconnect():
                 try:
                   # User action that triggers USB disconnect, could throw
@@ -842,9 +846,12 @@ class AndroidDevice(object):
         """Starts the snippet apk with the given package name and connects.
 
         Examples:
-            >>> ad.load_snippet(
+
+        .. code-block:: python
+
+            ad.load_snippet(
                     name='maps', package='com.google.maps.snippets')
-            >>> ad.maps.activateZoom('3')
+            ad.maps.activateZoom('3')
 
         Args:
             name: The attribute name to which to attach the snippet server.
diff --git a/mobly/controllers/android_device_lib/adb.py b/mobly/controllers/android_device_lib/adb.py
index 12c14bd..db705e7 100644
--- a/mobly/controllers/android_device_lib/adb.py
+++ b/mobly/controllers/android_device_lib/adb.py
@@ -237,7 +237,8 @@ class AdbProxy(object):
 
     def forward(self, args=None, shell=False):
         with ADB_PORT_LOCK:
-            return self._exec_adb_cmd('forward', args, shell, timeout=None)
+            return self._exec_adb_cmd(
+                'forward', args, shell, timeout=None, stderr=None)
 
     def instrument(self, package, options=None, runner=None):
         """Runs an instrumentation command on the device.
@@ -245,6 +246,9 @@ class AdbProxy(object):
         This is a convenience wrapper to avoid parameter formatting.
 
         Example:
+
+        .. code-block:: python
+
             device.instrument(
                 'com.my.package.test',
                 options = {
diff --git a/mobly/suite_runner.py b/mobly/suite_runner.py
index a7e5f16..468b7e7 100644
--- a/mobly/suite_runner.py
+++ b/mobly/suite_runner.py
@@ -16,6 +16,8 @@
 To create a test suite, call suite_runner.run_suite() with one or more
 individual test classes. For example:
 
+.. code-block:: python
+
     from mobly import suite_runner
 
     from my.test.lib import foo_test
@@ -103,7 +105,7 @@ def run_suite(test_classes, argv=None):
         sys.exit(1)
 
 
-def _compute_selected_tests(test_classes, selected_tests):
+def compute_selected_tests(test_classes, selected_tests):
     """Computes tests to run for each class from selector strings.
 
     This function transforms a list of selector strings (such as FooTest or
@@ -112,24 +114,34 @@ def _compute_selected_tests(test_classes, selected_tests):
     that class are selected.
 
     Args:
-        test_classes: (list of class) all classes that are part of this suite.
-        selected_tests: (list of string) list of tests to execute, eg:
-            [
-                'FooTest',
-                'BarTest',
-                'BazTest.test_method_a',
-                'BazTest.test_method_b'
-            ].
-            May be empty, in which case all tests in the class are selected.
+        test_classes: list of strings, names of all the classes that are part
+            of a suite.
+        selected_tests: list of strings, list of tests to execute. If empty,
+            all classes `test_classes` are selected. E.g.
+
+            .. code-block:: python
+
+                [
+                    'FooTest',
+                    'BarTest',
+                    'BazTest.test_method_a',
+                    'BazTest.test_method_b'
+                ]
 
     Returns:
-        dict: test_name class -> list(test_name name):
-        identifiers for TestRunner. For the above example:
-        {
-            FooTest: None,
-            BarTest: None,
-            BazTest: ['test_method_a', 'test_method_b'],
-        }
+        dict: Identifiers for TestRunner. Keys are test class names; valures
+            are lists of test names within class. E.g. the example in
+            `selected_tests` would translate to:
+
+            .. code-block:: python
+
+                {
+                    FooTest: None,
+                    BarTest: None,
+                    BazTest: ['test_method_a', 'test_method_b']
+                }
+
+            This dict is easy to consume for `TestRunner`.
     """
     class_to_tests = collections.OrderedDict()
     if not selected_tests:
