diff --git a/pints/tests/test_opt_optimisation_controller.py b/pints/tests/test_opt_optimisation_controller.py
index 37ec7fde..81c26191 100755
--- a/pints/tests/test_opt_optimisation_controller.py
+++ b/pints/tests/test_opt_optimisation_controller.py
@@ -26,6 +26,57 @@ class TestOptimisationController(unittest.TestCase):
         """ Called before every test """
         np.random.seed(1)
 
+    def test_callback(self):
+        # Tests running with a callback method
+
+        # Define callback that just stores the argument(s) it was called with
+        args = []
+
+        def cb(*arg):
+            args.append(arg)
+
+        # Set up a controller
+        r = pints.toy.TwistedGaussianLogPDF(2, 0.01)
+        x0 = np.array([0, 1.01])
+        s = 0.01
+        opt = pints.OptimisationController(r, x0, s, method=method)
+        opt.set_log_to_screen(False)
+        opt.set_max_unchanged_iterations(None)
+        opt.set_max_iterations(10)
+
+        # Pass in an invalid value
+        self.assertRaisesRegex(
+            ValueError, 'None or a callable', opt.set_callback, 3)
+
+        # Now test using it correctly
+        opt.set_callback(None)
+        opt.set_callback(cb)
+        opt.run()
+
+        # Ensure callback was called at each iteration
+        self.assertEqual(len(args), opt.iterations())
+
+        # Ensure first argument was iteration count
+        a = np.array([arg[0] for arg in args])
+        self.assertTrue(np.all(a == np.arange(opt.iterations())))
+
+        # Ensure second argument was always the optimisation method
+        b = tuple(set([arg[1] for arg in args]))
+        self.assertEqual(len(b), 1)
+        self.assertIs(b[0], opt.optimiser())
+
+        # Check unsetting works
+        args.clear()
+        self.assertEqual(len(args), 0)
+        opt = pints.OptimisationController(r, x0, s, method=method)
+        opt.set_log_to_screen(False)
+        opt.set_max_unchanged_iterations(None)
+        opt.set_max_iterations(10)
+        opt.set_callback(cb)
+        opt.set_callback(None)
+        opt.run()
+        self.assertEqual(len(args), 0)
+
     def test_optimise(self):
         # Tests :meth: `pints.optimise()`.
 
