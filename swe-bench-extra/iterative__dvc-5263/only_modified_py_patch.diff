diff --git a/dvc/cli.py b/dvc/cli.py
--- a/dvc/cli.py
+++ b/dvc/cli.py
@@ -39,6 +39,7 @@
     repro,
     root,
     run,
+    stage,
     unprotect,
     update,
     version,
@@ -82,6 +83,7 @@
     update,
     git_hook,
     plots,
+    stage,
     experiments,
     check_ignore,
     live,
diff --git a/dvc/command/run.py b/dvc/command/run.py
--- a/dvc/command/run.py
+++ b/dvc/command/run.py
@@ -1,7 +1,6 @@
 import argparse
 import logging
 
-from dvc.command import completion
 from dvc.command.base import CmdBase, append_doc_link
 from dvc.exceptions import DvcException
 
@@ -43,8 +42,8 @@ def run(self):
                 plots=self.args.plots,
                 plots_no_cache=self.args.plots_no_cache,
                 live=self.args.live,
-                live_summary=not self.args.live_no_summary,
-                live_report=not self.args.live_no_report,
+                live_no_summary=self.args.live_no_summary,
+                live_no_report=self.args.live_no_report,
                 deps=self.args.deps,
                 params=self.args.params,
                 fname=self.args.file,
@@ -91,6 +90,8 @@ def _quote_argument(self, argument):
 
 
 def add_parser(subparsers, parent_parser):
+    from dvc.command.stage import _add_common_args
+
     RUN_HELP = "Generate a stage file from a command and execute the command."
     run_parser = subparsers.add_parser(
         "run",
@@ -99,109 +100,19 @@ def add_parser(subparsers, parent_parser):
         help=RUN_HELP,
         formatter_class=argparse.RawDescriptionHelpFormatter,
     )
-    run_parser.add_argument(
-        "-d",
-        "--deps",
-        action="append",
-        default=[],
-        help="Declare dependencies for reproducible cmd.",
-        metavar="<path>",
-    ).complete = completion.FILE
     run_parser.add_argument(
         "-n", "--name", help="Stage name.",
     )
-    run_parser.add_argument(
-        "-o",
-        "--outs",
-        action="append",
-        default=[],
-        help="Declare output file or directory.",
-        metavar="<filename>",
-    ).complete = completion.FILE
-    run_parser.add_argument(
-        "-O",
-        "--outs-no-cache",
-        action="append",
-        default=[],
-        help="Declare output file or directory "
-        "(do not put into DVC cache).",
-        metavar="<filename>",
-    ).complete = completion.FILE
-    run_parser.add_argument(
-        "-p",
-        "--params",
-        action="append",
-        default=[],
-        help="Declare parameter to use as additional dependency.",
-        metavar="[<filename>:]<params_list>",
-    ).complete = completion.FILE
-    run_parser.add_argument(
-        "-m",
-        "--metrics",
-        action="append",
-        default=[],
-        help="Declare output metrics file.",
-        metavar="<path>",
-    )
-    run_parser.add_argument(
-        "-M",
-        "--metrics-no-cache",
-        action="append",
-        default=[],
-        help="Declare output metrics file (do not put into DVC cache).",
-        metavar="<path>",
-    )
-    run_parser.add_argument(
-        "--plots",
-        action="append",
-        default=[],
-        help="Declare output plot file.",
-        metavar="<path>",
-    )
-    run_parser.add_argument(
-        "--plots-no-cache",
-        action="append",
-        default=[],
-        help="Declare output plot file (do not put into DVC cache).",
-        metavar="<path>",
-    )
-    run_parser.add_argument(
-        "--live", help="Declare output as dvclive.", metavar="<path>",
-    )
-    run_parser.add_argument(
-        "--live-no-summary",
-        action="store_true",
-        default=False,
-        help="Signal dvclive logger to not dump latest metrics file.",
-    )
-    run_parser.add_argument(
-        "--live-no-report",
-        action="store_true",
-        default=False,
-        help="Signal dvclive logger to not produce training report.",
-    )
+    _add_common_args(run_parser)
     run_parser.add_argument(
         "--file", metavar="<filename>", help=argparse.SUPPRESS,
     )
-    run_parser.add_argument(
-        "-w",
-        "--wdir",
-        help="Directory within your repo to run your command in.",
-        metavar="<path>",
-    )
     run_parser.add_argument(
         "--no-exec",
         action="store_true",
         default=False,
         help="Only create stage file without actually running it.",
     )
-    run_parser.add_argument(
-        "-f",
-        "--force",
-        action="store_true",
-        default=False,
-        help="Overwrite existing stage",
-    )
     run_parser.add_argument(
         "--no-run-cache",
         action="store_true",
@@ -217,57 +128,12 @@ def add_parser(subparsers, parent_parser):
         default=False,
         help="Don't put files/directories into cache.",
     )
-    run_parser.add_argument(
-        "--outs-persist",
-        action="append",
-        default=[],
-        help="Declare output file or directory that will not be "
-        "removed upon repro.",
-        metavar="<filename>",
-    )
-    run_parser.add_argument(
-        "--outs-persist-no-cache",
-        action="append",
-        default=[],
-        help="Declare output file or directory that will not be "
-        "removed upon repro (do not put into DVC cache).",
-        metavar="<filename>",
-    )
-    run_parser.add_argument(
-        "-c",
-        "--checkpoints",
-        action="append",
-        default=[],
-        help=argparse.SUPPRESS,
-        metavar="<filename>",
-    ).complete = completion.FILE
-    run_parser.add_argument(
-        "--always-changed",
-        action="store_true",
-        default=False,
-        help="Always consider this DVC-file as changed.",
-    )
     run_parser.add_argument(
         "--single-stage",
         action="store_true",
         default=False,
         help=argparse.SUPPRESS,
     )
-    run_parser.add_argument(
-        "--external",
-        action="store_true",
-        default=False,
-        help="Allow outputs that are outside of the DVC repository.",
-    )
-    run_parser.add_argument(
-        "--desc",
-        type=str,
-        metavar="<text>",
-        help=(
-            "User description of the stage (optional). "
-            "This doesn't affect any DVC operations."
-        ),
-    )
     run_parser.add_argument(
         "command", nargs=argparse.REMAINDER, help="Command to execute."
     )
diff --git a/dvc/repo/run.py b/dvc/repo/run.py
--- a/dvc/repo/run.py
+++ b/dvc/repo/run.py
@@ -1,7 +1,5 @@
 from typing import TYPE_CHECKING
 
-from dvc.exceptions import InvalidArgumentError
-
 from . import locked
 from .scm_context import scm_context
 
@@ -20,27 +18,10 @@ def run(
 ):
     from dvc.stage.utils import check_graphs, create_stage_from_cli
 
-    if not kwargs.get("cmd"):
-        raise InvalidArgumentError("command is not specified")
-
-    stage_name = kwargs.get("name")
-    if stage_name and single_stage:
-        raise InvalidArgumentError(
-            "`-n|--name` is incompatible with `--single-stage`"
-        )
-
-    if stage_name and fname:
-        raise InvalidArgumentError(
-            "`--file` is currently incompatible with `-n|--name` "
-            "and requires `--single-stage`"
-        )
-
-    if not stage_name and not single_stage:
-        raise InvalidArgumentError("`-n|--name` is required")
-
     stage = create_stage_from_cli(
         self, single_stage=single_stage, fname=fname, **kwargs
     )
+
     if kwargs.get("run_cache", True) and stage.can_be_skipped:
         return None
 
diff --git a/dvc/stage/utils.py b/dvc/stage/utils.py
--- a/dvc/stage/utils.py
+++ b/dvc/stage/utils.py
@@ -6,6 +6,7 @@
 
 from funcy import concat, first, lsplit, rpartial, without
 
+from dvc.exceptions import InvalidArgumentError
 from dvc.utils.cli_parse import parse_params
 from dvc.utils.collections import chunk_dict
 
@@ -352,17 +353,37 @@ def create_stage_from_cli(
 
     from . import PipelineStage, Stage, create_stage, restore_meta
 
+    cmd = kwargs.get("cmd")
+    if not cmd:
+        raise InvalidArgumentError("command is not specified")
+
+    stage_name = kwargs.get("name")
+    if stage_name and single_stage:
+        raise InvalidArgumentError(
+            "`-n|--name` is incompatible with `--single-stage`"
+        )
+    if stage_name and fname:
+        raise InvalidArgumentError(
+            "`--file` is currently incompatible with `-n|--name` "
+            "and requires `--single-stage`"
+        )
+    if not stage_name and not single_stage:
+        raise InvalidArgumentError("`-n|--name` is required")
+
     if single_stage:
         kwargs.pop("name", None)
         stage_cls = Stage
         path = fname or _get_file_path(kwargs)
     else:
-        stage_name = kwargs.get("name", None)
         path = PIPELINE_FILE
         stage_cls = PipelineStage
         if not (stage_name and is_valid_name(stage_name)):
             raise InvalidStageName
 
+    kwargs["cmd"] = cmd[0] if isinstance(cmd, list) and len(cmd) == 1 else cmd
+    kwargs["live_summary"] = not kwargs.pop("live_no_summary", False)
+    kwargs["live_report"] = not kwargs.pop("live_no_report", False)
+
     params = chunk_dict(parse_params(kwargs.pop("params", [])))
     stage = create_stage(
         stage_cls, repo=repo, path=path, params=params, **kwargs

