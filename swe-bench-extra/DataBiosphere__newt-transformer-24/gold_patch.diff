diff --git a/newt/transform/gen3old.py b/newt/transform/gen3old.py
index 2c1ac2f..6c0c940 100644
--- a/newt/transform/gen3old.py
+++ b/newt/transform/gen3old.py
@@ -34,13 +34,17 @@ class Gen3Transformer(AbstractTransformer):
 
     @staticmethod
     def _build_metadata_dict(input_metadata):
-        def build_metadata_field(metadata, field_name: str):
+        def build_metadata_field(metadata, field_name: str, key: str):
             """
             Builds dict from metadata where key is node_id, value is the corresponding metadata
             """
-            return {entry['node_id']: entry for entry in metadata[field_name]}
+            return {entry[key]: entry for entry in metadata[field_name]}
         for field in input_metadata:
-            input_metadata[field] = build_metadata_field(input_metadata, field)
+            if field == 'project' or field == 'program':
+                key = 'id'
+            else:
+                key = 'node_id'
+            input_metadata[field] = build_metadata_field(input_metadata, field, key)
         return input_metadata
 
     def __init__(self, input_dict: dict) -> None:
diff --git a/newt/transform/gen3standard.py b/newt/transform/gen3standard.py
index 5970385..c68389d 100644
--- a/newt/transform/gen3standard.py
+++ b/newt/transform/gen3standard.py
@@ -38,7 +38,8 @@ class Bundle(dict):
         self['data_bundle'] = self.data_bundle
         self['data_objects'] = self.data_objects
 
-    def add_metadata_field(self, metadata_source: dict,
+    def add_metadata_field(self,
+                           metadata_source: dict,
                            source_field_name: str,
                            linked_field_name: str,
                            link_name: str):
@@ -57,7 +58,6 @@ class Bundle(dict):
             linked_field_dict = metadata_source[linked_field_name][linked_field_key]
             # Add it to this bundle's metadata
             self.metadata[linked_field_name] = linked_field_dict
-
         else:
             # When the item is a child of an existing field
             # Get the ID from the item we already have
@@ -104,13 +104,18 @@ class Gen3Transformer(AbstractTransformer):
 
     @staticmethod
     def _build_metadata_dict(input_metadata):
-        def build_metadata_field(metadata, field_name: str):
+        def build_metadata_field(metadata, field_name: str, key: str):
             """
             Builds dict from metadata where key is node_id, value is the corresponding metadata
             """
-            return {entry['node_id']: entry for entry in metadata[field_name]}
+            return {entry[key]: entry for entry in metadata[field_name]}
         for field in input_metadata:
-            input_metadata[field] = build_metadata_field(input_metadata, field)
+            # Working around details of gen3 data model
+            if field == 'project' or field == 'program':
+                key = 'id'
+            else:
+                key = 'node_id'
+            input_metadata[field] = build_metadata_field(input_metadata, field, key)
         return input_metadata
 
     def __init__(self, input_dict: dict) -> None:
@@ -124,7 +129,8 @@ class Gen3Transformer(AbstractTransformer):
                                 MetadataLink('aliquot', 'sample', 'samples.id#1'),
                                 MetadataLink('sample', 'case', 'cases.id'),
                                 MetadataLink('case', 'study', 'studies.id#1'),
-                                MetadataLink('demographic', 'case', 'cases.id')
+                                MetadataLink('demographic', 'case', 'cases.id'),
+                                MetadataLink('study', 'project', 'projects.id')
                                 ]
 
     def _build_bundle(self, metadata_dict: dict):
diff --git a/scripts/data_bleach.py b/scripts/data_bleach.py
index c14fc27..fe3ec49 100644
--- a/scripts/data_bleach.py
+++ b/scripts/data_bleach.py
@@ -13,6 +13,7 @@ PUBLIC_FIELDS = [x.split('.') for x in [
     "sample.biospecimen_type",
     "sample.composition",
     "sample.node_id",
+    "sample.submitter_id",
     "demographic.bmi",
     "demographic.weight",
     "demographic.height",
@@ -24,7 +25,9 @@ PUBLIC_FIELDS = [x.split('.') for x in [
     "aliquot.experimental_strategy",
     "aliquot.analyte_isolation_method",
     "sample.biospecimen_anatomic_site_detail",
-    "sample.biospecimen_anatomic_site"]]
+    "sample.biospecimen_anatomic_site",
+    "project.code",
+    "project.name"]]
 
 
 def error(*args, **kwargs):
