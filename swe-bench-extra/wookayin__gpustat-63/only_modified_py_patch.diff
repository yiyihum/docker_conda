diff --git a/gpustat/__main__.py b/gpustat/__main__.py
index dab7954..8de332f 100644
--- a/gpustat/__main__.py
+++ b/gpustat/__main__.py
@@ -79,6 +79,8 @@ def main(*argv):
                         help='Display username of running process')
     parser.add_argument('-p', '--show-pid', action='store_true',
                         help='Display PID of running process')
+    parser.add_argument('-F', '--show-fan', action='store_true',
+                        help='Display GPU fan speed')
     parser.add_argument('--json', action='store_true', default=False,
                         help='Print all the information in JSON format')
     parser.add_argument('-v', '--version', action='version',
diff --git a/gpustat/core.py b/gpustat/core.py
index 85c85cf..dad85a3 100644
--- a/gpustat/core.py
+++ b/gpustat/core.py
@@ -107,6 +107,15 @@ class GPUStat(object):
         v = self.entry['temperature.gpu']
         return int(v) if v is not None else None
 
+    @property
+    def fan(self):
+        """
+        Returns the fan percentage of GPU as an integer,
+        or None if the information is not available.
+        """
+        v = self.entry['fan.speed']
+        return int(v) if v is not None else None
+
     @property
     def utilization(self):
         """
@@ -147,6 +156,7 @@ class GPUStat(object):
                  show_user=False,
                  show_pid=False,
                  show_power=None,
+                 show_fan=None,
                  gpuname_width=16,
                  term=Terminal(),
                  ):
@@ -165,6 +175,8 @@ class GPUStat(object):
         colors['CName'] = term.blue
         colors['CTemp'] = _conditional(lambda: self.temperature < 50,
                                        term.red, term.bold_red)
+        colors['FSpeed'] = _conditional(lambda: self.fan < 50,
+                                        term.yellow, term.bold_yellow)
         colors['CMemU'] = term.bold_yellow
         colors['CMemT'] = term.yellow
         colors['CMemP'] = term.yellow
@@ -189,8 +201,12 @@ class GPUStat(object):
         # temperature and utilization
         reps = "%(C1)s[{entry[index]}]%(C0)s " \
             "%(CName)s{entry[name]:{gpuname_width}}%(C0)s |" \
-            "%(CTemp)s{entry[temperature.gpu]:>3}'C%(C0)s, " \
-            "%(CUtil)s{entry[utilization.gpu]:>3} %%%(C0)s"
+            "%(CTemp)s{entry[temperature.gpu]:>3}'C%(C0)s, "
+
+        if show_fan:
+            reps += "%(FSpeed)s{entry[fan.speed]:>3} %%%(C0)s, "
+
+        reps += "%(CUtil)s{entry[utilization.gpu]:>3} %%%(C0)s"
 
         if show_power:
             reps += ",  %(CPowU)s{entry[power.draw]:>3}%(C0)s "
@@ -300,6 +316,11 @@ class GPUStatCollection(object):
             except N.NVMLError:
                 temperature = None  # Not supported
 
+            try:
+                fan_speed = N.nvmlDeviceGetFanSpeed(handle)
+            except N.NVMLError:
+                fan_speed = None  # Not supported
+
             try:
                 memory = N.nvmlDeviceGetMemoryInfo(handle)  # in Bytes
             except N.NVMLError:
@@ -354,6 +375,7 @@ class GPUStatCollection(object):
                 'uuid': uuid,
                 'name': name,
                 'temperature.gpu': temperature,
+                'fan.speed': fan_speed,
                 'utilization.gpu': utilization.gpu if utilization else None,
                 'power.draw': power // 1000 if power is not None else None,
                 'enforced.power.limit': power_limit // 1000
@@ -403,7 +425,7 @@ class GPUStatCollection(object):
 
     def print_formatted(self, fp=sys.stdout, force_color=False, no_color=False,
                         show_cmd=False, show_user=False, show_pid=False,
-                        show_power=None, gpuname_width=16,
+                        show_power=None, show_fan=None, gpuname_width=16,
                         show_header=True,
                         eol_char=os.linesep,
                         **kwargs
@@ -453,6 +475,7 @@ class GPUStatCollection(object):
                        show_user=show_user,
                        show_pid=show_pid,
                        show_power=show_power,
+                       show_fan=show_fan,
                        gpuname_width=gpuname_width,
                        term=t_color)
             fp.write(eol_char)

