diff --git a/jsons/__init__.py b/jsons/__init__.py
index 188961e..14168e8 100644
--- a/jsons/__init__.py
+++ b/jsons/__init__.py
@@ -91,6 +91,7 @@ from enum import Enum
 from typing import Union, List, Tuple, Iterable
 from uuid import UUID
 from decimal import Decimal
+from pathlib import PurePath
 from jsons._common_impl import NoneType
 from jsons._key_transformers import snakecase, camelcase, pascalcase, lispcase
 from jsons import (
@@ -160,6 +161,7 @@ default_object_serializer = serializers.default_object_serializer
 default_decimal_serializer = serializers.default_decimal_serializer
 default_uuid_serializer = serializers.default_uuid_serializer
 default_union_serializer = serializers.default_union_serializer
+default_path_serializer = serializers.default_path_serializer
 
 default_list_deserializer = deserializers.default_list_deserializer
 default_tuple_deserializer = deserializers.default_tuple_deserializer
@@ -180,6 +182,7 @@ default_iterable_deserializer = deserializers.default_iterable_deserializer
 default_object_deserializer = deserializers.default_object_deserializer
 default_uuid_deserializer = deserializers.default_uuid_deserializer
 default_decimal_deserializer = deserializers.default_decimal_deserializer
+default_path_deserializer = deserializers.default_path_deserializer
 
 # Set the serializers:
 set_serializer(default_tuple_serializer, (tuple, Tuple))
@@ -197,6 +200,7 @@ set_serializer(default_object_serializer, object, False)
 set_serializer(default_uuid_serializer, UUID)
 set_serializer(default_decimal_serializer, Decimal)
 set_serializer(default_union_serializer, Union)
+set_serializer(default_path_serializer, PurePath)
 
 # Set the deserializers:
 set_deserializer(default_list_deserializer, (list, List))
@@ -217,3 +221,4 @@ set_deserializer(default_object_deserializer, object, False)
 set_deserializer(default_uuid_deserializer, UUID)
 set_deserializer(default_complex_deserializer, complex)
 set_deserializer(default_decimal_deserializer, Decimal)
+set_deserializer(default_path_deserializer, PurePath)
diff --git a/jsons/deserializers/__init__.py b/jsons/deserializers/__init__.py
index 557e7a7..e5a78a8 100644
--- a/jsons/deserializers/__init__.py
+++ b/jsons/deserializers/__init__.py
@@ -29,6 +29,7 @@ from jsons.deserializers.default_tuple import (
     default_namedtuple_deserializer
 )
 from jsons.deserializers.default_decimal import default_decimal_deserializer
+from jsons.deserializers.default_path import default_path_deserializer
 
 
 KEY_TRANSFORMER_SNAKECASE = snakecase
diff --git a/jsons/deserializers/default_path.py b/jsons/deserializers/default_path.py
new file mode 100644
index 0000000..76db0df
--- /dev/null
+++ b/jsons/deserializers/default_path.py
@@ -0,0 +1,12 @@
+from pathlib import PurePath
+
+
+def default_path_deserializer(obj: str, cls: type = PurePath, **kwargs) -> PurePath:
+    """
+    Deserialize a string to a `pathlib.PurePath` object. Since ``pathlib``
+    implements ``PurePath``, no filename or existence checks are performed.
+    :param obj: the string to deserialize.
+    :param kwargs: not used.
+    :return: a ``str``.
+    """
+    return cls(obj)
diff --git a/jsons/serializers/__init__.py b/jsons/serializers/__init__.py
index 64433c6..6aa3500 100644
--- a/jsons/serializers/__init__.py
+++ b/jsons/serializers/__init__.py
@@ -20,6 +20,7 @@ from jsons.serializers.default_tuple import default_tuple_serializer
 from jsons.serializers.default_uuid import default_uuid_serializer
 from jsons.serializers.default_decimal import default_decimal_serializer
 from jsons.serializers.default_union import default_union_serializer
+from jsons.serializers.default_path import default_path_serializer
 
 
 KEY_TRANSFORMER_SNAKECASE = snakecase
diff --git a/jsons/serializers/default_path.py b/jsons/serializers/default_path.py
new file mode 100644
index 0000000..205d55d
--- /dev/null
+++ b/jsons/serializers/default_path.py
@@ -0,0 +1,15 @@
+from pathlib import PurePath
+
+
+def default_path_serializer(obj: PurePath, **kwargs) -> str:
+    """
+    Serialize a ``pathlib.PurePath`` object to a ``str``, Posix-style.
+
+    Posix-style strings are used as they can be used to create ``pathlib.Path``
+    objects on both Posix and Windows systems, but Windows-style strings can
+    only be used to create valid ``pathlib.Path`` objects on Windows.
+    :param obj: the path to serialize.
+    :param kwargs: not used.
+    :return: a ``str``.
+    """
+    return obj.as_posix()
