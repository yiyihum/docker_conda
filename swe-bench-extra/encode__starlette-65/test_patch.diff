diff --git a/tests/test_background.py b/tests/test_background.py
new file mode 100644
index 0000000..1a4c9f5
--- /dev/null
+++ b/tests/test_background.py
@@ -0,0 +1,52 @@
+from starlette.responses import Response
+from starlette.background import BackgroundTask
+from starlette.testclient import TestClient
+import asyncio
+
+
+def test_async_task():
+    async def async_task():
+        count = 0
+        for num in range(3):
+            count += 1
+            await asyncio.sleep(1)
+        return count
+
+    task = BackgroundTask(async_task)
+
+    def app(scope):
+        async def asgi(receive, send):
+            response = Response(
+                "task initiated", media_type="text/plain", background=task
+            )
+            await response(receive, send)
+
+        return asgi
+
+    client = TestClient(app)
+    response = client.get("/")
+    assert response.text == "task initiated"
+
+
+def test_sync_task():
+    def sync_task():
+        num = 500
+        count = 0
+        while count != num:
+            count += 1
+        return count
+
+    task = BackgroundTask(sync_task)
+
+    def app(scope):
+        async def asgi(receive, send):
+            response = Response(
+                "task initiated", media_type="text/plain", background=task
+            )
+            await response(receive, send)
+
+        return asgi
+
+    client = TestClient(app)
+    response = client.get("/")
+    assert response.text == "task initiated"
diff --git a/tests/test_debug.py b/tests/test_debug.py
index a93b277..700c836 100644
--- a/tests/test_debug.py
+++ b/tests/test_debug.py
@@ -46,7 +46,7 @@ def test_debug_after_response_sent():
     app = DebugMiddleware(app)
     client = TestClient(app)
     with pytest.raises(RuntimeError):
-        response = client.get("/")
+        client.get("/")
 
 
 def test_debug_error_during_scope():
diff --git a/tests/test_endpoints.py b/tests/test_endpoints.py
index 4b5a39e..ec93bec 100644
--- a/tests/test_endpoints.py
+++ b/tests/test_endpoints.py
@@ -2,7 +2,7 @@ import pytest
 from starlette.responses import PlainTextResponse
 from starlette.routing import Router, Path
 from starlette.testclient import TestClient
-from starlette.endpoints import HTTPEndpoint
+from starlette.endpoints import HTTPEndpoint, WebSocketEndpoint
 
 
 class Homepage(HTTPEndpoint):
@@ -17,19 +17,109 @@ app = Router(routes=[Path("/", Homepage), Path("/{username}", Homepage)])
 client = TestClient(app)
 
 
-def test_route():
+def test_http_endpoint_route():
     response = client.get("/")
     assert response.status_code == 200
     assert response.text == "Hello, world!"
 
 
-def test_route_kwargs():
+def test_http_endpoint_route_kwargs():
     response = client.get("/tomchristie")
     assert response.status_code == 200
     assert response.text == "Hello, tomchristie!"
 
 
-def test_route_method():
+def test_http_endpoint_route_method():
     response = client.post("/")
     assert response.status_code == 405
     assert response.text == "Method Not Allowed"
+
+
+def test_websocket_endpoint_on_connect():
+    class WebSocketApp(WebSocketEndpoint):
+        async def on_connect(self, websocket, **kwargs):
+            assert websocket["subprotocols"] == ["soap", "wamp"]
+            await websocket.accept(subprotocol="wamp")
+
+    client = TestClient(WebSocketApp)
+    with client.websocket_connect("/ws", subprotocols=["soap", "wamp"]) as websocket:
+        assert websocket.accepted_subprotocol == "wamp"
+
+
+def test_websocket_endpoint_on_receive_bytes():
+    class WebSocketApp(WebSocketEndpoint):
+        encoding = "bytes"
+
+        async def on_receive(self, websocket, data):
+            await websocket.send_bytes(b"Message bytes was: " + data)
+
+    client = TestClient(WebSocketApp)
+    with client.websocket_connect("/ws") as websocket:
+        websocket.send_bytes(b"Hello, world!")
+        _bytes = websocket.receive_bytes()
+        assert _bytes == b"Message bytes was: Hello, world!"
+
+    with pytest.raises(RuntimeError):
+        with client.websocket_connect("/ws") as websocket:
+            websocket.send_text("Hello world")
+
+
+def test_websocket_endpoint_on_receive_json():
+    class WebSocketApp(WebSocketEndpoint):
+        encoding = "json"
+
+        async def on_receive(self, websocket, data):
+            await websocket.send_json({"message": data})
+
+    client = TestClient(WebSocketApp)
+    with client.websocket_connect("/ws") as websocket:
+        websocket.send_json({"hello": "world"})
+        data = websocket.receive_json()
+        assert data == {"message": {"hello": "world"}}
+
+    with pytest.raises(RuntimeError):
+        with client.websocket_connect("/ws") as websocket:
+            websocket.send_text("Hello world")
+
+
+def test_websocket_endpoint_on_receive_text():
+    class WebSocketApp(WebSocketEndpoint):
+        encoding = "text"
+
+        async def on_receive(self, websocket, data):
+            await websocket.send_text(f"Message text was: {data}")
+
+    client = TestClient(WebSocketApp)
+    with client.websocket_connect("/ws") as websocket:
+        websocket.send_text("Hello, world!")
+        _text = websocket.receive_text()
+        assert _text == "Message text was: Hello, world!"
+
+    with pytest.raises(RuntimeError):
+        with client.websocket_connect("/ws") as websocket:
+            websocket.send_bytes(b"Hello world")
+
+
+def test_websocket_endpoint_on_default():
+    class WebSocketApp(WebSocketEndpoint):
+        encoding = None
+
+        async def on_receive(self, websocket, data):
+            await websocket.send_text(f"Message text was: {data}")
+
+    client = TestClient(WebSocketApp)
+    with client.websocket_connect("/ws") as websocket:
+        websocket.send_text("Hello, world!")
+        _text = websocket.receive_text()
+        assert _text == "Message text was: Hello, world!"
+
+
+def test_websocket_endpoint_on_disconnect():
+    class WebSocketApp(WebSocketEndpoint):
+        async def on_disconnect(self, websocket, close_code):
+            assert close_code == 1001
+            await websocket.close(code=close_code)
+
+    client = TestClient(WebSocketApp)
+    with client.websocket_connect("/ws") as websocket:
+        websocket.close(code=1001)
