diff --git a/starlette/debug.py b/starlette/debug.py
index cc6e846..11eca43 100644
--- a/starlette/debug.py
+++ b/starlette/debug.py
@@ -1,10 +1,13 @@
-from starlette.requests import Request
-from starlette.responses import HTMLResponse, PlainTextResponse
 import html
 import traceback
+import typing
+
+from starlette.requests import Request
+from starlette.responses import HTMLResponse, PlainTextResponse, Response
+from starlette.types import Scope, Receive, Send, Message, ASGIApp, ASGIInstance
 
 
-def get_debug_response(request, exc):
+def get_debug_response(request: Request, exc: Exception) -> Response:
     accept = request.headers.get("accept", "")
     if "text/html" in accept:
         exc_html = "".join(traceback.format_tb(exc.__traceback__))
@@ -18,22 +21,22 @@ def get_debug_response(request, exc):
 
 
 class DebugMiddleware:
-    def __init__(self, app):
+    def __init__(self, app: ASGIApp) -> None:
         self.app = app
 
-    def __call__(self, scope):
+    def __call__(self, scope: Scope) -> ASGIInstance:
         if scope["type"] != "http":
             return self.app(scope)
         return _DebugResponder(self.app, scope)
 
 
 class _DebugResponder:
-    def __init__(self, app, scope):
+    def __init__(self, app: ASGIApp, scope: Scope) -> None:
         self.app = app
         self.scope = scope
         self.response_started = False
 
-    async def __call__(self, receive, send):
+    async def __call__(self, receive: Receive, send: Send) -> None:
         self.raw_send = send
         try:
             asgi = self.app(self.scope)
@@ -45,7 +48,7 @@ class _DebugResponder:
                 await response(receive, send)
             raise exc from None
 
-    async def send(self, message):
+    async def send(self, message: Message) -> None:
         if message["type"] == "http.response.start":
             self.response_started = True
         await self.raw_send(message)
diff --git a/starlette/endpoints.py b/starlette/endpoints.py
index 40d0041..608f28a 100644
--- a/starlette/endpoints.py
+++ b/starlette/endpoints.py
@@ -1,8 +1,9 @@
 import asyncio
 import typing
-
+import json
 from starlette.exceptions import HTTPException
 from starlette.requests import Request
+from starlette.websockets import WebSocket
 from starlette.responses import Response, PlainTextResponse
 from starlette.types import Receive, Send, Scope
 
@@ -35,3 +36,67 @@ class HTTPEndpoint:
         if "app" in self.scope:
             raise HTTPException(status_code=405)
         return PlainTextResponse("Method Not Allowed", status_code=405)
+
+
+class WebSocketEndpoint:
+
+    encoding = None  # May be "text", "bytes", or "json".
+
+    def __init__(self, scope: Scope):
+        self.scope = scope
+
+    async def __call__(self, receive: Receive, send: Send):
+        websocket = WebSocket(self.scope, receive=receive, send=send)
+        kwargs = self.scope.get("kwargs", {})
+        await self.on_connect(websocket, **kwargs)
+
+        close_code = None
+
+        try:
+            while True:
+                message = await websocket.receive()
+                if message["type"] == "websocket.receive":
+                    data = await self.decode(websocket, message)
+                    await self.on_receive(websocket, data)
+                elif message["type"] == "websocket.disconnect":
+                    close_code = message.get("code", 1000)
+                    return
+        finally:
+            await self.on_disconnect(websocket, close_code)
+
+    async def decode(self, websocket, message):
+
+        if self.encoding == "text":
+            if "text" not in message:
+                await websocket.close(code=1003)
+                raise RuntimeError("Expected text websocket messages, but got bytes")
+            return message["text"]
+
+        elif self.encoding == "bytes":
+            if "bytes" not in message:
+                await websocket.close(code=1003)
+                raise RuntimeError("Expected bytes websocket messages, but got text")
+            return message["bytes"]
+
+        elif self.encoding == "json":
+            if "bytes" not in message:
+                await websocket.close(code=1003)
+                raise RuntimeError(
+                    "Expected JSON to be transferred as bytes websocket messages, but got text"
+                )
+            return json.loads(message["bytes"].decode("utf-8"))
+
+        assert (
+            self.encoding is None
+        ), f"Unsupported 'encoding' attribute {self.encoding}"
+        return message["text"] if "text" in message else message["bytes"]
+
+    async def on_connect(self, websocket, **kwargs):
+        """Override to handle an incoming websocket connection"""
+        await websocket.accept()
+
+    async def on_receive(self, websocket, data):
+        """Override to handle an incoming websocket message"""
+
+    async def on_disconnect(self, websocket, close_code):
+        """Override to handle a disconnecting websocket"""
diff --git a/starlette/responses.py b/starlette/responses.py
index 369bf92..5ea906b 100644
--- a/starlette/responses.py
+++ b/starlette/responses.py
@@ -1,5 +1,6 @@
 from email.utils import formatdate
 from mimetypes import guess_type
+from starlette.background import BackgroundTask
 from starlette.datastructures import MutableHeaders
 from starlette.types import Receive, Send
 from urllib.parse import quote_plus
@@ -41,11 +42,13 @@ class Response:
         status_code: int = 200,
         headers: dict = None,
         media_type: str = None,
+        background: BackgroundTask = None,
     ) -> None:
         self.body = self.render(content)
         self.status_code = status_code
         if media_type is not None:
             self.media_type = media_type
+        self.background = background
         self.init_headers(headers)
 
     def render(self, content: typing.Any) -> bytes:
@@ -96,6 +99,9 @@ class Response:
         )
         await send({"type": "http.response.body", "body": self.body})
 
+        if self.background is not None:
+            await self.background()
+
 
 class HTMLResponse(Response):
     media_type = "text/html"

