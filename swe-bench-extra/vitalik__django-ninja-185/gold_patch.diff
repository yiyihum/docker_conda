diff --git a/ninja/params_models.py b/ninja/params_models.py
index e8f8c7c..2ddabe6 100644
--- a/ninja/params_models.py
+++ b/ninja/params_models.py
@@ -48,6 +48,15 @@ class ParamModel(BaseModel, ABC):
         varname = getattr(cls, "_single_attr", None)
         if varname:
             data = {varname: data}
+
+        mixed_attrs = getattr(cls, "_mixed_attrs", None)
+        if mixed_attrs:
+            for param_name, varname in mixed_attrs.items():
+                if varname not in data:
+                    data[varname] = {}
+                if param_name in data:
+                    data[varname][param_name] = data.pop(param_name)
+
         # TODO: I guess if data is not dict - raise an HttpBadRequest
         return cls(**data)
 
diff --git a/ninja/signature/details.py b/ninja/signature/details.py
index 6659a76..5e0d51f 100644
--- a/ninja/signature/details.py
+++ b/ninja/signature/details.py
@@ -34,9 +34,9 @@ class ViewSignature:
         self.params = []
         for name, arg in self.signature.parameters.items():
             if name == "request":
-                # TODO: maybe better assert that 1st param is request  or check by type?
-                # maybe even  have attribute like `has_request`
-                # so that users can ignroe passing request if not needed
+                # TODO: maybe better assert that 1st param is request or check by type?
+                # maybe even have attribute like `has_request`
+                # so that users can ignore passing request if not needed
                 continue
 
             if arg.kind == arg.VAR_KEYWORD:
@@ -69,6 +69,23 @@ class ViewSignature:
                 if cls._in() == "body" or is_pydantic_model(args[0].annotation):
                     attrs["_single_attr"] = args[0].name
 
+            elif cls._in() == "query":
+                pydantic_models = [
+                    arg for arg in args if is_pydantic_model(arg.annotation)
+                ]
+                if pydantic_models:
+                    mixed_attrs = {}
+                    for modeled_attr in pydantic_models:
+                        for (
+                            attr_name,
+                            field,
+                        ) in modeled_attr.annotation.__fields__.items():
+                            mixed_attrs[attr_name] = modeled_attr.name
+                            if hasattr(field, "alias"):
+                                mixed_attrs[field.alias] = modeled_attr.name
+
+                    attrs["_mixed_attrs"] = mixed_attrs
+
             # adding annotations:
             attrs["__annotations__"] = {i.name: i.annotation for i in args}
 
