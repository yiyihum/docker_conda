diff --git a/tests/test_funcutils.py b/tests/test_funcutils.py
index a4b6793..783399d 100644
--- a/tests/test_funcutils.py
+++ b/tests/test_funcutils.py
@@ -34,6 +34,15 @@ def test_partials():
     assert g.cached_partial_greet() == 'Hello...'
     assert CachedInstancePartial(g.greet, excitement='s')() == 'Hellos'
 
+    g.native_greet = 'native reassigned'
+    assert g.native_greet == 'native reassigned'
+
+    g.partial_greet = 'partial reassigned'
+    assert g.partial_greet == 'partial reassigned'
+
+    g.cached_partial_greet = 'cached_partial reassigned'
+    assert g.cached_partial_greet == 'cached_partial reassigned'
+
 
 def test_copy_function():
     def callee():
diff --git a/tests/test_funcutils_fb.py b/tests/test_funcutils_fb.py
index 77e5a6d..05d1582 100644
--- a/tests/test_funcutils_fb.py
+++ b/tests/test_funcutils_fb.py
@@ -1,5 +1,4 @@
 import pytest
-
 from boltons.funcutils import wraps, FunctionBuilder
 
 
diff --git a/tests/test_funcutils_fb_py3.py b/tests/test_funcutils_fb_py3.py
index e6af8e0..1315473 100644
--- a/tests/test_funcutils_fb_py3.py
+++ b/tests/test_funcutils_fb_py3.py
@@ -1,10 +1,16 @@
 
 import inspect
+import functools
 from collections import defaultdict
 
 import pytest
 
-from boltons.funcutils import wraps, FunctionBuilder
+from boltons.funcutils import wraps, FunctionBuilder, update_wrapper
+import boltons.funcutils as funcutils
+
+
+def wrappable_varkw_func(a, b, **kw):
+    return a, b
 
 
 def pita_wrap(flag=False):
@@ -47,6 +53,14 @@ def test_wraps_py3():
         True, 'kwonly_non_roundtrippable_repr', 2)
 
 
+@pytest.mark.parametrize('partial_kind', (functools, funcutils))
+def test_update_wrapper_partial(partial_kind):
+    wrapper = partial_kind.partial(wrappable_varkw_func, b=1)
+
+    fully_wrapped = update_wrapper(wrapper, wrappable_varkw_func)
+    assert fully_wrapped(1) == (1, 1)
+
+
 def test_remove_kwonly_arg():
     # example adapted from https://github.com/mahmoud/boltons/issues/123
 
diff --git a/tests/test_funcutils_fb_py37.py b/tests/test_funcutils_fb_py37.py
index fc2f74b..7b10f72 100644
--- a/tests/test_funcutils_fb_py37.py
+++ b/tests/test_funcutils_fb_py37.py
@@ -5,6 +5,10 @@ import inspect
 from boltons.funcutils import wraps, FunctionBuilder
 
 
+def wrappable_func(a, b):
+    return a, b
+
+
 def test_wraps_async():
     # from https://github.com/mahmoud/boltons/issues/194
     import asyncio
@@ -49,3 +53,21 @@ def test_wraps_async():
     # lol windows py37 somehow completes this in under 0.3
     # "assert 0.29700000000002547 > 0.3" https://ci.appveyor.com/project/mahmoud/boltons/builds/22261051/job/3jfq1tq2233csqp6
     assert duration > 0.25
+
+
+def test_wraps_hide_wrapped():
+    new_func = wraps(wrappable_func, injected='b')(lambda a: wrappable_func(a, b=1))
+    new_sig = inspect.signature(new_func, follow_wrapped=True)
+
+    assert list(new_sig.parameters.keys()) == ['a', 'b']
+
+    new_func = wraps(wrappable_func, injected='b', hide_wrapped=True)(lambda a: wrappable_func(a, b=1))
+    new_sig = inspect.signature(new_func, follow_wrapped=True)
+
+    assert list(new_sig.parameters.keys()) == ['a']
+
+    new_func = wraps(wrappable_func, injected='b')(lambda a: wrappable_func(a, b=1))
+    new_new_func = wraps(new_func, injected='a', hide_wrapped=True)(lambda: new_func(a=1))
+    new_new_sig = inspect.signature(new_new_func, follow_wrapped=True)
+
+    assert len(new_new_sig.parameters) == 0
diff --git a/tests/test_socketutils.py b/tests/test_socketutils.py
index 90d988d..dd095eb 100644
--- a/tests/test_socketutils.py
+++ b/tests/test_socketutils.py
@@ -248,9 +248,8 @@ def test_timeout_setters_getters():
 
 def netstring_server(server_socket):
     "A basic netstring server loop, supporting a few operations"
-    running = True
     try:
-        while running:
+        while True:
             clientsock, addr = server_socket.accept()
             client = NetstringSocket(clientsock)
             while 1:
@@ -259,8 +258,7 @@ def netstring_server(server_socket):
                     clientsock.close()
                     break
                 elif request == b'shutdown':
-                    running = False
-                    break
+                    return
                 elif request == b'reply4k':
                     client.write_ns(b'a' * 4096)
                 elif request == b'ping':
@@ -272,7 +270,6 @@ def netstring_server(server_socket):
     except Exception as e:
         print(u'netstring_server exiting with error: %r' % e)
         raise
-    return
 
 
 def test_socketutils_netstring():
@@ -376,3 +373,57 @@ def test_socketutils_netstring():
 
     client.write_ns(b'shutdown')
     print("all passed")
+
+
+def netstring_server_timeout_override(server_socket):
+    """Netstring socket has an unreasonably low timeout,
+    however it should be overriden by the `read_ns` argument."""
+
+    try:
+        while True:
+            clientsock, addr = server_socket.accept()
+            client = NetstringSocket(clientsock, timeout=0.01)
+            while 1:
+                request = client.read_ns(1)
+                if request == b'close':
+                    clientsock.close()
+                    break
+                elif request == b'shutdown':
+                    return
+                elif request == b'ping':
+                    client.write_ns(b'pong')
+    except Exception as e:
+        print(u'netstring_server exiting with error: %r' % e)
+        raise
+
+
+def test_socketutils_netstring_timeout():
+    """Tests that server socket timeout is overriden by the argument to read call.
+
+    Server has timeout of 10 ms, and we will sleep for 20 ms. If timeout is not overriden correctly,
+    a timeout exception will be raised."""
+
+    print("running timeout test")
+
+    # Set up server
+    server_socket = socket.socket()
+    server_socket.bind(('127.0.0.1', 0))  # localhost with ephemeral port
+    server_socket.listen(100)
+    ip, port = server_socket.getsockname()
+    start_server = lambda: netstring_server_timeout_override(server_socket)
+    threading.Thread(target=start_server).start()
+
+    # set up client
+    def client_connect():
+        clientsock = socket.create_connection((ip, port))
+        client = NetstringSocket(clientsock)
+        return client
+
+    # connect, ping-pong
+    client = client_connect()
+    time.sleep(0.02)
+    client.write_ns(b'ping')
+    assert client.read_ns() == b'pong'
+
+    client.write_ns(b'shutdown')
+    print("no timeout occured - all good.")
\ No newline at end of file
