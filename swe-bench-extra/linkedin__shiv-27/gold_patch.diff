diff --git a/src/shiv/constants.py b/src/shiv/constants.py
index 1b82477..33d742b 100644
--- a/src/shiv/constants.py
+++ b/src/shiv/constants.py
@@ -18,3 +18,4 @@ BLACKLISTED_ARGS: Dict[Tuple[str, ...], str] = {
     ("-d", "--download"): "Shiv needs to actually perform an install, not merely a download.",
     ("--user", "--root", "--prefix"): "Which conflicts with Shiv's internal use of '--target'.",
 }
+DISTUTILS_CFG_NO_PREFIX = "[install]\nprefix="
diff --git a/src/shiv/pip.py b/src/shiv/pip.py
index 3be1339..9deab31 100644
--- a/src/shiv/pip.py
+++ b/src/shiv/pip.py
@@ -3,9 +3,10 @@ import os
 import subprocess
 import sys
 
+from pathlib import Path
 from typing import Generator, List
 
-from .constants import PIP_REQUIRE_VIRTUALENV, PIP_INSTALL_ERROR
+from .constants import PIP_REQUIRE_VIRTUALENV, PIP_INSTALL_ERROR, DISTUTILS_CFG_NO_PREFIX
 
 
 @contextlib.contextmanager
@@ -17,12 +18,28 @@ def clean_pip_env() -> Generator[None, None, None]:
     """
     require_venv = os.environ.pop(PIP_REQUIRE_VIRTUALENV, None)
 
+    # based on
+    # https://github.com/python/cpython/blob/8cf4b34b3665b8bb39ea7111e6b5c3410899d3e4/Lib/distutils/dist.py#L333-L363
+    pydistutils = Path.home() / (".pydistutils.cfg" if os.name == "posix" else "pydistutils.cfg")
+    pydistutils_already_existed = pydistutils.exists()
+
+    if not pydistutils_already_existed:
+        # distutils doesn't support using --target if there's a config file
+        # specifying --prefix. Homebrew's Pythons include a distutils.cfg that
+        # breaks `pip install --target` with any non-wheel packages. We can
+        # work around that by creating a temporary ~/.pydistutils.cfg
+        # specifying an empty prefix.
+        pydistutils.write_text(DISTUTILS_CFG_NO_PREFIX)
+
     try:
         yield
 
     finally:
         if require_venv is not None:
             os.environ[PIP_REQUIRE_VIRTUALENV] = require_venv
+        if not pydistutils_already_existed:
+            # remove the temporary ~/.pydistutils.cfg
+            pydistutils.unlink()
 
 
 def install(interpreter_path: str, args: List[str]) -> None:
