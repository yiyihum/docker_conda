diff --git a/src/dataspec/__version__.py b/src/dataspec/__version__.py
index caef129..a165b7d 100644
--- a/src/dataspec/__version__.py
+++ b/src/dataspec/__version__.py
@@ -1,3 +1,3 @@
-VERSION = (0, 2, 5)
+VERSION = (0, 3, "dev0")
 
 __version__ = ".".join(map(str, VERSION))
diff --git a/src/dataspec/api.py b/src/dataspec/api.py
index bc594ca..050aecc 100644
--- a/src/dataspec/api.py
+++ b/src/dataspec/api.py
@@ -18,6 +18,7 @@ from dataspec.factories import (
     date_spec,
     datetime_spec,
     default_spec,
+    dict_tag_spec,
     email_spec,
     every_spec,
     nilable_spec,
@@ -107,6 +108,7 @@ class SpecAPI:
     bytes = staticmethod(bytes_spec)
     date = staticmethod(date_spec)
     default = staticmethod(default_spec)
+    dict_tag = staticmethod(dict_tag_spec)
     email = staticmethod(email_spec)
     every = staticmethod(every_spec)
     inst = staticmethod(datetime_spec)
diff --git a/src/dataspec/base.py b/src/dataspec/base.py
index 877b918..cbbcfed 100644
--- a/src/dataspec/base.py
+++ b/src/dataspec/base.py
@@ -740,10 +740,11 @@ def make_spec(  # pylint: disable=inconsistent-return-statements
     elif isinstance(pred, dict):
         return DictSpec.from_val(tag, pred, conformer=conformer)
     elif isinstance(pred, Spec):
+        if tag is not None:
+            pred = pred.with_tag(tag)
         if conformer is not None:
-            return pred.with_conformer(conformer)
-        else:
-            return pred
+            pred = pred.with_conformer(conformer)
+        return pred
     elif isinstance(pred, type):
         return type_spec(tag, pred, conformer=conformer)
     elif callable(pred):
diff --git a/src/dataspec/factories.py b/src/dataspec/factories.py
index 5c6a6b9..2bded83 100644
--- a/src/dataspec/factories.py
+++ b/src/dataspec/factories.py
@@ -179,7 +179,7 @@ def blankable_spec(
     Return a Spec which will validate values either by the input Spec or allow the
     empty string.
 
-    The returned Spec is equivalent to `s.any(spec, {""})`.
+    The returned Spec is equivalent to ``s.any(spec, {""})``.
 
     :param tag: an optional tag for the resulting spec
     :param pred: a Spec or value which can be converted into a Spec
@@ -660,6 +660,49 @@ else:
         )
 
 
+def dict_tag_spec(
+    *args: Union[Tag, SpecPredicate], conformer: Optional[Conformer] = None
+) -> Spec:
+    """
+    Return a mapping Spec for which the Tags for each of the ``dict`` values is set
+    to the corresponding key.
+
+    This is a convenience factory for the common pattern of creating a mapping Spec
+    with all of the key Specs' Tags bearing the same name as the corresponding key.
+    The value Specs are created as by :py:data:`dataspec.s`, so existing Specs will
+    not be modified; instead new Specs will be created by
+    :py:meth:`dataspec.Spec.with_tag`.
+
+    For more precise tagging of mapping Spec values, use the default ``s`` constructor
+    with a ``dict`` value.
+
+    :param tag: an optional tag for the resulting spec
+    :param pred: a mapping spec predicate
+    :param conformer: an optional conformer for the value
+    :return: a mapping Spec
+    """
+    tag, preds = tag_maybe(*args)  # pylint: disable=no-value-for-parameter
+    if len(preds) > 1:
+        raise ValueError(
+            f"Dict specs may only specify one spec predicate, not {len(preds)}"
+        )
+
+    pred = preds[0]
+    if not isinstance(pred, dict):
+        raise TypeError(f"Dict spec predicate must be a dict, not {type(pred)}")
+
+    def _unwrap_opt_key(k: Union[OptionalKey, str]) -> str:
+        if isinstance(k, OptionalKey):
+            return k.key
+        return k
+
+    return make_spec(
+        *((tag,) if tag is not None else ()),
+        {k: make_spec(_unwrap_opt_key(k), v) for k, v in pred.items()},
+        conformer=conformer,
+    )
+
+
 _IGNORE_OBJ_PARAM = object()
 _EMAIL_RESULT_FIELDS = frozenset({"username", "domain"})
 

