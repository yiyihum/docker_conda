diff --git a/README.md b/README.md
index 2613ecc..241bfee 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@ This package provides a Python implementation of the open
 [Community ID](https://github.com/corelight/community-id-spec)
 flow hashing standard.
 
-It supports Python versions 2.7+ and 3+.
+It supports Python versions 2.7+ (for not much longer) and 3+.
 
 ![example foobar](https://github.com/corelight/pycommunityid/actions/workflows/python.yaml/badge.svg)
 
diff --git a/communityid/algo.py b/communityid/algo.py
index 2b38e35..0876e05 100644
--- a/communityid/algo.py
+++ b/communityid/algo.py
@@ -57,9 +57,10 @@ class FlowTuple:
         representations.
 
         The sport and dport arguments are numeric port numbers, either
-        provided as ints or in packed 16-bit network byte order. When
-        the protocol number is one of PORT_PROTOS (TCP, UDP, etc),
-        they are required. For other IP protocols they are optional.
+        provided as ints or in packed 16-bit network byte order, of
+        type "bytes". When the protocol number is one of PORT_PROTOS
+        (TCP, UDP, etc), they are required. For other IP protocols
+        they are optional.
 
         The optional Boolean is_one_way argument indicates whether the
         tuple captures a bidirectional flow (the default) or
@@ -245,17 +246,15 @@ class FlowTuple:
 
     @staticmethod
     def is_port(val):
-        try:
-            port = int(val)
-            return 0 <= port <= 65535
-        except ValueError:
-            pass
+        if isinstance(val, bytes):
+            try:
+                port = struct.unpack('!H', val)[0]
+                return 0 <= port <= 65535
+            except (struct.error, IndexError, TypeError):
+                pass
 
-        try:
-            port = struct.unpack('!H', val)[0]
-            return 0 <= port <= 65535
-        except (struct.error, IndexError, TypeError):
-            pass
+        if isinstance(val, int):
+            return 0 <= val <= 65535
 
         return False
 
diff --git a/scripts/community-id b/scripts/community-id
index 3f3cf54..43d1104 100755
--- a/scripts/community-id
+++ b/scripts/community-id
@@ -39,10 +39,14 @@ class DefaultParser(TupleParser):
         sport, dport = None, None
 
         if num_parts == 5:
-            if (not communityid.FlowTuple.is_port(parts[3]) or
-                not communityid.FlowTuple.is_port(parts[4])):
+            try:
+                sport, dport = int(parts[3]), int(parts[4])
+            except ValueError:
+                return None, 'Could not parse port numbers'
+
+            if (not communityid.FlowTuple.is_port(sport) or
+                not communityid.FlowTuple.is_port(dport)):
                 return None, 'Could not parse port numbers'
-            sport, dport = int(parts[3]), int(parts[4])
 
         try:
             return communityid.FlowTuple(
@@ -65,15 +69,20 @@ class ZeekLogsParser(TupleParser):
         if proto is None:
             return None, 'Could not parse IP protocol number'
 
+        try:
+            sport, dport = int(parts[1]), int(parts[3])
+        except ValueError:
+            return None, 'Could not parse port numbers'
+
         if not (communityid.FlowTuple.is_ipaddr(parts[0]) and
-                communityid.FlowTuple.is_port(parts[1]) and
+                communityid.FlowTuple.is_port(sport) and
                 communityid.FlowTuple.is_ipaddr(parts[2]) and
-                communityid.FlowTuple.is_port(parts[3])):
+                communityid.FlowTuple.is_port(dport)):
             return None, 'Need two IP addresses and port numbers'
 
         try:
-            return communityid.FlowTuple(proto, parts[0], parts[2],
-                                         int(parts[1]), int(parts[3])), None
+            return communityid.FlowTuple(
+                proto, parts[0], parts[2], sport, dport), None
         except communityid.FlowTupleError as err:
             return None, repr(err)
 
