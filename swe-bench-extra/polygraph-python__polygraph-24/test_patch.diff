diff --git a/polygraph/types/tests/test_object_type.py b/polygraph/types/tests/test_object_type.py
index e328e6f..9ffd4d4 100644
--- a/polygraph/types/tests/test_object_type.py
+++ b/polygraph/types/tests/test_object_type.py
@@ -1,10 +1,10 @@
 from unittest import TestCase
 
 from polygraph.exceptions import PolygraphValueError
-from polygraph.types.basic_type import NonNull
 from polygraph.types.decorators import field
 from polygraph.types.object_type import ObjectType
 from polygraph.types.scalar import Int, String
+from polygraph.types.type_builder import NonNull
 
 
 class HelloWorldObject(ObjectType):
diff --git a/polygraph/types/tests/test_scalars.py b/polygraph/types/tests/test_scalars.py
index 8eecd6a..1097619 100644
--- a/polygraph/types/tests/test_scalars.py
+++ b/polygraph/types/tests/test_scalars.py
@@ -1,6 +1,6 @@
 from unittest import TestCase
 
-from polygraph.types.basic_type import typedef
+from polygraph.types.api import typedef
 from polygraph.types.scalar import ID, Boolean, Float, Int, String
 
 
diff --git a/polygraph/types/tests/test_type_definitions.py b/polygraph/types/tests/test_type_definitions.py
new file mode 100644
index 0000000..6e67345
--- /dev/null
+++ b/polygraph/types/tests/test_type_definitions.py
@@ -0,0 +1,27 @@
+from unittest import TestCase
+
+from polygraph.types.api import typedef
+from polygraph.types.scalar import Float, Int, String
+from polygraph.types.type_builder import List, NonNull, Union
+
+
+class TestTypeDefinition(TestCase):
+
+    def test_names_of_scalars(self):
+        type_names = [
+            (String, "String"),
+            (Int, "Int"),
+            (Float, "Float"),
+        ]
+        for type_, name in type_names:
+            self.assertEqual(typedef(type_).name, name)
+
+    def test_names_of_built_types(self):
+        type_names = [
+            (List(String), "[String]"),
+            (Union(Int, String, List(String)), "Int|String|[String]"),
+            (NonNull(Int), "Int!"),
+            (NonNull(List(String)), "[String]!")
+        ]
+        for type_, name in type_names:
+            self.assertEqual(typedef(type_).name, name)
diff --git a/polygraph/types/tests/test_types.py b/polygraph/types/tests/test_types.py
index aa4bd3a..d08d30f 100644
--- a/polygraph/types/tests/test_types.py
+++ b/polygraph/types/tests/test_types.py
@@ -1,8 +1,9 @@
 from unittest import TestCase, skip
 
 from polygraph.exceptions import PolygraphValueError
-from polygraph.types.basic_type import List, NonNull, typedef
+from polygraph.types.api import typedef
 from polygraph.types.scalar import Boolean, Int, String
+from polygraph.types.type_builder import List, NonNull
 from polygraph.utils.trim_docstring import trim_docstring
 
 
diff --git a/polygraph/types/tests/test_union.py b/polygraph/types/tests/test_union.py
index 07abe3d..b04ac5e 100644
--- a/polygraph/types/tests/test_union.py
+++ b/polygraph/types/tests/test_union.py
@@ -1,15 +1,15 @@
 from unittest import TestCase, skip
 
 from polygraph.exceptions import PolygraphValueError
-from polygraph.types.basic_type import Union
+from polygraph.types.type_builder import Union
 from polygraph.types.scalar import Float, Int, String
 
 
-# @skip  # FIXME
 class UnionTypeTest(TestCase):
+
     def test_commutativity(self):
         self.assertEqual(Union(String, Int), Union(Int, String))
-        self.assertEqual(Union(String, Int, Float), Union(Float, String, Int, String))
+        self.assertEqual(Union(String, Int, Float), Union(Float, String, Int))
 
     @skip
     def test_associativity(self):
@@ -24,7 +24,6 @@ class UnionTypeTest(TestCase):
             Union(String, Int),
         )
 
-    @skip
     def test_pipe_operator_with_more_than_two_types(self):
         self.assertEqual(
             String | Int | Float,
diff --git a/polygraph/utils/tests/test_deduplicate.py b/polygraph/utils/tests/test_deduplicate.py
new file mode 100644
index 0000000..5d0761b
--- /dev/null
+++ b/polygraph/utils/tests/test_deduplicate.py
@@ -0,0 +1,11 @@
+from polygraph.utils.deduplicate import deduplicate
+from unittest import TestCase
+
+
+class DeduplicateTest(TestCase):
+    def test_deduplicate(self):
+        args = ['d', 'e', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e']
+        self.assertEqual(
+            list(deduplicate(args)),
+            ['d', 'e', 'u', 'p', 'l', 'i', 'c', 'a', 't'],
+        )
