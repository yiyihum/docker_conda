diff --git a/tests/fstrings_test.py b/tests/fstrings_test.py
index 2090930..fcc6a92 100644
--- a/tests/fstrings_test.py
+++ b/tests/fstrings_test.py
@@ -1,6 +1,6 @@
 import pytest
 
-from pyupgrade import _fix_fstrings
+from pyupgrade import _fix_py36_plus
 
 
 @pytest.mark.parametrize(
@@ -33,7 +33,7 @@ from pyupgrade import _fix_fstrings
     ),
 )
 def test_fix_fstrings_noop(s):
-    assert _fix_fstrings(s) == s
+    assert _fix_py36_plus(s) == s
 
 
 @pytest.mark.parametrize(
@@ -55,4 +55,4 @@ def test_fix_fstrings_noop(s):
     ),
 )
 def test_fix_fstrings(s, expected):
-    assert _fix_fstrings(s) == expected
+    assert _fix_py36_plus(s) == expected
diff --git a/tests/typing_named_tuple_test.py b/tests/typing_named_tuple_test.py
new file mode 100644
index 0000000..83a41ef
--- /dev/null
+++ b/tests/typing_named_tuple_test.py
@@ -0,0 +1,155 @@
+import pytest
+
+from pyupgrade import _fix_py36_plus
+
+
+@pytest.mark.parametrize(
+    's',
+    (
+        '',
+
+        pytest.param(
+            'from typing import NamedTuple as wat\n'
+            'C = wat("C", ("a", int))\n',
+            id='currently not following as imports',
+        ),
+
+        pytest.param('C = typing.NamedTuple("C", ())', id='no types'),
+        pytest.param('C = typing.NamedTuple("C")', id='not enough args'),
+        pytest.param(
+            'C = typing.NamedTuple("C", (), nonsense=1)',
+            id='namedtuple with named args',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", {"foo": int, "bar": str})',
+            id='namedtuple without a list/tuple',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [["a", str], ["b", int]])',
+            id='namedtuple without inner tuples',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [(), ()])',
+            id='namedtuple but inner tuples are incorrect length',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [(not_a_str, str)])',
+            id='namedtuple but attribute name is not a string',
+        ),
+
+        pytest.param(
+            'C = typing.NamedTuple("C", [("def", int)])',
+            id='uses keyword',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", *types)',
+            id='NamedTuple starargs',
+        ),
+    ),
+)
+def test_typing_named_tuple_noop(s):
+    assert _fix_py36_plus(s) == s
+
+
+@pytest.mark.parametrize(
+    ('s', 'expected'),
+    (
+        pytest.param(
+            'from typing import NamedTuple\n'
+            'C = NamedTuple("C", [("a", int), ("b", str)])\n',
+
+            'from typing import NamedTuple\n'
+            'class C(NamedTuple):\n'
+            '    a: int\n'
+            '    b: str\n',
+            id='typing from import',
+        ),
+        pytest.param(
+            'import typing\n'
+            'C = typing.NamedTuple("C", [("a", int), ("b", str)])\n',
+
+            'import typing\n'
+            'class C(typing.NamedTuple):\n'
+            '    a: int\n'
+            '    b: str\n',
+
+            id='import typing',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [("a", List[int])])',
+
+            'class C(typing.NamedTuple):\n'
+            '    a: List[int]',
+
+            id='generic attribute types',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [("a", Mapping[int, str])])',
+
+            'class C(typing.NamedTuple):\n'
+            '    a: Mapping[int, str]',
+
+            id='generic attribute types with multi types',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [("a", "Queue[int]")])',
+
+            'class C(typing.NamedTuple):\n'
+            "    a: 'Queue[int]'",
+
+            id='quoted type names',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [("a", Tuple[int, ...])])',
+
+            'class C(typing.NamedTuple):\n'
+            '    a: Tuple[int, ...]',
+
+            id='type with ellipsis',
+        ),
+        pytest.param(
+            'C = typing.NamedTuple("C", [("a", Callable[[Any], None])])',
+
+            'class C(typing.NamedTuple):\n'
+            '    a: Callable[[Any], None]',
+
+            id='type containing a list',
+        ),
+        pytest.param(
+            'if False:\n'
+            '    pass\n'
+            'C = typing.NamedTuple("C", [("a", int)])\n',
+
+            'if False:\n'
+            '    pass\n'
+            'class C(typing.NamedTuple):\n'
+            '    a: int\n',
+
+            id='class directly after block',
+        ),
+        pytest.param(
+            'if True:\n'
+            '    C = typing.NamedTuple("C", [("a", int)])\n',
+
+            'if True:\n'
+            '    class C(typing.NamedTuple):\n'
+            '        a: int\n',
+
+            id='indented',
+        ),
+        pytest.param(
+            'if True:\n'
+            '    ...\n'
+            '    C = typing.NamedTuple("C", [("a", int)])\n',
+
+            'if True:\n'
+            '    ...\n'
+            '    class C(typing.NamedTuple):\n'
+            '        a: int\n',
+
+            id='indented, but on next line',
+        ),
+    ),
+)
+def test_fix_typing_named_tuple(s, expected):
+    assert _fix_py36_plus(s) == expected
diff --git a/tests/typing_typed_dict_test.py b/tests/typing_typed_dict_test.py
new file mode 100644
index 0000000..af4e4e7
--- /dev/null
+++ b/tests/typing_typed_dict_test.py
@@ -0,0 +1,96 @@
+import pytest
+
+from pyupgrade import _fix_py36_plus
+
+
+@pytest.mark.parametrize(
+    's',
+    (
+        pytest.param(
+            'from wat import TypedDict\n'
+            'Q = TypedDict("Q")\n',
+            id='from imported from elsewhere',
+        ),
+        pytest.param('D = typing.TypedDict("D")', id='no typed kwargs'),
+        pytest.param('D = typing.TypedDict("D", {})', id='no typed args'),
+        pytest.param('D = typing.TypedDict("D", {}, a=int)', id='both'),
+        pytest.param('D = typing.TypedDict("D", 1)', id='not a dict'),
+        pytest.param(
+            'D = typing.TypedDict("D", {1: str})',
+            id='key is not a string',
+        ),
+        pytest.param(
+            'D = typing.TypedDict("D", {**d, "a": str})',
+            id='dictionary splat operator',
+        ),
+        pytest.param(
+            'C = typing.TypedDict("C", *types)',
+            id='starargs',
+        ),
+        pytest.param(
+            'D = typing.TypedDict("D", **types)',
+            id='starstarkwargs',
+        ),
+    ),
+)
+def test_typing_typed_dict_noop(s):
+    assert _fix_py36_plus(s) == s
+
+
+@pytest.mark.parametrize(
+    ('s', 'expected'),
+    (
+        pytest.param(
+            'from typing import TypedDict\n'
+            'D = TypedDict("D", a=int)\n',
+
+            'from typing import TypedDict\n'
+            'class D(TypedDict):\n'
+            '    a: int\n',
+
+            id='keyword TypedDict from imported',
+        ),
+        pytest.param(
+            'import typing\n'
+            'D = typing.TypedDict("D", a=int)\n',
+
+            'import typing\n'
+            'class D(typing.TypedDict):\n'
+            '    a: int\n',
+
+            id='keyword TypedDict from attribute',
+        ),
+        pytest.param(
+            'import typing\n'
+            'D = typing.TypedDict("D", {"a": int})\n',
+
+            'import typing\n'
+            'class D(typing.TypedDict):\n'
+            '    a: int\n',
+
+            id='TypedDict from dict literal',
+        ),
+        pytest.param(
+            'from typing_extensions import TypedDict\n'
+            'D = TypedDict("D", a=int)\n',
+
+            'from typing_extensions import TypedDict\n'
+            'class D(TypedDict):\n'
+            '    a: int\n',
+
+            id='keyword TypedDict from typing_extensions',
+        ),
+        pytest.param(
+            'import typing_extensions\n'
+            'D = typing_extensions.TypedDict("D", {"a": int})\n',
+
+            'import typing_extensions\n'
+            'class D(typing_extensions.TypedDict):\n'
+            '    a: int\n',
+
+            id='keyword TypedDict from typing_extensions',
+        ),
+    ),
+)
+def test_typing_typed_dict(s, expected):
+    assert _fix_py36_plus(s) == expected
