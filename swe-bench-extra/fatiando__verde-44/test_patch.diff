diff --git a/verde/tests/test_chain.py b/verde/tests/test_chain.py
new file mode 100644
index 0000000..c1140f3
--- /dev/null
+++ b/verde/tests/test_chain.py
@@ -0,0 +1,35 @@
+"""
+Test the Chain class
+"""
+import numpy.testing as npt
+
+from ..datasets.synthetic import CheckerBoard
+from ..chain import Chain
+from ..scipy_bridge import ScipyGridder
+from ..trend import Trend
+
+
+def test_chain():
+    "Test chaining trend and gridder."
+    region = (1000, 5000, -8000, -7000)
+    synth = CheckerBoard(amplitude=100, w_east=1000, w_north=100)
+    synth.fit(region=region)
+    data = synth.scatter(size=5000, random_state=0)
+    east, north = coords = data.easting, data.northing
+    coefs = [1000, 0.2, -1.4]
+    trend = coefs[0] + coefs[1]*east + coefs[2]*north
+    all_data = trend + data.scalars
+
+    grd = Chain([('trend', Trend(degree=1)),
+                 ('gridder', ScipyGridder())])
+    grd.fit(coords, all_data)
+
+    npt.assert_allclose(grd.predict(coords), all_data)
+    npt.assert_allclose(grd.residual_, 0, atol=1e-5)
+    npt.assert_allclose(grd.named_steps['trend'].coef_, coefs, rtol=1e-2)
+    npt.assert_allclose(grd.named_steps['trend'].predict(coords), trend,
+                        rtol=1e-3)
+    # The residual is too small to test. Need a robust trend probably before
+    # this will work.
+    # npt.assert_allclose(grd.named_steps['gridder'].predict(coords),
+    #                     data.scalars, rtol=5e-2, atol=0.5)
diff --git a/verde/tests/test_scipy.py b/verde/tests/test_scipy.py
index df8fbe3..1299e1d 100644
--- a/verde/tests/test_scipy.py
+++ b/verde/tests/test_scipy.py
@@ -1,8 +1,11 @@
 """
 Test the scipy based interpolator.
 """
+import warnings
+
 import pytest
 import pandas as pd
+import numpy as np
 import numpy.testing as npt
 
 from ..scipy_bridge import ScipyGridder
@@ -21,6 +24,7 @@ def test_scipy_gridder_same_points():
         grd.fit((data.easting, data.northing), data.scalars)
         predicted = grd.predict((data.easting, data.northing))
         npt.assert_allclose(predicted, data.scalars)
+        npt.assert_allclose(grd.residual_, 0, atol=1e-5)
 
 
 def test_scipy_gridder():
@@ -70,3 +74,16 @@ def test_scipy_gridder_fails():
     grd = ScipyGridder(method='some invalid method name')
     with pytest.raises(ValueError):
         grd.fit((data.easting, data.northing), data.scalars)
+
+
+def test_scipy_gridder_warns():
+    "Check that a warning is issued when using weights."
+    data = CheckerBoard().fit().scatter(random_state=100)
+    weights = np.ones_like(data.scalars)
+    grd = ScipyGridder()
+    msg = "ScipyGridder does not support weights and they will be ignored."
+    with warnings.catch_warnings(record=True) as warn:
+        grd.fit((data.easting, data.northing), data.scalars, weights=weights)
+        assert len(warn) == 1
+        assert issubclass(warn[-1].category, UserWarning)
+        assert str(warn[-1].message) == msg
