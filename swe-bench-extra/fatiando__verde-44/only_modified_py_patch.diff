diff --git a/examples/data/sample_rio_magnetic_anomaly.py b/examples/data/sample_rio_magnetic_anomaly.py
index 28a86d1..376e6ca 100644
--- a/examples/data/sample_rio_magnetic_anomaly.py
+++ b/examples/data/sample_rio_magnetic_anomaly.py
@@ -10,6 +10,8 @@ Geological Survey of Brazil (CPRM) through their `GEOSGB portal
 """
 import matplotlib.pyplot as plt
 import cartopy.crs as ccrs
+# We need these two classes to set proper ticklabels for Cartopy maps
+from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter
 import numpy as np
 import verde as vd
 
@@ -18,9 +20,10 @@ data = vd.datasets.fetch_rio_magnetic_anomaly()
 print(data.head())
 
 # Make a Mercator plot of the data using Cartopy
+crs = ccrs.PlateCarree()
 plt.figure(figsize=(7, 5))
 ax = plt.axes(projection=ccrs.Mercator())
-ax.set_title('Total-field Magnetic Anomaly of Rio de Janeiro', pad=25)
+ax.set_title('Total-field Magnetic Anomaly of Rio de Janeiro')
 # Since the data is diverging (going from negative to positive)
 # we need to center our colorbar on 0. To do this, we calculate
 # the maximum absolute value of the data to set vmin and vmax.
@@ -28,13 +31,16 @@ maxabs = np.max(np.abs([data.total_field_anomaly_nt.min(),
                         data.total_field_anomaly_nt.max()]))
 # Cartopy requires setting the projection of the original data through the
 # transform argument. Use PlateCarree for geographic data.
-plt.scatter(data.longitude, data.latitude, c=data.total_field_anomaly_nt,
-            s=1, cmap='seismic', vmin=-maxabs, vmax=maxabs,
-            transform=ccrs.PlateCarree())
-cb = plt.colorbar(pad=0.1)
+plt.scatter(data.longitude, data.latitude, c=data.total_field_anomaly_nt, s=1,
+            cmap='seismic', vmin=-maxabs, vmax=maxabs, transform=crs)
+cb = plt.colorbar(pad=0.01)
 cb.set_label('nT')
-ax.gridlines(draw_labels=True)
+# Set the proper ticks for a Cartopy map
+ax.set_xticks(np.arange(-42.5, -42, 0.1), crs=crs)
+ax.set_yticks(np.arange(-22.4, -22, 0.1), crs=crs)
+ax.xaxis.set_major_formatter(LongitudeFormatter())
+ax.yaxis.set_major_formatter(LatitudeFormatter())
 # Set the extent of the plot to the limits of the data
-ax.set_extent(vd.get_region(data.longitude, data.latitude))
+ax.set_extent(vd.get_region(data.longitude, data.latitude), crs=crs)
 plt.tight_layout()
 plt.show()
diff --git a/verde/__init__.py b/verde/__init__.py
index 40b9910..3ff401c 100644
--- a/verde/__init__.py
+++ b/verde/__init__.py
@@ -11,6 +11,7 @@ from .coordinates import scatter_points, grid_coordinates, inside, \
 from .grid_math import block_reduce
 from .scipy_bridge import ScipyGridder
 from .trend import Trend, trend_jacobian
+from .chain import Chain
 
 
 # Get the version number through versioneer
diff --git a/verde/base.py b/verde/base.py
index 2d4c70b..f3cf26a 100644
--- a/verde/base.py
+++ b/verde/base.py
@@ -16,6 +16,11 @@ class BaseGridder(BaseEstimator):
     data returned by it should be a 1d or 2d numpy array for scalar data or a
     tuple with 1d or 2d numpy arrays for each component of vector data.
 
+    Subclasses should define a ``residual_`` attribute after fitting that
+    contains the data residuals ``self.residual_ = data -
+    self.predict(coordinates)``. This is required for compatibility with
+    :class:`verde.Chain`.
+
     Doesn't define any new attributes.
 
     This is a subclass of :class:`sklearn.base.BaseEstimator` and must abide by
diff --git a/verde/scipy_bridge.py b/verde/scipy_bridge.py
index c6ee745..7dd2586 100644
--- a/verde/scipy_bridge.py
+++ b/verde/scipy_bridge.py
@@ -1,13 +1,15 @@
 """
 A gridder that uses scipy.interpolate as the backend.
 """
+from warnings import warn
+
 import numpy as np
 from sklearn.utils.validation import check_is_fitted
 from scipy.interpolate import LinearNDInterpolator, NearestNDInterpolator, \
     CloughTocher2DInterpolator
 
 from .base import BaseGridder
-from . import get_region
+from .coordinates import get_region
 
 
 class ScipyGridder(BaseGridder):
@@ -45,7 +47,7 @@ class ScipyGridder(BaseGridder):
         self.method = method
         self.extra_args = extra_args
 
-    def fit(self, coordinates, data):
+    def fit(self, coordinates, data, weights=None):
         """
         Fit the interpolator to the given data.
 
@@ -65,6 +67,11 @@ class ScipyGridder(BaseGridder):
             ignored.
         data : array
             The data values that will be interpolated.
+        weights : None or array
+            If not None, then the weights assigned to each data point.
+            Typically, this should be 1 over the data uncertainty squared.
+            Ignored for this interpolator. Only present for compatibility with
+            other gridder.
 
         Returns
         -------
@@ -83,11 +90,15 @@ class ScipyGridder(BaseGridder):
             kwargs = {}
         else:
             kwargs = self.extra_args
+        if weights is not None:
+            warn("{} does not support weights and they will be ignored."
+                 .format(self.__class__.__name__))
         easting, northing = coordinates[:2]
         self.region_ = get_region(easting, northing)
         points = np.column_stack((np.ravel(easting), np.ravel(northing)))
         self.interpolator_ = classes[self.method](points, np.ravel(data),
                                                   **kwargs)
+        self.residual_ = data - self.predict(coordinates)
         return self
 
     def predict(self, coordinates):

