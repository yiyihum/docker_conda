diff --git a/pysnooper/__init__.py b/pysnooper/__init__.py
index ef8dfef..4049c67 100644
--- a/pysnooper/__init__.py
+++ b/pysnooper/__init__.py
@@ -1,5 +1,20 @@
 # Copyright 2019 Ram Rachum and collaborators.
 # This program is distributed under the MIT license.
+"""PySnooper - Never use print for debugging again
+
+Usage:
+
+    import pysnooper
+
+    @pysnooper.snoop()
+    def number_to_bits(number):
+        ...
+
+A log will be written to stderr showing the lines executed and variables
+changed in the decorated function.
+
+For more information, see https://github.com/cool-RR/PySnooper
+"""
 
 from .pysnooper import snoop
 from .variables import Attrs, Exploding, Indices, Keys
diff --git a/pysnooper/variables.py b/pysnooper/variables.py
index 6a97666..f3db008 100644
--- a/pysnooper/variables.py
+++ b/pysnooper/variables.py
@@ -7,11 +7,22 @@ from . import utils
 from . import pycompat
 
 
+def needs_parentheses(source):
+    def code(s):
+        return compile(s, '<variable>', 'eval').co_code
+
+    return code('{}.x'.format(source)) != code('({}).x'.format(source))
+
+
 class BaseVariable(pycompat.ABC):
     def __init__(self, source, exclude=()):
         self.source = source
         self.exclude = utils.ensure_tuple(exclude)
         self.code = compile(source, '<variable>', 'eval')
+        if needs_parentheses(source):
+            self.unambiguous_source = '({})'.format(source)
+        else:
+            self.unambiguous_source = source
 
     def items(self, frame):
         try:
@@ -36,7 +47,7 @@ class CommonVariable(BaseVariable):
             except Exception:
                 continue
             result.append((
-                '({}){}'.format(self.source, self._format_key(key)),
+                '{}{}'.format(self.unambiguous_source, self._format_key(key)),
                 utils.get_shortish_repr(value)
             ))
         return result

