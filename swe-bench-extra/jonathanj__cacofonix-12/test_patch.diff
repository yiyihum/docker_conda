diff --git a/src/cacofonix/test/data/config.yaml b/src/cacofonix/test/data/config.yaml
new file mode 100644
index 0000000..3570806
--- /dev/null
+++ b/src/cacofonix/test/data/config.yaml
@@ -0,0 +1,10 @@
+# Path in which to find fragments.
+change_fragments_path: fragments
+# Path to the changelog to merge into.
+changelog_path: CHANGELOG.md
+# Marker to add new changes below.
+changelog_marker: |
+  <!-- Generated release notes start. -->
+
+# Type of document to output, valid values are: markdown, rest
+changelog_output_type: markdown
diff --git a/src/cacofonix/test/data/fragments/numeric_issue_number.yaml b/src/cacofonix/test/data/fragments/numeric_issue_number.yaml
new file mode 100644
index 0000000..545e1dc
--- /dev/null
+++ b/src/cacofonix/test/data/fragments/numeric_issue_number.yaml
@@ -0,0 +1,7 @@
+type: bugfix
+section: ''
+issues:
+  1234: https://example.com/
+feature_flags: []
+description: |-
+  An issue description.
diff --git a/src/cacofonix/test/test_app.py b/src/cacofonix/test/test_app.py
new file mode 100644
index 0000000..83d8f72
--- /dev/null
+++ b/src/cacofonix/test/test_app.py
@@ -0,0 +1,66 @@
+import os.path
+import pytest
+from fs import open_fs
+from fs.base import FS
+from fs.wrap import read_only
+
+from cacofonix._app import Application
+from cacofonix._config import Config
+from cacofonix._effects import SideEffects
+
+
+class MockSideEffects(SideEffects):
+    def __init__(self, root_fs, config):
+        self.root_fs = root_fs
+        self.fragments_fs = self.root_fs.opendir(config.change_fragments_path)
+
+    def archive_fs(self, path: str) -> FS:
+        raise NotImplementedError()
+
+    def changelog_fs(self, path: str) -> FS:
+        raise NotImplementedError()
+
+    def git_mv(self, path: str) -> FS:
+        raise NotImplementedError()
+
+    def git_stage(self, path: str) -> FS:
+        raise NotImplementedError()
+
+
+def open_test_root_fs() -> FS:
+    """
+    Open the filesystem root for the tests.
+    """
+    cwd = os.path.dirname(__file__)
+    return read_only(open_fs('data', cwd=cwd))
+
+
+def load_test_config(root_fs) -> Config:
+    """
+    Load the config files for the tests.
+    """
+    with root_fs.open('config.yaml') as fd:
+        return Config.parse(fd)
+
+
+class TestCompileFragmentFiles:
+    """
+    Tests for `Application.compile_fragment_files`.
+    """
+    def test_numeric_issue_key(self):
+        """
+        Issues with numeric keys can be compiled.
+        """
+        with open_test_root_fs() as root_fs:
+            config = load_test_config(root_fs)
+            effects = MockSideEffects(root_fs, config)
+            app = Application(config, effects)
+            found_fragments = [
+                (effects.fragments_fs, 'numeric_issue_number.yaml'),
+            ]
+            with open_fs('temp://') as write_fs:
+                outputs = app.compile_fragment_files(
+                    write_fs,
+                    found_fragments)
+                assert len(outputs) == 1
+                assert '#1234' in write_fs.readtext(outputs[0])
