diff --git a/submitit/__init__.py b/submitit/__init__.py
index 42fd4b8..f73808b 100644
--- a/submitit/__init__.py
+++ b/submitit/__init__.py
@@ -17,4 +17,4 @@ from .local.local import LocalJob as LocalJob
 from .slurm.slurm import SlurmExecutor as SlurmExecutor
 from .slurm.slurm import SlurmJob as SlurmJob
 
-__version__ = "1.1.4"
+__version__ = "1.1.5"
diff --git a/submitit/auto/auto.py b/submitit/auto/auto.py
index e86daf7..1c21369 100644
--- a/submitit/auto/auto.py
+++ b/submitit/auto/auto.py
@@ -171,7 +171,12 @@ class AutoExecutor(Executor):
                 )
                 continue
         if invalid:
-            invalid.append(f"Known executors: {', '.join(executors.keys())}")
+            invalid.extend(
+                [
+                    f"Known executors: {', '.join(executors.keys())}",
+                    f"As a reminder, shared/generic (non-prefixed) parameters are: {generics}.",
+                ]
+            )
             raise NameError("\n".join(invalid))
 
         # add cluster specific generic overrides
diff --git a/submitit/core/core.py b/submitit/core/core.py
index 9538d43..5fee468 100644
--- a/submitit/core/core.py
+++ b/submitit/core/core.py
@@ -585,11 +585,15 @@ class Executor(abc.ABC):
     def submit(self, fn: tp.Callable[..., R], *args: tp.Any, **kwargs: tp.Any) -> Job[R]:
         ds = utils.DelayedSubmission(fn, *args, **kwargs)
         if self._delayed_batch is not None:
-            job: Job[R] = self.job_class.__new__(self.job_class)  # empty shell
+            # ugly hack for AutoExecutor class which is known at runtime
+            cls = self.job_class if self.job_class is not Job else self._executor.job_class  # type: ignore
+            job: Job[R] = cls.__new__(cls)  # empty shell
             self._delayed_batch.append((job, ds))
-            return job
         else:
-            return self._internal_process_submissions([ds])[0]
+            job = self._internal_process_submissions([ds])[0]
+        if type(job) is Job:  # pylint: disable=unidiomatic-typecheck
+            raise RuntimeError("Executors should never return a base Job class (implementation issue)")
+        return job
 
     @abc.abstractmethod
     def _internal_process_submissions(
