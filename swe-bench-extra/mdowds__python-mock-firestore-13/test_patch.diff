diff --git a/tests/test_document_snapshot.py b/tests/test_document_snapshot.py
index 7d60e4b..896f45b 100644
--- a/tests/test_document_snapshot.py
+++ b/tests/test_document_snapshot.py
@@ -46,6 +46,38 @@ class TestDocumentSnapshot(TestCase):
         doc_snapshot = doc_ref.get()
         self.assertIs(doc_ref, doc_snapshot.reference)
 
+    def test_documentSnapshot_id(self):
+        fs = MockFirestore()
+        fs._data = {'foo': {
+            'first': {'id': 1}
+        }}
+        doc = fs.collection('foo').document('first').get()
+        self.assertIsInstance(doc.id, str)
+
+    def test_documentSnapshot_create_time(self):
+        fs = MockFirestore()
+        fs._data = {'foo': {
+            'first': {'id': 1}
+        }}
+        doc = fs.collection('foo').document('first').get()
+        self.assertIsNotNone(doc.create_time)
+
+    def test_documentSnapshot_update_time(self):
+        fs = MockFirestore()
+        fs._data = {'foo': {
+            'first': {'id': 1}
+        }}
+        doc = fs.collection('foo').document('first').get()
+        self.assertIsNotNone(doc.update_time)
+
+    def test_documentSnapshot_read_time(self):
+        fs = MockFirestore()
+        fs._data = {'foo': {
+            'first': {'id': 1}
+        }}
+        doc = fs.collection('foo').document('first').get()
+        self.assertIsNotNone(doc.read_time)
+
     def test_documentSnapshot_get_by_existing_field_path(self):
         fs = MockFirestore()
         fs._data = {'foo': {
diff --git a/tests/test_mock_client.py b/tests/test_mock_client.py
new file mode 100644
index 0000000..227c5c7
--- /dev/null
+++ b/tests/test_mock_client.py
@@ -0,0 +1,19 @@
+from unittest import TestCase
+
+from mockfirestore import MockFirestore
+
+
+class TestMockFirestore(TestCase):
+    def test_client_get_all(self):
+        fs = MockFirestore()
+        fs._data = {'foo': {
+            'first': {'id': 1},
+            'second': {'id': 2}
+        }}
+        doc = fs.collection('foo').document('first')
+        results = list(fs.get_all([doc]))
+        returned_doc_snapshot = results[0].to_dict()
+        expected_doc_snapshot = doc.get().to_dict()
+        self.assertEqual(returned_doc_snapshot, expected_doc_snapshot)
+
+
diff --git a/tests/test_transaction.py b/tests/test_transaction.py
new file mode 100644
index 0000000..72031fa
--- /dev/null
+++ b/tests/test_transaction.py
@@ -0,0 +1,73 @@
+from unittest import TestCase
+from mockfirestore import MockFirestore, Transaction
+
+
+class TestTransaction(TestCase):
+    def setUp(self) -> None:
+        self.fs = MockFirestore()
+        self.fs._data = {'foo': {
+                'first': {'id': 1},
+                'second': {'id': 2}
+            }}
+
+    def test_transaction_getAll(self):
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            docs = [self.fs.collection('foo').document(doc_name)
+                    for doc_name in self.fs._data['foo']]
+            results = list(transaction.get_all(docs))
+            returned_docs_snapshots = [result.to_dict() for result in results]
+            expected_doc_snapshots = [doc.get().to_dict() for doc in docs]
+            for expected_snapshot in expected_doc_snapshots:
+                self.assertIn(expected_snapshot, returned_docs_snapshots)
+
+    def test_transaction_getDocument(self):
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            doc = self.fs.collection('foo').document('first')
+            returned_doc = next(transaction.get(doc))
+            self.assertEqual(doc.get().to_dict(), returned_doc.to_dict())
+
+    def test_transaction_getQuery(self):
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            query = self.fs.collection('foo').order_by('id')
+            returned_docs = [doc.to_dict() for doc in transaction.get(query)]
+            query = self.fs.collection('foo').order_by('id')
+            expected_docs = [doc.to_dict() for doc in query.stream()]
+            self.assertEqual(returned_docs, expected_docs)
+
+    def test_transaction_set_setsContentOfDocument(self):
+        doc_content = {'id': '3'}
+        doc_ref = self.fs.collection('foo').document('third')
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            transaction.set(doc_ref, doc_content)
+        self.assertEqual(doc_ref.get().to_dict(), doc_content)
+
+    def test_transaction_set_mergeNewValue(self):
+        doc = self.fs.collection('foo').document('first')
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            transaction.set(doc, {'updated': True}, merge=True)
+        updated_doc = {'id': 1, 'updated': True}
+        self.assertEqual(doc.get().to_dict(), updated_doc)
+
+    def test_transaction_update_changeExistingValue(self):
+        doc = self.fs.collection('foo').document('first')
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            transaction.update(doc, {'updated': False})
+        updated_doc = {'id': 1, 'updated': False}
+        self.assertEqual(doc.get().to_dict(), updated_doc)
+
+    def test_transaction_delete_documentDoesNotExistAfterDelete(self):
+        doc = self.fs.collection('foo').document('first')
+        with Transaction(self.fs) as transaction:
+            transaction._begin()
+            transaction.delete(doc)
+        doc = self.fs.collection('foo').document('first').get()
+        self.assertEqual(False, doc.exists)
+
+
+
