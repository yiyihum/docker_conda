diff --git a/tests/test_checks_base.py b/tests/test_checks_base.py
index f23d8e2..c9a8814 100644
--- a/tests/test_checks_base.py
+++ b/tests/test_checks_base.py
@@ -1,14 +1,18 @@
 import factory
 import pytest
-from sqlalchemy import cast
+from sqlalchemy import cast, and_
 from sqlalchemy import func
 from sqlalchemy import Integer
+from sqlalchemy.orm import Query
 
 from tests import factories
-from threedi_modelchecker.checks.base import EnumCheck, ConditionalCheck, GeneralCheck
+from threedi_modelchecker.checks.base import ConditionalCheck
+from threedi_modelchecker.checks.base import EnumCheck
+from threedi_modelchecker.checks.base import GeneralCheck
 from threedi_modelchecker.checks.base import ForeignKeyCheck
 from threedi_modelchecker.checks.base import GeometryCheck
 from threedi_modelchecker.checks.base import GeometryTypeCheck
+from threedi_modelchecker.checks.base import QueryCheck
 from threedi_modelchecker.checks.base import NotNullCheck
 from threedi_modelchecker.checks.base import TypeCheck
 from threedi_modelchecker.checks.base import UniqueCheck
@@ -413,6 +417,106 @@ def test_conditional_check_advanced(session):
     assert invalids[0].storage_area == connection_node2.storage_area
 
 
+def test_conditional_check_joining_criterion_valid(session):
+    # Joining on criterion valid fails because it takes the complement (negation)
+    # of the joins (instead of only the where statement (joins are in the where
+    # statement)).
+    connection_node1 = factories.ConnectionNodeFactory()
+    connection_node2 = factories.ConnectionNodeFactory()
+    manhole1 = factories.ManholeFactory(
+        connection_node=connection_node1, bottom_level=1.0
+    )
+    factories.ManholeFactory(
+        connection_node=connection_node2, bottom_level=-1.0
+    )
+    factories.PumpstationFactory(
+        connection_node_start=connection_node1, lower_stop_level=0.0
+    )
+    factories.PumpstationFactory(
+        connection_node_start=connection_node2, lower_stop_level=2.0
+    )
+
+    check_lower_stop_level_gt_bottom_level_compliment = GeneralCheck(
+        column=models.Manhole.bottom_level,
+        criterion_valid=and_(
+            models.Pumpstation.connection_node_start_id == models.ConnectionNode.id,
+            models.Manhole.connection_node_id == models.ConnectionNode.id,
+            models.Pumpstation.lower_stop_level > models.Manhole.bottom_level,
+        ),
+    )
+    invalids = check_lower_stop_level_gt_bottom_level_compliment.get_invalid(session)
+    assert len(invalids) != 1  # Note that 1 is what we actually want!
+    assert invalids[0].id == manhole1.id
+
+
+def test_query_check_with_joins(session):
+    connection_node1 = factories.ConnectionNodeFactory()
+    connection_node2 = factories.ConnectionNodeFactory()
+    factories.ManholeFactory(
+        connection_node=connection_node1, bottom_level=1.0
+    )
+    factories.ManholeFactory(
+        connection_node=connection_node2, bottom_level=-1.0
+    )
+    factories.PumpstationFactory(
+        connection_node_start=connection_node1, lower_stop_level=0.0
+    )
+    factories.PumpstationFactory(
+        connection_node_start=connection_node2, lower_stop_level=2.0
+    )
+
+    query = Query(models.ConnectionNode).join(
+        models.Pumpstation.connection_node_start
+    ).join(
+        models.Manhole, models.ConnectionNode.id == models.Manhole.connection_node_id
+    ).filter(
+        models.Pumpstation.lower_stop_level <= models.Manhole.bottom_level,
+    )
+    check = QueryCheck(
+        column=models.Manhole.bottom_level,
+        invalid=query,
+        message="Pumpstation.lower_stop_level should be higher than "
+                "Manhole.bottom_level"
+    )
+    invalids = check.get_invalid(session)
+    assert len(invalids) == 1
+    assert invalids[0].id == connection_node1.id
+
+
+def test_query_check_on_pumpstation(session):
+    connection_node1 = factories.ConnectionNodeFactory()
+    connection_node2 = factories.ConnectionNodeFactory()
+    factories.ManholeFactory(
+        connection_node=connection_node1, bottom_level=1.0
+    )
+    factories.ManholeFactory(
+        connection_node=connection_node2, bottom_level=-1.0
+    )
+    pumpstation_wrong = factories.PumpstationFactory(
+        connection_node_start=connection_node1, lower_stop_level=0.0
+    )
+    factories.PumpstationFactory(
+        connection_node_start=connection_node2, lower_stop_level=2.0
+    )
+
+    query = Query(models.Pumpstation).join(
+        models.ConnectionNode, models.Pumpstation.connection_node_start_id == models.ConnectionNode.id  # noqa: E501
+    ).join(
+        models.Manhole, models.Manhole.connection_node_id == models.ConnectionNode.id
+    ).filter(
+        models.Pumpstation.lower_stop_level <= models.Manhole.bottom_level,
+    )
+    check = QueryCheck(
+        column=models.Pumpstation.lower_stop_level,
+        invalid=query,
+        message="Pumpstation lower_stop_level should be higher than Manhole "
+                "bottom_level"
+    )
+    invalids = check.get_invalid(session)
+    assert len(invalids) == 1
+    assert invalids[0].id == pumpstation_wrong.id
+
+
 def test_get_valid(session):
     factories.ConnectionNodeFactory(storage_area=1)
     factories.ConnectionNodeFactory(storage_area=2)
diff --git a/tests/test_checks_factories.py b/tests/test_checks_factories.py
index 64326d8..828076f 100644
--- a/tests/test_checks_factories.py
+++ b/tests/test_checks_factories.py
@@ -22,7 +22,7 @@ def test_gen_not_unique_checks():
 
 def test_gen_not_null_checks():
     not_null_checks = generate_not_null_checks(models.Manhole.__table__)
-    assert len(not_null_checks) == 4
+    assert len(not_null_checks) == 7
     not_null_check_columns = [check.column for check in not_null_checks]
     assert models.Manhole.id in not_null_check_columns
     assert models.Manhole.code in not_null_check_columns
