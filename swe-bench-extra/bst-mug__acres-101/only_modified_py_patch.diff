diff --git a/acres/preprocess/resource_factory.py b/acres/preprocess/resource_factory.py
index 9ca2824..6f1d3fe 100644
--- a/acres/preprocess/resource_factory.py
+++ b/acres/preprocess/resource_factory.py
@@ -6,10 +6,12 @@ This module provides methods for lazily loading resources.
 import logging
 import os.path
 import pickle
+from collections import OrderedDict
 from typing import Dict, Set, List, Tuple, Any
 
 from gensim.models import Word2Vec
 
+from acres.fastngram import fastngram
 from acres.nn import train
 from acres.preprocess import dumps
 from acres.stats import dictionary
@@ -37,6 +39,7 @@ NGRAMSTAT = {}  # type: Dict[int, Tuple[int,str]]
 CHARACTER_NGRAMS = {}  # type: Dict[str, int]
 WORD_NGRAMS = {}  # type: Dict[str, int]
 DICTIONARY = {}  # type: Dict[str, List[str]]
+FAST_NGRAM = {}  # type: Dict[int, OrderedDict[int, Dict[str, Set[str]]]]
 
 
 def get_log_corpus_filename() -> str:
@@ -303,6 +306,22 @@ def get_dictionary() -> Dict[str, List[str]]:
     return DICTIONARY
 
 
+def get_fastngram() -> 'Dict[int, OrderedDict[int, fastngram.ContextMap]]':
+    """
+    Lazy load the fast n-gram model.
+
+    :return:
+    """
+    global FAST_NGRAM
+
+    if not FAST_NGRAM:
+        word_ngrams = get_word_ngrams()
+        logger.info("Optimizing ngrams...")
+        FAST_NGRAM = fastngram.optimizer(word_ngrams)
+
+    return FAST_NGRAM
+
+
 def reset() -> None:
     """
     Resets global variables to force model recreation.
diff --git a/acres/resolution/resolver.py b/acres/resolution/resolver.py
index e9c7470..162cafc 100644
--- a/acres/resolution/resolver.py
+++ b/acres/resolution/resolver.py
@@ -1,6 +1,7 @@
 from enum import Enum
 from typing import List, Dict, Tuple
 
+from acres.fastngram import fastngram
 from acres.ngram import finder
 from acres.nn import test
 from acres.rater import rater
@@ -15,11 +16,13 @@ class Strategy(Enum):
     NGRAM = 1
     WORD2VEC = 2
     DICTIONARY = 3
+    FASTNGRAM = 4
 
 
 NGRAM_CACHE = {}  # type: Dict[Tuple, List[str]]
 WORD2VEC_CACHE = {}  # type: Dict[Tuple, List[str]]
 DICTIONARY_CACHE = {}  # type: Dict[Tuple, List[str]]
+FASTNGRAM_CACHE = {}  # type: Dict[Tuple, List[str]]
 
 
 def cached_resolve(acronym: str, left_context: str, right_context: str,
@@ -39,7 +42,8 @@ def cached_resolve(acronym: str, left_context: str, right_context: str,
     switcher = {
         Strategy.NGRAM: NGRAM_CACHE,
         Strategy.WORD2VEC: WORD2VEC_CACHE,
-        Strategy.DICTIONARY: DICTIONARY_CACHE
+        Strategy.DICTIONARY: DICTIONARY_CACHE,
+        Strategy.FASTNGRAM: FASTNGRAM_CACHE
     }
 
     cache = switcher.get(strategy)
@@ -90,7 +94,8 @@ def resolve(acronym: str, left_context: str, right_context: str, strategy: Strat
     switcher = {
         Strategy.NGRAM: finder.robust_find_embeddings,
         Strategy.WORD2VEC: test.find_candidates,
-        Strategy.DICTIONARY: dictionary.expand
+        Strategy.DICTIONARY: dictionary.expand,
+        Strategy.FASTNGRAM: fastngram.expand,
     }
 
     func = switcher.get(strategy)

