diff --git a/tests/__main__.py b/tests/__main__.py
index a3472df..ad1d698 100644
--- a/tests/__main__.py
+++ b/tests/__main__.py
@@ -12,18 +12,22 @@ class TestSentinel5dl(unittest.TestCase):
     def _mock_http_request(self, path, filename=None):
         '''Mock HTTP requests to the ESA API
         '''
+        # download
         if filename is not None:
             self._count_download += 1
             with open(filename, 'wb') as f:
                 f.write(b'123')
             return
 
-        # no nownload
-        self._count_request += 1
+        # search request
         if path.startswith('/api/stub/products?'):
+            self._count_search_request += 1
             with open(os.path.join(testpath, 'products.json'), 'rb') as f:
                 return f.read()
+
+        # checksum request
         if path.endswith('/Checksum/Value/$value'):
+            self._count_checksum_request += 1
             # MD5 checksum for string `123`
             return b'202CB962AC59075B964B07152D234B70'
 
@@ -32,7 +36,8 @@ class TestSentinel5dl(unittest.TestCase):
         make any HTTP requests and reset the request counters.
         '''
         setattr(sentinel5dl, '__http_request', self._mock_http_request)
-        self._count_request = 0
+        self._count_search_request = 0
+        self._count_checksum_request = 0
         self._count_download = 0
 
     def test(self):
@@ -46,7 +51,7 @@ class TestSentinel5dl(unittest.TestCase):
 
         # The result returned by the mock contains four products but claims a
         # total of eight products, making sentinel5dl request resources twice.
-        self.assertEqual(self._count_request, 2)
+        self.assertEqual(self._count_search_request, 2)
         self.assertEqual(result['totalresults'], 8)
         self.assertEqual(result['totalresults'], len(result['products']))
 
@@ -66,10 +71,12 @@ class TestSentinel5dl(unittest.TestCase):
                 with open(filename, 'rb') as f:
                     self.assertEqual(f.read(), b'123')
 
-        # We should have made an additional five requests for checksums:
-        # - one for the file we created manually
-        # - four for the duplicated entries in the loaded test data
-        self.assertEqual(self._count_request, 7)
+            # We should have downloaded four files and have an additional four
+            # files storing md5 checksums
+            self.assertEqual(len(os.listdir(tmpdir)), 8)
+
+        # We should have four checksum requests. One for each file
+        self.assertEqual(self._count_checksum_request, 4)
         # We should have downloaded four unique files
         self.assertEqual(self._count_download, 4)
 
