diff --git a/doc/changes/latest.rst b/doc/changes/latest.rst
index 1650fd8a9..42c302d53 100644
--- a/doc/changes/latest.rst
+++ b/doc/changes/latest.rst
@@ -28,6 +28,7 @@ Enhancements
 - :func:`~signal.clean` imputes scrubbed volumes (defined through ``sample_masks``) with cubic spline function before applying butterworth filter (:gh:`3385` by `Hao-Ting Wang`_). 
 - As part of making the User Guide more user-friendly, the introduction was reworked (:gh:`3380` by `Alexis Thual`_)
 - Added instructions for maintainers to make sure LaTeX dependencies are installed before building and deploying the stable docs (:gh:`3426` by `Yasmin Mzayek`_).
+- Parameter ``sample_masks`` in :func:`~signal.clean` and masker functions accept binary mask (:gh:`3439` by `Hao-Ting Wang`_). 
 
 Changes
 -------
@@ -49,3 +50,4 @@ Changes
     * Joblib -- v1.0.0
 
   (:gh:`3440` by `Yasmin Mzayek`_).
+- In release ``0.10.0`` the default resolution for loaded MNI152 templates will be 1mm instead of 2mm (:gh:`3433` by `Yasmin Mzayek`_).
diff --git a/nilearn/datasets/tests/test_struct.py b/nilearn/datasets/tests/test_struct.py
index 7159a4e9d..0afca3853 100644
--- a/nilearn/datasets/tests/test_struct.py
+++ b/nilearn/datasets/tests/test_struct.py
@@ -148,8 +148,8 @@ def test_fetch_oasis_vbm(tmp_path, request_mocker, legacy_format):
 
 def test_load_mni152_template():
     # All subjects
-    template_nii_1mm = struct.load_mni152_template(resolution=1)
-    template_nii_2mm = struct.load_mni152_template()
+    template_nii_1mm = struct.load_mni152_template()
+    template_nii_2mm = struct.load_mni152_template(resolution=2)
     assert template_nii_1mm.shape == (197, 233, 189)
     assert template_nii_2mm.shape == (99, 117, 95)
     assert template_nii_1mm.header.get_zooms() == (1.0, 1.0, 1.0)
@@ -158,8 +158,8 @@ def test_load_mni152_template():
 
 def test_load_mni152_gm_template():
     # All subjects
-    gm_template_nii_1mm = struct.load_mni152_gm_template(resolution=1)
-    gm_template_nii_2mm = struct.load_mni152_gm_template()
+    gm_template_nii_1mm = struct.load_mni152_gm_template()
+    gm_template_nii_2mm = struct.load_mni152_gm_template(resolution=2)
     assert gm_template_nii_1mm.shape == (197, 233, 189)
     assert gm_template_nii_2mm.shape == (99, 117, 95)
     assert gm_template_nii_1mm.header.get_zooms() == (1.0, 1.0, 1.0)
@@ -168,8 +168,8 @@ def test_load_mni152_gm_template():
 
 def test_load_mni152_wm_template():
     # All subjects
-    wm_template_nii_1mm = struct.load_mni152_wm_template(resolution=1)
-    wm_template_nii_2mm = struct.load_mni152_wm_template()
+    wm_template_nii_1mm = struct.load_mni152_wm_template()
+    wm_template_nii_2mm = struct.load_mni152_wm_template(resolution=2)
     assert wm_template_nii_1mm.shape == (197, 233, 189)
     assert wm_template_nii_2mm.shape == (99, 117, 95)
     assert wm_template_nii_1mm.header.get_zooms() == (1.0, 1.0, 1.0)
@@ -177,8 +177,8 @@ def test_load_mni152_wm_template():
 
 
 def test_load_mni152_brain_mask():
-    brain_mask_1mm = struct.load_mni152_brain_mask(resolution=1)
-    brain_mask_2mm = struct.load_mni152_brain_mask()
+    brain_mask_1mm = struct.load_mni152_brain_mask()
+    brain_mask_2mm = struct.load_mni152_brain_mask(resolution=2)
     assert isinstance(brain_mask_1mm, nibabel.Nifti1Image)
     assert isinstance(brain_mask_2mm, nibabel.Nifti1Image)
     # standard MNI template shape
@@ -187,8 +187,8 @@ def test_load_mni152_brain_mask():
 
 
 def test_load_mni152_gm_mask():
-    gm_mask_1mm = struct.load_mni152_gm_mask(resolution=1)
-    gm_mask_2mm = struct.load_mni152_gm_mask()
+    gm_mask_1mm = struct.load_mni152_gm_mask()
+    gm_mask_2mm = struct.load_mni152_gm_mask(resolution=2)
     assert isinstance(gm_mask_1mm, nibabel.Nifti1Image)
     assert isinstance(gm_mask_2mm, nibabel.Nifti1Image)
     # standard MNI template shape
@@ -197,8 +197,8 @@ def test_load_mni152_gm_mask():
 
 
 def test_load_mni152_wm_mask():
-    wm_mask_1mm = struct.load_mni152_wm_mask(resolution=1)
-    wm_mask_2mm = struct.load_mni152_wm_mask()
+    wm_mask_1mm = struct.load_mni152_wm_mask()
+    wm_mask_2mm = struct.load_mni152_wm_mask(resolution=2)
     assert isinstance(wm_mask_1mm, nibabel.Nifti1Image)
     assert isinstance(wm_mask_2mm, nibabel.Nifti1Image)
     # standard MNI template shape
@@ -206,26 +206,6 @@ def test_load_mni152_wm_mask():
     assert wm_mask_2mm.shape == (99, 117, 95)
 
 
-@pytest.mark.parametrize("part", ["_brain", "_gm", "_wm"])
-@pytest.mark.parametrize("kind", ["template", "mask"])
-def test_mni152_resolution_warnings(part, kind):
-    struct._MNI_RES_WARNING_ALREADY_SHOWN = False
-    if kind == "template" and part == "_brain":
-        part = ""
-    loader = getattr(struct, f"load_mni152{part}_{kind}")
-    try:
-        loader.cache_clear()
-    except AttributeError:
-        pass
-    with warnings.catch_warnings(record=True) as w:
-        loader(resolution=1)
-    assert len(w) == 0
-    with warnings.catch_warnings(record=True) as w:
-        loader()
-        loader()
-    assert len(w) == 1
-
-
 def test_fetch_icbm152_brain_gm_mask(tmp_path, request_mocker):
     dataset = struct.fetch_icbm152_2009(data_dir=str(tmp_path), verbose=0)
     struct.load_mni152_template().to_filename(dataset.gm)
diff --git a/nilearn/tests/test_signal.py b/nilearn/tests/test_signal.py
index de0e1fdd6..9dfd365e3 100644
--- a/nilearn/tests/test_signal.py
+++ b/nilearn/tests/test_signal.py
@@ -125,21 +125,6 @@ def test_butterworth():
     # single timeseries
     data = rng.standard_normal(size=n_samples)
     data_original = data.copy()
-    '''
-    May be only on py3.5:
-    Bug in scipy 1.1.0 generates an unavoidable FutureWarning.
-    (More info: https://github.com/scipy/scipy/issues/9086)
-    The number of warnings generated is overwhelming TravisCI's log limit,
-     causing it to fail tests.
-     This hack prevents that and will be removed in future.
-    '''
-    buggy_scipy = (
-        _compare_version(scipy.__version__, '<', '1.2')
-        and _compare_version(scipy.__version__, '>', '1.0')
-    )
-    if buggy_scipy:
-        warnings.simplefilter('ignore')
-    ''' END HACK '''
     out_single = nisignal.butterworth(data, sampling,
                                       low_pass=low_pass, high_pass=high_pass,
                                       copy=True)
@@ -785,13 +770,20 @@ def test_sample_mask():
     sample_mask = np.arange(signals.shape[0])
     scrub_index = [2, 3, 6, 7, 8, 30, 31, 32]
     sample_mask = np.delete(sample_mask, scrub_index)
+    sample_mask_binary = np.full(signals.shape[0], True)
+    sample_mask_binary[scrub_index] = False
 
     scrub_clean = clean(signals, confounds=confounds, sample_mask=sample_mask)
     assert scrub_clean.shape[0] == sample_mask.shape[0]
 
+    # test the binary mask
+    scrub_clean_bin = clean(signals, confounds=confounds,
+                            sample_mask=sample_mask_binary)
+    np.testing.assert_equal(scrub_clean_bin, scrub_clean)
+
     # list of sample_mask for each run
     runs = np.ones(signals.shape[0])
-    runs[0:signals.shape[0] // 2] = 0
+    runs[:signals.shape[0] // 2] = 0
     sample_mask_sep = [np.arange(20), np.arange(20)]
     scrub_index = [[6, 7, 8], [10, 11, 12]]
     sample_mask_sep = [np.delete(sm, si)
@@ -800,6 +792,15 @@ def test_sample_mask():
                            sample_mask=sample_mask_sep, runs=runs)
     assert scrub_sep_mask.shape[0] == signals.shape[0] - 6
 
+    # test for binary mask per run
+    sample_mask_sep_binary = [np.full(signals.shape[0] // 2, True),
+                              np.full(signals.shape[0] // 2, True)]
+    sample_mask_sep_binary[0][scrub_index[0]] = False
+    sample_mask_sep_binary[1][scrub_index[1]] = False
+    scrub_sep_mask = clean(signals, confounds=confounds,
+                           sample_mask=sample_mask_sep_binary, runs=runs)
+    assert scrub_sep_mask.shape[0] == signals.shape[0] - 6
+
     # 1D sample mask with runs labels
     with pytest.raises(ValueError,
                        match=r'Number of sample_mask \(\d\) not matching'):
