diff --git a/nilearn/_utils/glm.py b/nilearn/_utils/glm.py
index 591bd6f54..79da26cd3 100644
--- a/nilearn/_utils/glm.py
+++ b/nilearn/_utils/glm.py
@@ -341,11 +341,24 @@ def _check_run_sample_masks(n_runs, sample_masks):
         raise TypeError(
             f"sample_mask has an unhandled type: {sample_masks.__class__}"
         )
-    if not isinstance(sample_masks, (list, tuple)):
+
+    if isinstance(sample_masks, np.ndarray):
         sample_masks = (sample_masks, )
-    if len(sample_masks) != n_runs:
+
+    checked_sample_masks = [_convert_bool2index(sm) for sm in sample_masks]
+
+    if len(checked_sample_masks) != n_runs:
         raise ValueError(
-            f"Number of sample_mask ({len(sample_masks)}) not matching "
-            f"number of runs ({n_runs})."
+            f"Number of sample_mask ({len(checked_sample_masks)}) not "
+            f"matching number of runs ({n_runs})."
         )
-    return sample_masks
+    return checked_sample_masks
+
+
+def _convert_bool2index(sample_mask):
+    """Convert boolean to index. """
+    check_boolean = [type(i) is bool or type(i) is np.bool_
+                     for i in sample_mask]
+    if all(check_boolean):
+        sample_mask = np.where(sample_mask)[0]
+    return sample_mask
diff --git a/nilearn/datasets/struct.py b/nilearn/datasets/struct.py
index 05a2602a9..89c3b1a09 100644
--- a/nilearn/datasets/struct.py
+++ b/nilearn/datasets/struct.py
@@ -37,10 +37,6 @@ _LEGACY_FORMAT_MSG = (
     "instead of recarrays."
 )
 
-# workaround for
-# https://github.com/nilearn/nilearn/pull/2738#issuecomment-869018842
-_MNI_RES_WARNING_ALREADY_SHOWN = False
-
 
 @fill_doc
 def fetch_icbm152_2009(data_dir=None, url=None, resume=True, verbose=1):
@@ -172,7 +168,7 @@ def load_mni152_template(resolution=None):
 
     Parameters
     ----------
-    resolution: int, optional, Default = 2
+    resolution: int, optional, Default = 1
         If resolution is different from 1, the template is re-sampled with the
         specified resolution.
 
@@ -200,14 +196,7 @@ def load_mni152_template(resolution=None):
 
     """
 
-    global _MNI_RES_WARNING_ALREADY_SHOWN
-    if resolution is None:
-        if not _MNI_RES_WARNING_ALREADY_SHOWN:
-            warnings.warn("Default resolution of the MNI template will change "
-                          "from 2mm to 1mm in version 0.10.0", FutureWarning,
-                          stacklevel=2)
-            _MNI_RES_WARNING_ALREADY_SHOWN = True
-        resolution = 2
+    resolution = resolution or 1
 
     brain_template = check_niimg(MNI152_FILE_PATH)
 
@@ -237,7 +226,7 @@ def load_mni152_gm_template(resolution=None):
 
     Parameters
     ----------
-    resolution: int, optional, Default = 2
+    resolution: int, optional, Default = 1
         If resolution is different from 1, the template is re-sampled with the
         specified resolution.
 
@@ -256,13 +245,7 @@ def load_mni152_gm_template(resolution=None):
 
     """
 
-    global _MNI_RES_WARNING_ALREADY_SHOWN
-    if resolution is None:
-        if not _MNI_RES_WARNING_ALREADY_SHOWN:
-            warnings.warn("Default resolution of the MNI template will change "
-                          "from 2mm to 1mm in version 0.10.0", FutureWarning)
-            _MNI_RES_WARNING_ALREADY_SHOWN = True
-        resolution = 2
+    resolution = resolution or 1
 
     gm_template = check_niimg(GM_MNI152_FILE_PATH)
 
@@ -292,7 +275,7 @@ def load_mni152_wm_template(resolution=None):
 
     Parameters
     ----------
-    resolution: int, optional, Default = 2
+    resolution: int, optional, Default = 1
         If resolution is different from 1, the template is re-sampled with the
         specified resolution.
 
@@ -311,13 +294,7 @@ def load_mni152_wm_template(resolution=None):
 
     """
 
-    global _MNI_RES_WARNING_ALREADY_SHOWN
-    if resolution is None:
-        if not _MNI_RES_WARNING_ALREADY_SHOWN:
-            warnings.warn("Default resolution of the MNI template will change "
-                          "from 2mm to 1mm in version 0.10.0", FutureWarning)
-            _MNI_RES_WARNING_ALREADY_SHOWN = True
-        resolution = 2
+    resolution = resolution or 1
 
     wm_template = check_niimg(WM_MNI152_FILE_PATH)
 
@@ -346,7 +323,7 @@ def load_mni152_brain_mask(resolution=None, threshold=0.2):
 
     Parameters
     ----------
-    resolution: int, optional, Default = 2
+    resolution: int, optional, Default = 1
         If resolution is different from 1, the template loaded is first
         re-sampled with the specified resolution.
 
@@ -372,13 +349,7 @@ def load_mni152_brain_mask(resolution=None, threshold=0.2):
 
     """
 
-    global _MNI_RES_WARNING_ALREADY_SHOWN
-    if resolution is None:
-        if not _MNI_RES_WARNING_ALREADY_SHOWN:
-            warnings.warn("Default resolution of the MNI template will change "
-                          "from 2mm to 1mm in version 0.10.0", FutureWarning)
-            _MNI_RES_WARNING_ALREADY_SHOWN = True
-        resolution = 2
+    resolution = resolution or 1
 
     # Load MNI template
     target_img = load_mni152_template(resolution=resolution)
@@ -397,7 +368,7 @@ def load_mni152_gm_mask(resolution=None, threshold=0.2, n_iter=2):
 
     Parameters
     ----------
-    resolution: int, optional, Default = 2
+    resolution: int, optional, Default = 1
         If resolution is different from 1, the template loaded is first
         re-sampled with the specified resolution.
 
@@ -425,13 +396,7 @@ def load_mni152_gm_mask(resolution=None, threshold=0.2, n_iter=2):
 
     """
 
-    global _MNI_RES_WARNING_ALREADY_SHOWN
-    if resolution is None:
-        if not _MNI_RES_WARNING_ALREADY_SHOWN:
-            warnings.warn("Default resolution of the MNI template will change "
-                          "from 2mm to 1mm in version 0.10.0", FutureWarning)
-            _MNI_RES_WARNING_ALREADY_SHOWN = True
-        resolution = 2
+    resolution = resolution or 1
 
     # Load MNI template
     gm_target = load_mni152_gm_template(resolution=resolution)
@@ -455,7 +420,7 @@ def load_mni152_wm_mask(resolution=None, threshold=0.2, n_iter=2):
 
     Parameters
     ----------
-    resolution: int, optional, Default = 2
+    resolution: int, optional, Default = 1
         If resolution is different from 1, the template loaded is first
         re-sampled with the specified resolution.
 
@@ -483,13 +448,7 @@ def load_mni152_wm_mask(resolution=None, threshold=0.2, n_iter=2):
 
     """
 
-    global _MNI_RES_WARNING_ALREADY_SHOWN
-    if resolution is None:
-        if not _MNI_RES_WARNING_ALREADY_SHOWN:
-            warnings.warn("Default resolution of the MNI template will change "
-                          "from 2mm to 1mm in version 0.10.0", FutureWarning)
-            _MNI_RES_WARNING_ALREADY_SHOWN = True
-        resolution = 2
+    resolution = resolution or 1
 
     # Load MNI template
     wm_target = load_mni152_wm_template(resolution=resolution)
diff --git a/nilearn/image/image.py b/nilearn/image/image.py
index 0bbcfd0b8..257f16a17 100644
--- a/nilearn/image/image.py
+++ b/nilearn/image/image.py
@@ -631,24 +631,24 @@ def index_img(imgs, index):
      >>> joint_mni_image = concat_imgs([datasets.load_mni152_template(),
      ...                                datasets.load_mni152_template()])
      >>> print(joint_mni_image.shape)
-     (99, 117, 95, 2)
+     (197, 233, 189, 2)
 
     We can now select one slice from the last dimension of this 4D-image::
 
      >>> single_mni_image = index_img(joint_mni_image, 1)
      >>> print(single_mni_image.shape)
-     (99, 117, 95)
+     (197, 233, 189)
 
     We can also select multiple frames using the `slice` constructor::
 
      >>> five_mni_images = concat_imgs([datasets.load_mni152_template()] * 5)
      >>> print(five_mni_images.shape)
-     (99, 117, 95, 5)
+     (197, 233, 189, 5)
 
      >>> first_three_images = index_img(five_mni_images,
      ...                                slice(0, 3))
      >>> print(first_three_images.shape)
-     (99, 117, 95, 3)
+     (197, 233, 189, 3)
 
     """
     imgs = check_niimg_4d(imgs)
diff --git a/nilearn/image/resampling.py b/nilearn/image/resampling.py
index 679a6c11a..d4d77d5ef 100644
--- a/nilearn/image/resampling.py
+++ b/nilearn/image/resampling.py
@@ -131,7 +131,7 @@ def coord_transform(x, y, z, affine):
         >>> niimg = datasets.load_mni152_template()
         >>> # Find the MNI coordinates of the voxel (50, 50, 50)
         >>> image.coord_transform(50, 50, 50, niimg.affine)
-        (2.0, -34.0, 28.0)
+        (-48.0, -84.0, -22.0)
 
     """
     squeeze = (not hasattr(x, '__iter__'))
diff --git a/nilearn/signal.py b/nilearn/signal.py
index 9991b3c30..661725409 100644
--- a/nilearn/signal.py
+++ b/nilearn/signal.py
@@ -528,11 +528,14 @@ def clean(signals, runs=None, detrend=True, standardize='zscore',
         signal, as if all were in the same array.
         Default is None.
 
-    sample_mask : None, :class:`numpy.ndarray`, :obj:`list`,\
-    :obj:`tuple`, or :obj:`list` of
-        shape: (number of scans - number of volumes removed, )
+    sample_mask : None, Any type compatible with numpy-array indexing, \
+        or :obj:`list` of
+        shape: (number of scans - number of volumes removed, ) for explicit \
+            index, or (number of scans, ) for binary mask
         Masks the niimgs along time/fourth dimension to perform scrubbing
         (remove volumes with high motion) and/or non-steady-state volumes.
+        When passing binary mask with boolean values, ``True`` refers to
+        volumes kept, and ``False`` for volumes removed.
         This masking step is applied before signal cleaning. When supplying run
         information, sample_mask must be a list containing sets of indexes for
         each run.
