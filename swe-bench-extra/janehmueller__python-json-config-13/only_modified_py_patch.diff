diff --git a/python_json_config/config_builder.py b/python_json_config/config_builder.py
index ba76f6d..2e219b3 100644
--- a/python_json_config/config_builder.py
+++ b/python_json_config/config_builder.py
@@ -40,7 +40,14 @@ class ConfigBuilder(object):
     def __validate_field_values(self):
         for field_name, validation_function in self.__validation_functions.items():
             value = self.__config.get(field_name)
-            assert validation_function(value), f'Config field "{field_name}" contains invalid value "{value}"'
+            validation_result = validation_function(value)
+            error_message = f'Error validating field "{field_name}" with value "{value}"'
+
+            if isinstance(validation_result, tuple):
+                result, validation_error = validation_result
+                assert result, f"{error_message}: {validation_error}"
+            else:
+                assert validation_result, error_message
 
     def __transform_field_values(self):
         for field_name, transformation_function in self.__transformation_functions.items():
diff --git a/python_json_config/validators/generic_validators.py b/python_json_config/validators/generic_validators.py
index 4914b03..8fb28fa 100644
--- a/python_json_config/validators/generic_validators.py
+++ b/python_json_config/validators/generic_validators.py
@@ -1,4 +1,7 @@
-def is_timedelta(value: str) -> bool:
+from typing import Union, Tuple
+
+
+def is_timedelta(value: str) -> Union[bool, Tuple[bool, str]]:
     """
     Tests if the given value is a valid timedelta specification.
     The timedelta needs to be specified as a colon separated string, e.g.: "0:0:23:00:00"
@@ -13,12 +16,12 @@ def is_timedelta(value: str) -> bool:
     """
     split_values = value.split(':')
     if len(split_values) > 5:
-        return False
+        return False, "Timedelta contains more than 5 elements."
 
     try:
         [int(element) for element in split_values]
     except ValueError:
-        return False
+        return False, "Timedelta contains non-integer elements."
 
     return True
 
@@ -29,7 +32,7 @@ def is_valid_choice(options):
     :return: A functions that takes a value and tests if it is within the specified choices. This function returns True
              if the value in the config is in the passed options.
     """
-    def validator(value):
-        return value in options
+    def validator(value) -> Tuple[bool, str]:
+        return value in options, f"Value is not contained in the options {options}"
 
     return validator
diff --git a/python_json_config/validators/network_validators.py b/python_json_config/validators/network_validators.py
index 6579ccf..eb3ca8e 100644
--- a/python_json_config/validators/network_validators.py
+++ b/python_json_config/validators/network_validators.py
@@ -1,7 +1,8 @@
 import socket
+from typing import Union, Tuple
 
 
-def is_ipv4_address(ip_address: str):
+def is_ipv4_address(ip_address: str) -> Union[bool, Tuple[bool, str]]:
     """
     Tests if the given value is a valid IPv4 address
     :param ip_address: The ip address that is tested.
@@ -11,13 +12,13 @@ def is_ipv4_address(ip_address: str):
         socket.inet_aton(ip_address)
         return True
     except socket.error:
-        return False
+        return False, "IP address is not a valid IPv4 address."
 
 
-def is_unreserved_port(port: int):
+def is_unreserved_port(port: int) -> Union[bool, Tuple[bool, str]]:
     """
     Tests if the given port is an unreserved port.
     :param port: The port that is tested.
     :return: True if the port is not reserved otherwise False.
     """
-    return port > 1023
+    return port > 1023, "Port is reserved."

