diff --git a/tests/config_builder_test.py b/tests/config_builder_test.py
index e4e516e..ec267b2 100644
--- a/tests/config_builder_test.py
+++ b/tests/config_builder_test.py
@@ -1,6 +1,7 @@
 from unittest import TestCase
 
 from python_json_config import ConfigBuilder
+from python_json_config.validators import is_unreserved_port
 
 
 class ConfigBuilderTest(TestCase):
@@ -52,7 +53,8 @@ class ConfigBuilderTest(TestCase):
         builder.validate_field_type('server.port', int)
         builder.parse_config(self.path)
         builder.validate_field_type('server.host', int)
-        with self.assertRaises(AssertionError): builder.parse_config(self.path)
+        with self.assertRaises(AssertionError):
+            builder.parse_config(self.path)
 
     def test_value_validation(self):
         builder = ConfigBuilder()
@@ -60,7 +62,8 @@ class ConfigBuilderTest(TestCase):
         builder.validate_field_value('server.port', lambda x: x < 10000)
         builder.parse_config(self.path)
         builder.validate_field_value('cache.ttl', lambda x: x > 200)
-        with self.assertRaises(AssertionError): builder.parse_config(self.path)
+        with self.assertRaises(AssertionError):
+            builder.parse_config(self.path)
 
     def test_value_transformation(self):
         builder = ConfigBuilder()
@@ -74,4 +77,9 @@ class ConfigBuilderTest(TestCase):
         self.assertTrue(config.server.debug_mode)
         self.assertEqual(config.server.port, 5004)
 
-
+    def test_value_validation_error_messages(self):
+        builder = ConfigBuilder()
+        builder.validate_field_value('server.debug_mode', lambda x: (x, "test error"))
+        with self.assertRaises(AssertionError,
+                               msg='Error validating field "server.debug_mode" with value "False": test error'):
+            builder.parse_config(self.path)
diff --git a/tests/config_node_test.py b/tests/config_node_test.py
index 0dc62b6..27f0e67 100644
--- a/tests/config_node_test.py
+++ b/tests/config_node_test.py
@@ -33,7 +33,8 @@ class ConfigNodeTest(TestCase):
     def test_get(self):
         node = ConfigNode(self.config_dict)
         self.assertEqual(node.key1, 1)
-        with self.assertRaises(AttributeError): node.nokey
+        with self.assertRaises(AttributeError):
+            node.nokey
 
         self.assertEqual(node.get('key1'), 1)
         with self.assertRaises(AttributeError): node.get('nokey')
@@ -50,7 +51,8 @@ class ConfigNodeTest(TestCase):
         self.assertIsInstance(node.key1, ConfigNode)
         self.assertEqual(node.key1.newkey, 1)
 
-        with self.assertRaises(AttributeError): node.key3
+        with self.assertRaises(AttributeError):
+            node.key3
         node.update('key3', 'asd')
         self.assertEqual(node.key3, 'asd')
 
diff --git a/tests/validators/generic_validators_test.py b/tests/validators/generic_validators_test.py
index ca3a93c..0285750 100644
--- a/tests/validators/generic_validators_test.py
+++ b/tests/validators/generic_validators_test.py
@@ -6,24 +6,27 @@ from python_json_config.validators import is_timedelta, is_valid_choice
 class GenericValidatorsTest(TestCase):
 
     def test_is_timedelta(self):
-        valid_timedeltas = ["1:3:24:30:23", "0:0:1", "0:0:0:0:1", "01:02:02:03:04"]
-        invalid_timedeltas = ["1:3:24:30:23:45", "01:a:02:03:04"]
+        valid_timedeltas = ['1:3:24:30:23', '0:0:1', '0:0:0:0:1', '01:02:02:03:04']
+        invalid_timedeltas = ['1:3:24:30:23:45', '01:a:02:03:04']
 
         for timedelta in valid_timedeltas:
             self.assertTrue(is_timedelta(timedelta))
 
-        for timedelta in invalid_timedeltas:
-            self.assertFalse(is_timedelta(timedelta))
+        self.assertEqual(is_timedelta(invalid_timedeltas[0]), (False, 'Timedelta contains more than 5 elements.'))
+        self.assertEqual(is_timedelta(invalid_timedeltas[1]), (False, 'Timedelta contains non-integer elements.'))
+
 
     def test_is_valid_choice(self):
-        list_validator = is_valid_choice([1, 2, "3"])
+        list_options = [1, 2, '3']
+        list_validator = is_valid_choice(list_options)
         self.assertTrue(list_validator(1))
-        self.assertFalse(list_validator(3))
-        self.assertTrue(list_validator("3"))
-        self.assertFalse(list_validator(4))
+        self.assertEqual(list_validator(3), (False, f'Value is not contained in the options {list_options}'))
+        self.assertTrue(list_validator('3'))
+        self.assertEqual(list_validator(4), (False, f'Value is not contained in the options {list_options}'))
 
-        dict_validator = is_valid_choice({1: "2", "3": 4})
+        dict_options = {1: '2', '3': 4}
+        dict_validator = is_valid_choice(dict_options)
         self.assertTrue(dict_validator(1))
-        self.assertFalse(dict_validator("2"))
-        self.assertTrue(dict_validator("3"))
-        self.assertFalse(dict_validator(4))
+        self.assertEqual(dict_validator('2'), (False, f'Value is not contained in the options {dict_options}'))
+        self.assertTrue(dict_validator('3'))
+        self.assertEqual(dict_validator(4), (False, f'Value is not contained in the options {dict_options}'))
diff --git a/tests/validators/network_validators_test.py b/tests/validators/network_validators_test.py
index 575e690..df6be47 100644
--- a/tests/validators/network_validators_test.py
+++ b/tests/validators/network_validators_test.py
@@ -6,19 +6,19 @@ from python_json_config.validators import is_ipv4_address, is_unreserved_port
 class NetworkValidatorsTest(TestCase):
 
     def test_is_ipv4_address(self):
-        valid_ips = ["127.0.0.1", "8.8.8.8", "127.1", "8.526344"]
-        invalid_ips = ["327.0.0.1", "8.8.8.8.8", "127.-1", "256.526344"]
+        valid_ips = ['127.0.0.1', '8.8.8.8', '127.1', '8.526344']
+        invalid_ips = ['327.0.0.1', '8.8.8.8.8', '127.-1', '256.526344']
 
         for address in valid_ips:
             self.assertTrue(is_ipv4_address(address))
 
         for address in invalid_ips:
-            self.assertFalse(is_ipv4_address(address))
+            self.assertEqual(is_ipv4_address(address), (False, 'IP address is not a valid IPv4 address.'))
 
     def test_is_unreserved_port(self):
-        self.assertFalse(is_unreserved_port(1))
-        self.assertFalse(is_unreserved_port(-1))
-        self.assertFalse(is_unreserved_port(22))
-        self.assertFalse(is_unreserved_port(1023))
+        self.assertEqual(is_unreserved_port(1), (False, 'Port is reserved.'))
+        self.assertEqual(is_unreserved_port(-1), (False, 'Port is reserved.'))
+        self.assertEqual(is_unreserved_port(22), (False, 'Port is reserved.'))
+        self.assertEqual(is_unreserved_port(1023), (False, 'Port is reserved.'))
         self.assertTrue(is_unreserved_port(1024))
         self.assertTrue(is_unreserved_port(14302))
