diff --git a/medusa-example.ini b/medusa-example.ini
index da5ad97..9d7b4d3 100644
--- a/medusa-example.ini
+++ b/medusa-example.ini
@@ -112,6 +112,10 @@ use_sudo_for_restore = True
 ; Configures the use of SSL to connect to the object storage system.
 ;secure = True
 
+; Enables verification of certificates used in case secure is set to True.
+; Enabling this is not yet supported - we don't have a good way to configure paths to custom certificates.
+; ssl_verify = False
+
 ;aws_cli_path = <Location of the aws cli binary if not in PATH>
 
 [monitoring]
diff --git a/medusa/config.py b/medusa/config.py
index d8ec0e7..60d1477 100644
--- a/medusa/config.py
+++ b/medusa/config.py
@@ -30,8 +30,8 @@ StorageConfig = collections.namedtuple(
     'StorageConfig',
     ['bucket_name', 'key_file', 'prefix', 'fqdn', 'host_file_separator', 'storage_provider',
      'base_path', 'max_backup_age', 'max_backup_count', 'api_profile', 'transfer_max_bandwidth',
-     'concurrent_transfers', 'multi_part_upload_threshold', 'host', 'region', 'port', 'secure', 'aws_cli_path',
-     'kms_id', 'backup_grace_period_in_days', 'use_sudo_for_restore', 'k8s_mode']
+     'concurrent_transfers', 'multi_part_upload_threshold', 'host', 'region', 'port', 'secure', 'ssl_verify',
+     'aws_cli_path', 'kms_id', 'backup_grace_period_in_days', 'use_sudo_for_restore', 'k8s_mode']
 )
 
 CassandraConfig = collections.namedtuple(
@@ -111,6 +111,7 @@ def _build_default_config():
         'concurrent_transfers': '1',
         'multi_part_upload_threshold': str(20 * 1024 * 1024),
         'secure': 'True',
+        'ssl_verify': 'False',      # False until we work out how to specify custom certs
         'aws_cli_path': 'aws',
         'fqdn': socket.getfqdn(),
         'region': 'default',
diff --git a/medusa/storage/s3_base_storage.py b/medusa/storage/s3_base_storage.py
index 8e5b51e..ad6648e 100644
--- a/medusa/storage/s3_base_storage.py
+++ b/medusa/storage/s3_base_storage.py
@@ -162,6 +162,7 @@ class S3BaseStorage(AbstractStorage):
     def _make_connection_arguments(self, config) -> t.Dict[str, str]:
 
         secure = config.secure or 'True'
+        ssl_verify = config.ssl_verify or 'False'   # False until we work out how to specify custom certs
         host = config.host
         port = config.port
 
@@ -175,7 +176,7 @@ class S3BaseStorage(AbstractStorage):
             s3_url = '{}://{}:{}'.format(protocol, host, port)
             return {
                 'endpoint_url': s3_url,
-                'verify': protocol == 'https'
+                'verify': ssl_verify.lower() == 'true'
             }
 
     def _make_transfer_config(self, config):
