diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index f6bf977..9cf8e55 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -38,13 +38,20 @@ This is a place to collect conventions we agreed upon until we find the right pl
 ### Time stamps
 All timestamps are timezone aware pandas `datetime64[ns, UTC]` objects. The default timezone should be `UTC` but the user should be free to use a different one if he wants. See [Issue 101](https://github.com/mie-lab/trackintel/issues/18). 
 
-### Organization of tests
+### Tests 
+#### Organization of tests
 See [Issue 23](https://github.com/mie-lab/trackintel/issues/23)
 - The test folder copies the folder structure that the trackintel.trackintel folder has.
 - Every python module has a single test file
 - Every function has 1 test class
 - Every method of this function should test a single property
 
+#### Test data
+If possible test data should be
+- independent of unrelated preprocessing steps (e.g., avoid starting with positionfixes if you write tests for trips)
+- simple and easy to understand (e.g., try to have a short example with an isolated special case rather than a large dataset that contains a lot of special cases)
+- defined directly in the code itself (e.g, [this example](https://github.com/mie-lab/trackintel/blob/e0c0cdd0d8472ba7b113b3819d062ea8abcd8168/tests/io/test_postgis_gpd.py#L50)
+
 ### Integrety of input data
 Functions should never change the input dataframe but rather return an altered copy.
 
diff --git a/trackintel/analysis/location_identification.py b/trackintel/analysis/location_identification.py
index 399c212..7b6b73b 100644
--- a/trackintel/analysis/location_identification.py
+++ b/trackintel/analysis/location_identification.py
@@ -175,7 +175,7 @@ def freq_method(spts, *labels):
     Assigning the most visited location the label "home" and the second most visited location the label "work".
     The remaining locations get no label.
 
-    Labels can also be passes as an arguement.
+    Labels can also be given as arguments.
 
     Parameters
     ----------
@@ -241,6 +241,7 @@ def _freq_assign(duration, *labels):
     """
     kth = (-duration).argsort()[: len(labels)]  # if inefficient use partial sort.
     label_array = np.full(len(duration), fill_value=None)
+    labels = labels[: len(kth)]  # if provided with more labels than entries.
     label_array[kth] = labels
     return label_array
 
@@ -307,15 +308,18 @@ def osna_method(spts):
     spts_pivot = spts_agg.unstack()
     # get index of maximum for columns "work" and "home"
     spts_idxmax = spts_pivot.groupby(["user_id"]).idxmax()
-    # first assign "home" label
-    spts_pivot.loc[spts_idxmax["home"], "activity_label"] = "home"
+    # first assign labels
+    for col in spts_idxmax.columns:
+        spts_pivot.loc[spts_idxmax[col].dropna(), "activity_label"] = col
 
     # The "home" label could overlap with the "work" label
     # we set the rows where "home" is maximum to zero (pd.NaT) and recalculate index of work maximum.
-    redo_work = spts_idxmax[spts_idxmax["home"] == spts_idxmax["work"]]
-    spts_pivot.loc[redo_work["work"], "work"] = pd.NaT
-    spts_idxmax_work = spts_pivot.groupby(["user_id"])["work"].idxmax()
-    spts_pivot.loc[spts_idxmax_work, "activity_label"] = "work"
+    if all(col in spts_idxmax.columns for col in ["work", "home"]):
+        redo_work = spts_idxmax[spts_idxmax["home"] == spts_idxmax["work"]]
+        spts_pivot.loc[redo_work["work"], "activity_label"] = "home"
+        spts_pivot.loc[redo_work["work"], "work"] = pd.NaT
+        spts_idxmax_work = spts_pivot.groupby(["user_id"])["work"].idxmax()
+        spts_pivot.loc[spts_idxmax_work.dropna(), "activity_label"] = "work"
 
     # now join it back together
     sel = spts_in.columns != "activity_label"  # no overlap with older "activity_label"
