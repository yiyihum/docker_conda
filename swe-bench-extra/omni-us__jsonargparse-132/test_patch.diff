diff --git a/jsonargparse_tests/core_tests.py b/jsonargparse_tests/core_tests.py
index 00aee2c..263a16b 100755
--- a/jsonargparse_tests/core_tests.py
+++ b/jsonargparse_tests/core_tests.py
@@ -660,6 +660,25 @@ class OutputTests(TempDirTestCase):
         self.assertRaises(ValueError, lambda: parser.dump(cfg, format='invalid'))
 
 
+    def test_dump_skip_default(self):
+        parser = ArgumentParser()
+        parser.add_argument('--op1', default=123)
+        parser.add_argument('--op2', default='abc')
+        self.assertEqual(parser.dump(parser.get_defaults(), skip_default=True), '{}\n')
+        self.assertEqual(parser.dump(Namespace(op1=123, op2='xyz'), skip_default=True), 'op2: xyz\n')
+
+
+    def test_dump_skip_default_nested(self):
+        parser = ArgumentParser()
+        parser.add_argument('--g1.op1', type=int, default=123)
+        parser.add_argument('--g1.op2', type=str, default='abc')
+        parser.add_argument('--g2.op1', type=int, default=987)
+        parser.add_argument('--g2.op2', type=str, default='xyz')
+        self.assertEqual(parser.dump(parser.get_defaults(), skip_default=True), '{}\n')
+        self.assertEqual(parser.dump(parser.parse_args(['--g1.op1=0']), skip_default=True), 'g1:\n  op1: 0\n')
+        self.assertEqual(parser.dump(parser.parse_args(['--g2.op2=pqr']), skip_default=True), 'g2:\n  op2: pqr\n')
+
+
     @unittest.skipIf(not dump_preserve_order_support,
                      'Dump preserve order only supported in python>=3.6 and CPython')
     def test_dump_order(self):
diff --git a/jsonargparse_tests/signatures_tests.py b/jsonargparse_tests/signatures_tests.py
index 956d842..86650d7 100755
--- a/jsonargparse_tests/signatures_tests.py
+++ b/jsonargparse_tests/signatures_tests.py
@@ -1145,36 +1145,37 @@ class SignaturesTests(unittest.TestCase):
 
 
     def test_link_arguments_subclass_missing_param_issue_129(self):
-        class ClassA:
-            def __init__(self, a1: int = 1):
-                self.a1 = a1
+        with suppress_stderr():
+            class ClassA:
+                def __init__(self, a1: int = 1):
+                    self.a1 = a1
 
-        class ClassB:
-            def __init__(self, b1: int = 2):
-                self.b1 = b1
+            class ClassB:
+                def __init__(self, b1: int = 2):
+                    self.b1 = b1
 
-        with mock_module(ClassA, ClassB) as module, self.assertLogs(level='DEBUG') as log, suppress_stderr():
             parser = ArgumentParser(error_handler=None, logger={'level': 'DEBUG'})
-            parser.add_subclass_arguments(ClassA, 'a', default=lazy_instance(ClassA))
-            parser.add_subclass_arguments(ClassB, 'b', default=lazy_instance(ClassB))
-            parser.link_arguments('a.init_args.a2', 'b.init_args.b1', apply_on='parse')
-            parser.link_arguments('a.init_args.a1', 'b.init_args.b2', apply_on='parse')
+            with mock_module(ClassA, ClassB) as module, self.assertLogs(level='DEBUG') as log:
+                parser.add_subclass_arguments(ClassA, 'a', default=lazy_instance(ClassA))
+                parser.add_subclass_arguments(ClassB, 'b', default=lazy_instance(ClassB))
+                parser.link_arguments('a.init_args.a2', 'b.init_args.b1', apply_on='parse')
+                parser.link_arguments('a.init_args.a1', 'b.init_args.b2', apply_on='parse')
 
-            cfg = parser.parse_args([f'--a={module}.ClassA', f'--b={module}.ClassB'])
-            self.assertTrue(any('a.init_args.a2 --> b.init_args.b1 ignored since source' in x for x in log.output))
-            self.assertTrue(any('a.init_args.a1 --> b.init_args.b2 ignored since target' in x for x in log.output))
+                parser.parse_args([f'--a={module}.ClassA', f'--b={module}.ClassB'])
+                self.assertTrue(any('a.init_args.a2 --> b.init_args.b1 ignored since source' in x for x in log.output))
+                self.assertTrue(any('a.init_args.a1 --> b.init_args.b2 ignored since target' in x for x in log.output))
 
-        with mock_module(ClassA, ClassB) as module, self.assertLogs(level='DEBUG') as log, suppress_stderr():
             parser = ArgumentParser(error_handler=None, logger={'level': 'DEBUG'})
-            parser.add_subclass_arguments(ClassA, 'a', default=lazy_instance(ClassA))
-            parser.add_subclass_arguments(ClassB, 'b', default=lazy_instance(ClassB))
-            parser.link_arguments('a.init_args.a2', 'b.init_args.b1', apply_on='instantiate')
-            parser.link_arguments('a.init_args.a1', 'b.init_args.b2', apply_on='instantiate')
-
-            cfg = parser.parse_args([f'--a={module}.ClassA', f'--b={module}.ClassB'])
-            cfg_init = parser.instantiate_classes(cfg)
-            self.assertTrue(any('a.init_args.a2 --> b.init_args.b1 ignored since source' in x for x in log.output))
-            self.assertTrue(any('a.init_args.a1 --> b.init_args.b2 ignored since target' in x for x in log.output))
+            with mock_module(ClassA, ClassB) as module, self.assertLogs(level='DEBUG') as log:
+                parser.add_subclass_arguments(ClassA, 'a', default=lazy_instance(ClassA))
+                parser.add_subclass_arguments(ClassB, 'b', default=lazy_instance(ClassB))
+                parser.link_arguments('a.init_args.a2', 'b.init_args.b1', apply_on='instantiate')
+                parser.link_arguments('a.init_args.a1', 'b.init_args.b2', apply_on='instantiate')
+
+                cfg = parser.parse_args([f'--a={module}.ClassA', f'--b={module}.ClassB'])
+                parser.instantiate_classes(cfg)
+                self.assertTrue(any('a.init_args.a2 --> b.init_args.b1 ignored since source' in x for x in log.output))
+                self.assertTrue(any('a.init_args.a1 --> b.init_args.b2 ignored since target' in x for x in log.output))
 
 
     def test_class_from_function(self):
diff --git a/jsonargparse_tests/typehints_tests.py b/jsonargparse_tests/typehints_tests.py
index 38a3f33..dbbd31c 100755
--- a/jsonargparse_tests/typehints_tests.py
+++ b/jsonargparse_tests/typehints_tests.py
@@ -503,6 +503,31 @@ class TypeHintsTests(unittest.TestCase):
         self.assertRaises(ValueError, lambda: lazy_instance(MyClass, param='bad'))
 
 
+    def test_dump_skip_default(self):
+        class MyCalendar(Calendar):
+            def __init__(self, *args, param: str = '0', **kwargs):
+                super().__init__(*args, **kwargs)
+
+        with mock_module(MyCalendar) as module:
+            parser = ArgumentParser()
+            parser.add_argument('--g1.op1', default=123)
+            parser.add_argument('--g1.op2', default='abc')
+            parser.add_argument('--g2.op1', default=4.5)
+            parser.add_argument('--g2.op2', type=Calendar, default=lazy_instance(Calendar, firstweekday=2))
+
+            cfg = parser.get_defaults()
+            dump = parser.dump(cfg, skip_default=True)
+            self.assertEqual(dump, '{}\n')
+
+            cfg.g2.op2.class_path = f'{module}.MyCalendar'
+            dump = parser.dump(cfg, skip_default=True)
+            self.assertEqual(dump, 'g2:\n  op2:\n    class_path: jsonargparse_tests.MyCalendar\n    init_args:\n      firstweekday: 2\n')
+
+            cfg.g2.op2.init_args.firstweekday = 0
+            dump = parser.dump(cfg, skip_default=True)
+            self.assertEqual(dump, 'g2:\n  op2:\n    class_path: jsonargparse_tests.MyCalendar\n')
+
+
 class TypeHintsTmpdirTests(TempDirTestCase):
 
     def test_path(self):
