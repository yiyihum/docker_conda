diff --git a/nipype/interfaces/mrtrix3/tests/test_auto_ResponseSD.py b/nipype/interfaces/mrtrix3/tests/test_auto_ResponseSD.py
index 29a89f097..01104d2d2 100644
--- a/nipype/interfaces/mrtrix3/tests/test_auto_ResponseSD.py
+++ b/nipype/interfaces/mrtrix3/tests/test_auto_ResponseSD.py
@@ -8,7 +8,7 @@ def test_ResponseSD_inputs():
         algorithm=dict(
             argstr='%s',
             mandatory=True,
-            position=-6,
+            position=1,
         ),
         args=dict(argstr='%s', ),
         bval_scale=dict(argstr='-bvalue_scaling %s', ),
diff --git a/nipype/interfaces/tests/test_auto_C3d.py b/nipype/interfaces/tests/test_auto_C3d.py
new file mode 100644
index 000000000..18300e2af
--- /dev/null
+++ b/nipype/interfaces/tests/test_auto_C3d.py
@@ -0,0 +1,61 @@
+# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
+from __future__ import unicode_literals
+from ..c3 import C3d
+
+
+def test_C3d_inputs():
+    input_map = dict(
+        args=dict(argstr='%s', ),
+        environ=dict(
+            nohash=True,
+            usedefault=True,
+        ),
+        ignore_exception=dict(
+            deprecated='1.0.0',
+            nohash=True,
+            usedefault=True,
+        ),
+        in_file=dict(
+            argstr='%s',
+            mandatory=True,
+            position=1,
+        ),
+        interp=dict(argstr='-interpolation %s', ),
+        is_4d=dict(usedefault=True, ),
+        multicomp_split=dict(
+            argstr='-mcr',
+            position=0,
+            usedefault=True,
+        ),
+        out_file=dict(
+            argstr='-o %s',
+            position=-1,
+            xor=['out_files'],
+        ),
+        out_files=dict(
+            argstr='-oo %s',
+            position=-1,
+            xor=['out_file'],
+        ),
+        pix_type=dict(argstr='-type %s', ),
+        resample=dict(argstr='-resample %s', ),
+        scale=dict(argstr='-scale %s', ),
+        shift=dict(argstr='-shift %s', ),
+        smooth=dict(argstr='-smooth %s', ),
+        terminal_output=dict(
+            deprecated='1.0.0',
+            nohash=True,
+        ),
+    )
+    inputs = C3d.input_spec()
+
+    for key, metadata in list(input_map.items()):
+        for metakey, value in list(metadata.items()):
+            assert getattr(inputs.traits()[key], metakey) == value
+def test_C3d_outputs():
+    output_map = dict(out_files=dict(), )
+    outputs = C3d.output_spec()
+
+    for key, metadata in list(output_map.items()):
+        for metakey, value in list(metadata.items()):
+            assert getattr(outputs.traits()[key], metakey) == value
diff --git a/nipype/pipeline/engine/tests/test_base.py b/nipype/pipeline/engine/tests/test_base.py
index 54356fd6c..fd87aa687 100644
--- a/nipype/pipeline/engine/tests/test_base.py
+++ b/nipype/pipeline/engine/tests/test_base.py
@@ -6,6 +6,8 @@ from __future__ import print_function, unicode_literals
 import pytest
 from ..base import EngineBase
 from ....interfaces import base as nib
+from ....interfaces import utility as niu
+from ... import engine as pe
 
 
 class InputSpec(nib.TraitedSpec):
@@ -64,3 +66,24 @@ def test_clone():
 
     with pytest.raises(ValueError):
         base.clone('nodename')
+
+def test_clone_node_iterables(tmpdir):
+    tmpdir.chdir()
+
+    def addstr(string):
+        return ('%s + 2' % string)
+
+    subject_list = ['sub-001', 'sub-002']
+    inputnode = pe.Node(niu.IdentityInterface(fields=['subject']),
+                            name='inputnode')
+    inputnode.iterables = [('subject', subject_list)]
+
+    node_1 = pe.Node(niu.Function(input_names='string',
+                                  output_names='string',
+                                  function=addstr), name='node_1')
+    node_2 = node_1.clone('node_2')
+
+    workflow = pe.Workflow(name='iter_clone_wf')
+    workflow.connect([(inputnode, node_1, [('subject', 'string')]),
+                      (node_1, node_2, [('string', 'string')])])
+    workflow.run()
