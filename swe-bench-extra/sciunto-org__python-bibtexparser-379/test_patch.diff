diff --git a/tests/splitter_tests/test_splitter_basic.py b/tests/splitter_tests/test_splitter_basic.py
index 1b11a89..c65a601 100644
--- a/tests/splitter_tests/test_splitter_basic.py
+++ b/tests/splitter_tests/test_splitter_basic.py
@@ -263,3 +263,59 @@ def test_failed_block():
         'Was still looking for field-value closing `"`'
         in failed_block.error.abort_reason
     )
+
+
+duplicate_bibtex_entry_keys = """
+@article{duplicate,
+  author = {Duplicate, A.},
+  title = {Duplicate article 1},
+  year = {2021},
+}
+@article{duplicate,
+  author = {Duplicate, B.},
+  title = {Duplicate article 2},
+  year = {2022},
+}"""
+
+
+def test_handles_duplicate_entries():
+    """Makes sure that duplicate keys are handled correctly."""
+    import bibtexparser
+
+    lib = bibtexparser.parse_string(duplicate_bibtex_entry_keys)
+    assert len(lib.blocks) == 2
+    assert len(lib.entries) == 1
+    assert len(lib.entries_dict) == 1
+    assert len(lib.failed_blocks) == 1
+
+    assert lib.entries[0]["title"] == "Duplicate article 1"
+    assert isinstance(lib.failed_blocks[0], bibtexparser.model.DuplicateBlockKeyBlock)
+    assert lib.failed_blocks[0].previous_block["title"] == "Duplicate article 1"
+    assert lib.failed_blocks[0].ignore_error_block["title"] == "{Duplicate article 2}"
+    assert isinstance(lib.failed_blocks[0].ignore_error_block, bibtexparser.model.Entry)
+
+
+duplicate_bibtex_string_keys = """
+@string{duplicate = "Duplicate string 1"}
+@string{duplicate = "Duplicate string 2"}
+@string{duplicate = "Duplicate string 3"}
+"""
+
+
+def test_handles_duplicate_strings():
+    """Makes sure that duplicate string keys are handled correctly."""
+    import bibtexparser
+
+    lib = bibtexparser.parse_string(duplicate_bibtex_string_keys)
+    assert len(lib.blocks) == 3
+    assert len(lib.strings) == 1
+    assert len(lib.strings_dict) == 1
+    assert len(lib.failed_blocks) == 2
+
+    assert lib.strings[0].value == "Duplicate string 1"
+    assert isinstance(lib.failed_blocks[0], bibtexparser.model.DuplicateBlockKeyBlock)
+    assert lib.failed_blocks[0].previous_block.value == "Duplicate string 1"
+    assert lib.failed_blocks[0].ignore_error_block.value == '"Duplicate string 2"'
+    assert isinstance(
+        lib.failed_blocks[0].ignore_error_block, bibtexparser.model.String
+    )
