diff --git a/galois/_codes/_bch.py b/galois/_codes/_bch.py
index 2278eae7e..48c95131c 100644
--- a/galois/_codes/_bch.py
+++ b/galois/_codes/_bch.py
@@ -89,7 +89,7 @@ def bch_valid_codes(n, t_min=1):
     while True:
         c = 1
         roots = alpha**(c + np.arange(0, 2*t))
-        powers = GF.characteristic**np.arange(0, GF.degree)
+        powers = GF.characteristic**np.arange(0, GF.degree, dtype=GF.dtypes[-1])
         conjugates = np.unique(np.power.outer(roots, powers))
         g_degree = len(conjugates)
         k = n - g_degree
@@ -201,7 +201,7 @@ class BCH:
             # minimal polynomial and then doing an LCM, we will compute all the unique conjugates of all the roots
             # and then compute (x - c1)*(x - c2)*...*(x - cn), which is equivalent.
             roots = alpha**(c + np.arange(0, 2*t))
-            powers = GF.characteristic**np.arange(0, GF.degree)
+            powers = GF.characteristic**np.arange(0, GF.degree, dtype=GF.dtypes[-1])
             conjugates = np.unique(np.power.outer(roots, powers))
             g_degree = len(conjugates)
 
diff --git a/galois/_codes/_cyclic.py b/galois/_codes/_cyclic.py
index 289b5527a..19da32611 100644
--- a/galois/_codes/_cyclic.py
+++ b/galois/_codes/_cyclic.py
@@ -109,6 +109,7 @@ def roots_to_parity_check_matrix(n, roots):
     if not isinstance(roots, FieldArray):
         raise TypeError(f"Argument `roots` must be a galois.FieldArray, not {type(roots)}.")
 
-    H = np.power.outer(roots, np.arange(n - 1, -1, -1))
+    GF = type(roots)
+    H = np.power.outer(roots, np.arange(n - 1, -1, -1, dtype=GF.dtypes[-1]))
 
     return H
diff --git a/galois/_fields/_array.py b/galois/_fields/_array.py
index dcfc80c2b..d7554ea94 100644
--- a/galois/_fields/_array.py
+++ b/galois/_fields/_array.py
@@ -765,7 +765,7 @@ class FieldArray(np.ndarray, metaclass=FieldClass):
         subfield = field.prime_subfield
         p = field.characteristic
         m = field.degree
-        conjugates = np.power.outer(self, p**np.arange(0, m, dtype=self.dtype))
+        conjugates = np.power.outer(self, p**np.arange(0, m, dtype=field.dtypes[-1]))
         trace = np.add.reduce(conjugates, axis=-1)
         return subfield(trace)
 
diff --git a/galois/_fields/_class.py b/galois/_fields/_class.py
index fe72b56fb..746214926 100644
--- a/galois/_fields/_class.py
+++ b/galois/_fields/_class.py
@@ -313,7 +313,7 @@ class FieldClass(FunctionMeta, UfuncMeta, PropertiesMeta):
 
         if cls.display_mode == "power":
             # Order elements by powers of the primitive element
-            x_default = np.concatenate((np.atleast_1d(cls(0)), cls.primitive_element**np.arange(0, cls.order - 1)))
+            x_default = np.concatenate((np.atleast_1d(cls(0)), cls.primitive_element**np.arange(0, cls.order - 1, dtype=cls.dtypes[-1])))
         else:
             x_default = cls.Elements()
         y_default = x_default if operation != "/" else x_default[1:]
diff --git a/galois/_polys/_functions.py b/galois/_polys/_functions.py
index 8fd3d83de..34a50c27b 100644
--- a/galois/_polys/_functions.py
+++ b/galois/_polys/_functions.py
@@ -113,7 +113,7 @@ def minimal_poly(element):
     if field.is_prime_field:
         return x - element
     else:
-        conjugates = np.unique(element**(field.characteristic**np.arange(0, field.degree)))
+        conjugates = np.unique(element**(field.characteristic**np.arange(0, field.degree, dtype=field.dtypes[-1])))
         poly = Poly.Roots(conjugates, field=field)
         poly = Poly(poly.coeffs, field=field.prime_subfield)
         return poly

