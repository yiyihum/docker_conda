diff --git a/src/psyclone/tests/psyir/nodes/call_test.py b/src/psyclone/tests/psyir/nodes/call_test.py
index 6d8986b05..c73c09334 100644
--- a/src/psyclone/tests/psyir/nodes/call_test.py
+++ b/src/psyclone/tests/psyir/nodes/call_test.py
@@ -1,7 +1,7 @@
 # -----------------------------------------------------------------------------
 # BSD 3-Clause License
 #
-# Copyright (c) 2020, Science and Technology Facilities Council.
+# Copyright (c) 2020-21, Science and Technology Facilities Council.
 # All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
@@ -45,6 +45,10 @@ from psyclone.psyir.symbols import ArrayType, INTEGER_TYPE, DataSymbol, \
 from psyclone.errors import GenerationError
 
 
+class SpecialCall(Call):
+    '''Test Class specialising the Call class'''
+
+
 def test_call_init():
     '''Test that a Call can be created as expected. Also test the routine
     property.
@@ -77,14 +81,17 @@ def test_call_init_error():
             "'NoneType'." in str(info.value))
 
 
-def test_call_create():
+@pytest.mark.parametrize("cls", [Call, SpecialCall])
+def test_call_create(cls):
     '''Test that the create method creates a valid call with arguments'''
 
     routine = RoutineSymbol("ellie")
     array_type = ArrayType(INTEGER_TYPE, shape=[10, 20])
     arguments = [Reference(DataSymbol("arg1", INTEGER_TYPE)),
                  ArrayReference(DataSymbol("arg2", array_type))]
-    call = Call.create(routine, arguments)
+    call = cls.create(routine, arguments)
+    # pylint: disable=unidiomatic-typecheck
+    assert type(call) is cls
     assert call.routine is routine
     for idx, child, in enumerate(call.children):
         assert child is arguments[idx]
