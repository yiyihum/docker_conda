diff --git a/docs/examples/types_url_building.py b/docs/examples/types_url_building.py
new file mode 100644
--- /dev/null
+++ b/docs/examples/types_url_building.py
@@ -0,0 +1,10 @@
+from pydantic import AnyUrl, stricturl
+
+url = AnyUrl.build(scheme='https', host='example.com', query='query=my query')
+print(url)
+
+my_url_builder = stricturl(quote_plus=True)
+url = my_url_builder.build(
+    scheme='http', host='example.com', query='query=my query'
+)
+print(url)
diff --git a/pydantic/networks.py b/pydantic/networks.py
--- a/pydantic/networks.py
+++ b/pydantic/networks.py
@@ -26,6 +26,7 @@
     cast,
     no_type_check,
 )
+from urllib.parse import quote, quote_plus
 
 from . import errors
 from .utils import Representation, update_not_none
@@ -177,6 +178,7 @@ class AnyUrl(str):
     user_required: bool = False
     host_required: bool = True
     hidden_parts: Set[str] = set()
+    quote_plus: bool = False
 
     __slots__ = ('scheme', 'user', 'password', 'host', 'tld', 'host_type', 'port', 'path', 'query', 'fragment')
 
@@ -239,18 +241,19 @@ def build(
 
         url = scheme + '://'
         if user:
-            url += user
+            url += cls.quote(user)
         if password:
-            url += ':' + password
+            url += ':' + cls.quote(password)
         if user or password:
             url += '@'
         url += host
         if port and ('port' not in cls.hidden_parts or cls.get_default_parts(parts).get('port') != port):
             url += ':' + port
         if path:
-            url += path
+            url += '/'.join(map(cls.quote, path.split('/')))
         if query:
-            url += '?' + query
+            queries = query.split('&')
+            url += '?' + '&'.join(map(lambda s: '='.join(map(cls.quote, s.split('='))), queries))
         if fragment:
             url += '#' + fragment
         return url
@@ -391,6 +394,10 @@ def apply_default_parts(cls, parts: 'Parts') -> 'Parts':
                 parts[key] = value  # type: ignore[literal-required]
         return parts
 
+    @classmethod
+    def quote(cls, string: str, safe: str = '') -> str:
+        return quote_plus(string, safe) if cls.quote_plus else quote(string, safe)
+
     def __repr__(self) -> str:
         extra = ', '.join(f'{n}={getattr(self, n)!r}' for n in self.__slots__ if getattr(self, n) is not None)
         return f'{self.__class__.__name__}({super().__repr__()}, {extra})'
@@ -558,6 +565,7 @@ def stricturl(
     tld_required: bool = True,
     host_required: bool = True,
     allowed_schemes: Optional[Collection[str]] = None,
+    quote_plus: bool = False,
 ) -> Type[AnyUrl]:
     # use kwargs then define conf in a dict to aid with IDE type hinting
     namespace = dict(
@@ -567,6 +575,7 @@ def stricturl(
         tld_required=tld_required,
         host_required=host_required,
         allowed_schemes=allowed_schemes,
+        quote_plus=quote_plus,
     )
     return type('UrlValue', (AnyUrl,), namespace)
 
