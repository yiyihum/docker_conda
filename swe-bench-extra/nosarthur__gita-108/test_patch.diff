diff --git a/tests/test_main.py b/tests/test_main.py
index 1b23bee..1d6c9f6 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -5,7 +5,7 @@ import argparse
 import shlex
 
 from gita import __main__
-from gita import utils
+from gita import utils, info
 from conftest import (
     PATH_FNAME, PATH_FNAME_EMPTY, PATH_FNAME_CLASH, GROUP_FNAME,
     async_mock, TEST_DIR,
@@ -35,6 +35,14 @@ class TestLsLl:
         out, err = capfd.readouterr()
         assert err == ''
         assert 'gita' in out
+        assert info.Color.end in out
+
+        # no color on branch name
+        __main__.main(['ll', '-n'])
+        out, err = capfd.readouterr()
+        assert err == ''
+        assert 'gita' in out
+        assert info.Color.end not in out
 
         __main__.main(['ls', 'gita'])
         out, err = capfd.readouterr()
diff --git a/tests/test_utils.py b/tests/test_utils.py
index dfabcee..607a33b 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -9,12 +9,9 @@ from conftest import (
 
 
 @pytest.mark.parametrize('test_input, diff_return, expected', [
-    ({
-        'abc': '/root/repo/'
-    }, True, 'abc \x1b[31mrepo *+_  \x1b[0m msg'),
-    ({
-        'repo': '/root/repo2/'
-    }, False, 'repo \x1b[32mrepo _    \x1b[0m msg'),
+    ([{'abc': '/root/repo/'}, False], True, 'abc \x1b[31mrepo *+_  \x1b[0m msg'),
+    ([{'abc': '/root/repo/'}, True], True, 'abc repo *+_   msg'),
+    ([{'repo': '/root/repo2/'}, False], False, 'repo \x1b[32mrepo _    \x1b[0m msg'),
 ])
 def test_describe(test_input, diff_return, expected, monkeypatch):
     monkeypatch.setattr(info, 'get_head', lambda x: 'repo')
@@ -23,8 +20,8 @@ def test_describe(test_input, diff_return, expected, monkeypatch):
     monkeypatch.setattr(info, 'has_untracked', lambda: True)
     monkeypatch.setattr('os.chdir', lambda x: None)
     print('expected: ', repr(expected))
-    print('got:      ', repr(next(utils.describe(test_input))))
-    assert expected == next(utils.describe(test_input))
+    print('got:      ', repr(next(utils.describe(*test_input))))
+    assert expected == next(utils.describe(*test_input))
 
 
 @pytest.mark.parametrize('path_fname, expected', [
