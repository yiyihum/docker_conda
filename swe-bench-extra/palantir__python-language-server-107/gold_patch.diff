diff --git a/pyls/_utils.py b/pyls/_utils.py
new file mode 100644
index 0000000..b185454
--- /dev/null
+++ b/pyls/_utils.py
@@ -0,0 +1,16 @@
+# Copyright 2017 Palantir Technologies, Inc.
+import functools
+import threading
+
+
+def debounce(interval_s):
+    """Debounce calls to this function until interval_s seconds have passed."""
+    def wrapper(func):
+        @functools.wraps(func)
+        def debounced(*args, **kwargs):
+            if hasattr(debounced, '_timer'):
+                debounced._timer.cancel()
+            debounced._timer = threading.Timer(interval_s, func, args, kwargs)
+            debounced._timer.start()
+        return debounced
+    return wrapper
diff --git a/pyls/python_ls.py b/pyls/python_ls.py
index 2f27bc3..2d8f3f4 100644
--- a/pyls/python_ls.py
+++ b/pyls/python_ls.py
@@ -1,10 +1,13 @@
+# Copyright 2017 Palantir Technologies, Inc.
 import logging
-from . import config, lsp, plugins
+from . import config, lsp, plugins, _utils
 from .language_server import LanguageServer
 from .workspace import Workspace
 
 log = logging.getLogger(__name__)
 
+LINT_DEBOUNCE_S = 0.5  # 500 ms
+
 
 class PythonLanguageServer(LanguageServer):
 
@@ -87,6 +90,7 @@ class PythonLanguageServer(LanguageServer):
     def hover(self, doc_uri, position):
         return self._hook(self._hooks.pyls_hover, doc_uri, position=position) or {'contents': ''}
 
+    @_utils.debounce(LINT_DEBOUNCE_S)
     def lint(self, doc_uri):
         self.workspace.publish_diagnostics(doc_uri, flatten(self._hook(
             self._hooks.pyls_lint, doc_uri
