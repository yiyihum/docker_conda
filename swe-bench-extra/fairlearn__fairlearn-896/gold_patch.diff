diff --git a/AUTHORS.md b/AUTHORS.md
index fb6b376..03fcc42 100644
--- a/AUTHORS.md
+++ b/AUTHORS.md
@@ -28,6 +28,7 @@ All names are sorted alphabetically by last name. Contributors, please add your
 - [Stephen Robicheaux](https://github.com/stephenrobic)
 - [Kevin Robinson](https://github.com/kevinrobinson)
 - [Mehrnoosh Sameki](https://github.com/mesameki)
+- [Bram Schut](http://github.com/bram49)
 - [Chinmay Singh](https://www.microsoft.com/en-us/research/people/chsingh/)
 - [Hanna Wallach](https://www.microsoft.com/en-us/research/people/wallach/)
 - [Hilde Weerts](https://github.com/hildeweerts)
diff --git a/docs/user_guide/installation_and_version_guide/v0.7.1.rst b/docs/user_guide/installation_and_version_guide/v0.7.1.rst
index aebdbae..b4d5102 100644
--- a/docs/user_guide/installation_and_version_guide/v0.7.1.rst
+++ b/docs/user_guide/installation_and_version_guide/v0.7.1.rst
@@ -9,3 +9,6 @@ v0.7.1
 * Relaxed checks made on :code:`X` in :code:`_validate_and_reformat_input()`
   since that is the concern of the underlying estimator and not Fairlearn.
 * Add support for Python 3.9
+* Added error handling in :code:`MetricFrame`. Methods :code:`group_max`, :code:`group_min`,
+  :code:`difference` and :code:`ratio` now accept :code:`errors` as a parameter,
+  which could either be :code:`raise` or :code:`coerce`.
diff --git a/fairlearn/metrics/_metric_frame.py b/fairlearn/metrics/_metric_frame.py
index 9826c3d..8e3ac68 100644
--- a/fairlearn/metrics/_metric_frame.py
+++ b/fairlearn/metrics/_metric_frame.py
@@ -18,6 +18,8 @@ from ._group_feature import GroupFeature
 logger = logging.getLogger(__name__)
 
 _SUBGROUP_COUNT_WARNING_THRESHOLD = 20
+_VALID_ERROR_STRING = ['raise', 'coerce']
+_VALID_GROUPING_FUNCTION = ['min', 'max']
 
 _SF_DICT_CONVERSION_FAILURE = "DataFrame.from_dict() failed on sensitive features. " \
     "Please ensure each array is strictly 1-D."
@@ -29,6 +31,12 @@ _DUPLICATE_FEATURE_NAME = "Detected duplicate feature name: '{0}'"
 _TOO_MANY_FEATURE_DIMS = "Feature array has too many dimensions"
 _SAMPLE_PARAM_KEYS_NOT_IN_FUNC_DICT = \
     "Keys in 'sample_params' do not match those in 'metric'"
+_INVALID_ERRORS_VALUE_ERROR_MESSAGE = "Invalid error value specified. " \
+                                      "Valid values are {0}".format(_VALID_ERROR_STRING)
+_INVALID_GROUPING_FUNCTION_ERROR_MESSAGE = \
+    "Invalid grouping function specified. Valid values are {0}".format(_VALID_GROUPING_FUNCTION)
+_MF_CONTAINS_NON_SCALAR_ERROR_MESSAGE = "Metric frame contains non-scalar cells. " \
+    "Please remove non-scalar columns from your metric frame or use parameter errors='coerce'."
 
 
 def _deprecate_metric_frame_init(new_metric_frame_init):
@@ -372,29 +380,72 @@ class MetricFrame:
         """
         return self._sf_names
 
-    def group_max(self) -> Union[Any, pd.Series, pd.DataFrame]:
-        """Return the maximum value of the metric over the sensitive features.
+    def __group(self, grouping_function: str, errors: str = 'raise') \
+            -> Union[Any, pd.Series, pd.DataFrame]:
+        """Return the minimum/maximum value of the metric over the sensitive features.
 
-        This method computes the maximum value over all combinations of
-        sensitive features for each underlying metric function in the :attr:`.by_group`
-        property (it will only succeed if all the underlying metric
-        functions return scalar values). The exact return type depends on
-        whether control features are present, and whether the metric functions
-        were specified as a single callable or a dictionary.
+        This is a private method, please use .group_min() or .group_max() instead.
+
+        Parameters
+        ----------
+        grouping_function: {'min', 'max'}
+        errors: {'raise', 'coerce'}, default 'raise'
+        if 'raise', then invalid parsing will raise an exception
+        if 'coerce', then invalid parsing will be set as NaN
 
         Returns
         -------
-        typing.Any or pandas.Series or pandas.DataFrame
-            The maximum value over sensitive features. The exact type
+        typing.Any pandas.Series or pandas.DataFrame
+            The minimum value over sensitive features. The exact type
             follows the table in :attr:`.MetricFrame.overall`.
         """
+        if grouping_function not in _VALID_GROUPING_FUNCTION:
+            raise ValueError(_INVALID_GROUPING_FUNCTION_ERROR_MESSAGE)
+
+        if errors not in _VALID_ERROR_STRING:
+            raise ValueError(_INVALID_ERRORS_VALUE_ERROR_MESSAGE)
+
         if not self.control_levels:
-            result = pd.Series(index=self._by_group.columns, dtype='object')
-            for m in result.index:
-                max_val = self._by_group[m].max()
-                result[m] = max_val
+            if errors == "raise":
+                try:
+                    mf = self._by_group
+                    if grouping_function == 'min':
+                        vals = [mf[m].min() for m in mf.columns]
+                    else:
+                        vals = [mf[m].max() for m in mf.columns]
+
+                    result = pd.Series(vals, index=self._by_group.columns, dtype='object')
+                except ValueError as ve:
+                    raise ValueError(_MF_CONTAINS_NON_SCALAR_ERROR_MESSAGE) from ve
+            elif errors == 'coerce':
+                if not self.control_levels:
+                    mf = self._by_group
+                    # Fill in the possible min/max values, else np.nan
+                    if grouping_function == 'min':
+                        vals = [mf[m].min() if np.isscalar(mf[m].values[0])
+                                else np.nan for m in mf.columns]
+                    else:
+                        vals = [mf[m].max() if np.isscalar(mf[m].values[0])
+                                else np.nan for m in mf.columns]
+
+                    result = pd.Series(vals, index=mf.columns, dtype='object')
         else:
-            result = self._by_group.groupby(level=self.control_levels).max()
+            if errors == 'raise':
+                try:
+                    if grouping_function == 'min':
+                        result = self._by_group.groupby(level=self.control_levels).min()
+                    else:
+                        result = self._by_group.groupby(level=self.control_levels).max()
+                except ValueError as ve:
+                    raise ValueError(_MF_CONTAINS_NON_SCALAR_ERROR_MESSAGE) from ve
+            elif errors == 'coerce':
+                # Fill all impossible columns with NaN before grouping metric frame
+                mf = self._by_group.copy()
+                mf = mf.applymap(lambda x: x if np.isscalar(x) else np.nan)
+                if grouping_function == 'min':
+                    result = mf.groupby(level=self.control_levels).min()
+                else:
+                    result = mf.groupby(level=self.control_levels).max()
 
         if self._user_supplied_callable:
             if self.control_levels:
@@ -404,40 +455,57 @@ class MetricFrame:
         else:
             return result
 
-    def group_min(self) -> Union[Any, pd.Series, pd.DataFrame]:
-        """Return the minimum value of the metric over the sensitive features.
+    def group_max(self, errors: str = 'raise') -> Union[Any, pd.Series, pd.DataFrame]:
+        """Return the maximum value of the metric over the sensitive features.
 
-        This method computes the minimum value over all combinations of
+        This method computes the maximum value over all combinations of
         sensitive features for each underlying metric function in the :attr:`.by_group`
         property (it will only succeed if all the underlying metric
         functions return scalar values). The exact return type depends on
         whether control features are present, and whether the metric functions
         were specified as a single callable or a dictionary.
 
+        Parameters
+        ----------
+        errors: {'raise', 'coerce'}, default 'raise'
+            if 'raise', then invalid parsing will raise an exception
+            if 'coerce', then invalid parsing will be set as NaN
+
         Returns
         -------
-        typing.Any pandas.Series or pandas.DataFrame
-            The minimum value over sensitive features. The exact type
+        typing.Any or pandas.Series or pandas.DataFrame
+            The maximum value over sensitive features. The exact type
             follows the table in :attr:`.MetricFrame.overall`.
         """
-        if not self.control_levels:
-            result = pd.Series(index=self._by_group.columns, dtype='object')
-            for m in result.index:
-                min_val = self._by_group[m].min()
-                result[m] = min_val
-        else:
-            result = self._by_group.groupby(level=self.control_levels).min()
+        return self.__group('max', errors)
 
-        if self._user_supplied_callable:
-            if self.control_levels:
-                return result.iloc[:, 0]
-            else:
-                return result.iloc[0]
-        else:
-            return result
+    def group_min(self, errors: str = 'raise') -> Union[Any, pd.Series, pd.DataFrame]:
+        """Return the maximum value of the metric over the sensitive features.
+
+        This method computes the minimum value over all combinations of
+        sensitive features for each underlying metric function in the :attr:`.by_group`
+        property (it will only succeed if all the underlying metric
+        functions return scalar values). The exact return type depends on
+        whether control features are present, and whether the metric functions
+        were specified as a single callable or a dictionary.
+
+        Parameters
+        ----------
+        errors: {'raise', 'coerce'}, default 'raise'
+            if 'raise', then invalid parsing will raise an exception
+            if 'coerce', then invalid parsing will be set as NaN
+
+        Returns
+        -------
+        typing.Any or pandas.Series or pandas.DataFrame
+            The maximum value over sensitive features. The exact type
+            follows the table in :attr:`.MetricFrame.overall`.
+        """
+        return self.__group('min', errors)
 
     def difference(self,
-                   method: str = 'between_groups') -> Union[Any, pd.Series, pd.DataFrame]:
+                   method: str = 'between_groups',
+                   errors: str = 'coerce') -> Union[Any, pd.Series, pd.DataFrame]:
         """Return the maximum absolute difference between groups for each metric.
 
         This method calculates a scalar value for each underlying metric by
@@ -461,24 +529,38 @@ class MetricFrame:
         ----------
         method : str
             How to compute the aggregate. Default is :code:`between_groups`
+        errors: {'raise', 'coerce'}, default 'coerce'
+            if 'raise', then invalid parsing will raise an exception
+            if 'coerce', then invalid parsing will be set as NaN
 
         Returns
         -------
         typing.Any or pandas.Series or pandas.DataFrame
             The exact type follows the table in :attr:`.MetricFrame.overall`.
         """
-        subtrahend = np.nan
+        if errors not in _VALID_ERROR_STRING:
+            raise ValueError(_INVALID_ERRORS_VALUE_ERROR_MESSAGE)
+
         if method == 'between_groups':
-            subtrahend = self.group_min()
+            subtrahend = self.group_min(errors=errors)
         elif method == 'to_overall':
             subtrahend = self.overall
         else:
             raise ValueError("Unrecognised method '{0}' in difference() call".format(method))
 
-        return (self.by_group - subtrahend).abs().max(level=self.control_levels)
+        mf = self.by_group.copy()
+        # Can assume errors='coerce', else error would already have been raised in .group_min
+        # Fill all non-scalar values with NaN
+        if isinstance(mf, pd.Series):
+            mf = mf.map(lambda x: x if np.isscalar(x) else np.nan)
+        else:
+            mf = mf.applymap(lambda x: x if np.isscalar(x) else np.nan)
+
+        return (mf - subtrahend).abs().max(level=self.control_levels)
 
     def ratio(self,
-              method: str = 'between_groups') -> Union[Any, pd.Series, pd.DataFrame]:
+              method: str = 'between_groups',
+              errors: str = 'coerce') -> Union[Any, pd.Series, pd.DataFrame]:
         """Return the minimum ratio between groups for each metric.
 
         This method calculates a scalar value for each underlying metric by
@@ -504,15 +586,21 @@ class MetricFrame:
         ----------
         method : str
             How to compute the aggregate. Default is :code:`between_groups`
+        errors: {'raise', 'coerce'}, default 'coerce'
+            if 'raise', then invalid parsing will raise an exception
+            if 'coerce', then invalid parsing will be set as NaN
 
         Returns
         -------
         typing.Any or pandas.Series or pandas.DataFrame
             The exact type follows the table in :attr:`.MetricFrame.overall`.
         """
+        if errors not in _VALID_ERROR_STRING:
+            raise ValueError(_INVALID_ERRORS_VALUE_ERROR_MESSAGE)
+
         result = None
         if method == 'between_groups':
-            result = self.group_min() / self.group_max()
+            result = self.group_min(errors=errors) / self.group_max(errors=errors)
         elif method == 'to_overall':
             if self._user_supplied_callable:
                 tmp = self.by_group / self.overall
