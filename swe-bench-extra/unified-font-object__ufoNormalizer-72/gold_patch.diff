diff --git a/src/ufonormalizer.py b/src/ufonormalizer.py
index ff76f91..796bb37 100644
--- a/src/ufonormalizer.py
+++ b/src/ufonormalizer.py
@@ -4,6 +4,7 @@ from __future__ import print_function, unicode_literals
 
 import time
 import os
+import re
 import shutil
 from xml.etree import cElementTree as ET
 import plistlib
@@ -158,11 +159,9 @@ else:
 class UFONormalizerError(Exception):
     pass
 
-
 DEFAULT_FLOAT_PRECISION = 10
 FLOAT_FORMAT = "%%.%df" % DEFAULT_FLOAT_PRECISION
 
-
 def normalizeUFO(ufoPath, outputPath=None, onlyModified=True,
                  floatPrecision=DEFAULT_FLOAT_PRECISION, writeModTimes=True):
     global FLOAT_FORMAT
@@ -1178,6 +1177,8 @@ class XMLWriter(object):
         self.raw(line)
 
     def text(self, text):
+        text = text.strip("\n")
+        text = dedent_tabs(text)
         text = text.strip()
         text = xmlEscapeText(text)
         paragraphs = []
@@ -1358,6 +1359,64 @@ def xmlConvertFloat(value):
 def xmlConvertInt(value):
     return str(value)
 
+
+# ---------------
+# Text Operations
+# ---------------
+
+WHITESPACE_ONLY_RE = re.compile('^[\s\t]+$', re.MULTILINE)
+LEADING_WHITESPACE_RE = re.compile('(^(?:\s{4}|\t)*)(?:[^\t\n])', re.MULTILINE)
+
+def dedent_tabs(text):
+    """
+    Based on `textwrap.dedent`, but modified to only work on tabs and 4-space indents
+
+    Remove any common leading tabs from every line in `text`.
+    This can be used to make triple-quoted strings line up with the left
+    edge of the display, while still presenting them in the source code
+    in indented form.
+
+    Entirely blank lines are normalized to a newline character.
+    """
+    # Look for the longest leading string of spaces and tabs common to
+    # all lines.
+    margin = None
+    text = WHITESPACE_ONLY_RE.sub('', text)
+    indents = LEADING_WHITESPACE_RE.findall(text)
+    for indent in indents:
+        if margin is None:
+            margin = indent
+
+        # Current line more deeply indented than previous winner:
+        # no change (previous winner is still on top).
+        elif indent.startswith(margin):
+            pass
+
+        # Current line consistent with and no deeper than previous winner:
+        # it's the new winner.
+        elif margin.startswith(indent):
+            margin = indent
+
+        # Find the largest common whitespace between current line and previous
+        # winner.
+        else:
+            for i, (x, y) in enumerate(zip(margin, indent)):
+                if x != y:
+                    margin = margin[:i]
+                    break
+
+    # sanity check (testing/debugging only)
+    if 0 and margin:
+        for line in text.split("\n"):
+            assert not line or line.startswith(margin), \
+                   "line = %r, margin = %r" % (line, margin)
+
+    if margin:
+        text = re.sub(r'(?m)^' + margin, '', text)
+    return text
+
+
+
 # ---------------
 # Path Operations
 # ---------------
