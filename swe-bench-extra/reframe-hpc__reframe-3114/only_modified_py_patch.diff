diff --git a/reframe/core/launchers/__init__.py b/reframe/core/launchers/__init__.py
index 662facc9..d1c10b2c 100644
--- a/reframe/core/launchers/__init__.py
+++ b/reframe/core/launchers/__init__.py
@@ -4,12 +4,16 @@
 # SPDX-License-Identifier: BSD-3-Clause
 
 import abc
-
-import reframe.core.fields as fields
 import reframe.utility.typecheck as typ
+from reframe.core.meta import RegressionTestMeta
+from reframe.core.warnings import user_deprecation_warning
+
 
+class _JobLauncherMeta(RegressionTestMeta, abc.ABCMeta):
+    '''Job launcher metaclass.'''
 
-class JobLauncher(abc.ABC):
+
+class JobLauncher(metaclass=_JobLauncherMeta):
     '''Abstract base class for job launchers.
 
     A job launcher is the executable that actually launches a distributed
@@ -30,7 +34,28 @@ class JobLauncher(abc.ABC):
     #:
     #: :type: :class:`List[str]`
     #: :default: ``[]``
-    options = fields.TypedField(typ.List[str])
+    options = variable(typ.List[str], value=[])
+
+    #: Optional modifier of the launcher command.
+    #:
+    #: This will be combined with the :attr:`modifier_options` and prepended to
+    #: the parallel launch command.
+    #:
+    #: :type: :class:`str`
+    #: :default: ``''``
+    #:
+    #: .. versionadded:: 4.6.0
+    modifier = variable(str, value='')
+
+    #: Options to be passed to the launcher :attr:`modifier`.
+    #:
+    #: If the modifier is empty, these options will be ignored.
+    #:
+    #: :type: :clas:`List[str]`
+    #: :default: ``[]``
+    #:
+    #: :versionadded:: 4.6.0
+    modifier_options = variable(typ.List[str], value=[])
 
     def __init__(self):
         self.options = []
@@ -53,7 +78,13 @@ class JobLauncher(abc.ABC):
         :param job: a job descriptor.
         :returns: the launcher command as a string.
         '''
-        return ' '.join(self.command(job) + self.options)
+        cmd_tokens = []
+        if self.modifier:
+            cmd_tokens.append(self.modifier)
+            cmd_tokens += self.modifier_options
+
+        cmd_tokens += self.command(job) + self.options
+        return ' '.join(cmd_tokens)
 
 
 class LauncherWrapper(JobLauncher):
@@ -90,8 +121,13 @@ class LauncherWrapper(JobLauncher):
 
     '''
 
-    def __init__(self, target_launcher, wrapper_command, wrapper_options=[]):
+    def __init__(self, target_launcher, wrapper_command, wrapper_options=None):
         super().__init__()
+        user_deprecation_warning("'LauncherWrapper is deprecated; "
+                                 "please use the launcher's 'modifier' and "
+                                 "'modifier_options' instead")
+
+        wrapper_options = wrapper_options or []
         self.options = target_launcher.options
         self._target_launcher = target_launcher
         self._wrapper_command = [wrapper_command] + wrapper_options
diff --git a/reframe/core/launchers/rsh.py b/reframe/core/launchers/rsh.py
index 984f11a5..d858caf1 100644
--- a/reframe/core/launchers/rsh.py
+++ b/reframe/core/launchers/rsh.py
@@ -29,5 +29,11 @@ class SSHLauncher(JobLauncher):
         return ['ssh', '-o BatchMode=yes'] + ssh_opts + [hostname]
 
     def run_command(self, job):
+        cmd_tokens = []
+        if self.modifier:
+            cmd_tokens.append(self.modifier)
+            cmd_tokens += self.modifier_options
+
         # self.options is processed specially above
-        return ' '.join(self.command(job))
+        cmd_tokens += self.command(job)
+        return ' '.join(cmd_tokens)

