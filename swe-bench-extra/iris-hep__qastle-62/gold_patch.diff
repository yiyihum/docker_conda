diff --git a/README.md b/README.md
index 4b9d7d5..2c040fb 100644
--- a/README.md
+++ b/README.md
@@ -82,6 +82,7 @@ All defined s-expressions are listed here, though this specification will be exp
     - `predicate` must be a `lambda` with one argument
   - Any: `(Any <source> <predicate>)`
     - `predicate` must be a `lambda` with one argument
+  - Concat: `(Concat <first> <second>)`
   - Zip: `(Zip <source>)`
   - OrderBy: `(OrderBy <source> <key_selector>)`
     - `key_selector` must be a `lambda` with one argument
diff --git a/qastle/linq_util.py b/qastle/linq_util.py
index f04fcbe..bb0e2ff 100644
--- a/qastle/linq_util.py
+++ b/qastle/linq_util.py
@@ -55,6 +55,10 @@ class Any(ast.AST):
     _fields = ['source', 'predicate']
 
 
+class Concat(ast.AST):
+    _fields = ['first', 'second']
+
+
 class Zip(ast.AST):
     _fields = ['source']
 
@@ -84,6 +88,7 @@ linq_operator_names = ('Where',
                        'Sum',
                        'All',
                        'Any',
+                       'Concat',
                        'Zip',
                        'OrderBy',
                        'OrderByDescending',
@@ -193,6 +198,10 @@ class InsertLINQNodesTransformer(ast.NodeTransformer):
                 raise SyntaxError('Any() call argument must be a lambda')
             return Any(source=self.visit(source),
                        predicate=self.visit(args[0]))
+        elif function_name == 'Concat':
+            if len(args) != 1:
+                raise SyntaxError('Concat() call must have exactly one argument')
+            return Concat(first=self.visit(source), second=self.visit(args[0]))
         elif function_name == 'Zip':
             if len(args) != 0:
                 raise SyntaxError('Zip() call must have zero arguments')
diff --git a/qastle/transform.py b/qastle/transform.py
index f109686..f1c2629 100644
--- a/qastle/transform.py
+++ b/qastle/transform.py
@@ -1,5 +1,5 @@
 from .linq_util import (Where, Select, SelectMany, First, Last, ElementAt, Aggregate, Count, Max,
-                        Min, Sum, All, Any, Zip, OrderBy, OrderByDescending, Choose)
+                        Min, Sum, All, Any, Concat, Zip, OrderBy, OrderByDescending, Choose)
 from .ast_util import wrap_ast, unwrap_ast
 
 import lark
@@ -219,6 +219,11 @@ class PythonASTToTextASTTransformer(ast.NodeVisitor):
                                                self.visit(node.source),
                                                self.visit(node.predicate))
 
+    def visit_Concat(self, node):
+        return self.make_composite_node_string('Concat',
+                                               self.visit(node.first),
+                                               self.visit(node.second))
+
     def visit_Zip(self, node):
         return self.make_composite_node_string('Zip', self.visit(node.source))
 
@@ -499,6 +504,11 @@ class TextASTToPythonASTTransformer(lark.Transformer):
                                   + str(len(fields[1].args.args)))
             return Any(source=fields[0], predicate=fields[1])
 
+        elif node_type == 'Concat':
+            if len(fields) != 2:
+                raise SyntaxError('Concat node must have two fields; found ' + str(len(fields)))
+            return Concat(first=fields[0], second=fields[1])
+
         elif node_type == 'Zip':
             if len(fields) != 1:
                 raise SyntaxError('Zip node must have one field; found ' + str(len(fields)))
