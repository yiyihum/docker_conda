diff --git a/ddsc/core/filedownloader.py b/ddsc/core/filedownloader.py
index 5049aac..e8ab7f5 100644
--- a/ddsc/core/filedownloader.py
+++ b/ddsc/core/filedownloader.py
@@ -106,8 +106,9 @@ class FileDownloader(object):
         Write out a empty file so the workers can seek to where they should write and write their data.
         """
         with open(self.path, "wb") as outfile:
-            outfile.seek(int(self.file_size) - 1)
-            outfile.write(b'\0')
+            if self.file_size > 0:
+                outfile.seek(int(self.file_size) - 1)
+                outfile.write(b'\0')
 
     def make_and_start_process(self, range_start, range_end, progress_queue):
         """
diff --git a/ddsc/core/fileuploader.py b/ddsc/core/fileuploader.py
index 43356c5..4b57b61 100644
--- a/ddsc/core/fileuploader.py
+++ b/ddsc/core/fileuploader.py
@@ -181,12 +181,14 @@ class ParallelChunkProcessor(object):
             processes.append(self.make_and_start_process(index, num_items, progress_queue))
         wait_for_processes(processes, num_chunks, progress_queue, self.watcher, self.local_file)
 
-
     @staticmethod
     def determine_num_chunks(chunk_size, file_size):
         """
         Figure out how many pieces we are sending the file in.
+        NOTE: duke-data-service requires an empty chunk to be uploaded for empty files.
         """
+        if file_size == 0:
+            return 1
         return int(math.ceil(float(file_size) / float(chunk_size)))
 
     @staticmethod
diff --git a/ddsc/tests/empty_file b/ddsc/tests/empty_file
new file mode 100644
index 0000000..e69de29
diff --git a/setup.py b/setup.py
index 8fee84a..2fe9f5b 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@ from setuptools import setup
 
 
 setup(name='DukeDSClient',
-        version='0.2.8',
+        version='0.2.9',
         description='Command line tool(ddsclient) to upload/manage projects on the duke-data-service.',
         url='https://github.com/Duke-GCB/DukeDSClient',
         keywords='duke dds dukedataservice',
