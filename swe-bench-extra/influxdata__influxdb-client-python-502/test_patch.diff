diff --git a/tests/query_output.json b/tests/query_output.json
index 4cbe36d..b60aac0 100644
--- a/tests/query_output.json
+++ b/tests/query_output.json
@@ -78,7 +78,18 @@
           "_time": "2020-02-27T16:20:00+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:20:00+00:00",
+          2.0,
+          "test1"
+        ]
       },
       {
         "table": 0,
@@ -92,7 +103,18 @@
           "_time": "2020-02-27T16:21:40+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:21:40+00:00",
+          2.0,
+          "test1"
+        ]
       },
       {
         "table": 0,
@@ -106,7 +128,18 @@
           "_time": "2020-02-27T16:23:20+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:23:20+00:00",
+          2.0,
+          "test1"
+        ]
       },
       {
         "table": 0,
@@ -120,7 +153,18 @@
           "_time": "2020-02-27T16:25:00+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:25:00+00:00",
+          2.0,
+          "test1"
+        ]
       },
       {
         "table": 0,
@@ -134,7 +178,18 @@
           "_time": "2020-02-27T16:26:40+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:26:40+00:00",
+          2.0,
+          "test1"
+        ]
       },
       {
         "table": 0,
@@ -148,7 +203,18 @@
           "_time": "2020-02-27T16:28:20+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:28:20+00:00",
+          2.0,
+          "test1"
+        ]
       },
       {
         "table": 0,
@@ -162,7 +228,18 @@
           "_time": "2020-02-27T16:30:00+00:00",
           "_value": 2.0,
           "tag": "test1"
-        }
+        },
+        "row": [
+          "_result",
+          0,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:30:00+00:00",
+          2.0,
+          "test1"
+        ]
       }
     ]
   },
@@ -245,7 +322,18 @@
           "_time": "2020-02-27T16:20:00+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:20:00+00:00",
+          2.0,
+          "test2"
+        ]
       },
       {
         "table": 1,
@@ -259,7 +347,18 @@
           "_time": "2020-02-27T16:21:40+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:21:40+00:00",
+          2.0,
+          "test2"
+        ]
       },
       {
         "table": 1,
@@ -273,7 +372,18 @@
           "_time": "2020-02-27T16:23:20+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:23:20+00:00",
+          2.0,
+          "test2"
+        ]
       },
       {
         "table": 1,
@@ -287,7 +397,18 @@
           "_time": "2020-02-27T16:25:00+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:25:00+00:00",
+          2.0,
+          "test2"
+        ]
       },
       {
         "table": 1,
@@ -301,7 +422,18 @@
           "_time": "2020-02-27T16:26:40+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:26:40+00:00",
+          2.0,
+          "test2"
+        ]
       },
       {
         "table": 1,
@@ -315,7 +447,18 @@
           "_time": "2020-02-27T16:28:20+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:28:20+00:00",
+          2.0,
+          "test2"
+        ]
       },
       {
         "table": 1,
@@ -329,7 +472,18 @@
           "_time": "2020-02-27T16:30:00+00:00",
           "_value": 2.0,
           "tag": "test2"
-        }
+        },
+        "row": [
+          "_result",
+          1,
+          "value",
+          "python_client_test",
+          "2010-02-27T04:48:32.752600+00:00",
+          "2020-02-27T16:48:32.752600+00:00",
+          "2020-02-27T16:30:00+00:00",
+          2.0,
+          "test2"
+        ]
       }
     ]
   }
diff --git a/tests/test_FluxCSVParser.py b/tests/test_FluxCSVParser.py
index b7461f2..3091ff9 100644
--- a/tests/test_FluxCSVParser.py
+++ b/tests/test_FluxCSVParser.py
@@ -3,6 +3,7 @@ import math
 import unittest
 from io import BytesIO
 
+import pytest
 from urllib3 import HTTPResponse
 
 from influxdb_client.client.flux_csv_parser import FluxCsvParser, FluxSerializationMode, FluxQueryException, \
@@ -356,6 +357,26 @@ class FluxCsvParserTest(unittest.TestCase):
         self.assertEqual(['south', 'B', None, 18], parsed[2])
         self.assertEqual(['south', 'D', None, 22], parsed[3])
 
+    def test_parse_duplicate_column_names(self):
+        data = """#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,string,string,double
+#group,false,false,true,true,false,true,true,false
+#default,_result,,,,,,,
+,result,table,_start,_stop,_time,_measurement,location,result
+,,0,2022-09-13T06:14:40.469404272Z,2022-09-13T06:24:40.469404272Z,2022-09-13T06:24:33.746Z,my_measurement,Prague,25.3
+,,0,2022-09-13T06:14:40.469404272Z,2022-09-13T06:24:40.469404272Z,2022-09-13T06:24:39.299Z,my_measurement,Prague,25.3
+,,0,2022-09-13T06:14:40.469404272Z,2022-09-13T06:24:40.469404272Z,2022-09-13T06:24:40.454Z,my_measurement,Prague,25.3
+"""
+        with pytest.warns(UserWarning) as warnings:
+            tables = self._parse_to_tables(data=data)
+        self.assertEqual(1, len(warnings))
+        self.assertEqual(1, tables.__len__())
+        self.assertEqual(8, tables[0].columns.__len__())
+        self.assertEqual(3, tables[0].records.__len__())
+        self.assertEqual(7, tables[0].records[0].values.__len__())
+        self.assertEqual(8, tables[0].records[0].row.__len__())
+        self.assertEqual(25.3, tables[0].records[0].row[7])
+
+
     @staticmethod
     def _parse_to_tables(data: str, serialization_mode=FluxSerializationMode.tables,
                          response_metadata_mode=FluxResponseMetadataMode.full) -> TableList:
