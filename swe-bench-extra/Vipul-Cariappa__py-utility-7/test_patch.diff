diff --git a/tests/func.py b/tests/func.py
new file mode 100644
index 0000000..cbe21ea
--- /dev/null
+++ b/tests/func.py
@@ -0,0 +1,20 @@
+def memory(x):
+    x = [i for i in range(x)]
+    return -1
+
+
+def time(x):
+    # recursive function to find xth fibonacci number
+    if x < 3:
+        return 1
+    return time(x-1) + time(x-2)
+
+
+def error(x=None):
+    # error function
+    return "a" / 2
+
+
+def return_check(*args, **kwagrs):
+    # args and kwargs function
+    return list(args) + list(kwagrs.values())
diff --git a/tests/test_memory.py b/tests/test_memory.py
index c5b3197..437a8ac 100644
--- a/tests/test_memory.py
+++ b/tests/test_memory.py
@@ -1,50 +1,46 @@
 from unittest import TestCase
 from pyutility import limit_memory, memoryit
 
-
-def func1(x):
-    x = [i for i in range(x)]
-    return -1
-
-
-def func2():
-    # error function
-    return "a" / 2
-
-
-def func3(*args, **kwagrs):
-    # args and kwargs function
-    return list(args) + list(kwagrs.values())
+from .func import memory, error, return_check
 
 
 class MemoryitTest(TestCase):
-    def setUp(self):
-        self.er_func = memoryit(func2)
-        self.func = memoryit(func1)
-        self.ka_func = memoryit(func3)
 
-    def test_memoryit_1(self):
-        self.assertIsInstance(self.func(5), int)
+    def test_memoryit1(self):
+        v = memoryit(memory, args=(5,))
+        self.assertIsInstance(v, int)
 
-    def test_memoryit_2(self):
-        self.assertRaises(Exception, self.er_func)
+    def test_memoryit2(self):
+        self.assertRaises(Exception, memoryit, error, 5)
 
 
 class LimitMemoryTest(TestCase):
-    def setUp(self):
-        self.er_func = limit_memory()(func2)
-        self.func = limit_memory()(func1)
-        self.ka_func = limit_memory()(func3)
 
     def test_limit_memory_1(self):
-        self.assertEqual(self.func(3), -1)
+        v = limit_memory(memory, args=(10,))
+        self.assertEqual(v, -1)
 
     def test_limit_memory_2(self):
-        self.assertRaises(Exception, self.er_func)
+        self.assertRaises(
+            Exception,
+            limit_memory,
+            error,
+            args=(100_000_000,)
+        )
 
     def test_limit_memory_3(self):
-        self.assertRaises(MemoryError, self.func, 100_000_000)
+        self.assertRaises(
+            MemoryError,
+            limit_memory,
+            memory,
+            args=(500_000_000,)
+        )
 
     def test_limit_memory_4(self):
-        self.assertEqual(self.ka_func(
-            1, 2, 3, four=4, five=5), [1, 2, 3, 4, 5])
+        v = limit_memory(
+            return_check,
+            args=(1, 2, 3),
+            kwargs={"four": 4, "five": 5}
+        )
+
+        self.assertEqual(v, [1, 2, 3, 4, 5])
diff --git a/tests/test_time.py b/tests/test_time.py
index ce5ec03..78bbd2c 100644
--- a/tests/test_time.py
+++ b/tests/test_time.py
@@ -1,52 +1,49 @@
 from unittest import TestCase
 from pyutility import limit_time, timeit
 
-
-def func1(x):
-    # recursive function to find xth fibonacci number
-    if x < 3:
-        return 1
-    return func1(x-1) + func1(x-2)
-
-
-def func2():
-    # error function
-    return "a" / 2
-
-
-def func3(*args, **kwagrs):
-    # args and kwargs function
-    return list(args) + list(kwagrs.values())
+from .func import time, error, return_check
 
 
 class TimeitTest(TestCase):
-    def setUp(self):
-        self.er_func = timeit(func2)
-        self.func = timeit(func1)
-        self.ka_func = timeit(func3)
 
     def test_timeit1(self):
-        self.assertIsInstance(self.func(5), float)
+        v = timeit(time, args=(5,))
+        self.assertIsInstance(v, float)
 
     def test_timeit2(self):
-        self.assertRaises(Exception, self.er_func)
+        self.assertRaises(Exception, timeit, error, 5)
 
 
 class LimitTimeTest(TestCase):
-    def setUp(self):
-        self.er_func = limit_time(2)(func2)
-        self.func = limit_time(2)(func1)
-        self.ka_func = limit_time(2)(func3)
 
     def test_limit_time_1(self):
-        self.assertEqual(self.func(10), 55)
+        v = limit_time(time, time=2, args=(10,))
+        self.assertEqual(v, 55)
 
     def test_limit_time_2(self):
-        self.assertRaises(Exception, self.er_func)
+        self.assertRaises(
+            Exception,
+            limit_time,
+            error,
+            time=2,
+            args=(2,)
+        )
 
     def test_limit_time_3(self):
-        self.assertRaises(TimeoutError, self.func, 50)
+        self.assertRaises(
+            TimeoutError,
+            limit_time,
+            time,
+            time=2,
+            args=(50,)
+        )
 
     def test_limit_time_4(self):
-        self.assertEqual(self.ka_func(
-            1, 2, 3, four=4, five=5), [1, 2, 3, 4, 5])
+        v = limit_time(
+            return_check,
+            time=2,
+            args=(1, 2, 3),
+            kwargs={"four": 4, "five": 5}
+        )
+
+        self.assertEqual(v, [1, 2, 3, 4, 5])
diff --git a/tests/test_utility.py b/tests/test_utility.py
index 603316a..266cdfa 100644
--- a/tests/test_utility.py
+++ b/tests/test_utility.py
@@ -1,73 +1,65 @@
 from unittest import TestCase
 from pyutility import limit_resource, measureit
 
-
-def func1a(x):
-    x = [i for i in range(x)]
-    return -1
-
-
-def func1b(x):
-    # recursive function to find xth fibonacci number
-    if x < 3:
-        return 1
-    return func1b(x-1) + func1b(x-2)
-
-
-def func2():
-    # error function
-    return "a" / 2
-
-
-def func3(*args, **kwagrs):
-    # args and kwargs function
-    return list(args) + list(kwagrs.values())
+from .func import memory, time, return_check, error
 
 
 class MeasureitTest(TestCase):
-    def setUp(self):
-        self.er_func = measureit(func2)
-        self.func_m = measureit(func1a)
-        self.func_t = measureit(func1b)
-        self.ka_func = measureit(func3)
 
     def test_measureit_1(self):
-        self.assertIsInstance(self.func_m(100), tuple)
+        v = measureit(memory, args=(100,))
+        self.assertIsInstance(v, tuple)
 
     def test_measureit_2(self):
-        x = self.func_t(10)
-        self.assertIsInstance(x[0], int)
-        self.assertIsInstance(x[1], float)
+        v = measureit(time, args=(15,))
+        self.assertIsInstance(v[0], int)
+        self.assertIsInstance(v[1], float)
 
     def test_measureit_3(self):
-        self.assertIsInstance(self.func_t(15), tuple)
+        v = measureit(time, args=(15,))
+        self.assertIsInstance(v, tuple)
 
     def test_measureit_4(self):
-        self.assertRaises(Exception, self.er_func)
+        self.assertRaises(Exception, measureit, error, 100)
 
 
 class LimitResourceTest(TestCase):
-    def setUp(self):
-        self.er_func = limit_resource(time=2)(func2)
-        self.func_m = limit_resource(time=2)(func1a)
-        self.func_t = limit_resource(time=2)(func1b)
-        self.ka_func = limit_resource(time=2)(func3)
 
     def test_limit_resource_1(self):
-        self.assertEqual(self.func_m(300), -1)
+        v = limit_resource(memory, time=2, args=(300,))
+        self.assertEqual(v, -1)
 
     def test_limit_resource_2(self):
-        self.assertEqual(self.func_t(3), 2)
+        v = limit_resource(time, time=2, args=(3,))
+        self.assertEqual(v, 2)
 
     def test_limit_resource_3(self):
-        self.assertRaises(Exception, self.er_func)
+        self.assertRaises(Exception, error)
 
     def test_limit_resource_4(self):
-        self.assertRaises(MemoryError, self.func_m, 100_000_000)
+        self.assertRaises(
+            MemoryError,
+            limit_resource,
+            memory,
+            args=(100_000_000,),
+            time=2
+        )
 
     def test_limit_resource_5(self):
-        self.assertRaises(TimeoutError, self.func_t, 50)
+        self.assertRaises(
+            TimeoutError,
+            limit_resource,
+            time,
+            args=(50,),
+            time=2
+        )
 
     def test_limit_resource_6(self):
-        self.assertEqual(self.ka_func(
-            1, 2, 3, four=4, five=5), [1, 2, 3, 4, 5])
+        v = limit_resource(
+            return_check,
+            time=2,
+            args=(1, 2, 3),
+            kwargs={"four": 4, "five": 5}
+        )
+
+        self.assertEqual(v, [1, 2, 3, 4, 5])
