diff --git a/ptr_tests.py b/ptr_tests.py
index fb8e02a..8d0bc00 100644
--- a/ptr_tests.py
+++ b/ptr_tests.py
@@ -13,7 +13,6 @@ from os import environ
 from pathlib import Path
 from shutil import rmtree
 from subprocess import CalledProcessError
-from sys import version_info
 from tempfile import TemporaryDirectory, gettempdir
 from typing import (  # noqa: F401 # pylint: disable=unused-import
     Any,
@@ -130,20 +129,7 @@ class TestPtr(unittest.TestCase):
     @patch("ptr.run_tests", async_none)
     @patch("ptr._get_test_modules")
     def test_async_main(self, mock_gtm: Mock) -> None:
-        args = [
-            1,
-            Path("/"),
-            "mirror",
-            1,
-            "venv",
-            True,
-            True,
-            False,
-            True,
-            False,
-            "stats",
-            30,
-        ]
+        args = [1, Path("/"), "mirror", 1, "venv", True, True, False, True, "stats", 30]
         mock_gtm.return_value = False
         self.assertEqual(
             self.loop.run_until_complete(ptr.async_main(*args)), 1  # pyre-ignore
@@ -382,17 +368,6 @@ class TestPtr(unittest.TestCase):
         )
         self.assertEqual(mock_log.call_count, 2)
 
-    def test_run_black(self) -> None:
-        config = {}  # type: Dict[str, Any]
-        self.assertFalse(ptr._run_black(config, False))
-        self.assertFalse(ptr._run_black(config, True))
-        config["run_black"] = True
-        if ptr.WINDOWS and version_info >= (3, 7):
-            # Ensure even if in config we don't run it
-            self.assertFalse(ptr._run_black(config, False))
-        else:
-            self.assertTrue(ptr._run_black(config, False))
-
     def test_set_build_env(self) -> None:
         local_build_path = Path(gettempdir())
         build_env = ptr._set_build_env(local_build_path)
@@ -429,7 +404,7 @@ class TestPtr(unittest.TestCase):
             stats = defaultdict(int)  # type: Dict[str, int]
             self.loop.run_until_complete(
                 ptr._test_runner(
-                    queue, tests_to_run, test_results, td_path, False, False, stats, 69
+                    queue, tests_to_run, test_results, td_path, False, stats, 69
                 )
             )
             self.assertEqual(len(test_results), 1)
@@ -464,14 +439,11 @@ class TestPtr(unittest.TestCase):
                 (None, 6) if ptr.WINDOWS else (None, 7),
             )
 
-            if ptr.WINDOWS and version_info >= (3, 7):
-                # No pyre + black
-                expected = (None, 6)
-            elif ptr.WINDOWS:
+            if ptr.WINDOWS:
                 # No pyre
                 expected = (None, 7)
             else:
-                # Running all steps on everything else
+                # Running all steps on all other platforms
                 expected = (None, 8)
 
             fake_tests_to_run = {fake_setup_py: ptr_tests_fixtures.EXPECTED_TEST_PARAMS}
diff --git a/ptr_tests_fixtures.py b/ptr_tests_fixtures.py
index cb51eaa..d278888 100644
--- a/ptr_tests_fixtures.py
+++ b/ptr_tests_fixtures.py
@@ -29,7 +29,7 @@ EXPECTED_TEST_PARAMS = {
     "entry_point_module": "ptr",
     "test_suite": "ptr_tests",
     "test_suite_timeout": 120,
-    "required_coverage": {"ptr.py": 83, "TOTAL": 89},
+    "required_coverage": {"ptr.py": 84, "TOTAL": 89},
     "run_black": True,
     "run_mypy": True,
     "run_flake8": True,
@@ -196,7 +196,7 @@ disabled = true
 entry_point_module = ptr
 test_suite = ptr_tests
 test_suite_timeout = 120
-required_coverage_ptr.py = 83
+required_coverage_ptr.py = 84
 required_coverage_TOTAL = 89
 run_black = true
 run_mypy = true
