diff --git a/warthog/config.py b/warthog/config.py
index 3dfab6f..9c72399 100644
--- a/warthog/config.py
+++ b/warthog/config.py
@@ -15,15 +15,14 @@ Load and parse configuration for a client from an INI-style file.
 """
 
 import collections
-import threading
-import ssl
 import sys
-
+import threading
 import codecs
 import os.path
+
 import warthog.exceptions
+import warthog.ssl
 from .packages import six
-# pylint: disable=import-error
 from .packages.six.moves import configparser
 
 # List of locations (from most preferred to least preferred) that will
@@ -38,12 +37,10 @@ DEFAULT_CONFIG_LOCATIONS = [
     os.path.join(os.getcwd(), 'warthog.ini')
 ]
 
-
 # By default, we assume that the configuration file is in UTF-8 unless
 # the caller indicates it is in some other encoding.
 DEFAULT_CONFIG_ENCODING = 'utf-8'
 
-
 # Simple immutable struct to hold configuration information for a WarthogClient
 WarthogConfigSettings = collections.namedtuple(
     'WarthogConfigSettings', ['scheme_host', 'username', 'password', 'verify', 'ssl_version'])
@@ -163,10 +160,14 @@ class WarthogConfigLoader(object):
 
 
 def parse_ssl_version(version_str, ssl_module=None):
-    """Get the :mod:`ssl` protocol constant that represents the given version
+    """Get the :mod:`warthog.ssl` protocol constant that represents the given version
     string if it exists, raising an error if the version string is malformed or
     does not correspond to a supported protocol.
 
+    Note that the :mod:`warthog.ssl` protocol constants should match the Python
+    :mod:`ssl` module exactly. The difference is that our SSL module has all
+    potential versions while older Python modules did not.
+
     :param unicode version_str: Version string to resolve to a protocol
     :param module ssl_module: SSL module to get the protocol constant from
     :return: The ssl module protocol constant or ``None``
@@ -180,7 +181,7 @@ def parse_ssl_version(version_str, ssl_module=None):
     if not version_str:
         return None
 
-    ssl_module = ssl_module if ssl_module is not None else ssl
+    ssl_module = ssl_module if ssl_module is not None else warthog.ssl
 
     # Get a list of all the 'PROTOCOL' constants in the SSL module, and
     # strip the 'PROTOCOL_' prefix. This is the set of supported SSL or
diff --git a/warthog/transport.py b/warthog/transport.py
index 836a526..776d2c8 100644
--- a/warthog/transport.py
+++ b/warthog/transport.py
@@ -26,17 +26,12 @@ from requests.adapters import (
 from requests.packages.urllib3.exceptions import InsecureRequestWarning
 from requests.packages.urllib3.poolmanager import PoolManager
 
-# HACK: We need to default to TLSv1.2 to work with the new load balancer
-# but Python 2.6 and Python 3.3 don't have the TLSv1.2 constant. BUT, TLS
-# version 1.2 will work with the version of requests we use on Python 2.6
-# so we hack in the constant here for the sake of a default.
-# pylint: disable=invalid-name
-_PROTOCOL_TLSv1_2 = 5
+import warthog.ssl
 
 # Default to using the SSL/TLS version that the A10 requires instead of
 # the default that the requests/urllib3 library picks. Or, maybe the A10
 # just doesn't allow the client to negotiate. Either way, we use TLSv1.2.
-DEFAULT_SSL_VERSION = _PROTOCOL_TLSv1_2
+DEFAULT_SSL_VERSION = warthog.ssl.PROTOCOL_TLSv1_2
 
 # Default to verifying SSL/TLS certs because "safe by default" is a good idea.
 DEFAULT_CERT_VERIFY = True

