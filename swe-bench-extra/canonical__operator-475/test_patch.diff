diff --git a/ops/testing.py b/ops/testing.py
index 0bce767..d7e6c2f 100755
--- a/ops/testing.py
+++ b/ops/testing.py
@@ -736,6 +736,12 @@ class _TestingModelBackend:
         except KeyError as e:
             raise model.RelationNotFoundError from e
 
+    def relation_remote_app_name(self, relation_id: int) -> typing.Optional[str]:
+        if relation_id not in self._relation_app_and_units:
+            # Non-existent or dead relation
+            return None
+        return self._relation_app_and_units[relation_id]['app']
+
     def relation_get(self, relation_id, member_name, is_app):
         if is_app and '/' in member_name:
             member_name = member_name.split('/')[0]
diff --git a/test/test_model.py b/test/test_model.py
index 6c2bde5..afe18d6 100755
--- a/test/test_model.py
+++ b/test/test_model.py
@@ -120,6 +120,7 @@ class TestModel(unittest.TestCase):
         self.assertEqual(dead_rel.data[self.model.unit], {})
         self.assertBackendCalls([
             ('relation_list', 7),
+            ('relation_remote_app_name', 7),
             ('relation_get', 7, 'myapp/0', False),
         ])
 
@@ -134,7 +135,9 @@ class TestModel(unittest.TestCase):
         self.assertBackendCalls([
             ('relation_ids', 'db0'),
             ('relation_list', self.relation_id_db0),
+            ('relation_remote_app_name', 0),
             ('relation_list', relation_id_db0_b),
+            ('relation_remote_app_name', 2),
         ])
 
     def test_peer_relation_app(self):
@@ -403,6 +406,17 @@ class TestModel(unittest.TestCase):
             ('relation_get', relation_id, 'myapp/0', False),
         ])
 
+    def test_relation_no_units(self):
+        self.harness.add_relation('db1', 'remoteapp1')
+        rel = self.model.get_relation('db1')
+        self.assertEqual(rel.units, set())
+        self.assertIs(rel.app, self.model.get_app('remoteapp1'))
+        self.assertBackendCalls([
+            ('relation_ids', 'db1'),
+            ('relation_list', 1),
+            ('relation_remote_app_name', 1),
+        ])
+
     def test_config(self):
         self.harness.update_config({'foo': 'foo', 'bar': 1, 'qux': True})
         self.assertEqual(self.model.config, {
@@ -1567,6 +1581,61 @@ class TestModelBackend(unittest.TestCase):
             with self.assertRaises(ops.model.ModelError):
                 self.backend.add_metrics(metrics, labels)
 
+    def test_relation_remote_app_name_env(self):
+        self.addCleanup(os.environ.pop, 'JUJU_RELATION_ID', None)
+        self.addCleanup(os.environ.pop, 'JUJU_REMOTE_APP', None)
+
+        os.environ['JUJU_RELATION_ID'] = 'x:5'
+        os.environ['JUJU_REMOTE_APP'] = 'remoteapp1'
+        self.assertEqual(self.backend.relation_remote_app_name(5), 'remoteapp1')
+        os.environ['JUJU_RELATION_ID'] = '5'
+        self.assertEqual(self.backend.relation_remote_app_name(5), 'remoteapp1')
+
+    def test_relation_remote_app_name_script_success(self):
+        self.addCleanup(os.environ.pop, 'JUJU_RELATION_ID', None)
+        self.addCleanup(os.environ.pop, 'JUJU_REMOTE_APP', None)
+
+        # JUJU_RELATION_ID and JUJU_REMOTE_APP both unset
+        fake_script(self, 'relation-list', r"""
+echo '"remoteapp2"'
+""")
+        self.assertEqual(self.backend.relation_remote_app_name(1), 'remoteapp2')
+        self.assertEqual(fake_script_calls(self, clear=True), [
+            ['relation-list', '-r', '1', '--app', '--format=json'],
+        ])
+
+        # JUJU_RELATION_ID set but JUJU_REMOTE_APP unset
+        os.environ['JUJU_RELATION_ID'] = 'x:5'
+        self.assertEqual(self.backend.relation_remote_app_name(5), 'remoteapp2')
+
+        # JUJU_RELATION_ID unset but JUJU_REMOTE_APP set
+        del os.environ['JUJU_RELATION_ID']
+        os.environ['JUJU_REMOTE_APP'] = 'remoteapp1'
+        self.assertEqual(self.backend.relation_remote_app_name(5), 'remoteapp2')
+
+        # Both set, but JUJU_RELATION_ID a different relation
+        os.environ['JUJU_RELATION_ID'] = 'x:6'
+        self.assertEqual(self.backend.relation_remote_app_name(5), 'remoteapp2')
+
+    def test_relation_remote_app_name_script_errors(self):
+        fake_script(self, 'relation-list', r"""
+echo "ERROR invalid value \"6\" for option -r: relation not found" >&2  # NOQA
+exit 2
+""")
+        self.assertIs(self.backend.relation_remote_app_name(6), None)
+        self.assertEqual(fake_script_calls(self, clear=True), [
+            ['relation-list', '-r', '6', '--app', '--format=json'],
+        ])
+
+        fake_script(self, 'relation-list', r"""
+echo "ERROR option provided but not defined: --app" >&2
+exit 2
+""")
+        self.assertIs(self.backend.relation_remote_app_name(6), None)
+        self.assertEqual(fake_script_calls(self, clear=True), [
+            ['relation-list', '-r', '6', '--app', '--format=json'],
+        ])
+
 
 class TestLazyMapping(unittest.TestCase):
 
diff --git a/test/test_testing.py b/test/test_testing.py
index 119cbed..be87ed7 100644
--- a/test/test_testing.py
+++ b/test/test_testing.py
@@ -763,6 +763,7 @@ class TestHarness(unittest.TestCase):
             harness._get_backend_calls(reset=True), [
                 ('relation_ids', 'db'),
                 ('relation_list', rel_id),
+                ('relation_remote_app_name', 0),
             ])
         # add_relation_unit resets the relation_list, but doesn't trigger backend calls
         harness.add_relation_unit(rel_id, 'postgresql/0')
@@ -1591,3 +1592,20 @@ class TestTestingModelBackend(unittest.TestCase):
         self.assertIn(
             "units/unit-test-app-0/resources/foo: resource#test-app/foo not found",
             str(cm.exception))
+
+    def test_relation_remote_app_name(self):
+        harness = Harness(CharmBase, meta='''
+            name: test-charm
+            ''')
+        self.addCleanup(harness.cleanup)
+        backend = harness._backend
+
+        self.assertIs(backend.relation_remote_app_name(1), None)
+
+        rel_id = harness.add_relation('db', 'postgresql')
+        self.assertEqual(backend.relation_remote_app_name(rel_id), 'postgresql')
+        harness.add_relation_unit(rel_id, 'postgresql/0')
+        harness.add_relation_unit(rel_id, 'postgresql/1')
+        self.assertEqual(backend.relation_remote_app_name(rel_id), 'postgresql')
+
+        self.assertIs(backend.relation_remote_app_name(7), None)
