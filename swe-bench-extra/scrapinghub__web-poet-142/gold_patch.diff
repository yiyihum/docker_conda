diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index c88ec58..5ab56e4 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -2,6 +2,15 @@
 Changelog
 =========
 
+TBR
+---
+
+* Fix the error when calling :meth:`.to_item() <web_poet.pages.ItemPage.to_item>`,
+  :func:`item_from_fields_sync() <web_poet.fields.item_from_fields_sync>`, or
+  :func:`item_from_fields() <web_poet.fields.item_from_fields>` on page objects
+  defined as slotted attrs classes, while setting ``skip_nonitem_fields=True``.
+
+
 0.8.0 (2023-02-23)
 ------------------
 
diff --git a/web_poet/pages.py b/web_poet/pages.py
index 77b39af..fed2fae 100644
--- a/web_poet/pages.py
+++ b/web_poet/pages.py
@@ -50,21 +50,34 @@ class Returns(typing.Generic[ItemT]):
         return get_item_cls(self.__class__, default=dict)
 
 
+_NOT_SET = object()
+
+
 class ItemPage(Injectable, Returns[ItemT]):
     """Base Page Object, with a default :meth:`to_item` implementation
     which supports web-poet fields.
     """
 
-    _skip_nonitem_fields: bool
+    _skip_nonitem_fields = _NOT_SET
+
+    def _get_skip_nonitem_fields(self) -> bool:
+        value = self._skip_nonitem_fields
+        return False if value is _NOT_SET else bool(value)
 
-    def __init_subclass__(cls, skip_nonitem_fields: bool = False, **kwargs):
+    def __init_subclass__(cls, skip_nonitem_fields=_NOT_SET, **kwargs):
         super().__init_subclass__(**kwargs)
+        if skip_nonitem_fields is _NOT_SET:
+            # This is a workaround for attrs issue.
+            # See: https://github.com/scrapinghub/web-poet/issues/141
+            return
         cls._skip_nonitem_fields = skip_nonitem_fields
 
     async def to_item(self) -> ItemT:
         """Extract an item from a web page"""
         return await item_from_fields(
-            self, item_cls=self.item_cls, skip_nonitem_fields=self._skip_nonitem_fields
+            self,
+            item_cls=self.item_cls,
+            skip_nonitem_fields=self._get_skip_nonitem_fields(),
         )
 
 
