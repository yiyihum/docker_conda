diff --git a/src/rpdk/core/contract/hook_client.py b/src/rpdk/core/contract/hook_client.py
index 74b8ad6..782ec51 100644
--- a/src/rpdk/core/contract/hook_client.py
+++ b/src/rpdk/core/contract/hook_client.py
@@ -57,6 +57,7 @@ class HookClient:  # pylint: disable=too-many-instance-attributes
         log_group_name=None,
         log_role_arn=None,
         docker_image=None,
+        typeconfig=None,
         executable_entrypoint=None,
         target_info=None,
         profile=None,
@@ -101,6 +102,7 @@ class HookClient:  # pylint: disable=too-many-instance-attributes
         self._executable_entrypoint = executable_entrypoint
         self._target_info = self._setup_target_info(target_info)
         self._resolved_targets = {}
+        self._typeconfig = typeconfig
 
     @staticmethod
     def _properties_to_paths(schema, key):
@@ -491,7 +493,7 @@ class HookClient:  # pylint: disable=too-many-instance-attributes
             invocation_point,
             target,
             target_model,
-            TypeConfiguration.get_hook_configuration(),
+            TypeConfiguration.get_hook_configuration(self._typeconfig),
             **kwargs,
         )
         start_time = time.time()
diff --git a/src/rpdk/core/contract/resource_client.py b/src/rpdk/core/contract/resource_client.py
index 40e3937..0e0fd37 100644
--- a/src/rpdk/core/contract/resource_client.py
+++ b/src/rpdk/core/contract/resource_client.py
@@ -171,6 +171,7 @@ class ResourceClient:  # pylint: disable=too-many-instance-attributes
         log_group_name=None,
         log_role_arn=None,
         docker_image=None,
+        typeconfig=None,
         executable_entrypoint=None,
         profile=None,
     ):  # pylint: disable=too-many-arguments
@@ -213,6 +214,7 @@ class ResourceClient:  # pylint: disable=too-many-instance-attributes
         self._docker_image = docker_image
         self._docker_client = docker.from_env() if self._docker_image else None
         self._executable_entrypoint = executable_entrypoint
+        self._typeconfig = typeconfig
 
     def _properties_to_paths(self, key):
         return {fragment_decode(prop, prefix="") for prop in self._schema.get(key, [])}
@@ -736,7 +738,7 @@ class ResourceClient:  # pylint: disable=too-many-instance-attributes
             action,
             current_model,
             previous_model,
-            TypeConfiguration.get_type_configuration(),
+            TypeConfiguration.get_type_configuration(self._typeconfig),
             **kwargs,
         )
         start_time = time.time()
diff --git a/src/rpdk/core/contract/type_configuration.py b/src/rpdk/core/contract/type_configuration.py
index 1500318..209b257 100644
--- a/src/rpdk/core/contract/type_configuration.py
+++ b/src/rpdk/core/contract/type_configuration.py
@@ -6,48 +6,50 @@ from rpdk.core.exceptions import InvalidProjectError
 
 LOG = logging.getLogger(__name__)
 
-TYPE_CONFIGURATION_FILE_PATH = "~/.cfn-cli/typeConfiguration.json"
-
 
 class TypeConfiguration:
     TYPE_CONFIGURATION = None
 
     @staticmethod
-    def get_type_configuration():
+    def get_type_configuration(typeconfigloc):
+        if typeconfigloc:
+            type_config_file_path = typeconfigloc
+        else:
+            type_config_file_path = "~/.cfn-cli/typeConfiguration.json"
+
         LOG.debug(
-            "Loading type configuration setting file at '~/.cfn-cli/typeConfiguration.json'"
+            "Loading type configuration setting file at %s",
+            type_config_file_path,
         )
         if TypeConfiguration.TYPE_CONFIGURATION is None:
             try:
                 with open(
-                    os.path.expanduser(TYPE_CONFIGURATION_FILE_PATH), encoding="utf-8"
+                    os.path.expanduser(type_config_file_path), encoding="utf-8"
                 ) as f:
                     TypeConfiguration.TYPE_CONFIGURATION = json.load(f)
             except json.JSONDecodeError as json_decode_error:
                 LOG.debug(
                     "Type configuration file '%s' is invalid",
-                    TYPE_CONFIGURATION_FILE_PATH,
+                    type_config_file_path,
                 )
                 raise InvalidProjectError(
-                    "Type configuration file '%s' is invalid"
-                    % TYPE_CONFIGURATION_FILE_PATH
+                    "Type configuration file '%s' is invalid" % type_config_file_path
                 ) from json_decode_error
             except FileNotFoundError:
                 LOG.debug(
                     "Type configuration file '%s' not Found, do nothing",
-                    TYPE_CONFIGURATION_FILE_PATH,
+                    type_config_file_path,
                 )
         return TypeConfiguration.TYPE_CONFIGURATION
 
     @staticmethod
-    def get_hook_configuration():
-        # pylint: disable=unsubscriptable-object
-        type_configuration = TypeConfiguration.get_type_configuration()
+    def get_hook_configuration(typeconfigloc):
+        type_configuration = TypeConfiguration.get_type_configuration(typeconfigloc)
         if type_configuration:
             try:
-                return type_configuration["CloudFormationConfiguration"][
+                return type_configuration.get("CloudFormationConfiguration", {})[
                     "HookConfiguration"
-                ].get("Properties")
+                ]["Properties"]
             except KeyError as e:
                 LOG.warning("Hook configuration is invalid")
                 raise InvalidProjectError("Hook configuration is invalid") from e
diff --git a/src/rpdk/core/hook/init_hook.py b/src/rpdk/core/hook/init_hook.py
index 308719b..279bf1c 100644
--- a/src/rpdk/core/hook/init_hook.py
+++ b/src/rpdk/core/hook/init_hook.py
@@ -32,6 +32,9 @@ def init_hook(args, project):
 
     project.init_hook(type_name, language, settings)
     project.generate(args.endpoint_url, args.region, args.target_schemas, args.profile)
+    # Reload the generated example schema
+    project.load_configuration_schema()
+    # generate the docs based on the example schema loaded
     project.generate_docs()
 
 

