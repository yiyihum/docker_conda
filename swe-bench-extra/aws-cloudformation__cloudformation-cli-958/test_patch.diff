diff --git a/src/rpdk/core/test.py b/src/rpdk/core/test.py
index 19a5143..5d64e75 100644
--- a/src/rpdk/core/test.py
+++ b/src/rpdk/core/test.py
@@ -342,6 +342,7 @@ def get_contract_plugin_client(args, project, overrides, inputs):
             args.log_role_arn,
             executable_entrypoint=project.executable_entrypoint,
             docker_image=args.docker_image,
+            typeconfig=args.typeconfig,
             target_info=project._load_target_info(  # pylint: disable=protected-access
                 args.cloudformation_endpoint_url, args.region
             ),
@@ -362,6 +363,7 @@ def get_contract_plugin_client(args, project, overrides, inputs):
         project.type_name,
         args.log_group_name,
         args.log_role_arn,
+        typeconfig=args.typeconfig,
         executable_entrypoint=project.executable_entrypoint,
         docker_image=args.docker_image,
         profile=args.profile,
@@ -441,7 +443,7 @@ def setup_subparser(subparsers, parents):
 
     _sam_arguments(parser)
     # this parameter can be used to pass additional arguments to pytest after `--`
-    # for example,
+    # for example, cfn test -- -k contract_delete_update # to have pytest run a single test
 
     parser.add_argument(
         "--role-arn", help="Role used when performing handler operations."
@@ -477,6 +479,11 @@ def setup_subparser(subparsers, parents):
         "of SAM",
     )
 
+    parser.add_argument(
+        "--typeconfig",
+        help="typeConfiguration file to use. Default: '~/.cfn-cli/typeConfiguration.json.'",
+    )
+
 
 def _sam_arguments(parser):
     parser.add_argument(
diff --git a/tests/contract/test_type_configuration.py b/tests/contract/test_type_configuration.py
index d026099..6c4b452 100644
--- a/tests/contract/test_type_configuration.py
+++ b/tests/contract/test_type_configuration.py
@@ -1,3 +1,4 @@
+import os
 from unittest.mock import mock_open, patch
 
 import pytest
@@ -29,17 +30,35 @@ def teardown_function():
 def test_get_type_configuration_with_not_exist_file():
     with patch("builtins.open", mock_open()) as f:
         f.side_effect = FileNotFoundError()
-        assert TypeConfiguration.get_type_configuration() is None
+        assert TypeConfiguration.get_type_configuration(None) is None
+
+
+def test_get_type_configuration_with_default_typeconfig_location():
+    with patch(
+        "builtins.open", mock_open(read_data=TYPE_CONFIGURATION_TEST_SETTING)
+    ) as f:
+        TypeConfiguration.get_type_configuration(None)
+    f.assert_called_with(
+        os.path.expanduser("~/.cfn-cli/typeConfiguration.json"), encoding="utf-8"
+    )
+
+
+def test_get_type_configuration_with_set_typeconfig_location():
+    with patch(
+        "builtins.open", mock_open(read_data=TYPE_CONFIGURATION_TEST_SETTING)
+    ) as f:
+        TypeConfiguration.get_type_configuration("./test.json")
+    f.assert_called_with("./test.json", encoding="utf-8")
 
 
 @patch("builtins.open", mock_open(read_data=TYPE_CONFIGURATION_TEST_SETTING))
 def test_get_type_configuration():
-    type_configuration = TypeConfiguration.get_type_configuration()
+    type_configuration = TypeConfiguration.get_type_configuration(None)
     assert type_configuration["Credentials"]["ApiKey"] == "123"
     assert type_configuration["Credentials"]["ApplicationKey"] == "123"
 
     # get type config again, should be the same config
-    type_configuration = TypeConfiguration.get_type_configuration()
+    type_configuration = TypeConfiguration.get_type_configuration(None)
     assert type_configuration["Credentials"]["ApiKey"] == "123"
     assert type_configuration["Credentials"]["ApplicationKey"] == "123"
 
@@ -47,19 +66,19 @@ def test_get_type_configuration():
 @patch("builtins.open", mock_open(read_data=TYPE_CONFIGURATION_INVALID))
 def test_get_type_configuration_with_invalid_json():
     try:
-        TypeConfiguration.get_type_configuration()
+        TypeConfiguration.get_type_configuration(None)
     except InvalidProjectError:
         pass
 
 
 @patch("builtins.open", mock_open(read_data=HOOK_CONFIGURATION_TEST_SETTING))
 def test_get_hook_configuration():
-    hook_configuration = TypeConfiguration.get_hook_configuration()
+    hook_configuration = TypeConfiguration.get_hook_configuration(None)
     assert hook_configuration["Credentials"]["ApiKey"] == "123"
     assert hook_configuration["Credentials"]["ApplicationKey"] == "123"
 
     # get type config again, should be the same config
-    hook_configuration = TypeConfiguration.get_hook_configuration()
+    hook_configuration = TypeConfiguration.get_hook_configuration(None)
     assert hook_configuration["Credentials"]["ApiKey"] == "123"
     assert hook_configuration["Credentials"]["ApplicationKey"] == "123"
 
@@ -67,7 +86,7 @@ def test_get_hook_configuration():
 @patch("builtins.open", mock_open(read_data=HOOK_CONFIGURATION_INVALID))
 def test_get_hook_configuration_with_invalid_json():
     with pytest.raises(InvalidProjectError) as execinfo:
-        TypeConfiguration.get_hook_configuration()
+        TypeConfiguration.get_hook_configuration(None)
 
     assert "Hook configuration is invalid" in str(execinfo.value)
 
@@ -75,4 +94,4 @@ def test_get_hook_configuration_with_invalid_json():
 def test_get_hook_configuration_with_not_exist_file():
     with patch("builtins.open", mock_open()) as f:
         f.side_effect = FileNotFoundError()
-        assert TypeConfiguration.get_hook_configuration() is None
+        assert TypeConfiguration.get_hook_configuration(None) is None
diff --git a/tests/test_test.py b/tests/test_test.py
index 35dfe07..6f17496 100644
--- a/tests/test_test.py
+++ b/tests/test_test.py
@@ -227,6 +227,7 @@ def test_test_command_happy_path_resource(
         mock_project.type_name,
         None,
         None,
+        typeconfig=None,
         executable_entrypoint=None,
         docker_image=None,
         profile=profile,
@@ -334,6 +335,7 @@ def test_test_command_happy_path_hook(
         mock_project.type_name,
         None,
         None,
+        typeconfig=None,
         executable_entrypoint=None,
         docker_image=None,
         target_info=HOOK_TARGET_INFO,
