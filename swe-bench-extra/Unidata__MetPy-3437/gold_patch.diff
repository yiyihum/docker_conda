diff --git a/ci/extra_requirements.txt b/ci/extra_requirements.txt
index 70a45f6230..590f2f0b2f 100644
--- a/ci/extra_requirements.txt
+++ b/ci/extra_requirements.txt
@@ -1,3 +1,3 @@
 cartopy==0.22.0
-dask==2024.3.0
+dask==2024.3.1
 shapely==2.0.3
diff --git a/ci/linting_requirements.txt b/ci/linting_requirements.txt
index a67d1f70f0..1d739578d5 100644
--- a/ci/linting_requirements.txt
+++ b/ci/linting_requirements.txt
@@ -1,4 +1,4 @@
-ruff==0.3.2
+ruff==0.3.3
 
 flake8==7.0.0
 pycodestyle==2.11.1
diff --git a/src/metpy/calc/basic.py b/src/metpy/calc/basic.py
index 0e164e1b04..a290e3df12 100644
--- a/src/metpy/calc/basic.py
+++ b/src/metpy/calc/basic.py
@@ -52,6 +52,13 @@ def wind_speed(u, v):
     --------
     wind_components
 
+    Examples
+    --------
+    >>> from metpy.calc import wind_speed
+    >>> from metpy.units import units
+    >>> wind_speed(10. * units('m/s'), 10. * units('m/s'))
+    <Quantity(14.1421356, 'meter / second')>
+
     """
     return np.hypot(u, v)
 
@@ -88,6 +95,13 @@ def wind_direction(u, v, convention='from'):
     In the case of calm winds (where `u` and `v` are zero), this function returns a direction
     of 0.
 
+    Examples
+    --------
+    >>> from metpy.calc import wind_direction
+    >>> from metpy.units import units
+    >>> wind_direction(10. * units('m/s'), 10. * units('m/s'))
+    <Quantity(225.0, 'degree')>
+
     """
     wdir = units.Quantity(90., 'deg') - np.arctan2(-v, -u)
     origshape = wdir.shape
@@ -141,7 +155,7 @@ def wind_components(speed, wind_direction):
     >>> from metpy.calc import wind_components
     >>> from metpy.units import units
     >>> wind_components(10. * units('m/s'), 225. * units.deg)
-     (<Quantity(7.07106781, 'meter / second')>, <Quantity(7.07106781, 'meter / second')>)
+    (<Quantity(7.07106781, 'meter / second')>, <Quantity(7.07106781, 'meter / second')>)
 
     .. versionchanged:: 1.0
        Renamed ``wdir`` parameter to ``wind_direction``
diff --git a/src/metpy/calc/tools.py b/src/metpy/calc/tools.py
index c34453c8f3..12640a6561 100644
--- a/src/metpy/calc/tools.py
+++ b/src/metpy/calc/tools.py
@@ -1825,6 +1825,13 @@ def angle_to_direction(input_angle, full=False, level=3):
     direction
         The directional text
 
+    Examples
+    --------
+    >>> from metpy.calc import angle_to_direction
+    >>> from metpy.units import units
+    >>> angle_to_direction(225. * units.deg)
+    'SW'
+
     """
     try:  # strip units temporarily
         origin_units = input_angle.units
diff --git a/src/metpy/xarray.py b/src/metpy/xarray.py
index 2ccb36ce0a..ab16f76802 100644
--- a/src/metpy/xarray.py
+++ b/src/metpy/xarray.py
@@ -338,15 +338,16 @@ class MetPyDataArrayAccessor:
     def _generate_coordinate_map(self):
         """Generate a coordinate map via CF conventions and other methods."""
         coords = self._data_array.coords.values()
-        # Parse all the coordinates, attempting to identify x, longitude, y, latitude,
-        # vertical, time
-        coord_lists = {'time': [], 'vertical': [], 'y': [], 'latitude': [], 'x': [],
-                       'longitude': []}
+        # Parse all the coordinates, attempting to identify longitude, latitude, x, y,
+        # time, vertical, in that order.
+        coord_lists = {'longitude': [], 'latitude': [], 'x': [], 'y': [], 'time': [],
+                       'vertical': []}
         for coord_var in coords:
             # Identify the coordinate type using check_axis helper
             for axis in coord_lists:
                 if check_axis(coord_var, axis):
                     coord_lists[axis].append(coord_var)
+                    break  # Ensure a coordinate variable only goes to one axis
 
         # Fill in x/y with longitude/latitude if x/y not otherwise present
         for geometric, graticule in (('y', 'latitude'), ('x', 'longitude')):
