diff --git a/tests/test_schema.py b/tests/test_schema.py
--- a/tests/test_schema.py
+++ b/tests/test_schema.py
@@ -11,7 +11,13 @@
 import pytest
 
 from pydantic import BaseModel, Schema, ValidationError, validator
-from pydantic.schema import get_flat_models_from_model, get_flat_models_from_models, get_model_name_map, schema
+from pydantic.schema import (
+    get_flat_models_from_model,
+    get_flat_models_from_models,
+    get_model_name_map,
+    model_schema,
+    schema,
+)
 from pydantic.types import (
     DSN,
     UUID1,
@@ -1303,6 +1309,45 @@ def check_field(cls, v, *, values, config, field):
     }
 
 
+def test_unparameterized_schema_generation():
+    class FooList(BaseModel):
+        d: List
+
+    class BarList(BaseModel):
+        d: list
+
+    assert model_schema(FooList) == {
+        'title': 'FooList',
+        'type': 'object',
+        'properties': {'d': {'items': {}, 'title': 'D', 'type': 'array'}},
+        'required': ['d'],
+    }
+
+    foo_list_schema = model_schema(FooList)
+    bar_list_schema = model_schema(BarList)
+    bar_list_schema['title'] = 'FooList'  # to check for equality
+    assert foo_list_schema == bar_list_schema
+
+    class FooDict(BaseModel):
+        d: Dict
+
+    class BarDict(BaseModel):
+        d: dict
+
+    model_schema(Foo)
+    assert model_schema(FooDict) == {
+        'title': 'FooDict',
+        'type': 'object',
+        'properties': {'d': {'title': 'D', 'type': 'object'}},
+        'required': ['d'],
+    }
+
+    foo_dict_schema = model_schema(FooDict)
+    bar_dict_schema = model_schema(BarDict)
+    bar_dict_schema['title'] = 'FooDict'  # to check for equality
+    assert foo_dict_schema == bar_dict_schema
+
+
 def test_known_model_optimization():
     class Dep(BaseModel):
         number: int
