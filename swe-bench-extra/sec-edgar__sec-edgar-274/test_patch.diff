diff --git a/secedgar/tests/core/test_company.py b/secedgar/tests/core/test_company.py
index ec7e80c..26c1375 100644
--- a/secedgar/tests/core/test_company.py
+++ b/secedgar/tests/core/test_company.py
@@ -3,6 +3,7 @@ import datetime
 import os
 
 import pytest
+
 from secedgar.cik_lookup import CIKLookup
 from secedgar.client import NetworkClient
 from secedgar.core import CompanyFilings, FilingType
@@ -291,6 +292,45 @@ class TestCompanyFilings:
         f.save(tmp_data_directory)
         assert len(os.listdir(tmp_data_directory)) > 0
 
+    @pytest.mark.parametrize(
+        "match_format",
+        [
+            "EXACT",
+            "AMEND",
+            "ALL"
+        ]
+    )
+    def test_match_format_good(self, mock_user_agent, match_format):
+        f = CompanyFilings(["aapl", "amzn", "msft"],
+                           FilingType.FILING_10Q,
+                           user_agent=mock_user_agent,
+                           count=3,
+                           match_format=match_format)
+
+        assert f.match_format == match_format
+
+    @pytest.mark.parametrize(
+        "match_format",
+        [
+            "exact",
+            "amend",
+            "all",
+            "none",
+            None,
+            True,
+            False,
+            1,
+            0
+        ]
+    )
+    def test_match_format_bad(self, mock_user_agent, match_format):
+        with pytest.raises(ValueError):
+            CompanyFilings(["aapl", "amzn", "msft"],
+                           FilingType.FILING_10Q,
+                           user_agent=mock_user_agent,
+                           count=3,
+                           match_format=match_format)
+
     @pytest.mark.smoke
     def test_filing_save_multiple_ciks_smoke(self, tmp_data_directory,
                                              real_test_client):
diff --git a/secedgar/tests/core/test_rest.py b/secedgar/tests/core/test_rest.py
new file mode 100644
index 0000000..743763f
--- /dev/null
+++ b/secedgar/tests/core/test_rest.py
@@ -0,0 +1,104 @@
+import pytest
+
+from secedgar.core.rest import (_combine_dicts, get_company_concepts,
+                                get_company_facts, get_submissions,
+                                get_xbrl_frames)
+
+
+class TestRest:
+    @pytest.mark.parametrize("dicts,expected",
+                             [
+                                 ([{"A": [1, 2, 3], "B": [4, 5, 6]},
+                                  {"A": [7, 8], "B": [0, 1, 2]}],
+                                  {'A': [1, 2, 3, 7, 8], 'B': [4, 5, 6, 0, 1, 2]}),
+                                 ([{"A": [1, 2, 3]},
+                                  {"B": [4, 5, 6]}],
+                                  {"A": [1, 2, 3], "B": [4, 5, 6]}),
+                                 ([{"A": [1]}],
+                                  {"A": [1]})
+                             ]
+                             )
+    def test__combine_dicts(self, dicts, expected):
+        assert _combine_dicts(*dicts) == expected
+
+    @pytest.mark.parametrize(
+        "recent",
+        [True, False]
+    )
+    @pytest.mark.smoke
+    def test_get_submissions(self, mock_user_agent, recent):
+        submissions = get_submissions(lookups=["aapl"],
+                                      user_agent=mock_user_agent,
+                                      recent=recent)
+        assert submissions
+        # Make sure Apple's CIK shows up properly
+        assert str(submissions["aapl"]["cik"]) == "320193"
+
+        # Make sure there are accession numbers
+        assert submissions["aapl"]["filings"]["recent"]["accessionNumber"]
+
+        # Result should be dictionary
+        assert isinstance(submissions, dict)
+
+    @pytest.mark.smoke
+    def test_get_company_concepts(self, mock_user_agent):
+        concept = "AccountsPayableCurrent"
+        concepts = get_company_concepts(lookups=["AAPL"],
+                                        user_agent=mock_user_agent,
+                                        concept_name=concept)
+        assert concepts
+        # Ensure CIK is correct
+        assert str(concepts["AAPL"]["cik"]) == "320193"
+
+        # Make sure that there are results for accounts payable
+        assert concepts["AAPL"]["units"]["USD"]
+
+        # Result should be dictionary
+        assert isinstance(concepts, dict)
+
+    @pytest.mark.smoke
+    def test_get_company_facts(self, mock_user_agent):
+        facts = get_company_facts(lookups=["aapl"], user_agent=mock_user_agent)
+
+        assert facts
+        # Ensure CIK is correct - sometimes will give number, so cast to string
+        assert str(facts["aapl"]["cik"]) == "320193"
+
+        # Make sure there are facts
+        assert facts["aapl"]["facts"]
+
+        # Make sure that us-gaap and dei both are keys
+        assert "us-gaap" in facts["aapl"]["facts"]
+        assert "dei" in facts["aapl"]["facts"]
+
+        # Make sure we can get Revenues for Apple
+        assert facts["aapl"]["facts"]["us-gaap"]["Revenues"]["units"]["USD"]
+
+        # Result should be dictionary
+        assert isinstance(facts, dict)
+
+    @pytest.mark.smoke
+    @pytest.mark.parametrize(
+        "concept,instantaneous",
+        [
+            ("Revenues", False),
+            ("Revenues", True)
+        ]
+    )
+    def test_get_xbrl_frames(self, mock_user_agent, concept, instantaneous):
+        frames = get_xbrl_frames(user_agent=mock_user_agent,
+                                 concept_name=concept,
+                                 year=2020,
+                                 quarter=1,
+                                 instantaneous=instantaneous)
+        # Check to make sure we got the right frame
+        assert frames["tag"] == concept
+
+        # Make sure there is data
+        assert frames["data"]
+
+        # Data should have accn and cik as keys
+        assert "accn" in frames["data"][0]
+        assert "cik" in frames["data"][0]
+
+        assert isinstance(frames, dict)
diff --git a/secedgar/tests/test_cik_lookup.py b/secedgar/tests/test_cik_lookup.py
index 165c229..5587ac8 100644
--- a/secedgar/tests/test_cik_lookup.py
+++ b/secedgar/tests/test_cik_lookup.py
@@ -235,3 +235,8 @@ class TestCIKLookup(object):
         cik_map = get_cik_map()
         assert "ticker" in cik_map and "title" in cik_map
         assert cik_map["ticker"] and cik_map["title"]
+
+    def test_cik_lookup_client_none(self, ticker_lookups, mock_user_agent):
+        lookup = CIKLookup(lookups=ticker_lookups, user_agent=mock_user_agent, client=None)
+        assert isinstance(lookup.client, NetworkClient)
+        assert lookup.lookups == ticker_lookups
