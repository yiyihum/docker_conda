diff --git a/README.rst b/README.rst
index 2a1c20c..010528f 100644
--- a/README.rst
+++ b/README.rst
@@ -57,6 +57,16 @@ The receiving side could look something like this:
     for item in decoded_list:
         print(item)
 
+Also Decoder class supports limit on maximal decoded netstring length. It is
+required for network applications to restrict maximal length of input buffer
+in order to prevent memory bloat. Netstring length limit specified as first 
+argument in this case:
+::
+  decoder = pynetstring.Decoder(maxlen=1024)
+
+Decoder will raise TooLong exception as soon as it'll discover next string
+can't fit limit.
+
 Data encoding
 -------------
 Regardless of the type of the data that is sent to encode(), it will always
@@ -78,11 +88,16 @@ e.g. UTF-8, you have to explicitly do that conversion.
 
 Error handling
 --------------
-A ValueError exception will be raised if trying to decode an invalid 
+A ParseError subclass exception will be raised if trying to decode an invalid 
 netstring.
 ::
- # ValueError exception due to leading zero in non-empty netstring:
- pynetstring.decode('01:A,')
+ # IncompleteString exception due to missing trailing comma:
+ pynetstring.decode('3:ABC_')
+
+ decoder = Decoder(3)
+ # TooLong exception due to exceeded netstring limit in stream parser:
+ decoder.feed(b'4:ABCD,')
+
 
- # ValueError exception due to missing trailing comma:
- pynetstring.decode('3:ABC_')
\ No newline at end of file
+All other exceptions of this module can be expected to be subclass of 
+NetstringException.
diff --git a/pynetstring.py b/pynetstring.py
index a461e15..29dfa72 100644
--- a/pynetstring.py
+++ b/pynetstring.py
@@ -1,4 +1,5 @@
 from enum import Enum
+import math
 
 def _encode(data):
     if isinstance(data, str):
@@ -11,17 +12,35 @@ def encode(data):
     return _encode(data)
 
 
+class NetstringException(Exception):
+    pass
+
+
+class ParseError(NetstringException):
+    pass
+
+
+class TooLong(ParseError):
+    pass
+
+
+class IncompleteString(ParseError):
+    pass
+
+
 class State(Enum):
     PARSE_LENGTH = 0
     PARSE_DATA = 1
 
 
 class Decoder:
-    def __init__(self):
+    def __init__(self, maxlen=0):
         self._buffer = bytearray()
         self._state = State.PARSE_LENGTH
         self._length = None
         self._decoded = []
+        self._maxlen = maxlen
+        self._maxlen_bytes = math.log10(self._maxlen) + 1 if self._maxlen else 0
 
     def feed(self, data):
 
@@ -35,11 +54,17 @@ class Decoder:
                 length_end = self._buffer.find(b':')
                 if length_end == -1:
                     # There is not enough data yet to decode the length
+                    # Compact leading zeroes in buffer
+                    self._buffer = self._buffer[:-1].lstrip(b'0') + self._buffer[-1:]
+                    # Check if length field already too long:
+                    if self._maxlen_bytes and len(self._buffer) > self._maxlen_bytes:
+                        raise TooLong("Read too many bytes but length end"
+                                      " marker wasn't met.")
                     break
                 else:
                     self._length = int(self._buffer[:length_end])
-                    if self._length > 0 and self._buffer[0] == ord(b'0'):
-                        raise ValueError('Leading zero in non-empty netstring.')
+                    if self._maxlen and self._length > self._maxlen:
+                        raise TooLong("Specified netstring length is over limit.")
                     # Consume what has been parsed
                     self._buffer = self._buffer[length_end + 1:]
                     self._state = State.PARSE_DATA
@@ -51,7 +76,7 @@ class Decoder:
                     break
                 else:
                     if self._buffer[self._length] != ord(b','):
-                        raise ValueError('Missing trailing comma.')
+                        raise IncompleteString('Missing trailing comma.')
                     data = self._buffer[:self._length]
                     self._buffer = self._buffer[self._length + 1:]
                     self._decoded.append(bytes(data))
