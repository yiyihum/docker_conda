diff --git a/src/fparser/two/tests/fortran2008/test_type_declaration_stmt_r501.py b/src/fparser/two/tests/fortran2008/test_type_declaration_stmt_r501.py
index bbaa2f9..17b5cff 100644
--- a/src/fparser/two/tests/fortran2008/test_type_declaration_stmt_r501.py
+++ b/src/fparser/two/tests/fortran2008/test_type_declaration_stmt_r501.py
@@ -1,4 +1,4 @@
-# Copyright (c) 2020 Science and Technology Facilities Council
+# Copyright (c) 2020-2022 Science and Technology Facilities Council.
 
 # All rights reserved.
 
@@ -39,9 +39,15 @@
 
 '''
 
+import pytest
+from fparser.two.Fortran2003 import Intrinsic_Function_Reference
 from fparser.two.Fortran2008 import Type_Declaration_Stmt
+from fparser.two.symbol_table import SYMBOL_TABLES
+from fparser.two.utils import walk
+from fparser.api import get_reader
 
 
+@pytest.mark.usefixtures("fake_symbol_table")
 def test_type_declaration_stmt():  # R501
     '''
     Tests copied from Fortran 2003.
@@ -56,21 +62,21 @@ def test_type_declaration_stmt():  # R501
             "None), None, Entity_Decl_List(',', (Entity_Decl(Name('a'), None, "
             "None, None),)))")
 
-    obj = tcls('integer ,dimension(2):: a*3')
+    obj = tcls('integer ,dimension(2):: b*3')
     assert isinstance(obj, tcls), repr(obj)
-    assert str(obj) == 'INTEGER, DIMENSION(2) :: a*3'
+    assert str(obj) == 'INTEGER, DIMENSION(2) :: b*3'
 
-    obj = tcls('real a')
+    obj = tcls('real c')
     assert isinstance(obj, tcls), repr(obj)
-    assert str(obj) == 'REAL :: a'
+    assert str(obj) == 'REAL :: c'
     assert (repr(obj) ==
             "Type_Declaration_Stmt(Intrinsic_Type_Spec('REAL', None), None, "
-            "Entity_Decl_List(',', (Entity_Decl(Name('a'), None, None, "
+            "Entity_Decl_List(',', (Entity_Decl(Name('c'), None, None, "
             "None),)))")
 
-    obj = tcls('REAL A( LDA, * ), B( LDB, * )')
+    obj = tcls('REAL D( LDA, * ), E( LDB, * )')
     assert isinstance(obj, tcls), repr(obj)
-    assert str(obj) == 'REAL :: A(LDA, *), B(LDB, *)'
+    assert str(obj) == 'REAL :: D(LDA, *), E(LDB, *)'
 
     obj = tcls('DOUBLE PRECISION   ALPHA, BETA')
     assert isinstance(obj, tcls), repr(obj)
@@ -84,6 +90,28 @@ def test_type_declaration_stmt():  # R501
     assert isinstance(obj, tcls), repr(obj)
     assert str(obj) == 'CHARACTER(LEN = n), PRIVATE :: x(n)'
 
-    obj = tcls('character(lenmax),private:: x(n)')
+    obj = tcls('character(lenmax),private:: y(n)')
     assert isinstance(obj, tcls), repr(obj)
-    assert str(obj) == 'CHARACTER(LEN = lenmax), PRIVATE :: x(n)'
+    assert str(obj) == 'CHARACTER(LEN = lenmax), PRIVATE :: y(n)'
+
+
+def test_shadowed_intrinsic(f2008_parser):
+    ''' Check that a locally-defined symbol that shadows (overwrites) a
+    Fortran intrinsic is correctly identified. '''
+    tree = f2008_parser(get_reader('''\
+module my_mod
+  use some_mod
+  real :: dot_product(2,2)
+contains
+  subroutine my_sub()
+    real :: result
+    result = dot_product(1,1)
+  end subroutine my_sub
+end module my_mod
+    '''))
+    tables = SYMBOL_TABLES
+    # We should not have an intrinsic-function reference in the parse tree
+    assert not walk(tree, Intrinsic_Function_Reference)
+    table = tables.lookup("my_mod")
+    sym = table.children[0].lookup("dot_product")
+    assert sym.primitive_type == "real"
