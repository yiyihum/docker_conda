diff --git a/sandbox/uber.py b/sandbox/uber.py
index 91835343b..0eb90cdbd 100644
--- a/sandbox/uber.py
+++ b/sandbox/uber.py
@@ -80,7 +80,7 @@ class BasicApp(App):
         self.focused.display = not self.focused.display
 
     def action_toggle_border(self):
-        self.focused.styles.border = ("solid", "red")
+        self.focused.styles.border_top = ("solid", "invalid-color")
 
 
 app = BasicApp(css_file="uber.css", log="textual.log", log_verbosity=1)
diff --git a/src/textual/color.py b/src/textual/color.py
index f6e5be1c3..73adbabf3 100644
--- a/src/textual/color.py
+++ b/src/textual/color.py
@@ -1,7 +1,7 @@
 """
 Manages Color in Textual.
 
-All instances where the developer is presented with a color should use this class. The only 
+All instances where the developer is presented with a color should use this class. The only
 exception should be when passing things to a Rich renderable, which will need to use the
 `rich_color` attribute to perform a conversion.
 
@@ -54,6 +54,8 @@ class Lab(NamedTuple):
 
 RE_COLOR = re.compile(
     r"""^
+\#([0-9a-fA-F]{3})$|
+\#([0-9a-fA-F]{4})$|
 \#([0-9a-fA-F]{6})$|
 \#([0-9a-fA-F]{8})$|
 rgb\((\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*)\)$|
@@ -62,7 +64,7 @@ rgba\((\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*)\)$
     re.VERBOSE,
 )
 
-# Fast way to split a string of 8 characters in to 3 pairs of 2 characters
+# Fast way to split a string of 6 characters in to 3 pairs of 2 characters
 split_pairs3: Callable[[str], tuple[str, str, str]] = itemgetter(
     slice(0, 2), slice(2, 4), slice(4, 6)
 )
@@ -264,9 +266,27 @@ class Color(NamedTuple):
         color_match = RE_COLOR.match(color_text)
         if color_match is None:
             raise ColorParseError(f"failed to parse {color_text!r} as a color")
-        rgb_hex, rgba_hex, rgb, rgba = color_match.groups()
-
-        if rgb_hex is not None:
+        (
+            rgb_hex_triple,
+            rgb_hex_quad,
+            rgb_hex,
+            rgba_hex,
+            rgb,
+            rgba,
+        ) = color_match.groups()
+
+        if rgb_hex_triple is not None:
+            r, g, b = rgb_hex_triple
+            color = cls(int(f"{r}{r}", 16), int(f"{g}{g}", 16), int(f"{b}{b}", 16))
+        elif rgb_hex_quad is not None:
+            r, g, b, a = rgb_hex_quad
+            color = cls(
+                int(f"{r}{r}", 16),
+                int(f"{g}{g}", 16),
+                int(f"{b}{b}", 16),
+                int(f"{a}{a}", 16) / 255.0,
+            )
+        elif rgb_hex is not None:
             r, g, b = [int(pair, 16) for pair in split_pairs3(rgb_hex)]
             color = cls(r, g, b, 1.0)
         elif rgba_hex is not None:
diff --git a/src/textual/css/_style_properties.py b/src/textual/css/_style_properties.py
index ecafefa86..19f402bb4 100644
--- a/src/textual/css/_style_properties.py
+++ b/src/textual/css/_style_properties.py
@@ -103,6 +103,7 @@ class ScalarProperty:
             StyleValueError: If the value is of an invalid type, uses an invalid unit, or
                 cannot be parsed for any other reason.
         """
+        _rich_traceback_omit = True
         if value is None:
             obj.clear_rule(self.name)
             obj.refresh(layout=True)
@@ -186,6 +187,7 @@ class BoxProperty:
         Raises:
             StyleSyntaxError: If the string supplied for the color has invalid syntax.
         """
+        _rich_traceback_omit = True
         if border is None:
             if obj.clear_rule(self.name):
                 obj.refresh()
@@ -310,6 +312,7 @@ class BorderProperty:
         Raises:
             StyleValueError: When the supplied ``tuple`` is not of valid length (1, 2, or 4).
         """
+        _rich_traceback_omit = True
         top, right, bottom, left = self._properties
         if border is None:
             clear_rule = obj.clear_rule
@@ -405,7 +408,7 @@ class SpacingProperty:
             ValueError: When the value is malformed, e.g. a ``tuple`` with a length that is
                 not 1, 2, or 4.
         """
-
+        _rich_traceback_omit = True
         if spacing is None:
             if obj.clear_rule(self.name):
                 obj.refresh(layout=True)
@@ -455,6 +458,7 @@ class DocksProperty:
             obj (Styles): The ``Styles`` object.
             docks (Iterable[DockGroup]): Iterable of DockGroups
         """
+        _rich_traceback_omit = True
         if docks is None:
             if obj.clear_rule("docks"):
                 obj.refresh(layout=True)
@@ -489,6 +493,7 @@ class DockProperty:
             obj (Styles): The ``Styles`` object
             dock_name (str | None): The name of the dock to attach this widget to
         """
+        _rich_traceback_omit = True
         if obj.set_rule("dock", dock_name):
             obj.refresh(layout=True)
 
@@ -525,6 +530,7 @@ class LayoutProperty:
             MissingLayout,
         )  # Prevents circular import
 
+        _rich_traceback_omit = True
         if layout is None:
             if obj.clear_rule("layout"):
                 obj.refresh(layout=True)
@@ -583,6 +589,7 @@ class OffsetProperty:
             ScalarParseError: If any of the string values supplied in the 2-tuple cannot
                 be parsed into a Scalar. For example, if you specify a non-existent unit.
         """
+        _rich_traceback_omit = True
         if offset is None:
             if obj.clear_rule(self.name):
                 obj.refresh(layout=True)
@@ -649,7 +656,7 @@ class StringEnumProperty:
         Raises:
             StyleValueError: If the value is not in the set of valid values.
         """
-
+        _rich_traceback_omit = True
         if value is None:
             if obj.clear_rule(self.name):
                 obj.refresh(layout=self._layout)
@@ -695,7 +702,7 @@ class NameProperty:
         Raises:
             StyleTypeError: If the value is not a ``str``.
         """
-
+        _rich_traceback_omit = True
         if name is None:
             if obj.clear_rule(self.name):
                 obj.refresh(layout=True)
@@ -716,7 +723,7 @@ class NameListProperty:
         return cast("tuple[str, ...]", obj.get_rule(self.name, ()))
 
     def __set__(self, obj: StylesBase, names: str | tuple[str] | None = None):
-
+        _rich_traceback_omit = True
         if names is None:
             if obj.clear_rule(self.name):
                 obj.refresh(layout=True)
@@ -765,7 +772,7 @@ class ColorProperty:
         Raises:
             ColorParseError: When the color string is invalid.
         """
-
+        _rich_traceback_omit = True
         if color is None:
             if obj.clear_rule(self.name):
                 obj.refresh()
@@ -817,6 +824,7 @@ class StyleFlagsProperty:
         Raises:
             StyleValueError: If the value is an invalid style flag
         """
+        _rich_traceback_omit = True
         if style_flags is None:
             if obj.clear_rule(self.name):
                 obj.refresh()
@@ -859,6 +867,7 @@ class TransitionsProperty:
         return obj.get_rule("transitions", {})
 
     def __set__(self, obj: Styles, transitions: dict[str, Transition] | None) -> None:
+        _rich_traceback_omit = True
         if transitions is None:
             obj.clear_rule("transitions")
         else:
@@ -896,6 +905,7 @@ class FractionalProperty:
             value (float|str|None): The value to set as a float between 0 and 1, or
                 as a percentage string such as '10%'.
         """
+        _rich_traceback_omit = True
         name = self.name
         if value is None:
             if obj.clear_rule(name):
diff --git a/src/textual/css/tokenize.py b/src/textual/css/tokenize.py
index 7d5dbe3a0..7076d390a 100644
--- a/src/textual/css/tokenize.py
+++ b/src/textual/css/tokenize.py
@@ -9,7 +9,7 @@ COMMENT_START = r"\/\*"
 SCALAR = r"\-?\d+\.?\d*(?:fr|%|w|h|vw|vh)"
 DURATION = r"\d+\.?\d*(?:ms|s)"
 NUMBER = r"\-?\d+\.?\d*"
-COLOR = r"\#[0-9a-fA-F]{8}|\#[0-9a-fA-F]{6}|rgb\(\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*\)|rgba\(\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*\)"
+COLOR = r"\#[0-9a-fA-F]{8}|\#[0-9a-fA-F]{6}|\#[0-9a-fA-F]{4}|\#[0-9a-fA-F]{3}|rgb\(\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*\)|rgba\(\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*,\-?\d+\.?\d*\)"
 KEY_VALUE = r"[a-zA-Z_-][a-zA-Z0-9_-]*=[0-9a-zA-Z_\-\/]+"
 TOKEN = "[a-zA-Z][a-zA-Z0-9_-]*"
 STRING = r"\".*?\""

