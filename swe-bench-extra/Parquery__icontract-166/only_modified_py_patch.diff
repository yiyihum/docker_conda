diff --git a/icontract/_recompute.py b/icontract/_recompute.py
index cbe7709..00faac1 100644
--- a/icontract/_recompute.py
+++ b/icontract/_recompute.py
@@ -5,7 +5,8 @@ import builtins
 import functools
 import platform
 import sys
-from typing import Any, Mapping, Dict, List, Optional, Union, Tuple, Set, Callable  # pylint: disable=unused-import
+from typing import Any, Mapping, Dict, List, Optional, Union, Tuple, Set, Callable, \
+    cast  # pylint: disable=unused-import
 
 
 class Placeholder:
@@ -37,8 +38,11 @@ class Visitor(ast.NodeVisitor):
 
         :param variable_lookup: list of lookup tables to look-up the values of the variables, sorted by precedence
         """
-        # Resolve precedence of variable lookup
+        # _name_to_value maps the variable names to variable values.
+        # This is important for Load contexts as well as Store contexts in, e.g., named expressions.
         self._name_to_value = dict()  # type: Dict[str, Any]
+
+        # Resolve precedence of variable lookups
         for lookup in variable_lookup:
             for name, value in lookup.items():
                 if name not in self._name_to_value:
@@ -314,6 +318,24 @@ class Visitor(ast.NodeVisitor):
         self.recomputed_values[node] = result
         return result
 
+    if sys.version_info >= (3, 8):
+        # pylint: disable=no-member
+        def visit_NamedExpr(self, node: ast.NamedExpr) -> Any:
+            """Visit the node's ``value`` and assign it to both this node and the target."""
+            value = self.visit(node=node.value)
+            self.recomputed_values[node] = value
+
+            # This assignment is needed to make mypy happy.
+            target = cast(ast.Name, node.target)
+
+            if not isinstance(target.ctx, ast.Store):
+                raise NotImplementedError(
+                    "Expected Store context in the target of a named expression, but got: {}".format(target.ctx))
+
+            self._name_to_value[target.id] = value
+
+            return value
+
     def visit_Index(self, node: ast.Index) -> Any:
         """Visit the node's ``value``."""
         result = self.visit(node=node.value)
diff --git a/icontract/_represent.py b/icontract/_represent.py
index 81a2082..934b052 100644
--- a/icontract/_represent.py
+++ b/icontract/_represent.py
@@ -3,9 +3,10 @@ import ast
 import inspect
 import re
 import reprlib
+import sys
 import textwrap
 import uuid
-from typing import Any, Mapping, MutableMapping, Callable, List, Dict, Iterable  # pylint: disable=unused-import
+from typing import Any, Mapping, MutableMapping, Callable, List, Dict, Iterable, cast  # pylint: disable=unused-import
 from typing import Optional, Tuple  # pylint: disable=unused-import
 
 import asttokens
@@ -88,6 +89,21 @@ class Visitor(ast.NodeVisitor):
 
         self.generic_visit(node=node)
 
+    if sys.version_info >= (3, 8):
+        # pylint: disable=no-member
+        def visit_NamedExpr(self, node: ast.NamedExpr) -> Any:
+            """Represent the target with the value of the node."""
+            if node in self._recomputed_values:
+                value = self._recomputed_values[node]
+
+                # This is necessary in order to make mypy happy.
+                target = cast(ast.Name, node.target)
+
+                if _representable(value=value):
+                    self.reprs[target.id] = value
+
+            self.generic_visit(node=node)
+
     def visit_Call(self, node: ast.Call) -> None:
         """Represent the call by dumping its source code."""
         if node in self._recomputed_values:
diff --git a/precommit.py b/precommit.py
index 1592666..926809e 100755
--- a/precommit.py
+++ b/precommit.py
@@ -24,6 +24,10 @@ def main() -> int:
 
     print("YAPF'ing...")
     yapf_targets = ["tests", "icontract", "setup.py", "precommit.py", "benchmark.py", "benchmarks", "tests_with_others"]
+
+    if sys.version_info >= (3, 8, 5):
+        yapf_targets.append('tests_3_8')
+
     if overwrite:
         subprocess.check_call(
             ["yapf", "--in-place", "--style=style.yapf", "--recursive"] + yapf_targets, cwd=str(repo_root))
@@ -32,10 +36,18 @@ def main() -> int:
             ["yapf", "--diff", "--style=style.yapf", "--recursive"] + yapf_targets, cwd=str(repo_root))
 
     print("Mypy'ing...")
-    subprocess.check_call(["mypy", "--strict", "icontract", "tests"], cwd=str(repo_root))
+    mypy_targets = ["icontract", "tests"]
+    if sys.version_info >= (3, 8):
+        mypy_targets.append('tests_3_8')
+
+    subprocess.check_call(["mypy", "--strict"] + mypy_targets, cwd=str(repo_root))
 
     print("Pylint'ing...")
-    subprocess.check_call(["pylint", "--rcfile=pylint.rc", "tests", "icontract"], cwd=str(repo_root))
+    pylint_targets = ['icontract', 'tests']
+
+    if sys.version_info >= (3, 8):
+        pylint_targets.append('tests_3_8')
+    subprocess.check_call(["pylint", "--rcfile=pylint.rc"] + pylint_targets, cwd=str(repo_root))
 
     print("Pydocstyle'ing...")
     subprocess.check_call(["pydocstyle", "icontract"], cwd=str(repo_root))
@@ -45,10 +57,14 @@ def main() -> int:
     env['ICONTRACT_SLOW'] = 'true'
 
     # yapf: disable
+    unittest_targets = ['tests']
+    if sys.version_info > (3, 8):
+        unittest_targets.append('tests_3_8')
+
     subprocess.check_call(
         ["coverage", "run",
          "--source", "icontract",
-         "-m", "unittest", "discover", "tests"],
+         "-m", "unittest", "discover"] + unittest_targets,
         cwd=str(repo_root),
         env=env)
     # yapf: enable

