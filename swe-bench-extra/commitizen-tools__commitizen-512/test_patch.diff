diff --git a/tests/commands/test_check_command.py b/tests/commands/test_check_command.py
index 26db697b..e5f62d0a 100644
--- a/tests/commands/test_check_command.py
+++ b/tests/commands/test_check_command.py
@@ -200,14 +200,15 @@ def test_check_a_range_of_git_commits_and_failed(config, mocker):
         error_mock.assert_called_once()
 
 
-def test_check_command_with_invalid_argment(config):
+def test_check_command_with_invalid_argument(config):
     with pytest.raises(InvalidCommandArgumentError) as excinfo:
         commands.Check(
             config=config,
             arguments={"commit_msg_file": "some_file", "rev_range": "HEAD~10..master"},
         )
-    assert "One and only one argument is required for check command!" in str(
-        excinfo.value
+    assert (
+        "Only one of --rev-range, --message, and --commit-msg-file is permitted by check command!"
+        in str(excinfo.value)
     )
 
 
@@ -257,6 +258,46 @@ def test_check_command_with_invalid_message(config, mocker):
         error_mock.assert_called_once()
 
 
+def test_check_command_with_empty_message(config, mocker):
+    error_mock = mocker.patch("commitizen.out.error")
+    check_cmd = commands.Check(config=config, arguments={"message": ""})
+
+    with pytest.raises(InvalidCommitMessageError):
+        check_cmd()
+        error_mock.assert_called_once()
+
+
+def test_check_command_with_allow_abort_arg(config, mocker):
+    success_mock = mocker.patch("commitizen.out.success")
+    check_cmd = commands.Check(
+        config=config, arguments={"message": "", "allow_abort": True}
+    )
+
+    check_cmd()
+    success_mock.assert_called_once()
+
+
+def test_check_command_with_allow_abort_config(config, mocker):
+    success_mock = mocker.patch("commitizen.out.success")
+    config.settings["allow_abort"] = True
+    check_cmd = commands.Check(config=config, arguments={"message": ""})
+
+    check_cmd()
+    success_mock.assert_called_once()
+
+
+def test_check_command_override_allow_abort_config(config, mocker):
+    error_mock = mocker.patch("commitizen.out.error")
+    config.settings["allow_abort"] = True
+    check_cmd = commands.Check(
+        config=config, arguments={"message": "", "allow_abort": False}
+    )
+
+    with pytest.raises(InvalidCommitMessageError):
+        check_cmd()
+        error_mock.assert_called_once()
+
+
 def test_check_command_with_pipe_message(mocker, capsys):
     testargs = ["cz", "check"]
     mocker.patch.object(sys, "argv", testargs)
diff --git a/tests/test_conf.py b/tests/test_conf.py
index 786af257..f051a1f5 100644
--- a/tests/test_conf.py
+++ b/tests/test_conf.py
@@ -40,6 +40,7 @@ _settings = {
     "version": "1.0.0",
     "tag_format": None,
     "bump_message": None,
+    "allow_abort": False,
     "version_files": ["commitizen/__version__.py", "pyproject.toml"],
     "style": [["pointer", "reverse"], ["question", "underline"]],
     "changelog_file": "CHANGELOG.md",
@@ -54,6 +55,7 @@ _new_settings = {
     "version": "2.0.0",
     "tag_format": None,
     "bump_message": None,
+    "allow_abort": False,
     "version_files": ["commitizen/__version__.py", "pyproject.toml"],
     "style": [["pointer", "reverse"], ["question", "underline"]],
     "changelog_file": "CHANGELOG.md",
