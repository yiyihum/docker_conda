diff --git a/open_alchemy/utility_base/__init__.py b/open_alchemy/utility_base/__init__.py
index 70181b32..76846c7a 100644
--- a/open_alchemy/utility_base/__init__.py
+++ b/open_alchemy/utility_base/__init__.py
@@ -221,6 +221,15 @@ class UtilityBase:
         return_dict: typing.Dict[str, typing.Any] = {}
         for name, property_schema in properties.items():
             value = getattr(instance, name, None)
+
+            # Handle none value
+            if value is None:
+                return_none = to_dict.return_none(schema=schema, property_name=name)
+                if return_none is True:
+                    return_dict[name] = None
+                # Don't consider for coverage due to coverage bug
+                continue  # pragma: no cover
+
             try:
                 return_dict[name] = to_dict.convert(schema=property_schema, value=value)
             except exceptions.BaseError as exc:
diff --git a/open_alchemy/utility_base/to_dict/__init__.py b/open_alchemy/utility_base/to_dict/__init__.py
index 67079c56..41cd0680 100644
--- a/open_alchemy/utility_base/to_dict/__init__.py
+++ b/open_alchemy/utility_base/to_dict/__init__.py
@@ -31,3 +31,36 @@ def convert(*, schema: oa_types.Schema, value: typing.Any) -> types.TAnyDict:
     if type_ in {"integer", "number", "string", "boolean"}:
         return simple.convert(value, schema=schema)
     raise exceptions.FeatureNotImplementedError(f"Type {type_} is not supported.")
+
+
+def return_none(*, schema: oa_types.Schema, property_name: str) -> bool:
+    """
+    Check whether a null value for a property should be returned.
+
+    Assume the schema has properties and that it has a schema for the property.
+    Assume that any $ref and allOf has already been resolved.
+
+    The rules are:
+    1. if the property is required, return it,
+    2. if the property is nullable, return it and
+    3. else, don't return it.
+
+    Args:
+        schema: The schema for the model.
+        property_name: The name of the property to check for.
+
+    Returns:
+        Whether the none value should be returned for the property.
+
+    """
+    # Retrieve input
+    required_array = schema.get("required", None)
+    property_schema = schema["properties"][property_name]
+
+    # Check for required and nullable
+    if required_array is not None and property_name in set(required_array):
+        return True
+    nullable_value = helpers.peek.nullable(schema=property_schema, schemas={})
+    if nullable_value is True:
+        return True
+    return False

