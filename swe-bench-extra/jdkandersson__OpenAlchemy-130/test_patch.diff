diff --git a/tests/open_alchemy/utility_base/test_to_dict.py b/tests/open_alchemy/utility_base/test_to_dict.py
index eba6f58c..51713a44 100644
--- a/tests/open_alchemy/utility_base/test_to_dict.py
+++ b/tests/open_alchemy/utility_base/test_to_dict.py
@@ -41,14 +41,31 @@ def test_to_dict_no_properties(__init__):
 @pytest.mark.parametrize(
     "schema, value, expected_value",
     [
-        ({"properties": {"key": {"type": "integer"}}}, {"key": 1}, {"key": 1}),
-        (
+        pytest.param(
+            {"properties": {"key": {"type": "integer"}}},
+            {"key": 1},
+            {"key": 1},
+            id="single",
+        ),
+        pytest.param(
+            {"properties": {"key": {"type": "integer"}}},
+            {"key": None},
+            {},
+            id="single null value not return",
+        ),
+        pytest.param(
+            {"properties": {"key": {"type": "integer", "nullable": True}}},
+            {"key": None},
+            {"key": None},
+            id="single null value return",
+        ),
+        pytest.param(
             {"properties": {"key_1": {"type": "integer"}, "key_2": {"type": "string"}}},
             {"key_1": 1, "key_2": "value 2"},
             {"key_1": 1, "key_2": "value 2"},
+            id="multiple",
         ),
     ],
-    ids=["single", "multiple"],
 )
 @pytest.mark.utility_base
 def test_valid(__init__, schema, value, expected_value):
diff --git a/tests/open_alchemy/utility_base/to_dict/test_to_dict.py b/tests/open_alchemy/utility_base/to_dict/test_to_dict.py
new file mode 100644
index 00000000..fe056fd8
--- /dev/null
+++ b/tests/open_alchemy/utility_base/to_dict/test_to_dict.py
@@ -0,0 +1,74 @@
+"""Tests for to_dict."""
+
+import pytest
+
+from open_alchemy.utility_base import to_dict
+
+
+@pytest.mark.parametrize(
+    "schema, expected_result",
+    [
+        pytest.param(
+            {"properties": {"prop_1": {"key": "value"}}},
+            False,
+            id="nullable not set required not set expect false",
+        ),
+        pytest.param(
+            {"properties": {"prop_1": {"key": "value"}}, "required": []},
+            False,
+            id="nullable not set required empty expect false",
+        ),
+        pytest.param(
+            {"properties": {"prop_1": {"key": "value"}}, "required": ["prop_2"]},
+            False,
+            id="nullable not set required different property expect false",
+        ),
+        pytest.param(
+            {"properties": {"prop_1": {"key": "value"}}, "required": ["prop_1"]},
+            True,
+            id="nullable not set required has property expect true",
+        ),
+        pytest.param(
+            {
+                "properties": {"prop_1": {"key": "value", "nullable": False}},
+                "required": [],
+            },
+            False,
+            id="nullable false required empty expect false",
+        ),
+        pytest.param(
+            {
+                "properties": {"prop_1": {"key": "value", "nullable": False}},
+                "required": ["prop_1"],
+            },
+            True,
+            id="nullable false required has property expect true",
+        ),
+        pytest.param(
+            {
+                "properties": {"prop_1": {"key": "value", "nullable": True}},
+                "required": [],
+            },
+            True,
+            id="nullable true required empty expect true",
+        ),
+        pytest.param(
+            {
+                "properties": {"prop_1": {"key": "value", "nullable": True}},
+                "required": ["prop_1"],
+            },
+            True,
+            id="nullable true required has property expect true",
+        ),
+    ],
+)
+@pytest.mark.utility_base
+def test_return_none(schema, expected_result):
+    """
+    GIVEN schema with property and expected result
+    WHEN return_none is called with the schema and property name
+    THEN the expected result is returned.
+    """
+    result = to_dict.return_none(schema=schema, property_name="prop_1")
+
+    assert result == expected_result
