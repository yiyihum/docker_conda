diff --git a/pint/testsuite/test_numpy.py b/pint/testsuite/test_numpy.py
index 360b29b..200115c 100644
--- a/pint/testsuite/test_numpy.py
+++ b/pint/testsuite/test_numpy.py
@@ -235,6 +235,10 @@ class TestNumpyMethods(QuantityTestCase):
         for q, v in zip(self.q.flatten(), [1, 2, 3, 4]):
             self.assertEqual(q, v * self.ureg.m)
 
+    def test_iterable(self):
+        self.assertTrue(np.iterable(self.q))
+        self.assertFalse(np.iterable(1 * self.ureg.m))
+
     def test_reversible_op(self):
         """
         """
diff --git a/pint/testsuite/test_quantity.py b/pint/testsuite/test_quantity.py
index 41c6903..e5fc076 100644
--- a/pint/testsuite/test_quantity.py
+++ b/pint/testsuite/test_quantity.py
@@ -392,6 +392,19 @@ class TestQuantity(QuantityTestCase):
         u_array_5 = self.Q_.from_list(u_seq)
         self.assertTrue(all(u_array_5 == u_array_ref))
 
+    @helpers.requires_numpy()
+    def test_iter(self):
+        # Verify that iteration gives element as Quantity with same units
+        x = self.Q_([0, 1, 2, 3], 'm')
+        self.assertQuantityEqual(next(iter(x)), self.Q_(0, 'm'))
+
+    def test_notiter(self):
+        # Verify that iter() crashes immediately, without needing to draw any
+        # element from it, if the magnitude isn't iterable
+        x = self.Q_(1, 'm')
+        with self.assertRaises(TypeError):
+            iter(x)
+
 
 class TestQuantityToCompact(QuantityTestCase):
 
diff --git a/pint/testsuite/test_util.py b/pint/testsuite/test_util.py
index 915fc66..da6c02e 100644
--- a/pint/testsuite/test_util.py
+++ b/pint/testsuite/test_util.py
@@ -9,7 +9,7 @@ from decimal import Decimal
 from pint.testsuite import BaseTestCase, QuantityTestCase
 from pint.util import (string_preprocessor, find_shortest_path, matrix_to_string,
                        transpose, tokenizer, find_connected_nodes, ParserHelper,
-                       UnitsContainer, to_units_container)
+                       UnitsContainer, to_units_container, iterable, sized)
 
 
 class TestUnitsContainer(QuantityTestCase):
@@ -333,3 +333,22 @@ class TestMatrix(BaseTestCase):
     def test_transpose(self):
 
         self.assertEqual(transpose([[1, 2], [3, 4]]), [[1, 3], [2, 4]])
+
+
+class TestOtherUtils(BaseTestCase):
+
+    def test_iterable(self):
+
+        # Test with list, string, generator, and scalar
+        self.assertTrue(iterable([0, 1, 2, 3]))
+        self.assertTrue(iterable('test'))
+        self.assertTrue(iterable((i for i in range(5))))
+        self.assertFalse(iterable(0))
+
+    def test_sized(self):
+
+        # Test with list, string, generator, and scalar
+        self.assertTrue(sized([0, 1, 2, 3]))
+        self.assertTrue(sized('test'))
+        self.assertFalse(sized((i for i in range(5))))
+        self.assertFalse(sized(0))
