diff --git a/schema_salad/tests/inherited-attributes.yml b/schema_salad/tests/inherited-attributes.yml
new file mode 100644
index 0000000..d37a827
--- /dev/null
+++ b/schema_salad/tests/inherited-attributes.yml
@@ -0,0 +1,25 @@
+- name: Parent
+  doc: |
+    Parent record
+  documentRoot: true
+  docChild:
+    - "#Child"
+  type: record
+  fields:
+    - name: id
+      jsonldPredicate:
+        _id: "#id"
+      type: int
+      doc: Parent ID
+
+- name: Child
+  doc: |
+    Child record
+  type: record
+  extends: Parent
+  fields:
+    - name: id
+      jsonldPredicate:
+        _id: "#id"
+      type: int
+      doc: Child ID
diff --git a/schema_salad/tests/test_makedoc.py b/schema_salad/tests/test_makedoc.py
new file mode 100644
index 0000000..41fa8d6
--- /dev/null
+++ b/schema_salad/tests/test_makedoc.py
@@ -0,0 +1,18 @@
+"""Test schema-salad makedoc"""
+
+from io import StringIO
+
+from schema_salad.makedoc import makedoc
+
+from .util import get_data
+
+
+def test_schema_salad_inherit_docs() -> None:
+    """Test schema-salad-doc when types inherit and override values from parent types."""
+    schema_path = get_data("tests/inherited-attributes.yml")
+    assert schema_path
+    stdout = StringIO()
+    makedoc(stdout, schema_path)
+
+    # The parent ID documentation (i.e. Parent ID) must appear exactly once.
+    assert 1 == stdout.getvalue().count("Parent ID")
diff --git a/schema_salad/tests/test_subtypes.py b/schema_salad/tests/test_subtypes.py
index 1e0c56d..6d9473a 100644
--- a/schema_salad/tests/test_subtypes.py
+++ b/schema_salad/tests/test_subtypes.py
@@ -101,9 +101,8 @@ def test_avro_loading_subtype_bad() -> None:
     path = get_data("tests/test_schema/avro_subtype_bad.yml")
     assert path
     target_error = (
-        r"Union\s+item\s+must\s+be\s+a\s+valid\s+Avro\s+schema:\s+"
-        r"Field\s+name\s+override_me\s+already\s+in\s+use\s+with\s+incompatible\s+"
-        r"type\.\s+org\.w3id\.cwl\.salad\.Any\s+vs\s+\['string',\s+'int'\]\."
+        r"Field name .*\/override_me already in use with incompatible type. "
+        r"Any vs \['string', 'int'\]\."
     )
     with pytest.raises(SchemaParseException, match=target_error):
         document_loader, avsc_names, schema_metadata, metaschema_loader = load_schema(
