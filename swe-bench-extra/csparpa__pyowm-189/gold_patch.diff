diff --git a/pyowm/utils/temputils.py b/pyowm/utils/temputils.py
index 58c4ea9..8bc29c3 100644
--- a/pyowm/utils/temputils.py
+++ b/pyowm/utils/temputils.py
@@ -1,11 +1,15 @@
 """
-Module containing utility functions for temperature units conversion
+Module containing utility functions for temperature and wind units conversion
 """
 
+# Temperature coneversion constants
 KELVIN_OFFSET = 273.15
 FAHRENHEIT_OFFSET = 32.0
 FAHRENHEIT_DEGREE_SCALE = 1.8
 
+# Wind speed conversion constants
+MILES_PER_HOUR_FOR_ONE_METER_PER_SEC = 2.23694
+
 
 def kelvin_dict_to(d, target_temperature_unit):
     """
@@ -66,3 +70,24 @@ def kelvin_to_fahrenheit(kelvintemp):
     fahrenheittemp = (kelvintemp - KELVIN_OFFSET) * \
         FAHRENHEIT_DEGREE_SCALE + FAHRENHEIT_OFFSET
     return float("{0:.2f}".format(fahrenheittemp))
+
+
+def metric_wind_dict_to_imperial(d):
+    """
+    Converts all the wind values in a dict from meters/sec (metric measurement 
+    system) to miles/hour (imperial measurement system)
+    .
+
+    :param d: the dictionary containing metric values
+    :type d: dict
+    :returns: a dict with the same keys as the input dict and values converted
+        to miles/hour
+
+    """
+    result = dict()
+    for key, value in d.items():
+        if key != 'deg': # do not convert wind degree
+            result[key] = value * MILES_PER_HOUR_FOR_ONE_METER_PER_SEC
+        else:
+            result[key] = value
+    return result
diff --git a/pyowm/webapi25/weather.py b/pyowm/webapi25/weather.py
index ddd9c39..cfd3962 100644
--- a/pyowm/webapi25/weather.py
+++ b/pyowm/webapi25/weather.py
@@ -163,13 +163,22 @@ class Weather(object):
         """
         return self._snow
 
-    def get_wind(self):
+    def get_wind(self, unit='meters_sec'):
         """Returns a dict containing wind info
-
+        
+        :param unit: the unit of measure for the wind values. May be:
+            '*meters_sec*' (default) or '*miles_hour*'
+        :type unit: str
         :returns: a dict containing wind info
 
         """
-        return self._wind
+        if unit == 'meters_sec':
+            return self._wind
+        elif unit == 'miles_hour':
+            wind_dict = {k: self._wind[k] for k in self._wind if self._wind[k] is not None}
+            return temputils.metric_wind_dict_to_imperial(wind_dict)
+        else:
+            raise ValueError("Invalid value for target wind conversion unit")
 
     def get_humidity(self):
         """Returns the atmospheric humidity as an int
