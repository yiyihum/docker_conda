diff --git a/cwltool/context.py b/cwltool/context.py
index 83c098e1..daf6aa86 100644
--- a/cwltool/context.py
+++ b/cwltool/context.py
@@ -107,6 +107,7 @@ class RuntimeContext(ContextBase):
         self.pull_image = True  # type: bool
         self.rm_container = True  # type: bool
         self.move_outputs = "move"  # type: str
+        self.streaming_allowed: bool = False
 
         self.singularity = False  # type: bool
         self.debug = False  # type: bool
diff --git a/cwltool/job.py b/cwltool/job.py
index f515091e..0f9eb131 100644
--- a/cwltool/job.py
+++ b/cwltool/job.py
@@ -3,6 +3,7 @@ import functools
 import itertools
 import logging
 import os
+import stat
 import re
 import shutil
 import subprocess  # nosec
@@ -175,13 +176,24 @@ class JobBase(HasReqsHints, metaclass=ABCMeta):
         if not os.path.exists(self.outdir):
             os.makedirs(self.outdir)
 
+        def is_streamable(file: str) -> bool:
+            if not runtimeContext.streaming_allowed:
+                return False
+            for inp in self.joborder.values():
+                if isinstance(inp, dict) and inp.get("location", None) == file:
+                    return inp.get("streamable", False)
+            return False
+
         for knownfile in self.pathmapper.files():
             p = self.pathmapper.mapper(knownfile)
             if p.type == "File" and not os.path.isfile(p[0]) and p.staged:
-                raise WorkflowException(
-                    "Input file %s (at %s) not found or is not a regular "
-                    "file." % (knownfile, self.pathmapper.mapper(knownfile)[0])
-                )
+                if not (
+                    is_streamable(knownfile) and stat.S_ISFIFO(os.stat(p[0]).st_mode)
+                ):
+                    raise WorkflowException(
+                        "Input file %s (at %s) not found or is not a regular "
+                        "file." % (knownfile, self.pathmapper.mapper(knownfile)[0])
+                    )
 
         if "listing" in self.generatefiles:
             runtimeContext = runtimeContext.copy()
