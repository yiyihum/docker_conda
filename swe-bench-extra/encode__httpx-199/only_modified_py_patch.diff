diff --git a/httpx/__init__.py b/httpx/__init__.py
index fd17441..39b44aa 100644
--- a/httpx/__init__.py
+++ b/httpx/__init__.py
@@ -32,10 +32,10 @@ from .exceptions import (
 )
 from .interfaces import (
     AsyncDispatcher,
-    BaseReader,
-    BaseWriter,
     BaseBackgroundManager,
     BasePoolSemaphore,
+    BaseReader,
+    BaseWriter,
     ConcurrencyBackend,
     Dispatcher,
     Protocol,
diff --git a/httpx/client.py b/httpx/client.py
index e22d1a9..6b49797 100644
--- a/httpx/client.py
+++ b/httpx/client.py
@@ -20,11 +20,11 @@ from .dispatch.connection_pool import ConnectionPool
 from .dispatch.threaded import ThreadedDispatcher
 from .dispatch.wsgi import WSGIDispatch
 from .exceptions import (
+    HTTPError,
     InvalidURL,
     RedirectBodyUnavailable,
     RedirectLoop,
     TooManyRedirects,
-    HTTPError,
 )
 from .interfaces import AsyncDispatcher, ConcurrencyBackend, Dispatcher
 from .models import (
@@ -312,6 +312,7 @@ class BaseClient:
         headers = Headers(request.headers)
         if url.origin != request.url.origin:
             del headers["Authorization"]
+            del headers["host"]
         return headers
 
     def redirect_content(
diff --git a/httpx/exceptions.py b/httpx/exceptions.py
index 21dc7f4..ddccbf8 100644
--- a/httpx/exceptions.py
+++ b/httpx/exceptions.py
@@ -9,7 +9,9 @@ class HTTPError(Exception):
     Base class for Httpx exception
     """
 
-    def __init__(self, request: 'BaseRequest' = None, response: 'BaseResponse' = None, *args) -> None:
+    def __init__(
+        self, request: "BaseRequest" = None, response: "BaseResponse" = None, *args
+    ) -> None:
         self.response = response
         self.request = request or getattr(self.response, "request", None)
         super().__init__(*args)
diff --git a/httpx/models.py b/httpx/models.py
index e7e7a57..f397e78 100644
--- a/httpx/models.py
+++ b/httpx/models.py
@@ -33,7 +33,7 @@ from .utils import (
     is_known_encoding,
     normalize_header_key,
     normalize_header_value,
-    str_query_param
+    str_query_param,
 )
 
 PrimitiveData = typing.Union[str, int, float, bool, type(None)]

