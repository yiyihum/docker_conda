diff --git a/git_machete/cli.py b/git_machete/cli.py
index 19a6a38..8824ec9 100644
--- a/git_machete/cli.py
+++ b/git_machete/cli.py
@@ -358,15 +358,25 @@ def create_cli_parser() -> argparse.ArgumentParser:
 def update_cli_opts_using_parsed_args(
         cli_opts: git_machete.options.CommandLineOptions,
         parsed_args: argparse.Namespace) -> None:
+
+    # Warning: In mypy, Arguments that come from untyped functions/variables are silently treated by mypy as Any.
+    # Since argparse is not typed, everything that comes from argparse.Namespace will be taken as Any :(
+    # Even if we add type=LocalBranchShortName into argument parser for branch,
+    # python debugger will see branch as LocalBranchShortName but mypy always will see it as Any,
+    # until you specifically tell mypy what is the exact type by casting (right now it's done this way below, but casting does not solve all of the problems).
+    #
+    # The reasonable solution here would be to use Typed Argument Parser which is a wrapper over argparse with modernised solution for typing.
+    # But it would add external dependency to git-machete, so let's stick to current casting.
+
     for opt, arg in vars(parsed_args).items():
         if opt == "branch":
-            cli_opts.opt_branch = arg
+            cli_opts.opt_branch = LocalBranchShortName.of(arg)
         elif opt == "checked_out_since":
             cli_opts.opt_checked_out_since = arg
         elif opt == "color":
             cli_opts.opt_color = arg
         elif opt == "down_fork_point":
-            cli_opts.opt_down_fork_point = arg
+            cli_opts.opt_down_fork_point = AnyRevision.of(arg)
         elif opt == "debug":
             cli_opts.opt_debug = True
         elif opt == "draft":
@@ -374,7 +384,7 @@ def update_cli_opts_using_parsed_args(
         elif opt == "fetch":
             cli_opts.opt_fetch = True
         elif opt == "fork_point":
-            cli_opts.opt_fork_point = arg
+            cli_opts.opt_fork_point = AnyRevision.of(arg)
         elif opt == "inferred":
             cli_opts.opt_inferred = True
         elif opt == "list_commits_with_hashes":
@@ -397,7 +407,7 @@ def update_cli_opts_using_parsed_args(
         elif opt == "no_push_untracked":
             cli_opts.opt_push_untracked = False
         elif opt == "onto":
-            cli_opts.opt_onto = arg
+            cli_opts.opt_onto = LocalBranchShortName.of(arg)
         elif opt == "override_to":
             cli_opts.opt_override_to = arg
         elif opt == "override_to_inferred":
@@ -412,7 +422,7 @@ def update_cli_opts_using_parsed_args(
         elif opt == "as_root":
             cli_opts.opt_as_root = True
         elif opt == "roots":
-            cli_opts.opt_roots = arg.split(",")
+            cli_opts.opt_roots = list(map(LocalBranchShortName.of, arg.split(",")))
         elif opt == "return_to":
             cli_opts.opt_return_to = arg
         elif opt == "stat":

