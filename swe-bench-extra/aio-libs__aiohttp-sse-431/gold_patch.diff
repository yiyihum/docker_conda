diff --git a/aiohttp_sse/__init__.py b/aiohttp_sse/__init__.py
index 1b04105..7a18da2 100644
--- a/aiohttp_sse/__init__.py
+++ b/aiohttp_sse/__init__.py
@@ -2,6 +2,7 @@ import asyncio
 import contextlib
 import io
 import re
+from typing import Optional
 
 from aiohttp.web import HTTPMethodNotAllowed, StreamResponse
 
@@ -26,6 +27,7 @@ class EventSourceResponse(StreamResponse):
 
     DEFAULT_PING_INTERVAL = 15
     DEFAULT_SEPARATOR = "\r\n"
+    DEFAULT_LAST_EVENT_HEADER = "Last-Event-Id"
     LINE_SEP_EXPR = re.compile(r"\r\n|\r|\n")
 
     def __init__(self, *, status=200, reason=None, headers=None, sep=None):
@@ -134,6 +136,15 @@ class EventSourceResponse(StreamResponse):
         """Time interval between two ping massages"""
         return self._ping_interval
 
+    @property
+    def last_event_id(self) -> Optional[str]:
+        """Last event ID, requested by client."""
+        if self._req is None:
+            msg = "EventSource request must be prepared first"
+            raise RuntimeError(msg)
+
+        return self._req.headers.get(self.DEFAULT_LAST_EVENT_HEADER)
+
     @ping_interval.setter
     def ping_interval(self, value):
         """Setter for ping_interval property.
diff --git a/examples/graceful_shutdown.py b/examples/graceful_shutdown.py
index b884ead..065c883 100644
--- a/examples/graceful_shutdown.py
+++ b/examples/graceful_shutdown.py
@@ -14,10 +14,6 @@ worker = web.AppKey("worker", asyncio.Task[None])
 
 
 class SSEResponse(EventSourceResponse):
-    @property
-    def last_event_id(self):
-        return self._req.headers.get("Last-Event-Id")
-
     async def send_json(
         self,
         data,
