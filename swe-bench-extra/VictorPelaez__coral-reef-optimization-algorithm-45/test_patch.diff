diff --git a/tests/__init__.py b/tests/__init__.py
index e69de29..1581836 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -0,0 +1,4 @@
+import sys
+import os
+
+sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
diff --git a/tests/test_cro.py b/tests/test_cro.py
index f71a78f..5c8a9ed 100644
--- a/tests/test_cro.py
+++ b/tests/test_cro.py
@@ -3,11 +3,6 @@
 ###############################################################################
 # run with:
 # python -m pytest tests/test_cro.py
-
-import sys
-import os
-sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
-
 import numpy as np
 
 from cro.cro import CRO
@@ -119,7 +114,6 @@ def test_larvaesettling_nonemptyreef():
     """
     Due to the passed seed,
     [1,0,0,0] will be placed in the empty coral (index 0)
-
     Then, larva [0,1,1,0] will try to settle in indices [0,3,1], settling in the third try (index 1)
     Larva [0,1,0,0] will try in indices [0,3,3], being discarded
     Larva [1,0,0,1] will try in indices [3,3,1], settling in the third try (index 1)
@@ -176,4 +170,4 @@ def test_settle_larvae():
     
     assert REEF_res[indices] == 1
     np.testing.assert_almost_equal(REEFpob_res[indices, :], larvae)
-    np.testing.assert_almost_equal(REEFfitness_res[indices], larvaefitness)
\ No newline at end of file
+    np.testing.assert_almost_equal(REEFfitness_res[indices], larvaefitness)
diff --git a/tests/test_fitness.py b/tests/test_fitness.py
index 30f0a0e..73eafe7 100644
--- a/tests/test_fitness.py
+++ b/tests/test_fitness.py
@@ -3,11 +3,6 @@
 ###############################################################################
 # run with:
 # python -m pytest tests/test_fitness.py
-
-import sys
-import os
-sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
-
 import numpy as np
 
 from cro.fitness import max_ones
@@ -37,4 +32,4 @@ def test_feature_selection():
     """
     To be added
     """
-    pass
\ No newline at end of file
+    pass
diff --git a/tests/test_larvaemutation.py b/tests/test_larvaemutation.py
index 9713491..c564422 100644
--- a/tests/test_larvaemutation.py
+++ b/tests/test_larvaemutation.py
@@ -3,11 +3,6 @@
 ###############################################################################
 # run with:
 # python -m pytest tests/test_larvaemutation.py
-
-import sys
-import os
-sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
-
 import numpy as np
 
 from cro.larvaemutation import get_larvaemutation_function
@@ -79,4 +74,4 @@ def test_get_larvaemutation_function():
     f = get_larvaemutation_function('bin')
     assert 'function bin_larvaemutation' in str(f)
     f = get_larvaemutation_function('disc')
-    assert 'function disc_larvaemutation' in str(f)
\ No newline at end of file
+    assert 'function disc_larvaemutation' in str(f)
diff --git a/tests/test_reefinitialization.py b/tests/test_reefinitialization.py
index 567c7dd..198f6bd 100644
--- a/tests/test_reefinitialization.py
+++ b/tests/test_reefinitialization.py
@@ -3,28 +3,28 @@
 ###############################################################################
 # run with:
 # python -m pytest tests/test_larvaemutation.py
-
-import sys
-import os
-sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
-
 import numpy as np
 
-#from cro.reefinitialization import bin_binary, disc_equal_range
+from cro.reef_initialization import bin_binary, disc_equal_range
 
 # ------------------------------------------------------
 # reefinitialization module
 # ------------------------------------------------------
-
 def test_bin_binary():
     """
     Test that corals in the population only contain values in {0, 1}
     """
-    pass
-    
-    
+    M, N, r0, L = 2, 2, 0.6, 8
+    REEF, REEFpob = bin_binary(M, N, r0, L)
+    assert set(REEFpob.ravel()) == {0, 1}
+
 def test_disc_equal_range():
     """
     Test that corals in population contain values specified in the grid
     """
-    pass
\ No newline at end of file
+    M, N, r0, L = 2, 2, 0.6, 8
+    grid = {'x': [2, 10]}      # Discrete values between 2 and 10
+
+    REEF, REEFpob = disc_equal_range(M, N, r0, L, param_grid=grid)
+    p = sum(REEFpob[np.where(REEFpob!=0)]<grid['x'][0]) + sum(REEFpob[np.where(REEFpob!=0)]>grid['x'][1])
+    assert p == 0
