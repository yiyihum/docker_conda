diff --git a/clovek_ne_jezi_se/agents.py b/clovek_ne_jezi_se/agents.py
index e079f75..bf602f4 100644
--- a/clovek_ne_jezi_se/agents.py
+++ b/clovek_ne_jezi_se/agents.py
@@ -7,6 +7,7 @@ from random import randint
 import attr
 
 import matplotlib.pyplot as plt
+import numpy as np
 
 from clovek_ne_jezi_se.game_state import GameState, MoveContainer
 from clovek_ne_jezi_se.log_handler import handler
@@ -54,7 +55,7 @@ class Player:
     @abc.abstractmethod
     def choose_move_idx(
         self, game_state: 'GameState',
-        allowed_moves: Sequence['MoveContainer']
+        allowed_moves: Sequence[Sequence['MoveContainer']]
     ) -> int:
         return
 
@@ -86,8 +87,33 @@ class RandomPlayer(Player):
     """Player that selects uniformly randomly from allowed moves"""
     def choose_move_idx(
         self, game_state: 'GameState',
-        allowed_moves: Sequence['MoveContainer']
+        allowed_moves: Sequence[Sequence['MoveContainer']]
     ) -> int:
-        """TODO: Test???"""
+        """TODO: Test me???"""
         idx = randint(0, len(allowed_moves)-1)
         return idx
+
+
+@attr.s
+class FurthestAlongPlayer(Player):
+    def choose_move_idx(
+        self, game_state: 'GameState',
+        allowed_moves: Sequence[Sequence['MoveContainer']]
+    ) -> int:
+        """
+        Return index for move that is closes to the player's last home space
+        """
+        player_from_moves = []
+        for move_components in allowed_moves:
+            for move_component in move_components:
+                if move_component.from_space.occupied_by == self.name:
+                    player_from_moves.append(move_component)
+
+        player_from_spaces = [move.from_space for move in player_from_moves]
+
+        distances_to_end = [
+            game_state.distance_to_end(space) for space in player_from_spaces
+        ]
+        idx_furthest_along = np.argmin(distances_to_end)
+
+        return idx_furthest_along
diff --git a/clovek_ne_jezi_se/game_state.py b/clovek_ne_jezi_se/game_state.py
index bfcf59b..f50c4ff 100644
--- a/clovek_ne_jezi_se/game_state.py
+++ b/clovek_ne_jezi_se/game_state.py
@@ -556,6 +556,23 @@ class GameState:
         )
         return home_count == self.pieces_per_player
 
+    def distance_to_end(self, board_space: 'BoardSpace') -> int:
+
+        # Get player subgraph
+        player_subgraph_query_paramses = \
+            self._get_player_subgraph_query_paramses(board_space.occupied_by)
+
+        player_subgraph_view = get_filtered_subgraph_view(
+            self._graph, player_subgraph_query_paramses
+        )
+        space_node_name = self._get_board_space_node_name(board_space)
+
+        successor_nodes = nx.dfs_successors(
+            player_subgraph_view, source=space_node_name
+        )
+
+        return len(successor_nodes)
+
     # Visualization
     def draw(
         self, figsize=(8, 6), with_labels=False,
diff --git a/scripts/play.py b/scripts/play.py
index 397a750..2998a94 100644
--- a/scripts/play.py
+++ b/scripts/play.py
@@ -1,19 +1,19 @@
 import mlflow
-from mlflow.tracking import MlflowClient
-
 
 from clovek_ne_jezi_se.client import Client
-from clovek_ne_jezi_se.agents import HumanPlayer, RandomPlayer
+from clovek_ne_jezi_se.agents import RandomPlayer, FurthestAlongPlayer
+
 
-# TODO put in config file (json)
-player_names = ['red', 'blue', 'green', 'yellow']
+furthest_along_player = FurthestAlongPlayer(name='red')
 
+random_player_names = ['blue', 'green', 'yellow']
 random_players = [
-    RandomPlayer(name=name, print_game_state=False) for name in player_names
+    RandomPlayer(name=name, print_game_state=False)
+    for name in random_player_names
 ]
-players = random_players
+players = [furthest_along_player] + random_players
 
-n_runs = 96
+n_runs = 100
 main_board_section_length = 1
 pieces_per_player = 4
 number_of_dice_faces = 6

