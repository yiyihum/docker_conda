diff --git a/clovek_ne_jezi_se/agents.py b/clovek_ne_jezi_se/agents.py
index e079f75..bf602f4 100644
--- a/clovek_ne_jezi_se/agents.py
+++ b/clovek_ne_jezi_se/agents.py
@@ -7,6 +7,7 @@ from random import randint
 import attr
 
 import matplotlib.pyplot as plt
+import numpy as np
 
 from clovek_ne_jezi_se.game_state import GameState, MoveContainer
 from clovek_ne_jezi_se.log_handler import handler
@@ -54,7 +55,7 @@ class Player:
     @abc.abstractmethod
     def choose_move_idx(
         self, game_state: 'GameState',
-        allowed_moves: Sequence['MoveContainer']
+        allowed_moves: Sequence[Sequence['MoveContainer']]
     ) -> int:
         return
 
@@ -86,8 +87,33 @@ class RandomPlayer(Player):
     """Player that selects uniformly randomly from allowed moves"""
     def choose_move_idx(
         self, game_state: 'GameState',
-        allowed_moves: Sequence['MoveContainer']
+        allowed_moves: Sequence[Sequence['MoveContainer']]
     ) -> int:
-        """TODO: Test???"""
+        """TODO: Test me???"""
         idx = randint(0, len(allowed_moves)-1)
         return idx
+
+
+@attr.s
+class FurthestAlongPlayer(Player):
+    def choose_move_idx(
+        self, game_state: 'GameState',
+        allowed_moves: Sequence[Sequence['MoveContainer']]
+    ) -> int:
+        """
+        Return index for move that is closes to the player's last home space
+        """
+        player_from_moves = []
+        for move_components in allowed_moves:
+            for move_component in move_components:
+                if move_component.from_space.occupied_by == self.name:
+                    player_from_moves.append(move_component)
+
+        player_from_spaces = [move.from_space for move in player_from_moves]
+
+        distances_to_end = [
+            game_state.distance_to_end(space) for space in player_from_spaces
+        ]
+        idx_furthest_along = np.argmin(distances_to_end)
+
+        return idx_furthest_along
diff --git a/clovek_ne_jezi_se/game_state.py b/clovek_ne_jezi_se/game_state.py
index bfcf59b..f50c4ff 100644
--- a/clovek_ne_jezi_se/game_state.py
+++ b/clovek_ne_jezi_se/game_state.py
@@ -556,6 +556,23 @@ class GameState:
         )
         return home_count == self.pieces_per_player
 
+    def distance_to_end(self, board_space: 'BoardSpace') -> int:
+
+        # Get player subgraph
+        player_subgraph_query_paramses = \
+            self._get_player_subgraph_query_paramses(board_space.occupied_by)
+
+        player_subgraph_view = get_filtered_subgraph_view(
+            self._graph, player_subgraph_query_paramses
+        )
+        space_node_name = self._get_board_space_node_name(board_space)
+
+        successor_nodes = nx.dfs_successors(
+            player_subgraph_view, source=space_node_name
+        )
+
+        return len(successor_nodes)
+
     # Visualization
     def draw(
         self, figsize=(8, 6), with_labels=False,
diff --git a/docs/source/index.rst b/docs/source/index.rst
index f599165..9edd497 100644
--- a/docs/source/index.rst
+++ b/docs/source/index.rst
@@ -11,6 +11,7 @@ Welcome to clovek-ne-jezi-se's documentation!
    :caption: Contents:
 
    INSTALL
+   EXPERIMENTS
    api
 
 
diff --git a/notebooks/evaluate-agents.ipynb b/notebooks/evaluate-agents.ipynb
index 3438699..58f3bea 100644
--- a/notebooks/evaluate-agents.ipynb
+++ b/notebooks/evaluate-agents.ipynb
@@ -19,11 +19,14 @@
     "import os\n",
     "from pathlib import Path\n",
     "\n",
+    "import pandas as pd\n",
+    "import numpy as np\n",
+    "\n",
     "import mlflow\n",
     "\n",
     "import matplotlib.pyplot as plt\n",
     "\n",
-    "from clovek_ne_jezi_se.agents import RandomPlayer"
+    "from clovek_ne_jezi_se.agents import FurthestAlongPlayer, RandomPlayer"
    ]
   },
   {
@@ -62,6 +65,15 @@
     "        \" and params.main_board_section_length = 1\"\n",
     "    )\n",
     "\n",
+    "\n",
+    "def get_int_value_counts_from_floats(series_of_floats: pd.Series) -> pd.Series:\n",
+    "    counts = series_of_floats.value_counts(dropna=True)\n",
+    "    # Convert index to ints\n",
+    "    counts.index = counts.index.astype(int)\n",
+    "    return counts\n",
+    "\n",
+    "# Tests\n",
+    "\n",
     "def test_dict_to_conjunctive_filter_equality_string():\n",
     "    player_names = ['red', 'blue', 'green', 'yellow']\n",
     "    players = [RandomPlayer(name=name, print_game_state=False) for name in player_names]\n",
@@ -83,8 +95,17 @@
     "        assert filter_string == expected\n",
     "    except AssertionError as err:\n",
     "        print(err, filter_string, ' is not ', expected)\n",
+    "   \n",
+    "\n",
+    "def test_get_int_value_counts_from_floats():\n",
+    "    series = pd.Series([np.nan, 3.0, 0.0, 0.0])\n",
+    "    expected = pd.Series(data=[2, 1], index=[0, 3])\n",
+    "    res = get_int_value_counts_from_floats(series)\n",
+    "    pd.testing.assert_series_equal(res, expected)\n",
     "    \n",
-    "test_dict_to_conjunctive_filter_equality_string()"
+    "    \n",
+    "test_dict_to_conjunctive_filter_equality_string()\n",
+    "test_get_int_value_counts_from_floats()"
    ]
   },
   {
@@ -101,32 +122,22 @@
   {
    "cell_type": "code",
    "execution_count": 3,
-   "metadata": {
-    "scrolled": true
-   },
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "1    31\n",
-       "0    24\n",
-       "3    24\n",
-       "2    21\n",
-       "Name: metrics.winner_idx, dtype: int64"
-      ]
-     },
-     "execution_count": 3,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "metadata": {},
+   "outputs": [],
    "source": [
-    "player_names = ['red', 'blue', 'green', 'yellow']\n",
-    "players = [RandomPlayer(name=name, print_game_state=False) for name in player_names]\n",
-    "\n",
     "main_board_section_length = 1\n",
     "pieces_per_player = 4\n",
-    "number_of_dice_faces = 6\n",
+    "number_of_dice_faces = 6"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "player_names = ['red', 'blue', 'green', 'yellow']\n",
+    "players = [RandomPlayer(name=name, print_game_state=False) for name in player_names]\n",
     "agents = [player.__class__.__name__ for player in players]\n",
     "\n",
     "run_params = dict(\n",
@@ -141,21 +152,14 @@
     "os.chdir(os.environ['RUNS_PARENT_DIR'])\n",
     "runs = mlflow.search_runs(filter_string=filter_string)\n",
     "\n",
-    "# Remove runs with no winner\n",
-    "mask_winner_isna = runs['metrics.winner_idx'].isna()\n",
-    "runs = runs[~mask_winner_isna]\n",
-    "winner_idxes = runs['metrics.winner_idx'].astype(int)\n",
-    "\n",
-    "# Calculate winner counts\n",
-    "winner_counts = winner_idxes.value_counts()\n",
+    "winner_counts = get_int_value_counts_from_floats(runs['metrics.winner_idx'])\n",
     "names = [agents[idx] + '_' + str(idx) for idx in winner_counts.index]\n",
-    "counts = winner_counts.values.astype(int)\n",
-    "winner_counts"
+    "counts = winner_counts.values"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
@@ -177,6 +181,56 @@
     "plt.title(f'Win count per agent after {winner_counts.sum()} games')\n",
     "plt.xticks(names, names);"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 576x216 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "player_names = ['blue', 'green', 'yellow']\n",
+    "players = (\n",
+    "    [FurthestAlongPlayer(name='red')] + \n",
+    "    [RandomPlayer(name=name, print_game_state=False) for name in player_names]\n",
+    ")\n",
+    "\n",
+    "agents = [player.__class__.__name__ for player in players]\n",
+    "\n",
+    "run_params = dict(\n",
+    "    agents=','.join(agents),\n",
+    "    main_board_section_length=main_board_section_length,\n",
+    "    pieces_per_player=pieces_per_player,\n",
+    "    number_of_dice_faces=number_of_dice_faces\n",
+    ")\n",
+    "filter_string = dict_to_conjunctive_filter_equality_string(run_params, 'params')\n",
+    "\n",
+    "# mlflow.search_runs seemingly must be run from parent directory of mlruns\n",
+    "os.chdir(os.environ['RUNS_PARENT_DIR'])\n",
+    "runs = mlflow.search_runs(filter_string=filter_string)\n",
+    "\n",
+    "winner_counts = get_int_value_counts_from_floats(runs['metrics.winner_idx'])\n",
+    "names = [agents[idx] + '_' + str(idx) for idx in winner_counts.index]\n",
+    "counts = winner_counts.values\n",
+    "\n",
+    "# Plot\n",
+    "plt.figure(figsize=(8,3))\n",
+    "plt.bar(names, counts)\n",
+    "plt.title(f'Win count per agent after {winner_counts.sum()} games')\n",
+    "plt.xticks(names, names);"
+   ]
   }
  ],
  "metadata": {
diff --git a/scripts/play.py b/scripts/play.py
index 397a750..2998a94 100644
--- a/scripts/play.py
+++ b/scripts/play.py
@@ -1,19 +1,19 @@
 import mlflow
-from mlflow.tracking import MlflowClient
-
 
 from clovek_ne_jezi_se.client import Client
-from clovek_ne_jezi_se.agents import HumanPlayer, RandomPlayer
+from clovek_ne_jezi_se.agents import RandomPlayer, FurthestAlongPlayer
+
 
-# TODO put in config file (json)
-player_names = ['red', 'blue', 'green', 'yellow']
+furthest_along_player = FurthestAlongPlayer(name='red')
 
+random_player_names = ['blue', 'green', 'yellow']
 random_players = [
-    RandomPlayer(name=name, print_game_state=False) for name in player_names
+    RandomPlayer(name=name, print_game_state=False)
+    for name in random_player_names
 ]
-players = random_players
+players = [furthest_along_player] + random_players
 
-n_runs = 96
+n_runs = 100
 main_board_section_length = 1
 pieces_per_player = 4
 number_of_dice_faces = 6
