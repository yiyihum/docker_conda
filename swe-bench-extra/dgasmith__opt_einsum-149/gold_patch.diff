diff --git a/opt_einsum/backends/jax.py b/opt_einsum/backends/jax.py
index 6bc1a1f..aefd941 100644
--- a/opt_einsum/backends/jax.py
+++ b/opt_einsum/backends/jax.py
@@ -13,18 +13,18 @@ _JAX = None
 
 
 def _get_jax_and_to_jax():
-  global _JAX
-  if _JAX is None:
-    import jax
+    global _JAX
+    if _JAX is None:
+        import jax
 
-    @to_backend_cache_wrap
-    @jax.jit
-    def to_jax(x):
-        return x
+        @to_backend_cache_wrap
+        @jax.jit
+        def to_jax(x):
+            return x
 
-    _JAX = jax, to_jax
+        _JAX = jax, to_jax
 
-  return _JAX
+    return _JAX
 
 
 def build_expression(_, expr):  # pragma: no cover
diff --git a/opt_einsum/contract.py b/opt_einsum/contract.py
index 6e7550a..1403f98 100644
--- a/opt_einsum/contract.py
+++ b/opt_einsum/contract.py
@@ -51,16 +51,22 @@ class PathInfo(object):
             "  Complete contraction:  {}\n".format(self.eq), "         Naive scaling:  {}\n".format(len(self.indices)),
             "     Optimized scaling:  {}\n".format(max(self.scale_list)), "      Naive FLOP count:  {:.3e}\n".format(
                 self.naive_cost), "  Optimized FLOP count:  {:.3e}\n".format(self.opt_cost),
-            "   Theoretical speedup:  {:3.3f}\n".format(self.speedup),
+            "   Theoretical speedup:  {:.3e}\n".format(self.speedup),
             "  Largest intermediate:  {:.3e} elements\n".format(self.largest_intermediate), "-" * 80 + "\n",
             "{:>6} {:>11} {:>22} {:>37}\n".format(*header), "-" * 80
         ]
 
         for n, contraction in enumerate(self.contraction_list):
             inds, idx_rm, einsum_str, remaining, do_blas = contraction
-            remaining_str = ",".join(remaining) + "->" + self.output_subscript
-            path_run = (self.scale_list[n], do_blas, einsum_str, remaining_str)
-            path_print.append("\n{:>4} {:>14} {:>22} {:>37}".format(*path_run))
+
+            if remaining is not None:
+                remaining_str = ",".join(remaining) + "->" + self.output_subscript
+            else:
+                remaining_str = "..."
+            size_remaining = max(0, 56 - max(22, len(einsum_str)))
+
+            path_run = (self.scale_list[n], do_blas, einsum_str, remaining_str, size_remaining)
+            path_print.append("\n{:>4} {:>14} {:>22}    {:>{}}".format(*path_run))
 
         return "".join(path_print)
 
@@ -303,7 +309,14 @@ def contract_path(*operands, **kwargs):
 
         einsum_str = ",".join(tmp_inputs) + "->" + idx_result
 
-        contraction = (contract_inds, idx_removed, einsum_str, input_list[:], do_blas)
+        # for large expressions saving the remaining terms at each step can
+        # incur a large memory footprint - and also be messy to print
+        if len(input_list) <= 20:
+            remaining = tuple(input_list)
+        else:
+            remaining = None
+
+        contraction = (contract_inds, idx_removed, einsum_str, remaining, do_blas)
         contraction_list.append(contraction)
 
     opt_cost = sum(cost_list)
@@ -529,7 +542,7 @@ def _core_contract(operands, contraction_list, backend='auto', evaluate_constant
 
     # Start contraction loop
     for num, contraction in enumerate(contraction_list):
-        inds, idx_rm, einsum_str, remaining, blas_flag = contraction
+        inds, idx_rm, einsum_str, _, blas_flag = contraction
 
         # check if we are performing the pre-pass of an expression with constants,
         #     if so, break out upon finding first non-constant (None) operand
