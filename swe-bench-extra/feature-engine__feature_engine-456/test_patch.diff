diff --git a/tests/test_encoding/test_count_frequency_encoder.py b/tests/test_encoding/test_count_frequency_encoder.py
index b47fd97..a4b88f8 100644
--- a/tests/test_encoding/test_count_frequency_encoder.py
+++ b/tests/test_encoding/test_count_frequency_encoder.py
@@ -1,3 +1,6 @@
+import warnings
+
+from numpy import nan
 import pandas as pd
 import pytest
 
@@ -111,23 +114,22 @@ def test_automatically_select_variables_encode_with_frequency(df_enc):
     pd.testing.assert_frame_equal(X, transf_df)
 
 
-def test_error_if_encoding_method_not_permitted_value():
+@pytest.mark.parametrize("enc_method", ["arbitrary", False, 1])
+def test_error_if_encoding_method_not_permitted_value(enc_method):
     with pytest.raises(ValueError):
-        CountFrequencyEncoder(encoding_method="arbitrary")
+        CountFrequencyEncoder(encoding_method=enc_method)
 
 
-def test_error_if_input_df_contains_categories_not_present_in_fit_df(
-    df_enc, df_enc_rare
-):
-    # test case 3: when dataset to be transformed contains categories not present in
-    # training dataset
+def test_warning_when_df_contains_unseen_categories(df_enc, df_enc_rare):
+    # dataset to be transformed contains categories not present in
+    # training dataset (unseen categories), errors set to ignore.
 
     msg = "During the encoding, NaN values were introduced in the feature(s) var_A."
 
-    # check for warning when rare_labels equals 'ignore'
+    # check for warning when errors equals 'ignore'
+    encoder = CountFrequencyEncoder(errors="ignore")
+    encoder.fit(df_enc)
     with pytest.warns(UserWarning) as record:
-        encoder = CountFrequencyEncoder(errors="ignore")
-        encoder.fit(df_enc)
         encoder.transform(df_enc_rare)
 
     # check that only one warning was raised
@@ -135,32 +137,140 @@ def test_error_if_input_df_contains_categories_not_present_in_fit_df(
     # check that the message matches
     assert record[0].message.args[0] == msg
 
-    # check for error when rare_labels equals 'raise'
-    with pytest.raises(ValueError) as record:
-        encoder = CountFrequencyEncoder(errors="raise")
 
-        encoder.fit(df_enc)
+def test_error_when_df_contains_unseen_categories(df_enc, df_enc_rare):
+    # dataset to be transformed contains categories not present in
+    # training dataset (unseen categories), errors set to raise.
+
+    msg = "During the encoding, NaN values were introduced in the feature(s) var_A."
+
+    encoder = CountFrequencyEncoder(errors="raise")
+    encoder.fit(df_enc)
+
+    # check for exception when errors equals 'raise'
+    with pytest.raises(ValueError) as record:
         encoder.transform(df_enc_rare)
 
     # check that the error message matches
     assert str(record.value) == msg
 
+    # check for no error and no warning when errors equals 'encode'
+    with warnings.catch_warnings():
+        warnings.simplefilter("error")
+        encoder = CountFrequencyEncoder(errors="encode")
+        encoder.fit(df_enc)
+        encoder.transform(df_enc_rare)
+
+
+def test_no_error_triggered_when_df_contains_unseen_categories_and_errors_is_encode(
+    df_enc, df_enc_rare
+):
+    # dataset to be transformed contains categories not present in
+    # training dataset (unseen categories).
+
+    # check for no error and no warning when errors equals 'encode'
+    warnings.simplefilter("error")
+    encoder = CountFrequencyEncoder(errors="encode")
+    encoder.fit(df_enc)
+    with warnings.catch_warnings():
+        encoder.transform(df_enc_rare)
 
-def test_fit_raises_error_if_df_contains_na(df_enc_na):
+
+@pytest.mark.parametrize("errors", ["raise", "ignore", "encode"])
+def test_fit_raises_error_if_df_contains_na(errors, df_enc_na):
     # test case 4: when dataset contains na, fit method
+    encoder = CountFrequencyEncoder(errors=errors)
     with pytest.raises(ValueError):
-        encoder = CountFrequencyEncoder()
         encoder.fit(df_enc_na)
 
 
-def test_transform_raises_error_if_df_contains_na(df_enc, df_enc_na):
+@pytest.mark.parametrize("errors", ["raise", "ignore", "encode"])
+def test_transform_raises_error_if_df_contains_na(errors, df_enc, df_enc_na):
     # test case 4: when dataset contains na, transform method
+    encoder = CountFrequencyEncoder(errors=errors)
+    encoder.fit(df_enc)
     with pytest.raises(ValueError):
-        encoder = CountFrequencyEncoder()
-        encoder.fit(df_enc)
         encoder.transform(df_enc_na)
 
 
+def test_zero_encoding_for_new_categories():
+    df_fit = pd.DataFrame({
+        "col1": ["a", "a", "b", "a", "c"],
+        "col2": ["1", "2", "3", "1", "2"]
+    })
+    df_transf = pd.DataFrame({
+        "col1": ["a", "d", "b", "a", "c"],
+        "col2": ["1", "2", "3", "1", "4"]
+    })
+    encoder = CountFrequencyEncoder(errors="encode").fit(df_fit)
+    result = encoder.transform(df_transf)
+
+    # check that no NaNs are added
+    assert pd.isnull(result).sum().sum() == 0
+
+    # check that the counts are correct for both new and old
+    expected_result = pd.DataFrame({
+        "col1": [3, 0, 1, 3, 1],
+        "col2": [2, 2, 1, 2, 0]
+    })
+    pd.testing.assert_frame_equal(result, expected_result)
+
+
+def test_zero_encoding_for_unseen_categories_if_errors_is_encode():
+    df_fit = pd.DataFrame(
+        {"col1": ["a", "a", "b", "a", "c"], "col2": ["1", "2", "3", "1", "2"]}
+    )
+    df_transform = pd.DataFrame(
+        {"col1": ["a", "d", "b", "a", "c"], "col2": ["1", "2", "3", "1", "4"]}
+    )
+
+    # count encoding
+    encoder = CountFrequencyEncoder(errors="encode").fit(df_fit)
+    result = encoder.transform(df_transform)
+
+    # check that no NaNs are added
+    assert pd.isnull(result).sum().sum() == 0
+
+    # check that the counts are correct
+    expected_result = pd.DataFrame({"col1": [3, 0, 1, 3, 1], "col2": [2, 2, 1, 2, 0]})
+    pd.testing.assert_frame_equal(result, expected_result)
+
+    # with frequency
+    encoder = CountFrequencyEncoder(encoding_method="frequency", errors="encode").fit(
+        df_fit
+    )
+    result = encoder.transform(df_transform)
+
+    # check that no NaNs are added
+    assert pd.isnull(result).sum().sum() == 0
+
+    # check that the frequencies are correct
+    expected_result = pd.DataFrame(
+        {"col1": [0.6, 0, 0.2, 0.6, 0.2], "col2": [0.4, 0.4, 0.2, 0.4, 0]}
+    )
+    pd.testing.assert_frame_equal(result, expected_result)
+
+
+def test_nan_encoding_for_new_categories_if_errors_is_ignore():
+    df_fit = pd.DataFrame(
+        {"col1": ["a", "a", "b", "a", "c"], "col2": ["1", "2", "3", "1", "2"]}
+    )
+    df_transf = pd.DataFrame(
+        {"col1": ["a", "d", "b", "a", "c"], "col2": ["1", "2", "3", "1", "4"]}
+    )
+    encoder = CountFrequencyEncoder(errors="ignore").fit(df_fit)
+    result = encoder.transform(df_transf)
+
+    # check that no NaNs are added
+    assert pd.isnull(result).sum().sum() == 2
+
+    # check that the counts are correct for both new and old
+    expected_result = pd.DataFrame(
+        {"col1": [3, nan, 1, 3, 1], "col2": [2, 2, 1, 2, nan]}
+    )
+    pd.testing.assert_frame_equal(result, expected_result)
+
+
 def test_ignore_variable_format_with_frequency(df_vartypes):
     encoder = CountFrequencyEncoder(
         encoding_method="frequency", variables=None, ignore_format=True
@@ -252,6 +362,7 @@ def test_variables_cast_as_category(df_enc_category_dtypes):
     assert X["var_A"].dtypes == float
 
 
-def test_error_if_rare_labels_not_permitted_value():
+@pytest.mark.parametrize("errors", ["empanada", False, 1])
+def test_exception_if_errors_gets_not_permitted_value(errors):
     with pytest.raises(ValueError):
-        CountFrequencyEncoder(errors="empanada")
+        CountFrequencyEncoder(errors=errors)
