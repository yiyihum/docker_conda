diff --git a/cincoconfig/abc.py b/cincoconfig/abc.py
index 9da847f..f433e84 100644
--- a/cincoconfig/abc.py
+++ b/cincoconfig/abc.py
@@ -111,13 +111,52 @@ class Field:  # pylint: disable=too-many-instance-attributes
 
     Each Field subclass can define a class or instance level ``storage_type`` which holds the
     annotation of the value being stored in memory.
+
+    .. _field-env-variables:
+
+    **Environment Variables**
+
+    Fields can load their default value from an environment variable. The Schema and Field accept
+    an ``env`` argument in the constructor that controls whether and how environment variables are
+    loaded. The default behavior is to not load any environment variables and to honor the
+    :attr:`Field.default` value.
+
+    There are two ways to load a field's default value from an environment variable.
+
+    - ``Schema.env``: Provide ``True`` or a string.
+    - ``Field.env``: Provide ``True`` or a string.
+
+    When ``Schema.env`` or ``Field.env`` is ``None`` (the default), the environment variable
+    configuration is inherited from the parent schema. A value of ``True`` will load the the
+    field's default value from an autogenerated environment variable name, based on the field's
+    full path. For example:
+
+    .. code-block:: python
+
+        schema = Schema(env=True)
+        schema.mode = ApplicationModeField(env="APP_MODE")
+        schema.port = PortField(env=False)
+
+        schema.db.host = HostnameField()
+
+        schema.auth = Schema(env="SECRET")
+        schema.auth.username = StringField()
+
+    - The top-level schema is configured to autogenerate and load environment variables for all
+      fields.
+    - ``mode`` is loaded from the ``APP_MODE`` environment variable.
+    - ``port`` is not loaded from any the environment variabale.
+    - ``db.host`` is loaded from the ``DB_HOST`` environment variable.
+    - The ``auth`` schema has a environment variable prefix of ``SECRET``. All children and nested
+      fields/schemas will start with ``SECRET_``.
+    - The ``auth.username`` field is loaded from the ``SECRET_USERNAME`` environment variable.
     '''
     storage_type = Any
 
     def __init__(self, *, name: str = None, key: str = None, required: bool = False,
                  default: Union[Callable, Any] = None,
                  validator: Callable[['BaseConfig', Any], Any] = None, sensitive: bool = False,
-                 description: str = None, help: str = None):
+                 description: str = None, help: str = None, env: Union[bool, str] = None):
         '''
         All builtin Fields accept the following keyword parameters.
 
@@ -140,6 +179,7 @@ class Field:  # pylint: disable=too-many-instance-attributes
         self.sensitive = sensitive
         self.description = description
         self.help = help.strip() if help else None
+        self.env = env
 
     @property
     def short_help(self) -> Optional[str]:
@@ -236,14 +276,43 @@ class Field:  # pylint: disable=too-many-instance-attributes
         '''
         self.key = key
 
-    def __setdefault__(self, cfg: 'BaseConfig'):
+        if self.env is False:
+            return
+
+        if self.env is True or (self.env is None and isinstance(schema._env_prefix, str)):
+            # Set our environment variable name based on the schema's prefix and our key
+            if isinstance(schema._env_prefix, str) and schema._env_prefix:
+                prefix = schema._env_prefix + '_'
+            else:
+                prefix = ''
+
+            self.env = prefix + self.key.upper()
+
+    def __setdefault__(self, cfg: 'BaseConfig') -> None:
         '''
         Set the default value of the field in the config. This is called when the config is first
         created.
 
         :param cfg: current config
         '''
-        cfg._data[self.key] = self.default
+        value = None
+
+        if isinstance(self.env, str) and self.env:
+            env_value = os.environ.get(self.env)
+            if env_value:
+                try:
+                    env_value = self.validate(cfg, env_value)
+                except ValidationError:
+                    raise
+                except Exception as exc:
+                    raise ValidationError(cfg, self, exc) from exc
+                else:
+                    value = env_value
+
+        if value is None:
+            value = self.default
+
+        cfg._data[self.key] = value
 
     def to_python(self, cfg: 'BaseConfig', value: Any) -> Any:
         '''
@@ -345,15 +414,19 @@ class BaseSchema:
     '''
     storage_type = 'BaseSchema'
 
-    def __init__(self, key: str = None, dynamic: bool = False):
+    def __init__(self, key: str = None, dynamic: bool = False, env: Union[str, bool] = None):
         '''
         :param key: the schema key, only used for sub-schemas, and stored in the instance as
             *_key*
         :param dynamic: the schema is dynamic and can contain fields not originally specified in
             the schema and stored in the instance as *_dynamic*
+        :param env: the environment variable prefix for this schema and all children schemas, for
+            information, see :ref:`Field Environment Variables <field-env-variables>`
         '''
         self._key = key
         self._dynamic = dynamic
+        self._env_prefix = '' if env is True else env
+
         self._fields = OrderedDict()  # type: Dict[str, SchemaField]
         self.__post_init__()
 
@@ -370,6 +443,14 @@ class BaseSchema:
         '''
         self._key = key
 
+        if self._env_prefix is False:
+            return
+
+        if self._env_prefix is None and isinstance(parent._env_prefix, str):
+            # Set our environment variable prefix to be "{parent}_{key}"
+            prefix = (parent._env_prefix + '_') if parent._env_prefix else ''
+            self._env_prefix = prefix + self._key.upper()
+
     def _add_field(self, key: str, field: SchemaField) -> SchemaField:
         '''
         Add a field to the schema. This method will call ``field.__setkey__(self, key)``.
@@ -379,6 +460,7 @@ class BaseSchema:
         self._fields[key] = field
         if isinstance(field, (Field, BaseSchema)):
             field.__setkey__(self, key)
+
         return field
 
     def _get_field(self, key: str) -> Optional[SchemaField]:
diff --git a/cincoconfig/config.py b/cincoconfig/config.py
index 8338c80..be7cc90 100644
--- a/cincoconfig/config.py
+++ b/cincoconfig/config.py
@@ -127,7 +127,7 @@ class Schema(BaseSchema):
         '''
         field = self._fields.get(name)
         if field is None:
-            field = self._fields[name] = Schema(name)
+            field = self._add_field(name, Schema())
         return field
 
     def __iter__(self) -> Iterator[Tuple[str, SchemaField]]:
@@ -662,6 +662,9 @@ class Config(BaseConfig):
         for key, value in tree.items():
             field = self._get_field(key)
             if isinstance(field, Field):
+                if isinstance(field.env, str) and field.env and os.environ.get(field.env):
+                    continue
+
                 value = field.to_python(self, value)
 
             self.__setattr__(key, value)
diff --git a/cincoconfig/version.py b/cincoconfig/version.py
index ef7eb44..a71c5c7 100644
--- a/cincoconfig/version.py
+++ b/cincoconfig/version.py
@@ -1,1 +1,1 @@
-__version__ = '0.6.0'
+__version__ = '0.7.0'

