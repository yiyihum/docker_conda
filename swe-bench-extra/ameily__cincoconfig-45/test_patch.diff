diff --git a/tests/test_baseschema.py b/tests/test_baseschema.py
index 579d216..6b17e63 100644
--- a/tests/test_baseschema.py
+++ b/tests/test_baseschema.py
@@ -6,7 +6,7 @@ class TestBaseSchema:
 
     def test_setkey(self):
         schema = BaseSchema()
-        schema.__setkey__(None, 'hello')
+        schema.__setkey__(BaseSchema(), 'hello')
         assert schema._key == 'hello'
 
     def test_add_field_field(self):
@@ -35,3 +35,25 @@ class TestBaseSchema:
     def test_get_field_no_exists(self):
         schema = BaseSchema()
         assert schema._get_field('hello') is None
+
+    def test_env_true(self):
+        schema = BaseSchema(env=True)
+        assert schema._env_prefix == '' and isinstance(schema._env_prefix, str)
+
+    def test_setkey_inherit_env(self):
+        schema = BaseSchema(env=True)
+        child = BaseSchema()
+        child.__setkey__(schema, 'child')
+        assert child._env_prefix == 'CHILD'
+
+    def test_setkey_inherit_env_append(self):
+        schema = BaseSchema(env='ASDF')
+        child = BaseSchema()
+        child.__setkey__(schema, 'child')
+        assert child._env_prefix == 'ASDF_CHILD'
+
+    def test_setkey_env_false(self):
+        schema = BaseSchema(env='ASDF')
+        child = BaseSchema(env=False)
+        child.__setkey__(schema, 'child')
+        assert child._env_prefix is False
diff --git a/tests/test_config.py b/tests/test_config.py
index 255e8c3..b97e085 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -1,4 +1,5 @@
 import argparse
+import os
 from unittest.mock import MagicMock, patch, mock_open
 
 import pytest
@@ -325,6 +326,17 @@ class TestConfig:
         config.load_tree({'x': 1})
         mock_validate.assert_called_once_with()
 
+    @patch('cincoconfig.config.os')
+    def test_load_tree_ignore_env(self, mock_os):
+        env = mock_os.environ.get.return_value = object()
+        schema = Schema()
+        schema.x = Field(env='ASDF')
+        cfg = schema()
+        cfg._data = {'x': 'qwer'}
+        cfg.load_tree({'x': 'asdf'})
+        assert cfg._data == {'x': 'qwer'}
+        mock_os.environ.get.assert_called_once_with('ASDF')
+
     def test_validator(self):
         validator = MagicMock()
         schema = Schema()
diff --git a/tests/test_fields/test_field.py b/tests/test_fields/test_field.py
index b216784..ae5acad 100644
--- a/tests/test_fields/test_field.py
+++ b/tests/test_fields/test_field.py
@@ -4,10 +4,11 @@
 # This file is subject to the terms and conditions defined in the file 'LICENSE', which is part of
 # this source code package.
 #
+import os
 from unittest.mock import patch, MagicMock
 import pytest
 
-from cincoconfig.abc import Field
+from cincoconfig.abc import Field, BaseSchema, BaseConfig, ValidationError
 
 
 class MockConfig:
@@ -16,6 +17,7 @@ class MockConfig:
         self._data = data or {}
         self._parent = parent
         self._key = key
+        self._schema = BaseSchema()
 
     def _full_path(self):
         return ''
@@ -54,7 +56,7 @@ class TestBaseField:
 
     def test_setkey(self):
         field = Field()
-        field.__setkey__(self.cfg, 'key')
+        field.__setkey__(self.cfg._schema, 'key')
         assert field.key == 'key'
 
     def test_setdefault(self):
@@ -152,3 +154,85 @@ class TestBaseField:
         field = Field(help='\n\nfirst\nsecond\nthird.\n\nmore\n\n')
         assert field.short_help == 'first\nsecond\nthird.'
         assert field.help == 'first\nsecond\nthird.\n\nmore'
+
+    def test_env_true(self):
+        schema = BaseSchema()
+        field = Field(env=True)
+        field.__setkey__(schema, 'field')
+        assert field.env == 'FIELD'
+
+    def test_setkey_inherit_env(self):
+        schema = BaseSchema(env=True)
+        field = Field()
+        field.__setkey__(schema, 'field')
+        assert field.env == 'FIELD'
+
+    def test_setkey_inherit_env_append(self):
+        schema = BaseSchema(env='APP')
+        field = Field()
+        field.__setkey__(schema, 'field')
+        assert field.env == 'APP_FIELD'
+
+    def test_setkey_env_false(self):
+        schema = BaseSchema(env=True)
+        field = Field(env=False)
+        field.__setkey__(schema, 'field')
+        assert field.env is False
+
+    @patch.object(os.environ, 'get')
+    def test_setdefault_env_exists(self, mock_environ_get):
+        retval = mock_environ_get.return_value = object()
+        cfg = BaseConfig(schema=BaseSchema())
+        field = Field(env='ASDF', key='field')
+        field.__setdefault__(cfg)
+        assert cfg._data == {'field': retval}
+        mock_environ_get.assert_called_once_with('ASDF')
+
+    @patch.object(os.environ, 'get')
+    def test_setdefault_env_exists_valid(self, mock_environ_get):
+        env = mock_environ_get.return_value = object()
+        retval = object()
+        cfg = BaseConfig(schema=BaseSchema())
+        field = Field(env='ASDF', key='field')
+        field.validate = MagicMock(return_value=retval)
+        field.__setdefault__(cfg)
+        field.validate.assert_called_once_with(cfg, env)
+        assert cfg._data == {'field': retval}
+
+    @patch.object(os.environ, 'get')
+    def test_setdefault_env_exists_invalid(self, mock_environ_get):
+        env = mock_environ_get.return_value = object()
+        retval = object()
+        cfg = BaseConfig(schema=BaseSchema())
+        field = Field(env='ASDF', key='field')
+        field.validate = MagicMock(side_effect=ValueError())
+        field._default = retval
+        with pytest.raises(ValidationError):
+            field.__setdefault__(cfg)
+
+        field.validate.assert_called_once_with(cfg, env)
+
+    @patch.object(os.environ, 'get')
+    def test_setdefault_env_exists_invalid_validationerror(self, mock_environ_get):
+        env = mock_environ_get.return_value = object()
+        retval = object()
+        cfg = BaseConfig(schema=BaseSchema())
+        field = Field(env='ASDF', key='field')
+        err = ValidationError(cfg, field, ValueError('asdf'))
+        field.validate = MagicMock(side_effect=err)
+        field._default = retval
+        with pytest.raises(ValidationError) as exc:
+            field.__setdefault__(cfg)
+
+        assert exc.value is err
+
+    @patch.object(os.environ, 'get')
+    def test_setdefault_env_not_exists(self, mock_environ_get):
+        mock_environ_get.return_value = None
+        retval = object()
+        cfg = BaseConfig(schema=BaseSchema())
+        field = Field(env='ASDF', key='field')
+        field._default = retval
+        field.__setdefault__(cfg)
+        assert cfg._data == {'field': retval}
+        mock_environ_get.assert_called_once_with('ASDF')
diff --git a/tests/test_fields/test_string.py b/tests/test_fields/test_string.py
index 9f9207d..858d069 100644
--- a/tests/test_fields/test_string.py
+++ b/tests/test_fields/test_string.py
@@ -24,6 +24,7 @@ class MockSchema:
 
     def __init__(self):
         self._fields = {}
+        self._env_prefix = False
 
     def _add_field(self, name, field):
         self._fields[name] = field
diff --git a/tests/test_schema.py b/tests/test_schema.py
index 5ea55ba..074385e 100644
--- a/tests/test_schema.py
+++ b/tests/test_schema.py
@@ -116,6 +116,13 @@ class TestSchema:
         with pytest.raises(KeyError):
             y = schema['x.y']
 
+    def test_getattr_add_field(self):
+        schema = Schema()
+        mock_add_field = MagicMock(return_value=Schema())
+        object.__setattr__(schema, '_add_field', mock_add_field)
+        schema.x.y = 2
+        mock_add_field.assert_called_once()
+
     @patch('cincoconfig.config.ArgumentParser')
     def test_generate_argparse_parser(self, mock_argparse):
         parser = MagicMock()
