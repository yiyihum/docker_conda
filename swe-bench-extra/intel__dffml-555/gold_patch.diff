diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5a76e35f2..05e232829 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -11,6 +11,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
 - Doctestable examples to `operation/mapping.py`
 - load function in high_level API
 - Doctestable examples to `db` operations.
+- Source for parsing `.ini` file formats
 ### Changed
 - `Edit on Github` button now hidden for plugins.
 - Doctests now run via unittests
diff --git a/dffml/source/ini.py b/dffml/source/ini.py
new file mode 100644
index 000000000..9a7ddf0dd
--- /dev/null
+++ b/dffml/source/ini.py
@@ -0,0 +1,66 @@
+from configparser import ConfigParser
+
+from ..base import config
+from ..record import Record
+from .file import FileSource
+from .memory import MemorySource
+from ..util.data import parser_helper
+from ..util.entrypoint import entrypoint
+
+
+@config
+class INISourceConfig:
+    filename: str
+    readwrite: bool = False
+    allowempty: bool = False
+
+
+@entrypoint("ini")
+class INISource(FileSource, MemorySource):
+    """
+    Source to read files in .ini format.
+    """
+
+    CONFIG = INISourceConfig
+
+    async def load_fd(self, ifile):
+        # Creating an instance of configparser
+        parser = ConfigParser()
+        # Read from a file object
+        parser.read_file(ifile)
+        # Get all the sections present in the file
+        sections = parser.sections()
+
+        self.mem = {}
+
+        # Go over each section
+        for section in sections:
+            # Get data under each section as a dict
+            temp_dict = {}
+            for k, v in parser.items(section):
+                temp_dict[k] = parser_helper(v)
+            # Each section used as a record
+            self.mem[str(section)] = Record(
+                str(section), data={"features": temp_dict},
+            )
+
+        self.logger.debug("%r loaded %d sections", self, len(self.mem))
+
+    async def dump_fd(self, fd):
+        # Create an instance of configparser
+        parser = ConfigParser()
+
+        # Go over each section and record in mem
+        for section, record in self.mem.items():
+            # Get each section data as a dict
+            section_data = record.features()
+            if section not in parser.keys():
+                # If section does not exist add new section
+                parser.add_section(section)
+            # Set section data
+            parser[section] = section_data
+
+        # Write to the fileobject
+        parser.write(fd)
+
+        self.logger.debug("%r saved %d sections", self, len(self.mem))
diff --git a/setup.py b/setup.py
index d6b610728..0ec52f2a1 100644
--- a/setup.py
+++ b/setup.py
@@ -77,6 +77,7 @@ setup(
             "idx1 = dffml.source.idx1:IDX1Source",
             "idx3 = dffml.source.idx3:IDX3Source",
             "db = dffml.source.db:DbSource",
+            "ini = dffml.source.ini:INISource",
         ],
         "dffml.port": ["json = dffml.port.json:JSON"],
         "dffml.service.cli": ["dev = dffml.service.dev:Develop"],
