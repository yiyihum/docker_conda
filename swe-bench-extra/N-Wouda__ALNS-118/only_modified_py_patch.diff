diff --git a/alns/ALNS.py b/alns/ALNS.py
index 3ee933d..0154577 100644
--- a/alns/ALNS.py
+++ b/alns/ALNS.py
@@ -176,7 +176,7 @@ class ALNS:
 
         .. [2] S. Røpke and D. Pisinger (2006). A unified heuristic for a large
                class of vehicle routing problems with backhauls. *European
-               Journal of Operational Research*, 171: 750–775, 2006.
+               Journal of Operational Research*, 171: 750–775.
         """
         if len(self.destroy_operators) == 0 or len(self.repair_operators) == 0:
             raise ValueError("Missing destroy or repair operators.")
diff --git a/alns/accept/RecordToRecordTravel.py b/alns/accept/RecordToRecordTravel.py
index 2a6604e..7474d0f 100644
--- a/alns/accept/RecordToRecordTravel.py
+++ b/alns/accept/RecordToRecordTravel.py
@@ -135,7 +135,13 @@ class RecordToRecordTravel(AcceptanceCriterion):
         num_iters
             The number of iterations that the ALNS algorithm will run.
         method
-            Updating method. Default 'linear'.
+            The updating method, one of {'linear', 'exponential'}. Default
+            'linear'.
+
+        Raises
+        ------
+        ValueError
+            When the parameters do not meet requirements.
 
         Returns
         -------
@@ -156,11 +162,11 @@ class RecordToRecordTravel(AcceptanceCriterion):
 
         if method == "linear":
             step = (start_threshold - end_threshold) / num_iters
-        elif method == "exponential":
+        else:
             step = (end_threshold / start_threshold) ** (1 / num_iters)
 
         logger.info(
-            f"Autofit start_threshold {start_threshold:.2f}"
+            f"Autofit {method} RRT: start_threshold {start_threshold:.2f}, "
             f"end_threshold {end_threshold:.2f}, step {step:.2f}."
         )
 
diff --git a/alns/accept/SimulatedAnnealing.py b/alns/accept/SimulatedAnnealing.py
index 142f6a1..ba57ee1 100644
--- a/alns/accept/SimulatedAnnealing.py
+++ b/alns/accept/SimulatedAnnealing.py
@@ -102,7 +102,12 @@ class SimulatedAnnealing(AcceptanceCriterion):
 
     @classmethod
     def autofit(
-        cls, init_obj: float, worse: float, accept_prob: float, num_iters: int
+        cls,
+        init_obj: float,
+        worse: float,
+        accept_prob: float,
+        num_iters: int,
+        method: str = "exponential",
     ) -> "SimulatedAnnealing":
         """
         Returns an SA object with initial temperature such that there is a
@@ -118,20 +123,22 @@ class SimulatedAnnealing(AcceptanceCriterion):
         init_obj
             The initial solution objective.
         worse
-            Percentage (between 0 and 1) the candidate solution may be worse
-            than initial solution for it to be accepted with probability
+            Percentage (in (0, 1), exclusive) the candidate solution may be
+            worse than initial solution for it to be accepted with probability
             ``accept_prob``.
         accept_prob
-            Initial acceptance probability for a solution at most ``worse``
-            worse than the initial solution.
+            Initial acceptance probability (in [0, 1]) for a solution at most
+            ``worse`` worse than the initial solution.
         num_iters
             Number of iterations the ALNS algorithm will run.
+        method
+            The updating method, one of {'linear', 'exponential'}. Default
+            'exponential'.
 
         Raises
         ------
         ValueError
-            When ``worse`` not in [0, 1] or when ``accept_prob`` is not in
-            (0, 1).
+            When the parameters do not meet requirements.
 
         Returns
         -------
@@ -154,12 +161,22 @@ class SimulatedAnnealing(AcceptanceCriterion):
         if not (0 < accept_prob < 1):
             raise ValueError("accept_prob outside (0, 1) not understood.")
 
-        if num_iters < 0:
-            raise ValueError("Negative number of iterations not understood.")
+        if num_iters <= 0:
+            raise ValueError("Non-positive num_iters not understood.")
+
+        if method not in ["linear", "exponential"]:
+            raise ValueError("Method must be one of ['linear', 'exponential']")
 
         start_temp = -worse * init_obj / np.log(accept_prob)
-        step = (1 / start_temp) ** (1 / num_iters)
 
-        logger.info(f"Autofit start_temp {start_temp:.2f}, step {step:.2f}.")
+        if method == "linear":
+            step = (start_temp - 1) / num_iters
+        else:
+            step = (1 / start_temp) ** (1 / num_iters)
+
+        logger.info(
+            f"Autofit {method} SA: start_temp {start_temp:.2f}, "
+            f"step {step:.2f}."
+        )
 
-        return cls(start_temp, 1, step, method="exponential")
+        return cls(start_temp, 1, step, method=method)

