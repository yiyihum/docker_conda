diff --git a/.gitignore b/.gitignore
index fc8539e..1dc5815 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,6 +23,7 @@ var/
 *.egg-info/
 .installed.cfg
 *.egg
+venv/
 
 # PyInstaller
 #  Usually these files are written by a python script from a template
diff --git a/README.rst b/README.rst
index 6d94ba7..7ad3874 100644
--- a/README.rst
+++ b/README.rst
@@ -173,7 +173,15 @@ significantly violate the line length, you will receive a message that
 states what the actual limit is. This is inspired by Raymond Hettinger's
 `"Beyond PEP 8" talk <https://www.youtube.com/watch?v=wf-BqAjZb8M>`_ and
 highway patrol not stopping you if you drive < 5mph too fast. Disable
-E501 to avoid duplicate warnings.
+E501 to avoid duplicate warnings. Like E501, this error ignores long shebangs
+on the first line and urls or paths that are on their own line::
+
+  #! long shebang ignored
+
+  # https://some-super-long-domain-name.com/with/some/very/long/paths
+  url = (
+      "https://some-super-long-domain-name.com/with/some/very/long/paths"
+  )
 
 
 How to enable opinionated warnings
@@ -237,6 +245,11 @@ MIT
 Change Log
 ----------
 
+21.12.0
+~~~~~~~~~~
+
+* B950: Add same special cases as E501 (#213)
+
 21.11.29
 ~~~~~~~~~~
 
diff --git a/bugbear.py b/bugbear.py
index eab2b53..78c2ca3 100644
--- a/bugbear.py
+++ b/bugbear.py
@@ -67,8 +67,31 @@ class BugBearChecker:
         The following simple checks are based on the raw lines, not the AST.
         """
         for lineno, line in enumerate(self.lines, start=1):
+            # Special case: ignore long shebang (following pycodestyle).
+            if lineno == 1 and line.startswith("#!"):
+                continue
+
             length = len(line) - 1
             if length > 1.1 * self.max_line_length:
+                # Special case long URLS and paths to follow pycodestyle.
+                # Would use the `pycodestyle.maximum_line_length` directly but
+                # need to supply it arguments that are not available so chose
+                # to replicate instead.
+                chunks = line.split()
+
+                is_line_comment_url_path = len(chunks) == 2 and chunks[0] == "#"
+
+                just_long_url_path = len(chunks) == 1
+
+                num_leading_whitespaces = len(line) - len(chunks[-1])
+                too_many_leading_white_spaces = (
+                    num_leading_whitespaces >= self.max_line_length - 7
+                )
+
+                skip = is_line_comment_url_path or just_long_url_path
+                if skip and not too_many_leading_white_spaces:
+                    continue
+
                 yield B950(lineno, length, vars=(length, self.max_line_length))
 
     @classmethod
