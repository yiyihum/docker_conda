diff --git a/tests/database/test_filetable.py b/tests/database/test_filetable.py
index bdc04834..d95c182c 100644
--- a/tests/database/test_filetable.py
+++ b/tests/database/test_filetable.py
@@ -6,9 +6,10 @@ from os import mkdir, rmdir
 from os.path import abspath, dirname, join
 from time import time
 
-from pyiron_base._tests import PyironTestCase
+from pyiron_base._tests import PyironTestCase, ToyJob
 
 from pyiron_base.database.filetable import FileTable
+from pyiron_base.project.generic import Project
 
 
 class TestFileTable(PyironTestCase):
@@ -60,3 +61,30 @@ class TestFileTable(PyironTestCase):
             ft is another_ft,
             msg="New paths should create new FileTable instances"
         )
+
+    def test_job_table(self):
+        pr = Project(dirname(__file__) + "test_filetable_test_job_table")
+        job = pr.create_job(job_type=ToyJob, job_name="toy_1")
+        job.run()
+        self.assertEqual(len(pr.job_table()), 1)
+
+        with self.subTest("Check if the file table can see the job and see it once"):
+            ft = FileTable(index_from=pr.path)
+            self.assertEqual(
+                len(pr.job_table()),
+                len(ft._job_table),
+                msg="We expect to see exactly the same job(s) that is in the project's "
+                    "database job table"
+            )
+
+            ft.update()
+            self.assertEqual(
+                len(pr.job_table()),
+                len(ft._job_table),
+                msg="update is called in each _get_job_table call, and if path "
+                    "comparisons fail -- e.g. because you're on windows but pyiron "
+                    "Projects force all the paths to use \\ instead of /, then the "
+                    "update can (and was before the PR where this test got added) "
+                    "duplicate jobs in the job table."
+            )
+        pr.remove_jobs(recursive=True, progress=False, silently=True)
diff --git a/tests/project/test_maintenance.py b/tests/project/test_maintenance.py
new file mode 100644
index 00000000..ad08d3f6
--- /dev/null
+++ b/tests/project/test_maintenance.py
@@ -0,0 +1,74 @@
+import numpy as np
+from pyiron_base._tests import TestWithFilledProject
+from pyiron_base import GenericJob
+
+
+def _test_array(start=0):
+    return np.arange(start, start + 100, dtype=object).reshape(5, 20)
+
+
+class TestMaintenance(TestWithFilledProject):
+    def setUp(self) -> None:
+        super().setUp()
+        job: GenericJob = self.project["toy_1"]
+        job["user/some"] = _test_array(5)
+        job["user/some"] = _test_array()
+        self.initial_toy_1_hdf_file_size = job.project_hdf5.file_size(job.project_hdf5)
+
+    def _assert_setup(self):
+        job_hdf = self.project["toy_1"].project_hdf5
+        array = self.project["toy_1/user/some"]
+        self.assertEqual(array, _test_array())
+        self.assertAlmostEqual(
+            job_hdf.file_size(job_hdf), self.initial_toy_1_hdf_file_size
+        )
+
+    def _assert_hdf_rewrite(self):
+        job_hdf = self.project["toy_1"].project_hdf5
+        array = self.project["toy_1/user/some"]
+        self.assertEqual(array, _test_array())
+        self.assertLess(job_hdf.file_size(job_hdf), self.initial_toy_1_hdf_file_size)
+
+    def test_repository_status(self):
+        df = self.project.maintenance.get_repository_status()
+        self.assertIn(
+            "pyiron_base",
+            df.Module.values,
+            "Environment dependent, but pyiron_base should be in there!",
+        )
+
+    def test_local_defragment_storage(self):
+        self._assert_setup()
+        self.project.maintenance.local.defragment_storage()
+        self._assert_hdf_rewrite()
+
+    def test_update_base_to_current(self):
+        self._assert_setup()
+
+        with self.subTest("Version bigger 0"):
+            with self.assertRaises(ValueError):
+                self.project.maintenance.update.base_to_current("1.0.2")
+                self._assert_setup()
+
+        with self.subTest(msg="Version not smaller 4, no action expected!"):
+            self.project.maintenance.update.base_to_current("0.4.3")
+            self._assert_setup()
+
+        with self.subTest(msg="Version < 0.4: should run"):
+            self.project.maintenance.update.base_to_current("0.3.999")
+            self._assert_hdf_rewrite()
+
+    def test_update_v03_to_v04_None(self):
+        self._assert_setup()
+        self.project.maintenance.update.base_v0_3_to_v0_4()
+        self._assert_hdf_rewrite()
+
+    def test_update_v03_to_v04_self(self):
+        self._assert_setup()
+        self.project.maintenance.update.base_v0_3_to_v0_4(project=self.project)
+        self._assert_hdf_rewrite()
+
+    def test_update_v03_to_v04_str(self):
+        self._assert_setup()
+        self.project.maintenance.update.base_v0_3_to_v0_4(project=self.project.path)
+        self._assert_hdf_rewrite()
diff --git a/tests/table/test_datamining.py b/tests/table/test_datamining.py
index 3d99c843..76e33bf0 100644
--- a/tests/table/test_datamining.py
+++ b/tests/table/test_datamining.py
@@ -5,8 +5,10 @@
 import unittest
 import numpy as np
 
+import pyiron_base
 from pyiron_base._tests import TestWithProject, ToyJob
 
+
 class TestProjectData(TestWithProject):
 
     @classmethod
@@ -21,7 +23,7 @@ class TestProjectData(TestWithProject):
 
     def setUp(self):
         super().setUp()
-        self.table = self.project.create.table('test_table')
+        self.table: pyiron_base.TableJob = self.project.create.table('test_table')
         self.table.filter_function = lambda j: j.name in ["test_a", "test_b"]
         self.table.add['name'] = lambda j: j.name
         self.table.add['array'] = lambda j: np.arange(8)
@@ -30,6 +32,10 @@ class TestProjectData(TestWithProject):
     def tearDown(self):
         self.project.remove_job(self.table.name)
 
+    def test_analysis_project(self):
+        self.assertIs(self.project, self.table.analysis_project)
+        self.assertEqual(self.project.path, self.project.load(self.table.name).analysis_project.path)
+
     def test_filter(self):
         """Filter functions should restrict jobs included in the table."""
 
