diff --git a/docs/adapters.rst b/docs/adapters.rst
index 7f7b29f..431085b 100644
--- a/docs/adapters.rst
+++ b/docs/adapters.rst
@@ -51,7 +51,7 @@ For domain wide access you need to create a service account. Make sure that the
     connection = connect(
         ":memory:",
         adapter_kwargs={
-            "gsheetaspi": {
+            "gsheetsapi": {
                 # "service_account_file": "/path/to/credentials.json",
                 "service_account_info": {
                     "type": "service_account",
diff --git a/src/shillelagh/backends/apsw/db.py b/src/shillelagh/backends/apsw/db.py
index bf915c1..91cfb53 100644
--- a/src/shillelagh/backends/apsw/db.py
+++ b/src/shillelagh/backends/apsw/db.py
@@ -39,7 +39,12 @@ from shillelagh.exceptions import (  # nopycln: import; pylint: disable=redefine
     Warning,
 )
 from shillelagh.fields import Blob, Field
-from shillelagh.lib import combine_args_kwargs, escape, find_adapter, serialize
+from shillelagh.lib import (
+    combine_args_kwargs,
+    escape_identifier,
+    find_adapter,
+    serialize,
+)
 from shillelagh.types import (
     BINARY,
     DATETIME,
@@ -290,7 +295,7 @@ class Cursor:  # pylint: disable=too-many-instance-attributes
             f"'{serialize(arg)}'"
             for arg in combine_args_kwargs(adapter, *args, **kwargs)
         )
-        table_name = escape(uri)
+        table_name = escape_identifier(uri)
         self._cursor.execute(
             f'CREATE VIRTUAL TABLE "{table_name}" USING {adapter.__name__}({formatted_args})',
         )
diff --git a/src/shillelagh/lib.py b/src/shillelagh/lib.py
index 684af28..e36b254 100644
--- a/src/shillelagh/lib.py
+++ b/src/shillelagh/lib.py
@@ -221,16 +221,26 @@ def update_order(
     return current_order
 
 
-def escape(value: str) -> str:
+def escape_string(value: str) -> str:
     """Escape single quotes."""
     return value.replace("'", "''")
 
 
-def unescape(value: str) -> str:
+def unescape_string(value: str) -> str:
     """Unescape single quotes."""
     return value.replace("''", "'")
 
 
+def escape_identifier(value: str) -> str:
+    """Escape double quotes."""
+    return value.replace('"', '""')
+
+
+def unescape_identifier(value: str) -> str:
+    """Unescape double quotes."""
+    return value.replace('""', '"')
+
+
 def serialize(value: Any) -> str:
     """
     Serialize adapter arguments.
@@ -247,7 +257,7 @@ def serialize(value: Any) -> str:
             "numbers) are passed as arguments to adapters.",
         ) from ex
 
-    return escape(base64.b64encode(serialized).decode())
+    return escape_string(base64.b64encode(serialized).decode())
 
 
 def deserialize(value: str) -> Any:
@@ -257,7 +267,7 @@ def deserialize(value: str) -> Any:
     This function is used by the SQLite backend, in order to deserialize
     the virtual table definition and instantiate an adapter.
     """
-    return marshal.loads(base64.b64decode(unescape(value).encode()))
+    return marshal.loads(base64.b64decode(unescape_string(value).encode()))
 
 
 def build_sql(  # pylint: disable=too-many-locals, too-many-arguments, too-many-branches
