diff --git a/tests/test_generators/test_linkmlgen.py b/tests/test_generators/test_linkmlgen.py
index eb7fa862..a9dd9488 100644
--- a/tests/test_generators/test_linkmlgen.py
+++ b/tests/test_generators/test_linkmlgen.py
@@ -25,7 +25,7 @@ class LinkMLGenTestCase(unittest.TestCase):
         self.assertNotIn("activity", sv.all_classes(imports=False))
         self.assertListEqual(["is_living"], list(sv.get_class("Person").attributes.keys()))
 
-        gen = LinkmlGenerator(SCHEMA, format='yaml')
+        gen = LinkmlGenerator(SCHEMA, format='yaml', mergeimports=False)
         out = gen.serialize()
         # TODO: restore this when imports works for string inputs
         #schema2 = YAMLGenerator(out).schema
@@ -39,12 +39,22 @@ class LinkMLGenTestCase(unittest.TestCase):
         self.assertEqual(len(yobj["classes"]), len(sv.all_classes(imports=False)))
         # self.assertNotIn("attributes", yobj["classes"]["Person"])
         # test with material-attributes option
-        gen2 = LinkmlGenerator(SCHEMA, format='yaml')
+        gen2 = LinkmlGenerator(SCHEMA, format='yaml', mergeimports=False)
         gen2.materialize_attributes = True
         out2 = gen2.serialize()
         yobj2 = yaml.safe_load(out2)
         self.assertEqual(len(yobj2["classes"]), len(sv.all_classes(imports=False)))
         self.assertIn("attributes", yobj2["classes"]["Person"])
+        self.assertNotIn("activity", yobj2["classes"])
+        self.assertNotIn("agent", yobj2["classes"])
+
+        # turn on mergeimports option
+        gen3 = LinkmlGenerator(SCHEMA, format="yaml", mergeimports=True)
+        out3 = gen3.serialize()
+        yobj3 = yaml.safe_load(out3)
+        self.assertEqual(len(yobj3["classes"]), len(sv.all_classes(imports=True)))
+        self.assertIn("activity", yobj3["classes"])
+        self.assertIn("agent", yobj3["classes"])
 
         # test that structured patterns are being expanded
         # and populated into the pattern property on a class
