diff --git a/cbor/MajorType.py b/cbor/MajorType.py
index d9b0d34..2f43a8c 100644
--- a/cbor/MajorType.py
+++ b/cbor/MajorType.py
@@ -3,6 +3,7 @@ from cbor.State import State
 from cbor.type.ByteString import ByteString
 from cbor.type.TextString import TextString
 from cbor.type.Array import ArrayInfo
+from cbor.type.Map import MapInfo
 
 MAJOR_TYPE_MASK = 0b11100000
 MAJOR_TYPE_SIZE = 3
@@ -26,5 +27,7 @@ class MajorType(State):
             return TextString()
         elif t == 4:
             return ArrayInfo()
+        elif t == 5:
+            return MapInfo()
 
         return
diff --git a/cbor/type/Map.py b/cbor/type/Map.py
new file mode 100644
index 0000000..e46f64e
--- /dev/null
+++ b/cbor/type/Map.py
@@ -0,0 +1,84 @@
+import cbor.CBORStream
+import cbor.MajorType
+import cbor.State
+
+
+class MapInfo(cbor.State.State):
+
+    def run(self, stream: cbor.CBORStream.CBORStream, handler):
+        info = stream.read(1)
+        length = ord(info) & 0b00011111
+        handler('{')
+        if length == 0:
+            handler('}')
+        elif length < 24:
+            return [MapReadValue(length), cbor.MajorType.MajorType()]
+        elif length == 24:
+            return [MapLen(1)]
+        elif length == 25:
+            return [MapLen(2)]
+        elif length == 26:
+            return [MapLen(4)]
+        elif length == 27:
+            return [MapLen(8)]
+        elif length == 31:
+            return [MapInfValue(), cbor.MajorType.MajorType()]
+        return []
+
+
+class MapLen(cbor.State.State):
+
+    def __eq__(self, other):
+        return self.n == other.n
+
+    def __init__(self, n: int):
+        self.n = n
+
+    def run(self, stream: cbor.CBORStream.CBORStream, handler):
+        info = stream.read(self.n)
+        length = int.from_bytes(info, byteorder='big')
+        return [MapReadValue(length), cbor.MajorType.MajorType()]
+
+
+class MapReadKey(cbor.State.State):
+
+    def __eq__(self, other):
+        return self.n == other.n
+
+    def __init__(self, n: int):
+        self.n = n
+
+    def run(self, stream: cbor.CBORStream.CBORStream, handler):
+        if self.n == 0:
+            handler('}')
+            return []
+        if self.n > 0:
+            handler(',')
+        return [MapReadValue(self.n), cbor.MajorType.MajorType()]
+
+
+class MapReadValue(cbor.State.State):
+
+    def __eq__(self, other):
+        return self.n == other.n
+
+    def __init__(self, n: int):
+        self.n = n
+
+    def run(self, stream: cbor.CBORStream.CBORStream, handler):
+        handler(':')
+        return [MapReadKey(self.n-1), cbor.MajorType.MajorType()]
+
+
+class MapInfKey(cbor.State.State):
+
+    def run(self, stream: cbor.CBORStream.CBORStream, handler):
+        handler(',')
+        return [MapInfValue(), cbor.MajorType.MajorType()]
+
+
+class MapInfValue(cbor.State.State):
+
+    def run(self, stream: cbor.CBORStream.CBORStream, handler):
+        handler(':')
+        return [MapInfKey(), cbor.MajorType.MajorType()]
