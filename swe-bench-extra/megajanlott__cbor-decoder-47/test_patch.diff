diff --git a/tests/test_Map.py b/tests/test_Map.py
new file mode 100644
index 0000000..7497c8d
--- /dev/null
+++ b/tests/test_Map.py
@@ -0,0 +1,147 @@
+from io import BytesIO
+from cbor.MajorType import MajorType
+from cbor.CBORStream import CBORStream
+from cbor.type.Map import *
+from tests.MockHandler import MockHandler
+from cbor.Decoder import Decoder
+
+
+def ignore_handler(v):
+    return
+
+
+def test_run_map_probe():
+    data = CBORStream(BytesIO(bytes([0b10100001])))
+    assert type(MajorType().run(data, None)) == MapInfo
+
+
+def test_run_map_length():
+    # Map length lower than 24.
+    data = CBORStream(BytesIO(bytes([0b10100011])))
+    stack = MapInfo().run(data, ignore_handler)
+    assert len(stack) == 2
+    assert type(stack[0]) == MapReadValue
+    assert stack[0] == MapReadValue(3)
+    assert type(stack[1]) == MajorType
+
+
+def test_run_map_length_multibyte():
+    # Map length on 1 byte.
+    data = CBORStream(BytesIO(bytes([
+        0b10111000, 0b1
+    ])))
+    stack = MapInfo().run(data, ignore_handler)
+    assert len(stack) == 1
+    assert type(stack[0]) == MapLen
+    assert stack[0] == MapLen(1)
+    stack2 = stack[0].run(data, ignore_handler)
+    assert len(stack2) == 2
+    assert type(stack2[0]) == MapReadValue
+    assert stack2[0] == MapReadValue(1)
+    assert type(stack2[1]) == MajorType
+
+    # Map length on 2 bytes.
+    data = CBORStream(BytesIO(bytes([
+        0b10111001, 0b1, 0b0
+    ])))
+    stack = MapInfo().run(data, ignore_handler)
+    assert len(stack) == 1
+    assert type(stack[0]) == MapLen
+    assert stack[0] == MapLen(2)
+    stack2 = stack[0].run(data, ignore_handler)
+    assert len(stack2) == 2
+    assert type(stack2[0]) == MapReadValue
+    assert stack2[0] == MapReadValue(1 << 8)
+    assert type(stack2[1]) == MajorType
+
+    # Map length on 4 bytes.
+    data = CBORStream(BytesIO(bytes([
+        0b10111010, 0b1, 0b0, 0b0, 0b0
+    ])))
+    stack = MapInfo().run(data, ignore_handler)
+    assert len(stack) == 1
+    assert type(stack[0]) == MapLen
+    assert stack[0] == MapLen(4)
+    stack2 = stack[0].run(data, ignore_handler)
+    assert len(stack2) == 2
+    assert type(stack2[0]) == MapReadValue
+    assert stack2[0] == MapReadValue(1 << 24)
+    assert type(stack2[1]) == MajorType
+
+    # Map length on 8 bytes.
+    data = CBORStream(BytesIO(bytes([
+        0b10111011, 0b1, 0b0, 0b0, 0b0, 0b0, 0b0, 0b0, 0b0
+    ])))
+    stack = MapInfo().run(data, ignore_handler)
+    assert len(stack) == 1
+    assert type(stack[0]) == MapLen
+    assert stack[0] == MapLen(8)
+    stack2 = stack[0].run(data, ignore_handler)
+    assert len(stack2) == 2
+    assert type(stack2[0]) == MapReadValue
+    assert stack2[0] == MapReadValue(1 << 56)
+    assert type(stack2[1]) == MajorType
+
+
+def test_run_map_inf():
+    # Map with infinite length.
+    data = CBORStream(BytesIO(bytes([0b10111111])))
+    stack = MapInfo().run(data, ignore_handler)
+    assert len(stack) == 2
+    assert type(stack[0]) == MapInfValue
+    assert type(stack[1]) == MajorType
+
+
+def test_run_map_inf_key():
+    # Map with infinite length.
+    data = CBORStream(BytesIO(bytes([])))
+    stack = MapInfKey().run(data, ignore_handler)
+    assert len(stack) == 2
+    assert type(stack[0]) == MapInfValue
+    assert type(stack[1]) == MajorType
+
+
+def test_run_map_inf_value():
+    # Map with infinite length.
+    data = CBORStream(BytesIO(bytes([])))
+    stack = MapInfValue().run(data, ignore_handler)
+    assert len(stack) == 2
+    assert type(stack[0]) == MapInfKey
+    assert type(stack[1]) == MajorType
+
+
+def test_run_map_info_empty():
+    handler = MockHandler()
+
+    # Empty array.
+    data = CBORStream(BytesIO(bytes([0b10100000])))
+    stack = MapInfo().run(data, handler.handler)
+    assert len(stack) == 0
+    handler.assert_data('{}')
+
+
+def test_run_map_single_element():
+    handler = MockHandler()
+
+    # Empty array.
+    d = Decoder()
+    data = bytes([0b10100001, 0b10100000, 0b10100000])
+    d.decode_array(data, handler.handler)
+    print(handler.data)
+    handler.assert_data('{{}:{}}')
+
+
+def test_run_map_two_elements():
+    handler = MockHandler()
+
+    # Empty array.
+    d = Decoder()
+    data = bytes([
+        0b10100010,
+        0b10100000,
+        0b10100000,
+        0b10100000,
+        0b10100000])
+    d.decode_array(data, handler.handler)
+    print(handler.data)
+    handler.assert_data('{{}:{},{}:{}}')
