diff --git a/tests/test_cli.py b/tests/test_cli.py
new file mode 100644
index 0000000..d2849c3
--- /dev/null
+++ b/tests/test_cli.py
@@ -0,0 +1,16 @@
+import pathlib 
+from typer.testing import CliRunner
+
+from bulk.__main__ import app
+
+runner = CliRunner()
+
+
+def test_download_tinyplanet():
+    result = runner.invoke(app, ["util", "download", "tinyplanet"])
+    assert result.exit_code == 0
+    assert pathlib.Path("downloads/tinyplanet").exists()
+
+    # The path exists now, so exit_code needs to be raised
+    result = runner.invoke(app, ["util", "download", "tinyplanet"])
+    assert result.exit_code == 1
diff --git a/tests/test_utils.py b/tests/test_utils.py
new file mode 100644
index 0000000..2b851b4
--- /dev/null
+++ b/tests/test_utils.py
@@ -0,0 +1,33 @@
+import pandas as pd
+import pytest
+
+from bulk._bokeh_utils import get_color_mapping
+
+MAX_DISCRETE_CLASSES = 10
+
+
+def _int_to_alpha(x: int) -> str:
+    # returns int mapped to char: 0: a, 1: b, 2: c
+    return chr(x + 97)
+
+
+def _create_dummy_df() -> pd.DataFrame:
+    df = pd.DataFrame()
+    df["color"] = [_int_to_alpha(i) for i in range(MAX_DISCRETE_CLASSES)]
+    return df
+
+
+def test_get_color_mapping_raises_error_on_too_many_classes():
+    df = _create_dummy_df()
+    additional_class = pd.DataFrame.from_records([{"color": _int_to_alpha(MAX_DISCRETE_CLASSES + 1)}])
+    df = pd.concat([df, additional_class], axis=0, ignore_index=True)
+    with pytest.raises(ValueError):
+        get_color_mapping(df)
+
+
+def test_get_color_mapping_doesnt_raise_error():
+    df = _create_dummy_df()
+    try:
+        get_color_mapping(df)
+    except ValueError as e:
+        assert False, f"get_color_mapping raised a ValueError: {e}"
