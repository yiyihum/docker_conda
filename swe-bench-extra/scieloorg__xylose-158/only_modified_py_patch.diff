diff --git a/xylose/scielodocument.py b/xylose/scielodocument.py
index da4d426..27af27d 100644
--- a/xylose/scielodocument.py
+++ b/xylose/scielodocument.py
@@ -1,7 +1,6 @@
 # encoding: utf-8
 import sys
 from functools import wraps
-import warnings
 import re
 import unicodedata
 import datetime
@@ -3063,13 +3062,40 @@ class Citation(object):
         ma = self.monographic_authors or []
         return aa + ma
 
+    @property
+    def analytic_person_authors(self):
+        """
+        It retrieves the analytic person authors of a reference,
+        no matter the publication type of the reference.
+        It is not desirable to restrict the conditioned return to the
+        publication type, because some reference standards are very peculiar
+        and not only articles or books have person authors.
+        IT REPLACES analytic_authors
+        """
+        authors = []
+        for author in self.data.get('v10', []):
+            authordict = {}
+            if 's' in author:
+                authordict['surname'] = html_decode(author['s'])
+            if 'n' in author:
+                authordict['given_names'] = html_decode(author['n'])
+            if 's' in author or 'n' in author:
+                authors.append(authordict)
+        if len(authors) > 0:
+            return authors
+
     @property
     def analytic_authors(self):
         """
         This method retrieves the authors of the given citation. These authors
         may correspond to an article, book analytic, link or thesis.
+        IT WILL BE DEPRECATED. Use analytic_person_authors instead
         """
-
+        warn_future_deprecation(
+                'analytic_authors',
+                'analytic_person_authors',
+                'analytic_person_authors is more suitable name'
+        )
         authors = []
         if 'v10' in self.data:
             for author in self.data['v10']:
@@ -3084,13 +3110,41 @@ class Citation(object):
         if len(authors) > 0:
             return authors
 
+    @property
+    def monographic_person_authors(self):
+        """
+        It retrieves the monographic person authors of a reference,
+        no matter the publication type of the reference.
+        It is not desirable to restrict the conditioned return to the
+        publication type, because some reference standards are very peculiar
+        and not only articles or books have person authors.
+        IT REPLACES monographic_authors
+        """
+        authors = []
+        for author in self.data.get('v16', []):
+            authordict = {}
+            if 's' in author:
+                authordict['surname'] = html_decode(author['s'])
+            if 'n' in author:
+                authordict['given_names'] = html_decode(author['n'])
+            if 's' in author or 'n' in author:
+                authors.append(authordict)
+        if len(authors) > 0:
+            return authors
+
     @property
     def monographic_authors(self):
         """
-        This method retrieves the authors of the given book citation. These authors may
+        This method retrieves the authors of the given book citation.
+        These authors may
         correspond to a book monography citation.
+        IT WILL BE DEPRECATED. Use monographic_person_authors instead.
         """
-
+        warn_future_deprecation(
+                'monographic_authors',
+                'monographic_person_authors',
+                'monographic_person_authors is more suitable name'
+        )
         authors = []
         if 'v16' in self.data:
             for author in self.data['v16']:

