diff --git a/.gitignore b/.gitignore
index bc0dfdb71..a20548735 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,6 +2,7 @@
 .pytype
 .DS_Store
 .vscode
+.idea
 mypy_report
 docs/build
 docs/source/_build
diff --git a/src/textual/_region_group.py b/src/textual/_region_group.py
new file mode 100644
index 000000000..096007987
--- /dev/null
+++ b/src/textual/_region_group.py
@@ -0,0 +1,48 @@
+from __future__ import annotations
+
+from collections import defaultdict
+from operator import attrgetter
+from typing import NamedTuple, Iterable
+
+from .geometry import Region
+
+
+class InlineRange(NamedTuple):
+    """Represents a region on a single line."""
+
+    line_index: int
+    start: int
+    end: int
+
+
+def regions_to_ranges(regions: Iterable[Region]) -> Iterable[InlineRange]:
+    """Converts the regions to non-overlapping horizontal strips, where each strip
+    represents the region on a single line. Combining the resulting strips therefore
+    results in a shape identical to the combined original regions.
+
+    Args:
+        regions (Iterable[Region]): An iterable of Regions.
+
+    Returns:
+        Iterable[InlineRange]: Yields InlineRange objects representing the content on
+            a single line, with overlaps removed.
+    """
+    inline_ranges: dict[int, list[InlineRange]] = defaultdict(list)
+    for region_x, region_y, width, height in regions:
+        for y in range(region_y, region_y + height):
+            inline_ranges[y].append(
+                InlineRange(line_index=y, start=region_x, end=region_x + width - 1)
+            )
+
+    get_start = attrgetter("start")
+    for line_index, ranges in inline_ranges.items():
+        sorted_ranges = iter(sorted(ranges, key=get_start))
+        _, start, end = next(sorted_ranges)
+        for next_line_index, next_start, next_end in sorted_ranges:
+            if next_start <= end + 1:
+                end = max(end, next_end)
+            else:
+                yield InlineRange(line_index, start, end)
+                start = next_start
+                end = next_end
+        yield InlineRange(line_index, start, end)
