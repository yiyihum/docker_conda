diff --git a/edk2toollib/uefi/edk2/parsers/base_parser_test.py b/edk2toollib/uefi/edk2/parsers/base_parser_test.py
index 6f3f191..a7857ff 100644
--- a/edk2toollib/uefi/edk2/parsers/base_parser_test.py
+++ b/edk2toollib/uefi/edk2/parsers/base_parser_test.py
@@ -588,26 +588,34 @@ def test_find_path(self):
         parser.Lines = ["hello"]
         package_paths = ["Common/Test", "SM_MAGIC"]
         root_path = tempfile.mkdtemp()
-        target_filedir = os.path.join(root_path, "BuildPkg")
-        parser.TargetFilePath = target_filedir
-        parser.SetPackagePaths(package_paths)
-        parser.SetBaseAbsPath(root_path)
-        os.makedirs(target_filedir)
         index = 0
-        root_file = "root.txt"
-        target_file = "target.txt"
+        # create the packages path folders
         for package in package_paths:
             pack_path = os.path.join(root_path, package)
             os.makedirs(pack_path)
             parser.WriteLinesToFile(os.path.join(pack_path, f"package_{index}.txt"))
             index += 1
+        # setup the parser
+        parser.SetBaseAbsPath(root_path)
+        parser.SetPackagePaths(package_paths)
+
+        # create the root and target files
+        root_file = "root.txt"
+        target_file = "target.txt"
+
         root_filepath = os.path.join(root_path, root_file)
+        target_filedir = os.path.join(root_path, "BuildPkg")
         target_filepath = os.path.join(target_filedir, target_file)
+        # create root file
         parser.WriteLinesToFile(root_filepath)
+        # create target file
+        os.makedirs(target_filedir)
         parser.WriteLinesToFile(target_filepath)
-
+        parser.TargetFilePath = target_filepath
+        # check if we can find the root
         root_found = parser.FindPath(root_file)
         self.assertEqual(root_found, root_filepath)
+        # check we can find the target using the target path
         target_found = parser.FindPath(target_file)
         self.assertEqual(target_found, target_filepath)
 
@@ -620,8 +628,12 @@ def test_find_path(self):
         # invalid files
         invalid_filename = "YOU_WONT_FIND_ME.txt"
         invalid_file = os.path.join(root_path, invalid_filename)
-        invalid_result = parser.FindPath(invalid_filename)
-        self.assertEqual(invalid_file, invalid_result)
+        invalid_result = parser.FindPath(invalid_file)
+        invalid_result2 = parser.FindPath(invalid_filename)
+        self.assertEqual(None, invalid_result)
+        self.assertEqual(None, invalid_result2)
+        invalid_result3 = parser.FindPath(None)
+        self.assertEqual(None, invalid_result3)
 
     # make sure we can write out to a file
 
diff --git a/edk2toollib/uefi/edk2/parsers/dsc_parser_test.py b/edk2toollib/uefi/edk2/parsers/dsc_parser_test.py
index 5d2a124..5e6296c 100644
--- a/edk2toollib/uefi/edk2/parsers/dsc_parser_test.py
+++ b/edk2toollib/uefi/edk2/parsers/dsc_parser_test.py
@@ -30,7 +30,7 @@ def write_to_file(file_path, data):
 
     def test_dsc_include_single_file(self):
         ''' This tests whether includes work properly '''
-        workspace = tempfile.gettempdir()
+        workspace = tempfile.mkdtemp()
 
         file1_name = "file1.dsc"
         file2_name = "file2.dsc"
@@ -54,7 +54,7 @@ def test_dsc_include_single_file(self):
 
     def test_dsc_include_missing_file(self):
         ''' This tests whether includes work properly '''
-        workspace = tempfile.gettempdir()
+        workspace = tempfile.mkdtemp()
 
         file1_name = "file1.dsc"
         file1_path = os.path.join(workspace, file1_name)
@@ -70,7 +70,7 @@ def test_dsc_include_missing_file(self):
 
     def test_dsc_include_missing_file_no_fail_mode(self):
         ''' This tests whether includes work properly if no fail mode is on'''
-        workspace = tempfile.gettempdir()
+        workspace = tempfile.mkdtemp()
 
         file1_name = "file1.dsc"
         file1_path = os.path.join(workspace, file1_name)
@@ -83,3 +83,74 @@ def test_dsc_include_missing_file_no_fail_mode(self):
         parser.SetNoFailMode()
         parser.SetBaseAbsPath(workspace)
         parser.ParseFile(file1_path)
+
+    def test_dsc_parse_file_on_package_path(self):
+        ''' This tests whether includes work properly if no fail mode is on'''
+        workspace = tempfile.mkdtemp()
+        working_dir_name = "working"
+        working2_dir_name = "working2"
+
+        working_folder = os.path.join(workspace, working_dir_name)
+        working2_folder = os.path.join(working_folder, working2_dir_name)
+        os.makedirs(working_folder, exist_ok=True)
+        os.makedirs(working2_folder, exist_ok=True)
+
+        file1_name = "file1.dsc"
+        file1_path = os.path.join(working2_folder, file1_name)
+        file1_short_path = os.path.join(working2_dir_name, file1_name)
+        file1_data = "[Defines]\n INCLUDED=TRUE"
+
+        TestDscParserIncludes.write_to_file(file1_path, file1_data)
+        with self.assertRaises(FileNotFoundError):
+            parser = DscParser()
+            parser.SetBaseAbsPath(workspace)
+            parser.ParseFile(file1_short_path)
+
+        parser = DscParser()
+        parser.SetBaseAbsPath(workspace)
+        parser.SetPackagePaths([working_folder, ])
+        parser.ParseFile(file1_short_path)
+        self.assertEqual(parser.LocalVars["INCLUDED"], "TRUE")  # make sure we got the defines
+
+    def test_dsc_include_relative_path(self):
+        ''' This tests whether includes work properly with a relative path'''
+        workspace = tempfile.mkdtemp()
+        outside_folder = os.path.join(workspace, "outside")
+        inside_folder = os.path.join(outside_folder, "inside")
+        inside2_folder = os.path.join(outside_folder, "inside2")
+        random_folder = os.path.join(outside_folder, "random")
+        os.makedirs(inside_folder, exist_ok=True)
+        os.makedirs(inside2_folder, exist_ok=True)
+        os.makedirs(random_folder, exist_ok=True)
+        cwd = os.getcwd()
+        os.chdir(random_folder)
+        try:
+
+            file1_name = "file1.dsc"
+            file1_path = os.path.join(outside_folder, file1_name)
+
+            file2_name = "file2.dsc"
+            file2_path = os.path.join(inside_folder, file2_name)
+
+            file3_name = "file3.dsc"
+            file3_path = os.path.join(inside2_folder, file3_name)
+
+            file1_data = "!include " + os.path.relpath(file2_path, os.path.dirname(file1_path)).replace("\\", "/")
+            file2_data = "!include " + os.path.relpath(file3_path, os.path.dirname(file2_path)).replace("\\", "/")
+            file3_data = "[Defines]\n INCLUDED=TRUE"
+
+            print(f"{file1_path}: {file1_data}")
+            print(f"{file2_path}: {file2_data}")
+            print(f"{file3_path}: {file3_data}")
+
+            TestDscParserIncludes.write_to_file(file1_path, file1_data)
+            TestDscParserIncludes.write_to_file(file2_path, file2_data)
+            TestDscParserIncludes.write_to_file(file3_path, file3_data)
+
+            parser = DscParser()
+            parser.SetBaseAbsPath(workspace)
+            parser.ParseFile(file1_path)
+
+            self.assertEqual(parser.LocalVars["INCLUDED"], "TRUE")  # make sure we got the defines
+        finally:
+            os.chdir(cwd)
