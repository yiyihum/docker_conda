diff --git a/src/friendlypins/api.py b/src/friendlypins/api.py
index 4b014c9..03a92f2 100644
--- a/src/friendlypins/api.py
+++ b/src/friendlypins/api.py
@@ -48,11 +48,7 @@ class API(object):  # pylint: disable=too-few-public-methods
 
         :rtype: :class:`datetime.datetime`
         """
-        try:
-            if self._io.headers is None:
-                self._io.get("me")
-        finally:
-            return self._io.headers.time_to_refresh  # pylint: disable=lost-exception
+        return self._io.headers.time_to_refresh
 
     @property
     def transaction_limit(self):
@@ -60,11 +56,7 @@ class API(object):  # pylint: disable=too-few-public-methods
 
         :rtype: :class:`int`
         """
-        try:
-            if self._io.headers is None:
-                self._io.get("me")
-        finally:
-            return self._io.headers.rate_limit  # pylint: disable=lost-exception
+        return self._io.headers.rate_limit
 
     @property
     def transaction_remaining(self):
@@ -72,11 +64,8 @@ class API(object):  # pylint: disable=too-few-public-methods
 
         :rtype: :class:`int`
         """
-        try:
-            if self._io.headers is None:
-                self._io.get("me")
-        finally:
-            return self._io.headers.rate_remaining  # pylint: disable=lost-exception
+        return self._io.headers.rate_remaining
+
 
 if __name__ == "__main__":
     pass
diff --git a/src/friendlypins/utils/rest_io.py b/src/friendlypins/utils/rest_io.py
index 4fe03f1..50c9136 100644
--- a/src/friendlypins/utils/rest_io.py
+++ b/src/friendlypins/utils/rest_io.py
@@ -35,6 +35,12 @@ class RestIO(object):
 
         :rtype: :class:`friendlypins.headers.Headers`
         """
+        if not self._latest_header:
+            temp_url = "{0}/me".format(self._root_url)
+            properties = {"access_token": self._token}
+            response = requests.get(temp_url, params=properties)
+            self._latest_header = Headers(response.headers)
+            response.raise_for_status()
         return self._latest_header
 
     def get(self, path, properties=None):
