diff --git a/tests/open_alchemy/facades/test_code_formatter.py b/tests/open_alchemy/facades/test_code_formatter.py
new file mode 100644
index 00000000..e881ef8c
--- /dev/null
+++ b/tests/open_alchemy/facades/test_code_formatter.py
@@ -0,0 +1,25 @@
+"""Tests for code formatting."""
+
+import pytest
+
+from open_alchemy import facades
+
+
+@pytest.mark.parametrize(
+    "source, expected_source",
+    [
+        pytest.param("'test'\n", '"test"\n', id="apply formatting"),
+        pytest.param('"test"\n', '"test"\n', id="no formatting"),
+    ],
+)
+@pytest.mark.facade
+@pytest.mark.code_formatter
+def test_apply(source, expected_source):
+    """
+    GIVEN source code and expected source code
+    WHEN apply is called with the source code
+    THEN the expected source code is returned.
+    """
+    returned_source = facades.code_formatter.apply(source=source)
+
+    assert returned_source == expected_source
diff --git a/tests/open_alchemy/models_file/test_integration.py b/tests/open_alchemy/models_file/test_integration.py
index 976b440e..c131ca75 100644
--- a/tests/open_alchemy/models_file/test_integration.py
+++ b/tests/open_alchemy/models_file/test_integration.py
@@ -8,7 +8,6 @@ from mypy import api
 from open_alchemy import models_file
 
 _DOCSTRING = '"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""'
-_LONG_NAME = "extremely_long_name_that_will_cause_wrapping_aaaaaaaaaaaaaaaaa"
 _EXPECTED_TD_BASE = "typing.TypedDict"
 if sys.version_info[1] < 8:
     _EXPECTED_TD_BASE = "typing_extensions.TypedDict"
@@ -116,110 +115,6 @@ class TModel({_EXPECTED_MODEL_BASE}):
         ...
 
 
-Model: typing.Type[TModel] = models.Model  # type: ignore
-''',
-        ),
-        (
-            [
-                (
-                    {
-                        "properties": {
-                            "ref_model": {"type": "object", "x-de-$ref": "RefModel"}
-                        }
-                    },
-                    "Model",
-                )
-            ],
-            f'''{_DOCSTRING}
-# pylint: disable=no-member,super-init-not-called,unused-argument
-
-import typing
-
-import sqlalchemy{_ADDITIONAL_IMPORT}
-from sqlalchemy import orm
-
-from open_alchemy import models
-
-
-class ModelDict({_EXPECTED_TD_BASE}, total=False):
-    """TypedDict for properties that are not required."""
-
-    ref_model: typing.Optional["RefModelDict"]
-
-
-class TModel({_EXPECTED_MODEL_BASE}):
-    """
-    SQLAlchemy model protocol.
-
-    Attrs:
-        ref_model: The ref_model of the Model.
-
-    """
-
-    # SQLAlchemy properties
-    __table__: sqlalchemy.Table
-    __tablename__: str
-    query: orm.Query
-
-    # Model properties
-    ref_model: 'sqlalchemy.Column[typing.Optional["TRefModel"]]'
-
-    def __init__(self, ref_model: typing.Optional["TRefModel"] = None) -> None:
-        """
-        Construct.
-
-        Args:
-            ref_model: The ref_model of the Model.
-
-        """
-        ...
-
-    @classmethod
-    def from_dict(cls, ref_model: typing.Optional["RefModelDict"] = None) -> "TModel":
-        """
-        Construct from a dictionary (eg. a POST payload).
-
-        Args:
-            ref_model: The ref_model of the Model.
-
-        Returns:
-            Model instance based on the dictionary.
-
-        """
-        ...
-
-    @classmethod
-    def from_str(cls, value: str) -> "TModel":
-        """
-        Construct from a JSON string (eg. a POST payload).
-
-        Returns:
-            Model instance based on the JSON string.
-
-        """
-        ...
-
-    def to_dict(self) -> ModelDict:
-        """
-        Convert to a dictionary (eg. to send back for a GET request).
-
-        Returns:
-            Dictionary based on the model instance.
-
-        """
-        ...
-
-    def to_str(self) -> str:
-        """
-        Convert to a JSON string (eg. to send back for a GET request).
-
-        Returns:
-            JSON string based on the model instance.
-
-        """
-        ...
-
-
 Model: typing.Type[TModel] = models.Model  # type: ignore
 ''',
         ),
@@ -401,121 +296,10 @@ class TModel2({_EXPECTED_MODEL_BASE}):
 
 
 Model2: typing.Type[TModel2] = models.Model2  # type: ignore
-''',
-        ),
-        (
-            [({"properties": {_LONG_NAME: {"type": "integer"}}}, "Model")],
-            f'''{_DOCSTRING}
-# pylint: disable=no-member,super-init-not-called,unused-argument
-
-import typing
-
-import sqlalchemy{_ADDITIONAL_IMPORT}
-from sqlalchemy import orm
-
-from open_alchemy import models
-
-
-class ModelDict({_EXPECTED_TD_BASE}, total=False):
-    """TypedDict for properties that are not required."""
-
-    {_LONG_NAME}: typing.Optional[int]
-
-
-class TModel({_EXPECTED_MODEL_BASE}):
-    """
-    SQLAlchemy model protocol.
-
-    Attrs:
-        {_LONG_NAME}: The
-            {_LONG_NAME} of
-            the Model.
-
-    """
-
-    # SQLAlchemy properties
-    __table__: sqlalchemy.Table
-    __tablename__: str
-    query: orm.Query
-
-    # Model properties
-    {_LONG_NAME}: "sqlalchemy.Column[typing.Optional[int]]"
-
-    def __init__(
-        self,
-        {_LONG_NAME}: typing.Optional[
-            int
-        ] = None,
-    ) -> None:
-        """
-        Construct.
-
-        Args:
-            {_LONG_NAME}: The
-                {_LONG_NAME}
-                of the Model.
-
-        """
-        ...
-
-    @classmethod
-    def from_dict(
-        cls,
-        {_LONG_NAME}: typing.Optional[
-            int
-        ] = None,
-    ) -> "TModel":
-        """
-        Construct from a dictionary (eg. a POST payload).
-
-        Args:
-            {_LONG_NAME}: The
-                {_LONG_NAME}
-                of the Model.
-
-        Returns:
-            Model instance based on the dictionary.
-
-        """
-        ...
-
-    @classmethod
-    def from_str(cls, value: str) -> "TModel":
-        """
-        Construct from a JSON string (eg. a POST payload).
-
-        Returns:
-            Model instance based on the JSON string.
-
-        """
-        ...
-
-    def to_dict(self) -> ModelDict:
-        """
-        Convert to a dictionary (eg. to send back for a GET request).
-
-        Returns:
-            Dictionary based on the model instance.
-
-        """
-        ...
-
-    def to_str(self) -> str:
-        """
-        Convert to a JSON string (eg. to send back for a GET request).
-
-        Returns:
-            JSON string based on the model instance.
-
-        """
-        ...
-
-
-Model: typing.Type[TModel] = models.Model  # type: ignore
 ''',
         ),
     ],
-    ids=["single", "single object", "multiple", "black"],
+    ids=["single", "multiple"],
 )
 @pytest.mark.models_file
 def test_integration(schemas, expected_source):
