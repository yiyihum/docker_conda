diff --git a/pyupgrade.py b/pyupgrade.py
index 8913496..29fbb8f 100644
--- a/pyupgrade.py
+++ b/pyupgrade.py
@@ -242,8 +242,8 @@ def _victims(
     return Victims(starts, sorted(set(ends)), first_comma_index, arg_index)
 
 
-def _find_token(tokens: List[Token], i: int, token: Token) -> int:
-    while tokens[i].src != token:
+def _find_token(tokens: List[Token], i: int, src: str) -> int:
+    while tokens[i].src != src:
         i += 1
     return i
 
@@ -454,7 +454,7 @@ ESCAPE_RE = re.compile(r'\\.', re.DOTALL)
 NAMED_ESCAPE_NAME = re.compile(r'\{[^}]+\}')
 
 
-def _fix_escape_sequences(token: Token) -> str:
+def _fix_escape_sequences(token: Token) -> Token:
     prefix, rest = parse_string_literal(token.src)
     actual_prefix = prefix.lower()
 
@@ -1204,6 +1204,7 @@ class FindPy3Plus(ast.NodeVisitor):
         self.if_py3_blocks: Set[Offset] = set()
         self.if_py2_blocks_else: Set[Offset] = set()
         self.if_py3_blocks_else: Set[Offset] = set()
+        self.metaclass_type_assignments: Set[Offset] = set()
 
         self.native_literals: Set[Offset] = set()
 
@@ -1486,6 +1487,19 @@ class FindPy3Plus(ast.NodeVisitor):
 
         self.generic_visit(node)
 
+    def visit_Assign(self, node: ast.Assign) -> None:
+        if (
+                len(node.targets) == 1 and
+                isinstance(node.targets[0], ast.Name) and
+                node.targets[0].col_offset == 0 and
+                node.targets[0].id == '__metaclass__' and
+                isinstance(node.value, ast.Name) and
+                node.value.id == 'type'
+        ):
+            self.metaclass_type_assignments.add(_ast_to_offset(node))
+
+        self.generic_visit(node)
+
     @staticmethod
     def _eq(test: ast.Compare, n: int) -> bool:
         return (
@@ -1609,7 +1623,7 @@ class Block(NamedTuple):
     colon: int
     block: int
     end: int
-    line: int
+    line: bool
 
     def _initial_indent(self, tokens: List[Token]) -> int:
         if tokens[self.start].src.isspace():
@@ -1869,6 +1883,7 @@ def _fix_py3_plus(contents_text: str) -> str:
             visitor.if_py2_blocks_else,
             visitor.if_py3_blocks,
             visitor.if_py3_blocks_else,
+            visitor.metaclass_type_assignments,
             visitor.native_literals,
             visitor.io_open_calls,
             visitor.open_mode_calls,
@@ -1943,6 +1958,16 @@ def _fix_py3_plus(contents_text: str) -> str:
                 if_block, else_block = _find_if_else_block(tokens, j)
                 del tokens[if_block.end:else_block.end]
                 if_block.replace_condition(tokens, [Token('NAME', 'else')])
+        elif token.offset in visitor.metaclass_type_assignments:
+            j = _find_token(tokens, i, 'type')
+            while tokens[j].name not in {'NEWLINE', 'ENDMARKER'}:
+                j += 1
+            # depending on the version of python, some will not emit
+            # NEWLINE('') at the end of a file which does not end with a
+            # newline (for example 3.6.5)
+            if tokens[j].name == 'ENDMARKER':  # pragma: no cover
+                j -= 1
+            del tokens[i:j + 1]
         elif token.offset in visitor.native_literals:
             j = _find_open_paren(tokens, i)
             func_args, end = _parse_call_args(tokens, j)

