diff --git a/tests/unittests/test_pick_action.py b/tests/unittests/test_pick_action.py
index 163b4aa..afd7844 100644
--- a/tests/unittests/test_pick_action.py
+++ b/tests/unittests/test_pick_action.py
@@ -94,3 +94,17 @@ class PickActionTest(unittest.TestCase):
         older_task = todotxt.Task("2017-01-01 Task 3")
         self.assertEqual([priority, older_task, newer_task],
                          pick_action.next_actions([priority, newer_task, older_task]))
+
+    def test_due_dates(self):
+        """ Test that a task with an earlier due date takes precedence. """
+        no_due_date = todotxt.Task("Task 1")
+        earlier_task = todotxt.Task("Task 2 due:2018-02-02")
+        later_task = todotxt.Task("Task 3 due:2019-01-01")
+        self.assertEqual([earlier_task, later_task, no_due_date],
+                         pick_action.next_actions([no_due_date, later_task, earlier_task]))
+
+    def test_due_and_creation_dates(self):
+        """ Test that a task with a due date takes precedence over creation date. """
+        task1 = todotxt.Task("2018-1-1 Task 1")
+        task2 = todotxt.Task("Task 2 due:2018-1-1")
+        self.assertEqual([task2, task1], pick_action.next_actions([task1, task2]))
diff --git a/tests/unittests/todotxt/test_task.py b/tests/unittests/todotxt/test_task.py
index a0b1bf9..a6fa2b8 100644
--- a/tests/unittests/todotxt/test_task.py
+++ b/tests/unittests/todotxt/test_task.py
@@ -95,6 +95,10 @@ class CreationDateTest(unittest.TestCase):
         """ Test an invalid creation date. """
         self.assertEqual(None, todotxt.Task("2018-14-02 Todo").creation_date())
 
+    def test_no_space_after(self):
+        """ Test a creation date without a word boundary. """
+        self.assertEqual(None, todotxt.Task("2018-10-10Todo").creation_date())
+
     def test_single_digits(self):
         """ Test a creation date with single digits for day and/or month. """
         self.assertEqual(datetime.date(2018, 12, 3), todotxt.Task("(B) 2018-12-3 Todo").creation_date())
@@ -106,6 +110,33 @@ class CreationDateTest(unittest.TestCase):
         self.assertTrue(todotxt.Task("9999-01-01 Prepare for five-digit years").is_future())
 
 
+class DueDateTest(unittest.TestCase):
+    """ Unit tests for the due date of tasks. """
+
+    def test_no_due_date(self):
+        """ Test that tasks have no due date by default. """
+        self.assertEqual(None, todotxt.Task("Todo").due_date())
+
+    def test_due_date(self):
+        """ Test a valid due date. """
+        self.assertEqual(datetime.date(2018, 1, 2), todotxt.Task("Todo due:2018-01-02").due_date())
+
+    def test_invalid_date(self):
+        """ Test an invalid due date. """
+        self.assertEqual(None, todotxt.Task("Todo due:2018-01-32").due_date())
+
+    def test_no_space_after(self):
+        """ Test a due date without a word boundary following it. """
+        self.assertEqual(None, todotxt.Task("Todo due:2018-01-023").due_date())
+
+    def test_single_digits(self):
+        """ Test a due date with single digits for day and/or month. """
+        self.assertEqual(datetime.date(2018, 12, 3), todotxt.Task("(B) due:2018-12-3 Todo").due_date())
+        self.assertEqual(datetime.date(2018, 1, 13), todotxt.Task("(B) due:2018-1-13 Todo").due_date())
+        self.assertEqual(datetime.date(2018, 1, 1), todotxt.Task("(B) due:2018-1-1 Todo").due_date())
+
+
+
 class TaskCompletionTest(unittest.TestCase):
     """ Unit tests for the completion status of tasks. """
 
