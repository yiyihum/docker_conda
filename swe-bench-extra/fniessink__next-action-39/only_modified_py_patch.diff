diff --git a/next_action/__init__.py b/next_action/__init__.py
index f916b9e..9aa288e 100644
--- a/next_action/__init__.py
+++ b/next_action/__init__.py
@@ -1,4 +1,4 @@
 """ Main Next-action package. """
 
 __title__ = "next-action"
-__version__ = "0.0.9"
+__version__ = "0.1.0"
diff --git a/next_action/pick_action.py b/next_action/pick_action.py
index a950112..444f65a 100644
--- a/next_action/pick_action.py
+++ b/next_action/pick_action.py
@@ -8,7 +8,7 @@ from .todotxt import Task
 
 def sort_key(task: Task) -> Tuple[str, datetime.date]:
     """ Return the sort key for a task. """
-    return (task.priority() or "ZZZ", task.creation_date() or datetime.date.max)
+    return (task.priority() or "ZZZ", task.due_date() or datetime.date.max, task.creation_date() or datetime.date.max)
 
 
 def next_actions(tasks: Sequence[Task], contexts: Set[str] = None, projects: Set[str] = None) -> Sequence[Task]:
@@ -19,5 +19,5 @@ def next_actions(tasks: Sequence[Task], contexts: Set[str] = None, projects: Set
     tasks_in_context = filter(lambda task: contexts <= task.contexts() if contexts else True, actionable_tasks)
     # Next, select the tasks that belong to at least one of the given projects, if any
     tasks_in_project = filter(lambda task: projects & task.projects() if projects else True, tasks_in_context)
-    # Finally, sort by priority and creation date
+    # Finally, sort by priority, due date and creation date
     return sorted(tasks_in_project, key=sort_key)
diff --git a/next_action/todotxt/task.py b/next_action/todotxt/task.py
index 6ea1319..0ee3042 100644
--- a/next_action/todotxt/task.py
+++ b/next_action/todotxt/task.py
@@ -3,10 +3,14 @@
 import datetime
 import re
 from typing import Optional, Set
+from typing.re import Match  # pylint: disable=import-error
 
 
 class Task(object):
     """ A task from a line in a todo.txt file. """
+
+    iso_date_reg_exp = r"(\d{4})-(\d{1,2})-(\d{1,2})"
+
     def __init__(self, todo_txt: str) -> None:
         self.text = todo_txt
 
@@ -28,13 +32,13 @@ class Task(object):
 
     def creation_date(self) -> Optional[datetime.date]:
         """ Return the creation date of the task. """
-        match = re.match(r"(?:\([A-Z]\) )?(\d{4})-(\d{1,2})-(\d{1,2})", self.text)
-        if match:
-            try:
-                return datetime.date(*(int(group) for group in match.groups()))
-            except ValueError:
-                pass
-        return None
+        match = re.match(r"(?:\([A-Z]\) )?{0}\b".format(self.iso_date_reg_exp), self.text)
+        return self.__create_date(match)
+
+    def due_date(self) -> Optional[datetime.date]:
+        """ Return the due date of the task. """
+        match = re.search(r"\bdue:{0}\b".format(self.iso_date_reg_exp), self.text)
+        return self.__create_date(match)
 
     def is_completed(self) -> bool:
         """ Return whether the task is completed or not. """
@@ -48,3 +52,13 @@ class Task(object):
     def __prefixed_items(self, prefix: str) -> Set[str]:
         """ Return the prefixed items in the task. """
         return {match.group(1) for match in re.finditer(" {0}([^ ]+)".format(prefix), self.text)}
+
+    @staticmethod
+    def __create_date(match: Match) -> Optional[datetime.date]:
+        """ Create a date from the match, if possible. """
+        if match:
+            try:
+                return datetime.date(*(int(group) for group in match.groups()))
+            except ValueError:
+                pass
+        return None
diff --git a/setup.py b/setup.py
index bdbb6cd..67b4fd0 100644
--- a/setup.py
+++ b/setup.py
@@ -24,7 +24,7 @@ and more.""",
     },
     test_suite="tests",
     classifiers=[
-        "Development Status :: 2 - Pre-Alpha",
+        "Development Status :: 3 - Alpha",
         "Environment :: Console",
         "Intended Audience :: End Users/Desktop",
         "License :: OSI Approved :: Apache Software License",

