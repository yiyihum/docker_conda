diff --git a/TexSoup/data.py b/TexSoup/data.py
index 58cd070..8e04c24 100644
--- a/TexSoup/data.py
+++ b/TexSoup/data.py
@@ -593,10 +593,15 @@ class TexNode(object):
         \item Bye
         \end{itemize}
         """
+        for arg in self.expr.args:
+            if child.expr in arg._contents:
+                arg.insert(arg.remove(child.expr), *nodes)
+                return
         self.expr.insert(
             self.expr.remove(child.expr),
             *nodes)
 
+
     def search_regex(self, pattern):
         for node in self.text:
             for match in re.finditer(pattern, node):
@@ -1082,7 +1087,7 @@ class TexCmd(TexExpr):
     def _assert_supports_contents(self):
         if not self._supports_contents():
             raise TypeError(
-                'Command "{}" has no children. `add_contents` is only valid'
+                'Command "{}" has no children. `add_contents` is only valid '
                 'for: 1. environments like `itemize` and 2. `\\item`. '
                 'Alternatively, you can add, edit, or delete arguments by '
                 'modifying `.args`, which behaves like a list.'
diff --git a/TexSoup/reader.py b/TexSoup/reader.py
index fd53989..57bd38e 100644
--- a/TexSoup/reader.py
+++ b/TexSoup/reader.py
@@ -31,7 +31,11 @@ SIGNATURES = {
     'textbf': (1, 0),
     'section': (1, 1),
     'label': (1, 0),
+    'cap': (0, 0),
     'cup': (0, 0),
+    'in': (0, 0),
+    'notin': (0, 0),
+    'infty': (0, 0),
     'noindent': (0, 0),
 }
 
@@ -97,7 +101,7 @@ def read_expr(src, skip_envs=(), tolerance=0, mode=MODE_NON_MATH):
     elif c.category == TC.Escape:
         name, args = read_command(src, tolerance=tolerance, mode=mode)
         if name == 'item':
-            assert mode != MODE_MATH, 'Command \item invalid in math mode.'
+            assert mode != MODE_MATH, r'Command \item invalid in math mode.'
             contents = read_item(src)
             expr = TexCmd(name, contents, args, position=c.position)
         elif name == 'begin':
@@ -278,7 +282,7 @@ def read_env(src, expr, skip_envs=(), tolerance=0, mode=MODE_NON_MATH):
     while src.hasNext():
         if src.peek().category == TC.Escape:
             name, args = make_read_peek(read_command)(
-                src, 1, skip=1, tolerance=tolerance, mode=mode)
+                src, skip=1, tolerance=tolerance, mode=mode)
             if name == 'end':
                 break
         contents.append(read_expr(src, skip_envs=skip_envs, tolerance=tolerance, mode=mode))
diff --git a/TexSoup/tokens.py b/TexSoup/tokens.py
index 492c50e..50e97e2 100644
--- a/TexSoup/tokens.py
+++ b/TexSoup/tokens.py
@@ -123,8 +123,8 @@ def tokenize_escaped_symbols(text, prev=None):
             and text.peek(1) \
             and text.peek(1).category in (
                 CC.Escape, CC.GroupBegin, CC.GroupEnd, CC.MathSwitch,
-                CC.Alignment, CC.Macro, CC.Superscript, CC.Subscript,
-                CC.Spacer, CC.Active, CC.Comment, CC.Other):
+                CC.Alignment, CC.EndOfLine, CC.Macro, CC.Superscript,
+                CC.Subscript, CC.Spacer, CC.Active, CC.Comment, CC.Other):
         result = text.forward(2)
         result.category = TC.EscapedComment
         return result
