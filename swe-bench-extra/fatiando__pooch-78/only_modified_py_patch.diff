diff --git a/pooch/__init__.py b/pooch/__init__.py
index 514b635..2232b12 100644
--- a/pooch/__init__.py
+++ b/pooch/__init__.py
@@ -4,7 +4,7 @@ from . import version
 from .core import Pooch, create
 from .utils import os_cache, file_hash, make_registry, check_version
 from .downloaders import HTTPDownloader
-from .processors import Unzip, Untar
+from .processors import Unzip, Untar, Decompress
 
 
 def test(doctest=True, verbose=True, coverage=False):
diff --git a/pooch/processors.py b/pooch/processors.py
index efa2a1a..eff758a 100644
--- a/pooch/processors.py
+++ b/pooch/processors.py
@@ -3,11 +3,30 @@
 Post-processing hooks for Pooch.fetch
 """
 import os
-
+import sys
+import gzip
+import shutil
 from zipfile import ZipFile
 from tarfile import TarFile
 from warnings import warn
 
+# Try getting the 2.7 backports of lzma and bz2. Can be deleted when dropping 2.7
+if sys.version_info[0] < 3:
+    try:
+        import bz2file as bz2
+    except ImportError:
+        bz2 = None
+else:
+    import bz2
+try:
+    import lzma
+except ImportError:
+    try:
+        from backports import lzma
+    except ImportError:
+        # Make this an optional dependency
+        lzma = None
+
 
 class ExtractorProcessor:  # pylint: disable=too-few-public-methods
     """
@@ -24,6 +43,7 @@ class ExtractorProcessor:  # pylint: disable=too-few-public-methods
         If None, will unpack all files in the archive. Otherwise, *members*
         must be a list of file names to unpack from the archive. Only these
         files will be unpacked.
+
     """
 
     suffix = None  # String appended to unpacked archive. To be implemented in subclass
@@ -92,13 +112,13 @@ class Unzip(ExtractorProcessor):  # pylint: disable=too-few-public-methods
 
     The output folder is ``{fname}.unzip``.
 
-
     Parameters
     ----------
     members : list or None
         If None, will unpack all files in the zip archive. Otherwise, *members* must be
         a list of file names to unpack from the archive. Only these files will be
         unpacked.
+
     """
 
     suffix = ".unzip"
@@ -174,3 +194,110 @@ class Untar(ExtractorProcessor):  # pylint: disable=too-few-public-methods
                             output.write(data_file.read())
                     finally:
                         data_file.close()
+
+
+class Decompress:  # pylint: disable=too-few-public-methods
+    """
+    Processor that decompress a file and returns the decompressed version.
+
+    Use with :meth:`pooch.Pooch.fetch` to decompress a downloaded data file so that it
+    can be easily opened. Useful for data files that take a long time to decompress
+    (exchanging disk space for speed).
+
+    The output file is ``{fname}.decomp``.
+
+    Supported decompression methods are LZMA (``.xz``), bzip2 (``.bz2``), and gzip
+    (``.gz``).
+
+    File names with the standard extensions (see above) can use ``method="auto"`` to
+    automatically determine the compression method. This can be overwritten by setting
+    the *method* argument.
+
+    .. warning::
+
+        With **Python 2.7**, methods "lzma"/"xz" and "bzip2" require extra dependencies
+        to be installed: ``backports.lzma`` for "lzma" and ``bz2file`` for "bzip2".
+
+    Parameters
+    ----------
+    method : str
+        Name of the compression method. Can be "auto", "lzma", "xz", "bzip2", or "gzip".
+
+    """
+
+    modules = {"lzma": lzma, "xz": lzma, "gzip": gzip, "bzip2": bz2}
+
+    def __init__(self, method="auto"):
+        self.method = method
+
+    def __call__(self, fname, action, pooch):
+        """
+        Decompress the given file.
+
+        The output file will be ``fname`` with ``.decomp`` appended to it.
+
+        Parameters
+        ----------
+        fname : str
+            Full path of the compressed file in local storage.
+        action : str
+            Indicates what action was taken by :meth:`pooch.Pooch.fetch`. One of:
+            * ``"download"``: The file didn't exist locally and was downloaded
+            * ``"update"``: The local file was outdated and was re-download
+            * ``"fetch"``: The file exists and is updated so it wasn't downloaded
+        pooch : :class:`pooch.Pooch`
+            The instance of :class:`pooch.Pooch` that is calling this.
+
+        Returns
+        -------
+        fname : str
+            The full path to the decompressed file.
+        """
+        decompressed = fname + ".decomp"
+        if action in ("update", "download") or not os.path.exists(decompressed):
+            warn(
+                "Decompressing '{}' to '{}' using method '{}'.".format(
+                    fname, decompressed, self.method
+                )
+            )
+            module = self._compression_module(fname)
+            with open(decompressed, "w+b") as output:
+                with module.open(fname) as compressed:
+                    shutil.copyfileobj(compressed, output)
+        return decompressed
+
+    def _compression_module(self, fname):
+        """
+        Get the Python compression module compatible with fname and the chosen method.
+
+        If the *method* attribute is "auto", will select a method based on the
+        extension. If no recognized extension is in the file name, will raise a
+        ValueError.
+        """
+        method = self.method
+        if method == "auto":
+            ext = os.path.splitext(fname)[-1]
+            valid_methods = {".xz": "lzma", ".gz": "gzip", ".bz2": "bzip2"}
+            if ext not in valid_methods:
+                raise ValueError(
+                    "Unrecognized extension '{}'. Must be one of '{}'.".format(
+                        ext, list(valid_methods.keys())
+                    )
+                )
+            method = valid_methods[ext]
+        if method not in self.modules:
+            raise ValueError(
+                "Invalid compression method '{}'. Must be one of '{}'.".format(
+                    method, list(self.modules.keys())
+                )
+            )
+        # Check for Python 2.7 extra dependencies
+        if method in ["lzma", "xz"] and self.modules["lzma"] is None:
+            raise ValueError(
+                "LZMA/xz support requires the 'backports.lzma' package in Python 2.7"
+            )
+        if method == "bzip2" and self.modules["bzip2"] is None:
+            raise ValueError(
+                "bzip2 support requires the 'bz2file' package in Python 2.7"
+            )
+        return self.modules[method]

