diff --git a/tests/test_rdf_wrapper.py b/tests/test_rdf_wrapper.py
index cad79be..ef42d0d 100644
--- a/tests/test_rdf_wrapper.py
+++ b/tests/test_rdf_wrapper.py
@@ -1,5 +1,7 @@
 import warnings
+from unittest import mock
 
+import pytest
 import rdflib
 
 from fairworkflows.rdf_wrapper import RdfWrapper
@@ -25,3 +27,30 @@ class TestRdfWrapper:
             assert issubclass(w[-1].category, UserWarning)
 
         assert wrapper.get_attribute(test_predicate) == test_value_2
+
+    def test_publish_as_nanopub_invalid_kwargs(self):
+        wrapper = RdfWrapper(uri='test')
+        with pytest.raises(ValueError):
+            wrapper._publish_as_nanopub(introduces_concept='test')
+        with pytest.raises(ValueError):
+            wrapper._publish_as_nanopub(assertion_rdf='test')
+
+    @mock.patch('fairworkflows.rdf_wrapper.NanopubClient.publish')
+    def test_publish_as_nanopub_with_kwargs(self, nanopub_wrapper_publish_mock):
+        wrapper = RdfWrapper(uri='test')
+        wrapper.rdf.add((rdflib.Literal('test'), rdflib.Literal('test'), rdflib.Literal('test')))
+        # These are kwargs for nanopub.Publication.from_assertion()
+        wrapper._publish_as_nanopub(attribute_assertion_to_profile=True,
+                                    derived_from=rdflib.Literal('test'))
+
+    def test_merge_derived_from(self):
+        wrapper = RdfWrapper(uri='test')
+        result = wrapper._merge_derived_from(user_derived_from='test1', our_derived_from='test2')
+        assert result == ['test1', 'test2']
+
+        result = wrapper._merge_derived_from(user_derived_from=['test1', 'test2'],
+                                             our_derived_from='test3')
+        assert result == ['test1', 'test2', 'test3']
+
+        result = wrapper._merge_derived_from(user_derived_from='test1', our_derived_from=None)
+        assert result == 'test1'
