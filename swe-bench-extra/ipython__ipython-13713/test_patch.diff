diff --git a/IPython/core/tests/test_displayhook.py b/IPython/core/tests/test_displayhook.py
index 6ad897934..22899f3dd 100644
--- a/IPython/core/tests/test_displayhook.py
+++ b/IPython/core/tests/test_displayhook.py
@@ -28,7 +28,7 @@ def test_output_quiet():
     with AssertNotPrints('2'):
         ip.run_cell('1+1;\n#commented_out_function()', store_history=True)
 
-def test_underscore_no_overrite_user():
+def test_underscore_no_overwrite_user():
     ip.run_cell('_ = 42', store_history=True)
     ip.run_cell('1+1', store_history=True)
 
@@ -41,7 +41,7 @@ def test_underscore_no_overrite_user():
         ip.run_cell('_', store_history=True)
 
 
-def test_underscore_no_overrite_builtins():
+def test_underscore_no_overwrite_builtins():
     ip.run_cell("import gettext ; gettext.install('foo')", store_history=True)
     ip.run_cell('3+3', store_history=True)
 
diff --git a/IPython/core/tests/test_history.py b/IPython/core/tests/test_history.py
index 73d50c87d..a9ebafddd 100644
--- a/IPython/core/tests/test_history.py
+++ b/IPython/core/tests/test_history.py
@@ -17,7 +17,7 @@
 # our own packages
 from traitlets.config.loader import Config
 
-from IPython.core.history import HistoryManager, extract_hist_ranges
+from IPython.core.history import HistoryAccessor, HistoryManager, extract_hist_ranges
 
 
 def test_proper_default_encoding():
@@ -227,3 +227,81 @@ def test_histmanager_disabled():
 
     # hist_file should not be created
     assert hist_file.exists() is False
+
+
+def test_get_tail_session_awareness():
+    """Test .get_tail() is:
+        - session specific in HistoryManager
+        - session agnostic in HistoryAccessor
+    same for .get_last_session_id()
+    """
+    ip = get_ipython()
+    with TemporaryDirectory() as tmpdir:
+        tmp_path = Path(tmpdir)
+        hist_file = tmp_path / "history.sqlite"
+        get_source = lambda x: x[2]
+        hm1 = None
+        hm2 = None
+        ha = None
+        try:
+            # hm1 creates a new session and adds history entries,
+            # ha catches up
+            hm1 = HistoryManager(shell=ip, hist_file=hist_file)
+            hm1_last_sid = hm1.get_last_session_id
+            ha = HistoryAccessor(hist_file=hist_file)
+            ha_last_sid = ha.get_last_session_id
+
+            hist1 = ["a=1", "b=1", "c=1"]
+            for i, h in enumerate(hist1 + [""], start=1):
+                hm1.store_inputs(i, h)
+            assert list(map(get_source, hm1.get_tail())) == hist1
+            assert list(map(get_source, ha.get_tail())) == hist1
+            sid1 = hm1_last_sid()
+            assert sid1 is not None
+            assert ha_last_sid() == sid1
+
+            # hm2 creates a new session and adds entries,
+            # ha catches up
+            hm2 = HistoryManager(shell=ip, hist_file=hist_file)
+            hm2_last_sid = hm2.get_last_session_id
+
+            hist2 = ["a=2", "b=2", "c=2"]
+            for i, h in enumerate(hist2 + [""], start=1):
+                hm2.store_inputs(i, h)
+            tail = hm2.get_tail(n=3)
+            assert list(map(get_source, tail)) == hist2
+            tail = ha.get_tail(n=3)
+            assert list(map(get_source, tail)) == hist2
+            sid2 = hm2_last_sid()
+            assert sid2 is not None
+            assert ha_last_sid() == sid2
+            assert sid2 != sid1
+
+            # but hm1 still maintains its point of reference
+            # and adding more entries to it doesn't change others
+            # immediate perspective
+            assert hm1_last_sid() == sid1
+            tail = hm1.get_tail(n=3)
+            assert list(map(get_source, tail)) == hist1
+
+            hist3 = ["a=3", "b=3", "c=3"]
+            for i, h in enumerate(hist3 + [""], start=5):
+                hm1.store_inputs(i, h)
+            tail = hm1.get_tail(n=7)
+            assert list(map(get_source, tail)) == hist1 + [""] + hist3
+            tail = hm2.get_tail(n=3)
+            assert list(map(get_source, tail)) == hist2
+            tail = ha.get_tail(n=3)
+            assert list(map(get_source, tail)) == hist2
+            assert hm1_last_sid() == sid1
+            assert hm2_last_sid() == sid2
+            assert ha_last_sid() == sid2
+        finally:
+            if hm1:
+                hm1.save_thread.stop()
+                hm1.db.close()
+            if hm2:
+                hm2.save_thread.stop()
+                hm2.db.close()
+            if ha:
+                ha.db.close()
