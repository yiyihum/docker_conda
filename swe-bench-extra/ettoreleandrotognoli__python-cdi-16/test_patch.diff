diff --git a/tests/common/boot/__init__.py b/tests/common/boot/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/common/boot/deep/__init__.py b/tests/common/boot/deep/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/common/boot/deep/me_too_cdi.py b/tests/common/boot/deep/me_too_cdi.py
new file mode 100644
index 0000000..a2bdd49
--- /dev/null
+++ b/tests/common/boot/deep/me_too_cdi.py
@@ -0,0 +1,6 @@
+from pycdi import Producer
+
+
+@Producer(str, _context='me_too')
+def producer():
+    return __name__
diff --git a/tests/common/boot/load_me_cdi.py b/tests/common/boot/load_me_cdi.py
new file mode 100644
index 0000000..f7fa3c9
--- /dev/null
+++ b/tests/common/boot/load_me_cdi.py
@@ -0,0 +1,6 @@
+from pycdi import Producer
+
+
+@Producer(str, _context='load_me')
+def producer():
+    return __name__
diff --git a/tests/common/test_boot.py b/tests/common/test_boot.py
new file mode 100644
index 0000000..efede6b
--- /dev/null
+++ b/tests/common/test_boot.py
@@ -0,0 +1,34 @@
+from unittest import TestCase
+
+import os
+
+from pycdi.shortcuts import new
+from pycdi.utils import boot_cdi
+
+DIR = os.path.dirname(__file__)
+
+
+class BootTest(TestCase):
+    def test_boot_with_root(self):
+        expected = [
+            'boot.load_me_cdi',
+            'boot.deep.me_too_cdi',
+        ]
+        boot_cdi(paths=['boot/*_cdi.py', 'boot/deep/*_cdi.py'], root=DIR)
+        result = [
+            new(str, 'load_me'),
+            new(str, 'me_too')
+        ]
+        self.assertEqual(expected, result)
+
+    def test_boot_without_root(self):
+        expected = [
+            'boot.load_me_cdi',
+            'boot.deep.me_too_cdi',
+        ]
+        boot_cdi(paths=['boot/*_cdi.py', 'boot/deep/*_cdi.py'])
+        result = [
+            new(str, 'load_me'),
+            new(str, 'me_too')
+        ]
+        self.assertEqual(expected, result)
diff --git a/tests/common/test_call.py b/tests/common/test_call.py
index 6cb4f85..6ca4097 100644
--- a/tests/common/test_call.py
+++ b/tests/common/test_call.py
@@ -34,3 +34,13 @@ class CallTest(TestCase):
             self.assertIsNotNone(cdi)
 
         self.container.call(django_view, object(), pk=1)
+
+    def test_override_cdi(self):
+        @Inject(cdi=CDIContainer)
+        def django_view(request, pk, cdi):
+            self.assertIsNotNone(request)
+            self.assertIsNotNone(pk)
+            self.assertIsNotNone(cdi)
+            self.assertEqual(cdi, 'fuu')
+
+        self.container.call(django_view, object(), pk=1, cdi='fuu')
