diff --git a/aiosmtpd/__init__.py b/aiosmtpd/__init__.py
index 778795f..d8a299d 100644
--- a/aiosmtpd/__init__.py
+++ b/aiosmtpd/__init__.py
@@ -1,4 +1,4 @@
 # Copyright 2014-2021 The aiosmtpd Developers
 # SPDX-License-Identifier: Apache-2.0
 
-__version__ = "1.4.0"
+__version__ = "1.4.1a1"
diff --git a/aiosmtpd/docs/NEWS.rst b/aiosmtpd/docs/NEWS.rst
index 5cd2841..ac079d4 100644
--- a/aiosmtpd/docs/NEWS.rst
+++ b/aiosmtpd/docs/NEWS.rst
@@ -3,6 +3,15 @@
 ###################
 
 
+1.4.1 (aiosmtpd-next)
+=====================
+
+Fixed/Improved
+--------------
+* Maximum length of email address local part is customizable, defaults to no limit. (Closes #257)
+
+
+
 1.4.0 (2021-02-26)
 ==================
 
diff --git a/aiosmtpd/docs/smtp.rst b/aiosmtpd/docs/smtp.rst
index a1246d8..f48b717 100644
--- a/aiosmtpd/docs/smtp.rst
+++ b/aiosmtpd/docs/smtp.rst
@@ -390,6 +390,16 @@ aiosmtpd.smtp
          :attr:`line_length_limit` to ``2**16`` *before* instantiating the
          :class:`SMTP` class.
 
+   .. py:attribute:: local_part_limit
+
+      The maximum lengh (in octets) of the local part of email addresses.
+
+      :rfc:`RFC 5321 ยง 4.5.3.1.1 <5321#section-4.5.3.1.1>` specifies a maximum length of 64 octets,
+      but this requirement is flexible and can be relaxed at the server's discretion
+      (see :rfc:`ยง 4.5.3.1 <5321#section-4.5.3.1>`).
+
+      Setting this to `0` (the default) disables this limit completely.
+
    .. py:attribute:: AuthLoginUsernameChallenge
 
       A ``str`` containing the base64-encoded challenge to be sent as the first challenge
diff --git a/aiosmtpd/smtp.py b/aiosmtpd/smtp.py
index 702faad..667b4af 100644
--- a/aiosmtpd/smtp.py
+++ b/aiosmtpd/smtp.py
@@ -277,12 +277,19 @@ class SMTP(asyncio.StreamReaderProtocol):
     command_size_limit = 512
     command_size_limits: Dict[str, int] = collections.defaultdict(
         lambda x=command_size_limit: x)
+
     line_length_limit = 1001
     """Maximum line length according to RFC 5321 s 4.5.3.1.6"""
     # The number comes from this calculation:
     # (RFC 5322 s 2.1.1 + RFC 6532 s 3.4) 998 octets + CRLF = 1000 octets
     # (RFC 5321 s 4.5.3.1.6) 1000 octets + "transparent dot" = 1001 octets
 
+    local_part_limit: int = 0
+    """
+    Maximum local part length. (RFC 5321 ยง 4.5.3.1.1 specifies 64, but lenient)
+    If 0 or Falsey, local part length is unlimited.
+    """
+
     AuthLoginUsernameChallenge = "User Name\x00"
     AuthLoginPasswordChallenge = "Password\x00"
 
@@ -455,6 +462,18 @@ class SMTP(asyncio.StreamReaderProtocol):
         except ValueError:
             return self.command_size_limit
 
+    def __del__(self):  # pragma: nocover
+        # This is nocover-ed because the contents *totally* does NOT affect function-
+        # ality, and in addition this comes directly from StreamReaderProtocol.__del__()
+        # but with a getattr()+check addition to stop the annoying (but harmless)
+        # "exception ignored" messages caused by AttributeError when self._closed is
+        # missing (which seems to happen randomly).
+        closed = getattr(self, "_closed", None)
+        if closed is None:
+            return
+        if closed.done() and not closed.cancelled():
+            closed.exception()
+
     def connection_made(self, transport):
         # Reset state due to rfc3207 part 4.2.
         self._set_rset_state()
@@ -1112,10 +1131,9 @@ class SMTP(asyncio.StreamReaderProtocol):
             return None, None
         address = address.addr_spec
         localpart, atsign, domainpart = address.rpartition("@")
-        if len(localpart) > 64:  # RFC 5321 ยง 4.5.3.1.1
+        if self.local_part_limit and len(localpart) > self.local_part_limit:
             return None, None
-        else:
-            return address, rest
+        return address, rest
 
     def _getparams(self, params):
         # Return params as dictionary. Return None if not all parameters
