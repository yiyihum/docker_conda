diff --git a/tests/test_quom/test_last_source_file.py b/tests/test_quom/test_last_source_file.py
index c227c21..7f148d2 100644
--- a/tests/test_quom/test_last_source_file.py
+++ b/tests/test_quom/test_last_source_file.py
@@ -53,7 +53,8 @@ extern int foo;
 
 #include <algorithm>
 
-int foo = 42;"""
+int foo = 42;
+"""
 
 RESULT_NORMAL_WITHOUT_TRIM = """\
 #pragma once
@@ -78,7 +79,8 @@ extern int foo;
 
 #include <algorithm>
 
-int foo = 42;"""
+int foo = 42;
+"""
 
 
 def init():
diff --git a/tests/test_quom/test_line_breaks_when_stitching.py b/tests/test_quom/test_line_breaks_when_stitching.py
new file mode 100644
index 0000000..0bb6c37
--- /dev/null
+++ b/tests/test_quom/test_line_breaks_when_stitching.py
@@ -0,0 +1,98 @@
+from io import StringIO
+from pathlib import Path
+
+from quom import Quom
+
+FILE_MAIN_CPP = """\
+#include "a.hpp"
+int main() {
+    return 0;
+}
+// Stitch Begin
+// End
+"""
+
+FILE_A_HPP = 'int a;'
+
+FILE_A_CPP = """\
+#include "b.hpp"
+#include "c.hpp"
+void mid() {}"""
+
+FILE_B_HPP = 'int b;'
+FILE_C_HPP = 'int c;'
+
+FILE_B_CPP = """\
+#include <b>"""
+
+FILE_C_CPP = """\
+#include <c>"""
+
+RESULT = """\
+int a;
+int main() {
+    return 0;
+}
+// Stitch Begin
+// End
+int b;
+int c;
+void mid() {}
+#include <b>
+#include <c>
+"""
+
+RESULT_STITCH = """\
+int a;
+int main() {
+    return 0;
+}
+int b;
+int c;
+void mid() {}
+#include <b>
+#include <c>
+
+// End
+"""
+
+
+def init():
+    with open('main.hpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_MAIN_CPP)
+
+    with open('a.hpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_A_HPP)
+
+    with open('a.cpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_A_CPP)
+
+    with open('b.hpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_B_HPP)
+
+    with open('b.cpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_B_CPP)
+
+    with open('c.hpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_C_HPP)
+
+    with open('c.cpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_C_CPP)
+
+
+def test_add_line_break_in_stitched_files_if_missing(fs):
+    init()
+
+    dst = StringIO()
+    Quom(Path('main.hpp'), dst)
+
+    assert dst.getvalue() == RESULT
+
+
+def test_add_line_break_in_stitched_files_if_missing_at_stitch_location(fs):
+    init()
+
+    dst = StringIO()
+    Quom(Path('main.hpp'), dst, stitch_format='Stitch Begin')
+
+    assert dst.getvalue() == RESULT_STITCH
