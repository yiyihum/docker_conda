diff --git a/senza/aws.py b/senza/aws.py
index 0f87a7e..e07f65d 100644
--- a/senza/aws.py
+++ b/senza/aws.py
@@ -9,6 +9,7 @@ import yaml
 from botocore.exceptions import ClientError
 from click import FileError
 
+from .exceptions import SecurityGroupNotFound
 from .manaus.boto_proxy import BotoClientProxy
 from .manaus.utils import extract_client_error_code
 from .stack_references import check_file_exceptions
@@ -108,14 +109,14 @@ def resolve_security_group(security_group, region: str):
     if isinstance(security_group, dict):
         sg = resolve_referenced_resource(security_group, region)
         if not sg:
-            raise ValueError('Referenced Security Group "{}" does not exist'.format(security_group))
+            raise SecurityGroupNotFound(security_group)
         return sg
     elif security_group.startswith('sg-'):
         return security_group
     else:
         sg = get_security_group(region, security_group)
         if not sg:
-            raise ValueError('Security Group "{}" does not exist'.format(security_group))
+            raise SecurityGroupNotFound(security_group)
         return sg.id
 
 
diff --git a/senza/error_handling.py b/senza/error_handling.py
index e56378b..32ffb02 100644
--- a/senza/error_handling.py
+++ b/senza/error_handling.py
@@ -15,7 +15,7 @@ from clickclick import fatal_error
 from raven import Client
 
 from .configuration import configuration
-from .exceptions import InvalidDefinition, PiuNotFound
+from .exceptions import InvalidDefinition, PiuNotFound, SecurityGroupNotFound
 from .manaus.exceptions import (ELBNotFound, HostedZoneNotFound, InvalidState,
                                 RecordNotFound)
 from .manaus.utils import extract_client_error_code
@@ -112,7 +112,7 @@ class HandleExceptions:
             sys.stdout.flush()
             if is_credentials_expired_error(client_error):
                 die_fatal_error('AWS credentials have expired.\n'
-                                'Use the "mai" command line tool to get a new '
+                                'Use the "zaws" command line tool to get a new '
                                 'temporary access key.')
             elif is_access_denied_error(client_error):
                 die_fatal_error(
@@ -136,6 +136,10 @@ class HandleExceptions:
         except (ELBNotFound, HostedZoneNotFound, RecordNotFound,
                 InvalidDefinition, InvalidState) as error:
             die_fatal_error(error)
+        except SecurityGroupNotFound as error:
+            message = ("{}\nRun `senza init` to (re-)create "
+                       "the security group.").format(error)
+            die_fatal_error(message)
         except Exception as unknown_exception:
             # Catch All
             self.die_unknown_error(unknown_exception)
diff --git a/senza/exceptions.py b/senza/exceptions.py
index 5b57980..ff84c81 100644
--- a/senza/exceptions.py
+++ b/senza/exceptions.py
@@ -41,3 +41,15 @@ class InvalidDefinition(SenzaException):
     def __str__(self):
         return ("{path} is not a valid senza definition: "
                 "{reason}".format_map(vars(self)))
+
+
+class SecurityGroupNotFound(SenzaException):
+    """
+    Exception raised when a Security Group is not found
+    """
+
+    def __init__(self, security_group: str):
+        self.security_group = security_group
+
+    def __str__(self):
+        return 'Security Group "{}" does not exist.'.format(self.security_group)
