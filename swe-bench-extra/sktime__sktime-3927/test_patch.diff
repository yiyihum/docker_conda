diff --git a/sktime/classification/distance_based/tests/test_time_series_neighbors.py b/sktime/classification/distance_based/tests/test_time_series_neighbors.py
index 60bf880ea..de7afd851 100644
--- a/sktime/classification/distance_based/tests/test_time_series_neighbors.py
+++ b/sktime/classification/distance_based/tests/test_time_series_neighbors.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
-"""Test function of elastic distance nearest neighbour classifiers."""
+"""Tests for KNeighborsTimeSeriesClassifier."""
 import numpy as np
+import pandas as pd
 import pytest
 
 from sktime.alignment.dtw_python import AlignerDTW
@@ -109,3 +110,26 @@ def test_knn_with_aggrdistance():
     clf = KNeighborsTimeSeriesClassifier(distance=aggr_dist)
 
     clf.fit(X, y)
+
+
+def test_knn_kneighbors():
+    """Tests kneighbors method and absence of bug #3798."""
+    from sktime.utils._testing.hierarchical import _make_hierarchical
+
+    Xtrain = _make_hierarchical(hierarchy_levels=(3,), n_columns=3)
+    Xtest = _make_hierarchical(hierarchy_levels=(5,), n_columns=3)
+
+    ytrain = pd.Series(["label_1", "label_2", "label_3"])
+
+    kntsc = KNeighborsTimeSeriesClassifier(n_neighbors=1)
+    kntsc.fit(Xtrain, ytrain)
+
+    ret = kntsc.kneighbors(Xtest)
+    assert isinstance(ret, tuple)
+    assert len(ret) == 2
+
+    dist, ind = ret
+    assert isinstance(dist, np.ndarray)
+    assert dist.shape == (5, 1)
+    assert isinstance(ind, np.ndarray)
+    assert ind.shape == (5, 1)
diff --git a/sktime/regression/distance_based/tests/__init__.py b/sktime/regression/distance_based/tests/__init__.py
new file mode 100644
index 000000000..18fca48ad
--- /dev/null
+++ b/sktime/regression/distance_based/tests/__init__.py
@@ -0,0 +1,2 @@
+# -*- coding: utf-8 -*-
+"""Distance based test code."""
diff --git a/sktime/regression/distance_based/tests/test_time_series_neighbors.py b/sktime/regression/distance_based/tests/test_time_series_neighbors.py
new file mode 100644
index 000000000..6be87cc9c
--- /dev/null
+++ b/sktime/regression/distance_based/tests/test_time_series_neighbors.py
@@ -0,0 +1,31 @@
+# -*- coding: utf-8 -*-
+"""Tests for KNeighborsTimeSeriesRegressor."""
+import numpy as np
+import pandas as pd
+
+from sktime.regression.distance_based._time_series_neighbors import (
+    KNeighborsTimeSeriesRegressor,
+)
+
+
+def test_knn_kneighbors():
+    """Tests kneighbors method and absence of bug #3798."""
+    from sktime.utils._testing.hierarchical import _make_hierarchical
+
+    Xtrain = _make_hierarchical(hierarchy_levels=(3,), n_columns=3)
+    Xtest = _make_hierarchical(hierarchy_levels=(5,), n_columns=3)
+
+    ytrain = pd.Series([1, 1.5, 2])
+
+    kntsc = KNeighborsTimeSeriesRegressor(n_neighbors=1)
+    kntsc.fit(Xtrain, ytrain)
+
+    ret = kntsc.kneighbors(Xtest)
+    assert isinstance(ret, tuple)
+    assert len(ret) == 2
+
+    dist, ind = ret
+    assert isinstance(dist, np.ndarray)
+    assert dist.shape == (5, 1)
+    assert isinstance(ind, np.ndarray)
+    assert ind.shape == (5, 1)
diff --git a/sktime/transformations/series/detrend/tests/test_detrend.py b/sktime/transformations/series/detrend/tests/test_detrend.py
index 4641a3427..50ff9e676 100644
--- a/sktime/transformations/series/detrend/tests/test_detrend.py
+++ b/sktime/transformations/series/detrend/tests/test_detrend.py
@@ -1,17 +1,29 @@
 # -*- coding: utf-8 -*-
 """Test detrenders."""
+import numpy as np
+import pandas as pd
+import pytest
 
-__author__ = ["mloning"]
+from sktime.datasets import load_airline
+from sktime.forecasting.tests.test_trend import get_expected_polynomial_coefs
+from sktime.forecasting.trend import PolynomialTrendForecaster
+from sktime.transformations.series.detrend import Detrender
+
+__author__ = ["mloning", "KishManani"]
 __all__ = []
 
 
-def test_polynomial_detrending():
-    import numpy as np
-    import pandas as pd
+@pytest.fixture()
+def y_series():
+    return load_airline()
+
 
-    from sktime.forecasting.tests.test_trend import get_expected_polynomial_coefs
-    from sktime.forecasting.trend import PolynomialTrendForecaster
-    from sktime.transformations.series.detrend import Detrender
+@pytest.fixture()
+def y_dataframe():
+    return load_airline().to_frame()
+
+
+def test_polynomial_detrending():
 
     y = pd.Series(np.arange(20) * 0.5) + np.random.normal(0, 1, size=20)
     forecaster = PolynomialTrendForecaster(degree=1, with_intercept=True)
@@ -34,3 +46,79 @@ def test_polynomial_detrending():
     actual = transformer.transform(y)
     expected = y - expected_trend
     np.testing.assert_array_almost_equal(actual, expected)
+
+
+def test_multiplicative_detrending_series(y_series):
+    """Tests we get the expected result when setting `model=multiplicative`."""
+    # Load test dataset
+    y = y_series
+
+    # Get the trend
+    forecaster = PolynomialTrendForecaster(degree=1, with_intercept=True)
+    trend = forecaster.fit_predict(y, fh=y.index)
+
+    # De-trend the time series
+    detrender = Detrender(forecaster, model="multiplicative")
+    y_transformed = detrender.fit_transform(y)
+
+    # Compute the expected de-trended time series
+    expected = y / trend
+
+    pd.testing.assert_series_equal(y_transformed, expected)
+
+
+def test_multiplicative_detrending_dataframe(y_dataframe):
+    """Tests we get the expected result when setting `model=multiplicative`."""
+    # Load test dataset
+    y = y_dataframe
+
+    # Get the trend
+    forecaster = PolynomialTrendForecaster(degree=1, with_intercept=True)
+    trend = forecaster.fit_predict(y, fh=y.index)
+
+    # De-trend the time series
+    detrender = Detrender(forecaster, model="multiplicative")
+    y_transformed = detrender.fit_transform(y)
+
+    # Compute the expected de-trended time series
+    expected = y / trend
+
+    pd.testing.assert_frame_equal(y_transformed, expected)
+
+
+def test_additive_detrending_series(y_series):
+    """Tests we get the expected result when setting `model=additive`."""
+    # Load test dataset
+    y = y_series
+
+    # Get the trend
+    forecaster = PolynomialTrendForecaster(degree=1, with_intercept=True)
+    trend = forecaster.fit_predict(y, fh=y.index)
+
+    # De-trend the time series
+    detrender = Detrender(forecaster, model="additive")
+    y_transformed = detrender.fit_transform(y)
+
+    # Compute the expected de-trended time series
+    expected = y - trend
+
+    pd.testing.assert_series_equal(y_transformed, expected)
+
+
+def test_additive_detrending_dataframe(y_dataframe):
+    """Tests we get the expected result when setting `model=additive`."""
+    # Load test dataset
+    y = y_dataframe
+
+    # Get the trend
+    forecaster = PolynomialTrendForecaster(degree=1, with_intercept=True)
+    trend = forecaster.fit_predict(y, fh=y.index)
+
+    # De-trend the time series
+    detrender = Detrender(forecaster, model="additive")
+    y_transformed = detrender.fit_transform(y)
+
+    # Compute the expected de-trended time series
+    expected = y - trend
+
+    pd.testing.assert_frame_equal(y_transformed, expected)
