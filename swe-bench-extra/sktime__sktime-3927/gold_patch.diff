diff --git a/docs/source/get_started.rst b/docs/source/get_started.rst
index ce8ab2dd6..0e6ffc82d 100644
--- a/docs/source/get_started.rst
+++ b/docs/source/get_started.rst
@@ -124,7 +124,7 @@ Time Series Clustering
 
     >>> from sklearn.model_selection import train_test_split
     >>> from sktime.clustering.k_means import TimeSeriesKMeans
-    >>> from sktime.clustering.evaluation._plot_clustering import plot_cluster_algorithm
+    >>> from sktime.clustering.utils.plotting._plot_partitions import plot_cluster_algorithm
     >>> from sktime.datasets import load_arrow_head
 
     >>> X, y = load_arrow_head()
diff --git a/sktime/classification/distance_based/_time_series_neighbors.py b/sktime/classification/distance_based/_time_series_neighbors.py
index 04eabd93f..cf5d91cd7 100644
--- a/sktime/classification/distance_based/_time_series_neighbors.py
+++ b/sktime/classification/distance_based/_time_series_neighbors.py
@@ -263,6 +263,9 @@ class KNeighborsTimeSeriesClassifier(BaseClassifier):
         """
         self.check_is_fitted()
 
+        # boilerplate input checks for predict-like methods
+        X = self._check_convert_X_for_predict(X)
+
         # self._X should be the stored _X
         dist_mat = self._distance(X, self._X)
 
diff --git a/sktime/regression/distance_based/_time_series_neighbors.py b/sktime/regression/distance_based/_time_series_neighbors.py
index 9e286cb2d..7d8e41290 100644
--- a/sktime/regression/distance_based/_time_series_neighbors.py
+++ b/sktime/regression/distance_based/_time_series_neighbors.py
@@ -210,6 +210,11 @@ class KNeighborsTimeSeriesRegressor(BaseRegressor):
         ind : array
             Indices of the nearest points in the population matrix.
         """
+        self.check_is_fitted()
+
+        # boilerplate input checks for predict-like methods
+        X = self._check_convert_X_for_predict(X)
+
         # self._X should be the stored _X
         dist_mat = self._distance(X, self._X)
 
diff --git a/sktime/transformations/series/detrend/_detrend.py b/sktime/transformations/series/detrend/_detrend.py
index b1a32cae9..4a5e84eca 100644
--- a/sktime/transformations/series/detrend/_detrend.py
+++ b/sktime/transformations/series/detrend/_detrend.py
@@ -4,7 +4,7 @@
 """Implements transformations to detrend a time series."""
 
 __all__ = ["Detrender"]
-__author__ = ["mloning", "SveaMeyer13"]
+__author__ = ["mloning", "SveaMeyer13", "KishManani"]
 
 import pandas as pd
 
@@ -38,6 +38,11 @@ class Detrender(BaseTransformer):
         The forecasting model to remove the trend with
             (e.g. PolynomialTrendForecaster).
         If forecaster is None, PolynomialTrendForecaster(degree=1) is used.
+    model : {"additive", "multiplicative"}, default="additive"
+        If `model="additive"` the `forecaster` is fit to the original time
+        series and the `transform` method subtracts the trend from the time series.
+        If `model="multiplicative"` the `forecaster` is fit to the original time
+        series and the `transform` method divides the trend from the time series.
 
     Attributes
     ----------
@@ -74,8 +79,9 @@ class Detrender(BaseTransformer):
         "transform-returns-same-time-index": True,
     }
 
-    def __init__(self, forecaster=None):
+    def __init__(self, forecaster=None, model="additive"):
         self.forecaster = forecaster
+        self.model = model
         self.forecaster_ = None
         super(Detrender, self).__init__()
 
@@ -118,6 +124,10 @@ class Detrender(BaseTransformer):
         else:
             raise TypeError("X must be pd.Series or pd.DataFrame")
 
+        allowed_models = ("additive", "multiplicative")
+        if self.model not in allowed_models:
+            raise ValueError("`model` must be 'additive' or 'multiplicative'")
+
         return self
 
     def _transform(self, X, y=None):
@@ -143,8 +153,10 @@ class Detrender(BaseTransformer):
         if isinstance(X, pd.Series):
             # note: the y in the transformer is exogeneous in the forecaster, i.e., X
             X_pred = self.forecaster_.predict(fh=fh, X=y)
-            Xt = X - X_pred
-            return Xt
+            if self.model == "additive":
+                return X - X_pred
+            elif self.model == "multiplicative":
+                return X / X_pred
         # multivariate: X is pd.DataFrame
         elif isinstance(X, pd.DataFrame):
             Xt = X.copy()
@@ -159,7 +171,10 @@ class Detrender(BaseTransformer):
                 )
             for colname in Xt.columns:
                 X_pred = self.forecaster_[colname].predict(fh=fh, X=y)
-                Xt[colname] = Xt[colname] - X_pred
+                if self.model == "additive":
+                    Xt[colname] = Xt[colname] - X_pred
+                elif self.model == "multiplicative":
+                    Xt[colname] = Xt[colname] / X_pred
             return Xt
         else:
             raise TypeError("X must be pd.Series or pd.DataFrame")
@@ -185,7 +200,10 @@ class Detrender(BaseTransformer):
         if isinstance(X, pd.Series):
             # note: the y in the transformer is exogeneous in the forecaster, i.e., X
             X_pred = self.forecaster_.predict(fh=fh, X=y)
-            return X + X_pred
+            if self.model == "additive":
+                return X + X_pred
+            elif self.model == "multiplicative":
+                return X * X_pred
         # multivariate: X is pd.DataFrame
         if isinstance(X, pd.DataFrame):
             X = X.copy()
@@ -200,7 +218,11 @@ class Detrender(BaseTransformer):
                 )
             for colname in X.columns:
                 X_pred = self.forecaster_[colname].predict(fh=fh, X=y)
-                X[colname] = X[colname] + X_pred
+                if self.model == "additive":
+                    X[colname] = X[colname] + X_pred
+                elif self.model == "multiplicative":
+                    X[colname] = X[colname] * X_pred
+
             return X
 
     def _update(self, X, y=None, update_params=True):
