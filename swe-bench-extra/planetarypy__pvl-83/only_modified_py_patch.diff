diff --git a/pvl/decoder.py b/pvl/decoder.py
index 22382b7..c98dd86 100644
--- a/pvl/decoder.py
+++ b/pvl/decoder.py
@@ -9,7 +9,7 @@ referred to as the Blue Book with a date of June 2000.
 A decoder deals with converting strings given to it (typically
 by the parser) to the appropriate Python type.
 """
-# Copyright 2015, 2017, 2019-2020, ``pvl`` library authors.
+# Copyright 2015, 2017, 2019-2021, ``pvl`` library authors.
 #
 # Reuse is permitted under the terms of the license.
 # The AUTHORS file and the LICENSE file are at the
@@ -17,6 +17,7 @@ by the parser) to the appropriate Python type.
 
 import re
 from datetime import datetime, timedelta, timezone
+from decimal import InvalidOperation
 from itertools import repeat, chain
 from warnings import warn
 
@@ -56,9 +57,12 @@ class PVLDecoder(object):
     :param quantity_cls: defaults to :class:`pvl.collections.Quantity`, but
         could be any class object that takes two arguments, where the
         first is the value, and the second is the units value.
+
+    :param real_cls: defaults to :class:`float`, but could be any class object
+        that can be constructed from a `str` object.
     """
 
-    def __init__(self, grammar=None, quantity_cls=None):
+    def __init__(self, grammar=None, quantity_cls=None, real_cls=None):
         self.errors = []
 
         if grammar is None:
@@ -73,6 +77,11 @@ class PVLDecoder(object):
         else:
             self.quantity_cls = quantity_cls
 
+        if real_cls is None:
+            self.real_cls = float
+        else:
+            self.real_cls = real_cls
+
     def decode(self, value: str):
         """Returns a Python object based on *value*."""
         return self.decode_simple_value(value)
@@ -83,6 +92,15 @@ class PVLDecoder(object):
 
          <Simple-Value> ::= (<Date-Time> | <Numeric> | <String>)
         """
+        if value.casefold() == self.grammar.none_keyword.casefold():
+            return None
+
+        if value.casefold() == self.grammar.true_keyword.casefold():
+            return True
+
+        if value.casefold() == self.grammar.false_keyword.casefold():
+            return False
+
         for d in (
             self.decode_quoted_string,
             self.decode_non_decimal,
@@ -94,15 +112,6 @@ class PVLDecoder(object):
             except ValueError:
                 pass
 
-        if value.casefold() == self.grammar.none_keyword.casefold():
-            return None
-
-        if value.casefold() == self.grammar.true_keyword.casefold():
-            return True
-
-        if value.casefold() == self.grammar.false_keyword.casefold():
-            return False
-
         return self.decode_unquoted_string(value)
 
     def decode_unquoted_string(self, value: str) -> str:
@@ -160,16 +169,18 @@ class PVLDecoder(object):
                 return str(value[1:-1])
         raise ValueError(f'The object "{value}" is not a PVL Quoted String.')
 
-    @staticmethod
-    def decode_decimal(value: str):
-        """Returns a Python ``int`` or ``float`` as appropriate
+    def decode_decimal(self, value: str):
+        """Returns a Python ``int`` or ``self.real_cls`` object, as appropriate
         based on *value*.  Raises a ValueError otherwise.
         """
-        # Returns int or float
+        # Returns int or real_cls
         try:
             return int(value, base=10)
         except ValueError:
-            return float(value)
+            try:
+                return self.real_cls(str(value))
+            except InvalidOperation as err:
+                raise ValueError from err
 
     def decode_non_decimal(self, value: str) -> int:
         """Returns a Python ``int`` as decoded from *value*
@@ -294,13 +305,17 @@ class ODLDecoder(PVLDecoder):
     default to an ODLGrammar() object.
     """
 
-    def __init__(self, grammar=None, quantity_cls=None):
+    def __init__(self, grammar=None, quantity_cls=None, real_cls=None):
         self.errors = []
 
         if grammar is None:
-            super().__init__(grammar=ODLGrammar(), quantity_cls=quantity_cls)
-        else:
-            super().__init__(grammar=grammar, quantity_cls=quantity_cls)
+            grammar = ODLGrammar()
+
+        super().__init__(
+            grammar=grammar,
+            quantity_cls=quantity_cls,
+            real_cls=real_cls
+        )
 
     def decode_datetime(self, value: str):
         """Extends parent function to also deal with datetimes
diff --git a/pvl/encoder.py b/pvl/encoder.py
index 5d8118b..8198fe5 100644
--- a/pvl/encoder.py
+++ b/pvl/encoder.py
@@ -5,7 +5,7 @@ An encoder deals with converting Python objects into
 string values that conform to a PVL specification.
 """
 
-# Copyright 2015, 2019-2020, ``pvl`` library authors.
+# Copyright 2015, 2019-2021, ``pvl`` library authors.
 #
 # Reuse is permitted under the terms of the license.
 # The AUTHORS file and the LICENSE file are at the
@@ -16,6 +16,7 @@ import re
 import textwrap
 
 from collections import abc, namedtuple
+from decimal import Decimal
 from warnings import warn
 
 from .collections import PVLObject, PVLGroup, Quantity
@@ -126,6 +127,9 @@ class PVLEncoder(object):
                 f"group_class ({group_class})."
             )
 
+        # Finally, let's keep track of everything we consider "numerical":
+        self.numeric_types = (int, float, self.decoder.real_cls, Decimal)
+
     def _import_quantities(self):
         warn_str = (
             "The {} library is not present, so {} objects will "
@@ -382,8 +386,8 @@ class PVLEncoder(object):
                 return self.grammar.true_keyword
             else:
                 return self.grammar.false_keyword
-        elif isinstance(value, (int, float)):
-            return repr(value)
+        elif isinstance(value, self.numeric_types):
+            return str(value)
         elif isinstance(value, str):
             return self.encode_string(value)
         else:
@@ -561,8 +565,8 @@ class ODLEncoder(PVLEncoder):
 
         For Python, these correspond to the following:
 
-        * numeric_value: int, float, and Quantity whose value
-          is int or float
+        * numeric_value: any of self.numeric_types, and Quantity whose value
+          is one of the self.numeric_types.
         * date_time_string: datetime objects
         * text_string_value: str
         * symbol_value: str
@@ -570,13 +574,19 @@ class ODLEncoder(PVLEncoder):
         """
         for quant in self.quantities:
             if isinstance(value, quant.cls):
-                if isinstance(getattr(value, quant.value_prop), (int, float)):
+                if isinstance(
+                    getattr(value, quant.value_prop), self.numeric_types
+                ):
                     return True
 
-        if isinstance(
-            value,
-            (int, float, datetime.date, datetime.datetime, datetime.time, str),
-        ):
+        scalar_types = (
+            *self.numeric_types,
+            datetime.date,
+            datetime.datetime,
+            datetime.time,
+            str
+        )
+        if isinstance(value, scalar_types):
             return True
 
         return False
@@ -602,6 +612,15 @@ class ODLEncoder(PVLEncoder):
                 if fe in value:
                     return False
 
+            if len(value) > self.width / 2:
+                # This means that the string is long and it is very
+                # likely to get wrapped and have carriage returns,
+                # and thus "ODL Format Effectors" inserted later.
+                # Unfortunately, without knowing the width of the
+                # parameter term, and the current indent level, this
+                # still may end up being incorrect threshhold.
+                return False
+
             if value.isprintable() and len(value) > 0:  # Item 3
                 return True
         else:
@@ -711,7 +730,10 @@ class ODLEncoder(PVLEncoder):
         """
         for quant in self.quantities:
             if isinstance(value, quant.cls):
-                if isinstance(getattr(value, quant.value_prop), (int, float)):
+                if isinstance(
+                    getattr(value, quant.value_prop),
+                    self.numeric_types
+                ):
                     return super().encode_value(value)
                 else:
                     raise ValueError(

