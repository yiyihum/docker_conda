diff --git a/CHANGES b/CHANGES
index fa1716688..8dcca2ba6 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,7 @@
 Upcoming release (0.14.1)
 =========================
 
+* FIX: Errors parsing ``$DISPLAY`` (https://github.com/nipy/nipype/pull/2363)
 * FIX: MultiProc starting workers at dubious wd (https://github.com/nipy/nipype/pull/2368)
 * REF+FIX: Move BIDSDataGrabber to `interfaces.io` + fix correct default behavior (https://github.com/nipy/nipype/pull/2336)
 * ENH: Add AFNI interface for 3dConvertDset (https://github.com/nipy/nipype/pull/2337)
diff --git a/nipype/interfaces/spm/preprocess.py b/nipype/interfaces/spm/preprocess.py
index 7dd47ef46..47c9fd77a 100644
--- a/nipype/interfaces/spm/preprocess.py
+++ b/nipype/interfaces/spm/preprocess.py
@@ -125,8 +125,7 @@ class SliceTiming(SPMCommand):
 
 class RealignInputSpec(SPMCommandInputSpec):
     in_files = InputMultiPath(
-        traits.Either(
-            traits.List(ImageFileSPM(exists=True)), ImageFileSPM(exists=True)),
+        ImageFileSPM(exists=True),
         field='data',
         mandatory=True,
         copyfile=True,
diff --git a/nipype/utils/config.py b/nipype/utils/config.py
index 15264b9ed..30b826d23 100644
--- a/nipype/utils/config.py
+++ b/nipype/utils/config.py
@@ -312,11 +312,11 @@ class NipypeConfig(object):
             def _mock():
                 pass
 
-            # Store a fake Xvfb object
-            ndisp = int(sysdisplay.split(':')[-1])
+            # Store a fake Xvfb object. Format - <host>:<display>[.<screen>]
+            ndisp = sysdisplay.split(':')[-1].split('.')[0]
             Xvfb = namedtuple('Xvfb', ['new_display', 'stop'])
-            self._display = Xvfb(ndisp, _mock)
-            return sysdisplay
+            self._display = Xvfb(int(ndisp), _mock)
+            return self.get_display()
         else:
             if 'darwin' in sys.platform:
                 raise RuntimeError(
@@ -343,8 +343,7 @@ class NipypeConfig(object):
             if not hasattr(self._display, 'new_display'):
                 setattr(self._display, 'new_display',
                         self._display.vdisplay_num)
-
-            return ':%d' % self._display.new_display
+            return self.get_display()
 
     def stop_display(self):
         """Closes the display if started"""
