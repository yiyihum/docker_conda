diff --git a/src/ZPublisher/tests/testHTTPRequest.py b/src/ZPublisher/tests/testHTTPRequest.py
index 0dafba669..d7fe18e4d 100644
--- a/src/ZPublisher/tests/testHTTPRequest.py
+++ b/src/ZPublisher/tests/testHTTPRequest.py
@@ -31,7 +31,6 @@ from zope.publisher.interfaces.http import IHTTPRequest
 from zope.testing.cleanup import cleanUp
 from ZPublisher.HTTPRequest import BadRequest
 from ZPublisher.HTTPRequest import FileUpload
-from ZPublisher.HTTPRequest import LimitedFileReader
 from ZPublisher.HTTPRequest import search_type
 from ZPublisher.interfaces import IXmlrpcChecker
 from ZPublisher.tests.testBaseRequest import TestRequestViewsBase
@@ -1515,15 +1514,6 @@ class HTTPRequestTests(unittest.TestCase, HTTPRequestFactoryMixin):
         self.assertEqual(req["x"], "äöü")
         self.assertEqual(req["y"], "äöü")
 
-    def test_content_length_limitation(self):
-        body = b"123abc"
-        env = self._makePostEnviron(body)
-        env["CONTENT_TYPE"] = "application/octed-stream"
-        env["CONTENT_LENGTH"] = "3"
-        req = self._makeOne(_Unseekable(BytesIO(body)), env)
-        req.processInputs()
-        self.assertEqual(req["BODY"], b"123")
-
 
 class TestHTTPRequestZope3Views(TestRequestViewsBase):
 
@@ -1580,48 +1570,6 @@ class TestSearchType(unittest.TestCase):
         self.check("abc:a-_0b", ":a-_0b")
 
 
-class TestLimitedFileReader(unittest.TestCase):
-    def test_enforce_limit(self):
-        f = LimitedFileReader(BytesIO(), 10)
-        enforce = f._enforce_limit
-        self.assertEqual(enforce(None), 10)
-        self.assertEqual(enforce(-1), 10)
-        self.assertEqual(enforce(20), 10)
-        self.assertEqual(enforce(5), 5)
-
-    def test_read(self):
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        self.assertEqual(len(f.read()), 10)
-        self.assertEqual(len(f.read()), 0)
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        self.assertEqual(len(f.read(8)), 8)
-        self.assertEqual(len(f.read(3)), 2)
-        self.assertEqual(len(f.read(3)), 0)
-
-    def test_readline(self):
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        self.assertEqual(f.readline(), b"123\n")
-        self.assertEqual(f.readline(), b"567\n")
-        self.assertEqual(f.readline(), b"90")
-        self.assertEqual(f.readline(), b"")
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        self.assertEqual(f.readline(1), b"1")
-
-    def test_iteration(self):
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        self.assertEqual(list(f), [b"123\n", b"567\n", b"90"])
-
-    def test_del(self):
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        del f
-
-    def test_delegation(self):
-        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
-        with self.assertRaises(AttributeError):
-            f.write
-        f.close()
-
-
 class _Unseekable:
     """Auxiliary class emulating an unseekable file like object"""
     def __init__(self, file):
diff --git a/src/ZPublisher/tests/test_pastefilter.py b/src/ZPublisher/tests/test_pastefilter.py
new file mode 100644
index 000000000..91f79b1cf
--- /dev/null
+++ b/src/ZPublisher/tests/test_pastefilter.py
@@ -0,0 +1,87 @@
+##############################################################################
+#
+# Copyright (c) 2023 Zope Foundation and Contributors.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+import unittest
+from io import BytesIO
+
+from paste.deploy import loadfilter
+
+from ..pastefilter import LimitedFileReader
+
+
+class TestLimitedFileReader(unittest.TestCase):
+    def test_enforce_limit(self):
+        f = LimitedFileReader(BytesIO(), 10)
+        enforce = f._enforce_limit
+        self.assertEqual(enforce(None), 10)
+        self.assertEqual(enforce(-1), 10)
+        self.assertEqual(enforce(20), 10)
+        self.assertEqual(enforce(5), 5)
+
+    def test_read(self):
+        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
+        self.assertEqual(len(f.read()), 10)
+        self.assertEqual(len(f.read()), 0)
+        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
+        self.assertEqual(len(f.read(8)), 8)
+        self.assertEqual(len(f.read(3)), 2)
+        self.assertEqual(len(f.read(3)), 0)
+
+    def test_readline(self):
+        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
+        self.assertEqual(f.readline(), b"123\n")
+        self.assertEqual(f.readline(), b"567\n")
+        self.assertEqual(f.readline(), b"90")
+        self.assertEqual(f.readline(), b"")
+        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
+        self.assertEqual(f.readline(1), b"1")
+
+    def test_iteration(self):
+        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
+        self.assertEqual(list(f), [b"123\n", b"567\n", b"90"])
+
+    def test_discard_remaining(self):
+        fp = BytesIO(b"123\n567\n901\n")
+        LimitedFileReader(fp, 10).discard_remaining()
+        self.assertEqual(fp.read(), b"1\n")
+
+    def test_delegation(self):
+        f = LimitedFileReader(BytesIO(b"123\n567\n901\n"), 10)
+        with self.assertRaises(AttributeError):
+            f.write
+        f.close()
+
+
+class TestFilters(unittest.TestCase):
+    def test_content_length(self):
+        filter = loadfilter("egg:Zope", "content_length")
+
+        def app(env, start_response):
+            return iter((env["wsgi.input"],))
+
+        def request(env, app=filter(app)):
+            return app(env, None)
+
+        fp = BytesIO()
+        env = {"wsgi.input": fp}
+        self.assertIs(next(request(env)), fp)
+
+        fp = BytesIO(b"123")
+        env = {"wsgi.input": fp}
+        env["CONTENT_LENGTH"] = "3"
+        response = request(env)
+        r = next(response)
+        self.assertIsInstance(r, LimitedFileReader)
+        self.assertEqual(r.limit, 3)
+        with self.assertRaises(StopIteration):
+            next(response)
+        self.assertFalse(fp.read())
