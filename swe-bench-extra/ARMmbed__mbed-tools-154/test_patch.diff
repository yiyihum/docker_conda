diff --git a/tests/build/test_build.py b/tests/build/test_build.py
index b9d32af..5293966 100644
--- a/tests/build/test_build.py
+++ b/tests/build/test_build.py
@@ -2,45 +2,60 @@
 # Copyright (C) 2020 Arm Mbed. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
-import pathlib
+import subprocess
 
-from tempfile import TemporaryDirectory
-from unittest import TestCase, mock
+from unittest import mock
+
+import pytest
 
 from mbed_tools.build.build import build_project, generate_build_system
 from mbed_tools.build.exceptions import MbedBuildError
 
 
-class TestBuildProject(TestCase):
-    @mock.patch("mbed_tools.build.build._cmake_wrapper")
-    def test_invokes_cmake_with_correct_args(self, cmake_wrapper):
+@pytest.fixture
+def subprocess_run():
+    with mock.patch("mbed_tools.build.build.subprocess.run", autospec=True) as subproc:
+        yield subproc
+
+
+class TestBuildProject:
+    def test_invokes_cmake_with_correct_args(self, subprocess_run):
         build_project(build_dir="cmake_build", target="install")
 
-        cmake_wrapper.assert_called_once_with("--build", "cmake_build", "--target", "install")
+        subprocess_run.assert_called_with(["cmake", "--build", "cmake_build", "--target", "install"], check=True)
 
-    @mock.patch("mbed_tools.build.build._cmake_wrapper")
-    def test_invokes_cmake_with_correct_args_if_no_target_passed(self, cmake_wrapper):
+    def test_invokes_cmake_with_correct_args_if_no_target_passed(self, subprocess_run):
         build_project(build_dir="cmake_build")
 
-        cmake_wrapper.assert_called_once_with("--build", "cmake_build")
+        subprocess_run.assert_called_with(["cmake", "--build", "cmake_build"], check=True)
 
-    def test_raises_build_error_if_build_dir_doesnt_exist(self):
-        with TemporaryDirectory() as tmp_dir:
-            nonexistent_build_dir = pathlib.Path(tmp_dir, "cmake_build")
+    def test_raises_build_error_if_cmake_invocation_fails(self, subprocess_run):
+        subprocess_run.side_effect = (None, subprocess.CalledProcessError(1, ""))
 
-            with self.assertRaises(MbedBuildError):
-                build_project(nonexistent_build_dir)
+        with pytest.raises(MbedBuildError, match="CMake invocation failed"):
+            build_project(build_dir="cmake_build")
 
 
-@mock.patch("mbed_tools.build.build._cmake_wrapper")
-class TestConfigureProject(TestCase):
-    def test_invokes_cmake_with_correct_args(self, cmake_wrapper):
+class TestConfigureProject:
+    def test_invokes_cmake_with_correct_args(self, subprocess_run):
         source_dir = "source_dir"
         build_dir = "cmake_build"
         profile = "debug"
 
         generate_build_system(source_dir, build_dir, profile)
 
-        cmake_wrapper.assert_called_once_with(
-            "-S", source_dir, "-B", build_dir, "-GNinja", f"-DCMAKE_BUILD_TYPE={profile}"
+        subprocess_run.assert_called_with(
+            ["cmake", "-S", source_dir, "-B", build_dir, "-GNinja", f"-DCMAKE_BUILD_TYPE={profile}"], check=True
         )
+
+    def test_raises_when_ninja_cannot_be_found(self, subprocess_run):
+        subprocess_run.side_effect = FileNotFoundError
+
+        with pytest.raises(MbedBuildError, match="Ninja"):
+            generate_build_system("", "", "")
+
+    def test_raises_when_cmake_cannot_be_found(self, subprocess_run):
+        subprocess_run.side_effect = (None, FileNotFoundError)
+
+        with pytest.raises(MbedBuildError, match="Could not find CMake"):
+            generate_build_system("", "", "")
