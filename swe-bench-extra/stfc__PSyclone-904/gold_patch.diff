diff --git a/changelog b/changelog
index a1faa0681..9d3e2351a 100644
--- a/changelog
+++ b/changelog
@@ -100,7 +100,7 @@
 
         34) #823 for #471. Updates the access from INC to READWRITE for
         those kernels that loop over DoFs.
-	
+
 	35) #872 for #736 and #858. Routine Symbols are captured by the Fortran
 	front-end when parsing a Container.
 
@@ -126,6 +126,9 @@
 	provided about a symbol and replace the symbol latter on if more information
 	if found.
 
+	42) #904 for #903. Fixed an error in handling use statements (a
+	symbol clash when there should not be one).
+
 release 1.9.0 20th May 2020
 
 	1) #602 for #597. Modify Node.ancestor() to optionally include
diff --git a/src/psyclone/psyir/frontend/fparser2.py b/src/psyclone/psyir/frontend/fparser2.py
index e279263a9..9d16e1e54 100644
--- a/src/psyclone/psyir/frontend/fparser2.py
+++ b/src/psyclone/psyir/frontend/fparser2.py
@@ -1188,14 +1188,18 @@ class Fparser2Reader(object):
                     # will replace a previous import with an empty only-list.
                     pass
                 for name in decl.items[4].items:
-                    # The DataSymbol adds itself to the list of symbols
-                    # imported by the Container referenced in the
-                    # GlobalInterface.
                     sym_name = str(name).lower()
                     if sym_name not in parent.symbol_table:
+                        # We're dealing with a symbol named in a use statement
+                        # in the *current* scope therefore we do not check
+                        # any ancestor symbol tables; we just create a
+                        # new symbol. Since we don't yet know anything about
+                        # this symbol apart from its name we create a generic
+                        # Symbol.
                         parent.symbol_table.add(
                             Symbol(sym_name,
-                                   interface=GlobalInterface(container)))
+                                   interface=GlobalInterface(container)),
+                            check_ancestors=False)
                     else:
                         # There's already a symbol with this name
                         existing_symbol = parent.symbol_table.lookup(
