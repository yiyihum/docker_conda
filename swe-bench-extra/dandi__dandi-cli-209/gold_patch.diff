diff --git a/dandi/cli/cmd_download.py b/dandi/cli/cmd_download.py
index 32b1b481..e44e1c7d 100644
--- a/dandi/cli/cmd_download.py
+++ b/dandi/cli/cmd_download.py
@@ -4,6 +4,29 @@ import click
 from .base import devel_option, map_to_click_exceptions
 
 
+class ChoiceList(click.ParamType):
+    name = "choice-list"
+
+    def __init__(self, values):
+        self.values = set(values)
+
+    def convert(self, value, param, ctx):
+        if value is None or isinstance(value, set):
+            return value
+        selected = set()
+        for v in value.split(","):
+            if v == "all":
+                selected = self.values.copy()
+            elif v in self.values:
+                selected.add(v)
+            else:
+                self.fail(f"{v!r}: invalid value", param, ctx)
+        return selected
+
+    def get_metavar(self, param):
+        return "[" + ",".join(self.values) + ",all]"
+
+
 @click.command()
 @click.option(
     "-o",
@@ -39,6 +62,14 @@ from .base import devel_option, map_to_click_exceptions
     default=6,  # TODO: come up with smart auto-scaling etc
     show_default=True,
 )
+@click.option(
+    "--download",
+    "download_types",
+    type=ChoiceList(["dandiset.yaml", "assets"]),
+    help="Comma-separated list of elements to download",
+    default="all",
+    show_default=True,
+)
 # Might be a cool feature, not unlike verifying a checksum, we verify that
 # downloaded file passes the validator, and if not -- alert
 # @click.option(
@@ -55,16 +86,19 @@ from .base import devel_option, map_to_click_exceptions
 )
 @click.argument("url", nargs=-1)
 @map_to_click_exceptions
-def download(url, output_dir, existing, jobs, format):
+def download(url, output_dir, existing, jobs, format, download_types):
     """Download a file or entire folder from DANDI"""
-    # First boring attempt at click commands being merely an interface to
-    # Python function
-    from ..download import download
+    # We need to import the download module rather than the download function
+    # so that the tests can properly patch the function with a mock.
+    from .. import download
 
-    return download(
+    return download.download(
         url,
         output_dir,
         existing=existing,
         format=format,
-        jobs=jobs,  # develop_debug=develop_debug
+        jobs=jobs,
+        get_metadata="dandiset.yaml" in download_types,
+        get_assets="assets" in download_types,
+        # develop_debug=develop_debug
     )
diff --git a/dandi/download.py b/dandi/download.py
index 28c768d9..92bebded 100644
--- a/dandi/download.py
+++ b/dandi/download.py
@@ -263,7 +263,16 @@ parse_dandi_url = _dandi_url_parser.parse
 follow_redirect = _dandi_url_parser.follow_redirect
 
 
-def download(urls, output_dir, *, format="pyout", existing="error", jobs=1):
+def download(
+    urls,
+    output_dir,
+    *,
+    format="pyout",
+    existing="error",
+    jobs=1,
+    get_metadata=True,
+    get_assets=True,
+):
     # TODO: unduplicate with upload. For now stole from that one
     # We will again use pyout to provide a neat table summarizing our progress
     # with upload etc
@@ -289,7 +298,14 @@ def download(urls, output_dir, *, format="pyout", existing="error", jobs=1):
         # It could handle delegated to generator downloads
         kw["yield_generator_for_fields"] = rec_fields[1:]  # all but path
 
-    gen_ = download_generator(urls, output_dir, existing=existing, **kw)
+    gen_ = download_generator(
+        urls,
+        output_dir,
+        existing=existing,
+        get_metadata=get_metadata,
+        get_assets=get_assets,
+        **kw,
+    )
 
     # TODOs:
     #  - redo frontends similarly to how command_ls did it
@@ -316,6 +332,8 @@ def download_generator(
     assets_it=None,
     yield_generator_for_fields=None,
     existing="error",
+    get_metadata=True,
+    get_assets=True,
 ):
     """A generator for downloads of files, folders, or entire dandiset from DANDI
     (as identified by URL)
@@ -382,7 +400,7 @@ def download_generator(
         # more efficient download if files are just renamed etc
 
         # Handle our so special dandiset.yaml
-        if dandiset:
+        if dandiset and get_metadata:
             for resp in _populate_dandiset_yaml(
                 dandiset_path,
                 dandiset.get("metadata", {}).get("dandiset", {}),
@@ -390,6 +408,9 @@ def download_generator(
             ):
                 yield dict(path=dandiset_metadata_file, **resp)
 
+        if not get_assets:
+            return
+
         for asset in assets:
             # unavoidable ugliness since girder and API have different "scopes" for
             # identifying an asset
