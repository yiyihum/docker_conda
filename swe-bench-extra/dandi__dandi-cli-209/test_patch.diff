diff --git a/dandi/cli/tests/test_download.py b/dandi/cli/tests/test_download.py
new file mode 100644
index 00000000..697ba9a1
--- /dev/null
+++ b/dandi/cli/tests/test_download.py
@@ -0,0 +1,73 @@
+import os
+import click
+from click.testing import CliRunner
+from ..command import download
+
+
+def test_download_defaults(mocker):
+    mock_download = mocker.patch("dandi.download.download")
+    r = CliRunner().invoke(download)
+    assert r.exit_code == 0
+    mock_download.assert_called_once_with(
+        (),
+        os.curdir,
+        existing="refresh",
+        format="pyout",
+        jobs=6,
+        get_metadata=True,
+        get_assets=True,
+    )
+
+
+def test_download_all_types(mocker):
+    mock_download = mocker.patch("dandi.download.download")
+    r = CliRunner().invoke(download, ["--download", "all"])
+    assert r.exit_code == 0
+    mock_download.assert_called_once_with(
+        (),
+        os.curdir,
+        existing="refresh",
+        format="pyout",
+        jobs=6,
+        get_metadata=True,
+        get_assets=True,
+    )
+
+
+def test_download_metadata_only(mocker):
+    mock_download = mocker.patch("dandi.download.download")
+    r = CliRunner().invoke(download, ["--download", "dandiset.yaml"])
+    assert r.exit_code == 0
+    mock_download.assert_called_once_with(
+        (),
+        os.curdir,
+        existing="refresh",
+        format="pyout",
+        jobs=6,
+        get_metadata=True,
+        get_assets=False,
+    )
+
+
+def test_download_assets_only(mocker):
+    mock_download = mocker.patch("dandi.download.download")
+    r = CliRunner().invoke(download, ["--download", "assets"])
+    assert r.exit_code == 0
+    mock_download.assert_called_once_with(
+        (),
+        os.curdir,
+        existing="refresh",
+        format="pyout",
+        jobs=6,
+        get_metadata=False,
+        get_assets=True,
+    )
+
+
+def test_download_bad_type(mocker):
+    mock_download = mocker.patch("dandi.download.download")
+    r = CliRunner().invoke(download, ["--download", "foo"], standalone_mode=False)
+    assert r.exit_code != 0
+    assert isinstance(r.exception, click.UsageError)
+    assert str(r.exception) == "'foo': invalid value"
+    mock_download.assert_not_called()
diff --git a/dandi/tests/test_download.py b/dandi/tests/test_download.py
index 2d87607c..9bf65193 100644
--- a/dandi/tests/test_download.py
+++ b/dandi/tests/test_download.py
@@ -220,6 +220,38 @@ def test_download_000027(url, tmpdir):
     download(url, tmpdir, existing="refresh")  # TODO: check that skipped (the same)
 
 
+@pytest.mark.parametrize(
+    "url",
+    [  # Should go through API
+        "https://dandiarchive.org/dandiset/000027/0.200721.2222",
+        # Drafts do not go through API ATM, but that should not be visible to user
+        "https://dandiarchive.org/dandiset/000027/draft",
+    ],
+)
+def test_download_000027_metadata_only(url, tmpdir):
+    ret = download(url, tmpdir, get_assets=False)
+    assert not ret  # we return nothing ATM, might want to "generate"
+    dsdir = tmpdir / "000027"
+    downloads = (x.relto(dsdir) for x in dsdir.visit())
+    assert sorted(downloads) == ["dandiset.yaml"]
+
+
+@pytest.mark.parametrize(
+    "url",
+    [  # Should go through API
+        "https://dandiarchive.org/dandiset/000027/0.200721.2222",
+        # Drafts do not go through API ATM, but that should not be visible to user
+        "https://dandiarchive.org/dandiset/000027/draft",
+    ],
+)
+def test_download_000027_assets_only(url, tmpdir):
+    ret = download(url, tmpdir, get_metadata=False)
+    assert not ret  # we return nothing ATM, might want to "generate"
+    dsdir = tmpdir / "000027"
+    downloads = (x.relto(dsdir) for x in dsdir.visit())
+    assert sorted(downloads) == ["sub-RAT123", op.join("sub-RAT123", "sub-RAT123.nwb")]
+
+
 def test_girder_tqdm(monkeypatch):
     # smoke test to ensure we do not blow up
     def raise_assertion_error(*args, **kwargs):
