diff --git a/tests/test_integration.py b/tests/test_integration.py
index c2e264a..998237b 100644
--- a/tests/test_integration.py
+++ b/tests/test_integration.py
@@ -3,6 +3,7 @@ import datetime
 import io
 import os
 import pathlib
+import ssl
 import sys
 import tarfile
 import time
@@ -70,6 +71,17 @@ async def test_ssl_context(monkeypatch):
     docker = Docker()
     assert docker.connector._ssl
     await docker.close()
+    with pytest.raises(TypeError):
+        docker = Docker(ssl_context="bad ssl context")
+    ssl_ctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
+    ssl_ctx.set_ciphers(ssl._RESTRICTED_SERVER_CIPHERS)
+    ssl_ctx.load_verify_locations(cafile=str(cert_dir / "ca.pem"))
+    ssl_ctx.load_cert_chain(
+        certfile=str(cert_dir / "cert.pem"), keyfile=str(cert_dir / "key.pem")
+    )
+    docker = Docker(ssl_context=ssl_ctx)
+    assert docker.connector._ssl
+    await docker.close()
 
 
 @pytest.mark.skipif(
@@ -228,6 +240,30 @@ async def test_attach_nontty(docker, image_name, make_container, stderr):
         assert data.strip() == b"Hello"
 
 
+@pytest.mark.asyncio
+async def test_attach_nontty_wait_for_exit(docker, image_name, make_container):
+    cmd = ["python", "-c", "import time; time.sleep(3); print('Hello')"]
+
+    config = {
+        "Cmd": cmd,
+        "Image": image_name,
+        "AttachStdin": False,
+        "AttachStdout": False,
+        "AttachStderr": False,
+        "Tty": False,
+        "OpenStdin": False,
+        "StdinOnce": False,
+    }
+
+    container = await make_container(
+        config,
+        name="aiodocker-testing-attach-nontty-wait-for-exit",
+    )
+
+    async with container.attach(stdin=False, stdout=True, stderr=True):
+        await asyncio.sleep(10)
+
+
 @pytest.mark.asyncio
 async def test_attach_tty(docker, image_name, make_container):
     skip_windows()
