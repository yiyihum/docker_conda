diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 9632a9f..8636412 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -6,6 +6,13 @@ Change Log
 
 This document records the main changes to the sdss_access code.
 
+1.0.1 (unreleased)
+------------------
+
+- Bug Fix :issue:`16` - HttpAccess used in public mode checks for netrc file
+- Combines separate `set_auth` methods in `BaseAccess` and `HttpAccess` into a single `set_auth` available as `AuthMixin`
+- `Auth.set_netrc` now raises an `AccessError` on failure to find a value netrc file.
+
 1.0.0 (2020-05-07)
 ------------------
 
diff --git a/python/sdss_access/sync/__init__.py b/python/sdss_access/sync/__init__.py
index ddf2c1f..7519b10 100644
--- a/python/sdss_access/sync/__init__.py
+++ b/python/sdss_access/sync/__init__.py
@@ -1,4 +1,4 @@
-from .auth import Auth
+from .auth import Auth, AuthMixin
 from .cli import Cli
 from .stream import Stream
 from .http import HttpAccess
diff --git a/python/sdss_access/sync/auth.py b/python/sdss_access/sync/auth.py
index deb281c..91dfbbe 100644
--- a/python/sdss_access/sync/auth.py
+++ b/python/sdss_access/sync/auth.py
@@ -1,15 +1,19 @@
 from __future__ import absolute_import, division, print_function, unicode_literals
 from six.moves import input
 from sdss_access import is_posix
+from sdss_access.path import AccessError
 from os.path import join
 from os import environ
 
 
 class Auth(object):
+    ''' class for setting up SAS authenticaton for SDSS users '''
 
     def __init__(self, netloc=None, public=False, verbose=False):
         self.public = public
         self.verbose = verbose
+        self.username = None
+        self.password = None
         self.set_netloc(netloc=netloc)
         self.set_netrc()
 
@@ -24,52 +28,109 @@ class Auth(object):
             Windows: recommending _netrc following
             https://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows-to-save-user-and-password
         """
+        # set blank netrc
+        self.netrc = None
+
+        # if public do nothing
+        if self.public:
+            return
+
+        # try to get the netrc file
         try:
             from netrc import netrc
         except Exception as e:
             netrc = None
             if self.verbose:
-                print("SDSS_ACCESS> AUTH NETRC: %r" % e)
+                print("SDSS_ACCESS> AUTH NETRC: {0}".format(e))
+
         if netrc:
-            file = join(environ['HOME'], "_netrc") if not is_posix else None
+            netfile = join(environ['HOME'], "_netrc") if not is_posix else None
             try:
-                self.netrc = netrc(file) if not self.public else None
-            except Exception as e:
-                print("SDSS_ACCESS> Error %r" % e)
-        else:
-            self.netrc = None
+                self.netrc = netrc(netfile)
+            except FileNotFoundError as e:
+                raise AccessError("No netrc file found. Please create one. {0}".format(e))
 
     def set_netloc(self, netloc=None):
+        ''' sets the url domain location '''
         self.netloc = netloc
 
-    def set_username(self, username=None, inquire=False):
+    def set_username(self, username=None, inquire=None):
+        ''' sets the authentication username
+
+        Parameters:
+            username: str
+                The username for SDSS SAS access
+            inquire: bool
+                If True, prompts for input of username.
+        '''
         self.username = input("user [sdss]: ") or "sdss" if inquire else username
 
-    def set_password(self, password=None, inquire=False):
+    def set_password(self, password=None, inquire=None):
+        ''' sets the authentication password
+
+        Parameters:
+            password: str
+                The password for SDSS SAS access
+            inquire: bool
+                If True, prompts for input of password.
+        '''
         try:
             from getpass import getpass
             self.password = getpass("password: ") if inquire else password
         except Exception as e:
             if self.verbose:
-                print("SDSS_ACCESS> AUTH PASSWORD: %r" % e)
+                print("SDSS_ACCESS> AUTH PASSWORD: {0}".format(e))
             self.password = None
 
     def ready(self):
         return self.username and self.password
 
     def load(self):
+        ''' Sets the username and password from the local netrc file '''
         if self.netloc and self.netrc:
             authenticators = self.netrc.authenticators(self.netloc)
             if authenticators and len(authenticators) == 3:
                 self.set_username(authenticators[0])
                 self.set_password(authenticators[2])
                 if self.verbose:
-                    print("authentication for netloc=%r set for username=%r " % (self.netloc, self.username))
+                    print("authentication for netloc={0} set for username={1}".format(self.netloc, self.username))
             else:
                 if self.verbose:
-                    print("cannot find %r in ~/.netrc" % self.netloc)
+                    print("cannot find {0} in ~/.netrc".format(self.netloc))
                 self.set_username()
                 self.set_password()
         else:
             self.set_username()
             self.set_password()
+
+
+class AuthMixin(object):
+    ''' Mixin class to provide authentication method to other classes '''
+
+    def set_auth(self, username=None, password=None, inquire=True):
+        ''' Set the authentication
+
+        Parameters:
+            username: str
+                The username for SDSS SAS access
+            password: str
+                The password for SDSS SAS access
+            inquire: bool
+                If True, prompts for input of username/password.
+        '''
+        self.auth = Auth(public=self.public, netloc=self.netloc, verbose=self.verbose)
+        self.auth.set_username(username)
+        self.auth.set_password(password)
+
+        # if public then exit
+        if self.public:
+            return
+
+        # try to load the username and password
+        if not self.auth.ready():
+            self.auth.load()
+
+        # if still not ready then prompt for username and password
+        if not self.auth.ready():
+            self.auth.set_username(inquire=inquire)
+            self.auth.set_password(inquire=inquire)
diff --git a/python/sdss_access/sync/baseaccess.py b/python/sdss_access/sync/baseaccess.py
index f6f2878..06a7553 100644
--- a/python/sdss_access/sync/baseaccess.py
+++ b/python/sdss_access/sync/baseaccess.py
@@ -5,12 +5,12 @@ import abc
 import six
 from os.path import join, sep
 from sdss_access import SDSSPath
-from sdss_access.sync.auth import Auth
+from sdss_access.sync.auth import Auth, AuthMixin
 from sdss_access.sync.stream import Stream
 from sdss_access import is_posix, AccessError
 
 
-class BaseAccess(six.with_metaclass(abc.ABCMeta, SDSSPath)):
+class BaseAccess(six.with_metaclass(abc.ABCMeta, AuthMixin, SDSSPath)):
     """Class for providing Rsync or Curl access to SDSS SAS Paths
     """
     remote_scheme = None
@@ -116,18 +116,6 @@ class BaseAccess(six.with_metaclass(abc.ABCMeta, SDSSPath)):
         stream = Stream(stream_count=self.stream_count, verbose=self.verbose)
         return stream
 
-    def set_auth(self, username=None, password=None, inquire=True):
-        ''' set the authentication for accessing data '''
-        self.auth = Auth(public=self.public, netloc=self.netloc, verbose=self.verbose)
-        self.auth.set_username(username)
-        self.auth.set_password(password)
-        if not self.public:
-            if not self.auth.ready():
-                self.auth.load()
-            if not self.auth.ready():
-                self.auth.set_username(inquire=inquire)
-                self.auth.set_password(inquire=inquire)
-
     def reset(self):
         ''' Reset all streams '''
 
diff --git a/python/sdss_access/sync/http.py b/python/sdss_access/sync/http.py
index 5b3300a..3637607 100644
--- a/python/sdss_access/sync/http.py
+++ b/python/sdss_access/sync/http.py
@@ -12,26 +12,19 @@ except:
 from os import makedirs
 from os.path import isfile, exists, dirname
 from sdss_access import SDSSPath
-from sdss_access.sync.auth import Auth
+from sdss_access.sync.auth import Auth, AuthMixin
 
 
-class HttpAccess(SDSSPath):
+class HttpAccess(AuthMixin, SDSSPath):
     """Class for providing HTTP access via urllib.request (python3) or urllib2 (python2) to SDSS SAS Paths
     """
 
-    def __init__(self, verbose=False, public=False, release=None, label='sdss_http'):
+    def __init__(self, verbose=None, public=None, release=None, label='sdss_http'):
         super(HttpAccess, self).__init__(public=public, release=release, verbose=verbose)
         self.verbose = verbose
         self.label = label
         self._remote = False
 
-    def set_auth(self, username=None, password=None):
-        self.auth = Auth(netloc=self.netloc, verbose=self.verbose)
-        self.auth.set_username(username)
-        self.auth.set_password(password)
-        if not self.auth.ready():
-            self.auth.load()
-
     def remote(self, remote_base=None, username=None, password=None):
         """
         Configures remote access
