diff --git a/tests/test_parallel.py b/tests/test_parallel.py
index c65ddc8..5502153 100644
--- a/tests/test_parallel.py
+++ b/tests/test_parallel.py
@@ -9,24 +9,45 @@ class ParallelTestCase(TestCase):
         self.data = range(100)
 
     def test_map_parallel(self):
-        result = list(parallel.MapParallel(lambda x: x ** 2)(self.data))
-        result.sort()
         expected = [x ** 2 for x in self.data]
+        # ordered
+        result = parallel.MapParallel(lambda x: x ** 2)(self.data)
+        for x, y in zip(result, expected):
+            self.assertEqual(x, y)
+        # unordered
+        result = list(parallel.MapParallel(
+            lambda x: x ** 2, unordered=True)(self.data))
+        result.sort()
         self.assertListEqual(result, expected)
 
     def test_filter_parallel(self):
         def predicate(x):
             return x % 2 == 0
 
-        result = list(parallel.FilterParallel(predicate)(self.data))
-        result.sort()
         task = parallel.FilterParallel._FilterTask(predicate)
-        expected = [task(x) for x in self.data]
-        expected = [x[0] for x in expected if x[1]]
+        expected = [task(x)[0] for x in self.data if task(x)[1]]
+
+        # ordered
+        result = parallel.FilterParallel(predicate)(self.data)
+        for x, y in zip(result, expected):
+            self.assertEqual(x, y)
+
+        # unordered
+        result = list(parallel.FilterParallel(
+            predicate, unordered=True)(self.data))
+        result.sort()
         self.assertListEqual(result, expected)
 
     def test_flat_map_parallel(self):
-        result = list(parallel.FlatMapParallel(lambda x: [x])(self.data))
-        result.sort()
         expected = [x for x in self.data]
+
+        # ordered
+        result = parallel.FlatMapParallel(lambda x: [x])(self.data)
+        for x, y in zip(result, expected):
+            self.assertEqual(x, y)
+
+        # unordered
+        result = list(parallel.FlatMapParallel(
+            lambda x: [x], unordered=True)(self.data))
+        result.sort()
         self.assertListEqual(result, expected)
