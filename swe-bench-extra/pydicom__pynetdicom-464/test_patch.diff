diff --git a/pynetdicom/tests/test_service_storage.py b/pynetdicom/tests/test_service_storage.py
index 95e0aad2c..ec9d68100 100644
--- a/pynetdicom/tests/test_service_storage.py
+++ b/pynetdicom/tests/test_service_storage.py
@@ -17,6 +17,11 @@ from pynetdicom.service_class import StorageServiceClass
 from pynetdicom.sop_class import (
     VerificationSOPClass, CTImageStorage, RTImageStorage,
 )
+try:
+    from pynetdicom.status import Status
+    HAS_STATUS = True
+except ImportError:
+    HAS_STATUS = False
 
 
 #debug_logger()
@@ -37,10 +42,60 @@ class TestStorageServiceClass(object):
         if self.ae:
             self.ae.shutdown()
 
+    @pytest.mark.skipif(not HAS_STATUS, reason="No Status class available")
+    def test_status_enum(self):
+        """Test failure to decode the dataset"""
+        # Hard to test directly as decode errors won't show up until the
+        #   dataset is actually used
+        Status.add('UNABLE_TO_DECODE', 0xC210)
+
+        def handle(event):
+            try:
+                for elem in event.dataset.iterall():
+                    pass
+            except:
+                status = Dataset()
+                status.Status = Status.UNABLE_TO_DECODE
+                status.ErrorComment = "Unable to decode the dataset"
+                return status
+
+            return Status.SUCCESS
+
+        handlers = [(evt.EVT_C_STORE, handle)]
+
+        self.ae = ae = AE()
+        ae.add_supported_context(CTImageStorage)
+        ae.add_requested_context(CTImageStorage, ExplicitVRLittleEndian)
+        scp = ae.start_server(('', 11112), block=False, evt_handlers=handlers)
+
+        assoc = ae.associate('localhost', 11112)
+        assert assoc.is_established
+
+        req = C_STORE()
+        req.MessageID = 1
+        req.AffectedSOPClassUID = DATASET.SOPClassUID
+        req.AffectedSOPInstanceUID = DATASET.SOPInstanceUID
+        req.Priorty = 0x0002
+        req.DataSet = BytesIO(b'\x08\x00\x01\x00\x40\x40\x00\x00\x00\x00\x00\x08\x00\x49')
+
+        # Send C-STORE request to DIMSE and get response
+        assoc._reactor_checkpoint.clear()
+        assoc.dimse.send_msg(req, 1)
+        cx_id, rsp = assoc.dimse.get_msg(True)
+        assoc._reactor_checkpoint.set()
+
+        assert rsp.Status == 0xC210
+        assert rsp.ErrorComment == 'Unable to decode the dataset'
+        assoc.release()
+        assert assoc.is_released
+
+        scp.shutdown()
+
     def test_scp_failed_ds_decode(self):
         """Test failure to decode the dataset"""
         # Hard to test directly as decode errors won't show up until the
         #   dataset is actually used
+
         def handle(event):
             try:
                 for elem in event.dataset.iterall():
diff --git a/pynetdicom/tests/test_status.py b/pynetdicom/tests/test_status.py
index f00e93d47..650b8073e 100644
--- a/pynetdicom/tests/test_status.py
+++ b/pynetdicom/tests/test_status.py
@@ -8,6 +8,11 @@ import pytest
 from pydicom.dataset import Dataset
 
 from pynetdicom.status import code_to_category, code_to_status
+try:
+    from pynetdicom.status import Status
+    HAS_STATUS = True
+except ImportError:
+    HAS_STATUS = False
 
 
 LOGGER = logging.getLogger('pynetdicom')
@@ -255,3 +260,24 @@ class TestStatus(object):
         assert c2c(0x0000) == 'Success'
         for code in [0xA700, 0xA900, 0xC000]:
             assert c2c(code) == 'Failure'
+
+
+@pytest.mark.skipif(not HAS_STATUS, reason="No Status class available")
+class TestStatusEnum(object):
+    """Tests for the Status enum class."""
+    def test_default(self):
+        """Test the default class."""
+        assert 0x0000 == Status.SUCCESS
+        assert 0xFE00 == Status.CANCEL
+        assert 0xFF00 == Status.PENDING
+
+    def test_adding(self):
+        """Tests for adding a new constant to the Status enum."""
+        with pytest.raises(AttributeError, match=r'PENDING_WITH_WARNING'):
+            Status.PENDING_WITH_WARNING
+
+        Status.add('PENDING_WITH_WARNING', 0xFF01)
+        assert 0xFF01 == Status.PENDING_WITH_WARNING
+        assert 0x0000 == Status.SUCCESS
+        assert 0xFE00 == Status.CANCEL
+        assert 0xFF00 == Status.PENDING
