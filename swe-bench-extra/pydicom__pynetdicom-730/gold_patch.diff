diff --git a/.github/workflows/publish-pypi-deploy.yml b/.github/workflows/publish-pypi-deploy.yml
index 4cd253324..5839901de 100644
--- a/.github/workflows/publish-pypi-deploy.yml
+++ b/.github/workflows/publish-pypi-deploy.yml
@@ -44,8 +44,8 @@ jobs:
         pip install -i https://test.pypi.org/simple/ pynetdicom
 
     - name: Test with pytest
-      with:
-        python-version: '3.10'
+      env:
+        PYTHON_VERSION: ${{ matrix.python-version }}
       run: |
         cd ${HOME}
         python -m pynetdicom --version
diff --git a/docs/changelog/index.rst b/docs/changelog/index.rst
index 2f5bf3e74..523d43290 100644
--- a/docs/changelog/index.rst
+++ b/docs/changelog/index.rst
@@ -8,6 +8,7 @@ Release Notes
    :maxdepth: 1
 
    v2.1.0
+   v2.0.1
    v2.0.0
    v1.5.7
    v1.5.6
diff --git a/docs/changelog/v2.0.1.rst b/docs/changelog/v2.0.1.rst
new file mode 100644
index 000000000..82339bc1f
--- /dev/null
+++ b/docs/changelog/v2.0.1.rst
@@ -0,0 +1,10 @@
+.. _v2.0.1:
+
+2.0.1
+=====
+
+Changes
+.......
+
+* Revert change to default bind address
+* Don't allow passing an address tuple to T_CONNECT initialisation
diff --git a/docs/index.rst b/docs/index.rst
index 82715381e..5e2544974 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -120,6 +120,7 @@ Release Notes
 =============
 
 * :doc:`v2.1.0 </changelog/v2.1.0>`
+* :doc:`v2.0.1 </changelog/v2.0.0>`
 * :doc:`v2.0.0 </changelog/v2.0.0>`
 * :doc:`v1.5.7 </changelog/v1.5.7>`
 * :doc:`v1.5.6 </changelog/v1.5.6>`
diff --git a/pynetdicom/_globals.py b/pynetdicom/_globals.py
index d8cd60fd4..79bbef9b9 100644
--- a/pynetdicom/_globals.py
+++ b/pynetdicom/_globals.py
@@ -99,7 +99,7 @@ STATUS_UNKNOWN: str = "Unknown"
 
 
 # The default address that client sockets are bound to
-BIND_ADDRESS = ("127.0.0.1", 0)
+BIND_ADDRESS = ("", 0)
 
 
 OptionalUIDType = Optional[Union[str, bytes, UID]]
diff --git a/pynetdicom/transport.py b/pynetdicom/transport.py
index 06186e7a9..50df9d6ca 100644
--- a/pynetdicom/transport.py
+++ b/pynetdicom/transport.py
@@ -52,41 +52,64 @@ class T_CONNECT:
     """A TRANSPORT CONNECTION primitive
 
     .. versionadded:: 2.0
+
+    Attributes
+    ----------
+    request : pynetdicom.pdu_primitives.A_ASSOCIATE
+        The A-ASSOCIATE (request) primitive that generated the TRANSPORT CONNECTION
+        primitive.
     """
 
-    def __init__(self, address: Union[Tuple[str, int], "A_ASSOCIATE"]) -> None:
+    def __init__(self, request: "A_ASSOCIATE") -> None:
         """Create a new TRANSPORT CONNECTION primitive.
 
         Parameters
         ----------
-        address : Union[Tuple[str, int], pynetdicom.pdu_primitives.A_ASSOCIATE]
-            The ``(str: IP address, int: port)`` or A-ASSOCIATE (request) primitive to
-            use when making a connection with a peer.
+        request : pynetdicom.pdu_primitives.A_ASSOCIATE
+            The A-ASSOCIATE (request) primitive to use when making a connection with
+            a peer.
         """
-        self._request = None
-        self.result = ""
-
-        if isinstance(address, tuple):
-            self._address = address
-        elif isinstance(address, A_ASSOCIATE):
-            self._address = cast(Tuple[str, int], address.called_presentation_address)
-            self._request = address
-        else:
+        self._result = ""
+        self.request = request
+
+        if not isinstance(request, A_ASSOCIATE):
             raise TypeError(
-                f"'address' must be 'Tuple[str, int]' or "
-                "'pynetdicom.pdu_primitives.A_ASSOCIATE', not "
-                f"'{address.__class__.__name__}'"
+                f"'request' must be 'pynetdicom.pdu_primitives.A_ASSOCIATE', not "
+                f"'{request.__class__.__name__}'"
             )
 
     @property
     def address(self) -> Tuple[str, int]:
         """Return the peer's ``(str: IP address, int: port)``."""
-        return self._address
+        return cast(Tuple[str, int], self.request.called_presentation_address)
 
     @property
-    def request(self) -> Optional[A_ASSOCIATE]:
-        """Return the A-ASSOCIATE (request) primitive, or ``None`` if not available."""
-        return self._request
+    def result(self) -> str:
+        """Return the result of the connection attempt as :class:`str`.
+
+        Parameters
+        ----------
+        str
+            The result of the connection attempt, ``"Evt2"`` if the connection
+            succeeded, ``"Evt17"`` if it failed.
+
+        Returns
+        -------
+        str
+            The result of the connection attempt, ``"Evt2"`` if the connection
+            succeeded, ``"Evt17"`` if it failed.
+        """
+        if self._result == "":
+            raise ValueError("A connection attempt has not yet been made")
+
+        return self._result
+
+    @result.setter
+    def result(self, value: str) -> None:
+        if value not in ("Evt2", "Evt17"):
+            raise ValueError(f"Invalid connection result '{value}'")
+
+        self._result = value
 
 
 class AssociationSocket:
@@ -190,7 +213,7 @@ class AssociationSocket:
         self.event_queue.put("Evt17")
 
     def connect(self, primitive: T_CONNECT) -> None:
-        """Try and connect to a remote at `address`.
+        """Try and connect to a remote using connection details from  `primitive`.
 
         .. versionchanged:: 2.0
 
