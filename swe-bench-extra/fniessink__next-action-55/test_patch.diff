diff --git a/tests/unittests/test_arguments.py b/tests/unittests/test_arguments.py
index 626f557..7dc6ce6 100644
--- a/tests/unittests/test_arguments.py
+++ b/tests/unittests/test_arguments.py
@@ -8,7 +8,7 @@ from unittest.mock import patch, call
 from next_action.arguments import parse_arguments
 
 
-USAGE_MESSAGE = "usage: next-action [-h] [--version] [-f <todo.txt>] [-n <number> | -a] [<context|project> ...]\n"
+USAGE_MESSAGE = "usage: next-action [-h] [--version] [-f <filename>] [-n <number> | -a] [<context|project> ...]\n"
 
 
 class NoArgumentTest(unittest.TestCase):
diff --git a/tests/unittests/test_cli.py b/tests/unittests/test_cli.py
index 80b4a5f..299b65d 100644
--- a/tests/unittests/test_cli.py
+++ b/tests/unittests/test_cli.py
@@ -8,12 +8,14 @@ from unittest.mock import patch, mock_open, call
 from next_action.cli import next_action
 from next_action import __version__
 
+from .test_arguments import USAGE_MESSAGE
+
 
 class CLITest(unittest.TestCase):
     """ Unit tests for the command-line interface. """
 
     @patch.object(sys, "argv", ["next-action"])
-    @patch("next_action.cli.open", mock_open(read_data=""))
+    @patch("fileinput.open", mock_open(read_data=""))
     @patch.object(sys.stdout, "write")
     def test_empty_task_file(self, mock_stdout_write):
         """ Test the response when the task file is empty. """
@@ -21,7 +23,7 @@ class CLITest(unittest.TestCase):
         self.assertEqual([call("Nothing to do!"), call("\n")], mock_stdout_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action"])
-    @patch("next_action.cli.open", mock_open(read_data="Todo\n"))
+    @patch("fileinput.open", mock_open(read_data="Todo\n"))
     @patch.object(sys.stdout, "write")
     def test_one_task(self, mock_stdout_write):
         """ Test the response when the task file has one task. """
@@ -29,7 +31,7 @@ class CLITest(unittest.TestCase):
         self.assertEqual([call("Todo"), call("\n")], mock_stdout_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "@work"])
-    @patch("next_action.cli.open", mock_open(read_data="Todo @home\nTodo @work\n"))
+    @patch("fileinput.open", mock_open(read_data="Todo @home\nTodo @work\n"))
     @patch.object(sys.stdout, "write")
     def test_context(self, mock_stdout_write):
         """ Test the response when the user passes a context. """
@@ -37,7 +39,7 @@ class CLITest(unittest.TestCase):
         self.assertEqual([call("Todo @work"), call("\n")], mock_stdout_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "+DogHouse"])
-    @patch("next_action.cli.open", mock_open(read_data="Walk the dog @home\nBuy wood +DogHouse\n"))
+    @patch("fileinput.open", mock_open(read_data="Walk the dog @home\nBuy wood +DogHouse\n"))
     @patch.object(sys.stdout, "write")
     def test_project(self, mock_stdout_write):
         """ Test the response when the user passes a project. """
@@ -45,13 +47,14 @@ class CLITest(unittest.TestCase):
         self.assertEqual([call("Buy wood +DogHouse"), call("\n")], mock_stdout_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action"])
-    @patch("next_action.cli.open")
-    @patch.object(sys.stdout, "write")
-    def test_missing_file(self, mock_stdout_write, mock_file_open):
+    @patch("fileinput.open")
+    @patch.object(sys.stderr, "write")
+    def test_missing_file(self, mock_stderr_write, mock_file_open):
         """ Test the response when the task file can't be found. """
-        mock_file_open.side_effect = FileNotFoundError
-        next_action()
-        self.assertEqual([call("Can't find todo.txt"), call("\n")], mock_stdout_write.call_args_list)
+        mock_file_open.side_effect = OSError("some problem")
+        self.assertRaises(SystemExit, next_action)
+        self.assertEqual([call(USAGE_MESSAGE), call("next-action: error: can't open file: some problem\n")],
+                         mock_stderr_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "--help"])
     @patch.object(sys.stdout, "write")
@@ -59,8 +62,7 @@ class CLITest(unittest.TestCase):
         """ Test the help message. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, next_action)
-        self.assertEqual(call("""usage: next-action [-h] [--version] [-f <todo.txt>] [-n <number> | -a] \
-[<context|project> ...]
+        self.assertEqual(call("""usage: next-action [-h] [--version] [-f <filename>] [-n <number> | -a] [<context|project> ...]
 
 Show the next action in your todo.txt. The next action is selected from the tasks in the todo.txt file based on
 priority, due date, creation date, and supplied filters.
@@ -68,9 +70,9 @@ priority, due date, creation date, and supplied filters.
 optional arguments:
   -h, --help            show this help message and exit
   --version             show program's version number and exit
-  -f <todo.txt>, --file <todo.txt>
-                        todo.txt file to read; argument can be repeated to read tasks from multiple todo.txt files
-                        (default: ['todo.txt'])
+  -f <filename>, --file <filename>
+                        filename of todo.txt file to read; can be - to read from standard input; argument can be
+                        repeated to read tasks from multiple todo.txt files (default: ['todo.txt'])
   -n <number>, --number <number>
                         number of next actions to show (default: 1)
   -a, --all             show all next actions (default: False)
@@ -91,7 +93,7 @@ optional context and project arguments; these can be repeated:
         self.assertEqual([call("next-action {0}\n".format(__version__))], mock_stdout_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "--number", "2"])
-    @patch("next_action.cli.open", mock_open(read_data="Walk the dog @home\n(A) Buy wood +DogHouse\n(B) Call mom\n"))
+    @patch("fileinput.open", mock_open(read_data="Walk the dog @home\n(A) Buy wood +DogHouse\n(B) Call mom\n"))
     @patch.object(sys.stdout, "write")
     def test_number(self, mock_stdout_write):
         """ Test that the number of next actions can be specified. """
@@ -99,9 +101,18 @@ optional context and project arguments; these can be repeated:
         self.assertEqual([call("(A) Buy wood +DogHouse\n(B) Call mom"), call("\n")], mock_stdout_write.call_args_list)
 
     @patch.object(sys, "argv", ["next-action", "--number", "3"])
-    @patch("next_action.cli.open", mock_open(read_data="\nWalk the dog @home\n   \n(B) Call mom\n"))
+    @patch("fileinput.open", mock_open(read_data="\nWalk the dog @home\n   \n(B) Call mom\n"))
     @patch.object(sys.stdout, "write")
     def test_ignore_empty_lines(self, mock_stdout_write):
         """ Test that empty lines in the todo.txt file are ignored. """
         next_action()
         self.assertEqual([call("(B) Call mom\nWalk the dog @home"), call("\n")], mock_stdout_write.call_args_list)
+
+    @patch.object(sys, "argv", ["next-action", "--file", "-"])
+    @patch.object(sys.stdin, "readline")
+    @patch.object(sys.stdout, "write")
+    def test_reading_stdin(self, mock_stdout_write, mock_stdin_readline):
+        """ Test that tasks can be read from stdin works. """
+        mock_stdin_readline.side_effect = ["(B) Call mom\n", "Walk the dog\n", StopIteration]
+        next_action()
+        self.assertEqual([call("(B) Call mom"), call("\n")], mock_stdout_write.call_args_list)
