diff --git a/sceptre/hooks/cmd.py b/sceptre/hooks/cmd.py
index 5ec3216..8292e87 100644
--- a/sceptre/hooks/cmd.py
+++ b/sceptre/hooks/cmd.py
@@ -13,16 +13,37 @@ class Cmd(Hook):
 
     def run(self):
         """
-        Runs the argument string in a subprocess.
+        Executes a command through the shell.
 
-        :raises: sceptre.exceptions.InvalidTaskArgumentTypeException
-        :raises: subprocess.CalledProcessError
+        See hooks documentation for details.
+
+        :raises: sceptre.exceptions.InvalidHookArgumentTypeError invalid input
+        :raises: CalledProcessError failed command
+        :raises: FileNotFoundError missing shell
+        :raises: PermissionError non-executable shell
         """
         envs = self.stack.connection_manager.create_session_environment_variables()
-        try:
-            subprocess.check_call(self.argument, shell=True, env=envs)
-        except TypeError:
+
+        if isinstance(self.argument, str) and self.argument != "":
+            command_to_run = self.argument
+            shell = None
+
+        elif (
+            isinstance(self.argument, dict)
+            and set(self.argument) == {"run", "shell"}
+            and isinstance(self.argument["run"], str)
+            and isinstance(self.argument["shell"], str)
+            and self.argument["run"] != ""
+            and self.argument["shell"] != ""
+        ):
+            command_to_run = self.argument["run"]
+            shell = self.argument["shell"]
+
+        else:
             raise InvalidHookArgumentTypeError(
-                'The argument "{0}" is the wrong type - cmd hooks require '
-                "arguments of type string.".format(self.argument)
+                "A cmd hook requires either a string argument or an object with "
+                "`run` and `shell` keys with string values. "
+                f"You gave `{self.argument!r}`."
             )
+
+        subprocess.check_call(command_to_run, shell=True, env=envs, executable=shell)

