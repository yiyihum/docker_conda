diff --git a/test/test_http.py b/test/test_http.py
index af6ac8e..f1a16da 100644
--- a/test/test_http.py
+++ b/test/test_http.py
@@ -1,6 +1,6 @@
 import unittest
 
-from webchk.http import http_response, parse_url
+from webchk.http import http_response, parse_url, HTTPRequests
 
 TIMEOUT = 3
 
@@ -26,12 +26,15 @@ class Http(unittest.TestCase):
 
     def test_http_response(self):
         for url, result in self.urls.items():
-            resp_code = http_response(url, TIMEOUT).status
+            req = HTTPRequests(url, timeout=TIMEOUT)
+            resp_code = http_response(url, req).status
             self.assertEqual(resp_code, result[0], url)
 
     def test_redirect_follows(self):
         url = 'https://httpstat.us/307'
-        resp = http_response(url, TIMEOUT)
+
+        req = HTTPRequests(url, timeout=TIMEOUT)
+        resp = http_response(url, req)
         total = 0
         while resp.redirect:
             fmt = '{} ... {} {} ({})'.format(
@@ -42,10 +45,12 @@ class Http(unittest.TestCase):
         self.assertEqual(total, 1)
 
     def test_unresolvable_domains(self):
-        resp = http_response('http://!.c', TIMEOUT)
+        req = HTTPRequests(None, timeout=TIMEOUT)
+        resp = http_response('http://!.c', req)
         self.assertEqual(str(resp), 'http://!.c ... Could not resolve')
 
     def test_timeouts(self):
         url = 'http://httpbin.org/delay/5'
-        resp = http_response(url, timeout=1)
+        req = HTTPRequests(url, timeout=1)
+        resp = http_response(url, req)
         self.assertEqual(resp.desc, 'Operation timed out')
diff --git a/test/test_utils.py b/test/test_utils.py
index 496022e..2ca9591 100644
--- a/test/test_utils.py
+++ b/test/test_utils.py
@@ -1,6 +1,8 @@
 import unittest
 
-from webchk.utils import read_input_file, get_parser, urls_from_xml
+from webchk.utils import (
+    read_input_file, get_parser, urls_from_xml, format_headers
+)
 
 
 class FileIOTest(unittest.TestCase):
@@ -46,3 +48,29 @@ class XmlParserTest(unittest.TestCase):
         ]
         urls = urls_from_xml(self.xml)
         self.assertEqual(urls, urls_list)
+
+
+class HeadersFormatterTest(unittest.TestCase):
+    def test_valid_headers(self):
+        cases = {
+            ' Connection: keep-alive\n Content-Length: 5386':
+            {
+                'Connection': 'keep-alive',
+                'Content-Length': '5386',
+            },
+            ' Cache-Control: no-cache\n Content-Type: text/html':
+            {
+                'Cache-Control': 'no-cache',
+                'Content-Type': 'text/html',
+            }
+        }
+
+        for expected, case in cases.items():
+            self.assertEqual(format_headers(case), expected)
+
+    def test_invalid_value(self):
+        cases = [[], 123, 'abc']
+
+        for case in cases:
+            with self.assertRaises(ValueError):
+                format_headers(case)
