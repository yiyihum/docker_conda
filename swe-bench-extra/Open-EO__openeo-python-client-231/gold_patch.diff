diff --git a/CHANGELOG.md b/CHANGELOG.md
index 831591f..d475e07 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -15,6 +15,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
 - Add `DataCube.dimension_labels()` (EP-4008)
 - Add `Connection.load_result()` (EP-4008)
 - Add proper support for child callbacks in `fit_curve` and `predict_curve` ([#229](https://github.com/Open-EO/openeo-python-client/issues/229))
+- `ProcessBuilder`: Add support for `array_element(data, n)` through `data[n]` syntax ([#228](https://github.com/Open-EO/openeo-python-client/issues/228))
 
 
 ### Changed
diff --git a/openeo/internal/processes/generator.py b/openeo/internal/processes/generator.py
index 834cd90..a53dc32 100644
--- a/openeo/internal/processes/generator.py
+++ b/openeo/internal/processes/generator.py
@@ -107,6 +107,7 @@ def collect_processes(sources: List[Union[Path, str]]) -> List[Process]:
 
 def generate_process_py(processes: List[Process], output=sys.stdout, argv=None):
     oo_src = textwrap.dedent("""
+        import builtins
         from openeo.internal.processes.builder import ProcessBuilderBase, UNSET
         
         
@@ -142,6 +143,12 @@ def generate_process_py(processes: List[Process], output=sys.stdout, argv=None):
             def __pow__(self, other) -> 'ProcessBuilder':
                 return self.power(other)
 
+            def __getitem__(self, key) -> 'ProcessBuilder':
+                if isinstance(key, builtins.int):
+                    return self.array_element(index=key)
+                else:
+                    return self.array_element(label=key)
+
     """)
     fun_src = textwrap.dedent("""
         # Public shortcut
diff --git a/openeo/processes.py b/openeo/processes.py
index 417984e..3bbb21e 100644
--- a/openeo/processes.py
+++ b/openeo/processes.py
@@ -4,6 +4,7 @@
 # Used command line arguments:
 #    openeo/internal/processes/generator.py ../openeo-processes/ ../openeo-processes/proposals/ --output openeo/processes.py
 
+import builtins
 from openeo.internal.processes.builder import ProcessBuilderBase, UNSET
 
 
@@ -39,6 +40,12 @@ class ProcessBuilder(ProcessBuilderBase):
     def __pow__(self, other) -> 'ProcessBuilder':
         return self.power(other)
 
+    def __getitem__(self, key) -> 'ProcessBuilder':
+        if isinstance(key, builtins.int):
+            return self.array_element(index=key)
+        else:
+            return self.array_element(label=key)
+
     def absolute(self) -> 'ProcessBuilder':
         """
         Absolute value
