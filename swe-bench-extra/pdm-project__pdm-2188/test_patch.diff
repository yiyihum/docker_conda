diff --git a/tests/cli/test_venv.py b/tests/cli/test_venv.py
index 49139194..5d11a8d7 100644
--- a/tests/cli/test_venv.py
+++ b/tests/cli/test_venv.py
@@ -5,6 +5,7 @@ import sys
 from unittest.mock import ANY
 
 import pytest
+import shellingham
 
 from pdm.cli.commands.venv import backends
 from pdm.cli.commands.venv.utils import get_venv_prefix
@@ -168,6 +169,26 @@ def test_venv_activate_error(pdm, project):
     assert "Can't activate a non-venv Python" in result.stderr
 
 
+@pytest.mark.usefixtures("venv_backends")
+def test_venv_activate_no_shell(pdm, mocker, project):
+    project.project_config["venv.in_project"] = False
+    result = pdm(["venv", "create"], obj=project)
+    assert result.exit_code == 0, result.stderr
+    venv_path = re.match(r"Virtualenv (.+) is created successfully", result.output).group(1)
+    key = os.path.basename(venv_path)[len(get_venv_prefix(project)) :]
+
+    mocker.patch("shellingham.detect_shell", side_effect=shellingham.ShellDetectionFailure())
+    result = pdm(["venv", "activate", key], obj=project)
+    assert result.exit_code == 0, result.stderr
+    backend = project.config["venv.backend"]
+
+    if backend == "conda":
+        assert result.output.startswith("conda activate")
+    else:
+        assert result.output.strip("'\"\n").endswith("activate")
+        assert result.output.startswith("source")
+
+
 @pytest.mark.usefixtures("fake_create")
 @pytest.mark.parametrize("keep_pypackages", [True, False])
 def test_venv_auto_create(pdm, mocker, project, keep_pypackages):
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 218a3205..86976e26 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -3,6 +3,7 @@ import sys
 
 import pytest
 import tomlkit
+from packaging.version import Version
 
 from pdm import utils
 from pdm.cli import utils as cli_utils
@@ -145,3 +146,8 @@ def test_deprecation_warning():
 
     with pytest.raises(FutureWarning):
         utils.deprecation_warning("Test warning", raise_since="0.0")
+
+
+def test_comparable_version():
+    assert utils.comparable_version("1.2.3") == Version("1.2.3")
+    assert utils.comparable_version("1.2.3a1+local1") == Version("1.2.3a1")
