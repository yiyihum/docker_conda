diff --git a/test/core_tests/exceptions_test.py b/test/core_tests/exceptions_test.py
new file mode 100644
index 00000000..41fc1b74
--- /dev/null
+++ b/test/core_tests/exceptions_test.py
@@ -0,0 +1,51 @@
+"""Unit tests for exceptions"""
+import pytest
+
+from xknx.exceptions import (
+    ConversionError, CouldNotParseAddress, CouldNotParseKNXIP,
+    CouldNotParseTelegram, DeviceIllegalValue, XKNXException)
+
+
+@pytest.mark.parametrize(
+    "base,equal,diff",
+    [
+        (
+            ConversionError("desc1"),
+            ConversionError("desc1"),
+            ConversionError("desc2"),
+        ),
+        (
+            CouldNotParseAddress(123),
+            CouldNotParseAddress(123),
+            CouldNotParseAddress(321),
+        ),
+        (
+            CouldNotParseKNXIP("desc1"),
+            CouldNotParseKNXIP("desc1"),
+            CouldNotParseKNXIP("desc2"),
+        ),
+        (
+            CouldNotParseTelegram("desc", arg1=1, arg2=2),
+            CouldNotParseTelegram("desc", arg1=1, arg2=2),
+            CouldNotParseTelegram("desc", arg1=2, arg2=1),
+        ),
+        (
+            DeviceIllegalValue("value1", "desc"),
+            DeviceIllegalValue("value1", "desc"),
+            DeviceIllegalValue("value1", "desc2"),
+        ),
+        (
+            XKNXException("desc1"),
+            XKNXException("desc1"),
+            XKNXException("desc2"),
+        ),
+    ],
+)
+def test_exceptions(base, equal, diff):
+    """Test hashability and repr of exceptions."""
+    assert hash(base) == hash(equal)
+    assert hash(base) != hash(diff)
+    assert base == equal
+    assert base != diff
+    assert repr(base) == repr(equal)
+    assert repr(base) != repr(diff)
diff --git a/test/devices_tests/light_test.py b/test/devices_tests/light_test.py
index b6283672..5de6eddf 100644
--- a/test/devices_tests/light_test.py
+++ b/test/devices_tests/light_test.py
@@ -318,7 +318,7 @@ class TestLight(unittest.TestCase):
         self.assertEqual(xknx.telegrams.qsize(), 1)
         telegram = xknx.telegrams.get_nowait()
         self.assertEqual(telegram,
-                         Telegram(GroupAddress('1/2/5'), payload=DPTArray((0, 15, 23, 24, 25, 26))))
+                         Telegram(GroupAddress('1/2/5'), payload=DPTArray((23, 24, 25, 26, 0, 15))))
         self.assertEqual(light.current_color, ([23, 24, 25], 26))
 
     def test_set_color_rgbw_not_possible(self):
@@ -489,7 +489,7 @@ class TestLight(unittest.TestCase):
                       group_address_color='1/2/4',
                       group_address_rgbw='1/2/5')
         self.assertEqual(light.current_color, (None, None))
-        telegram = Telegram(GroupAddress('1/2/5'), payload=DPTArray((0, 15, 23, 24, 25, 26)))
+        telegram = Telegram(GroupAddress('1/2/5'), payload=DPTArray((23, 24, 25, 26, 0, 15)))
         self.loop.run_until_complete(asyncio.Task(light.process(telegram)))
         self.assertEqual(light.current_color, ([23, 24, 25], 26))
 
diff --git a/test/devices_tests/remote_value_color_rgbw_test.py b/test/devices_tests/remote_value_color_rgbw_test.py
index 2a56d3b0..d352c299 100644
--- a/test/devices_tests/remote_value_color_rgbw_test.py
+++ b/test/devices_tests/remote_value_color_rgbw_test.py
@@ -26,32 +26,32 @@ class TestRemoteValueColorRGBW(unittest.TestCase):
         remote_value = RemoteValueColorRGBW(xknx)
         input_list = [100, 101, 102, 127]
         input_tuple = (100, 101, 102, 127)
-        expected = DPTArray((0x00, 0x0f, 0x64, 0x65, 0x66, 0x7f))
+        expected = DPTArray((0x64, 0x65, 0x66, 0x7f, 0x00, 0x0f))
         self.assertEqual(remote_value.to_knx(input_tuple), expected)
         self.assertEqual(remote_value.to_knx(input_list), expected)
-        self.assertEqual(remote_value.to_knx((15,) + input_tuple), expected)
-        self.assertEqual(remote_value.to_knx([15] + input_list), expected)
-        self.assertEqual(remote_value.to_knx((0, 15) + input_tuple), expected)
-        self.assertEqual(remote_value.to_knx([0, 15] + input_list), expected)
+        self.assertEqual(remote_value.to_knx(input_tuple + (15,)), expected)
+        self.assertEqual(remote_value.to_knx(input_list + [15]), expected)
+        self.assertEqual(remote_value.to_knx(input_tuple + (0, 15)), expected)
+        self.assertEqual(remote_value.to_knx(input_list + [0, 15]), expected)
 
     def test_from_knx(self):
         """Test from_knx function with normal operation."""
         xknx = XKNX(loop=self.loop)
         remote_value = RemoteValueColorRGBW(xknx)
         self.assertEqual(
-            remote_value.from_knx(DPTArray((0x00, 0x00, 0x64, 0x65, 0x66, 0x7f))),
+            remote_value.from_knx(DPTArray((0x64, 0x65, 0x66, 0x7f, 0x00, 0x00))),
             [0, 0, 0, 0])
         self.assertEqual(
-            remote_value.from_knx(DPTArray((0x00, 0x0f, 0x64, 0x65, 0x66, 0x7f))),
+            remote_value.from_knx(DPTArray((0x64, 0x65, 0x66, 0x7f, 0x00, 0x0f))),
             [100, 101, 102, 127])
         self.assertEqual(
-            remote_value.from_knx(DPTArray((0x00, 0x00, 0x64, 0x65, 0x66, 0x7f))),
+            remote_value.from_knx(DPTArray((0x64, 0x65, 0x66, 0x7f, 0x00, 0x00))),
             [100, 101, 102, 127])
         self.assertEqual(
-            remote_value.from_knx(DPTArray((0x00, 0x09, 0xff, 0x65, 0x66, 0xff))),
+            remote_value.from_knx(DPTArray((0xff, 0x65, 0x66, 0xff, 0x00, 0x09))),
             [255, 101, 102, 255])
         self.assertEqual(
-            remote_value.from_knx(DPTArray((0x00, 0x01, 0x64, 0x65, 0x66, 0x7f))),
+            remote_value.from_knx(DPTArray((0x64, 0x65, 0x66, 0x7f, 0x00, 0x01))),
             [255, 101, 102, 127])
 
     def test_to_knx_error(self):
@@ -90,7 +90,7 @@ class TestRemoteValueColorRGBW(unittest.TestCase):
             telegram,
             Telegram(
                 GroupAddress('1/2/3'),
-                payload=DPTArray((0x00, 0x0f, 0x64, 0x65, 0x66, 0x67))))
+                payload=DPTArray((0x64, 0x65, 0x66, 0x67, 0x00, 0x0f))))
         self.loop.run_until_complete(asyncio.Task(remote_value.set((100, 101, 104, 105))))
         self.assertEqual(xknx.telegrams.qsize(), 1)
         telegram = xknx.telegrams.get_nowait()
@@ -98,7 +98,7 @@ class TestRemoteValueColorRGBW(unittest.TestCase):
             telegram,
             Telegram(
                 GroupAddress('1/2/3'),
-                payload=DPTArray((0x00, 0x0f, 0x64, 0x65, 0x68, 0x69))))
+                payload=DPTArray((0x64, 0x65, 0x68, 0x69, 0x00, 0x0f))))
 
     def test_process(self):
         """Test process telegram."""
@@ -108,7 +108,7 @@ class TestRemoteValueColorRGBW(unittest.TestCase):
             group_address=GroupAddress("1/2/3"))
         telegram = Telegram(
             group_address=GroupAddress("1/2/3"),
-            payload=DPTArray((0x00, 0x0f, 0x64, 0x65, 0x66, 0x67)))
+            payload=DPTArray((0x64, 0x65, 0x66, 0x67, 0x00, 0x0f)))
         self.loop.run_until_complete(asyncio.Task(remote_value.process(telegram)))
         self.assertEqual(remote_value.value, [100, 101, 102, 103])
 
