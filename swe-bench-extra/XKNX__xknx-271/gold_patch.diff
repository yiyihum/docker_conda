diff --git a/xknx/exceptions/__init__.py b/xknx/exceptions/__init__.py
index 0875fb6f..95609fa0 100644
--- a/xknx/exceptions/__init__.py
+++ b/xknx/exceptions/__init__.py
@@ -2,4 +2,5 @@
 # flake8: noqa
 from .exception import (
     ConversionError, CouldNotParseAddress, CouldNotParseKNXIP,
-    CouldNotParseTelegram, DeviceIllegalValue, XKNXException)
+    CouldNotParseTelegram, DeviceIllegalValue, UnsupportedCEMIMessage,
+    XKNXException)
diff --git a/xknx/exceptions/exception.py b/xknx/exceptions/exception.py
index 626299bd..18702952 100644
--- a/xknx/exceptions/exception.py
+++ b/xknx/exceptions/exception.py
@@ -39,7 +39,7 @@ class CouldNotParseKNXIP(XKNXException):
     """Exception class for wrong KNXIP data."""
 
     def __init__(self, description=""):
-        """Initialize CouldNotParseTelegram class."""
+        """Initialize CouldNotParseKNXIP class."""
         super().__init__()
         self.description = description
 
@@ -49,6 +49,20 @@ class CouldNotParseKNXIP(XKNXException):
             .format(self.description)
 
 
+class UnsupportedCEMIMessage(XKNXException):
+    """Exception class for unsupported CEMI Messages."""
+
+    def __init__(self, description=""):
+        """Initialize UnsupportedCEMIMessage class."""
+        super().__init__()
+        self.description = description
+
+    def __str__(self):
+        """Return object as readable string."""
+        return '<UnsupportedCEMIMessage description="{0}" />' \
+            .format(self.description)
+
+
 class ConversionError(XKNXException):
     """Exception class for error while converting one type to another."""
 
diff --git a/xknx/knxip/cemi_frame.py b/xknx/knxip/cemi_frame.py
index 1fc80ead..dffa5064 100644
--- a/xknx/knxip/cemi_frame.py
+++ b/xknx/knxip/cemi_frame.py
@@ -12,7 +12,8 @@ Documentation within:
     File: AN117 v02.01 KNX IP Communication Medium DV.pdf
 """
 from xknx.dpt import DPTArray, DPTBinary
-from xknx.exceptions import ConversionError, CouldNotParseKNXIP
+from xknx.exceptions import (
+    ConversionError, CouldNotParseKNXIP, UnsupportedCEMIMessage)
 from xknx.telegram import GroupAddress, PhysicalAddress, Telegram, TelegramType
 
 from .body import KNXIPBody
@@ -106,20 +107,25 @@ class CEMIFrame(KNXIPBody):
     def from_knx(self, raw):
         """Parse/deserialize from KNX/IP raw data."""
         try:
-            self.code = CEMIMessageCode(raw[0])
-        except ValueError:
-            raise CouldNotParseKNXIP("Could not understand CEMIMessageCode: {0} ".format(raw[0]))
-
-        if self.code == CEMIMessageCode.L_DATA_IND or \
-                self.code == CEMIMessageCode.L_Data_REQ or \
-                self.code == CEMIMessageCode.L_DATA_CON:
-            return self.from_knx_data_link_layer(raw)
-        raise CouldNotParseKNXIP("Could not understand CEMIMessageCode: {0} / {1}".format(self.code, raw[0]))
+            try:
+                self.code = CEMIMessageCode(raw[0])
+            except ValueError:
+                raise UnsupportedCEMIMessage("CEMIMessageCode not implemented: {0} ".format(raw[0]))
+
+            if self.code == CEMIMessageCode.L_DATA_IND or \
+                    self.code == CEMIMessageCode.L_Data_REQ or \
+                    self.code == CEMIMessageCode.L_DATA_CON:
+                return self.from_knx_data_link_layer(raw)
+            raise UnsupportedCEMIMessage("Could not handle CEMIMessageCode: {0} / {1}".format(self.code, raw[0]))
+        except UnsupportedCEMIMessage as unsupported_cemi_err:
+            self.xknx.logger.warning("Ignoring not implemented CEMI: %s", unsupported_cemi_err)
+            return len(raw)
 
     def from_knx_data_link_layer(self, cemi):
         """Parse L_DATA_IND, CEMIMessageCode.L_Data_REQ, CEMIMessageCode.L_DATA_CON."""
         if len(cemi) < 11:
-            raise CouldNotParseKNXIP("CEMI too small")
+            # eg. ETS Line-Scan issues L_DATA_IND with length 10
+            raise UnsupportedCEMIMessage("CEMI too small. Length: {0}; CEMI: {1}".format(len(cemi), cemi))
 
         # AddIL (Additional Info Length), as specified within
         # KNX Chapter 3.6.3/4.1.4.3 "Additional information."
@@ -146,7 +152,7 @@ class CEMIFrame(KNXIPBody):
         try:
             self.cmd = APCICommand(tpci_apci & 0xFFC0)
         except ValueError:
-            raise CouldNotParseKNXIP(
+            raise UnsupportedCEMIMessage(
                 "APCI not supported: {0:#012b}".format(tpci_apci & 0xFFC0))
 
         apdu = cemi[10 + addil:]
