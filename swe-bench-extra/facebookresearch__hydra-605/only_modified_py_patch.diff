diff --git a/examples/advanced/ad_hoc_composition/hydra_compose_example.py b/examples/advanced/ad_hoc_composition/hydra_compose_example.py
index e113bfcd36..c44c47a54d 100644
--- a/examples/advanced/ad_hoc_composition/hydra_compose_example.py
+++ b/examples/advanced/ad_hoc_composition/hydra_compose_example.py
@@ -4,7 +4,7 @@ from hydra.experimental import compose, initialize
 if __name__ == "__main__":
     # initialize the Hydra subsystem.
     # This is needed for apps that cannot have a standard @hydra.main() entry point
-    initialize(config_dir="conf", strict=True)
+    initialize(config_path="conf", strict=True)
 
     cfg = compose("config.yaml", overrides=["db=mysql", "db.user=${env:USER}"])
     print(cfg.pretty(resolve=True))
diff --git a/hydra/experimental/compose.py b/hydra/experimental/compose.py
index 5d787f81a0..e7aa643dbd 100644
--- a/hydra/experimental/compose.py
+++ b/hydra/experimental/compose.py
@@ -9,31 +9,58 @@ from hydra.core.global_hydra import GlobalHydra
 
 
 def initialize(
-    config_dir: Optional[str] = None,
+    config_path: Optional[str] = None,
     strict: Optional[bool] = None,
     caller_stack_depth: int = 1,
 ) -> None:
     """
-    :param config_dir: config directory relative to the calling script
-    :param strict:
-    :param caller_stack_depth:
-    :return:
+    Initialize automatically detect the calling file or module.
+    config_path is relative to the detected calling for or module.
+
+    :param config_path: A directory relative to the declaring python file or module
+    :param strict: (Deprecated), will be removed in the next major version
+    :param caller_stack_depth: stack depth of module the config_path is relative to
     """
     calling_file, calling_module = detect_calling_file_or_module_from_stack_frame(
         caller_stack_depth + 1
     )
     Hydra.create_main_hydra_file_or_module(
-        calling_file, calling_module, config_dir, strict
+        calling_file, calling_module, config_path, strict
     )
 
 
+def initialize_with_file(
+    calling_file: Optional[str], config_path: Optional[str] = None
+) -> None:
+    """
+    Initialize Hydra and add the config_path to the search path.
+    The config path is relative to the calling_file.
+    :param calling_file : The file to make the config_path relative to
+    :param config_path : The config path
+    """
+    Hydra.create_main_hydra_file_or_module(calling_file, None, config_path, None)
+
+
+def initialize_with_module(
+    calling_module: Optional[str], config_path: Optional[str] = None
+) -> None:
+    """
+    Initialize Hydra and add the config_path to the search path.
+    The config path is relative to the calling_module.
+    :param calling_module : The module to make the config_path relative to
+    :param config_path : The config path
+    """
+
+    Hydra.create_main_hydra_file_or_module(None, calling_module, config_path, None)
+
+
 def compose(
     config_name: Optional[str] = None,
     overrides: List[str] = [],
     strict: Optional[bool] = None,
 ) -> DictConfig:
     """
-    :param config_name: optional config name to load
+    :param config_name: the name of the config (usually the file name without the .yaml extension)
     :param overrides: list of overrides for config file
     :param strict: optionally override the default strict mode
     :return: the composed config
