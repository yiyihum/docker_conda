diff --git a/pydantic/errors.py b/pydantic/errors.py
--- a/pydantic/errors.py
+++ b/pydantic/errors.py
@@ -27,6 +27,7 @@
     'UrlUserInfoError',
     'UrlHostError',
     'UrlHostTldError',
+    'UrlPortError',
     'UrlExtraError',
     'EnumError',
     'IntegerError',
@@ -205,6 +206,11 @@ class UrlHostTldError(UrlError):
     msg_template = 'URL host invalid, top level domain required'
 
 
+class UrlPortError(UrlError):
+    code = 'url.port'
+    msg_template = 'URL port invalid, port cannot exceed 65535'
+
+
 class UrlExtraError(UrlError):
     code = 'url.extra'
     msg_template = 'URL invalid, extra characters found after valid URL: {extra!r}'
diff --git a/pydantic/networks.py b/pydantic/networks.py
--- a/pydantic/networks.py
+++ b/pydantic/networks.py
@@ -185,9 +185,14 @@ def validate(cls, value: Any, field: 'ModelField', config: 'BaseConfig') -> 'Any
         scheme = parts['scheme']
         if scheme is None:
             raise errors.UrlSchemeError()
+
         if cls.allowed_schemes and scheme.lower() not in cls.allowed_schemes:
             raise errors.UrlSchemePermittedError(cls.allowed_schemes)
 
+        port = parts['port']
+        if port is not None and int(port) > 65_535:
+            raise errors.UrlPortError()
+
         user = parts['user']
         if cls.user_required and user is None:
             raise errors.UrlUserInfoError()
@@ -205,7 +210,7 @@ def validate(cls, value: Any, field: 'ModelField', config: 'BaseConfig') -> 'Any
             host=host,
             tld=tld,
             host_type=host_type,
-            port=parts['port'],
+            port=port,
             path=parts['path'],
             query=parts['query'],
             fragment=parts['fragment'],

