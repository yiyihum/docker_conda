diff --git a/tests/test_address_identification.py b/tests/test_address_identification.py
index f6100c0..396e172 100644
--- a/tests/test_address_identification.py
+++ b/tests/test_address_identification.py
@@ -51,3 +51,18 @@ def test_address_check_returns_empty_list_if_no_addresses_found():
     expected_private_columns = []
 
     assert actual_private_columns == expected_private_columns
+
+
+def test_check_addresses_can_handle_mixed_dtype_columns():
+    df = pd.DataFrame(
+        {
+            "privateColumn": [True, "AB1 1AB", "c"],
+            "privateColumn2": [1, "b", "10 Downing Street"],
+            "nonPrivateColumn": [0, True, "test"],
+        }
+    )
+
+    actual_private_columns = pp.check_addresses(df)
+    expected_private_columns = ["privateColumn", "privateColumn2"]
+
+    assert actual_private_columns == expected_private_columns
diff --git a/tests/test_anonymization.py b/tests/test_anonymization.py
new file mode 100644
index 0000000..916ba93
--- /dev/null
+++ b/tests/test_anonymization.py
@@ -0,0 +1,53 @@
+"""
+Test functions for anonymizing dataframes
+"""
+import pandas as pd
+import pytest
+
+import privacypanda as pp
+
+
+@pytest.mark.parametrize(
+    "address",
+    [
+        "10 Downing Street",
+        "10 downing street",
+        "1 the Road",
+        "01 The Road",
+        "1234 The Road",
+        "55 Maple Avenue",
+        "4 Python Way",
+        "AB1 1AB",
+        "AB12 1AB",
+    ],
+)
+def test_removes_columns_containing_addresses(address):
+    df = pd.DataFrame(
+        {
+            "privateData": ["a", "b", "c", address],
+            "nonPrivateData": ["a", "b", "c", "d"],
+            "nonPrivataData2": [1, 2, 3, 4],
+        }
+    )
+
+    expected_df = pd.DataFrame(
+        {"nonPrivateData": ["a", "b", "c", "d"], "nonPrivataData2": [1, 2, 3, 4]}
+    )
+
+    actual_df = pp.anonymize(df)
+
+    pd.testing.assert_frame_equal(actual_df, expected_df)
+
+
+def test_returns_empty_dataframe_if_all_columns_contain_private_information():
+    df = pd.DataFrame(
+        {
+            "nonPrivateData": ["a", "AB1 1AB", "c", "d"],
+            "PrivataData2": [1, 2, 3, "AB1 1AB"],
+        }
+    )
+
+    expected_df = pd.DataFrame(index=[0, 1, 2, 3])
+    actual_df = pp.anonymize(df)
+
+    pd.testing.assert_frame_equal(actual_df, expected_df)
