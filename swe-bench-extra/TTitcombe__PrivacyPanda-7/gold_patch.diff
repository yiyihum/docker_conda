diff --git a/privacypanda/__init__.py b/privacypanda/__init__.py
index a13b45a..5e891fe 100644
--- a/privacypanda/__init__.py
+++ b/privacypanda/__init__.py
@@ -1,3 +1,4 @@
 from .addresses import *
+from .anonymize import *
 
 __version__ = "0.1.0dev"
diff --git a/privacypanda/addresses.py b/privacypanda/addresses.py
index 5198ecc..6613cbc 100644
--- a/privacypanda/addresses.py
+++ b/privacypanda/addresses.py
@@ -4,12 +4,12 @@ Code for identifying addresses
 import re
 from typing import List
 
-import numpy as np
 import pandas as pd
+from numpy import dtype as np_dtype
 
 __all__ = ["check_addresses"]
 
-OBJECT_DTYPE = np.dtype("O")
+OBJECT_DTYPE = np_dtype("O")
 
 # ----- Regex constants ----- #
 LETTER = "[a-zA-Z]"
@@ -55,6 +55,7 @@ def check_addresses(df: pd.DataFrame) -> List:
         # Only check column if it may contain strings
         if row.dtype == OBJECT_DTYPE:
             for item in row:
+                item = str(item)  # convert incase column has mixed data types
 
                 if UK_POSTCODE_PATTERN.match(item) or SIMPLE_ADDRESS_PATTERN.match(
                     item
diff --git a/privacypanda/anonymize.py b/privacypanda/anonymize.py
new file mode 100644
index 0000000..44596a7
--- /dev/null
+++ b/privacypanda/anonymize.py
@@ -0,0 +1,39 @@
+"""
+Code for cleaning a dataframe of private data
+"""
+import pandas as pd
+from numpy import unique as np_unique
+
+from .addresses import check_addresses
+
+
+def anonymize(df: pd.DataFrame) -> pd.DataFrame:
+    """
+    Remove private data from a dataframe
+
+    Any column containing at least one piece of private data is removed from
+    the dataframe. This is a naive solution but limits the possibility of
+    false negatives.
+
+    Parameters
+    ----------
+    df : pd.DataFrame
+        The dataframe to anonymize
+
+    Returns
+    -------
+    pd.DataFrame
+        The dataframe with columns containing private data removed
+    """
+    private_cols = []
+
+    checks = [check_addresses]
+    for check in checks:
+        new_private_cols = check(df)
+        private_cols += new_private_cols
+
+    # Get unique columns
+    private_cols = np_unique(private_cols).tolist()
+
+    # Drop columns
+    return df.drop(private_cols, axis=1)
