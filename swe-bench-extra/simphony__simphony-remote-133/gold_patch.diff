diff --git a/remoteappmanager/docker/container.py b/remoteappmanager/docker/container.py
index cb484b0..f92304c 100644
--- a/remoteappmanager/docker/container.py
+++ b/remoteappmanager/docker/container.py
@@ -56,7 +56,7 @@ class Container(HasTraits):
             ")>")
 
     @classmethod
-    def from_docker_containers_dict(cls, docker_dict):
+    def from_docker_dict(cls, docker_dict):
         """Returns a Container object with the info given by a
         docker Client.
 
@@ -74,24 +74,66 @@ class Container(HasTraits):
         >>> # containers is a list of dict
         >>> containers = docker.Client().containers()
 
-        >>> Container.from_docker_containers_dict(containers[0])
+        >>> Container.from_docker_dict(containers[0])
         """
-        ip = cls.ip.default_value
-        port = cls.port.default_value
-
-        if docker_dict.get('Ports'):
-            ip = docker_dict['Ports'][0].get('IP', ip)
-            port = docker_dict['Ports'][0].get('PublicPort', port)
-
-        labels = docker_dict.get("Labels", {})
-        mapping_id = labels.get(SIMPHONY_NS+"mapping_id", "")
-        url_id = labels.get(SIMPHONY_NS+"url_id", "")
-
-        return cls(docker_id=docker_dict.get('Id', ''),
-                   name=docker_dict.get('Names', ('',))[0],
-                   image_name=docker_dict.get('Image', ''),
-                   image_id=docker_dict.get('ImageID', ''),
-                   mapping_id=mapping_id,
-                   ip=ip,
-                   port=port,
-                   url_id=url_id)
+
+        is_inspect_container_output = ("Config" in docker_dict)
+
+        kwargs = dict(
+            docker_id=docker_dict.get('Id') or '',
+            ip=cls.ip.default_value,
+            port=cls.port.default_value,
+        )
+
+        if is_inspect_container_output:
+            # It's a client.inspect_container() output
+
+            network_settings = docker_dict.get("NetworkSettings") or {}
+            ports = network_settings.get("Ports") or {}
+            # unfortunately, in the case of a running container, we don't have
+            # a single list. Instead, we have a dict where the keys are
+            # the "port identifier" (e.g. 8888/tcp) and the value is a list
+            # of dictionaries.
+            # We assume that we only have one, as above
+            if len(ports) > 1:
+                raise ValueError("Container Ports had more than one element.")
+
+            if len(ports):
+                port_values = list(ports.values())[0]
+                if len(port_values) > 1:
+                    raise ValueError("Container Ports values had "
+                                     "more than one element.")
+
+                if len(port_values):
+                    kwargs["ip"] = port_values[0].get("HostIp") or kwargs["ip"]
+                    kwargs["port"] = int(port_values[0].get("HostPort") or
+                                         kwargs["port"])
+
+            config = docker_dict.get("Config", {})
+            labels = config.get("Labels")
+
+            kwargs["image_name"] = config.get("Image")
+            kwargs["image_id"] = docker_dict["Image"]
+            kwargs["name"] = docker_dict["Name"]
+        else:
+            # It's a client.containers() output, so we have different rules.
+            ports = docker_dict.get('Ports') or []
+            if len(ports) > 1:
+                raise ValueError("Container Ports had more than one element.")
+
+            if len(ports):
+                kwargs["ip"] = ports[0].get('IP') or kwargs["ip"]
+                kwargs["port"] = int(ports[0].get('PublicPort') or
+                                     kwargs["port"])
+
+            labels = docker_dict.get("Labels") or {}
+
+            kwargs["image_name"] = docker_dict.get('Image') or ''
+            kwargs["image_id"] = docker_dict.get("ImageID") or ''
+            names = docker_dict.get("Names") or ('', )
+            kwargs["name"] = names[0]
+
+        kwargs["mapping_id"] = labels.get(SIMPHONY_NS+"mapping_id") or ""
+        kwargs["url_id"] = labels.get(SIMPHONY_NS+"url_id") or ""
+
+        return cls(**kwargs)
diff --git a/remoteappmanager/docker/container_manager.py b/remoteappmanager/docker/container_manager.py
index 1db82e5..7b85d53 100644
--- a/remoteappmanager/docker/container_manager.py
+++ b/remoteappmanager/docker/container_manager.py
@@ -166,8 +166,8 @@ class ContainerManager(LoggingMixin):
         infos = yield self.docker_client.containers(filters=filters)
         for info in infos:
             try:
-                container = Container.from_docker_containers_dict(info)
-            except Exception:
+                container = Container.from_docker_dict(info)
+            except ValueError:
                 self.log.exception("Unable to parse container info.")
                 continue
 
diff --git a/remoteappmanager/restresources/container.py b/remoteappmanager/restresources/container.py
index c3cd5e8..64bf36a 100644
--- a/remoteappmanager/restresources/container.py
+++ b/remoteappmanager/restresources/container.py
@@ -118,7 +118,7 @@ class Container(Resource):
         if not container_dict:
             return None
 
-        return DockerContainer.from_docker_containers_dict(container_dict[0])
+        return DockerContainer.from_docker_dict(container_dict[0])
 
     @gen.coroutine
     def _start_container(self, user_name, app, policy, mapping_id):
