diff --git a/examples/quotestoscrape/items.py b/examples/quotestoscrape/items.py
index 360d6f0..2eac930 100644
--- a/examples/quotestoscrape/items.py
+++ b/examples/quotestoscrape/items.py
@@ -3,3 +3,4 @@ import scrapy
 class QuotesToScrapeItem(scrapy.Item):
     quote = scrapy.Field()
     author = scrapy.Field()
+    tags = scrapy.Field()
diff --git a/examples/quotestoscrape/spiders/quotestoscrape.py b/examples/quotestoscrape/spiders/quotestoscrape.py
index 04dd31e..da8ff0e 100644
--- a/examples/quotestoscrape/spiders/quotestoscrape.py
+++ b/examples/quotestoscrape/spiders/quotestoscrape.py
@@ -5,7 +5,7 @@ from ..loader import QuotesItemLoader
 
 class BaseExampleSpider(scrapy.Spider):
 
-    start_urls = ['http://quotes.toscrape.com/']
+    start_urls = ["http://quotes.toscrape.com/"]
 
 
 class QuotesToScrapeSimpleSpider(BaseExampleSpider):
@@ -22,18 +22,17 @@ class QuotesToScrapeSimpleSpider(BaseExampleSpider):
     been successfully matched.
     """
 
-    name = 'quotestoscrape_simple'
-
+    name = "quotestoscrape_simple"
 
     def parse(self, response):
         """Notice that in order for this enhanced ItemLoader package to work,
         we'll need to inject the stats API into it.
         """
 
-        for quote_div in response.css('div.quote'):
+        for quote_div in response.css("div.quote"):
             loader = QuotesItemLoader(selector=quote_div, stats=self.crawler.stats)
-            loader.add_css('quote', '.quote > span[itemprop="text"]::text')
-            loader.add_css('author', '.author::text')
+            loader.add_css("quote", '.quote > span[itemprop="text"]::text')
+            loader.add_css("author", ".author::text")
             yield loader.load_item()
 
 
@@ -50,20 +49,58 @@ class QuotesToScrapeHasMissingSpider(BaseExampleSpider):
         }
     """
 
-    name = 'quotestoscrape_has_missing'
+    name = "quotestoscrape_has_missing"
+
+    def parse(self, response):
+        """Notice that in order for this enhanced ItemLoader package to work,
+        we'll need to inject the stats API into it.
+        """
+
+        for quote_div in response.css("div.quote"):
+            loader = QuotesItemLoader(selector=quote_div, stats=self.crawler.stats)
+            loader.add_css(
+                "quote",
+                [
+                    # This first parser rule doesn't exist at all.
+                    ".this-quote-does-not-exist span::text",
+                    '.quote > span[itemprop="text"]::text',
+                ],
+            )
+            loader.add_css("author", ".author::text")
+            yield loader.load_item()
+
+
+class QuotesToScrapeUseName(BaseExampleSpider):
+    """Demonstrates the new feature of naming the parsers using the 'name' param.
+
+        2019-06-16 14:32:32 [scrapy.statscollectors] INFO: Dumping Scrapy stats:
+        { ...
+          'parser/QuotesItemLoader/author/css/1/basic author class': 10,
+          'parser/QuotesItemLoader/quote/css/1/Quotes inside the box/missing': 10,
+          'parser/QuotesItemLoader/quote/css/2/Quotes inside the box': 10,
+          'parser/QuotesItemLoader/tags/css/1/underneath the author text': 10,
+          ...
+        }
+    """
 
+    name = "quotestoscrape_use_name"
 
     def parse(self, response):
         """Notice that in order for this enhanced ItemLoader package to work,
         we'll need to inject the stats API into it.
         """
 
-        for quote_div in response.css('div.quote'):
+        for quote_div in response.css("div.quote"):
             loader = QuotesItemLoader(selector=quote_div, stats=self.crawler.stats)
-            loader.add_css('quote', [
-                # This first parser rule doesn't exist at all.
-                '.this-quote-does-not-exist span::text',
-                '.quote > span[itemprop="text"]::text'
-            ])
-            loader.add_css('author', '.author::text')
+            loader.add_css(
+                "quote",
+                [
+                    # This first parser rule doesn't exist at all.
+                    ".this-quote-does-not-exist span::text",
+                    '.quote > span[itemprop="text"]::text',
+                ],
+                name="Quotes inside the box",
+            )
+            loader.add_css("author", ".author::text", name="basic author class")
+            loader.add_css("tags", ".tag::text", name="underneath the author text")
             yield loader.load_item()
diff --git a/tests/test_loader.py b/tests/test_loader.py
index 2a3672b..92a7f58 100644
--- a/tests/test_loader.py
+++ b/tests/test_loader.py
@@ -50,9 +50,9 @@ def test_get_selector_values():
 
     loader.write_to_stats.assert_has_calls(
         [
-            mock.call(field_name, parsed_data, 1, "css"),
-            mock.call(field_name, parsed_data, 2, "css"),
-            mock.call(field_name, parsed_data, 3, "css"),
+            mock.call(field_name, parsed_data, 1, "css", name=None),
+            mock.call(field_name, parsed_data, 2, "css", name=None),
+            mock.call(field_name, parsed_data, 3, "css", name=None),
         ]
     )
 
@@ -205,16 +205,36 @@ def test_multiple_1(loader):
             mock.call("parser/TestItemLoader/title/css/3"),
         ]
     )
+    assert loader.stats.inc_value.call_count == 3
 
 
-def test_multiple_2(loader):
-    loader.add_css('title', 'h2::text')
-    loader.add_xpath('title', '//article/h2/text()')
+def test_multiple_1_with_name(loader):
+    loader.add_css('title', 'h2::text', name='title from h2')
+    loader.add_css('title', [
+        'article h2::text',
+        'article .product-title::text',
+    ], name='title from article')
+    loader.stats.inc_value.assert_has_calls(
+        [
+            mock.call("parser/TestItemLoader/title/css/1/title from h2"),
+            mock.call("parser/TestItemLoader/title/css/2/title from article"),
+            mock.call("parser/TestItemLoader/title/css/3/title from article"),
+        ]
+    )
+    assert loader.stats.inc_value.call_count == 3
+
+
+def test_multiple_2_with_name(loader):
+    loader.add_css('title', 'h2::text', name='title from h2')
+    loader.add_xpath('title', '//article/h2/text()', name='title from article')
     loader.add_css('title', 'article .product-title::text')
+    loader.add_xpath('title', '//aside/h1/text()', name='title from aside')
     loader.stats.inc_value.assert_has_calls(
         [
-            mock.call("parser/TestItemLoader/title/css/1"),
-            mock.call("parser/TestItemLoader/title/xpath/1"),
+            mock.call("parser/TestItemLoader/title/css/1/title from h2"),
+            mock.call("parser/TestItemLoader/title/xpath/1/title from article"),
             mock.call("parser/TestItemLoader/title/css/2"),
+            mock.call("parser/TestItemLoader/title/xpath/2/title from aside/missing"),
         ]
     )
+    assert loader.stats.inc_value.call_count == 4
