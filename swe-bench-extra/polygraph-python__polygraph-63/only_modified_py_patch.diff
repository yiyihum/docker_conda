diff --git a/polygraph/types/definitions.py b/polygraph/types/definitions.py
index 5943fc1..dcec78e 100644
--- a/polygraph/types/definitions.py
+++ b/polygraph/types/definitions.py
@@ -32,12 +32,11 @@ Field = namedtuple(
 class EnumValue:
     __slots__ = ["name", "description", "is_deprecated", "deprecation_reason", "parent"]
 
-    def __init__(self, name, parent, description=None, deprecation_reason=None):
+    def __init__(self, description=None, name=None, deprecation_reason=None):
         self.name = name
         self.description = description
         self.is_deprecated = bool(deprecation_reason)
         self.deprecation_reason = deprecation_reason
-        self.parent = parent
 
     def __repr__(self):
         return "EnumValue('{}')".format(self.name)
diff --git a/polygraph/types/enum.py b/polygraph/types/enum.py
index 110d0ff..de76f83 100644
--- a/polygraph/types/enum.py
+++ b/polygraph/types/enum.py
@@ -9,10 +9,10 @@ from polygraph.types.definitions import EnumValue, TypeKind
 
 class EnumTypeMeta(PolygraphTypeMeta):
     def __new__(cls, name, bases, namespace):
-        for key, desc in namespace.items():
-            if not key.startswith("_") and key != "Type":
-                desc = namespace.get(key)
-                namespace[key] = EnumValue(name=key, description=desc, parent=name)
+        for key, value in namespace.items():
+            if type(value) == EnumValue:
+                value.name = value.name or key
+                value.parent = name
         return super().__new__(cls, name, bases, namespace)
 
 

