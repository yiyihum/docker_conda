diff --git a/tests/open_alchemy/utility_base/test_repr_.py b/tests/open_alchemy/utility_base/test_repr_.py
new file mode 100644
index 00000000..1bf3ea7b
--- /dev/null
+++ b/tests/open_alchemy/utility_base/test_repr_.py
@@ -0,0 +1,61 @@
+"""Test for the repr of the model."""
+
+from unittest import mock
+
+import pytest
+
+from open_alchemy import utility_base
+
+
+class Model:
+    """Model class for testing."""
+
+    def __init__(self):
+        """Construct."""
+        self.property_int = 1
+        self.property_str = "value 1"
+        self.property_repr = mock.MagicMock(
+            spec=["__repr__"], __repr__=lambda _: "open_alchemy.models.RefModel()"
+        )
+
+
+@pytest.mark.parametrize(
+    "properties, expected_repr",
+    [
+        pytest.param({}, "open_alchemy.models.Model()", id="no properties",),
+        pytest.param(
+            {"property_not_def": {}},
+            "open_alchemy.models.Model(property_not_def=None)",
+            id="single property property simple no value",
+        ),
+        pytest.param(
+            {"property_int": {}},
+            "open_alchemy.models.Model(property_int=1)",
+            id="single property property simple value",
+        ),
+        pytest.param(
+            {"property_repr": {}},
+            "open_alchemy.models.Model(property_repr=open_alchemy.models.RefModel())",
+            id="single property property repr",
+        ),
+        pytest.param(
+            {"property_int": {}, "property_str": {}},
+            "open_alchemy.models.Model(property_int=1, property_str='value 1')",
+            id="multiple property property",
+        ),
+    ],
+)
+@pytest.mark.utility_base
+def test_calculate(properties, expected_repr):
+    """
+    GIVEN model instance, properties and expected repr result
+    WHEN calculate is called on the instance
+    THEN the expected repr is returned.
+    """
+    instance = Model()
+
+    returned_repr = utility_base.repr_.calculate(
+        instance=instance, properties=properties
+    )
+
+    assert returned_repr == expected_repr
diff --git a/tests/open_alchemy/utility_base/test_to_dict.py b/tests/open_alchemy/utility_base/test_to_dict.py
index 51713a44..da1e676b 100644
--- a/tests/open_alchemy/utility_base/test_to_dict.py
+++ b/tests/open_alchemy/utility_base/test_to_dict.py
@@ -172,7 +172,7 @@ def test_to_str(__init__):
     THEN the JSON representation of the properties is returned.
     """
     model = type(
-        "model",
+        "Model",
         (utility_base.UtilityBase,),
         {
             "_schema": {"properties": {"key_1": {"type": "integer"}}},
@@ -184,3 +184,5 @@ def test_to_str(__init__):
     returned_str = instance.to_str()
 
     assert returned_str == '{"key_1": 1}'
+    assert str(instance) == '{"key_1": 1}'
+    assert repr(instance) == "open_alchemy.models.Model(key_1=1)"
