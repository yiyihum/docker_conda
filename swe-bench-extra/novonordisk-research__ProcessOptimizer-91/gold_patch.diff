diff --git a/ProcessOptimizer/bokeh_plot.py b/ProcessOptimizer/bokeh_plot.py
index e71b40a..24d8d69 100644
--- a/ProcessOptimizer/bokeh_plot.py
+++ b/ProcessOptimizer/bokeh_plot.py
@@ -280,7 +280,7 @@ def get_plot_list(layout, result, active_list, n_points, x_eval, confidence):
             elif i == j:  # Diagonal
                 # Passing j = None to dependence
                 # makes it calculate a diagonal plot
-                xi, yi = dependence(
+                xi, yi, _ = dependence(
                     space,
                     model,
                     i,
diff --git a/ProcessOptimizer/space/space.py b/ProcessOptimizer/space/space.py
index a31b04f..e66e504 100644
--- a/ProcessOptimizer/space/space.py
+++ b/ProcessOptimizer/space/space.py
@@ -305,10 +305,13 @@ class Real(Dimension):
         * `n` [int]
             Number of samples.
         """
-        a = (np.arange(n)+0.5)/n  # Evenly distributed betweeen 0 and 1
+        # Generate sample points by splitting the space 0 to 1 into n pieces
+        # and picking the middle of each piece. Samples are spaced 1/n apart
+        # inside the interval with a buffer of half a step size to the extremes
+        samples = (np.arange(n)+0.5)/n
 
-        # Transform to the bounds of this dimension
-        return a*(self.high-self.low)+self.low
+        # Transform the samples to the range used for this dimension
+        return samples*(self.high - self.low) + self.low
 
 
 class Integer(Dimension):
@@ -413,9 +416,17 @@ class Integer(Dimension):
         * `n` [int]
             Number of samples.
         """
-        rounded_numbers = np.round(np.linspace(self.low, self.high, n))
-        # convert to a list of integers
-        return [int(a) for a in rounded_numbers]
+        # Generate sample points by splitting the space 0 to 1 into n pieces
+        # and picking the middle of each piece. Samples are spaced 1/n apart
+        # inside the interval with a buffer of half a step size to the extremes
+        samples = (np.arange(n)+0.5)/n
+        # Transform the samples to the range used for this dimension and then 
+        # round them back to integers. If your space is less than n wide, some 
+        # of your samples will be rounded to the same number
+        samples = np.round(samples*(self.high - self.low) + self.low)
+        
+        # Convert samples to a list of integers
+        return samples.astype(int)
 
 
 class Categorical(Dimension):
