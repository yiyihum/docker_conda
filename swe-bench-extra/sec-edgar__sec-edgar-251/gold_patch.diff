diff --git a/docs/source/whatsnew/v0.4.0.rst b/docs/source/whatsnew/v0.4.0.rst
index 52354c6..af6620b 100644
--- a/docs/source/whatsnew/v0.4.0.rst
+++ b/docs/source/whatsnew/v0.4.0.rst
@@ -16,6 +16,7 @@ Many breaking changes, as this update does a lot of restructuring.
 - Fix use of ``user_agent`` by ``NetworkClient`` and require its use by all filings classes/functions
 - Fix issue where daily CLI command would not work due to ``date_cleanup`` returning ``datetime.datetime`` instead of ``datetime.date``
 - Fix issue where ``CompanyFilings`` includes links that are not exact matches to ``filing_type``.
+- Fix issue where ``get_urls`` does not reset ``params`` after getting company filings URLs.
 - Add NSAR filing types. Thanks to mjkoo91!
 - Get rid of caching behavior that was causing issues when downloading filings.
 - Simplify ``ComboFilings`` logic for getting quarterly and daily dates.
diff --git a/secedgar/core/company.py b/secedgar/core/company.py
index c4fa20e..b4480c4 100644
--- a/secedgar/core/company.py
+++ b/secedgar/core/company.py
@@ -107,12 +107,10 @@ class CompanyFilings(AbstractFiling):
                  ownership="include",
                  match_format="ALL",
                  **kwargs):
-        # Leave params before other setters
         self._params = {
             "action": "getcompany",
             "output": "xml",
-            "owner": ownership,
-            "start": 0,
+            "start": 0
         }
         self.start_date = start_date
         self.end_date = end_date
@@ -123,6 +121,7 @@ class CompanyFilings(AbstractFiling):
         self._client = client or NetworkClient(user_agent=user_agent, **kwargs)
         # make CIKLookup object for users if not given
         self.cik_lookup = cik_lookup
+        self.ownership = ownership
 
     @property
     def path(self):
@@ -132,6 +131,17 @@ class CompanyFilings(AbstractFiling):
     @property
     def params(self):
         """:obj:`dict`: Parameters to include in requests."""
+        if self.start_date:
+            self._params["datea"] = sanitize_date(self.start_date)
+        else:
+            self._params.pop("datea", None)  # if no start date, make sure it isn't in params
+
+        if self.end_date:
+            self._params["dateb"] = sanitize_date(self.end_date)
+        else:
+            self._params.pop("dateb", None)  # if no end date, make sure it isn't in params
+
+        self._params["ownership"] = self.ownership
         return self._params
 
     @property
@@ -151,18 +161,14 @@ class CompanyFilings(AbstractFiling):
 
     @match_format.setter
     def match_format(self, val):
-        if val in ["EXACT", "AMEND", "ALL"]:
-            self._match_format = val
-        else:
-            raise ValueError("Format must be one of EXACT,AMEND,ALL")
+        if val not in ("EXACT", "AMEND", "ALL"):
+            raise ValueError("Format must be 'EXACT', 'AMEND', or 'ALL'.")
+        self._match_format = val
 
     @start_date.setter
     def start_date(self, val):
-        if val is not None:
-            self._params["datea"] = sanitize_date(val)
-            self._start_date = val
-        else:
-            self._start_date = None
+        sanitize_date(val)  # make sure start date is valid
+        self._start_date = val
 
     @property
     def end_date(self):
@@ -171,7 +177,7 @@ class CompanyFilings(AbstractFiling):
 
     @end_date.setter
     def end_date(self, val):
-        self._params["dateb"] = sanitize_date(val)
+        sanitize_date(val)  # make sure end date is valid
         self._end_date = val
 
     @property
@@ -184,7 +190,9 @@ class CompanyFilings(AbstractFiling):
         if isinstance(filing_type, FilingType):
             self._params["type"] = filing_type.value
         elif filing_type is not None:
-            raise FilingTypeError
+            raise FilingTypeError(
+                f"filing_type must be of type FilingType. Given {type(filing_type)}."
+            )
         self._filing_type = filing_type
 
     @property
@@ -215,6 +223,17 @@ class CompanyFilings(AbstractFiling):
             val = CIKLookup(val, client=self.client)
         self._cik_lookup = val
 
+    @property
+    def ownership(self):
+        """str: Whether or not to include ownership in search."""
+        return self._ownership
+
+    @ownership.setter
+    def ownership(self, val):
+        if val not in ("include", "exclude"):
+            raise ValueError(f"Ownership must be 'include' or 'exclude'. Given {val}.")
+        self._ownership = val
+
     def get_urls(self, **kwargs):
         """Get urls for all CIKs given to Filing object.
 
