diff --git a/tests/test_osfs.py b/tests/test_osfs.py
index 3286b87..bd125c1 100644
--- a/tests/test_osfs.py
+++ b/tests/test_osfs.py
@@ -7,13 +7,11 @@ import os
 import shutil
 import tempfile
 import unittest
-
 import pytest
 
-from fs import osfs
-from fs.path import relpath
+from fs import osfs, open_fs
+from fs.path import relpath, dirname
 from fs import errors
-
 from fs.test import FSTestCases
 
 from six import text_type
@@ -77,7 +75,7 @@ class TestOSFS(FSTestCases, unittest.TestCase):
 
     def test_not_exists(self):
         with self.assertRaises(errors.CreateFailed):
-            fs = osfs.OSFS("/does/not/exists/")
+            osfs.OSFS("/does/not/exists/")
 
     def test_expand_vars(self):
         self.fs.makedir("TYRIONLANISTER")
@@ -162,3 +160,40 @@ class TestOSFS(FSTestCases, unittest.TestCase):
             with self.assertRaises(errors.InvalidCharsInPath):
                 with self.fs.open("13 – Marked Register.pdf", "wb") as fh:
                     fh.write(b"foo")
+
+    def test_consume_geturl(self):
+        self.fs.create("foo")
+        try:
+            url = self.fs.geturl("foo", purpose="fs")
+        except errors.NoURL:
+            self.assertFalse(self.fs.hasurl("foo"))
+        else:
+            self.assertTrue(self.fs.hasurl("foo"))
+
+        # Should not throw an error
+        base_dir = dirname(url)
+        open_fs(base_dir)
+
+    def test_complex_geturl(self):
+        self.fs.makedirs("foo/bar ha")
+        test_fixtures = [
+            # test file, expected url path
+            ["foo", "foo"],
+            ["foo-bar", "foo-bar"],
+            ["foo_bar", "foo_bar"],
+            ["foo/bar ha/barz", "foo/bar%20ha/barz"],
+            ["example b.txt", "example%20b.txt"],
+            ["exampleㄓ.txt", "example%E3%84%93.txt"],
+        ]
+        file_uri_prefix = "osfs://"
+        for test_file, relative_url_path in test_fixtures:
+            self.fs.create(test_file)
+            expected = file_uri_prefix + self.fs.getsyspath(relative_url_path).replace(
+                "\\", "/"
+            )
+            actual = self.fs.geturl(test_file, purpose="fs")
+
+            self.assertEqual(actual, expected)
+
+    def test_geturl_return_no_url(self):
+        self.assertRaises(errors.NoURL, self.fs.geturl, "test/path", "upload")
diff --git a/tests/test_tarfs.py b/tests/test_tarfs.py
index dd8ad47..c3570bd 100644
--- a/tests/test_tarfs.py
+++ b/tests/test_tarfs.py
@@ -7,7 +7,6 @@ import six
 import tarfile
 import tempfile
 import unittest
-
 import pytest
 
 from fs import tarfs
@@ -15,6 +14,7 @@ from fs.enums import ResourceType
 from fs.compress import write_tar
 from fs.opener import open_fs
 from fs.opener.errors import NotWriteable
+from fs.errors import NoURL
 from fs.test import FSTestCases
 
 from .test_archives import ArchiveTestCases
@@ -93,15 +93,6 @@ class TestWriteGZippedTarFS(FSTestCases, unittest.TestCase):
         os.remove(fs._tar_file)
         del fs._tar_file
 
-    def assert_is_bzip(self):
-        try:
-            tarfile.open(fs._tar_file, "r:gz")
-        except tarfile.ReadError:
-            self.fail("{} is not a valid gz archive".format(fs._tar_file))
-        for other_comps in ["xz", "bz2", ""]:
-            with self.assertRaises(tarfile.ReadError):
-                tarfile.open(fs._tar_file, "r:{}".format(other_comps))
-
 
 @pytest.mark.skipif(six.PY2, reason="Python2 does not support LZMA")
 class TestWriteXZippedTarFS(FSTestCases, unittest.TestCase):
@@ -181,11 +172,44 @@ class TestReadTarFS(ArchiveTestCases, unittest.TestCase):
         except:
             self.fail("Couldn't open tarfs from filename")
 
+    def test_read_non_existent_file(self):
+        fs = tarfs.TarFS(open(self._temp_path, "rb"))
+        # it has been very difficult to catch exception in __del__()
+        del fs._tar
+        try:
+            fs.close()
+        except AttributeError:
+            self.fail("Could not close tar fs properly")
+        except Exception:
+            self.fail("Strange exception in closing fs")
+
     def test_getinfo(self):
         super(TestReadTarFS, self).test_getinfo()
         top = self.fs.getinfo("top.txt", ["tar"])
         self.assertTrue(top.get("tar", "is_file"))
 
+    def test_geturl_for_fs(self):
+        test_fixtures = [
+            # test_file, expected
+            ["foo/bar/egg/foofoo", "foo/bar/egg/foofoo"],
+            ["foo/bar egg/foo foo", "foo/bar%20egg/foo%20foo"],
+        ]
+        tar_file_path = self._temp_path.replace("\\", "/")
+        for test_file, expected_file in test_fixtures:
+            expected = "tar://{tar_file_path}!/{file_inside_tar}".format(
+                tar_file_path=tar_file_path, file_inside_tar=expected_file
+            )
+            self.assertEqual(self.fs.geturl(test_file, purpose="fs"), expected)
+
+    def test_geturl_for_fs_but_file_is_binaryio(self):
+        self.fs._file = six.BytesIO()
+        self.assertRaises(NoURL, self.fs.geturl, "test", "fs")
+
+    def test_geturl_for_download(self):
+        test_file = "foo/bar/egg/foofoo"
+        with self.assertRaises(NoURL):
+            self.fs.geturl(test_file)
+
 
 class TestBrokenPaths(unittest.TestCase):
     @classmethod
diff --git a/tests/test_url_tools.py b/tests/test_url_tools.py
new file mode 100644
index 0000000..5b5d4a1
--- /dev/null
+++ b/tests/test_url_tools.py
@@ -0,0 +1,39 @@
+# coding: utf-8
+"""Test url tools. """
+from __future__ import unicode_literals
+
+import platform
+import unittest
+
+from fs._url_tools import url_quote
+
+
+class TestBase(unittest.TestCase):
+    def test_quote(self):
+        test_fixtures = [
+            # test_snippet, expected
+            ["foo/bar/egg/foofoo", "foo/bar/egg/foofoo"],
+            ["foo/bar ha/barz", "foo/bar%20ha/barz"],
+            ["example b.txt", "example%20b.txt"],
+            ["exampleㄓ.txt", "example%E3%84%93.txt"],
+        ]
+        if platform.system() == "Windows":
+            test_fixtures.extend(
+                [
+                    ["C:\\My Documents\\test.txt", "C:/My%20Documents/test.txt"],
+                    ["C:/My Documents/test.txt", "C:/My%20Documents/test.txt"],
+                    # on Windows '\' is regarded as path separator
+                    ["test/forward\\slash", "test/forward/slash"],
+                ]
+            )
+        else:
+            test_fixtures.extend(
+                [
+                    # colon:tmp is bad path under Windows
+                    ["test/colon:tmp", "test/colon%3Atmp"],
+                    # Unix treat \ as %5C
+                    ["test/forward\\slash", "test/forward%5Cslash"],
+                ]
+            )
+        for test_snippet, expected in test_fixtures:
+            self.assertEqual(url_quote(test_snippet), expected)
diff --git a/tests/test_zipfs.py b/tests/test_zipfs.py
index 421d80d..9b2e82e 100644
--- a/tests/test_zipfs.py
+++ b/tests/test_zipfs.py
@@ -13,8 +13,9 @@ from fs import zipfs
 from fs.compress import write_zip
 from fs.opener import open_fs
 from fs.opener.errors import NotWriteable
+from fs.errors import NoURL
 from fs.test import FSTestCases
-from fs.enums import Seek, ResourceType
+from fs.enums import Seek
 
 from .test_archives import ArchiveTestCases
 
@@ -168,6 +169,33 @@ class TestReadZipFS(ArchiveTestCases, unittest.TestCase):
             self.assertEqual(f.seek(-5, Seek.end), 7)
             self.assertEqual(f.read(), b"World")
 
+    def test_geturl_for_fs(self):
+        test_file = "foo/bar/egg/foofoo"
+        expected = "zip://{zip_file_path}!/{file_inside_zip}".format(
+            zip_file_path=self._temp_path.replace("\\", "/"), file_inside_zip=test_file
+        )
+        self.assertEqual(self.fs.geturl(test_file, purpose="fs"), expected)
+
+    def test_geturl_for_fs_but_file_is_binaryio(self):
+        self.fs._file = six.BytesIO()
+        self.assertRaises(NoURL, self.fs.geturl, "test", "fs")
+
+    def test_geturl_for_download(self):
+        test_file = "foo/bar/egg/foofoo"
+        with self.assertRaises(NoURL):
+            self.fs.geturl(test_file)
+
+    def test_read_non_existent_file(self):
+        fs = zipfs.ZipFS(open(self._temp_path, "rb"))
+        # it has been very difficult to catch exception in __del__()
+        del fs._zip
+        try:
+            fs.close()
+        except AttributeError:
+            self.fail("Could not close tar fs properly")
+        except Exception:
+            self.fail("Strange exception in closing fs")
+
 
 class TestReadZipFSMem(TestReadZipFS):
     def make_source_fs(self):
@@ -184,8 +212,8 @@ class TestDirsZipFS(unittest.TestCase):
                 z.writestr("foo/bar/baz/egg", b"hello")
             with zipfs.ReadZipFS(path) as zip_fs:
                 foo = zip_fs.getinfo("foo", ["details"])
-                bar = zip_fs.getinfo("foo/bar")
-                baz = zip_fs.getinfo("foo/bar/baz")
+                self.assertEqual(zip_fs.getinfo("foo/bar").name, "bar")
+                self.assertEqual(zip_fs.getinfo("foo/bar/baz").name, "baz")
                 self.assertTrue(foo.is_dir)
                 self.assertTrue(zip_fs.isfile("foo/bar/baz/egg"))
         finally:
