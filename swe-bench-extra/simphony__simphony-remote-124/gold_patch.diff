diff --git a/remoteappmanager/cli/remoteappdb/__main__.py b/remoteappmanager/cli/remoteappdb/__main__.py
index ab76d4f..e4144ab 100644
--- a/remoteappmanager/cli/remoteappdb/__main__.py
+++ b/remoteappmanager/cli/remoteappdb/__main__.py
@@ -94,6 +94,24 @@ def get_docker_client():
     return client
 
 
+def is_sqlitedb_url(db_url):
+    """Returns True if the url refers to a sqlite database"""
+    return db_url.startswith("sqlite:///")
+
+
+def sqlitedb_present(db_url):
+    """Checks if the db url is present.
+    Remote urls are always assumed to be present, so this method
+    concerns mostly sqlite databases."""
+
+    if not db_url.startswith("sqlite:///"):
+        raise ValueError("db_url {} does not refer to a "
+                         "sqlite database.".format(db_url))
+
+    path = sqlite_url_to_path(db_url)
+    return os.path.exists(path)
+
+
 class RemoteAppDBContext(object):
     def __init__(self, db_url):
         db_url = normalise_to_url(db_url)
@@ -120,11 +138,9 @@ def init(ctx):
     db_url = db.url
 
     # Check if the database already exists
-    if db_url.startswith("sqlite:///"):
-        path = sqlite_url_to_path(db_url)
-        if os.path.exists(path):
-            raise click.UsageError("Refusing to overwrite database "
-                                   "at {}".format(db_url))
+    if is_sqlitedb_url(db_url) and sqlitedb_present(db_url):
+        raise click.UsageError("Refusing to overwrite database "
+                               "at {}".format(db_url))
     db.reset()
 
 
@@ -133,9 +149,18 @@ def init(ctx):
 
 
 @cli.group()
-def user():
+@click.pass_context
+def user(ctx):
     """Subcommand to manage users."""
-    pass
+    db = ctx.obj.db
+    db_url = db.url
+
+    # sqlite driver for sqlalchemy creates an empty file on commit as a side
+    # effect. We don't want this creation to happen, so before attempting
+    # the creation we stop short if we already find out that the file is
+    # missing and cannot possibly be initialized.
+    if is_sqlitedb_url(db_url) and not sqlitedb_present(db_url):
+        raise click.UsageError("Could not find database at {}".format(db_url))
 
 
 @user.command()
@@ -228,9 +253,14 @@ def list(ctx, no_decoration, show_apps):
 
 
 @cli.group()
-def app():
+@click.pass_context
+def app(ctx):
     """Subcommand to manage applications."""
-    pass
+    db = ctx.obj.db
+    db_url = db.url
+
+    if is_sqlitedb_url(db_url) and not sqlitedb_present(db_url):
+        raise click.UsageError("Could not find database at {}".format(db_url))
 
 
 @app.command()  # noqa
diff --git a/remoteappmanager/spawner.py b/remoteappmanager/spawner.py
index a226fa9..8637879 100644
--- a/remoteappmanager/spawner.py
+++ b/remoteappmanager/spawner.py
@@ -20,7 +20,7 @@ class Spawner(LocalProcessSpawner):
     proxy = Any()
 
     #: The path of the configuration file for the cmd executable
-    config_file_path = Unicode()
+    config_file_path = Unicode(config=True)
 
     def __init__(self, **kwargs):
         super().__init__(**kwargs)
