diff --git a/doc/changes/latest.rst b/doc/changes/latest.rst
index 1116285f6..44c8470f7 100644
--- a/doc/changes/latest.rst
+++ b/doc/changes/latest.rst
@@ -16,6 +16,7 @@ Enhancements
 
 Changes
 -------
+- The behavior of :func:`~nilearn.datasets.fetch_atlas_craddock_2012`, :func:`~nilearn.datasets.fetch_atlas_smith_2009` and :func:`~nilearn.datasets.fetch_atlas_basc_multiscale_2015` is updated with their new parameters to return one map along with a deprecation cycle (:gh:`3353` by `Ahmad Chamma`_).
 
 
 0.10.1rc1
diff --git a/nilearn/datasets/tests/test_atlas.py b/nilearn/datasets/tests/test_atlas.py
index 648e37b3f..d09d98d57 100644
--- a/nilearn/datasets/tests/test_atlas.py
+++ b/nilearn/datasets/tests/test_atlas.py
@@ -263,6 +263,25 @@ def test_fetch_atlas_craddock_2012(tmp_path, request_mocker):
     local_archive = Path(
         __file__).parent / "data" / "craddock_2011_parcellations.tar.gz"
     request_mocker.url_mapping["*craddock*"] = local_archive
+    bunch = atlas.fetch_atlas_craddock_2012(data_dir=tmp_path,
+                                            verbose=0, homogeneity='spatial')
+    bunch_rand = atlas.fetch_atlas_craddock_2012(data_dir=tmp_path,
+                                                 verbose=0,
+                                                 homogeneity='random')
+    bunch_no_mean = atlas.fetch_atlas_craddock_2012(data_dir=tmp_path,
+                                                    verbose=0,
+                                                    grp_mean=False,
+                                                    homogeneity='spatial')
+    assert request_mocker.url_count == 1
+    assert bunch['map'] == str(tmp_path / 'craddock_2012'
+                               / 'scorr05_mean_all.nii.gz')
+    assert bunch_rand['map'] == str(tmp_path / 'craddock_2012'
+                                    / 'random_all.nii.gz')
+    assert bunch_no_mean['map'] == str(tmp_path / 'craddock_2012'
+                                       / 'scorr05_2level_all.nii.gz')
+    assert bunch.description != ''
+
+    # Old code
     bunch = atlas.fetch_atlas_craddock_2012(data_dir=tmp_path,
                                             verbose=0)
 
@@ -283,6 +302,13 @@ def test_fetch_atlas_craddock_2012(tmp_path, request_mocker):
 
 
 def test_fetch_atlas_smith_2009(tmp_path, request_mocker):
+    bunch = atlas.fetch_atlas_smith_2009(data_dir=tmp_path, verbose=0,
+                                         dimension=20)
+    assert bunch['map'] == str(tmp_path / 'smith_2009' / 'rsn20.nii.gz')
+    assert len(bunch.keys()) == 2
+    assert bunch.description != ''
+
+    # Old code
     bunch = atlas.fetch_atlas_smith_2009(data_dir=tmp_path, verbose=0)
 
     keys = ("rsn20", "rsn10", "rsn70",
@@ -412,7 +438,8 @@ def test_fetch_atlas_difumo(tmp_path, request_mocker):
              "CSF": ["" for _ in range(dim)]}
         )
         root = Path("{0}".format(dim))
-        archive = {root / "labels_{0}_dictionary.csv".format(dim): labels.to_csv(index=False),
+        archive = {root / "labels_{0}_dictionary.csv".format(dim):
+                          labels.to_csv(index=False),
                    root / "2mm" / "maps.nii.gz": "",
                    root / "3mm" / "maps.nii.gz": ""}
         request_mocker.url_mapping[url] = dict_to_archive(archive, "zip")
@@ -481,6 +508,40 @@ def test_fetch_atlas_aal_version_error(tmp_path, request_mocker):
 
 
 def test_fetch_atlas_basc_multiscale_2015(tmp_path, request_mocker):
+    # default version='sym',
+    data_sym = atlas.fetch_atlas_basc_multiscale_2015(data_dir=tmp_path,
+                                                      verbose=0, resolution=7)
+    # version='asym'
+    data_asym = atlas.fetch_atlas_basc_multiscale_2015(version='asym',
+                                                       verbose=0,
+                                                       data_dir=tmp_path,
+                                                       resolution=7)
+
+    dataset_name = 'basc_multiscale_2015'
+    name_sym = 'template_cambridge_basc_multiscale_nii_sym'
+    basename_sym = 'template_cambridge_basc_multiscale_sym_scale007.nii.gz'
+
+    assert data_sym['map'] == str(tmp_path / dataset_name / name_sym
+                                  / basename_sym)
+
+    name_asym = 'template_cambridge_basc_multiscale_nii_asym'
+    basename_asym = 'template_cambridge_basc_multiscale_asym_scale007.nii.gz'
+    assert data_asym['map'] == str(tmp_path / dataset_name / name_asym
+                                   / basename_asym)
+
+    assert len(data_sym) == 2
+    with pytest.raises(
+            ValueError,
+            match='The version of Brain parcellations requested "aym"'):
+        atlas.fetch_atlas_basc_multiscale_2015(version="aym",
+                                               data_dir=tmp_path,
+                                               verbose=0)
+
+    assert request_mocker.url_count == 2
+    assert data_sym.description != ''
+    assert data_asym.description != ''
+
+    # Old code
     # default version='sym',
     data_sym = atlas.fetch_atlas_basc_multiscale_2015(data_dir=tmp_path,
                                                       verbose=0)
@@ -556,9 +617,9 @@ def test_fetch_atlas_surf_destrieux(tmp_path, request_mocker, verbose=0):
     # Create mock annots
     for hemi in ('left', 'right'):
         nibabel.freesurfer.write_annot(
-                os.path.join(data_dir,
-                             '%s.aparc.a2009s.annot' % hemi),
-                np.arange(4), np.zeros((4, 5)), 5 * ['a'],)
+            os.path.join(data_dir,
+                         '%s.aparc.a2009s.annot' % hemi),
+            np.arange(4), np.zeros((4, 5)), 5 * ['a'],)
 
     bunch = atlas.fetch_atlas_surf_destrieux(data_dir=tmp_path, verbose=0)
     # Our mock annots have 4 labels
