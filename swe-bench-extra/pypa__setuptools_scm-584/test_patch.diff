diff --git a/testing/test_basic_api.py b/testing/test_basic_api.py
index 5aaf8fa..3e56ea5 100644
--- a/testing/test_basic_api.py
+++ b/testing/test_basic_api.py
@@ -135,3 +135,24 @@ def test_parse_plain_fails(recwarn):
 
     with pytest.raises(TypeError):
         setuptools_scm.get_version(parse=parse)
+
+
+def test_custom_version_cls():
+    """Test that `normalize` and `version_cls` work as expected"""
+
+    class MyVersion:
+        def __init__(self, tag_str: str):
+            self.version = tag_str
+
+        def __repr__(self):
+            return f"hello,{self.version}"
+
+    # you can not use normalize=False and version_cls at the same time
+    with pytest.raises(ValueError):
+        setuptools_scm.get_version(normalize=False, version_cls=MyVersion)
+
+    # TODO unfortunately with PRETEND_KEY the preformatted flag becomes True
+    #  which bypasses our class. which other mechanism would be ok to use here
+    #  to create a test?
+    # monkeypatch.setenv(setuptools_scm.PRETEND_KEY, "1.0.1")
+    # assert setuptools_scm.get_version(version_cls=MyVersion) == "1"
diff --git a/testing/test_git.py b/testing/test_git.py
index cc5ef53..40c5e99 100644
--- a/testing/test_git.py
+++ b/testing/test_git.py
@@ -1,15 +1,15 @@
 import sys
 import os
-from setuptools_scm import integration
-from setuptools_scm.utils import do, has_command
-from setuptools_scm import git
-import pytest
-from datetime import datetime
 from os.path import join as opj
-from setuptools_scm.file_finder_git import git_find_files
-from datetime import date
+import pytest
+from datetime import datetime, date
 from unittest.mock import patch, Mock
 
+from setuptools_scm import integration, git, NonNormalizedVersion
+from setuptools_scm.utils import do, has_command
+from setuptools_scm.file_finder_git import git_find_files
+
+
 pytestmark = pytest.mark.skipif(
     not has_command("git", warn=False), reason="git executable not found"
 )
@@ -104,6 +104,70 @@ def test_version_from_git(wd):
     wd("git tag 17.33.0-rc")
     assert wd.version == "17.33.0rc0"
 
+    # custom normalization
+    assert wd.get_version(normalize=False) == "17.33.0-rc"
+    assert wd.get_version(version_cls=NonNormalizedVersion) == "17.33.0-rc"
+    assert (
+        wd.get_version(version_cls="setuptools_scm.NonNormalizedVersion")
+        == "17.33.0-rc"
+    )
+
+
+@pytest.mark.parametrize("with_class", [False, type, str])
+def test_git_version_unnormalized_setuptools(with_class, tmpdir, wd, monkeypatch):
+    """
+    Test that when integrating with setuptools without normalization,
+    the version is not normalized in write_to files,
+    but still normalized by setuptools for the final dist metadata.
+    """
+    monkeypatch.delenv("SETUPTOOLS_SCM_DEBUG")
+    p = wd.cwd
+
+    # create a setup.py
+    dest_file = str(tmpdir.join("VERSION.txt")).replace("\\", "/")
+    if with_class is False:
+        # try normalize = False
+        setup_py = """
+from setuptools import setup
+setup(use_scm_version={'normalize': False, 'write_to': '%s'})
+"""
+    elif with_class is type:
+        # custom non-normalizing class
+        setup_py = """
+from setuptools import setup
+
+class MyVersion:
+    def __init__(self, tag_str: str):
+        self.version = tag_str
+
+    def __repr__(self):
+        return self.version
+
+setup(use_scm_version={'version_cls': MyVersion, 'write_to': '%s'})
+"""
+    elif with_class is str:
+        # non-normalizing class referenced by name
+        setup_py = """from setuptools import setup
+setup(use_scm_version={
+    'version_cls': 'setuptools_scm.NonNormalizedVersion',
+    'write_to': '%s'
+})
+"""
+
+    # finally write the setup.py file
+    p.joinpath("setup.py").write_text(setup_py % dest_file)
+
+    # do git operations and tag
+    wd.commit_testfile()
+    wd("git tag 17.33.0-rc1")
+
+    # setuptools still normalizes using packaging.Version (removing the dash)
+    res = do((sys.executable, "setup.py", "--version"), p)
+    assert res == "17.33.0rc1"
+
+    # but the version tag in the file is non-normalized (with the dash)
+    assert tmpdir.join("VERSION.txt").read() == "17.33.0-rc1"
+
 
 @pytest.mark.issue(179)
 def test_unicode_version_scheme(wd):
diff --git a/testing/test_version.py b/testing/test_version.py
index 9984a5d..eda22c8 100644
--- a/testing/test_version.py
+++ b/testing/test_version.py
@@ -283,3 +283,19 @@ def test_calver_by_date_semver(version, expected_next):
 def test_calver_by_date_future_warning():
     with pytest.warns(UserWarning, match="your previous tag*"):
         calver_by_date(meta(date_to_str(days_offset=-2), config=c, distance=2))
+
+
+def test_custom_version_cls():
+    """Test that we can pass our own version class instead of pkg_resources"""
+
+    class MyVersion:
+        def __init__(self, tag_str: str):
+            self.tag = tag_str
+
+        def __repr__(self):
+            return "Custom %s" % self.tag
+
+    scm_version = meta("1.0.0-foo", config=Configuration(version_cls=MyVersion))
+
+    assert isinstance(scm_version.tag, MyVersion)
+    assert repr(scm_version.tag) == "Custom 1.0.0-foo"
