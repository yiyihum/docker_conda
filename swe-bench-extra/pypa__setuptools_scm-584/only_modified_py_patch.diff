diff --git a/src/setuptools_scm/__init__.py b/src/setuptools_scm/__init__.py
index 97061f2..e874aaa 100644
--- a/src/setuptools_scm/__init__.py
+++ b/src/setuptools_scm/__init__.py
@@ -15,6 +15,7 @@ from .config import (
     DEFAULT_VERSION_SCHEME,
     DEFAULT_LOCAL_SCHEME,
     DEFAULT_TAG_REGEX,
+    NonNormalizedVersion,
 )
 from .utils import function_has_arg, trace
 from .version import format_version, meta
@@ -159,6 +160,8 @@ def get_version(
     parse=None,
     git_describe_command=None,
     dist_name=None,
+    version_cls=None,
+    normalize=True,
 ):
     """
     If supplied, relative_to should be a file from which root may
@@ -188,3 +191,22 @@ def _get_version(config):
         )
 
         return version_string
+
+
+# Public API
+__all__ = [
+    "get_version",
+    "dump_version",
+    "version_from_scm",
+    "Configuration",
+    "NonNormalizedVersion",
+    "DEFAULT_VERSION_SCHEME",
+    "DEFAULT_LOCAL_SCHEME",
+    "DEFAULT_TAG_REGEX",
+    # TODO: are the symbols below part of public API ?
+    "function_has_arg",
+    "trace",
+    "format_version",
+    "meta",
+    "iter_matching_entrypoints",
+]
diff --git a/src/setuptools_scm/config.py b/src/setuptools_scm/config.py
index 78c7fc2..443f1f4 100644
--- a/src/setuptools_scm/config.py
+++ b/src/setuptools_scm/config.py
@@ -3,6 +3,14 @@ import os
 import re
 import warnings
 
+try:
+    from packaging.version import Version
+except ImportError:
+    import pkg_resources
+
+    Version = pkg_resources.packaging.version.Version
+
+
 from .utils import trace
 
 DEFAULT_TAG_REGEX = r"^(?:[\w-]+-)?(?P<version>[vV]?\d+(?:\.\d+){0,2}[^\+]*)(?:\+.*)?$"
@@ -65,6 +73,8 @@ class Configuration:
         parse=None,
         git_describe_command=None,
         dist_name=None,
+        version_cls=None,
+        normalize=True,
     ):
         # TODO:
         self._relative_to = relative_to
@@ -83,6 +93,30 @@ class Configuration:
         self.git_describe_command = git_describe_command
         self.dist_name = dist_name
 
+        if not normalize:
+            # `normalize = False` means `version_cls = NonNormalizedVersion`
+            if version_cls is not None:
+                raise ValueError(
+                    "Providing a custom `version_cls` is not permitted when "
+                    "`normalize=False`"
+                )
+            self.version_cls = NonNormalizedVersion
+        else:
+            # Use `version_cls` if provided, default to packaging or pkg_resources
+            if version_cls is None:
+                version_cls = Version
+            elif isinstance(version_cls, str):
+                try:
+                    # Not sure this will work in old python
+                    import importlib
+
+                    pkg, cls_name = version_cls.rsplit(".", 1)
+                    version_cls_host = importlib.import_module(pkg)
+                    version_cls = getattr(version_cls_host, cls_name)
+                except:  # noqa
+                    raise ValueError(f"Unable to import version_cls='{version_cls}'")
+            self.version_cls = version_cls
+
     @property
     def fallback_root(self):
         return self._fallback_root
@@ -137,3 +171,28 @@ class Configuration:
             defn = __import__("toml").load(strm)
         section = defn.get("tool", {})["setuptools_scm"]
         return cls(dist_name=dist_name, **section)
+
+
+class NonNormalizedVersion(Version):
+    """A non-normalizing version handler.
+
+    You can use this class to preserve version verification but skip normalization.
+    For example you can use this to avoid git release candidate version tags
+    ("1.0.0-rc1") to be normalized to "1.0.0rc1". Only use this if you fully
+    trust the version tags.
+    """
+
+    def __init__(self, version):
+        # parse and validate using parent
+        super().__init__(version)
+
+        # store raw for str
+        self._raw_version = version
+
+    def __str__(self):
+        # return the non-normalized version (parent returns the normalized)
+        return self._raw_version
+
+    def __repr__(self):
+        # same pattern as parent
+        return f"<NonNormalizedVersion({self._raw_version!r})>"
diff --git a/src/setuptools_scm/version.py b/src/setuptools_scm/version.py
index befa0dd..3ed5ac1 100644
--- a/src/setuptools_scm/version.py
+++ b/src/setuptools_scm/version.py
@@ -4,16 +4,9 @@ import re
 import time
 import os
 
-from .config import Configuration
+from .config import Configuration, Version as PkgVersion
 from .utils import trace, iter_entry_points
 
-try:
-    from packaging.version import Version
-except ImportError:
-    import pkg_resources
-
-    Version = pkg_resources.packaging.version.Version
-
 
 SEMVER_MINOR = 2
 SEMVER_PATCH = 3
@@ -77,7 +70,7 @@ def tag_to_version(tag, config=None):
             )
         )
 
-    version = Version(version)
+    version = config.version_cls(version)
     trace("version", repr(version))
 
     return version
@@ -168,7 +161,7 @@ class ScmVersion:
 def _parse_tag(tag, preformatted, config):
     if preformatted:
         return tag
-    if not isinstance(tag, Version):
+    if not isinstance(tag, config.version_cls):
         tag = tag_to_version(tag, config)
     return tag
 
@@ -319,7 +312,7 @@ def date_ver_match(ver):
     return match
 
 
-def guess_next_date_ver(version, node_date=None, date_fmt=None):
+def guess_next_date_ver(version, node_date=None, date_fmt=None, version_cls=None):
     """
     same-day -> patch +1
     other-day -> today
@@ -354,8 +347,9 @@ def guess_next_date_ver(version, node_date=None, date_fmt=None):
         node_date=head_date, date_fmt=date_fmt, patch=patch
     )
     # rely on the Version object to ensure consistency (e.g. remove leading 0s)
-    # TODO: support for intentionally non-normalized date versions
-    next_version = str(Version(next_version))
+    if version_cls is None:
+        version_cls = PkgVersion
+    next_version = str(version_cls(next_version))
     return next_version
 
 
@@ -370,7 +364,11 @@ def calver_by_date(version):
             match = date_ver_match(ver)
             if match:
                 return ver
-    return version.format_next_version(guess_next_date_ver, node_date=version.node_date)
+    return version.format_next_version(
+        guess_next_date_ver,
+        node_date=version.node_date,
+        version_cls=version.config.version_cls,
+    )
 
 
 def _format_local_with_time(version, time_format):

