diff --git a/src/watchdog/events.py b/src/watchdog/events.py
index 73e82e8..8b9bca8 100755
--- a/src/watchdog/events.py
+++ b/src/watchdog/events.py
@@ -52,6 +52,10 @@ Event Classes
    :members:
    :show-inheritance:
 
+.. autoclass:: FileClosedEvent
+   :members:
+   :show-inheritance:
+
 .. autoclass:: DirCreatedEvent
    :members:
    :show-inheritance:
@@ -95,6 +99,7 @@ EVENT_TYPE_MOVED = 'moved'
 EVENT_TYPE_DELETED = 'deleted'
 EVENT_TYPE_CREATED = 'created'
 EVENT_TYPE_MODIFIED = 'modified'
+EVENT_TYPE_CLOSED = 'closed'
 
 
 class FileSystemEvent:
@@ -212,6 +217,12 @@ class FileMovedEvent(FileSystemMovedEvent):
     """File system event representing file movement on the file system."""
 
 
+class FileClosedEvent(FileSystemEvent):
+    """File system event representing file close on the file system."""
+
+    event_type = EVENT_TYPE_CLOSED
+
+
 # Directory events.
 
 
@@ -263,6 +274,7 @@ class FileSystemEventHandler:
             EVENT_TYPE_DELETED: self.on_deleted,
             EVENT_TYPE_MODIFIED: self.on_modified,
             EVENT_TYPE_MOVED: self.on_moved,
+            EVENT_TYPE_CLOSED: self.on_closed,
         }[event.event_type](event)
 
     def on_any_event(self, event):
@@ -310,6 +322,15 @@ class FileSystemEventHandler:
             :class:`DirModifiedEvent` or :class:`FileModifiedEvent`
         """
 
+    def on_closed(self, event):
+        """Called when a file opened for writing is closed.
+
+        :param event:
+            Event representing file closing.
+        :type event:
+            :class:`FileClosedEvent`
+        """
+
 
 class PatternMatchingEventHandler(FileSystemEventHandler):
     """
diff --git a/src/watchdog/observers/inotify.py b/src/watchdog/observers/inotify.py
index 5cb8c5d..7c5d9c6 100644
--- a/src/watchdog/observers/inotify.py
+++ b/src/watchdog/observers/inotify.py
@@ -86,6 +86,7 @@ from watchdog.events import (
     FileModifiedEvent,
     FileMovedEvent,
     FileCreatedEvent,
+    FileClosedEvent,
     generate_sub_moved_events,
     generate_sub_created_events,
 )
@@ -170,6 +171,13 @@ class InotifyEmitter(EventEmitter):
                 cls = DirCreatedEvent if event.is_directory else FileCreatedEvent
                 self.queue_event(cls(src_path))
                 self.queue_event(DirModifiedEvent(os.path.dirname(src_path)))
+            elif event.is_close_write and not event.is_directory:
+                cls = FileClosedEvent
+                self.queue_event(cls(src_path))
+                self.queue_event(DirModifiedEvent(os.path.dirname(src_path)))
+            # elif event.is_close_nowrite and not event.is_directory:
+            #     cls = FileClosedEvent
+            #     self.queue_event(cls(src_path))
             elif event.is_delete_self and src_path == self.watch.path:
                 self.queue_event(DirDeletedEvent(src_path))
                 self.stop()
diff --git a/src/watchdog/observers/inotify_c.py b/src/watchdog/observers/inotify_c.py
index 61452dd..8925147 100644
--- a/src/watchdog/observers/inotify_c.py
+++ b/src/watchdog/observers/inotify_c.py
@@ -139,6 +139,7 @@ WATCHDOG_ALL_EVENTS = reduce(
         InotifyConstants.IN_DELETE,
         InotifyConstants.IN_DELETE_SELF,
         InotifyConstants.IN_DONT_FOLLOW,
+        InotifyConstants.IN_CLOSE_WRITE,
     ])
 
 

