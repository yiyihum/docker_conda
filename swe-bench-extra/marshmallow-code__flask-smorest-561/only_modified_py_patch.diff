diff --git a/flask_smorest/etag.py b/flask_smorest/etag.py
index 0a3bc0e..5fcef90 100644
--- a/flask_smorest/etag.py
+++ b/flask_smorest/etag.py
@@ -2,13 +2,12 @@
 
 from functools import wraps
 from copy import deepcopy
-import json
 import http
 import warnings
 
 import hashlib
 
-from flask import request
+from flask import request, json
 
 from .exceptions import PreconditionRequired, PreconditionFailed, NotModified
 from .utils import deepupdate, resolve_schema_instance, get_appcontext
@@ -98,11 +97,13 @@ class EtagMixin:
     def _generate_etag(etag_data, extra_data=None):
         """Generate an ETag from data
 
-        etag_data: Data to use to compute ETag (must be json serializable)
+        etag_data: Data to use to compute ETag
         extra_data: Extra data to add before hashing
 
         Typically, extra_data is used to add pagination metadata to the hash.
         It is not dumped through the Schema.
+
+        Data is JSON serialized before hashing using the Flask app JSON serializer.
         """
         if extra_data:
             etag_data = (etag_data, extra_data)
diff --git a/flask_smorest/spec/__init__.py b/flask_smorest/spec/__init__.py
index 4cf624a..c38460a 100644
--- a/flask_smorest/spec/__init__.py
+++ b/flask_smorest/spec/__init__.py
@@ -1,6 +1,5 @@
 """API specification using OpenAPI"""
 
-import json
 import http
 
 import flask
@@ -126,10 +125,9 @@ class DocBlueprintMixin:
 
     def _openapi_json(self):
         """Serve JSON spec file"""
-        # We don't use Flask.jsonify here as it would sort the keys
-        # alphabetically while we want to preserve the order.
         return current_app.response_class(
-            json.dumps(self.spec.to_dict(), indent=2), mimetype="application/json"
+            flask.json.dumps(self.spec.to_dict(), indent=2, sort_keys=False),
+            mimetype="application/json",
         )
 
     def _openapi_redoc(self):
@@ -396,7 +394,9 @@ def print_openapi_doc(format, config_prefix):
     """Print OpenAPI JSON document."""
     config_prefix = normalize_config_prefix(config_prefix)
     if format == "json":
-        click.echo(json.dumps(_get_spec_dict(config_prefix), indent=2))
+        click.echo(
+            flask.json.dumps(_get_spec_dict(config_prefix), indent=2, sort_keys=False)
+        )
     else:  # format == "yaml"
         if HAS_PYYAML:
             click.echo(yaml.dump(_get_spec_dict(config_prefix)))
@@ -415,7 +415,7 @@ def write_openapi_doc(format, output_file, config_prefix):
     config_prefix = normalize_config_prefix(config_prefix)
     if format == "json":
         click.echo(
-            json.dumps(_get_spec_dict(config_prefix), indent=2),
+            flask.json.dumps(_get_spec_dict(config_prefix), indent=2, sort_keys=False),
             file=output_file,
         )
     else:  # format == "yaml"

