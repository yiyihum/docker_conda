diff --git a/tests/test_generators/input/jsonschema_collection_forms.yaml b/tests/test_generators/input/jsonschema_collection_forms.yaml
new file mode 100644
index 00000000..c2ad0872
--- /dev/null
+++ b/tests/test_generators/input/jsonschema_collection_forms.yaml
@@ -0,0 +1,79 @@
+schema:
+  id: http://example.org/test_collection_forms
+  name: test_collection_forms
+  imports:
+    - https://w3id.org/linkml/types
+  default_range: string
+
+  slots:
+    key:
+      key: true
+    value:
+    value2:
+    key_value_pairs:
+      range: KeyValuePair
+      multivalued: true
+      inlined: true
+    more_than_one_non_key_slots:
+      range: MoreThanOneNonKeySlot
+      multivalued: true
+      inlined: true
+
+  classes:
+    Test:
+      tree_root: true
+      slots:
+        - key_value_pairs
+        - more_than_one_non_key_slots
+    KeyValuePair:
+      slots:
+        - key
+        - value
+    MoreThanOneNonKeySlot:
+      slots:
+        - key
+        - value
+        - value2
+
+data_cases:
+  - data:
+      key_value_pairs:
+        k1:
+          key: k1
+          value: v1
+        k2:
+          key: k2
+          value: v2
+  - data:
+      key_value_pairs:
+        k1:
+          value: v1
+        k2:
+          value: v2
+  - data:
+      key_value_pairs:
+        k1: v1
+        k2: v2
+  - data:
+      more_than_one_non_key_slots:
+        k1:
+          key: k1
+          value: v1
+          value2: v12
+        k2:
+          key: k2
+          value: v2
+          value2: v22
+  - data:
+      more_than_one_non_key_slots:
+        k1:
+          value: v1
+          value2: v12
+        k2:
+          value: v2
+          value2: v22
+  - data:
+      more_than_one_non_key_slots:
+        k1: v1
+        k2: v2  
+    error_message: "not valid under any of the given schemas"
diff --git a/tests/test_generators/input/jsonschema_empty_inlined_as_dict_objects.yaml b/tests/test_generators/input/jsonschema_empty_inlined_as_dict_objects.yaml
new file mode 100644
index 00000000..d748ac2b
--- /dev/null
+++ b/tests/test_generators/input/jsonschema_empty_inlined_as_dict_objects.yaml
@@ -0,0 +1,60 @@
+schema:
+  id: http://example.org/test_empty_inlined_as_dict_objects
+  name: test_empty_inlined_as_dict_objects
+  imports:
+    - https://w3id.org/linkml/types
+  default_range: string
+
+  slots:
+    id:
+      key: true
+    s1:
+    s2:
+      required: true
+    no_non_key_required_slots:
+      range: HasNoNonKeyRequiredSlots
+      multivalued: true
+      inlined: true
+    non_key_required_slots:
+      range: HasNonKeyRequiredSlots
+      multivalued: true
+      inlined: true
+  
+  classes:
+    Test:
+      tree_root: true
+      slots:
+        - no_non_key_required_slots
+        - non_key_required_slots
+    HasNoNonKeyRequiredSlots:
+      slots:
+        - id
+        - s1
+    HasNonKeyRequiredSlots:
+      slots:
+        - id
+        - s1
+        - s2
+
+data_cases:
+  - data:
+      no_non_key_required_slots:
+        id1:
+          s1: value1
+        id2:
+          s1: value2
+  - data:
+      no_non_key_required_slots:
+        id1:
+        id2:
+  - data:
+      non_key_required_slots:
+        id1:
+          s2: value1
+        id2:
+          s2: value2
+  - data:
+      non_key_required_slots:
+        id1:
+        id2:
+    error_message: "None is not of type 'object'"
diff --git a/tests/test_generators/test_jsonschemagen.py b/tests/test_generators/test_jsonschemagen.py
index 5c1100fd..62e93b75 100644
--- a/tests/test_generators/test_jsonschemagen.py
+++ b/tests/test_generators/test_jsonschemagen.py
@@ -229,6 +229,17 @@ class JsonSchemaTestCase(unittest.TestCase):
 
         self.externalFileTest("jsonschema_multivalued_element_constraints.yaml")
 
+    def test_collection_forms(self):
+        """Tests that expanded, compact, and simple dicts can be validated"""
+
+        self.externalFileTest("jsonschema_collection_forms.yaml")
+
+    def test_empty_inlined_as_dict_objects(self):
+        """Tests that inlined objects with no non-key required slots can be null/empty"""
+
+        self.externalFileTest("jsonschema_empty_inlined_as_dict_objects.yaml")
+
+
     # **********************************************************
     #
     #    Utility methods
diff --git a/tests/test_issues/test_issue_129.py b/tests/test_issues/test_issue_129.py
index 5315e207..7d2336a8 100644
--- a/tests/test_issues/test_issue_129.py
+++ b/tests/test_issues/test_issue_129.py
@@ -39,11 +39,17 @@ class IssueJSONSchemaTypesTestCase(TestEnvironmentTestCase):
         assert props["has_ds"]["items"]["$ref"] == "#/$defs/D"
 
         # multi-valued, inlined (as dict) #411
-        D_id_opt = props["has_ds2"]["additionalProperties"]["$ref"].replace(
+        D_id_any_of = props["has_ds2"]["additionalProperties"]["anyOf"]
+        D_id_with_ref = next(d for d in D_id_any_of if "$ref" in d)
+        assert D_id_with_ref
+        D_id_opt = D_id_with_ref["$ref"].replace(
             "#/$defs/", ""
         )
         assert D_id_opt in defs
         assert defs[D_id_opt]["required"] == []
+        # D has no required slots other than the id, so the inlined value can also be null
+        D_type_null = next(d for d in D_id_any_of if "type" in d and d.type == 'null')
+        assert D_type_null
 
         # single-valued, non-inlined (foreign key)
         assert props["parent"]["type"] == "string"
diff --git a/tests/test_linter/test_cli.py b/tests/test_linter/test_cli.py
index 09bfafd1..3e4494d0 100644
--- a/tests/test_linter/test_cli.py
+++ b/tests/test_linter/test_cli.py
@@ -236,3 +236,42 @@ slots:
             self.assertIn("Class has name 'person'", result.stdout)
             self.assertIn(str(schema_b), result.stdout)
             self.assertIn("Slot has name 'a slot'", result.stdout)
+
+    def test_validate_schema(self):
+        with self.runner.isolated_filesystem():
+            with open(SCHEMA_FILE, "w") as f:
+                f.write("""
+id: http://example.org/test
+classes:
+    person:
+        description: a person
+""")
+
+            result = self.runner.invoke(main, ['--validate', SCHEMA_FILE])
+            self.assertEqual(result.exit_code, 2)
+            self.assertIn(
+                "error    In <root>: 'name' is a required property  (valid-schema)",
+                result.stdout,
+            )
+            self.assertIn(
+                "warning  Class has name 'person'  (standard_naming)",
+                result.stdout,
+            )
+
+    def test_validate_schema_only(self):
+        with self.runner.isolated_filesystem():
+            with open(SCHEMA_FILE, "w") as f:
+                f.write("""
+id: http://example.org/test
+classes:
+    person:
+        description: a person
+""")
+
+            result = self.runner.invoke(main, ['--validate-only', SCHEMA_FILE])
+            self.assertEqual(result.exit_code, 2)
+            self.assertIn(
+                "error    In <root>: 'name' is a required property  (valid-schema)",
+                result.stdout,
+            )
+            self.assertNotIn("(standard_naming)", result.stdout)
