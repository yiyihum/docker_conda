diff --git a/test/unit/test_exceptions.py b/test/unit/test_exceptions.py
new file mode 100644
index 0000000..ec6ac63
--- /dev/null
+++ b/test/unit/test_exceptions.py
@@ -0,0 +1,18 @@
+
+from ipfshttpclient.exceptions import MatcherSpecInvalidError, Error
+from ipfshttpclient.filescanner import Matcher
+
+
+def test_matcher_spec_invalid_error_message():
+	ex = MatcherSpecInvalidError('junk')
+	assert ex.args[0] == f"Don't know how to create a {Matcher.__name__} from spec 'junk'"
+
+
+def test_matcher_spec_invalid_error_multiple_inheritance():
+	ex = MatcherSpecInvalidError('wrong')
+
+	# Base class of all exceptions in this library
+	assert isinstance(ex, Error)
+
+	# Base class of type errors
+	assert isinstance(ex, TypeError)
diff --git a/test/unit/test_filescanner.py b/test/unit/test_filescanner.py
index 716b091..27cb03f 100644
--- a/test/unit/test_filescanner.py
+++ b/test/unit/test_filescanner.py
@@ -6,8 +6,10 @@ import typing as ty
 import pytest
 
 from datetime import datetime
+
 from ipfshttpclient import filescanner
 
+from ipfshttpclient.exceptions import MatcherSpecInvalidError
 from ipfshttpclient.filescanner import FSNodeEntry
 from ipfshttpclient.filescanner import FSNodeType
 
@@ -164,7 +166,7 @@ def test_glob_matching(
 
 @pytest.mark.parametrize('spec', [123, datetime.now()])
 def test_matcher_from_spec_rejects_invalid_spec_type(spec: ty.Any) -> None:
-	with pytest.raises(filescanner.MatcherSpecInvalidError):
+	with pytest.raises(MatcherSpecInvalidError):
 		filescanner.matcher_from_spec(spec)
 
 
