diff --git a/test/test_980.py b/test/test_980.py
new file mode 100644
index 00000000..3c60a849
--- /dev/null
+++ b/test/test_980.py
@@ -0,0 +1,28 @@
+from rdflib import Graph
+
+
+def test_980():
+    """
+    The problem that this test ensures rdflib solves is that, previous to PR #1108, the
+    parsing of two triples with the same n-triples Blank Nodes IDs, here _:0, would
+    result in triples with the same rdflib internal BN IDs, e.g.
+    rdflib.term.BNode('Ne3fd8261b37741fca22d502483d88964'), see the Issue #980. They
+    should have different IDs.
+    """
+    graph1 = """
+    _:0 <http://purl.obolibrary.org/obo/RO_0002350> <http://www.gbif.org/species/0000001> .
+    """
+    graph2 = """
+    _:0 <http://purl.obolibrary.org/obo/RO_0002350> <http://www.gbif.org/species/0000002> .
+    """
+
+    g = Graph()
+    g.parse(data=graph1, format="nt")
+    g.parse(data=graph2, format="nt")
+
+    subs = 0
+    for s in g.subjects(None, None):
+        subs += 1
+
+    # we must see two different BN subjects
+    assert subs == 2
diff --git a/test/test_issue1404.py b/test/test_issue1404.py
new file mode 100644
index 00000000..469f713e
--- /dev/null
+++ b/test/test_issue1404.py
@@ -0,0 +1,42 @@
+from rdflib import Graph, URIRef, FOAF
+from rdflib.term import RDFLibGenid
+from rdflib.compare import isomorphic
+
+
+def test_skolem_de_skolem_roundtrip():
+    """Test round-trip of skolemization/de-skolemization of data.
+
+    Issue: https://github.com/RDFLib/rdflib/issues/1404
+    """
+
+    ttl = '''
+    @prefix wd: <http://www.wikidata.org/entity/> .
+    @prefix foaf: <http://xmlns.com/foaf/0.1/> .
+
+    wd:Q1203 foaf:knows [ a foaf:Person;
+        foaf:name "Ringo" ].
+    '''
+
+    graph = Graph()
+    graph.parse(data=ttl, format='turtle')
+
+    query = {"subject": URIRef("http://www.wikidata.org/entity/Q1203"), "predicate": FOAF.knows}
+
+    # Save the original bnode id.
+    bnode_id = graph.value(**query)
+
+    skolemized_graph = graph.skolemize()
+
+    # Check the BNode is now an RDFLibGenid after skolemization.
+    skolem_bnode = skolemized_graph.value(**query)
+    assert type(skolem_bnode) == RDFLibGenid
+
+    # Check that the original bnode id exists somewhere in the uri.
+    assert bnode_id in skolem_bnode
+
+    # Check that the original data is not isomorphic with the skolemized data.
+    assert not isomorphic(graph, skolemized_graph)
+
+    # Check that the original graph data is the same as the de-skolemized data.
+    de_skolemized_graph = skolemized_graph.de_skolemize()
+    assert isomorphic(graph, de_skolemized_graph)
