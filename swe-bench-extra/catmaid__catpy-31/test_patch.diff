diff --git a/tests/common.py b/tests/common.py
new file mode 100644
index 0000000..b2552d2
--- /dev/null
+++ b/tests/common.py
@@ -0,0 +1,54 @@
+try:
+    from mock import Mock
+except ImportError:
+    from unittest.mock import Mock
+
+from catpy.applications.relation_identifier import RelationIdentifier
+
+import pytest
+
+
+@pytest.fixture
+def connectors_types():
+    return [
+        {
+            'name': 'Presynaptic',
+            'type': 'Synaptic',
+            'relation': 'presynaptic_to',
+            'relation_id': 0
+        }, {
+            'name': 'Postsynaptic',
+            'type': 'Synaptic',
+            'relation': 'postsynaptic_to',
+            'relation_id': 1
+        }, {
+            'name': 'Abutting',
+            'type': 'Abutting',
+            'relation': 'abutting',
+            'relation_id': 3
+        }, {
+            'name': 'Gap junction',
+            'type': 'Gap junction',
+            'relation': 'gapjunction_with',
+            'relation_id': 2
+        }, {
+            'name': 'Attachment',
+            'type': 'Attachment',
+            'relation': 'attached_to',
+            'relation_id': 4
+        }, {
+            'name': 'Close to',
+            'type': 'Spatial',
+            'relation': 'close_to',
+            'relation_id': 5
+        }
+    ]
+
+
+@pytest.fixture
+def relation_identifier(connectors_types):
+    catmaid = Mock()
+    catmaid.project_id = 1
+    relid = RelationIdentifier(catmaid)
+    relid._fetch_mappings = Mock(return_value=connectors_types)
+    return relid
diff --git a/tests/test_export.py b/tests/test_export.py
index 5e49e1d..aa19a66 100644
--- a/tests/test_export.py
+++ b/tests/test_export.py
@@ -15,6 +15,7 @@ except ImportError:
     from mock import Mock
 
 from tests.constants import FIXTURE_ROOT
+from tests.common import connectors_types, relation_identifier  # noqa
 
 
 nx_version = tuple(int(i) for i in nx.__version__.split('.'))
@@ -46,11 +47,13 @@ def expected_graph():
         return json_graph.node_link_graph(json.load(f))
 
 
-@pytest.fixture
-def export_widget():
+@pytest.fixture  # noqa
+def export_widget(relation_identifier):
     catmaid = Mock()
     catmaid.project_id = 1
-    return ExportWidget(catmaid)
+    exp = ExportWidget(catmaid)
+    exp.get_relation_identifier = Mock(return_value=relation_identifier)
+    return exp
 
 
 def test_reads_nodelinks(nodelink_json, export_widget, expected_graph):
diff --git a/tests/test_image.py b/tests/test_image.py
index b73fa41..eac5673 100644
--- a/tests/test_image.py
+++ b/tests/test_image.py
@@ -237,7 +237,7 @@ def test_stackmirror_corrects_file_extension():
     assert mirror_dot.file_extension == mirror_no_dot.file_extension == 'png'
 
 
-@pytest.mark.parametrize('tile_source_type', list(TileSourceType))
+@pytest.mark.parametrize('tile_source_type', format_urls.keys())
 def test_stackmirror_formats_url(tile_source_type):
     mirror = StackMirror(IMAGE_BASE, 256, 256, tile_source_type, 'png')
     tile_idx = TileIndex(0, 0, 0, 0, 256, 256)
diff --git a/tests/test_relation_identifier.py b/tests/test_relation_identifier.py
new file mode 100644
index 0000000..7370a6c
--- /dev/null
+++ b/tests/test_relation_identifier.py
@@ -0,0 +1,11 @@
+from catpy.client import ConnectorRelation
+
+from tests.common import relation_identifier, connectors_types  # noqa
+
+
+def test_from_id(relation_identifier):  # noqa
+    assert relation_identifier.from_id(0) == ConnectorRelation.presynaptic_to
+
+
+def test_to_id(relation_identifier):  # noqa
+    assert relation_identifier.to_id(ConnectorRelation.presynaptic_to) == 0
diff --git a/tests/test_utils/test_coordinate_transformer.py b/tests/test_utils/test_coordinate_transformer.py
index 8d8128c..8a0f5c1 100644
--- a/tests/test_utils/test_coordinate_transformer.py
+++ b/tests/test_utils/test_coordinate_transformer.py
@@ -225,14 +225,14 @@ def test_stack_to_scaled_array(coordinate_generator, default_coord_transformer,
 ])
 def test_can_validate_orientation_valid(orientation):
     trans = CoordinateTransformer(orientation=orientation)
-    assert trans.orientation == 'xy'
+    assert trans.orientation == StackOrientation.XY
     assert trans.depth_dim == 'z'
 
 
 @pytest.mark.parametrize('orientation,expected_exception', [
-    [3, AttributeError],
-    ['xyz', ValueError],
-    ['xc', ValueError]
+    [3, ValueError],
+    ['xyz', KeyError],
+    ['xc', KeyError]
 ])
 def test_can_validate_orientation_invalid(orientation, expected_exception):
     with pytest.raises(expected_exception):
