diff --git a/src/streamlink/plugins/cdnbg.py b/src/streamlink/plugins/cdnbg.py
index 79b0172b..ee7a8a82 100644
--- a/src/streamlink/plugins/cdnbg.py
+++ b/src/streamlink/plugins/cdnbg.py
@@ -23,6 +23,7 @@ class CDNBG(Plugin):
             mmtvmusic\.com/live|
             mu-vi\.tv/LiveStreams/pages/Live\.aspx|
             videochanel\.bstv\.bg|
+            live\.bstv\.bg|
             bloombergtv.bg/video
         )/?
     """, re.VERBOSE)
diff --git a/src/streamlink/plugins/pixiv.py b/src/streamlink/plugins/pixiv.py
index c1f83685..7cdee837 100644
--- a/src/streamlink/plugins/pixiv.py
+++ b/src/streamlink/plugins/pixiv.py
@@ -73,6 +73,25 @@ class Pixiv(Plugin):
         A pixiv.net account password to use with --pixiv-username
         """
         ),
+        PluginArgument(
+            "sessionid",
+            requires=["devicetoken"],
+            sensitive=True,
+            metavar="SESSIONID",
+            help="""
+        The pixiv.net sessionid thats used in pixivs PHPSESSID cookie.
+        can be used instead of the username/password login process.
+        """
+        ),
+        PluginArgument(
+            "devicetoken",
+            sensitive=True,
+            metavar="DEVICETOKEN",
+            help="""
+        The pixiv.net device token thats used in  pixivs device_token cookie.
+        can be used instead of the username/password login process.
+        """
+        ),
         PluginArgument(
             "purge-credentials",
             action="store_true",
@@ -125,6 +144,17 @@ class Pixiv(Plugin):
         else:
             log.error("Failed to log in.")
 
+
+    def _login_using_session_id_and_device_token(self, session_id, device_token):
+        res = self.session.http.get(self.login_url_get)
+
+        self.session.http.cookies.set('PHPSESSID', session_id, domain='.pixiv.net', path='/')
+        self.session.http.cookies.set('device_token', device_token, domain='.pixiv.net', path='/')
+
+        self.save_cookies()
+        log.info("Successfully set sessionId and deviceToken")
+
+
     def hls_stream(self, hls_url):
         log.debug("URL={0}".format(hls_url))
         for s in HLSStream.parse_variant_playlist(self.session, hls_url).items():
@@ -146,6 +176,9 @@ class Pixiv(Plugin):
         login_username = self.get_option("username")
         login_password = self.get_option("password")
 
+        login_session_id = self.get_option("sessionid")
+        login_device_token = self.get_option("devicetoken")
+
         if self.options.get("purge_credentials"):
             self.clear_cookies()
             self._authed = False
@@ -155,6 +188,8 @@ class Pixiv(Plugin):
             log.debug("Attempting to authenticate using cached cookies")
         elif not self._authed and login_username and login_password:
             self._login(login_username, login_password)
+        elif not self._authed and login_session_id and login_device_token:
+            self._login_using_session_id_and_device_token(login_session_id, login_device_token)
 
         streamer_data = self.get_streamer_data()
         performers = streamer_data.get("performers")
diff --git a/src/streamlink/plugins/schoolism.py b/src/streamlink/plugins/schoolism.py
index 5285c2a7..88d33312 100644
--- a/src/streamlink/plugins/schoolism.py
+++ b/src/streamlink/plugins/schoolism.py
@@ -17,8 +17,9 @@ class Schoolism(Plugin):
     url_re = re.compile(r"https?://(?:www\.)?schoolism\.com/(viewAssignment|watchLesson).php")
     login_url = "https://www.schoolism.com/index.php"
     key_time_url = "https://www.schoolism.com/video-html/key-time.php"
-    playlist_re = re.compile(r"var allVideos\s*=\s*(\[\{.*\}]);", re.DOTALL)
+    playlist_re = re.compile(r"var allVideos\s*=\s*(\[.*\]);", re.DOTALL)
     js_to_json = partial(re.compile(r'(?!<")(\w+):(?!/)').sub, r'"\1":')
+    fix_brackets = partial(re.compile(r',\s*\}').sub, r'}')
     playlist_schema = validate.Schema(
         validate.transform(playlist_re.search),
         validate.any(
@@ -26,7 +27,7 @@ class Schoolism(Plugin):
             validate.all(
                 validate.get(1),
                 validate.transform(js_to_json),
-                validate.transform(lambda x: x.replace(",}", "}")),  # remove invalid ,
+                validate.transform(fix_brackets),  # remove invalid ,
                 validate.transform(parse_json),
                 [{
                     "sources": validate.all([{
diff --git a/src/streamlink/plugins/ustvnow.py b/src/streamlink/plugins/ustvnow.py
index f02446df..4d6c213d 100644
--- a/src/streamlink/plugins/ustvnow.py
+++ b/src/streamlink/plugins/ustvnow.py
@@ -1,24 +1,33 @@
 from __future__ import unicode_literals
 
+import argparse
+import base64
+import json
 import logging
 import re
-from collections import OrderedDict
+from uuid import uuid4
 
+from Crypto.Cipher import AES
+from Crypto.Hash import SHA256
+from Crypto.Util.Padding import pad, unpad
+
+from streamlink import PluginError
+from streamlink.compat import urljoin, urlparse
 from streamlink.plugin import Plugin, PluginArguments, PluginArgument
-from streamlink.plugin.api import useragents
-from streamlink.plugin.api.utils import itertags
 from streamlink.stream import HLSStream
 
 log = logging.getLogger(__name__)
 
 
 class USTVNow(Plugin):
-    _url_re = re.compile(r"https?://(?:watch\.)?ustvnow\.com(?:/(?:watch|guide)/(?P<scode>\w+))?")
-    _token_re = re.compile(r'''var\s+token\s*=\s*"(.*?)";''')
-    _login_url = "https://watch.ustvnow.com/account/login"
-    _signin_url = "https://watch.ustvnow.com/account/signin"
-    _guide_url = "http://m.ustvnow.com/gtv/1/live/channelguidehtml"
-    _stream_url = "http://m.ustvnow.com/stream/1/live/view"
+    _url_re = re.compile(r"https?://(?:www\.)?ustvnow\.com/live/(?P<scode>\w+)/-(?P<id>\d+)")
+    _main_js_re = re.compile(r"""src=['"](main\..*\.js)['"]""")
+    _enc_key_re = re.compile(r'(?P<key>AES_(?:Key|IV))\s*:\s*"(?P<value>[^"]+)"')
+
+    TENANT_CODE = "ustvnow"
+    _api_url = "https://teleupapi.revlet.net/service/api/v1/"
+    _token_url = _api_url + "get/token"
+    _signin_url = "https://www.ustvnow.com/signin"
 
     arguments = PluginArguments(
         PluginArgument(
@@ -38,65 +47,135 @@ class USTVNow(Plugin):
         PluginArgument(
             "station-code",
             metavar="CODE",
-            help="USTV Now station code"
+            help=argparse.SUPPRESS
         ),
     )
 
+    def __init__(self, url):
+        super(USTVNow, self).__init__(url)
+        self._encryption_config = {}
+        self._token = None
+
     @classmethod
     def can_handle_url(cls, url):
         return cls._url_re.match(url) is not None
 
-    def login(self, username, password):
-        r = self.session.http.get(self._signin_url)
-        csrf = None
+    @classmethod
+    def encrypt_data(cls, data, key, iv):
+        rkey = "".join(reversed(key)).encode('utf8')
+        riv = "".join(reversed(iv)).encode('utf8')
+
+        fkey = SHA256.new(rkey).hexdigest()[:32].encode("utf8")
+
+        cipher = AES.new(fkey, AES.MODE_CBC, riv)
+        encrypted = cipher.encrypt(pad(data, 16, 'pkcs7'))
+        return base64.b64encode(encrypted)
 
-        for input in itertags(r.text, "input"):
-            if input.attributes['name'] == "csrf_ustvnow":
-                csrf = input.attributes['value']
+    @classmethod
+    def decrypt_data(cls, data, key, iv):
+        rkey = "".join(reversed(key)).encode('utf8')
+        riv = "".join(reversed(iv)).encode('utf8')
 
-        log.debug("CSRF: {0}", csrf)
+        fkey = SHA256.new(rkey).hexdigest()[:32].encode("utf8")
 
-        r = self.session.http.post(self._login_url, data={'csrf_ustvnow': csrf,
-                                             'signin_email': username,
-                                             'signin_password': password,
-                                             'signin_remember': '1'})
-        m = self._token_re.search(r.text)
-        return m and m.group(1)
+        cipher = AES.new(fkey, AES.MODE_CBC, riv)
+        decrypted = cipher.decrypt(base64.b64decode(data))
+        if decrypted:
+            return unpad(decrypted, 16, 'pkcs7')
+        else:
+            return decrypted
+
+    def _get_encryption_config(self, url):
+        # find the path to the main.js
+        # load the main.js and extract the config
+        if not self._encryption_config:
+            res = self.session.http.get(url)
+            m = self._main_js_re.search(res.text)
+            main_js_path = m and m.group(1)
+            if main_js_path:
+                res = self.session.http.get(urljoin(url, main_js_path))
+                self._encryption_config = dict(self._enc_key_re.findall(res.text))
+
+        return self._encryption_config.get("AES_Key"), self._encryption_config.get("AES_IV")
+
+    @property
+    def box_id(self):
+        if not self.cache.get("box_id"):
+            self.cache.set("box_id", str(uuid4()))
+        return self.cache.get("box_id")
+
+    def get_token(self):
+        """
+        Get the token for USTVNow
+        :return: a valid token
+        """
+
+        if not self._token:
+            log.debug("Getting new session token")
+            res = self.session.http.get(self._token_url, params={
+                "tenant_code": self.TENANT_CODE,
+                "box_id": self.box_id,
+                "product": self.TENANT_CODE,
+                "device_id": 5,
+                "display_lang_code": "ENG",
+                "device_sub_type": "",
+                "timezone": "UTC"
+            })
+
+            data = res.json()
+            if data['status']:
+                self._token = data['response']['sessionId']
+                log.debug("New token: {}".format(self._token))
+            else:
+                log.error("Token acquisition failed: {details} ({detail})".format(**data['error']))
+                raise PluginError("could not obtain token")
+
+        return self._token
+
+    def api_request(self, path, data, metadata=None):
+        key, iv = self._get_encryption_config(self._signin_url)
+        post_data = {
+            "data": self.encrypt_data(json.dumps(data).encode('utf8'), key, iv).decode("utf8"),
+            "metadata": self.encrypt_data(json.dumps(metadata).encode('utf8'), key, iv).decode("utf8")
+        }
+        headers = {"box-id": self.box_id,
+                   "session-id": self.get_token(),
+                   "tenant-code": self.TENANT_CODE,
+                   "content-type": "application/json"}
+        res = self.session.http.post(self._api_url + path, data=json.dumps(post_data), headers=headers).json()
+        data = dict((k, v and json.loads(self.decrypt_data(v, key, iv)))for k, v in res.items())
+        return data
+
+    def login(self, username, password):
+        log.debug("Trying to login...")
+        resp = self.api_request("send",
+                         {
+                             "login_id": username,
+                             "login_key": password,
+                             "login_mode": "1",
+                             "manufacturer": "123"
+                         },
+                         {"request": "signin"})
+
+        return resp['data']['status']
 
     def _get_streams(self):
         """
-        Finds the streams from tvcatchup.com.
+        Finds the streams from ustvnow.com.
         """
-        token = self.login(self.get_option("username"), self.get_option("password"))
-        m = self._url_re.match(self.url)
-        scode = m and m.group("scode") or self.get_option("station_code")
-
-        res = self.session.http.get(self._guide_url, params=dict(token=token))
-
-        channels = OrderedDict()
-        for t in itertags(res.text, "a"):
-            if t.attributes.get('cs'):
-                channels[t.attributes.get('cs').lower()] = t.attributes.get('title').replace("Watch ", "").strip()
-
-        if not scode:
-            log.error("Station code not provided, use --ustvnow-station-code.")
-            log.info("Available stations are: \n{0} ".format('\n'.join('    {0} ({1})'.format(c, n) for c, n in channels.items())))
-            return
-
-        if scode in channels:
-            log.debug("Finding streams for: {0}", channels.get(scode))
-
-            r = self.session.http.get(self._stream_url, params={"scode": scode,
-                                                   "token": token,
-                                                   "br_n": "Firefox",
-                                                   "br_v": "52",
-                                                   "br_d": "desktop"},
-                         headers={"User-Agent": useragents.FIREFOX})
-
-            data = self.session.http.json(r)
-            return HLSStream.parse_variant_playlist(self.session, data["stream"])
+        if self.login(self.get_option("username"), self.get_option("password")):
+            path = urlparse(self.url).path.strip("/")
+            resp = self.api_request("send", {"path": path}, {"request": "page/stream"})
+            if resp['data']['status']:
+                for stream in resp['data']['response']['streams']:
+                    if stream['keys']['licenseKey']:
+                        log.warning("Stream possibly protected by DRM")
+                    for q, s in HLSStream.parse_variant_playlist(self.session, stream['url']).items():
+                        yield (q, s)
+            else:
+                log.error("Could not find any streams: {code}: {message}".format(**resp['data']['error']))
         else:
-            log.error("Invalid station-code: {0}", scode)
+            log.error("Failed to login, check username and password")
 
 
 __plugin__ = USTVNow

