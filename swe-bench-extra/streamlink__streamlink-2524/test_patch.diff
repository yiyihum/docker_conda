diff --git a/tests/plugins/test_cdnbg.py b/tests/plugins/test_cdnbg.py
index b98b16ee..898cb598 100644
--- a/tests/plugins/test_cdnbg.py
+++ b/tests/plugins/test_cdnbg.py
@@ -23,6 +23,7 @@ class TestPluginCDNBG(unittest.TestCase):
         self.assertTrue(CDNBG.can_handle_url("https://mmtvmusic.com/live/"))
         self.assertTrue(CDNBG.can_handle_url("http://mu-vi.tv/LiveStreams/pages/Live.aspx"))
         self.assertTrue(CDNBG.can_handle_url("http://videochanel.bstv.bg/"))
+        self.assertTrue(CDNBG.can_handle_url("http://live.bstv.bg/"))
         self.assertTrue(CDNBG.can_handle_url("https://www.bloombergtv.bg/video"))
 
         # shouldn't match
diff --git a/tests/plugins/test_schoolism.py b/tests/plugins/test_schoolism.py
index 8890ee11..f37e85e8 100644
--- a/tests/plugins/test_schoolism.py
+++ b/tests/plugins/test_schoolism.py
@@ -17,3 +17,37 @@ class TestPluginSchoolism(unittest.TestCase):
         ]
         for url in should_not_match:
             self.assertFalse(Schoolism.can_handle_url(url))
+
+    def test_playlist_parse_subs(self):
+        with_subs = """var allVideos=[
+            {sources:[{type:"application/x-mpegurl",src:"https://d8u31iyce9xic.cloudfront.net/44/2/part1.m3u8?Policy=TOKEN&Signature=TOKEN&Key-Pair-Id=TOKEN",title:"Digital Painting - Lesson 2 - Part 1",playlistTitle:"Part 1",}],        subtitles: [{
+                    "default": true,
+                    kind: "subtitles", srclang: "en", label: "English",
+                    src:  "https://s3.amazonaws.com/schoolism-encoded/44/subtitles/2/2-1.vtt",
+                }],
+                },
+            {sources:[{type:"application/x-mpegurl",src:"https://d8u31iyce9xic.cloudfront.net/44/2/part2.m3u8?Policy=TOKEN&Signature=TOKEN&Key-Pair-Id=TOKEN",title:"Digital Painting - Lesson 2 - Part 2",playlistTitle:"Part 2",}],        subtitles: [{
+                    "default": true,
+                    kind: "subtitles", srclang: "en", label: "English",
+                    src:  "https://s3.amazonaws.com/schoolism-encoded/44/subtitles/2/2-2.vtt",
+                }]
+            }];
+            """
+
+        data = Schoolism.playlist_schema.validate(with_subs)
+
+        self.assertIsNotNone(data)
+        self.assertEqual(2, len(data))
+
+
+    def test_playlist_parse(self):
+        without_subs = """var allVideos=[
+            {sources:[{type:"application/x-mpegurl",src:"https://d8u31iyce9xic.cloudfront.net/14/1/part1.m3u8?Policy=TOKEN&Signature=TOKEN&Key-Pair-Id=TOKEN",title:"Gesture Drawing - Lesson 1 - Part 1",playlistTitle:"Part 1",}],},
+            {sources:[{type:"application/x-mpegurl",src:"https://d8u31iyce9xic.cloudfront.net/14/1/part2.m3u8?Policy=TOKEN&Signature=TOKEN&Key-Pair-Id=TOKEN",title:"Gesture Drawing - Lesson 1 - Part 2",playlistTitle:"Part 2",}]}
+            ];
+        """
+
+        data = Schoolism.playlist_schema.validate(without_subs)
+
+        self.assertIsNotNone(data)
+        self.assertEqual(2, len(data))
diff --git a/tests/plugins/test_ustvnow.py b/tests/plugins/test_ustvnow.py
index c7195265..4e7160d9 100644
--- a/tests/plugins/test_ustvnow.py
+++ b/tests/plugins/test_ustvnow.py
@@ -5,12 +5,27 @@ from streamlink.plugins.ustvnow import USTVNow
 
 class TestPluginUSTVNow(unittest.TestCase):
     def test_can_handle_url(self):
-        self.assertTrue(USTVNow.can_handle_url("http://watch.ustvnow.com"))
-        self.assertTrue(USTVNow.can_handle_url("https://watch.ustvnow.com/"))
-        self.assertTrue(USTVNow.can_handle_url("http://watch.ustvnow.com/watch"))
-        self.assertTrue(USTVNow.can_handle_url("https://watch.ustvnow.com/watch"))
-        self.assertTrue(USTVNow.can_handle_url("https://watch.ustvnow.com/watch/syfy"))
-        self.assertTrue(USTVNow.can_handle_url("https://watch.ustvnow.com/guide/foxnews"))
+        self.assertTrue(USTVNow.can_handle_url("http://www.ustvnow.com/live/foo/-65"))
 
     def test_can_not_handle_url(self):
         self.assertFalse(USTVNow.can_handle_url("http://www.tvplayer.com"))
+
+    def test_encrypt_data(self):
+
+        key = "80035ad42d7d-bb08-7a14-f726-78403b29"
+        iv = "3157b5680927cc4a"
+
+        self.assertEqual(
+            b"uawIc5n+TnmsmR+aP2iEDKG/eMKji6EKzjI4mE+zMhlyCbHm7K4hz7IDJDWwM3aE+Ro4ydSsgJf4ZInnoW6gqvXvG0qB/J2WJeypTSt4W124zkJpvfoJJmGAvBg2t0HT",
+            USTVNow.encrypt_data(b'{"login_id":"test@test.com","login_key":"testtest1234","login_mode":"1","manufacturer":"123"}', key, iv)
+        )
+
+    def test_decrypt_data(self):
+
+        key = "80035ad42d7d-bb08-7a14-f726-78403b29"
+        iv = "3157b5680927cc4a"
+
+        self.assertEqual(
+            b'{"status":false,"error":{"code":-2,"type":"","message":"Invalid credentials.","details":{}}}',
+            USTVNow.decrypt_data(b"KcRLETVAmHlosM0OyUd5hdTQ6WhBRTe/YRAHiLJWrzf94OLkSueXTtQ9QZ1fjOLCbpX2qteEPUWVnzvvSgVDkQmRUttN/royoxW2aL0gYQSoH1NWoDV8sIgvS5vDiQ85", key, iv)
+        )
