diff --git a/NEWS.rst b/NEWS.rst
index 61d9a3fb..d167fe40 100644
--- a/NEWS.rst
+++ b/NEWS.rst
@@ -50,6 +50,8 @@ Bug Fixes
 * Fixed incomplete recognition of macro calls with a unary dotted
   head like `((. defn) f [])`.
 * `~@ #*` now produces a syntax error instead of a nonsensical result.
+* Fixed parsing of infinite and NaN imaginary literals with an
+  uppercase "J".
 * Fixed `hy.eval` failing on `defreader` or `require` forms that
   install a new reader.
 * `require` now warns when you shadow a core macro, like `defmacro`
diff --git a/docs/syntax.rst b/docs/syntax.rst
index 1a55eb7a..54188fda 100644
--- a/docs/syntax.rst
+++ b/docs/syntax.rst
@@ -152,7 +152,8 @@ few extensions:
   interpreted in octal like they do in C. For octal, use the prefix ``0o``, as
   in Python.
 - ``NaN``, ``Inf``, and ``-Inf`` are understood as literals. Each produces a
-  :class:`Float <hy.models.Float>`.
+  :class:`Float <hy.models.Float>`. These are case-sensitive, unlike other uses
+  of letters in numeric literals (``1E2``, ``0XFF``, ``5J``, etc.).
 - Hy allows complex literals as understood by the constructor for
   :class:`complex`, such as ``5+4j``. (This is also legal Python, but Hy reads
   it as a single :class:`Complex <hy.models.Complex>`, and doesn't otherwise
diff --git a/hy/models.py b/hy/models.py
index 3ce3a74e..23ccb6c5 100644
--- a/hy/models.py
+++ b/hy/models.py
@@ -361,7 +361,7 @@ class Complex(Object, complex):
         if isinstance(real, str):
             value = super().__new__(cls, strip_digit_separators(real))
             p1, _, p2 = real.lstrip("+-").replace("-", "+").partition("+")
-            check_inf_nan_cap(p1, value.imag if "j" in p1 else value.real)
+            check_inf_nan_cap(p1, value.imag if "j" in p1.lower() else value.real)
             if p2:
                 check_inf_nan_cap(p2, value.imag)
             return value
