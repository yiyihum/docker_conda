diff --git a/aiohttp_sse/__init__.py b/aiohttp_sse/__init__.py
index 8367e1f..43e6d50 100644
--- a/aiohttp_sse/__init__.py
+++ b/aiohttp_sse/__init__.py
@@ -51,7 +51,7 @@ class EventSourceResponse(StreamResponse):
         self.headers["Connection"] = "keep-alive"
         self.headers["X-Accel-Buffering"] = "no"
 
-        self._ping_interval: int = self.DEFAULT_PING_INTERVAL
+        self._ping_interval: float = self.DEFAULT_PING_INTERVAL
         self._ping_task: Optional[asyncio.Task[None]] = None
         self._sep = sep if sep is not None else self.DEFAULT_SEPARATOR
 
@@ -129,7 +129,11 @@ class EventSourceResponse(StreamResponse):
             buffer.write(self._sep)
 
         buffer.write(self._sep)
-        await self.write(buffer.getvalue().encode("utf-8"))
+        try:
+            await self.write(buffer.getvalue().encode("utf-8"))
+        except ConnectionResetError:
+            self.stop_streaming()
+            raise
 
     async def wait(self) -> None:
         """EventSourceResponse object is used for streaming data to the client,
@@ -164,19 +168,19 @@ class EventSourceResponse(StreamResponse):
         return self._req.headers.get(self.DEFAULT_LAST_EVENT_HEADER)
 
     @property
-    def ping_interval(self) -> int:
+    def ping_interval(self) -> float:
         """Time interval between two ping massages"""
         return self._ping_interval
 
     @ping_interval.setter
-    def ping_interval(self, value: int) -> None:
+    def ping_interval(self, value: float) -> None:
         """Setter for ping_interval property.
 
-        :param int value: interval in sec between two ping values.
+        :param value: interval in sec between two ping values.
         """
 
-        if not isinstance(value, int):
-            raise TypeError("ping interval must be int")
+        if not isinstance(value, (int, float)):
+            raise TypeError("ping interval must be int or float")
         if value < 0:
             raise ValueError("ping interval must be greater then 0")
 
@@ -221,8 +225,7 @@ def sse_response(
     reason: Optional[str] = None,
     headers: Optional[Mapping[str, str]] = None,
     sep: Optional[str] = None,
-) -> _ContextManager[EventSourceResponse]:
-    ...
+) -> _ContextManager[EventSourceResponse]: ...
 
 
 @overload
@@ -234,8 +237,7 @@ def sse_response(
     headers: Optional[Mapping[str, str]] = None,
     sep: Optional[str] = None,
     response_cls: Type[ESR],
-) -> _ContextManager[ESR]:
-    ...
+) -> _ContextManager[ESR]: ...
 
 
 def sse_response(

