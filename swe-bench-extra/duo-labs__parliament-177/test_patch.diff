diff --git a/tests/unit/test_principals.py b/tests/unit/test_principals.py
index b4a2394..9a6fda1 100644
--- a/tests/unit/test_principals.py
+++ b/tests/unit/test_principals.py
@@ -104,6 +104,24 @@ class TestPrincipals(unittest.TestCase):
             policy.finding_ids, set(), "Federated access",
         )
 
+        policy = analyze_policy_string(
+            """{
+  "Version":"2012-10-17",
+  "Statement":[
+    {
+      "Effect":"Allow",
+      "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity 00000000000000" },
+      "Action":["s3:GetObject"],
+      "Resource":["arn:aws:s3:::examplebucket/*"]
+    }
+  ]
+}""",
+            ignore_private_auditors=True,
+        )
+        assert_equal(
+            policy.finding_ids, set(), "S3 bucket policy with CloudFront OAI access",
+        )
+
     def test_bad_principals(self):
         # Good principal
         policy = analyze_policy_string(
diff --git a/tests/unit/test_resource_formatting.py b/tests/unit/test_resource_formatting.py
index 2388faa..28a409c 100644
--- a/tests/unit/test_resource_formatting.py
+++ b/tests/unit/test_resource_formatting.py
@@ -2,7 +2,7 @@ import unittest
 from nose.tools import raises, assert_equal, assert_true, assert_false
 
 # import parliament
-from parliament import analyze_policy_string, is_arn_match, is_glob_match
+from parliament import analyze_policy_string, is_arn_match, is_arn_strictly_valid, is_glob_match
 from parliament.statement import is_valid_region, is_valid_account_id
 
 
@@ -91,6 +91,51 @@ class TestResourceFormatting(unittest.TestCase):
             )
         )
 
+    def test_is_arn_strictly_valid(self):
+        assert_true(
+            is_arn_strictly_valid(
+                "user", "arn:*:iam::*:user/*", "arn:aws:iam::123456789012:user/Development/product_1234/*"
+            )
+        )
+
+        assert_true(
+            is_arn_strictly_valid(
+                "user", "arn:*:iam::*:user/*", "arn:aws:iam::123456789012:*"
+            )
+        )
+
+        assert_true(
+            is_arn_strictly_valid(
+                "ssm", "arn:*:ssm::*:resource-data-sync/*", "arn:aws:ssm::123456789012:resource-data-sync/*"
+            )
+        )
+
+        assert_false(
+            is_arn_strictly_valid(
+                "ssm", "arn:*:ssm::*:resource-data-sync/*", "arn:aws:ssm::123456789012:resource-data-*/*"
+            )
+        )
+
+        assert_false(
+            is_arn_strictly_valid(
+                "user", "arn:*:iam::*:user/*", "arn:aws:iam::123456789012:*/*"
+            )
+        )
+
+        assert_false(
+            is_arn_strictly_valid(
+                "user", "arn:*:iam::*:user/*", "arn:aws:iam::123456789012:u*"
+            )
+        )
+
+        assert_false(
+            is_arn_strictly_valid(
+                "dbuser", "arn:*:redshift:*:*:dbuser:*/*", "arn:aws:redshift:us-west-2:123456789012:db*:the_cluster/the_user"
+            )
+        )
+
+        
+
     def test_arn_match_cloudtrail_emptysegments(self):
         assert_false(
             is_arn_match(
