diff --git a/requirements/testing.txt b/requirements/testing.txt
index 3c8a67ce..71727a7d 100644
--- a/requirements/testing.txt
+++ b/requirements/testing.txt
@@ -1,6 +1,6 @@
 -r production.txt
 pre-commit==2.7.1
-isort==5.5.4
+isort==5.5.5
 coveralls==2.1.2
 flake8==3.8.4
 flake8-isort==4.0.0
diff --git a/test/devices_tests/switch_test.py b/test/devices_tests/switch_test.py
index 42f651b2..a9520431 100644
--- a/test/devices_tests/switch_test.py
+++ b/test/devices_tests/switch_test.py
@@ -76,6 +76,47 @@ class TestSwitch(unittest.TestCase):
 
         self.assertEqual(switch.state, False)
 
+    def test_process_reset_after(self):
+        """Test process reset_after."""
+        xknx = XKNX()
+        reset_after_sec = 0.001
+        switch = Switch(
+            xknx, "TestInput", group_address="1/2/3", reset_after=reset_after_sec
+        )
+        telegram_on = Telegram(
+            group_address=GroupAddress("1/2/3"), payload=DPTBinary(1)
+        )
+
+        self.loop.run_until_complete(switch.process(telegram_on))
+        self.assertTrue(switch.state)
+        self.assertEqual(xknx.telegrams.qsize(), 0)
+        self.loop.run_until_complete(asyncio.sleep(reset_after_sec * 2))
+        self.assertEqual(xknx.telegrams.qsize(), 1)
+        self.loop.run_until_complete(switch.process(xknx.telegrams.get_nowait()))
+        self.assertFalse(switch.state)
+
+    def test_process_reset_after_cancel_existing(self):
+        """Test process reset_after cancels existing reset tasks."""
+        xknx = XKNX()
+        reset_after_sec = 0.01
+        switch = Switch(
+            xknx, "TestInput", group_address="1/2/3", reset_after=reset_after_sec
+        )
+        telegram_on = Telegram(
+            group_address=GroupAddress("1/2/3"), payload=DPTBinary(1)
+        )
+
+        self.loop.run_until_complete(switch.process(telegram_on))
+        self.assertTrue(switch.state)
+        self.assertEqual(xknx.telegrams.qsize(), 0)
+        self.loop.run_until_complete(asyncio.sleep(reset_after_sec / 2))
+        # half way through the reset timer
+        self.loop.run_until_complete(switch.process(telegram_on))
+        self.assertTrue(switch.state)
+
+        self.loop.run_until_complete(asyncio.sleep(reset_after_sec / 2))
+        self.assertEqual(xknx.telegrams.qsize(), 0)
+
     def test_process_callback(self):
         """Test process / reading telegrams from telegram queue. Test if callback was called."""
         # pylint: disable=no-self-use
