diff --git a/opencensus/trace/propagation/google_cloud_format.py b/opencensus/trace/propagation/google_cloud_format.py
index 8c635dd..1e7b335 100644
--- a/opencensus/trace/propagation/google_cloud_format.py
+++ b/opencensus/trace/propagation/google_cloud_format.py
@@ -18,6 +18,7 @@ import re
 from opencensus.trace.span_context import SpanContext
 from opencensus.trace.trace_options import TraceOptions
 
+_TRACE_CONTEXT_HEADER_NAME = 'X_CLOUD_TRACE_CONTEXT'
 _TRACE_CONTEXT_HEADER_FORMAT = '([0-9a-f]{32})(\/([0-9a-f]{16}))?(;o=(\d+))?'
 _TRACE_CONTEXT_HEADER_RE = re.compile(_TRACE_CONTEXT_HEADER_FORMAT)
 _TRACE_ID_DELIMETER = '/'
@@ -73,6 +74,21 @@ class GoogleCloudFormatPropagator(object):
                 .format(header))
             return SpanContext()
 
+    def from_headers(self, headers):
+        """Generate a SpanContext object using the trace context header.
+
+        :type headers: dict
+        :param headers: HTTP request headers.
+
+        :rtype: :class:`~opencensus.trace.span_context.SpanContext`
+        :returns: SpanContext generated from the trace context header.
+        """
+        if headers is None:
+            return SpanContext()
+        if _TRACE_CONTEXT_HEADER_NAME not in headers:
+            return SpanContext()
+        return self.from_header(headers[_TRACE_CONTEXT_HEADER_NAME])
+
     def to_header(self, span_context):
         """Convert a SpanContext object to header string.
 
@@ -92,3 +108,17 @@ class GoogleCloudFormatPropagator(object):
             span_id,
             int(trace_options))
         return header
+
+    def to_headers(self, span_context):
+        """Convert a SpanContext object to HTTP request headers.
+
+        :type span_context:
+            :class:`~opencensus.trace.span_context.SpanContext`
+        :param span_context: SpanContext object.
+
+        :rtype: dict
+        :returns: Trace context headers in google cloud format.
+        """
+        return {
+            _TRACE_CONTEXT_HEADER_NAME: self.to_header(span_context),
+        }
diff --git a/opencensus/trace/propagation/trace_context_http_header_format.py b/opencensus/trace/propagation/trace_context_http_header_format.py
index 3ac3301..63a024c 100644
--- a/opencensus/trace/propagation/trace_context_http_header_format.py
+++ b/opencensus/trace/propagation/trace_context_http_header_format.py
@@ -18,6 +18,7 @@ import re
 from opencensus.trace.span_context import SpanContext
 from opencensus.trace.trace_options import TraceOptions
 
+_TRACE_PARENT_HEADER_NAME = 'traceparent'
 _TRACE_CONTEXT_HEADER_FORMAT = \
     '([0-9a-f]{2})(-([0-9a-f]{32}))(-([0-9a-f]{16}))?(-([0-9a-f]{2}))?'
 _TRACE_CONTEXT_HEADER_RE = re.compile(_TRACE_CONTEXT_HEADER_FORMAT)
@@ -76,6 +77,21 @@ class TraceContextPropagator(object):
 
         return SpanContext()
 
+    def from_headers(self, headers):
+        """Generate a SpanContext object using the W3C Distributed Tracing headers.
+
+        :type headers: dict
+        :param headers: HTTP request headers.
+
+        :rtype: :class:`~opencensus.trace.span_context.SpanContext`
+        :returns: SpanContext generated from the trace context header.
+        """
+        if headers is None:
+            return SpanContext()
+        if _TRACE_PARENT_HEADER_NAME not in headers:
+            return SpanContext()
+        return self.from_header(headers[_TRACE_PARENT_HEADER_NAME])
+
     def to_header(self, span_context):
         """Convert a SpanContext object to header string, using version 0.
 
@@ -98,3 +114,18 @@ class TraceContextPropagator(object):
             span_id,
             trace_options)
         return header
+
+    def to_headers(self, span_context):
+        """Convert a SpanContext object to W3C Distributed Tracing headers,
+        using version 0.
+
+        :type span_context:
+            :class:`~opencensus.trace.span_context.SpanContext`
+        :param span_context: SpanContext object.
+
+        :rtype: dict
+        :returns: W3C Distributed Tracing headers.
+        """
+        return {
+            _TRACE_PARENT_HEADER_NAME: self.to_header(span_context),
+        }

