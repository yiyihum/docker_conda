diff --git a/geopandas/tests/test_geodataframe.py b/geopandas/tests/test_geodataframe.py
index b4f6755..32172f1 100644
--- a/geopandas/tests/test_geodataframe.py
+++ b/geopandas/tests/test_geodataframe.py
@@ -342,7 +342,6 @@ class TestDataFrame:
     def test_get_geometry_invalid(self):
         df = GeoDataFrame()
         df["geom"] = self.df.geometry
-        msg_geo_col_none = "active geometry column to use has not been set. "
         msg_geo_col_missing = "is not present. "
 
         with pytest.raises(AttributeError, match=msg_geo_col_missing):
@@ -350,7 +349,7 @@ class TestDataFrame:
         df2 = self.df.copy()
         df2["geom2"] = df2.geometry
         df2 = df2[["BoroCode", "BoroName", "geom2"]]
-        with pytest.raises(AttributeError, match=msg_geo_col_none):
+        with pytest.raises(AttributeError, match=msg_geo_col_missing):
             df2.geometry
 
         msg_other_geo_cols_present = "There are columns with geometry data type"
@@ -1299,6 +1298,70 @@ class TestConstructor:
         result = gdf[["geometry"]]
         assert_frame_equal(result, gdf if dtype == "geometry" else pd.DataFrame(gdf))
 
+    def test_multiindex_geometry_colname_2_level(self):
+        # GH1763 https://github.com/geopandas/geopandas/issues/1763
+        crs = "EPSG:4326"
+        df = pd.DataFrame(
+            [[1, 0], [0, 1]], columns=[["location", "location"], ["x", "y"]]
+        )
+        x_col = df["location", "x"]
+        y_col = df["location", "y"]
+
+        gdf = GeoDataFrame(df, crs=crs, geometry=points_from_xy(x_col, y_col))
+        assert gdf.crs == crs
+        assert gdf.geometry.crs == crs
+        assert gdf.geometry.dtype == "geometry"
+        assert gdf._geometry_column_name == "geometry"
+        assert gdf.geometry.name == "geometry"
+
+    def test_multiindex_geometry_colname_3_level(self):
+        # GH1763 https://github.com/geopandas/geopandas/issues/1763
+        # Note 3-level case uses different code paths in pandas, it is not redundant
+        crs = "EPSG:4326"
+        df = pd.DataFrame(
+            [[1, 0], [0, 1]],
+            columns=[
+                ["foo", "foo"],
+                ["location", "location"],
+                ["x", "y"],
+            ],
+        )
+
+        x_col = df["foo", "location", "x"]
+        y_col = df["foo", "location", "y"]
+
+        gdf = GeoDataFrame(df, crs=crs, geometry=points_from_xy(x_col, y_col))
+        assert gdf.crs == crs
+        assert gdf.geometry.crs == crs
+        assert gdf.geometry.dtype == "geometry"
+        assert gdf._geometry_column_name == "geometry"
+        assert gdf.geometry.name == "geometry"
+
+    def test_multiindex_geometry_colname_3_level_new_col(self):
+        crs = "EPSG:4326"
+        df = pd.DataFrame(
+            [[1, 0], [0, 1]],
+            columns=[
+                ["foo", "foo"],
+                ["location", "location"],
+                ["x", "y"],
+            ],
+        )
+
+        x_col = df["foo", "location", "x"]
+        y_col = df["foo", "location", "y"]
+        df["geometry"] = GeoSeries.from_xy(x_col, y_col)
+        df2 = df.copy()
+        gdf = df.set_geometry("geometry", crs=crs)
+        assert gdf.crs == crs
+        assert gdf._geometry_column_name == "geometry"
+        assert gdf.geometry.name == "geometry"
+        # test again setting with tuple col name
+        gdf = df2.set_geometry(("geometry", "", ""), crs=crs)
+        assert gdf.crs == crs
+        assert gdf._geometry_column_name == ("geometry", "", "")
+        assert gdf.geometry.name == ("geometry", "", "")
+
 
 def test_geodataframe_crs():
     gdf = GeoDataFrame(columns=["geometry"])
diff --git a/geopandas/tests/test_op_output_types.py b/geopandas/tests/test_op_output_types.py
index ea2ed50..365d362 100644
--- a/geopandas/tests/test_op_output_types.py
+++ b/geopandas/tests/test_op_output_types.py
@@ -120,8 +120,8 @@ def test_getitem(df):
     assert_object(df[["value1", "value2"]], pd.DataFrame)
     assert_object(df[[geo_name, "geometry2"]], GeoDataFrame, geo_name)
     assert_object(df[[geo_name]], GeoDataFrame, geo_name)
-    assert_obj_no_active_geo_col(df[["geometry2", "value1"]], GeoDataFrame)
-    assert_obj_no_active_geo_col(df[["geometry2"]], GeoDataFrame)
+    assert_obj_no_active_geo_col(df[["geometry2", "value1"]], GeoDataFrame, geo_name)
+    assert_obj_no_active_geo_col(df[["geometry2"]], GeoDataFrame, geo_name)
     assert_object(df[["value1"]], pd.DataFrame)
     # Series
     assert_object(df[geo_name], GeoSeries, geo_name)
@@ -134,13 +134,10 @@ def test_loc(df):
     assert_object(df.loc[:, ["value1", "value2"]], pd.DataFrame)
     assert_object(df.loc[:, [geo_name, "geometry2"]], GeoDataFrame, geo_name)
     assert_object(df.loc[:, [geo_name]], GeoDataFrame, geo_name)
-    # These two are inconsistent with getitem, active geom col dropped,
-    # but other geometry columns present
     assert_obj_no_active_geo_col(
         df.loc[:, ["geometry2", "value1"]], GeoDataFrame, geo_name
     )
     assert_obj_no_active_geo_col(df.loc[:, ["geometry2"]], GeoDataFrame, geo_name)
-    # #####
     assert_object(df.loc[:, ["value1"]], pd.DataFrame)
     # Series
     assert_object(df.loc[:, geo_name], GeoSeries, geo_name)
@@ -153,11 +150,8 @@ def test_iloc(df):
     assert_object(df.iloc[:, 0:2], pd.DataFrame)
     assert_object(df.iloc[:, 2:4], GeoDataFrame, geo_name)
     assert_object(df.iloc[:, [2]], GeoDataFrame, geo_name)
-    # These two are inconsistent with getitem, active geom col dropped,
-    # but other geometry columns present
     assert_obj_no_active_geo_col(df.iloc[:, [3, 0]], GeoDataFrame, geo_name)
     assert_obj_no_active_geo_col(df.iloc[:, [3]], GeoDataFrame, geo_name)
-    # #####
     assert_object(df.iloc[:, [0]], pd.DataFrame)
     # Series
     assert_object(df.iloc[:, 2], GeoSeries, geo_name)
@@ -189,15 +183,12 @@ def test_reindex(df):
     assert_object(df.reindex(columns=[geo_name, "geometry2"]), GeoDataFrame, geo_name)
     assert_object(df.reindex(columns=[geo_name]), GeoDataFrame, geo_name)
     assert_object(df.reindex(columns=["new_col", geo_name]), GeoDataFrame, geo_name)
-    # These two are inconsistent with getitem, active geom col dropped,
-    # but other geometry columns present
     assert_obj_no_active_geo_col(
         df.reindex(columns=["geometry2", "value1"]), GeoDataFrame, geo_name
     )
     assert_obj_no_active_geo_col(
         df.reindex(columns=["geometry2"]), GeoDataFrame, geo_name
     )
-    # #####
     assert_object(df.reindex(columns=["value1"]), pd.DataFrame)
 
     # reindexing the rows always preserves the GeoDataFrame
@@ -216,15 +207,12 @@ def test_drop(df):
     assert_object(df.drop(columns=["value1", "value2"]), GeoDataFrame, geo_name)
     cols = ["value1", "value2", "geometry2"]
     assert_object(df.drop(columns=cols), GeoDataFrame, geo_name)
-    # These two are inconsistent with getitem, active geom col dropped,
-    # but other geometry columns present
     assert_obj_no_active_geo_col(
         df.drop(columns=[geo_name, "value2"]), GeoDataFrame, geo_name
     )
     assert_obj_no_active_geo_col(
         df.drop(columns=["value1", "value2", geo_name]), GeoDataFrame, geo_name
     )
-    # #####
     assert_object(df.drop(columns=["geometry2", "value2", geo_name]), pd.DataFrame)
 
 
@@ -238,10 +226,10 @@ def test_apply(df):
     assert_object(df[["value1", "value2"]].apply(identity), pd.DataFrame)
     assert_object(df[[geo_name, "geometry2"]].apply(identity), GeoDataFrame, geo_name)
     assert_object(df[[geo_name]].apply(identity), GeoDataFrame, geo_name)
-    expected_geo_col_name = None if compat.PANDAS_GE_14 else "geometry"
-    assert_obj_no_active_geo_col(
-        df[["geometry2", "value1"]].apply(identity), GeoDataFrame, expected_geo_col_name
-    )
+    expected_geo_col_name = geo_name if compat.PANDAS_GE_14 else "geometry"
+
+    res = df[["geometry2", "value1"]].apply(identity)
+    assert_obj_no_active_geo_col(res, GeoDataFrame, expected_geo_col_name)
     assert_obj_no_active_geo_col(
         df[["geometry2"]].apply(identity), GeoDataFrame, expected_geo_col_name
     )
@@ -272,12 +260,13 @@ def test_apply(df):
 
 
 def test_apply_axis1_secondary_geo_cols(df):
+    geo_name = df.geometry.name if compat.PANDAS_GE_14 else "geometry"
+
     def identity(x):
         return x
 
-    expected_geo_col_name = None if compat.PANDAS_GE_14 else "geometry"
     assert_obj_no_active_geo_col(
-        df[["geometry2"]].apply(identity, axis=1), GeoDataFrame, expected_geo_col_name
+        df[["geometry2"]].apply(identity, axis=1), GeoDataFrame, geo_name
     )
 
 
