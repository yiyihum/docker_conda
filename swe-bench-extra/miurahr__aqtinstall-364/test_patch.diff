diff --git a/tests/test_install.py b/tests/test_install.py
index 44f9032..5e2fa9b 100644
--- a/tests/test_install.py
+++ b/tests/test_install.py
@@ -86,7 +86,7 @@ def make_mock_geturl_download_archive(
 
     def mock_getUrl(url: str, *args) -> str:
         if url.endswith(updates_url):
-            qt_major_nodot = f"qt{qt_version[0]}.{qt_version.replace('.', '')}"
+            qt_major_nodot = "59" if qt_version == "5.9.0" else f"qt{qt_version[0]}.{qt_version.replace('.', '')}"
             _xml = textwrap.dedent(
                 f"""\
                 <Updates>
@@ -122,7 +122,8 @@ def make_mock_geturl_download_archive(
                     full_path.parent.mkdir(parents=True)
                 full_path.write_text(file[UNPATCHED_CONTENT], "utf_8")
 
-            archive.writeall(path=temp_path, arcname=qt_version)
+            archive_name = "5.9" if qt_version == "5.9.0" else qt_version
+            archive.writeall(path=temp_path, arcname=archive_name)
 
     return mock_getUrl, mock_download_archive
 
@@ -178,6 +179,66 @@ def disable_sockets_and_multiprocessing(monkeypatch):
                 r"Time elapsed: .* second"
             ),
         ),
+        (
+            "install 5.9.0 windows desktop win32_mingw53".split(),
+            "windows",
+            "desktop",
+            "5.9.0",
+            "win32_mingw53",
+            "mingw53_32",
+            "windows_x86/desktop/qt5_59/Updates.xml",
+            (
+                {
+                    FILENAME: "mkspecs/qconfig.pri",
+                    UNPATCHED_CONTENT: "... blah blah blah ...\n"
+                    "QT_EDITION = Not OpenSource\n"
+                    "QT_LICHECK = Not Empty\n"
+                    "... blah blah blah ...\n",
+                    PATCHED_CONTENT: "... blah blah blah ...\n"
+                    "QT_EDITION = OpenSource\n"
+                    "QT_LICHECK =\n"
+                    "... blah blah blah ...\n",
+                },
+            ),
+            re.compile(
+                r"^aqtinstall\(aqt\) v.* on Python 3.*\n"
+                r"Warning: The command 'install' is deprecated and marked for removal in a future version of aqt.\n"
+                r"In the future, please use the command 'install-qt' instead.\n"
+                r"Downloading qtbase...\n"
+                r"Finished installation of qtbase-windows-win32_mingw53.7z in .*\n"
+                r"Finished installation\n"
+                r"Time elapsed: .* second"
+            ),
+        ),
+        (
+            "install-qt windows desktop 5.9.0 win32_mingw53".split(),
+            "windows",
+            "desktop",
+            "5.9.0",
+            "win32_mingw53",
+            "mingw53_32",
+            "windows_x86/desktop/qt5_59/Updates.xml",
+            (
+                {
+                    FILENAME: "mkspecs/qconfig.pri",
+                    UNPATCHED_CONTENT: "... blah blah blah ...\n"
+                    "QT_EDITION = Not OpenSource\n"
+                    "QT_LICHECK = Not Empty\n"
+                    "... blah blah blah ...\n",
+                    PATCHED_CONTENT: "... blah blah blah ...\n"
+                    "QT_EDITION = OpenSource\n"
+                    "QT_LICHECK =\n"
+                    "... blah blah blah ...\n",
+                },
+            ),
+            re.compile(
+                r"^aqtinstall\(aqt\) v.* on Python 3.*\n"
+                r"Downloading qtbase...\n"
+                r"Finished installation of qtbase-windows-win32_mingw53.7z in .*\n"
+                r"Finished installation\n"
+                r"Time elapsed: .* second"
+            ),
+        ),
         (
             "install-qt windows desktop 5.14.0 win32_mingw73".split(),
             "windows",
@@ -289,6 +350,8 @@ def test_install(
         assert expect_out.match(err)
 
         installed_path = Path(output_dir) / version / arch_dir
+        if version == "5.9.0":
+            installed_path = Path(output_dir) / "5.9" / arch_dir
         assert installed_path.is_dir()
         for patched_file in files:
             file_path = installed_path / patched_file[FILENAME]
