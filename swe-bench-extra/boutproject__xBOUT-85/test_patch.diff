diff --git a/xbout/tests/test_animate.py b/xbout/tests/test_animate.py
index 689e7b2..d2a935f 100644
--- a/xbout/tests/test_animate.py
+++ b/xbout/tests/test_animate.py
@@ -286,3 +286,18 @@ class TestAnimate:
         assert isinstance(animation.blocks[0], Pcolormesh)
         assert isinstance(animation.blocks[1], Pcolormesh)
         assert isinstance(animation.blocks[2], Line)
+
+    def test_animate_list_titles_list(self, create_test_file):
+
+        save_dir, ds = create_test_file
+
+        animation = ds.isel(z=3).bout.animate_list(['n', ds['T'].isel(x=2),
+                                                    ds['n'].isel(y=1, z=2)],
+                                                   titles=['a', None, 'b'])
+
+        assert isinstance(animation.blocks[0], Pcolormesh)
+        assert animation.blocks[0].ax.title.get_text() == 'a'
+        assert isinstance(animation.blocks[1], Pcolormesh)
+        assert animation.blocks[1].ax.title.get_text() == 'T'
+        assert isinstance(animation.blocks[2], Line)
+        assert animation.blocks[2].ax.title.get_text() == 'b'
diff --git a/xbout/tests/test_load.py b/xbout/tests/test_load.py
index c9bd19e..99a62ab 100644
--- a/xbout/tests/test_load.py
+++ b/xbout/tests/test_load.py
@@ -70,6 +70,25 @@ class TestPathHandling:
 
         assert actual_filepaths == expected_filepaths
 
+    @pytest.mark.parametrize("ii, jj", [(1, 1), (1, 4), (3, 1), (5, 3), (1, 12),
+                                        (3, 111)])
+    def test_glob_expansion_brackets(self, tmpdir, ii, jj):
+        files_dir = tmpdir.mkdir("data")
+        filepaths = []
+        for i in range(ii):
+            example_run_dir = files_dir.mkdir('run' + str(i))
+            for j in range(jj):
+                example_file = example_run_dir.join('example.' + str(j) + '.nc')
+                example_file.write("content")
+                filepaths.append(Path(str(example_file)))
+        expected_filepaths = natsorted(filepaths,
+                                       key=lambda filepath: str(filepath))
+
+        path = Path(str(files_dir.join('run[1-9]/example.*.nc')))
+        actual_filepaths = _expand_wildcards(path)
+
+        assert actual_filepaths == expected_filepaths[jj:]
+
     def test_no_files(self, tmpdir):
         files_dir = tmpdir.mkdir("data")
 
@@ -482,6 +501,15 @@ class TestOpen:
         save_dir = tmpdir_factory.mktemp('data')
         actual.bout.save(str(save_dir.join('boutdata.nc')))
 
+    def test_drop_vars(self, tmpdir_factory, bout_xyt_example_files):
+        path = bout_xyt_example_files(tmpdir_factory, nxpe=4, nype=1, nt=1,
+                                      syn_data_type='stepped')
+        ds = open_boutdataset(datapath=path, keep_xboundaries=False,
+                              drop_variables=['T'])
+
+        assert 'T' not in ds.keys()
+        assert 'n' in ds.keys()
+
     @pytest.mark.skip
     def test_combine_along_tx(self):
         ...
@@ -596,7 +624,7 @@ class TestTrim:
         # Manually add filename - encoding normally added by xr.open_dataset
         ds.encoding['source'] = 'folder0/BOUT.dmp.0.nc'
         actual = _trim(ds, guards={}, keep_boundaries={}, nxpe=1,
-                       nype=1)
+                       nype=1, drop_variables=None)
         xrt.assert_equal(actual, ds)
 
     def test_trim_guards(self):
@@ -604,7 +632,7 @@ class TestTrim:
         # Manually add filename - encoding normally added by xr.open_dataset
         ds.encoding['source'] = 'folder0/BOUT.dmp.0.nc'
         actual = _trim(ds, guards={'time': 2}, keep_boundaries={},
-                       nxpe=1, nype=1)
+                       nxpe=1, nype=1, drop_variables=None)
         selection = {'time': slice(2, -2)}
         expected = ds.isel(**selection)
         xrt.assert_equal(expected, actual)
@@ -727,7 +755,8 @@ class TestTrim:
         ds['jyseps2_1'] = 8
         ds['jyseps1_2'] = 8
 
-        actual = _trim(ds, guards={'x': 2}, keep_boundaries={'x': True}, nxpe=1, nype=1)
+        actual = _trim(ds, guards={'x': 2}, keep_boundaries={'x': True}, nxpe=1, nype=1,
+                       drop_variables=None)
         expected = ds  # Should be unchanged
         xrt.assert_equal(expected, actual)
 
@@ -741,7 +770,8 @@ class TestTrim:
         ds['jyseps2_1'] = 8
         ds['jyseps1_2'] = 8
 
-        actual = _trim(ds, guards={'y': 2}, keep_boundaries={'y': True}, nxpe=1, nype=1)
+        actual = _trim(ds, guards={'y': 2}, keep_boundaries={'y': True}, nxpe=1, nype=1,
+                       drop_variables=None)
         expected = ds  # Should be unchanged
         xrt.assert_equal(expected, actual)
 
@@ -762,7 +792,8 @@ class TestTrim:
         ds['ny_inner'] = 8
         ds['MYSUB'] = 4
 
-        actual = _trim(ds, guards={'y': 2}, keep_boundaries={'y': True}, nxpe=1, nype=4)
+        actual = _trim(ds, guards={'y': 2}, keep_boundaries={'y': True}, nxpe=1, nype=4,
+                       drop_variables=None)
         expected = ds  # Should be unchanged
         if not lower:
             expected = expected.isel(y=slice(2, None, None))
@@ -780,7 +811,8 @@ class TestTrim:
 
         for v in _BOUT_PER_PROC_VARIABLES:
             ds[v] = 42.
-        ds = _trim(ds, guards={}, keep_boundaries={}, nxpe=1, nype=1)
+        ds = _trim(ds, guards={}, keep_boundaries={}, nxpe=1, nype=1,
+                   drop_variables=None)
 
         expected = create_test_data(0)
         xrt.assert_equal(ds, expected)
