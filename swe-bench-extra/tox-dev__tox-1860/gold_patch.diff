diff --git a/docs/changelog/1772.bugfix.rst b/docs/changelog/1772.bugfix.rst
new file mode 100644
index 00000000..c96ba979
--- /dev/null
+++ b/docs/changelog/1772.bugfix.rst
@@ -0,0 +1,2 @@
+Fix a killed tox (via SIGTERM) leaving the commands subprocesses running
+by handling it as if it were a KeyboardInterrupt - by :user:`dajose`
diff --git a/docs/config.rst b/docs/config.rst
index f3bb1b12..01bc9b7d 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -607,9 +607,9 @@ Complete list of settings that you can put into ``testenv*`` sections:
 
     .. versionadded:: 3.15.2
 
-    When an interrupt is sent via Ctrl+C, the SIGINT is sent to all foreground
-    processes. The :conf:``suicide_timeout`` gives the running process time to
-    cleanup and exit before receiving (in some cases, a duplicate) SIGINT from
+    When an interrupt is sent via Ctrl+C or the tox process is killed with a SIGTERM,
+    a SIGINT is sent to all foreground processes. The :conf:``suicide_timeout`` gives
+    the running process time to cleanup and exit before receiving (in some cases, a duplicate) SIGINT from
     tox.
 
 .. conf:: interrupt_timeout ^ float ^ 0.3
diff --git a/src/tox/action.py b/src/tox/action.py
index b5381b83..e7f9b77b 100644
--- a/src/tox/action.py
+++ b/src/tox/action.py
@@ -49,6 +49,10 @@ class Action(object):
         self.suicide_timeout = suicide_timeout
         self.interrupt_timeout = interrupt_timeout
         self.terminate_timeout = terminate_timeout
+        if is_main_thread():
+            # python allows only main thread to install signal handlers
+            # see https://docs.python.org/3/library/signal.html#signals-and-threads
+            self._install_sigterm_handler()
 
     def __enter__(self):
         msg = "{} {}".format(self.msg, " ".join(map(str, self.args)))
@@ -278,3 +282,12 @@ class Action(object):
             new_args.append(str(arg))
 
         return new_args
+
+    def _install_sigterm_handler(self):
+        """Handle sigterm as if it were a keyboardinterrupt"""
+
+        def sigterm_handler(signum, frame):
+            reporter.error("Got SIGTERM, handling it as a KeyboardInterrupt")
+            raise KeyboardInterrupt()
+
+        signal.signal(signal.SIGTERM, sigterm_handler)
