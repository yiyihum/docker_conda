diff --git a/tests/test_inspect.py b/tests/test_inspect.py
index 3158738..92b396e 100644
--- a/tests/test_inspect.py
+++ b/tests/test_inspect.py
@@ -140,7 +140,7 @@ class TestInspectApp:
         assert routes[-2].directory == os.path.abspath('tests')
         assert routes[-2].fallback_filename.endswith('conftest.py')
 
-    def test_sync(self, asgi):
+    def test_sink(self, asgi):
         sinks = inspect.inspect_sinks(make_app_async() if asgi else make_app())
 
         assert all(isinstance(s, inspect.SinkInfo) for s in sinks)
diff --git a/tests/test_sink_and_static.py b/tests/test_sink_and_static.py
new file mode 100644
index 0000000..2065085
--- /dev/null
+++ b/tests/test_sink_and_static.py
@@ -0,0 +1,48 @@
+import pytest
+
+import falcon
+from falcon import testing
+
+from _util import create_app  # NOQA
+
+
+def sink(req, resp, **kw):
+    resp.body = 'sink'
+
+
+async def sink_async(req, resp, **kw):
+    resp.body = 'sink'
+
+
+@pytest.fixture
+def client(asgi, tmp_path):
+    file = tmp_path / 'file.txt'
+    file.write_text('foo bar')
+
+    def make(sink_before_static_route):
+        app = create_app(asgi=asgi, sink_before_static_route=sink_before_static_route)
+        app.add_sink(sink_async if asgi else sink, '/sink')
+        app.add_static_route('/sink/static', str(tmp_path))
+
+        return testing.TestClient(app)
+    return make
+
+
+def test_sink_before_static_route(client):
+    cl = client(True)
+    res = cl.simulate_get('/sink/foo')
+    assert res.text == 'sink'
+    res = cl.simulate_get('/sink/static/file.txt')
+    assert res.text == 'sink'
+    res = cl.simulate_get('/sink/static/')
+    assert res.text == 'sink'
+
+
+def test_sink_after_static_route(client):
+    cl = client(False)
+    res = cl.simulate_get('/sink/foo')
+    assert res.text == 'sink'
+    res = cl.simulate_get('/sink/static/file.txt')
+    assert res.text == 'foo bar'
+    res = cl.simulate_get('/sink/static/')
+    assert res.status == falcon.HTTP_404
