diff --git a/test/test_cmdstan_args.py b/test/test_cmdstan_args.py
index ea2c4c2..39cc5ce 100644
--- a/test/test_cmdstan_args.py
+++ b/test/test_cmdstan_args.py
@@ -34,11 +34,14 @@ class OptimizeArgsTest(unittest.TestCase):
         self.assertIn('algorithm=newton', ' '.join(cmd))
 
     def test_args_algorithm_init_alpha(self):
-        args = OptimizeArgs(init_alpha=2e-4)
+        args = OptimizeArgs(algorithm='bfgs', init_alpha=2e-4)
         args.validate()
         cmd = args.compose(None, cmd=['output'])
 
         self.assertIn('init_alpha=0.0002', ' '.join(cmd))
+        args = OptimizeArgs(init_alpha=2e-4)
+        with self.assertRaises(ValueError):
+            args.validate()
         args = OptimizeArgs(init_alpha=-1.0)
         with self.assertRaises(ValueError):
             args.validate()
diff --git a/test/test_model.py b/test/test_model.py
index 7144a6d..4c3e2cc 100644
--- a/test/test_model.py
+++ b/test/test_model.py
@@ -299,13 +299,8 @@ class CmdStanModelTest(CustomTestCase):
 
     def test_model_syntax_error(self):
         stan = os.path.join(DATAFILES_PATH, 'bad_syntax.stan')
-        with LogCapture(level=logging.WARNING) as log:
-            logging.getLogger()
-            with self.assertRaises(ValueError):
-                CmdStanModel(stan_file=stan)
-        log.check_present(
-            ('cmdstanpy', 'WARNING', StringComparison(r'(?s).*Syntax error.*'))
-        )
+        with self.assertRaisesRegex(ValueError, r'.*Syntax error.*'):
+            CmdStanModel(stan_file=stan)
 
     def test_repr(self):
         model = CmdStanModel(stan_file=BERN_STAN)
diff --git a/test/test_optimize.py b/test/test_optimize.py
index ff62b50..3792234 100644
--- a/test/test_optimize.py
+++ b/test/test_optimize.py
@@ -432,9 +432,7 @@ class OptimizeTest(unittest.TestCase):
         jdata = os.path.join(DATAFILES_PATH, 'bernoulli.data.json')
         jinit = os.path.join(DATAFILES_PATH, 'bernoulli.init.json')
 
-        with self.assertRaisesRegex(
-            ValueError, 'must not be set when algorithm is Newton'
-        ):
+        with self.assertRaisesRegex(ValueError, 'bfgs or lbfgs'):
             model.optimize(
                 data=jdata,
                 seed=1239812093,
@@ -443,9 +441,7 @@ class OptimizeTest(unittest.TestCase):
                 tol_obj=1,
             )
 
-        with self.assertRaisesRegex(
-            ValueError, 'must not be set when algorithm is Newton'
-        ):
+        with self.assertRaisesRegex(ValueError, 'bfgs or lbfgs'):
             model.optimize(
                 data=jdata,
                 seed=1239812093,
@@ -454,9 +450,7 @@ class OptimizeTest(unittest.TestCase):
                 tol_rel_obj=1,
             )
 
-        with self.assertRaisesRegex(
-            ValueError, 'must not be set when algorithm is Newton'
-        ):
+        with self.assertRaisesRegex(ValueError, 'bfgs or lbfgs'):
             model.optimize(
                 data=jdata,
                 seed=1239812093,
@@ -465,9 +459,7 @@ class OptimizeTest(unittest.TestCase):
                 tol_grad=1,
             )
 
-        with self.assertRaisesRegex(
-            ValueError, 'must not be set when algorithm is Newton'
-        ):
+        with self.assertRaisesRegex(ValueError, 'bfgs or lbfgs'):
             model.optimize(
                 data=jdata,
                 seed=1239812093,
@@ -476,9 +468,15 @@ class OptimizeTest(unittest.TestCase):
                 tol_rel_grad=1,
             )
 
-        with self.assertRaisesRegex(
-            ValueError, 'must not be set when algorithm is Newton'
-        ):
+        with self.assertRaisesRegex(ValueError, 'bfgs or lbfgs'):
+            model.optimize(
+                data=jdata,
+                seed=1239812093,
+                inits=jinit,
+                tol_rel_grad=1,
+            )
+
+        with self.assertRaisesRegex(ValueError, 'bfgs or lbfgs'):
             model.optimize(
                 data=jdata,
                 seed=1239812093,
@@ -489,7 +487,7 @@ class OptimizeTest(unittest.TestCase):
 
         with self.assertRaisesRegex(
             ValueError,
-            'history_size must not be set when algorithm is Newton or BFGS',
+            'lbfgs',
         ):
             model.optimize(
                 data=jdata,
@@ -501,7 +499,7 @@ class OptimizeTest(unittest.TestCase):
 
         with self.assertRaisesRegex(
             ValueError,
-            'history_size must not be set when algorithm is Newton or BFGS',
+            'lbfgs',
         ):
             model.optimize(
                 data=jdata,
@@ -511,6 +509,17 @@ class OptimizeTest(unittest.TestCase):
                 history_size=1,
             )
 
+        with self.assertRaisesRegex(
+            ValueError,
+            'lbfgs',
+        ):
+            model.optimize(
+                data=jdata,
+                seed=1239812093,
+                inits=jinit,
+                history_size=1,
+            )
+
     def test_optimize_good_dict(self):
         exe = os.path.join(DATAFILES_PATH, 'bernoulli' + EXTENSION)
         stan = os.path.join(DATAFILES_PATH, 'bernoulli.stan')
