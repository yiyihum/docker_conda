diff --git a/src/fparser/two/tests/fortran2003/test_allocate_stmt_r623.py b/src/fparser/two/tests/fortran2003/test_allocate_stmt_r623.py
index 1290b23..263fe4c 100644
--- a/src/fparser/two/tests/fortran2003/test_allocate_stmt_r623.py
+++ b/src/fparser/two/tests/fortran2003/test_allocate_stmt_r623.py
@@ -37,13 +37,15 @@
 
 import pytest
 from fparser.two.utils import NoMatchError
-from fparser.two.Fortran2003 import Allocate_Stmt, Alloc_Opt
+from fparser.two.Fortran2003 import Allocate_Stmt, Alloc_Opt, Alloc_Opt_List
 
 
 @pytest.mark.usefixtures("f2003_create")
 def test_allocate_stmt():
     """Tests for the allocate statement: R623."""
     tcls = Allocate_Stmt
+    assert tcls.alloc_opt_list() == Alloc_Opt_List
+
     obj = tcls("allocate(a,b)")
     assert isinstance(obj, tcls), repr(obj)
     assert str(obj) == "ALLOCATE(a, b)"
@@ -55,6 +57,31 @@ def test_allocate_stmt():
     assert str(obj) == "ALLOCATE(REAL(KIND = 8)::a, STAT = b, SOURCE = c // d)"
 
 
+@pytest.mark.usefixtures("f2003_create")
+def test_allocate_no_match():
+    """Tests that the expected NoMatchError is raised if there are problems."""
+    tcls = Allocate_Stmt
+    # Missing parenthesis.
+    with pytest.raises(NoMatchError) as err:
+        tcls("allocate(var(3)")
+    assert "allocate(var(3)" in str(err.value)
+    with pytest.raises(NoMatchError) as err:
+        tcls("allocate var(3))")
+    assert "allocate var(3))" in str(err.value)
+    # Misspelt key word.
+    with pytest.raises(NoMatchError) as err:
+        tcls("allocte(var(3))")
+    assert "allocte(var(3))" in str(err.value)
+    # No arguments.
+    with pytest.raises(NoMatchError) as err:
+        tcls("allocate()")
+    assert "allocate()" in str(err.value)
+    # Missing positional argument.
+    with pytest.raises(NoMatchError) as err:
+        tcls("allocate(stat=ierr)")
+    assert "allocate(stat=ierr)" in str(err.value)
+
+
 @pytest.mark.usefixtures("f2003_create")
 def test_alloc_opt():
     """Tests for the various forms of alloc-opt: R624."""
diff --git a/src/fparser/two/tests/fortran2008/test_alloc_opt_r627.py b/src/fparser/two/tests/fortran2008/test_alloc_opt_r627.py
index 914656c..fd8ec2a 100644
--- a/src/fparser/two/tests/fortran2008/test_alloc_opt_r627.py
+++ b/src/fparser/two/tests/fortran2008/test_alloc_opt_r627.py
@@ -45,7 +45,7 @@ test for.
 """
 
 import pytest
-from fparser.two.Fortran2008 import Allocate_Stmt, Alloc_Opt
+from fparser.two.Fortran2008 import Allocate_Stmt, Alloc_Opt, Alloc_Opt_List
 
 
 @pytest.mark.usefixtures("f2008_create")
@@ -61,5 +61,9 @@ def test_allocate_stmt():
     """Check that the Fortran2008 version of allocate has picked up the
     version of Alloc_Opt that supports MOLD."""
     obj = Allocate_Stmt("allocate(b, mold=c)")
+    assert obj.alloc_opt_list() == Alloc_Opt_List
     assert isinstance(obj, Allocate_Stmt), repr(obj)
     assert str(obj) == "ALLOCATE(b, MOLD = c)"
+    obj = Allocate_Stmt("allocate(b, mold=c, stat=ierr)")
+    assert isinstance(obj, Allocate_Stmt), repr(obj)
+    assert str(obj) == "ALLOCATE(b, MOLD = c, STAT = ierr)"
