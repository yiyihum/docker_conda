diff --git a/datastructs/arrays/SingleDimensionArray.py b/datastructs/arrays/SingleDimensionArray.py
index eca4e4e..69f94a7 100644
--- a/datastructs/arrays/SingleDimensionArray.py
+++ b/datastructs/arrays/SingleDimensionArray.py
@@ -1,14 +1,29 @@
 from ..common import Node
 
+from ..exceptions.custom import (
+                        InvalidArraySize,
+                        InvalidDataType,
+                        InvalidArrayIndex,
+                        InvalidArrayInitializerSize
+                        )
+
 class SingleDimensionArray:
 
     def _check_index(self, index):
         if index < 0 or index >= self.size:
-            raise IndexError
+            raise InvalidArrayIndex(
+                            "Expected range of index 0 to {}, Provided {}".
+                            format(self.size, index)
+                            )
 
     def _check_value(self, elem):
         if not isinstance(elem, self.elem_type):
-            raise ValueError
+            raise InvalidDataType(
+                            "Expected data object of {}, Recieved {}".format(
+                                self.elem_type,
+                                type(elem)
+                                )
+                            )
 
     def __init__(self, elem_type, size, init=[]):
         self.size = size
@@ -21,8 +36,7 @@ class SingleDimensionArray:
                     self._check_value(elem)
                     self.array[id].data = elem          
             else:
-                print("Invalid initialization size")
-                raise ValueError
+                raise InvalidArrayInitializerSize
     
     def get(self, index):
         self._check_index(index)
diff --git a/datastructs/exceptions/__init__.py b/datastructs/exceptions/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/datastructs/lists/SingleLinkList.py b/datastructs/lists/SingleLinkList.py
index 1ff2b8e..601f178 100644
--- a/datastructs/lists/SingleLinkList.py
+++ b/datastructs/lists/SingleLinkList.py
@@ -2,11 +2,21 @@ from ..common import Node
 from sys import stdout
 from copy import copy
 
+from ..exceptions.custom import (
+                        InvalidDataType,
+                        LinkedListEmpty
+                        )
+
 class SingleLinkList:
 
     def _check_value(self, elem):
         if not isinstance(elem, self.elem_type):
-            raise ValueError
+            raise InvalidDataType(
+                            "Expected data object of {}, Recieved {}".format(
+                                self.elem_type,
+                                type(elem)
+                                )
+                            )
 
     def __init__(self, elem_type, has_tail=True):
         self.head = Node()
@@ -42,15 +52,12 @@ class SingleLinkList:
         if self.head.next is not None:
             return self.head.next.data
         else:
-            # TODO: Add Error
-            print("List is empty")
-            raise IndexError
+            raise LinkedListEmpty
 
     def pop_first_element(self):
         if self.head and not self.head.next:
-            # TODO: Add error
-            print("Error List is empty")
-            raise IndexError
+            raise LinkedListEmpty
+        
         if self.has_tail and self.tail == self.head.next:
             self.tail = self.head
         node = self.head.next
@@ -90,9 +97,7 @@ class SingleLinkList:
         if not self.list_empty():
             return self.get_last_node().data
         else:
-            # TODO: Add Error
-            print("List is empty")
-            raise IndexError
+            raise LinkedListEmpty
 
     def find_element(self, data):
         '''
diff --git a/datastructs/queues/ListQueue.py b/datastructs/queues/ListQueue.py
index 89e10c2..e562e52 100644
--- a/datastructs/queues/ListQueue.py
+++ b/datastructs/queues/ListQueue.py
@@ -1,4 +1,8 @@
 from ..lists.SingleLinkList import SingleLinkList
+from ..exceptions.custom import (
+                            QueueEmpty,
+                            LinkedListEmpty
+                            )
 
 class ListQueue:
 
@@ -12,11 +16,14 @@ class ListQueue:
     
     def next_key(self):
         if self.queue_empty():
-            raise IndexError
+            raise QueueEmpty
         return self.top.next.data
     
     def enqueue(self, key):
         self.queue.add_to_back(key)
     
     def dequeue(self):
-        return self.queue.pop_first_element()
\ No newline at end of file
+        try:
+            return self.queue.pop_first_element()
+        except LinkedListEmpty:
+            raise QueueEmpty
\ No newline at end of file
diff --git a/datastructs/stacks/ListStack.py b/datastructs/stacks/ListStack.py
index 177ebc8..bcaae8d 100644
--- a/datastructs/stacks/ListStack.py
+++ b/datastructs/stacks/ListStack.py
@@ -1,4 +1,8 @@
 from ..lists.SingleLinkList import SingleLinkList
+from ..exceptions.custom import (
+                    StackUnderFlowException,
+                    LinkedListEmpty
+                    )
 
 class ListStack:
 
@@ -12,11 +16,14 @@ class ListStack:
     
     def top_elem(self):
         if self.stack_empty():
-            raise IndexError
+            raise StackUnderFlowException
         return self.top.next.data
     
     def pop(self):
-        return self.stack.pop_first_element()
-    
+        try:
+            return self.stack.pop_first_element()
+        except LinkedListEmpty:
+            raise StackUnderFlowException
+
     def push(self, elem_type):
         self.stack.add_to_front(elem_type)
\ No newline at end of file

