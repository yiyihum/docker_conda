diff --git a/tests/CLI/modules/hardware/hardware_basic_tests.py b/tests/CLI/modules/hardware/hardware_basic_tests.py
index 61135fa4..d7c2ca9b 100644
--- a/tests/CLI/modules/hardware/hardware_basic_tests.py
+++ b/tests/CLI/modules/hardware/hardware_basic_tests.py
@@ -498,26 +498,6 @@ def test_edit_server_userfile(self):
             self.assert_called_with('SoftLayer_Hardware_Server', 'setUserMetadata',
                                     args=(['some data'],), identifier=1000)
 
-    @mock.patch('SoftLayer.CLI.formatting.confirm')
-    def test_update_firmware(self, confirm_mock):
-        confirm_mock.return_value = True
-        result = self.run_command(['server', 'update-firmware', '1000'])
-
-        self.assert_no_fail(result)
-        self.assertEqual(result.output, "")
-        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
-                                args=((1, 1, 1, 1)), identifier=1000)
-
-    @mock.patch('SoftLayer.CLI.formatting.confirm')
-    def test_reflash_firmware(self, confirm_mock):
-        confirm_mock.return_value = True
-        result = self.run_command(['server', 'reflash-firmware', '1000'])
-
-        self.assert_no_fail(result)
-        self.assertEqual(result.output, 'Successfully device firmware reflashed\n')
-        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareReflashTransaction',
-                                args=((1, 1, 1)), identifier=1000)
-
     def test_edit(self):
         result = self.run_command(['server', 'edit',
                                    '--domain=example.com',
diff --git a/tests/CLI/modules/hardware/hardware_firmware_tests.py b/tests/CLI/modules/hardware/hardware_firmware_tests.py
new file mode 100644
index 00000000..cc71c488
--- /dev/null
+++ b/tests/CLI/modules/hardware/hardware_firmware_tests.py
@@ -0,0 +1,109 @@
+"""
+    SoftLayer.tests.CLI.modules.hardware.hardware_firmware_tests
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+    This suite is for the firmware related tests.
+
+    :license: MIT, see LICENSE for more details.
+"""
+from SoftLayer.CLI import exceptions
+from SoftLayer import testing
+from unittest import mock as mock
+
+
+class HardwareFirmwareTests(testing.TestCase):
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000'])
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((1, 1, 1, 1, 1)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_just_ipmi(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000', '-i'])
+
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((1, 0, 0, 0, 0)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_just_raid(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000', '-r'])
+
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((0, 1, 0, 0, 0)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_just_bios(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000', '-b'])
+
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((0, 0, 1, 0, 0)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_just_disk(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000', '-d'])
+
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((0, 0, 0, 1, 0)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_just_nic(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000', '-n'])
+
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((0, 0, 0, 0, 1)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_just_all(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'update-firmware', '1000', '-i', '-r', '-b', '-d', '-n'])
+
+        self.assert_no_fail(result)
+        self.assertIn("Firmware update for 1000 started", result.output)
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
+                                args=((1, 1, 1, 1, 1)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_update_firmware_no_confirm(self, confirm_mock):
+        confirm_mock.return_value = False
+
+        result = self.run_command(['server', 'update-firmware', '1000'])
+        self.assertEqual(result.exit_code, 2)
+        self.assertIsInstance(result.exception, exceptions.CLIAbort)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_reflash_firmware(self, confirm_mock):
+        confirm_mock.return_value = True
+        result = self.run_command(['server', 'reflash-firmware', '1000'])
+
+        self.assert_no_fail(result)
+        self.assertEqual(result.output, 'Successfully device firmware reflashed\n')
+        self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareReflashTransaction',
+                                args=((1, 1, 1)), identifier=1000)
+
+    @mock.patch('SoftLayer.CLI.formatting.confirm')
+    def test_reflash_firmware_no_confirm(self, confirm_mock):
+        confirm_mock.return_value = False
+
+        result = self.run_command(['server', 'reflash-firmware', '1000'])
+        self.assertEqual(result.exit_code, 2)
+        self.assertIsInstance(result.exception, exceptions.CLIAbort)
diff --git a/tests/managers/hardware_tests.py b/tests/managers/hardware_tests.py
index c6175d07..c067dd08 100644
--- a/tests/managers/hardware_tests.py
+++ b/tests/managers/hardware_tests.py
@@ -543,14 +543,14 @@ def test_update_firmware(self):
 
         self.assertEqual(result, True)
         self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
-                                identifier=100, args=(1, 1, 1, 1))
+                                identifier=100, args=(1, 1, 1, 1, 1))
 
     def test_update_firmware_selective(self):
         result = self.hardware.update_firmware(100, ipmi=False, hard_drive=False)
 
         self.assertEqual(result, True)
         self.assert_called_with('SoftLayer_Hardware_Server', 'createFirmwareUpdateTransaction',
-                                identifier=100, args=(0, 1, 1, 0))
+                                identifier=100, args=(0, 1, 1, 0, 1))
 
     def test_reflash_firmware(self):
         result = self.hardware.reflash_firmware(100)
