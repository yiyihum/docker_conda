diff --git a/src/fparser/two/tests/fortran2003/test_loop_control_r830.py b/src/fparser/two/tests/fortran2003/test_loop_control_r830.py
new file mode 100644
index 0000000..a758342
--- /dev/null
+++ b/src/fparser/two/tests/fortran2003/test_loop_control_r830.py
@@ -0,0 +1,120 @@
+# Copyright (c) 2023 Science and Technology Facilities Council
+
+# All rights reserved.
+
+# Modifications made as part of the fparser project are distributed
+# under the following license:
+
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+
+# 1. Redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer.
+
+# 2. Redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution.
+
+# 3. Neither the name of the copyright holder nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+"""Test Fortran 2003 rule R830 : This file tests the support for the
+loop-control rule.
+
+"""
+import pytest
+from fparser.two.Fortran2003 import Loop_Control
+from fparser.two.utils import NoMatchError
+
+
+def test_start_end_space_while():
+    """Test that there is a match if the string contains white space at
+    the start and end and that the tostr() output is as expected. Also
+    test matching to the while form of this rule.
+
+    """
+    result = Loop_Control(" while (.true.) ")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == "WHILE (.TRUE.)"
+
+
+def test_delim():
+    """Test that there is a match if the string contains an optional
+    delimiter at the start and that the tostr() output is as expected.
+
+    """
+    result = Loop_Control(" , while (.true.) ")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == ", WHILE (.TRUE.)"
+
+
+def test_repmap():
+    """Test matching when the while logical expresssion contains
+    brackets. This tests the use of the string_replace_map() function.
+
+    """
+    result = Loop_Control(" , while (((a .or. b) .and. (c .or. d))) ")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == ", WHILE (((a .OR. b) .AND. (c .OR. d)))"
+
+
+def test_counter():
+    """Test matching to the counter form of this rule and that the tostr()
+    output is as expected.
+
+    """
+    # Lower-bound and upper-bound only
+    result = Loop_Control("idx = start,stop")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == "idx = start, stop"
+    # Lower-bound, upper-bound and step
+    result = Loop_Control("idx = start,stop,step")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == "idx = start, stop, step"
+    # Bounds are integer expressions
+    result = Loop_Control("idx = ((s+2)-q),(p*m)/4,a+b+c")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == "idx = ((s + 2) - q), (p * m) / 4, a + b + c"
+
+
+@pytest.mark.parametrize(
+    "string",
+    [
+        "",
+        " ",
+        ": while(.true.)",
+        "whil (.true.)",
+        "while .true.",
+        "while ()",
+        "while( )",
+        "while (.true ",
+        "while ())",
+        "while('text')",
+        " == ",
+        " = ",
+        "idx=",
+        "=1,2",
+        "idx=1",
+        "idx=1,2,3,4",
+        "1=1,2",
+        "idx=1,.false.",
+    ],
+)
+def test_invalid(string):
+    """Test that there is no match for various invalid input strings."""
+    with pytest.raises(NoMatchError):
+        _ = Loop_Control(string)
diff --git a/src/fparser/two/tests/fortran2008/test_loop_control_r818.py b/src/fparser/two/tests/fortran2008/test_loop_control_r818.py
new file mode 100644
index 0000000..934800d
--- /dev/null
+++ b/src/fparser/two/tests/fortran2008/test_loop_control_r818.py
@@ -0,0 +1,93 @@
+# Copyright (c) 2023 Science and Technology Facilities Council
+
+# All rights reserved.
+
+# Modifications made as part of the fparser project are distributed
+# under the following license:
+
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+
+# 1. Redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer.
+
+# 2. Redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution.
+
+# 3. Neither the name of the copyright holder nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+"""Test Fortran 2008 rule R818
+
+    loop-control is [ , ] do-variable = scalar-int-expr , scalar-int-expr
+                       [ , scalar-int-expr ]
+                    or [ , ] WHILE ( scalar-logical-expr )
+                    or [ , ] CONCURRENT forall-header
+
+    Extends the Fortran2003 rule R830 with the additional CONCURRENT clause.
+
+"""
+import pytest
+from fparser.two.Fortran2008 import Loop_Control
+from fparser.two.utils import NoMatchError
+
+
+def test_f2003_match():
+    """Test that there is a match if the string contains a F2003 form of
+    the rule and that the F2003 tostr() is as expected.
+
+    """
+    result = Loop_Control("while (.true.)")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == "WHILE (.TRUE.)"
+
+
+def test_start_space():
+    """Test that there is a match if the string contains white space at
+    the start and end and that the tostr() output is as expected.
+
+    """
+    result = Loop_Control(" concurrent (i=1:10) ")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == "CONCURRENT (i = 1 : 10)"
+
+
+def test_delim():
+    """Test that there is a match if the string contains an options
+    delimiter at the start and that the tostr() output is as expected.
+
+    """
+    result = Loop_Control(" , concurrent (i=1:10)")
+    assert isinstance(result, Loop_Control)
+    assert str(result) == ", CONCURRENT (i = 1 : 10)"
+
+
+@pytest.mark.parametrize(
+    "string",
+    [
+        "",
+        ": concurrent (i=1:10)",
+        "concurren (i=1:10)",
+        "concurrent",
+        "concurrent invalid",
+    ],
+)
+def test_invalid(string):
+    """Test that there is no match for various invalid input strings."""
+    with pytest.raises(NoMatchError):
+        _ = Loop_Control(string)
diff --git a/src/fparser/two/tests/test_fortran2003.py b/src/fparser/two/tests/test_fortran2003.py
index f49a2ad..fc75b86 100644
--- a/src/fparser/two/tests/test_fortran2003.py
+++ b/src/fparser/two/tests/test_fortran2003.py
@@ -2113,26 +2113,6 @@ def test_label_do_stmt():
     assert repr(obj) == "Label_Do_Stmt(None, Label('12'), None)"
 
 
-def test_loop_control():
-    """Tests incorrect loop control constructs (R829). Correct loop
-    control constructs are tested in test_block_label_do_construct()
-    and test_nonblock_label_do_construct()."""
-    tcls = Loop_Control
-
-    # More than one '=' in counter expression
-    with pytest.raises(NoMatchError) as excinfo:
-        _ = tcls("j = 1 = 10")
-    assert "Loop_Control: 'j = 1 = 10'" in str(excinfo.value)
-
-    # Incorrect number of elements in counter expression
-    with pytest.raises(NoMatchError) as excinfo:
-        _ = tcls("k = 10, -10, -2, -1")
-    assert "Loop_Control: 'k = 10, -10, -2, -1'" in str(excinfo.value)
-    with pytest.raises(NoMatchError) as excinfo:
-        _ = tcls("l = 5")
-    assert "Loop_Control: 'l = 5'" in str(excinfo.value)
-
-
 def test_continue_stmt():  # R848
     tcls = Continue_Stmt
     obj = tcls("continue")
