diff --git a/src/fparser/two/Fortran2003.py b/src/fparser/two/Fortran2003.py
index d314d1e..d303d69 100644
--- a/src/fparser/two/Fortran2003.py
+++ b/src/fparser/two/Fortran2003.py
@@ -1,6 +1,6 @@
 #!/usr/bin/env python
 
-# Modified work Copyright (c) 2017-2022 Science and Technology
+# Modified work Copyright (c) 2017-2023 Science and Technology
 # Facilities Council.
 # Original work Copyright (c) 1999-2008 Pearu Peterson
 
@@ -5249,7 +5249,7 @@ class Allocate_Stmt(StmtBase):  # R623
         allocate-stmt is ALLOCATE ( [ type-spec :: ] allocation-list
                                     [, alloc-opt-list ] )
 
-    Subject to the following constraints\:
+    Subject to the following constraints:
 
     C622 (R629) Each allocate-object shall be a nonprocedure pointer or an
                  allocatable variable.
@@ -7949,14 +7949,24 @@ class Nonlabel_Do_Stmt(StmtBase, WORDClsBase):  # pylint: disable=invalid-name
         return self.item.name
 
 
-class Loop_Control(Base):  # pylint: disable=invalid-name
+# pylint: disable=invalid-name
+class Loop_Control(Base):  # R830
     """
-    R830::
+    Fortran 2003 rule R830
 
-        <loop-control> = [ , ] <do-variable> = scalar-int-expr,
-                                               scalar-int-expr
-                                               [ , <scalar-int-expr> ]
-                         | [ , ] WHILE ( <scalar-logical-expr> )
+    loop-control is [ , ] do-variable = scalar-int-expr , scalar-int-expr
+                       [ , scalar-int-expr ]
+                    or [ , ] WHILE ( scalar-logical-expr )
+
+    This class would be better and more extensible if it called 2
+    classes, one for each of the above expressions. Something like the
+    suggestion below. However, this would result in a different
+    fparser tree, see issue #416.
+
+    F2003: While_Loop_Cntl: scalar-logical-expression, delim
+    F2003: Counter_Loop_Cntl: var, lower, upper, [step], delim
+    F2008: Concurrent_Loop_Cntl: conc_expr, delim
+    F2018: Concurrent_Loop_Cntl: conc_expr, local_x, delim
 
     """
 
@@ -7965,66 +7975,73 @@ class Loop_Control(Base):  # pylint: disable=invalid-name
 
     @staticmethod
     def match(string):
-        """
-        :param str string: Fortran code to check for a match
-        :return: 3-tuple containing strings and instances of the classes
-                 determining loop control (optional comma delimiter,
-                 optional scalar logical expression describing "WHILE"
-                 condition or optional counter expression containing loop
-                 counter and scalar integer expression)
-        :rtype: 3-tuple of objects or nothing for an "infinite loop"
-        """
-        # pylint: disable=unbalanced-tuple-unpacking
+        """Attempts to match the supplied text with this rule.
+
+        :param str string: Fortran code to check for a match.
+
+        :returns: None if there is no match, a 3-tuple with the first \
+            entry providing the result of matching the 'WHILE' part of \
+            the rule if there is a match, the second entry providing \
+            the result of matching the 'COUNTER' part of the rule if \
+            there is a match and the third entry indicating whether \
+            there is an optional preceding ','.
+        :rtype: Optional[Tuple[ \
+            Optional[ \
+                :py:class:`fparser.two.Fortran2003.Scalar_Logical_Expr`], \
+            Optional[Tuple[ \
+                :py:class:`fparser.two.Fortran2003.Do_Variable`, List[str]]], \
+            Optional[str]]]
+
+        """
+        line = string.lstrip().rstrip()
+        # Try to match optional delimiter
         optional_delim = None
-        # Match optional delimiter
-        if string.startswith(","):
-            line, repmap = string_replace_map(string[1:].lstrip())
-            optional_delim = ", "
-        else:
-            line, repmap = string_replace_map(string)
-        # Match "WHILE" scalar logical expression
+        if line.startswith(","):
+            line = line[1:].lstrip()
+            optional_delim = ","
+        line, repmap = string_replace_map(line)
+        # Try to match with WHILE
         if line[:5].upper() == "WHILE" and line[5:].lstrip().startswith("("):
-            lbrak = line[5:].lstrip()
-            i = lbrak.find(")")
-            if i != -1 and i == len(lbrak) - 1:
-                scalar_logical_expr = Scalar_Logical_Expr(repmap(lbrak[1:i].strip()))
-                return scalar_logical_expr, None, optional_delim
-        # Match counter expression
-        # More than one '=' in counter expression
+            brackets = line[5:].lstrip()
+            rbrack_index = brackets.find(")")
+            if rbrack_index != -1 and rbrack_index == len(brackets) - 1:
+                scalar_logical_expr = Scalar_Logical_Expr(
+                    repmap(brackets[1:rbrack_index].strip())
+                )
+                return (scalar_logical_expr, None, optional_delim)
+        # Try to match counter expression
+        # More than one '=' in counter expression is not valid
         if line.count("=") != 1:
-            return
+            return None
         var, rhs = line.split("=")
-        rhs = [s.strip() for s in rhs.lstrip().split(",")]
+        rhs = [entry.strip() for entry in rhs.lstrip().split(",")]
         # Incorrect number of elements in counter expression
         if not 2 <= len(rhs) <= 3:
-            return
+            return None
         counter_expr = (
-            Variable(repmap(var.rstrip())),
+            Do_Variable(repmap(var.rstrip())),
             list(map(Scalar_Int_Expr, list(map(repmap, rhs)))),
         )
-        return None, counter_expr, optional_delim
+        return (None, counter_expr, optional_delim)
 
     def tostr(self):
         """
-        :return: parsed representation of loop control construct
-        :rtype: string
+        :returns: the Fortran representation of this object.
+        :rtype: str
         """
-        # pylint: disable=unbalanced-tuple-unpacking
-        scalar_logical_expr, counter_expr, optional_delim = self.items
-        # Return loop control construct containing "WHILE" condition and
-        # its <scalar-logical-expr>
-        if scalar_logical_expr is not None:
-            loopctrl = "WHILE (%s)" % scalar_logical_expr
-        # Return loop control construct containing counter expression:
-        # <do-variable> as LHS and <scalar-int-expr> list as RHS
-        elif counter_expr[0] is not None and counter_expr[1] is not None:
-            loopctrl = "%s = %s" % (
-                counter_expr[0],
-                ", ".join(map(str, counter_expr[1])),
+        if self.items[0]:
+            # Return loop control construct containing "WHILE" condition and
+            # its <scalar-logical-expr>
+            loopctrl = f"WHILE ({self.items[0]})"
+        else:  # counter expression
+            # Return loop control construct containing counter expression:
+            # <do-variable> as LHS and <scalar-int-expr> list as RHS
+            loopctrl = (
+                f"{self.items[1][0]} = " f"{', '.join(map(str, self.items[1][1]))}"
             )
         # Add optional delimiter to loop control construct if present
-        if optional_delim is not None:
-            loopctrl = optional_delim + loopctrl
+        if self.items[2]:
+            loopctrl = f"{self.items[2]} {loopctrl}"
         return loopctrl
 
 
diff --git a/src/fparser/two/Fortran2008.py b/src/fparser/two/Fortran2008.py
index 9a46e26..134fcb4 100644
--- a/src/fparser/two/Fortran2008.py
+++ b/src/fparser/two/Fortran2008.py
@@ -93,6 +93,9 @@ from fparser.two.utils import (
     WORDClsBase,
 )
 
+# These pylint errors are due to the auto-generation of classes in the
+# Fortran2003 file.
+# pylint: disable=no-name-in-module
 from fparser.two.Fortran2003 import (
     Base,
     BlockBase,
@@ -105,6 +108,7 @@ from fparser.two.Fortran2003 import (
     Execution_Part_Construct,
     File_Name_Expr,
     File_Unit_Number,
+    Forall_Header,
     Implicit_Part,
     Implicit_Part_Stmt,
     Import_Stmt,
@@ -120,6 +124,8 @@ from fparser.two.Fortran2003 import (
     Use_Stmt,
 )
 
+# pylint: enable=no-name-in-module
+
 # Import of F2003 classes that are updated in this standard.
 from fparser.two.Fortran2003 import (
     Action_Stmt as Action_Stmt_2003,
@@ -136,6 +142,7 @@ from fparser.two.Fortran2003 import (
     Executable_Construct as Executable_Construct_2003,
     Executable_Construct_C201 as Executable_Construct_C201_2003,
     If_Stmt as If_Stmt_2003,
+    Loop_Control as Loop_Control_2003,
     Open_Stmt as Open_Stmt_2003,
     Procedure_Stmt as Procedure_Stmt_2003,
     Program_Unit as Program_Unit_2003,
@@ -817,6 +824,90 @@ class Allocate_Stmt(Allocate_Stmt_2003):  # R626
         return Alloc_Opt_List
 
 
+class Loop_Control(Loop_Control_2003):  # R818
+    """Fortran 2008 rule R818
+
+    loop-control is [ , ] do-variable = scalar-int-expr , scalar-int-expr
+                       [ , scalar-int-expr ]
+                    or [ , ] WHILE ( scalar-logical-expr )
+                    or [ , ] CONCURRENT forall-header
+
+    Extends the Fortran2003 rule R830 with the additional CONCURRENT clause.
+
+    The F2003 Loop_Control class would be better and more extensible
+    if it called 2 classes, one for each of the above
+    expressions. This would then affect the implementation of this
+    class. Something like the suggestion below. However, this would
+    result in a different fparser tree, see issue #416.
+
+    F2003: While_Loop_Cntl: scalar-logical-expression, delim
+    F2003: Counter_Loop_Cntl: var, lower, upper, [step], delim
+    F2008: Concurrent_Loop_Cntl: conc_expr, delim
+    F2018: Concurrent_Loop_Cntl: conc_expr, local_x, delim
+
+    """
+
+    subclass_names = []
+    # This class' match method makes use of the Fortran2003 match
+    # method so 'use_names' should include any classes used within
+    # there as well as any used here.
+    use_names = Loop_Control_2003.use_names[:]
+    use_names.append("Forall_Header")
+
+    @staticmethod
+    def match(string):
+        """Attempts to match the supplied text with this rule.
+
+        :param str string: Fortran code to check for a match.
+
+        :returns: None if there is no match, a tuple with the first \
+            entry providing the result of matching the 'WHILE' part of \
+            the rule if there is a match, the second entry providing \
+            the result of matching the 'COUNTER' part of the rule if \
+            there is a match, the third entry indicating whether \
+            there is an optional preceding ',' and the fourth entry \
+            providing the result of matching the 'CONCURRENT' part of \
+            the rule if there is a match.
+
+        :rtype: Optional[Tuple[ \
+            Optional[ \
+                :py:class:`fparser.two.Fortran2003.Scalar_Logical_Expr`], \
+            Optional[Tuple[ \
+                :py:class:`fparser.two.Fortran2003.Do_Variable`, List[str]]], \
+            Optional[str], \
+            Optional[:py:class:`fparser.two.Fortran2003.Forall_Header`]]]
+
+        """
+        # Fortran2003 matches all but CONCURRENT so try this first
+        result = Loop_Control_2003.match(string)
+        if result:
+            return result + (None,)
+        # Try to match with CONCURRENT
+        line = string.lstrip()
+        optional_delim = None
+        if line.startswith(","):
+            line = line[1:].lstrip()
+            optional_delim = ","
+        if line[:10].upper() != "CONCURRENT":
+            return None
+        return (None, None, optional_delim, Forall_Header(line[10:].lstrip().rstrip()))
+
+    def tostr(self):
+        """
+        :returns: the Fortran representation of this object.
+        :rtype: str
+        """
+        if self.items[0] or self.items[1]:
+            # Use the F2003 tostr() implementation
+            return Loop_Control_2003.tostr(self)
+        # Return loop control construct containing "CONCURRENT" clause
+        loopctrl = f"CONCURRENT {self.items[3]}"
+        # Add optional delimiter to loop control construct if present
+        if self.items[2]:
+            loopctrl = f"{self.items[2]} {loopctrl}"
+        return loopctrl
+
+
 class If_Stmt(If_Stmt_2003):  # R837
     """
     Fortran 2008 rule R837

