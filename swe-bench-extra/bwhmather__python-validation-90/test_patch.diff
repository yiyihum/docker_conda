diff --git a/validation/tests/__init__.py b/validation/tests/__init__.py
index 9bfb5d4..192cc58 100644
--- a/validation/tests/__init__.py
+++ b/validation/tests/__init__.py
@@ -15,6 +15,7 @@ from . import (
     test_tuple,
     test_optional_argument,
     test_email,
+    test_uuid,
 )  # noqa:
 
 
@@ -34,4 +35,5 @@ suite = unittest.TestSuite((
     loader.loadTestsFromModule(test_tuple),  # type: ignore
     loader.loadTestsFromModule(test_optional_argument),  # type: ignore
     loader.loadTestsFromModule(test_email),  # type: ignore
+    loader.loadTestsFromModule(test_uuid),  # type: ignore
 ))
diff --git a/validation/tests/test_uuid.py b/validation/tests/test_uuid.py
new file mode 100644
index 0000000..1ffc04f
--- /dev/null
+++ b/validation/tests/test_uuid.py
@@ -0,0 +1,64 @@
+import unittest
+import uuid
+
+from validation import validate_uuid
+
+
+class ValidateUUIDTestCase(unittest.TestCase):
+    def test_uuid1_valid(self):
+        validate_uuid(uuid.uuid1())
+
+    def test_uuid1_expected_valid(self):
+        validate_uuid(uuid.uuid1(), version=1)
+
+    def test_uuid1_expected_invalid(self):
+        with self.assertRaises(ValueError):
+            validate_uuid(uuid.uuid4(), version=1)
+
+    def test_uuid3_valid(self):
+        validate_uuid(uuid.uuid3(uuid.uuid4(), "name"))
+
+    def test_uuid3_expected_valid(self):
+        validate_uuid(uuid.uuid3(uuid.uuid4(), "name"), version=3)
+
+    def test_uuid3_expected_invalid(self):
+        with self.assertRaises(ValueError):
+            validate_uuid(uuid.uuid4(), version=3)
+
+    def test_uuid4_valid(self):
+        validate_uuid(uuid.uuid4())
+
+    def test_uuid5_valid(self):
+        validate_uuid(uuid.uuid5(uuid.uuid4(), "name"))
+
+    def test_rfc4122_valid(self):
+        validate_uuid(uuid.uuid4(), variant=uuid.RFC_4122)
+
+    def test_microsoft_invalid(self):
+        with self.assertRaises(ValueError):
+            validate_uuid(uuid.uuid4(), variant=uuid.RESERVED_MICROSOFT)
+
+    def test_incompatible_variant_version(self):
+        with self.assertRaises(ValueError):
+            validate_uuid(variant=uuid.RESERVED_MICROSOFT, version=4)
+
+    def test_not_required(self):
+        validate_uuid(None, required=False)
+
+    def test_required(self):
+        with self.assertRaises(TypeError):
+            validate_uuid(None)
+
+    def test_repr_required_false(self):
+        validator = validate_uuid(required=False)
+        self.assertEqual(
+            repr(validator),
+            'validate_uuid(required=False)',
+        )
+
+    def test_repr_full(self):
+        validator = validate_uuid(variant=uuid.RFC_4122, version=3)
+        self.assertEqual(
+            repr(validator),
+            'validate_uuid(variant=uuid.RFC_4122, version=3)',
+        )
