diff --git a/tests/func/test_stage_load.py b/tests/func/test_stage_load.py
--- a/tests/func/test_stage_load.py
+++ b/tests/func/test_stage_load.py
@@ -4,7 +4,7 @@
 import pytest
 from funcy import raiser
 
-from dvc.dvcfile import PIPELINE_FILE
+from dvc.dvcfile import PIPELINE_FILE, FileIsGitIgnored
 from dvc.exceptions import NoOutputOrStageError
 from dvc.path_info import PathInfo
 from dvc.repo import Repo
@@ -451,3 +451,45 @@ def test_collect_repo_callback(tmp_dir, dvc, mocker):
     file_path, exc = mock.call_args[0]
     assert file_path == PIPELINE_FILE
     assert isinstance(exc, StageFileFormatError)
+
+
+def test_gitignored_collect_repo(tmp_dir, dvc, scm):
+    (stage,) = tmp_dir.dvc_gen({"data": {"foo": "foo", "bar": "bar"}})
+
+    assert dvc.stage.collect_repo() == [stage]
+
+    scm.ignore(stage.path)
+    scm._reset()
+
+    assert not dvc.stage.collect_repo()
+
+
+def test_gitignored_file_try_collect_granular_for_data_files(
+    tmp_dir, dvc, scm
+):
+    (stage,) = tmp_dir.dvc_gen({"data": {"foo": "foo", "bar": "bar"}})
+    path = PathInfo("data") / "foo"
+
+    assert dvc.stage.collect_granular(str(path)) == [
+        (stage, PathInfo(tmp_dir / path))
+    ]
+
+    scm.ignore(stage.path)
+    dvc._reset()
+
+    with pytest.raises(NoOutputOrStageError):
+        dvc.stage.collect_granular(str(path))
+
+
+def test_gitignored_file_try_collect_granular_for_dvc_yaml_files(
+    tmp_dir, dvc, scm, stages
+):
+    assert dvc.stage.collect_granular("bar") == [
+        (stages["copy-foo-bar"], PathInfo(tmp_dir / "bar"))
+    ]
+
+    scm.ignore(tmp_dir / "dvc.yaml")
+    scm._reset()
+
+    with pytest.raises(FileIsGitIgnored):
+        dvc.stage.collect_granular("bar")
diff --git a/tests/unit/test_dvcfile.py b/tests/unit/test_dvcfile.py
--- a/tests/unit/test_dvcfile.py
+++ b/tests/unit/test_dvcfile.py
@@ -4,6 +4,7 @@
     PIPELINE_FILE,
     PIPELINE_LOCK,
     Dvcfile,
+    FileIsGitIgnored,
     PipelineFile,
     SingleStageFile,
 )
@@ -41,12 +42,23 @@ def test_pipelines_single_stage_file(path):
 
 
 @pytest.mark.parametrize("file", ["stage.dvc", "dvc.yaml"])
-def test_stage_load_on_not_existing_file(tmp_dir, dvc, file):
+@pytest.mark.parametrize("is_dvcignored", [True, False])
+def test_stage_load_on_not_existing_file(tmp_dir, dvc, file, is_dvcignored):
     dvcfile = Dvcfile(dvc, file)
+    if is_dvcignored:
+        (tmp_dir / ".dvcignore").write_text(file)
+
     assert not dvcfile.exists()
-    with pytest.raises(StageFileDoesNotExistError):
+    with pytest.raises(StageFileDoesNotExistError) as exc_info:
         assert dvcfile.stages.values()
+
+    assert str(exc_info.value) == f"'{file}' does not exist"
+
+
+@pytest.mark.parametrize("file", ["stage.dvc", "dvc.yaml"])
+def test_stage_load_on_non_file(tmp_dir, dvc, file):
     (tmp_dir / file).mkdir()
+    dvcfile = Dvcfile(dvc, file)
     with pytest.raises(StageFileIsNotDvcFileError):
         assert dvcfile.stages.values()
 
@@ -83,3 +95,31 @@ def test_dump_stage(tmp_dir, dvc):
     assert (tmp_dir / PIPELINE_FILE).exists()
     assert (tmp_dir / PIPELINE_LOCK).exists()
     assert list(dvcfile.stages.values()) == [stage]
+
+
+@pytest.mark.parametrize("file", ["stage.dvc", "dvc.yaml"])
+def test_stage_load_file_exists_but_dvcignored(tmp_dir, dvc, scm, file):
+    (tmp_dir / file).write_text("")
+    (tmp_dir / ".dvcignore").write_text(file)
+
+    dvcfile = Dvcfile(dvc, file)
+    with pytest.raises(StageFileDoesNotExistError) as exc_info:
+        assert dvcfile.stages.values()
+
+    assert str(exc_info.value) == f"'{file}' is dvc-ignored"
+
+
+@pytest.mark.parametrize("file", ["foo.dvc", "dvc.yaml"])
+def test_try_loading_dvcfile_that_is_gitignored(tmp_dir, dvc, scm, file):
+    with open(tmp_dir / ".gitignore", "a+") as fd:
+        fd.write(file)
+
+    # create a file just to avoid other checks
+    (tmp_dir / file).write_text("")
+    scm._reset()
+
+    dvcfile = Dvcfile(dvc, file)
+    with pytest.raises(FileIsGitIgnored) as exc_info:
+        dvcfile._load()
+
+    assert str(exc_info.value) == f"'{file}' is git-ignored."
