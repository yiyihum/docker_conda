diff --git a/src/setuptools_scm/file_finder.py b/src/setuptools_scm/file_finder.py
index 77ec146..5b85117 100644
--- a/src/setuptools_scm/file_finder.py
+++ b/src/setuptools_scm/file_finder.py
@@ -1,4 +1,5 @@
 import os
+from .utils import trace
 
 
 def scm_find_files(path, scm_files, scm_dirs):
@@ -53,3 +54,16 @@ def scm_find_files(path, scm_files, scm_dirs):
                 res.append(os.path.join(path, os.path.relpath(fullfilename, realpath)))
         seen.add(realdirpath)
     return res
+
+
+def is_toplevel_acceptable(toplevel):
+    ""
+    if toplevel is None:
+        return False
+
+    ignored = os.environ.get("SETUPTOOLS_SCM_IGNORE_VCS_ROOTS", "").split(os.pathsep)
+    ignored = [os.path.normcase(p) for p in ignored]
+
+    trace(toplevel, ignored)
+
+    return toplevel not in ignored
diff --git a/src/setuptools_scm/file_finder_git.py b/src/setuptools_scm/file_finder_git.py
index 9aa6245..1d3e69b 100644
--- a/src/setuptools_scm/file_finder_git.py
+++ b/src/setuptools_scm/file_finder_git.py
@@ -3,6 +3,7 @@ import subprocess
 import tarfile
 import logging
 from .file_finder import scm_find_files
+from .file_finder import is_toplevel_acceptable
 from .utils import trace
 
 log = logging.getLogger(__name__)
@@ -60,7 +61,7 @@ def _git_ls_files_and_dirs(toplevel):
 
 def git_find_files(path=""):
     toplevel = _git_toplevel(path)
-    if not toplevel:
+    if not is_toplevel_acceptable(toplevel):
         return []
     fullpath = os.path.abspath(os.path.normpath(path))
     if not fullpath.startswith(toplevel):
diff --git a/src/setuptools_scm/file_finder_hg.py b/src/setuptools_scm/file_finder_hg.py
index 2aa1e16..816560d 100644
--- a/src/setuptools_scm/file_finder_hg.py
+++ b/src/setuptools_scm/file_finder_hg.py
@@ -2,6 +2,7 @@ import os
 import subprocess
 
 from .file_finder import scm_find_files
+from .file_finder import is_toplevel_acceptable
 
 
 def _hg_toplevel(path):
@@ -41,7 +42,7 @@ def _hg_ls_files_and_dirs(toplevel):
 
 def hg_find_files(path=""):
     toplevel = _hg_toplevel(path)
-    if not toplevel:
+    if not is_toplevel_acceptable(toplevel):
         return []
     hg_files, hg_dirs = _hg_ls_files_and_dirs(toplevel)
     return scm_find_files(path, hg_files, hg_dirs)

