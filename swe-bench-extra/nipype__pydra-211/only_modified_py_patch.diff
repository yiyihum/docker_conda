diff --git a/pydra/engine/core.py b/pydra/engine/core.py
index 5e3e8ef..e630588 100644
--- a/pydra/engine/core.py
+++ b/pydra/engine/core.py
@@ -381,7 +381,7 @@ class TaskBase:
             orig_inputs = attr.asdict(self.inputs)
             map_copyfiles = copyfile_input(self.inputs, self.output_dir)
             modified_inputs = template_update(self.inputs, map_copyfiles)
-            if modified_inputs is not None:
+            if modified_inputs:
                 self.inputs = attr.evolve(self.inputs, **modified_inputs)
             self.audit.start_audit(odir)
             result = Result(output=None, runtime=None, errored=False)
diff --git a/pydra/engine/helpers_file.py b/pydra/engine/helpers_file.py
index 7c2098b..2afac73 100644
--- a/pydra/engine/helpers_file.py
+++ b/pydra/engine/helpers_file.py
@@ -505,7 +505,7 @@ def template_update(inputs, map_copyfiles=None):
                     f"output_file_template metadata for "
                     "{fld.name} should be a string"
                 )
-    return {k: v for k, v in dict_.items() if getattr(inputs, k) != v}
+    return {k: v for k, v in dict_.items() if getattr(inputs, k) is not v}
 
 
 def is_local_file(f):
diff --git a/pydra/engine/task.py b/pydra/engine/task.py
index 4872445..aa7fff5 100644
--- a/pydra/engine/task.py
+++ b/pydra/engine/task.py
@@ -176,15 +176,20 @@ class FunctionTask(TaskBase):
                     )
                 else:
                     if not isinstance(return_info, tuple):
-                        return_info = (return_info,)
-                    output_spec = SpecInfo(
-                        name="Output",
-                        fields=[
-                            ("out{}".format(n + 1), t)
-                            for n, t in enumerate(return_info)
-                        ],
-                        bases=(BaseSpec,),
-                    )
+                        output_spec = SpecInfo(
+                            name="Output",
+                            fields=[("out", return_info)],
+                            bases=(BaseSpec,),
+                        )
+                    else:
+                        output_spec = SpecInfo(
+                            name="Output",
+                            fields=[
+                                ("out{}".format(n + 1), t)
+                                for n, t in enumerate(return_info)
+                            ],
+                            bases=(BaseSpec,),
+                        )
         elif "return" in func.__annotations__:
             raise NotImplementedError("Branch not implemented")
         self.output_spec = output_spec

