diff --git a/pyatv/raop/parsers.py b/pyatv/raop/parsers.py
index ea47bb70..96c8f00e 100644
--- a/pyatv/raop/parsers.py
+++ b/pyatv/raop/parsers.py
@@ -23,6 +23,15 @@ class EncryptionType(IntFlag):
     FairPlaySAPv25 = 16
 
 
+class MetadataType(IntFlag):
+    """Metadata types supported by receiver."""
+
+    NotSupported = 0
+    Text = 1
+    Artwork = 2
+    Progress = 4
+
+
 # pylint: enable=invalid-name
 
 
@@ -43,9 +52,9 @@ def get_encryption_types(properties: Mapping[str, str]) -> EncryptionType:
 
     Input format from zeroconf is a comma separated list:
 
-        0,1,3
+        et=0,1,3
 
-    Each number represents one encryption type.
+    0=unencrypted, 1=RSA, 3=FairPlay, 4=MFiSAP, 5=FairPlay SAPv2.5
     """
     output = EncryptionType.Unknown
     try:
@@ -63,3 +72,27 @@ def get_encryption_types(properties: Mapping[str, str]) -> EncryptionType:
                 5: EncryptionType.FairPlaySAPv25,
             }.get(enc_type, EncryptionType.Unknown)
     return output
+
+
+def get_metadata_types(properties: Mapping[str, str]) -> MetadataType:
+    """Return metadata types supported by receiver.
+
+    Input format from zeroconf is comma separated list:
+
+        md=0,1,2
+
+    0=text, 1=artwork, 2=progress
+    """
+    output = MetadataType.NotSupported
+    try:
+        md_types = [int(x) for x in properties["md"].split(",")]
+    except (KeyError, ValueError):
+        return output
+    else:
+        for md_type in md_types:
+            output |= {
+                0: MetadataType.Text,
+                1: MetadataType.Artwork,
+                2: MetadataType.Progress,
+            }.get(md_type, MetadataType.NotSupported)
+    return output
diff --git a/pyatv/raop/raop.py b/pyatv/raop/raop.py
index fcc60fdd..5b00d0e2 100644
--- a/pyatv/raop/raop.py
+++ b/pyatv/raop/raop.py
@@ -15,8 +15,10 @@ from pyatv.raop.metadata import EMPTY_METADATA, AudioMetadata
 from pyatv.raop.packets import AudioPacketHeader, SyncPacket, TimingPacket
 from pyatv.raop.parsers import (
     EncryptionType,
+    MetadataType,
     get_audio_properties,
     get_encryption_types,
+    get_metadata_types,
 )
 from pyatv.raop.rtsp import FRAMES_PER_PACKET, RtspContext, RtspSession
 from pyatv.support import log_binary
@@ -33,6 +35,8 @@ MISSING_METADATA = AudioMetadata(
     title="Streaming with pyatv", artist="pyatv", album="RAOP"
 )
 
+SUPPORTED_ENCRYPTIONS = EncryptionType.Unencrypted | EncryptionType.MFiSAP
+
 
 class ControlClient(asyncio.Protocol):
     """Control client responsible for e.g. sync packets."""
@@ -240,6 +244,8 @@ class RaopClient:
         self.context: RtspContext = context
         self.control_client: Optional[ControlClient] = None
         self.timing_client: Optional[TimingClient] = None
+        self._encryption_types: EncryptionType = EncryptionType.Unknown
+        self._metadata_types: MetadataType = MetadataType.NotSupported
         self._metadata: AudioMetadata = EMPTY_METADATA
         self._keep_alive_task: Optional[asyncio.Future] = None
         self._listener: Optional[weakref.ReferenceType[Any]] = None
@@ -291,11 +297,20 @@ class RaopClient:
 
     async def initialize(self, properties: Mapping[str, str]):
         """Initialize the session."""
+        self._encryption_types = get_encryption_types(properties)
+        self._metadata_types = get_metadata_types(properties)
+
+        _LOGGER.debug(
+            "Initializing RTSP with encryption=%s, metadata=%s",
+            self._encryption_types,
+            self._metadata_types,
+        )
+
         # Misplaced check that unencrypted data is supported
-        encryption_types = get_encryption_types(properties)
-        if EncryptionType.Unencrypted not in encryption_types:
+        intersection = self._encryption_types & SUPPORTED_ENCRYPTIONS
+        if not intersection or intersection == EncryptionType.Unknown:
             raise exceptions.NotSupportedError(
-                f"no supported encryption types in {str(encryption_types)}"
+                f"no supported encryption types in {str(self._encryption_types)}"
             )
 
         self._update_output_properties(properties)
@@ -331,6 +346,10 @@ class RaopClient:
         )
 
     async def _setup_session(self):
+        # Do auth-setup if MFiSAP encryption is supported by receiver
+        if EncryptionType.MFiSAP in self._encryption_types:
+            await self.rtsp.auth_setup()
+
         await self.rtsp.announce()
 
         resp = await self.rtsp.setup(self.control_client.port, self.timing_client.port)
@@ -377,14 +396,18 @@ class RaopClient:
             # Start sending sync packets
             self.control_client.start(self.rtsp.remote_ip)
 
+            # Apply text metadata if it is supported
             self._metadata = metadata
-            _LOGGER.debug("Playing with metadata: %s", self.metadata)
-            await self.rtsp.set_metadata(
-                self.context.rtpseq, self.context.rtptime, self.metadata
-            )
+            if MetadataType.Text in self._metadata_types:
+                _LOGGER.debug("Playing with metadata: %s", self.metadata)
+                await self.rtsp.set_metadata(
+                    self.context.rtpseq, self.context.rtptime, self.metadata
+                )
 
             # Start keep-alive task to ensure connection is not closed by remote device
-            self._keep_alive_task = asyncio.ensure_future(self._send_keep_alive())
+            # but only if "text" metadata is supported
+            if MetadataType.Text in self._metadata_types:
+                self._keep_alive_task = asyncio.ensure_future(self._send_keep_alive())
 
             listener = self.listener
             if listener:
diff --git a/pyatv/raop/rtsp.py b/pyatv/raop/rtsp.py
index 1f7d5a69..86c3c406 100644
--- a/pyatv/raop/rtsp.py
+++ b/pyatv/raop/rtsp.py
@@ -4,7 +4,7 @@ import logging
 from random import randrange
 import re
 from socket import socket
-from typing import Dict, Mapping, NamedTuple, Optional, Tuple, Union
+from typing import Dict, Mapping, NamedTuple, Optional, Tuple, Union, cast
 
 from pyatv import exceptions
 from pyatv.dmap import tags
@@ -28,6 +28,20 @@ ANNOUNCE_PAYLOAD = (
     + "{bits_per_channel} 40 10 14 {channels} 255 0 0 {sample_rate}\r\n"
 )
 
+# Used to signal that traffic is to be unencrypted
+AUTH_SETUP_UNENCRYPTED = b"\x01"
+
+# Just a static Curve25519 public key used to satisfy the auth-setup step for devices
+# requiring that (e.g. AirPort Express). We never verify anything. Source:
+# https://github.com/owntone/owntone-server/blob/
+# c1db4d914f5cd8e7dbe6c1b6478d68a4c14824af/src/outputs/raop.c#L276
+CURVE25519_PUB_KEY = (
+    b"\x59\x02\xed\xe9\x0d\x4e\xf2\xbd"
+    b"\x4c\xb6\x8a\x63\x30\x03\x82\x07"
+    b"\xa9\x4d\xbd\x50\xd8\xaa\x46\x5b"
+    b"\x5d\x8c\x01\x2a\x0c\x7e\x1d\x4e"
+)
+
 
 class RtspContext:
     """Data used for one RTSP session.
@@ -79,16 +93,16 @@ class RtspResponse(NamedTuple):
     code: int
     message: str
     headers: Mapping[str, str]
-    body: str
+    body: Union[str, bytes]
 
 
-def parse_response(response: str) -> Tuple[RtspResponse, str]:
+def parse_response(response: bytes) -> Tuple[Optional[RtspResponse], bytes]:
     """Parse RTSP response."""
     try:
-        header_str, body = response.split("\r\n\r\n", maxsplit=1)
+        header_str, body = response.split(b"\r\n\r\n", maxsplit=1)
     except ValueError as ex:
         raise ValueError("missing end lines") from ex
-    headers = header_str.split("\r\n")
+    headers = header_str.decode("utf-8").split("\r\n")
 
     match = re.match(r"RTSP/1.0 (\d+) (.+)", headers[0])
     if not match:
@@ -103,11 +117,18 @@ def parse_response(response: str) -> Tuple[RtspResponse, str]:
             resp_headers[key] = value
 
     content_length = int(resp_headers.get("Content-Length", 0))
-    if body and len(body) < content_length:
-        raise ValueError("too short body")
+    if len(body or []) < content_length:
+        return None, response
+
+    response_body: Union[str, bytes] = body[0:content_length]
+
+    # Assume body is text unless content type is application/octet-stream
+    if resp_headers.get("Content-Type") != "application/octet-stream":
+        # We know it's bytes here
+        response_body = cast(bytes, response_body).decode("utf-8")
 
     return (
-        RtspResponse(int(code), message, resp_headers, body[0:content_length]),
+        RtspResponse(int(code), message, resp_headers, response_body),
         body[content_length:],
     )
 
@@ -121,6 +142,7 @@ class RtspSession(asyncio.Protocol):
         self.transport = None
         self.requests: Dict[int, Tuple[asyncio.Semaphore, RtspResponse]] = {}
         self.cseq = 0
+        self.buffer = b""
 
     @property
     def local_ip(self) -> str:
@@ -157,9 +179,13 @@ class RtspSession(asyncio.Protocol):
     def data_received(self, data: bytes) -> None:
         """Handle incoming RTSP data."""
         _LOGGER.debug("Received: %s", data)
-        rest = data.decode("utf-8")
-        while rest != "":
-            parsed, rest = parse_response(rest)
+        self.buffer += data
+        while self.buffer:
+            parsed, self.buffer = parse_response(self.buffer)
+            if parsed is None:
+                _LOGGER.debug("Not enough data to decode message")
+                break
+
             if "CSeq" in parsed.headers:
                 cseq = int(parsed.headers["CSeq"])
                 if cseq in self.requests:
@@ -176,6 +202,18 @@ class RtspSession(asyncio.Protocol):
         """Handle that connection was lost."""
         _LOGGER.debug("RTSP Connection closed")
 
+    async def auth_setup(self) -> RtspResponse:
+        """Send auth-setup message."""
+        # Payload to say that we want to proceed unencrypted
+        body = AUTH_SETUP_UNENCRYPTED + CURVE25519_PUB_KEY
+
+        return await self.send_and_receive(
+            "POST",
+            uri="/auth-setup",
+            content_type="application/octet-stream",
+            body=body,
+        )
+
     async def announce(self) -> RtspResponse:
         """Send ANNOUNCE message."""
         body = ANNOUNCE_PAYLOAD.format(
@@ -249,6 +287,7 @@ class RtspSession(asyncio.Protocol):
     async def send_and_receive(
         self,
         method: str,
+        uri: Optional[str] = None,
         content_type: Optional[str] = None,
         headers: Mapping[str, object] = None,
         body: Union[str, bytes] = None,
@@ -260,7 +299,7 @@ class RtspSession(asyncio.Protocol):
         if isinstance(body, str):
             body = body.encode("utf-8")
 
-        msg = f"{method} {self.uri} RTSP/1.0"
+        msg = f"{method} {uri or self.uri} RTSP/1.0"
         msg += f"\r\nCSeq: {cseq}"
         msg += f"\r\nUser-Agent: {USER_AGENT}"
         msg += f"\r\nDACP-ID: {self.context.dacp_id}"

