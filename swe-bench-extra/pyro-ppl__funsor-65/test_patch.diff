diff --git a/test/test_delta.py b/test/test_delta.py
new file mode 100644
index 0000000..abe4f9c
--- /dev/null
+++ b/test/test_delta.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import, division, print_function
+
+import pytest
+import torch
+
+import funsor.ops as ops
+from funsor.delta import Delta
+from funsor.domains import reals
+from funsor.terms import Number, Variable
+from funsor.testing import check_funsor
+from funsor.torch import Tensor
+
+
+def test_eager_subs_variable():
+    v = Variable('v', reals(3))
+    point = Tensor(torch.randn(3))
+    d = Delta('foo', v)
+    assert d(v=point) is Delta('foo', point)
+
+
+@pytest.mark.parametrize('log_density', [0, 1.234])
+def test_eager_subs_ground(log_density):
+    point1 = Tensor(torch.randn(3))
+    point2 = Tensor(torch.randn(3))
+    d = Delta('foo', point1, log_density)
+    check_funsor(d(foo=point1), {}, reals(), torch.tensor(float(log_density)))
+    check_funsor(d(foo=point2), {}, reals(), torch.tensor(float('-inf')))
+
+
+def test_add_delta_funsor():
+    x = Variable('x', reals(3))
+    y = Variable('y', reals(3))
+    d = Delta('x', y)
+
+    expr = -(1 + x ** 2).log()
+    assert d + expr is d + expr(x=y)
+    assert expr + d is expr(x=y) + d
+
+
+def test_reduce():
+    point = Tensor(torch.randn(3))
+    d = Delta('foo', point)
+    assert d.reduce(ops.logaddexp, frozenset(['foo'])) is Number(0)
+
+
+@pytest.mark.parametrize('log_density', [0, 1.234])
+def test_reduce(log_density):
+    point = Tensor(torch.randn(3))
+    d = Delta('foo', point, log_density)
+    # Note that log_density affects ground substitution but does not affect reduction.
+    assert d.reduce(ops.logaddexp, frozenset(['foo'])) is Number(0)
diff --git a/test/test_distributions.py b/test/test_distributions.py
index df86083..542940b 100644
--- a/test/test_distributions.py
+++ b/test/test_distributions.py
@@ -8,6 +8,7 @@ import torch
 
 import funsor
 import funsor.distributions as dist
+from funsor.delta import Delta
 from funsor.domains import bint, reals
 from funsor.gaussian import Gaussian
 from funsor.terms import Variable
@@ -80,6 +81,14 @@ def test_delta_density(batch_shape, event_shape):
         assert_close(actual, expected)
 
 
+def test_delta_delta():
+    v = Variable('v', reals(2))
+    point = Tensor(torch.randn(2))
+    log_density = Tensor(torch.tensor(0.5))
+    d = dist.Delta(point, log_density, v)
+    assert d is Delta('v', point, log_density)
+
+
 def test_mvn_defaults():
     loc = Variable('loc', reals())
     scale = Variable('scale', reals())
