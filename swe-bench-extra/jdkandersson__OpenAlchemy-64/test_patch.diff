diff --git a/tests/open_alchemy/column_factory/test_column.py b/tests/open_alchemy/column_factory/test_column.py
index d2a11fe6..3e78874a 100644
--- a/tests/open_alchemy/column_factory/test_column.py
+++ b/tests/open_alchemy/column_factory/test_column.py
@@ -522,8 +522,10 @@ def test_handle_string_invalid_format():
         ("date", sqlalchemy.Date),
         ("date-time", sqlalchemy.DateTime),
         ("byte", sqlalchemy.String),
+        ("password", sqlalchemy.String),
+        ("binary", sqlalchemy.LargeBinary),
     ],
-    ids=["None", "date", "date-time", "byte"],
+    ids=["None", "date", "date-time", "byte", "password", "binary"],
 )
 @pytest.mark.column
 def test_handle_string(format_, expected_type):
@@ -539,19 +541,24 @@ def test_handle_string(format_, expected_type):
     assert string == expected_type
 
 
+@pytest.mark.parametrize(
+    "format_, expected_type",
+    [(None, sqlalchemy.String), ("binary", sqlalchemy.LargeBinary)],
+    ids=["string", "binary"],
+)
 @pytest.mark.column
-def test_handle_string_max_length():
+def test_handle_string_max_length(format_, expected_type):
     """
-    GIVEN artifacts with max_length
+    GIVEN artifacts with max_length and given format
     WHEN _handle_string is called with the artifacts
-    THEN a string with a maximum length is returned.
+    THEN a given expected type column with a maximum length is returned.
     """
     length = 1
-    artifacts = types.ColumnArtifacts("string", max_length=length)
+    artifacts = types.ColumnArtifacts("string", max_length=length, format=format_)
 
     string = column._handle_string(artifacts=artifacts)
 
-    assert isinstance(string, sqlalchemy.String)
+    assert isinstance(string, expected_type)
     assert string.length == length
 
 
diff --git a/tests/open_alchemy/test_integration/test_database.py b/tests/open_alchemy/test_integration/test_database.py
index 5fe2482c..3e7f57f4 100644
--- a/tests/open_alchemy/test_integration/test_database.py
+++ b/tests/open_alchemy/test_integration/test_database.py
@@ -17,6 +17,9 @@ import open_alchemy
         ("integer", "int64", 1),
         ("number", None, 1.0),
         ("string", None, "some string"),
+        ("string", "password", "some password"),
+        ("string", "byte", "some string"),
+        ("string", "binary", b"some bytes"),
         ("string", "date", datetime.date(year=2000, month=1, day=1)),
         (
             "string",
@@ -25,7 +28,18 @@ import open_alchemy
         ),
         ("boolean", None, True),
     ],
-    ids=["integer", "int64", "number", "string", "date", "date-time", "boolean"],
+    ids=[
+        "integer",
+        "int64",
+        "number",
+        "string",
+        "password",
+        "byte",
+        "binary",
+        "date",
+        "date-time",
+        "boolean",
+    ],
 )
 @pytest.mark.integration
 def test_database_types(
diff --git a/tests/open_alchemy/test_integration/test_to_from_dict.py b/tests/open_alchemy/test_integration/test_to_from_dict.py
index 168e6b19..f1dc7ea3 100644
--- a/tests/open_alchemy/test_integration/test_to_from_dict.py
+++ b/tests/open_alchemy/test_integration/test_to_from_dict.py
@@ -10,13 +10,17 @@ import open_alchemy
     "column_schema, value",
     [
         ({"type": "integer", "x-primary-key": True}, 1),
+        (
+            {"type": "string", "format": "binary", "x-primary-key": True},
+            "some binary files",
+        ),
         ({"type": "string", "format": "date", "x-primary-key": True}, "2000-01-01"),
         (
             {"type": "string", "format": "date-time", "x-primary-key": True},
             "2000-01-01T01:01:01",
         ),
     ],
-    ids=["integer", "date", "date-time"],
+    ids=["integer", "binary", "date", "date-time"],
 )
 @pytest.mark.integration
 def test_basic_types(engine, sessionmaker, column_schema, value):
diff --git a/tests/open_alchemy/utility_base/test_from_dict.py b/tests/open_alchemy/utility_base/test_from_dict.py
index 049dba3f..9de3549c 100644
--- a/tests/open_alchemy/utility_base/test_from_dict.py
+++ b/tests/open_alchemy/utility_base/test_from_dict.py
@@ -150,6 +150,7 @@ def test_from_dict(schema, dictionary, __init__):
 @pytest.mark.parametrize(
     "format_, value, expected_value",
     [
+        ("binary", "some binary file", b"some binary file"),
         ("date", "2000-01-01", datetime.date(year=2000, month=1, day=1)),
         (
             "date-time",
@@ -157,7 +158,7 @@ def test_from_dict(schema, dictionary, __init__):
             datetime.datetime(year=2000, month=1, day=1, hour=1, minute=1, second=1),
         ),
     ],
-    ids=["date", "date-time"],
+    ids=["binary", "date", "date-time"],
 )
 @pytest.mark.utility_base
 def test_from_dict_string_format(format_, value, expected_value, __init__):
diff --git a/tests/open_alchemy/utility_base/test_to_dict.py b/tests/open_alchemy/utility_base/test_to_dict.py
index a441bb53..89c39c82 100644
--- a/tests/open_alchemy/utility_base/test_to_dict.py
+++ b/tests/open_alchemy/utility_base/test_to_dict.py
@@ -439,6 +439,7 @@ class TestToDictProperty:
     @pytest.mark.parametrize(
         "format_, value, expected_value",
         [
+            ("binary", b"some binary file", "some binary file"),
             ("date", datetime.date(year=2000, month=1, day=1), "2000-01-01"),
             (
                 "date-time",
@@ -448,7 +449,7 @@ class TestToDictProperty:
                 "2000-01-01T01:01:01",
             ),
         ],
-        ids=["date", "date-time"],
+        ids=["binary", "date", "date-time"],
     )
     @pytest.mark.utility_base
     def test_string_format(format_, value, expected_value):
