diff --git a/ariadne/asgi/graphql.py b/ariadne/asgi/graphql.py
index 272fd6d..3ad62ce 100644
--- a/ariadne/asgi/graphql.py
+++ b/ariadne/asgi/graphql.py
@@ -1,7 +1,7 @@
 from logging import Logger, LoggerAdapter
-from typing import Optional, Union
+from typing import Optional, Type, Union
 
-from graphql import GraphQLSchema
+from graphql import ExecutionContext, GraphQLSchema
 from starlette.types import Receive, Scope, Send
 
 from ..explorer import Explorer, ExplorerGraphiQL
@@ -34,6 +34,7 @@ class GraphQL:
         explorer: Optional[Explorer] = None,
         logger: Union[None, str, Logger, LoggerAdapter] = None,
         error_formatter: ErrorFormatter = format_error,
+        execution_context_class: Optional[Type[ExecutionContext]] = None,
         http_handler: Optional[GraphQLHTTPHandler] = None,
         websocket_handler: Optional[GraphQLWebsocketHandler] = None,
     ) -> None:
@@ -61,6 +62,7 @@ class GraphQL:
             explorer,
             logger,
             error_formatter,
+            execution_context_class,
         )
         self.websocket_handler.configure(
             schema,
@@ -73,6 +75,7 @@ class GraphQL:
             explorer,
             logger,
             error_formatter,
+            execution_context_class,
             http_handler=self.http_handler,
         )
 
diff --git a/ariadne/asgi/handlers/base.py b/ariadne/asgi/handlers/base.py
index 2ec6df3..48fa219 100644
--- a/ariadne/asgi/handlers/base.py
+++ b/ariadne/asgi/handlers/base.py
@@ -1,9 +1,9 @@
 from abc import ABC, abstractmethod
 from inspect import isawaitable
 from logging import Logger, LoggerAdapter
-from typing import Any, Optional, Union
+from typing import Any, Optional, Type, Union
 
-from graphql import DocumentNode, GraphQLSchema
+from graphql import DocumentNode, ExecutionContext, GraphQLSchema
 from starlette.types import Receive, Scope, Send
 
 from ...explorer import Explorer
@@ -34,6 +34,7 @@ class GraphQLHandler(ABC):
         self.root_value: Optional[RootValue] = None
         self.query_parser: Optional[QueryParser] = None
         self.validation_rules: Optional[ValidationRules] = None
+        self.execution_context_class: Optional[Type[ExecutionContext]] = None
 
     @abstractmethod
     async def handle(self, scope: Scope, receive: Receive, send: Send):
@@ -51,10 +52,12 @@ class GraphQLHandler(ABC):
         explorer: Optional[Explorer] = None,
         logger: Union[None, str, Logger, LoggerAdapter] = None,
         error_formatter: ErrorFormatter = format_error,
+        execution_context_class: Optional[Type[ExecutionContext]] = None,
     ):
         self.context_value = context_value
         self.debug = debug
         self.error_formatter = error_formatter
+        self.execution_context_class = execution_context_class
         self.introspection = introspection
         self.explorer = explorer
         self.logger = logger
diff --git a/ariadne/asgi/handlers/http.py b/ariadne/asgi/handlers/http.py
index 3f80118..91e1ad6 100644
--- a/ariadne/asgi/handlers/http.py
+++ b/ariadne/asgi/handlers/http.py
@@ -112,6 +112,7 @@ class GraphQLHTTPHandler(GraphQLHttpHandlerBase):
             error_formatter=self.error_formatter,
             extensions=extensions,
             middleware=middleware,
+            execution_context_class=self.execution_context_class,
         )
 
     async def graphql_http_server(self, request: Request) -> Response:
diff --git a/ariadne/wsgi.py b/ariadne/wsgi.py
index 79fd84e..54ebbb5 100644
--- a/ariadne/wsgi.py
+++ b/ariadne/wsgi.py
@@ -1,8 +1,8 @@
 import json
 from inspect import isawaitable
-from typing import Any, Callable, Dict, List, Optional, Union, cast
+from typing import Any, Callable, Dict, List, Optional, Type, Union, cast
 
-from graphql import GraphQLError, GraphQLSchema
+from graphql import ExecutionContext, GraphQLError, GraphQLSchema
 from graphql.execution import Middleware, MiddlewareManager
 
 from .constants import (
@@ -65,6 +65,7 @@ class GraphQL:
         error_formatter: ErrorFormatter = format_error,
         extensions: Optional[Extensions] = None,
         middleware: Optional[Middlewares] = None,
+        execution_context_class: Optional[Type[ExecutionContext]] = None,
     ) -> None:
         self.context_value = context_value
         self.root_value = root_value
@@ -76,6 +77,7 @@ class GraphQL:
         self.error_formatter = error_formatter
         self.extensions = extensions
         self.middleware = middleware
+        self.execution_context_class = execution_context_class
         self.schema = schema
 
         if explorer:
@@ -214,6 +216,7 @@ class GraphQL:
             error_formatter=self.error_formatter,
             extensions=extensions,
             middleware=middleware,
+            execution_context_class=self.execution_context_class,
         )
 
     def get_context_for_request(self, environ: dict) -> Optional[ContextValue]:

