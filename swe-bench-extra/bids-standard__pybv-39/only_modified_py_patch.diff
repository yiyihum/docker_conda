diff --git a/pybv/io.py b/pybv/io.py
index 23f7815..3dc1366 100644
--- a/pybv/io.py
+++ b/pybv/io.py
@@ -18,7 +18,7 @@ import numpy as np
 
 from pybv import __version__
 
-# ascii as future formats
+# ASCII as future formats
 supported_formats = {
     'binary_float32' : ('IEEE_FLOAT_32', np.float32),  # noqa: E203
     'binary_int16'   : ('INT_16', np.int16),  # noqa: E203
@@ -28,15 +28,15 @@ supported_orients = {'multiplexed'}
 
 
 def write_brainvision(data, sfreq, ch_names, fname_base, folder_out,
-                      events=None, resolution=1e-7, scale_data=True,
+                      events=None, resolution=1e-7, unit='µV', scale_data=True,
                       fmt='binary_float32', meas_date=None):
     """Write raw data to BrainVision format.
 
     Parameters
     ----------
     data : ndarray, shape (n_channels, n_times)
-        The raw data to export. Data is assumed to be in
-        **volts**. The data will be stored in **microvolts**.
+        The raw data to export. Data is assumed to be in **volts** and will be
+        stored as specified by `unit`.
     sfreq : int | float
         The sampling frequency of the data
     ch_names : list of strings, shape (n_channels,)
@@ -54,12 +54,13 @@ def write_brainvision(data, sfreq, ch_names, fname_base, folder_out,
         third column specifies the length of each event (default 1 sample).
     resolution : float | ndarray
         The resolution **in volts** in which you'd like the data to be stored.
-        By default, this will be 1e-7, or .1 microvolts. Since data is stored
-        in microvolts, the data will be multiplied by the inverse of this
-        factor, and all decimals will be cut off after this. So, this number
-        controls the amount of round-trip resolution you want.
-        This can be either a single float for all channels or an array with
-        nchan elements.
+        By default, this will be 1e-7, or 0.1 µV. This number controls the
+        amount of round-trip resolution. This can be either a single float for
+        all channels or an array with n_channels elements.
+    unit : str | None
+        The unit of the exported data. This can be one of 'V', 'mV', 'µV' (or
+        equivalently 'uV') , 'nV' or None. If None, a suitable unit based on
+        the selected resolution is chosen automatically.
     scale_data : bool
         Boolean indicating if the data is in volts and should be scaled to
         `resolution` (True), or if the data is already in the previously
@@ -135,7 +136,7 @@ def write_brainvision(data, sfreq, ch_names, fname_base, folder_out,
     _write_vmrk_file(vmrk_fname, eeg_fname, events, meas_date)
     _write_vhdr_file(vhdr_fname, vmrk_fname, eeg_fname, data, sfreq,
                      ch_names, orientation='multiplexed', format=fmt,
-                     resolution=resolution)
+                     resolution=resolution, unit=unit)
     _write_bveeg_file(eeg_fname, data, orientation='multiplexed', format=fmt,
                       resolution=resolution, scale_data=scale_data)
 
@@ -165,11 +166,11 @@ def _write_vmrk_file(vmrk_fname, eeg_fname, events, meas_date):
     """Write BrainvVision marker file."""
     with codecs.open(vmrk_fname, 'w', encoding='utf-8') as fout:
         print(r'Brain Vision Data Exchange Marker File, Version 1.0', file=fout)  # noqa: E501
-        print(r';Exported using pybv {}'.format(__version__), file=fout)  # noqa: E501
+        print(r';Exported using pybv {}'.format(__version__), file=fout)
         print(r'', file=fout)
         print(r'[Common Infos]', file=fout)
         print(r'Codepage=UTF-8', file=fout)
-        print(r'DataFile={}'.format(eeg_fname.split(os.sep)[-1]), file=fout)  # noqa: E501
+        print(r'DataFile={}'.format(eeg_fname.split(os.sep)[-1]), file=fout)
         print(r'', file=fout)
         print(r'[Marker Infos]', file=fout)
         print(r'; Each entry: Mk<Marker number>=<Type>,<Description>,<Position in data points>,', file=fout)  # noqa: E501
@@ -204,20 +205,29 @@ def _write_vmrk_file(vmrk_fname, eeg_fname, events, meas_date):
                   file=fout)
 
 
-def _optimize_channel_unit(resolution):
+def _optimize_channel_unit(resolution, unit):
     """Calculate an optimal channel scaling factor and unit."""
     exp = np.log10(resolution)
-    if exp <= -7:
-        return resolution / 1e-9, 'nV'
-    elif exp <= -2:
-        return resolution / 1e-6, 'µV'
-    else:
+    if unit is None:
+        if exp <= -7:
+            return resolution / 1e-9, 'nV'
+        elif exp <= -2:
+            return resolution / 1e-6, 'µV'
+        else:
+            return resolution, 'V'
+    elif unit == 'V':
         return resolution, 'V'
+    elif unit == 'mV':
+        return resolution / 1e-3, 'mV'
+    elif unit in ('µV', 'uV'):
+        return resolution / 1e-6, 'µV'
+    elif unit == 'nV':
+        return resolution / 1e-9, 'nV'
 
 
 def _write_vhdr_file(vhdr_fname, vmrk_fname, eeg_fname, data, sfreq, ch_names,
                      orientation='multiplexed', format='binary_float32',
-                     resolution=1e-7):
+                     resolution=1e-7, unit='µV'):
     """Write BrainvVision header file."""
     fmt = format.lower()
     bvfmt, _ = _chk_fmt(format)
@@ -225,13 +235,13 @@ def _write_vhdr_file(vhdr_fname, vmrk_fname, eeg_fname, data, sfreq, ch_names,
     multiplexed = _chk_multiplexed(orientation)
 
     with codecs.open(vhdr_fname, 'w', encoding='utf-8') as fout:
-        print(r'Brain Vision Data Exchange Header File Version 1.0', file=fout)  # noqa: E501
-        print(r';Written using pybv {}'.format(__version__), file=fout)  # noqa: E501
+        print(r'Brain Vision Data Exchange Header File Version 1.0', file=fout)
+        print(r';Written using pybv {}'.format(__version__), file=fout)
         print(r'', file=fout)
         print(r'[Common Infos]', file=fout)
         print(r'Codepage=UTF-8', file=fout)
-        print(r'DataFile={}'.format(op.basename(eeg_fname)), file=fout)  # noqa: E501
-        print(r'MarkerFile={}'.format(op.basename(vmrk_fname)), file=fout)  # noqa: E501
+        print(r'DataFile={}'.format(op.basename(eeg_fname)), file=fout)
+        print(r'MarkerFile={}'.format(op.basename(vmrk_fname)), file=fout)
 
         if fmt.startswith('binary'):
             print(r'DataFormat=BINARY', file=fout)
@@ -240,14 +250,14 @@ def _write_vhdr_file(vhdr_fname, vmrk_fname, eeg_fname, data, sfreq, ch_names,
             print(r'; DataOrientation: MULTIPLEXED=ch1,pt1, ch2,pt1 ...', file=fout)  # noqa: E501
             print(r'DataOrientation=MULTIPLEXED', file=fout)
 
-        print(r'NumberOfChannels={}'.format(len(data)), file=fout)  # noqa: E501
+        print(r'NumberOfChannels={}'.format(len(data)), file=fout)
         print(r'; Sampling interval in microseconds', file=fout)
-        print(r'SamplingInterval={}'.format(int(1e6 / sfreq)), file=fout)  # noqa: E501
+        print(r'SamplingInterval={}'.format(int(1e6 / sfreq)), file=fout)
         print(r'', file=fout)
 
         if fmt.startswith('binary'):
             print(r'[Binary Infos]', file=fout)
-            print(r'BinaryFormat={}'.format(bvfmt), file=fout)  # noqa: E501
+            print(r'BinaryFormat={}'.format(bvfmt), file=fout)
             print(r'', file=fout)
 
         print(r'[Channel Infos]', file=fout)
@@ -259,11 +269,14 @@ def _write_vhdr_file(vhdr_fname, vmrk_fname, eeg_fname, data, sfreq, ch_names,
         nchan = len(ch_names)
         # broadcast to nchan elements if necessary
         resolutions = resolution * np.ones((nchan,))
+        units = [unit] * nchan
 
         for i in range(nchan):
-            resolution, unit = _optimize_channel_unit(resolutions[i])
-            print(r'Ch{}={},,{:0.3f},{}'
-                  .format(i + 1, ch_names[i], resolution, unit), file=fout)
+            resolution, unit = _optimize_channel_unit(resolutions[i], units[i])
+            s = r'Ch{}={},,{:0.{precision}f},{}'
+            print(s.format(i + 1, ch_names[i], resolution, unit,
+                           precision=max(0, int(np.log10(1 / resolution)))),
+                  file=fout)
         print(r'', file=fout)
         print(r'[Comment]', file=fout)
         print(r'', file=fout)

