diff --git a/docs/index.rst b/docs/index.rst
index eff5e2b..12c0e27 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -358,6 +358,15 @@ Release Notes
     backward incompatible changes will be released along with bumping major
     version component.
 
+4.1.0
+`````
+
+(unreleased)
+
+* Fix a bug when a coroutine function wrapped with ``@picobox.pass_()``
+  lost its coroutine function marker, i.e. ``inspect.iscoroutinefunction()``
+  returned ``False``.
+
 4.0.0
 `````
 
diff --git a/pyproject.toml b/pyproject.toml
index d3c2d2d..1fdcd19 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -35,7 +35,7 @@ Bugs = "https://github.com/ikalnytskyi/picobox/issues"
 source = "vcs"
 
 [tool.hatch.envs.test]
-dependencies = ["pytest", "flask"]
+dependencies = ["pytest", "pytest-asyncio", "flask"]
 scripts.run = "python -m pytest --strict-markers {args:-vv}"
 
 [tool.hatch.envs.lint]
diff --git a/src/picobox/_box.py b/src/picobox/_box.py
index 3c5aaca..77bed5a 100644
--- a/src/picobox/_box.py
+++ b/src/picobox/_box.py
@@ -187,7 +187,7 @@ class Box:
                 return fn
 
             @functools.wraps(fn)
-            def wrapper(*args, **kwargs):
+            def fn_with_dependencies(*args, **kwargs):
                 signature = inspect.signature(fn)
                 arguments = signature.bind_partial(*args, **kwargs)
 
@@ -203,6 +203,14 @@ class Box:
                         kwargs[as_] = self.get(key)
                 return fn(*args, **kwargs)
 
+            if inspect.iscoroutinefunction(fn):
+
+                @functools.wraps(fn)
+                async def wrapper(*args, **kwargs):
+                    return await fn_with_dependencies(*args, **kwargs)
+            else:
+                wrapper = fn_with_dependencies
+
             wrapper.__dependencies__ = [(key, as_)]
             return wrapper
 
