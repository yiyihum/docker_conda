diff --git a/dvc/command/machine.py b/dvc/command/machine.py
--- a/dvc/command/machine.py
+++ b/dvc/command/machine.py
@@ -143,6 +143,22 @@ def run(self):
         return 0
 
 
+class CmdMachineStatus(CmdBase):
+    SHOWN_FIELD = ["name", "cloud", "instance_hdd_size", "instance_ip"]
+
+    def run(self):
+        if self.repo.machine is None:
+            raise MachineDisabledError
+
+        all_status = self.repo.machine.status(self.args.name)
+        for i, status in enumerate(all_status, start=1):
+            ui.write(f"instance_num_{i}:")
+            for field in self.SHOWN_FIELD:
+                value = status.get(field, None)
+                ui.write(f"\t{field:20}: {value}")
+        return 0
+
+
 class CmdMachineDestroy(CmdBase):
     def run(self):
         if self.repo.machine is None:
@@ -306,6 +322,19 @@ def add_parser(subparsers, parent_parser):
     )
     machine_create_parser.set_defaults(func=CmdMachineCreate)
 
+    machine_STATUS_HELP = "List the status of a running machine."
+    machine_status_parser = machine_subparsers.add_parser(
+        "status",
+        parents=[parent_config_parser, parent_parser],
+        description=append_doc_link(machine_STATUS_HELP, "machine/status"),
+        help=machine_STATUS_HELP,
+        formatter_class=argparse.RawDescriptionHelpFormatter,
+    )
+    machine_status_parser.add_argument(
+        "name", help="Name of the running machine."
+    )
+    machine_status_parser.set_defaults(func=CmdMachineStatus)
+
     machine_DESTROY_HELP = "Destroy an machine instance."
     machine_destroy_parser = machine_subparsers.add_parser(
         "destroy",
diff --git a/dvc/machine/__init__.py b/dvc/machine/__init__.py
--- a/dvc/machine/__init__.py
+++ b/dvc/machine/__init__.py
@@ -2,8 +2,10 @@
 import os
 from typing import (
     TYPE_CHECKING,
+    Any,
     Dict,
     Iterable,
+    Iterator,
     Mapping,
     Optional,
     Tuple,
@@ -200,3 +202,7 @@ def get_sshfs(self, name: Optional[str]):
     def run_shell(self, name: Optional[str]):
         config, backend = self.get_config_and_backend(name)
         return backend.run_shell(**config)
+
+    def status(self, name: str) -> Iterator[Dict[Any, Any]]:
+        config, backend = self.get_config_and_backend(name)
+        return backend.instances(**config)

