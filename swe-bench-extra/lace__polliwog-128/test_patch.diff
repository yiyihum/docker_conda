diff --git a/polliwog/transform/test_affine_transform.py b/polliwog/transform/test_affine_transform.py
index f97d6ea..730089e 100644
--- a/polliwog/transform/test_affine_transform.py
+++ b/polliwog/transform/test_affine_transform.py
@@ -1,28 +1,105 @@
 import numpy as np
-from .affine_transform import apply_affine_transform
-
-scale_factor = np.array([3.0, 0.5, 2.0])
-transform = np.array(
-    [
-        [scale_factor[0], 0, 0, 0],
-        [0, scale_factor[1], 0, 0],
-        [0, 0, scale_factor[2], 0],
-        [0, 0, 0, 1],
-    ]
+import pytest
+from .affine_transform import (
+    apply_affine_transform,
+    transform_matrix_for_rotation,
+    transform_matrix_for_scale,
+    transform_matrix_for_translation,
 )
 
 
-def test_apply_homogeneous():
-    point = np.array([5.0, 0.0, 1.0])
-    expected_point = np.array([15.0, 0.0, 2.0])
-    np.testing.assert_array_equal(
-        apply_affine_transform(point, transform), expected_point
+def create_cube_verts(origin, size):
+    # Create a cube. Since CompositeTransform just works on verticies,
+    # we don't need a full lace.mesh object.
+    origin = np.array(origin)
+    size = np.repeat(size, 3)
+    lower_base_plane = np.array(
+        [
+            # Lower base plane
+            origin,
+            origin + np.array([size[0], 0, 0]),
+            origin + np.array([size[0], 0, size[2]]),
+            origin + np.array([0, 0, size[2]]),
+        ]
     )
+    upper_base_plane = lower_base_plane + np.array([0, size[1], 0])
+    return np.vstack([lower_base_plane, upper_base_plane])
+
+
+def create_default_cube_verts():
+    return create_cube_verts([1.0, 0.0, 0.0], 4.0)
 
 
-def test_apply_homogeneous_stacked():
+def test_apply_affine_transform():
+    scale_factor = np.array([3.0, 0.5, 2.0])
+    transform = np.array(
+        [
+            [scale_factor[0], 0, 0, 0],
+            [0, scale_factor[1], 0, 0],
+            [0, 0, scale_factor[2], 0],
+            [0, 0, 0, 1],
+        ]
+    )
+
     points = np.array([[1.0, 2.0, 3.0], [5.0, 0.0, 1.0]])
     expected_points = np.array([[3.0, 1.0, 6.0], [15.0, 0.0, 2.0]])
     np.testing.assert_array_equal(
         apply_affine_transform(points, transform), expected_points
     )
+    np.testing.assert_array_equal(
+        apply_affine_transform(points[1], transform), expected_points[1]
+    )
+
+
+def test_rotate():
+    cube_v = create_default_cube_verts()
+    ways_to_rotate_around_y_a_quarter_turn = [
+        np.array([[0, 0, 1], [0, 1, 0], [-1, 0, 0]]),
+        np.array([0, np.pi / 2, 0]),
+    ]
+    for rot in ways_to_rotate_around_y_a_quarter_turn:
+        # Confidence check.
+        np.testing.assert_array_equal(cube_v[0], [1.0, 0.0, 0.0])
+        np.testing.assert_array_equal(cube_v[6], [5.0, 4.0, 4.0])
+
+        transformed_cube_v = apply_affine_transform(
+            cube_v, transform_matrix_for_rotation(rot)
+        )
+
+        np.testing.assert_array_almost_equal(transformed_cube_v[0], [0.0, 0.0, -1.0])
+        np.testing.assert_array_almost_equal(transformed_cube_v[6], [4, 4.0, -5.0])
+
+
+def test_translate():
+    cube_v = create_default_cube_verts()
+
+    # Confidence check.
+    np.testing.assert_array_equal(cube_v[0], [1.0, 0.0, 0.0])
+    np.testing.assert_array_equal(cube_v[6], [5.0, 4.0, 4.0])
+
+    transformed_cube_v = apply_affine_transform(
+        cube_v, transform_matrix_for_translation(np.array([8.0, 6.0, 7.0]))
+    )
+
+    np.testing.assert_array_equal(transformed_cube_v[0], [9.0, 6.0, 7.0])
+    np.testing.assert_array_equal(transformed_cube_v[6], [13.0, 10.0, 11.0])
+
+
+def test_scale():
+    cube_v = create_default_cube_verts()
+
+    # Confidence check.
+    np.testing.assert_array_equal(cube_v[0], [1.0, 0.0, 0.0])
+    np.testing.assert_array_equal(cube_v[6], [5.0, 4.0, 4.0])
+
+    transformed_cube_v = apply_affine_transform(
+        cube_v, transform_matrix_for_scale(10.0)
+    )
+
+    np.testing.assert_array_equal(transformed_cube_v[0], [10.0, 0.0, 0.0])
+    np.testing.assert_array_equal(transformed_cube_v[6], [50.0, 40.0, 40.0])
+
+
+def test_scale_error():
+    with pytest.raises(ValueError, match="Scale factor should be greater than zero"):
+        transform_matrix_for_scale(-1)
diff --git a/polliwog/transform/test_composite.py b/polliwog/transform/test_composite.py
index 53569b5..a6fe883 100644
--- a/polliwog/transform/test_composite.py
+++ b/polliwog/transform/test_composite.py
@@ -1,67 +1,7 @@
 import numpy as np
-import pytest
 import vg
 from .composite import CompositeTransform
-
-
-def create_cube_verts(origin, size):
-    # Create a cube. Since CompositeTransform just works on verticies,
-    # we don't need a full lace.mesh object.
-    origin = np.asarray(origin)
-    size = np.repeat(size, 3)
-    lower_base_plane = np.array(
-        [
-            # Lower base plane
-            origin,
-            origin + np.array([size[0], 0, 0]),
-            origin + np.array([size[0], 0, size[2]]),
-            origin + np.array([0, 0, size[2]]),
-        ]
-    )
-    upper_base_plane = lower_base_plane + np.array([0, size[1], 0])
-    return np.vstack([lower_base_plane, upper_base_plane])
-
-
-def create_default_cube_verts():
-    return create_cube_verts([1.0, 0.0, 0.0], 4.0)
-
-
-def test_translate():
-    transform = CompositeTransform()
-    transform.translate(np.array([8.0, 6.0, 7.0]))
-
-    cube_v = create_default_cube_verts()
-
-    # Confidence check.
-    np.testing.assert_array_equal(cube_v[0], [1.0, 0.0, 0.0])
-    np.testing.assert_array_equal(cube_v[6], [5.0, 4.0, 4.0])
-
-    transformed_cube_v = transform(cube_v)
-
-    np.testing.assert_array_equal(transformed_cube_v[0], [9.0, 6.0, 7.0])
-    np.testing.assert_array_equal(transformed_cube_v[6], [13.0, 10.0, 11.0])
-
-
-def test_scale():
-    transform = CompositeTransform()
-    transform.scale(10.0)
-
-    cube_v = create_default_cube_verts()
-
-    # Confidence check.
-    np.testing.assert_array_equal(cube_v[0], [1.0, 0.0, 0.0])
-    np.testing.assert_array_equal(cube_v[6], [5.0, 4.0, 4.0])
-
-    transformed_cube_v = transform(cube_v)
-
-    np.testing.assert_array_equal(transformed_cube_v[0], [10.0, 0.0, 0.0])
-    np.testing.assert_array_equal(transformed_cube_v[6], [50.0, 40.0, 40.0])
-
-
-def test_scale_error():
-    transform = CompositeTransform()
-    with pytest.raises(ValueError):
-        transform.scale(-1)
+from .test_affine_transform import create_default_cube_verts
 
 
 def test_convert_units():
@@ -150,26 +90,6 @@ def test_reorient():
     np.testing.assert_array_equal(transformed_cube_v[6], [4, 4.0, -5.0])
 
 
-def test_rotate():
-    ways_to_rotate_around_y_a_quarter_turn = [
-        np.array([[0, 0, 1], [0, 1, 0], [-1, 0, 0]]),
-        np.array([0, np.pi / 2, 0]),
-    ]
-    for rot in ways_to_rotate_around_y_a_quarter_turn:
-        transform = CompositeTransform()
-        transform.rotate(rot)
-        cube_v = create_default_cube_verts()
-
-        # Confidence check.
-        np.testing.assert_array_equal(cube_v[0], [1.0, 0.0, 0.0])
-        np.testing.assert_array_equal(cube_v[6], [5.0, 4.0, 4.0])
-
-        transformed_cube_v = transform(cube_v)
-
-        np.testing.assert_array_almost_equal(transformed_cube_v[0], [0.0, 0.0, -1.0])
-        np.testing.assert_array_almost_equal(transformed_cube_v[6], [4, 4.0, -5.0])
-
-
 def test_reverse_transforms():
     transforms = [CompositeTransform() for _ in range(5)]
 
diff --git a/polliwog/transform/test_coordinate_manager.py b/polliwog/transform/test_coordinate_manager.py
index 3cecb81..414f2f0 100644
--- a/polliwog/transform/test_coordinate_manager.py
+++ b/polliwog/transform/test_coordinate_manager.py
@@ -2,7 +2,7 @@ import numpy as np
 import pytest
 import vg
 from .coordinate_manager import CoordinateManager
-from .test_composite import create_cube_verts
+from .test_affine_transform import create_cube_verts
 
 
 def perform_transform_test(apply_transform_fn, expected_v0, expected_v6):
@@ -132,19 +132,10 @@ def test_coordinate_manager_invalid_tag():
 
 
 def test_coordinate_manager_custom_transform():
-    scale4 = np.array([[3, 0, 0, 0], [0, 3, 0, 0], [0, 0, 3, 0], [0, 0, 0, 1]])
+    scale = np.array([[3, 0, 0, 0], [0, 3, 0, 0], [0, 0, 3, 0], [0, 0, 0, 1]])
     perform_transform_test(
-        apply_transform_fn=lambda coordinate_manager: coordinate_manager.append_transform4(
-            scale4
-        ),
-        expected_v0=np.array([3.0, 0.0, 0.0]),
-        expected_v6=np.array([15.0, 12.0, 12.0]),
-    )
-
-    scale3 = np.array([[3, 0, 0], [0, 3, 0], [0, 0, 3]])
-    perform_transform_test(
-        apply_transform_fn=lambda coordinate_manager: coordinate_manager.append_transform3(
-            scale3
+        apply_transform_fn=lambda coordinate_manager: coordinate_manager.append_transform(
+            scale
         ),
         expected_v0=np.array([3.0, 0.0, 0.0]),
         expected_v6=np.array([15.0, 12.0, 12.0]),
