diff --git a/pyvisa/testsuite/fake-extensions/pyvisa_test_open.py b/pyvisa/testsuite/fake-extensions/pyvisa_test_open.py
new file mode 100644
index 0000000..6d010db
--- /dev/null
+++ b/pyvisa/testsuite/fake-extensions/pyvisa_test_open.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+"""
+
+"""
+from pyvisa import constants
+from pyvisa.highlevel import VisaLibraryBase
+from pyvisa.util import LibraryPath
+
+
+class FakeResource:
+    def close(self):
+        pass
+
+
+class FalseVISALib(VisaLibraryBase):
+    pass
+
+    @staticmethod
+    def get_library_paths():
+        return (LibraryPath("unset"),)
+
+    def _init(self):
+        pass
+
+    def open_resource(self, *args, **kwargs):
+        self.open_resource_called = True
+        return FakeResource()
+
+    def open_default_resource_manager(self):
+        return 1, constants.StatusCode.success
+
+    def close(self, session):
+        pass
+
+
+WRAPPER_CLASS = FalseVISALib
diff --git a/pyvisa/testsuite/test_highlevel.py b/pyvisa/testsuite/test_highlevel.py
index 4eb0d58..43974a3 100644
--- a/pyvisa/testsuite/test_highlevel.py
+++ b/pyvisa/testsuite/test_highlevel.py
@@ -5,10 +5,11 @@
 import logging
 import os
 import sys
+from importlib import import_module
 
 import pytest
 
-from pyvisa import constants, highlevel, resources, rname
+from pyvisa import ResourceManager, constants, highlevel, resources, rname
 from pyvisa.ctwrapper import IVIVisaLibrary
 
 from . import BaseTestCase
@@ -247,3 +248,22 @@ class TestHighlevel(BaseTestCase):
     def test_base_get_debug_info(self):
         """Test the base class implementation of get_debug_info."""
         assert len(highlevel.VisaLibraryBase.get_debug_info()) == 1
+
+    def test_open_resource_attr(self, caplog):
+        """Test handling errors when trying to open a Visa library."""
+        highlevel._WRAPPERS.clear()
+
+        path = os.path.join(os.path.dirname(__file__), "fake-extensions")
+        sys.path.append(path)
+        try:
+            pkg = import_module("pyvisa_test_open")
+            highlevel.get_wrapper_class("test_open")
+            rm = ResourceManager("@test_open")
+            assert rm is not None
+        finally:
+            sys.path.remove(path)
+
+        instr = rm.open_resource("TCPIP::192.168.0.1::INSTR")
+        assert isinstance(instr, pkg.FakeResource)
+        assert rm.visalib.open_resource_called
+        rm.close()
