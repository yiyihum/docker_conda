diff --git a/README.md b/README.md
index 2941653..6431318 100644
--- a/README.md
+++ b/README.md
@@ -317,9 +317,10 @@ Returns `True` if the DFA accepts a finite language, False otherwise.
 dfa.isfinite()
 ```
 
-#### DFA.from_nfa(cls, nfa)
+#### DFA.from_nfa(cls, nfa, retain_names=False)
 
-Creates a DFA that is equivalent to the given NFA.
+Creates a DFA that is equivalent to the given NFA. States are renamed by
+default unless `retain_names` is set to `True`.
 
 ```python
 from automata.fa.dfa import DFA
diff --git a/automata/fa/dfa.py b/automata/fa/dfa.py
index 766bf8b..a6d5b3c 100644
--- a/automata/fa/dfa.py
+++ b/automata/fa/dfa.py
@@ -4,7 +4,7 @@
 import copy
 from collections import deque
 from enum import IntEnum
-from itertools import product
+from itertools import product, count
 
 import networkx as nx
 from pydot import Dot, Edge, Node
@@ -540,44 +540,61 @@ def _stringify_states(states):
         return '{{{}}}'.format(','.join(sorted(str(state) for state in states)))
 
     @classmethod
-    def from_nfa(cls, target_nfa):
+    def from_nfa(cls, target_nfa, retain_names=False):
         """Initialize this DFA as one equivalent to the given NFA."""
         dfa_states = set()
         dfa_symbols = target_nfa.input_symbols
-        dfa_transitions = dict()
+        dfa_transitions = {}
+
+        # Data structures for state renaming
+        new_state_name_dict = dict()
+        state_name_counter = count(0)
+
+        def get_name_renamed(states):
+            nonlocal state_name_counter, new_state_name_dict
+            return new_state_name_dict.setdefault(frozenset(states), next(state_name_counter))
+
+        def get_name_original(states):
+            return frozenset(states)
+
+        get_name = get_name_original if retain_names else get_name_renamed
 
         # equivalent DFA states states
         nfa_initial_states = target_nfa._get_lambda_closure(target_nfa.initial_state)
-        dfa_initial_state = cls._stringify_states(nfa_initial_states)
+        dfa_initial_state = get_name(nfa_initial_states)
         dfa_final_states = set()
 
         state_queue = deque()
         state_queue.append(nfa_initial_states)
         while state_queue:
             current_states = state_queue.popleft()
-            current_state_name = cls._stringify_states(current_states)
+            current_state_name = get_name(current_states)
             if current_state_name in dfa_states:
                 # We've been here before and nothing should have changed.
                 continue
 
+
             # Add NFA states to DFA as it is constructed from NFA.
             dfa_states.add(current_state_name)
             dfa_transitions[current_state_name] = {}
             if (current_states & target_nfa.final_states):
                 dfa_final_states.add(current_state_name)
 
+
             # Enqueue the next set of current states for the generated DFA.
             for input_symbol in target_nfa.input_symbols:
                 next_current_states = target_nfa._get_next_current_states(
                     current_states, input_symbol)
-                dfa_transitions[current_state_name][input_symbol] = cls._stringify_states(next_current_states)
+                dfa_transitions[current_state_name][input_symbol] = get_name(next_current_states)
                 state_queue.append(next_current_states)
 
+
         return cls(
             states=dfa_states, input_symbols=dfa_symbols,
             transitions=dfa_transitions, initial_state=dfa_initial_state,
             final_states=dfa_final_states)
 
+
     def show_diagram(self, path=None):
         """
             Creates the graph associated with this DFA
