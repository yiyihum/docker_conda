diff --git a/tests/test_dfa.py b/tests/test_dfa.py
index 52e3b9d..e51e2e8 100644
--- a/tests/test_dfa.py
+++ b/tests/test_dfa.py
@@ -1144,17 +1144,17 @@ def test_init_nfa_simple(self):
             initial_state='q0',
             final_states={'q2'}
         )
-        dfa = DFA.from_nfa(nfa)
-        self.assertEqual(dfa.states, {'{}', '{q0}', '{q0,q1}', '{q2}'})
+        dfa = DFA.from_nfa(nfa, retain_names=True)
+        self.assertEqual(dfa.states, {frozenset(), frozenset(('q0',)), frozenset(('q0','q1')), frozenset(('q2',))})
         self.assertEqual(dfa.input_symbols, {'0', '1'})
         self.assertEqual(dfa.transitions, {
-            '{}': {'0': '{}', '1': '{}'},
-            '{q0}': {'0': '{q0,q1}', '1': '{}'},
-            '{q0,q1}': {'0': '{q0,q1}', '1': '{q2}'},
-            '{q2}': {'0': '{}', '1': '{}'}
+            frozenset(): {'0': frozenset(), '1': frozenset()},
+            frozenset(('q0',)): {'0': frozenset(('q0','q1')), '1': frozenset()},
+            frozenset(('q0','q1')): {'0': frozenset(('q0','q1')), '1': frozenset(('q2',))},
+            frozenset(('q2',)): {'0': frozenset(), '1': frozenset()}
         })
-        self.assertEqual(dfa.initial_state, '{q0}')
-        self.assertEqual(dfa.final_states, {'{q2}'})
+        self.assertEqual(dfa.initial_state, frozenset(('q0',)))
+        self.assertEqual(dfa.final_states, {frozenset(('q2',))})
 
     def test_init_nfa_more_complex(self):
         """Should convert to a DFA a more complex NFA."""
@@ -1169,32 +1169,32 @@ def test_init_nfa_more_complex(self):
             initial_state='q0',
             final_states={'q2'}
         )
-        dfa = DFA.from_nfa(nfa)
+        dfa = DFA.from_nfa(nfa, retain_names=True)
         self.assertEqual(dfa.states, {
-            '{q0}', '{q0,q1}', '{q0,q2}', '{q0,q1,q2}'
+            frozenset(('q0',)), frozenset(('q0','q1')), frozenset(('q0','q2')), frozenset(('q0','q1','q2'))
         })
         self.assertEqual(dfa.input_symbols, {'0', '1'})
         self.assertEqual(dfa.transitions, {
-            '{q0}': {'1': '{q0}', '0': '{q0,q1}'},
-            '{q0,q1}': {'1': '{q0,q2}', '0': '{q0,q1}'},
-            '{q0,q2}': {'1': '{q0,q1}', '0': '{q0,q1,q2}'},
-            '{q0,q1,q2}': {'1': '{q0,q1,q2}', '0': '{q0,q1,q2}'}
+            frozenset(('q0',)): {'1': frozenset(('q0',)), '0': frozenset(('q0','q1'))},
+            frozenset(('q0','q1')): {'1': frozenset(('q0','q2')), '0': frozenset(('q0','q1'))},
+            frozenset(('q0','q2')): {'1': frozenset(('q0','q1')), '0': frozenset(('q0','q1','q2'))},
+            frozenset(('q0','q1','q2')): {'1': frozenset(('q0','q1','q2')), '0': frozenset(('q0','q1','q2'))}
         })
-        self.assertEqual(dfa.initial_state, '{q0}')
-        self.assertEqual(dfa.final_states, {'{q0,q1,q2}', '{q0,q2}'})
+        self.assertEqual(dfa.initial_state, frozenset(('q0',)))
+        self.assertEqual(dfa.final_states, {frozenset(('q0','q1','q2')), frozenset(('q0','q2'))})
 
     def test_init_nfa_lambda_transition(self):
         """Should convert to a DFA an NFA with a lambda transition."""
-        dfa = DFA.from_nfa(self.nfa)
-        self.assertEqual(dfa.states, {'{}', '{q0}', '{q1,q2}'})
+        dfa = DFA.from_nfa(self.nfa, retain_names=True)
+        self.assertEqual(dfa.states, {frozenset(), frozenset(('q0',)), frozenset(('q1', 'q2'))})
         self.assertEqual(dfa.input_symbols, {'a', 'b'})
         self.assertEqual(dfa.transitions, {
-            '{}': {'a': '{}', 'b': '{}'},
-            '{q0}': {'a': '{q1,q2}', 'b': '{}'},
-            '{q1,q2}': {'a': '{q1,q2}', 'b': '{q0}'},
+            frozenset(): {'a': frozenset(), 'b': frozenset()},
+            frozenset(('q0',)): {'a': frozenset(('q1', 'q2')), 'b': frozenset()},
+            frozenset(('q1', 'q2')): {'a': frozenset(('q1', 'q2')), 'b': frozenset(('q0',))},
         })
-        self.assertEqual(dfa.initial_state, '{q0}')
-        self.assertEqual(dfa.final_states, {'{q1,q2}'})
+        self.assertEqual(dfa.initial_state, frozenset(('q0',)))
+        self.assertEqual(dfa.final_states, {frozenset(('q1', 'q2'))})
 
     def test_nfa_to_dfa_with_lambda_transitions(self):
         """ Test NFA->DFA when initial state has lambda transitions """
@@ -1209,8 +1209,8 @@ def test_nfa_to_dfa_with_lambda_transitions(self):
             initial_state='q0',
             final_states={'q1'}
         )
-        dfa = DFA.from_nfa(nfa)  # returns an equivalent DFA
-        self.assertEqual(dfa.read_input('a'), '{q1}')
+        dfa = DFA.from_nfa(nfa, retain_names=True)  # returns an equivalent DFA
+        self.assertEqual(dfa.read_input('a'), frozenset(('q1',)))
 
     def test_partial_dfa(self):
         """Should allow for partial DFA when flag is set"""
