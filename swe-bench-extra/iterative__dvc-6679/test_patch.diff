diff --git a/tests/func/test_dvcfile.py b/tests/func/test_dvcfile.py
--- a/tests/func/test_dvcfile.py
+++ b/tests/func/test_dvcfile.py
@@ -7,15 +7,12 @@
     PIPELINE_FILE,
     PIPELINE_LOCK,
     Dvcfile,
-    LockfileCorruptedError,
     ParametrizedDumpError,
     SingleStageFile,
 )
-from dvc.stage.exceptions import (
-    StageFileDoesNotExistError,
-    StageFileFormatError,
-)
+from dvc.stage.exceptions import StageFileDoesNotExistError
 from dvc.stage.loader import StageNotFound
+from dvc.utils.strictyaml import YAMLValidationError
 
 
 def test_run_load_one_for_multistage(tmp_dir, dvc):
@@ -246,14 +243,14 @@ def test_remove_stage_on_lockfile_format_error(tmp_dir, dvc, run_copy):
     lock_data["gibberish"] = True
     data["gibberish"] = True
     (tmp_dir / lock_file.relpath).dump(lock_data)
-    with pytest.raises(LockfileCorruptedError):
+    with pytest.raises(YAMLValidationError):
         dvc_file.remove_stage(stage)
 
     lock_file.remove()
     dvc_file.dump(stage, update_pipeline=False)
 
     (tmp_dir / dvc_file.relpath).dump(data)
-    with pytest.raises(StageFileFormatError):
+    with pytest.raises(YAMLValidationError):
         dvc_file.remove_stage(stage)
 
 
diff --git a/tests/func/test_lockfile.py b/tests/func/test_lockfile.py
--- a/tests/func/test_lockfile.py
+++ b/tests/func/test_lockfile.py
@@ -5,11 +5,12 @@
 
 import pytest
 
-from dvc.dvcfile import PIPELINE_LOCK, Lockfile, LockfileCorruptedError
+from dvc.dvcfile import PIPELINE_LOCK, Lockfile
 from dvc.hash_info import HashInfo
 from dvc.stage.utils import split_params_deps
 from dvc.utils.fs import remove
 from dvc.utils.serialize import dumps_yaml, parse_yaml_for_update
+from dvc.utils.strictyaml import YAMLValidationError, make_relpath
 from tests.func.test_run_multistage import supported_params
 
 FS_STRUCTURE = {
@@ -207,10 +208,11 @@ def test_migrates_v1_lockfile_to_v2_during_dump(
 def test_lockfile_invalid_versions(tmp_dir, dvc, version_info):
     lockdata = {**version_info, "stages": {"foo": {"cmd": "echo foo"}}}
     (tmp_dir / "dvc.lock").dump(lockdata)
-    with pytest.raises(LockfileCorruptedError) as exc_info:
+    with pytest.raises(YAMLValidationError) as exc_info:
         Lockfile(dvc, tmp_dir / "dvc.lock").load()
 
-    assert str(exc_info.value) == "Lockfile 'dvc.lock' is corrupted."
+    rel = make_relpath("dvc.lock")
+    assert f"'{rel}' validation failed" in str(exc_info.value)
     assert (
         str(exc_info.value.__cause__)
         == f"invalid schema version {version_info['schema']}, "
diff --git a/tests/func/test_stage.py b/tests/func/test_stage.py
--- a/tests/func/test_stage.py
+++ b/tests/func/test_stage.py
@@ -9,14 +9,14 @@
 from dvc.output import Output
 from dvc.repo import Repo, lock_repo
 from dvc.stage import PipelineStage, Stage
-from dvc.stage.exceptions import StageFileFormatError
 from dvc.stage.run import run_stage
 from dvc.utils.serialize import dump_yaml, load_yaml
+from dvc.utils.strictyaml import YAMLValidationError
 from tests.basic_env import TestDvc
 
 
 def test_cmd_obj():
-    with pytest.raises(StageFileFormatError):
+    with pytest.raises(YAMLValidationError):
         SingleStageFile.validate({Stage.PARAM_CMD: {}})
 
 
@@ -33,10 +33,10 @@ def test_cmd_str():
 
 
 def test_object():
-    with pytest.raises(StageFileFormatError):
+    with pytest.raises(YAMLValidationError):
         SingleStageFile.validate({Stage.PARAM_DEPS: {}})
 
-    with pytest.raises(StageFileFormatError):
+    with pytest.raises(YAMLValidationError):
         SingleStageFile.validate({Stage.PARAM_OUTS: {}})
 
 
diff --git a/tests/func/test_stage_load.py b/tests/func/test_stage_load.py
--- a/tests/func/test_stage_load.py
+++ b/tests/func/test_stage_load.py
@@ -10,12 +10,12 @@
 from dvc.repo import Repo
 from dvc.stage.exceptions import (
     StageFileDoesNotExistError,
-    StageFileFormatError,
     StageNameUnspecified,
     StageNotFound,
 )
 from dvc.utils import relpath
 from dvc.utils.fs import remove
+from dvc.utils.strictyaml import YAMLValidationError
 
 
 def test_collect(tmp_dir, scm, dvc, run_copy):
@@ -450,7 +450,7 @@ def test_collect_repo_callback(tmp_dir, dvc, mocker):
 
     file_path, exc = mock.call_args[0]
     assert file_path == PIPELINE_FILE
-    assert isinstance(exc, StageFileFormatError)
+    assert isinstance(exc, YAMLValidationError)
 
 
 def test_gitignored_collect_repo(tmp_dir, dvc, scm):
diff --git a/tests/func/utils/test_strict_yaml.py b/tests/func/utils/test_strict_yaml.py
new file mode 100644
--- /dev/null
+++ b/tests/func/utils/test_strict_yaml.py
@@ -0,0 +1,396 @@
+import os
+
+import pytest
+from ruamel.yaml import __with_libyaml__ as ruamel_clib
+
+from dvc.main import main
+from dvc.ui import ui
+
+DUPLICATE_KEYS = """\
+stages:
+  stage1:
+    cmd: python train.py
+    cmd: python train.py
+"""
+
+DUPLICATE_KEYS_OUTPUT = """\
+'./dvc.yaml' is invalid.
+
+While constructing a mapping, in line 3, column 5
+  3 │   cmd: python train.py
+
+Found duplicate key "cmd" with value "python train.py" (original value:\
+ "python \ntrain.py"), in line 4, column 5
+  4 │   cmd: python train.py"""
+
+
+MAPPING_VALUES_NOT_ALLOWED = """\
+stages:
+  stage1
+    cmd: python script.py
+"""
+
+MAPPING_VALUES_NOT_ALLOWED_OUTPUT = """\
+'./dvc.yaml' is invalid.
+
+Mapping values are not allowed {}, in line 3, column 8
+  3 │   cmd: python script.py""".format(
+    "in this context" if ruamel_clib else "here"
+)
+
+
+NO_HYPHEN_INDICATOR_IN_BLOCK = """\
+stages:
+  stage1:
+    cmd: python script.py
+    outs:
+      - logs:
+          cache: false
+      metrics:
+"""
+
+NO_HYPHEN_INDICATOR_IN_BLOCK_OUTPUT = """\
+'./dvc.yaml' is invalid.
+
+While parsing a block collection, in line 5, column 7
+  5 │     - logs:
+
+{}, in line 7, column 7
+  7 │     metrics:""".format(
+    "Did not find expected '-' indicator"
+    if ruamel_clib
+    else "Expected <block end>, but found '?'"
+)
+
+
+UNCLOSED_SCALAR = """\
+stages:
+  stage1:
+    cmd: python script.py
+    desc: "this is my stage one
+"""
+
+UNCLOSED_SCALAR_OUTPUT = """\
+'./dvc.yaml' is invalid.
+
+While scanning a quoted scalar, in line 4, column 11
+  4 │   desc: "this is my stage one
+
+Found unexpected end of stream, in line 5, column 1
+  5"""
+
+
+NOT_A_DICT = "3"
+NOT_A_DICT_OUTPUT = "'./dvc.yaml' validation failed: expected a dictionary.\n"
+
+
+EMPTY_STAGE = """\
+stages:
+  stage1:
+"""
+
+EMPTY_STAGE_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected a dictionary, in stages -> stage1, line 2, column 3
+  1 stages:
+  2   stage1:
+  3"""
+
+
+MISSING_CMD = """\
+stages:
+  stage1:
+    cmd: {}
+"""
+
+MISSING_CMD_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected str, in stages -> stage1 -> cmd, line 3, column 10
+  2   stage1:
+  3 │   cmd: {}"""
+
+
+DEPS_AS_DICT = """\
+stages:
+  stage1:
+    cmd: python script.py
+    deps:
+      - src:
+"""
+
+DEPS_AS_DICT_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected str, in stages -> stage1 -> deps -> 0, line 5, column 9
+  4 │   deps:
+  5 │     - src:
+"""
+
+OUTS_AS_STR = """\
+stages:
+  train:
+    cmd:
+      - python train.py
+    deps:
+      - config.cfg
+    outs:
+      models/"""
+
+OUTS_AS_STR_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected a list, in stages -> train -> outs, line 3, column 5
+  2   train:
+  3 │   cmd:
+  4 │     - python train.py"""
+
+
+NULL_VALUE_ON_OUTS = """\
+stages:
+  stage1:
+    cmd: python script.py
+    outs:
+    - logs:
+        cache: false
+        persist: true
+        remote:
+"""
+
+NULL_VALUE_ON_OUTS_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected str, in stages -> stage1 -> outs -> 0 -> logs -> remote, line 6,\
+ column\n9
+  5 │   - logs:
+  6 │   │   cache: false
+  7 │   │   persist: true"""
+
+ADDITIONAL_KEY_ON_OUTS = """\
+stages:
+  stage1:
+    cmd: python script.py
+    outs:
+    - logs:
+        cache: false
+        not_existing_key: false
+"""
+
+ADDITIONAL_KEY_ON_OUTS_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+extra keys not allowed, in stages -> stage1 -> outs -> 0 -> logs -> \n\
+not_existing_key, line 6, column 9
+  5 │   - logs:
+  6 │   │   cache: false
+  7 │   │   not_existing_key: false"""
+
+
+FOREACH_SCALAR_VALUE = """\
+stages:
+  group:
+    foreach: 3
+    do:
+      cmd: python script${i}.py
+"""
+
+FOREACH_SCALAR_VALUE_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected dict, in stages -> group -> foreach, line 3, column 5
+  2   group:
+  3 │   foreach: 3
+  4 │   do:"""
+
+FOREACH_DO_NULL = """\
+stages:
+  stage1:
+    foreach: [1,2,3]
+    do:
+"""
+
+
+FOREACH_DO_NULL_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+expected a dictionary, in stages -> stage1 -> do, line 3, column 5
+  2   stage1:
+  3 │   foreach: [1,2,3]
+  4 │   do:"""
+
+
+FOREACH_DO_MISSING_CMD = """\
+stages:
+  stage1:
+    foreach: [1,2,3]
+    do:
+      outs:
+      - ${item}
+"""
+
+
+FOREACH_WITH_CMD_DO_MISSING = """\
+stages:
+  stage1:
+    foreach: [1,2,3]
+    cmd: python script${item}.py
+"""
+
+
+FOREACH_WITH_CMD_DO_MISSING_OUTPUT = """\
+'./dvc.yaml' validation failed: 2 errors.
+
+extra keys not allowed, in stages -> stage1 -> cmd, line 3, column 5
+  2   stage1:
+  3 │   foreach: [1,2,3]
+  4 │   cmd: python script${item}.py
+
+required key not provided, in stages -> stage1 -> do, line 3, column 5
+  2   stage1:
+  3 │   foreach: [1,2,3]
+  4 │   cmd: python script${item}.py"""
+
+
+FOREACH_DO_MISSING_CMD_OUTPUT = """\
+'./dvc.yaml' validation failed.
+
+required key not provided, in stages -> stage1 -> do -> cmd, line 5, column 7
+  4 │   do:
+  5 │     outs:
+  6 │     - ${item}"""
+
+
+MERGE_CONFLICTS = """\
+stages:
+  load_data:
+<<<<<<< HEAD
+    cmd: python src/load_data.py
+    deps:
+    - src/load_data.py
+=======
+    cmd: python load_data.py
+    deps:
+    - load_data.py
+>>>>>>> branch
+    outs:
+    - data
+"""
+
+MERGE_CONFLICTS_OUTPUT = """\
+'./dvc.yaml' is invalid (possible merge conflicts).
+
+While scanning a simple key, in line 3, column 1
+  3 <<<<<<< HEAD
+
+Could not find expected ':', in line 4, column 8
+  4 │   cmd: python src/load_data.py"""
+
+
+examples = {
+    # on parse errors
+    "duplicate_keys": (DUPLICATE_KEYS, DUPLICATE_KEYS_OUTPUT),
+    "mapping_values_not_allowed": (
+        MAPPING_VALUES_NOT_ALLOWED,
+        MAPPING_VALUES_NOT_ALLOWED_OUTPUT,
+    ),
+    "no_hyphen_block": (
+        NO_HYPHEN_INDICATOR_IN_BLOCK,
+        NO_HYPHEN_INDICATOR_IN_BLOCK_OUTPUT,
+    ),
+    "unclosed_scalar": (UNCLOSED_SCALAR, UNCLOSED_SCALAR_OUTPUT),
+    # schema validation errors
+    "not_a_dict": (NOT_A_DICT, NOT_A_DICT_OUTPUT),
+    "empty_stage": (EMPTY_STAGE, EMPTY_STAGE_OUTPUT),
+    "missing_cmd": (MISSING_CMD, MISSING_CMD_OUTPUT),
+    "deps_as_dict": (DEPS_AS_DICT, DEPS_AS_DICT_OUTPUT),
+    "outs_as_str": (OUTS_AS_STR, OUTS_AS_STR_OUTPUT),
+    "null_value_on_outs": (NULL_VALUE_ON_OUTS, NULL_VALUE_ON_OUTS_OUTPUT),
+    "additional_key_on_outs": (
+        ADDITIONAL_KEY_ON_OUTS,
+        ADDITIONAL_KEY_ON_OUTS_OUTPUT,
+    ),
+    "foreach_scalar": (FOREACH_SCALAR_VALUE, FOREACH_SCALAR_VALUE_OUTPUT),
+    "foreach_do_do_null": (FOREACH_DO_NULL, FOREACH_DO_NULL_OUTPUT),
+    "foreach_do_missing_cmd": (
+        FOREACH_DO_MISSING_CMD,
+        FOREACH_DO_MISSING_CMD_OUTPUT,
+    ),
+    "foreach_unknown_cmd_missing_do": (
+        FOREACH_WITH_CMD_DO_MISSING,
+        FOREACH_WITH_CMD_DO_MISSING_OUTPUT,
+    ),
+    # merge conflicts
+    "merge_conflicts": (MERGE_CONFLICTS, MERGE_CONFLICTS_OUTPUT),
+}
+
+
+@pytest.mark.parametrize(
+    "text, expected", examples.values(), ids=examples.keys()
+)
+def test_exceptions(tmp_dir, dvc, capsys, text, expected, mocker):
+    # make it always return posix path, easier for validating error messages
+    mocker.patch(
+        "dvc.utils.strictyaml.make_relpath", return_value="./dvc.yaml"
+    )
+
+    console = ui.error_console
+    original_printer = console.print
+
+    def print_with_fixed_width(*args, **kwargs):
+        console.options.min_width = console.options.max_width = 80
+        console.width = kwargs["width"] = 80
+        return original_printer(*args, **kwargs)
+
+    mocker.patch.object(console, "print", print_with_fixed_width)
+
+    tmp_dir.gen("dvc.yaml", text)
+
+    capsys.readouterr()  # clear outputs
+    assert main(["stage", "list"]) != 0
+    out, err = capsys.readouterr()
+
+    assert not out
+    assert expected in err
+
+
+def test_make_relpath(tmp_dir, monkeypatch):
+    from dvc.utils.strictyaml import make_relpath
+
+    path = tmp_dir / "dvc.yaml"
+    expected_path = "./dvc.yaml" if os.name == "posix" else ".\\dvc.yaml"
+    assert make_relpath(path) == expected_path
+
+    (tmp_dir / "dir").mkdir(exist_ok=True)
+    monkeypatch.chdir("dir")
+
+    expected_path = "../dvc.yaml" if os.name == "posix" else "..\\dvc.yaml"
+    assert make_relpath(path) == expected_path
+
+
+def test_fallback_exception_message(tmp_dir, dvc, mocker, caplog):
+    # When trying to pretty print exception messages, we fallback to old way
+    # of printing things.
+    mocker.patch(
+        "dvc.utils.strictyaml.YAMLSyntaxError.__pretty_exc__",
+        side_effect=ValueError,
+    )
+    mocker.patch(
+        "dvc.utils.strictyaml.YAMLValidationError.__pretty_exc__",
+        side_effect=ValueError,
+    )
+
+    # syntax errors
+    dvc_file = tmp_dir / "dvc.yaml"
+    dvc_file.write_text(MAPPING_VALUES_NOT_ALLOWED)
+    assert main(["stage", "list"]) != 0
+    assert (
+        "unable to read: 'dvc.yaml', "
+        "YAML file structure is corrupted" in caplog.text
+    )
+
+    caplog.clear()
+    # validation error
+    dvc_file.dump({"stages": {"stage1": None}})
+    assert main(["stage", "list"]) != 0
+    assert "dvc.yaml' validation failed" in caplog.text
diff --git a/tests/unit/test_dvcfile.py b/tests/unit/test_dvcfile.py
--- a/tests/unit/test_dvcfile.py
+++ b/tests/unit/test_dvcfile.py
@@ -11,11 +11,11 @@
 from dvc.stage import PipelineStage
 from dvc.stage.exceptions import (
     StageFileDoesNotExistError,
-    StageFileFormatError,
     StageFileIsNotDvcFileError,
 )
 from dvc.utils.fs import remove
 from dvc.utils.serialize import EncodingError
+from dvc.utils.strictyaml import YAMLValidationError
 
 
 @pytest.mark.parametrize(
@@ -68,9 +68,9 @@ def test_stage_load_on_invalid_data(tmp_dir, dvc, file):
     data = {"is_this_a_valid_dvcfile": False}
     (tmp_dir / file).dump(data)
     dvcfile = Dvcfile(dvc, file)
-    with pytest.raises(StageFileFormatError):
+    with pytest.raises(YAMLValidationError):
         assert dvcfile.stages
-    with pytest.raises(StageFileFormatError):
+    with pytest.raises(YAMLValidationError):
         assert dvcfile.validate(data, file)
 
 
diff --git a/tests/unit/test_lockfile.py b/tests/unit/test_lockfile.py
--- a/tests/unit/test_lockfile.py
+++ b/tests/unit/test_lockfile.py
@@ -1,7 +1,8 @@
 import pytest
 
-from dvc.dvcfile import FileIsGitIgnored, Lockfile, LockfileCorruptedError
+from dvc.dvcfile import FileIsGitIgnored, Lockfile
 from dvc.stage import PipelineStage
+from dvc.utils.strictyaml import YAMLValidationError
 
 
 def test_stage_dump_no_outs_deps(tmp_dir, dvc):
@@ -79,7 +80,7 @@ def test_load_when_lockfile_does_not_exist(tmp_dir, dvc):
 def test_load_when_lockfile_is_corrupted(tmp_dir, dvc, corrupt_data):
     (tmp_dir / "Dvcfile.lock").dump(corrupt_data)
     lockfile = Lockfile(dvc, "Dvcfile.lock")
-    with pytest.raises(LockfileCorruptedError) as exc_info:
+    with pytest.raises(YAMLValidationError) as exc_info:
         lockfile.load()
     assert "Dvcfile.lock" in str(exc_info.value)
 
