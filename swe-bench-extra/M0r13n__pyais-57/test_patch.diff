diff --git a/tests/test_decode.py b/tests/test_decode.py
index c1ac917..d2a1b6d 100644
--- a/tests/test_decode.py
+++ b/tests/test_decode.py
@@ -1,5 +1,6 @@
 import textwrap
 import unittest
+from pprint import pprint
 
 from pyais import NMEAMessage, encode_dict
 from pyais.ais_types import AISType
@@ -123,6 +124,12 @@ class TestAIS(unittest.TestCase):
 
         assert decode(b"!AIVDM,1,1,,B,0S9edj0P03PecbBN`ja@0?w42cFC,0*7C").to_json()
 
+    def test_decode_1_speed(self):
+        content = decode(b"!AIVDM,1,1,,A,13@nePh01>PjcO4PGReoJEmL0HJg,0*67").asdict()
+
+        assert content['speed'] == 7.8
+        assert content['msg_type'] == 1
+
     def test_msg_type_3(self):
         msg = decode(b"!AIVDM,1,1,,A,35NSH95001G?wopE`beasVk@0E5:,0*6F").asdict()
         assert msg['msg_type'] == 3
@@ -344,10 +351,9 @@ class TestAIS(unittest.TestCase):
 
     def test_msg_type_18(self):
         msg = decode(b"!AIVDM,1,1,,A,B5NJ;PP005l4ot5Isbl03wsUkP06,0*76").asdict()
-        print(msg)
         assert msg['msg_type'] == 18
         assert msg['mmsi'] == "367430530"
-        assert msg['speed'] == 0
+        assert msg['speed'] == 0.0
         assert msg['accuracy'] == 0
         assert round(msg['lat'], 2) == 37.79
         assert round(msg['lon'], 2) == -122.27
@@ -364,6 +370,17 @@ class TestAIS(unittest.TestCase):
         assert not msg['raim']
         assert isinstance(msg['raim'], bool)
 
+        assert isinstance(msg['lat'], float)
+        assert isinstance(msg['lon'], float)
+        assert isinstance(msg['speed'], float)
+        assert isinstance(msg['course'], float)
+
+    def test_msg_type_18_speed(self):
+        msg = decode(b"!AIVDO,1,1,,A,B5NJ;PP2aUl4ot5Isbl6GwsUkP06,0*35").asdict()
+
+        assert msg['speed'] == 67.8
+        assert msg['course'] == 10.1
+
     def test_msg_type_19(self):
         msg = decode(b"!AIVDM,1,1,,B,C5N3SRgPEnJGEBT>NhWAwwo862PaLELTBJ:V00000000S0D:R220,0*0B").asdict()
         assert msg['msg_type'] == 19
@@ -437,7 +454,7 @@ class TestAIS(unittest.TestCase):
         assert msg['ne_lon'] == -7710.0
         assert msg['ne_lat'] == 3300.0
         assert msg['sw_lon'] == -8020.0
-        assert msg['sw_lat'] == 3210
+        assert msg['sw_lat'] == 3210.0
 
         assert msg['band_a'] == 0
         assert msg['band_b'] == 0
@@ -446,6 +463,11 @@ class TestAIS(unittest.TestCase):
         assert 'dest1' not in msg.keys()
         assert 'dest2' not in msg.keys()
 
+        assert isinstance(msg['ne_lon'], float)
+        assert isinstance(msg['ne_lat'], float)
+        assert isinstance(msg['sw_lon'], float)
+        assert isinstance(msg['sw_lat'], float)
+
     def test_msg_type_22_addressed(self):
         # Addressed
         msg = decode(b"!AIVDM,1,1,,A,F@@W>gOP00PH=JrN9l000?wB2HH;,0*44").asdict()
@@ -597,7 +619,7 @@ class TestAIS(unittest.TestCase):
         self.assertEqual(content["msg_type"], 18)
         self.assertEqual(content["repeat"], 0)
         self.assertEqual(content["mmsi"], "1000000000")
-        self.assertEqual(content["speed"], 1023)
+        self.assertEqual(content["speed"], 102.3)
         self.assertEqual(content["accuracy"], 0)
         self.assertEqual(str(content["lon"]), "181.0")
         self.assertEqual(str(content["lat"]), "91.0")
@@ -906,3 +928,25 @@ class TestAIS(unittest.TestCase):
         decoded = decode(short_msg)
 
         self.assertEqual(decoded.mmsi, '000000001')
+
+    def test_types_for_messages(self):
+        """Make sure that the types are consistent for all messages"""
+        types = {}
+        for typ, msg in MSG_CLASS.items():
+            for field in msg.fields():
+                d_type = field.metadata['d_type']
+                f_name = field.name
+                if f_name in types:
+                    if typ == 9 and f_name == 'speed' and d_type == int:
+                        continue
+                    if f_name == 'spare':
+                        continue
+                    if typ == 27 and f_name == 'speed' and d_type == int:
+                        continue
+                    if typ == 27 and f_name == 'course' and d_type == int:
+                        continue
+                    assert d_type == types[f_name], f"{typ}.{f_name}: {d_type} vs. {types[f_name]}"
+                else:
+                    types[f_name] = d_type
+
+        pprint(types)
diff --git a/tests/test_encode.py b/tests/test_encode.py
index 16e4070..64c5105 100644
--- a/tests/test_encode.py
+++ b/tests/test_encode.py
@@ -517,6 +517,33 @@ def test_encode_type_19():
     assert encoded[0] == "!AIVDO,1,1,,A,C5N3SRP0=nJGEBT>NhWAwwo862PaLELTBJ:V0000000000D:R220,0*46"
 
 
+def test_encode_type_18_with_speed_and_course():
+    data = {
+        'accuracy': 0,
+        'assigned': 0,
+        'band': 1,
+        'course': 10.1,
+        'cs': 1,
+        'display': 0,
+        'dsc': 1,
+        'heading': 511,
+        'lat': 37.785035,
+        'lon': -122.26732,
+        'mmsi': '367430530',
+        'msg22': 1,
+        'radio': 917510,
+        'raim': 0,
+        'regional': 0,
+        'repeat': 0,
+        'second': 55,
+        'speed': 67.85,
+        'type': 18
+    }
+
+    encoded = encode_dict(data)
+    assert encoded[0] == "!AIVDO,1,1,,A,B5NJ;PP2aUl4ot5Isbl6GwsUkP06,0*35"
+
+
 def test_encode_type_18():
     data = {
         'accuracy': 0,
@@ -953,17 +980,17 @@ def test_encode_type_1():
         'raim': 0,
         'repeat': 0,
         'second': 59,
-        'speed': 0.0,
+        'speed': 7.8,
         'status': 3,
         'turn': 0,
         'type': 1
     }
 
     encoded = encode_dict(data, radio_channel="B", talker_id="AIVDM")[0]
-    assert encoded == "!AIVDM,1,1,,B,15M67FC000G?ufbE`FepT@3n00Sa,0*5C"
+    assert encoded == "!AIVDM,1,1,,B,15M67FC01>G?ufbE`FepT@3n00Sa,0*53"
 
     encoded = encode_dict(data, radio_channel="B")[0]
-    assert encoded == "!AIVDO,1,1,,B,15M67FC000G?ufbE`FepT@3n00Sa,0*5E"
+    assert encoded == "!AIVDO,1,1,,B,15M67FC01>G?ufbE`FepT@3n00Sa,0*51"
 
 
 def test_mmsi_too_long():
