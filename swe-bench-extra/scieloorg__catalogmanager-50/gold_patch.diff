diff --git a/catalog_persistence/databases.py b/catalog_persistence/databases.py
index 954921e..9dd6f9a 100644
--- a/catalog_persistence/databases.py
+++ b/catalog_persistence/databases.py
@@ -55,16 +55,13 @@ class BaseDBManager(metaclass=abc.ABCMeta):
     def list_attachments(self, id) -> list:
         return NotImplemented
 
-    @abc.abstractmethod
-    def attachment_exists(self, id, file_id) -> bool:
-        return NotImplemented
-
 
 class InMemoryDBManager(BaseDBManager):
 
     def __init__(self, **kwargs):
         self._database_name = kwargs['database_name']
         self._attachments_key = 'attachments'
+        self._attachments_properties_key = 'attachments_properties'
         self._database = {}
 
     @property
@@ -103,7 +100,7 @@ class InMemoryDBManager(BaseDBManager):
         selector: criterio para selecionar campo com determinados valores
             Ex.: {'type': 'ART'}
         fields: lista de campos para retornar. Ex.: ['name']
-        sort: lista de dict com nome de campo e sua ordenacao. [{'name': 'asc'}]
+        sort: lista de dict com nome de campo e sua ordenacao.[{'name': 'asc'}]
 
         Retorno:
         Lista de registros de documento registrados na base de dados
@@ -141,6 +138,18 @@ class InMemoryDBManager(BaseDBManager):
             content_properties['content_size']
         self.database.update({id: doc})
 
+    def _add_attachment_properties(self, record, file_id, file_properties):
+        """
+        """
+        if not record.get(self._attachments_properties_key):
+            record[self._attachments_properties_key] = {}
+        if not record[self._attachments_properties_key].get(file_id):
+            record[self._attachments_properties_key][file_id] = {}
+
+        record[self._attachments_properties_key][file_id].update(
+            file_properties)
+        return record
+
     def get_attachment(self, id, file_id):
         doc = self.read(id)
         if (doc.get(self._attachments_key) and
@@ -152,15 +161,13 @@ class InMemoryDBManager(BaseDBManager):
         doc = self.read(id)
         return list(doc.get(self._attachments_key, {}).keys())
 
-    def attachment_exists(self, id, file_id):
-        return file_id in self.list_attachments(id)
-
 
 class CouchDBManager(BaseDBManager):
 
     def __init__(self, **kwargs):
         self._database_name = kwargs['database_name']
         self._attachments_key = '_attachments'
+        self._attachments_properties_key = 'attachments_properties'
         self._database = None
         self._db_server = couchdb.Server(kwargs['database_uri'])
         self._db_server.resource.credentials = (
@@ -215,7 +222,7 @@ class CouchDBManager(BaseDBManager):
         selector: criterio para selecionar campo com determinados valores
             Ex.: {'type': 'ART'}
         fields: lista de campos para retornar. Ex.: ['name']
-        sort: lista de dict com nome de campo e sua ordenacao. [{'name': 'asc'}]
+        sort: lista de dict com nome de campo e sua ordenacao.[{'name': 'asc'}]
 
         Retorno:
         Lista de registros de documento registrados na base de dados
@@ -225,7 +232,10 @@ class CouchDBManager(BaseDBManager):
             'fields': fields,
             'sort': sort,
         }
-        return [dict(document) for document in self.database.find(selection_criteria)]
+        return [
+            dict(document)
+            for document in self.database.find(selection_criteria)
+        ]
 
     def put_attachment(self, id, file_id, content, content_properties):
         """
@@ -241,6 +251,18 @@ class CouchDBManager(BaseDBManager):
             content_type=content_properties.get('content_type')
         )
 
+    def _add_attachment_properties(self, record, file_id, file_properties):
+        """
+        """
+        if not record.get(self._attachments_properties_key):
+            record[self._attachments_properties_key] = {}
+        if not record[self._attachments_properties_key].get(file_id):
+            record[self._attachments_properties_key][file_id] = {}
+
+        record[self._attachments_properties_key][file_id].update(
+            file_properties)
+        return record
+
     def get_attachment(self, id, file_id):
         doc = self.read(id)
         attachment = self.database.get_attachment(doc, file_id)
@@ -252,9 +274,6 @@ class CouchDBManager(BaseDBManager):
         doc = self.read(id)
         return list(doc.get(self._attachments_key, {}).keys())
 
-    def attachment_exists(self, id, file_id):
-        return file_id in self.list_attachments(id)
-
 
 class DatabaseService:
     """
@@ -371,7 +390,7 @@ class DatabaseService:
         selector: criterio para selecionar campo com determinados valores
             Ex.: {'type': 'ART'}
         fields: lista de campos para retornar. Ex.: ['name']
-        sort: lista de dict com nome de campo e sua ordenacao. [{'name': 'asc'}]
+        sort: lista de dict com nome de campo e sua ordenacao.[{'name': 'asc'}]
 
         Retorno:
         Lista de registros de documento registrados na base de dados
@@ -403,6 +422,11 @@ class DatabaseService:
             'content': document['content'],
             'created_date': document['created_date']
         }
+        document_record = self.db_manager._add_attachment_properties(
+                document_record,
+                file_id,
+                file_properties
+            )
         self.update(document_id, document_record)
 
     def get_attachment(self, document_id, file_id):
