diff --git a/tests/test.py b/tests/test.py
index d663249..af03cbd 100644
--- a/tests/test.py
+++ b/tests/test.py
@@ -12,6 +12,7 @@ size_coefficient_array = 20
 test_N = 512
 sqrtpi2 = 0.88622692545275794
 truevaluepoly = 0.94031597258
+PC_x_power = np.linspace(0, 1, 100) ** 5.5
 
 INTER = GLIinterpolat(1)
 
@@ -33,6 +34,10 @@ RL_r = RL(0.5, lambda x: np.sqrt(x), 0, 1, test_N)
 RL_result = RL_r[-1]
 RL_length = len(RL_r)
 
+# Get FODE function for solving.
+PC_func_power = lambda x, y : 1/24 * Gamma(5 + 1.5) * x**4 + x**(8 + 2 * 1.5) - y**2
+PC_func_ML = lambda x,y : y
+
 class HelperTestCases(unittest.TestCase):
     """ Tests for helper functions. """
     
@@ -89,6 +94,23 @@ class HelperTestCases(unittest.TestCase):
 
     def testComplexValue(self):
         self.assertEqual(np.round(Gamma(1j), 4), -0.1549-0.498j)
+
+    """ Unit tests for Mittag-Leffler function. """
+
+    def test_ML_cosh_root(self):
+        xs = np.arange(10, 0.1)
+        self.assertTrue((np.abs(MittagLeffler(2, 1, xs, ignore_special_cases=True)\
+                                        - np.cosh(np.sqrt(xs))) <= 1e-3).all())
+
+    def test_ML_exp(self):
+        xs = np.arange(10, 0.1)
+        self.assertTrue((np.abs(MittagLeffler(1, 1, xs, ignore_special_cases=True)\
+                                        - np.exp(xs)) <= 1e-3).all())
+
+    def test_ML_geometric(self):
+        xs = np.arange(1, 0.05)
+        self.assertTrue((np.abs(MittagLeffler(0, 1, xs, ignore_special_cases=True)\
+                                        - 1 / (1 - xs)) <= 1e-3).all())
         
 class TestInterpolantCoefficients(unittest.TestCase):
     """ Test the correctness of the interpolant coefficients. """
@@ -131,7 +153,21 @@ class TestAlgorithms(unittest.TestCase):
         
     def test_RL_accuracy_sqrt(self):
         self.assertTrue(abs(RL_result - sqrtpi2) <= 1e-4)
-        
+
+class TestSolvers(unittest.TestCase):
+    """ Tests for the correct solution to the equations. """
+    def test_PC_solution_three_halves(self):
+        self.assertTrue((np.abs(PCsolver([0, 0], 1.5, PC_func_power, 0, 1, 100)-PC_x_power) <= 1e-2).all())
+
+    def test_PC_solution_ML(self):
+        xs = np.linspace(0, 1, 100)
+        ML_alpha = MittagLeffler(5.5, 1, xs ** 5.5)
+        self.assertTrue((np.abs(PCsolver([1, 0, 0, 0, 0, 0], 5.5, PC_func_ML)-ML_alpha) <= 1e-2).all())
+
+    def test_PC_solution_linear(self):
+        xs = np.linspace(0, 1, 100)
+        self.assertTrue((np.abs(PCsolver([1, 1], 1.5, lambda x,y : y-x-1)-(xs+1)) <= 1e-2).all())
+
 if __name__ == '__main__':
     unittest.main(argv=['first-arg-is-ignored'], exit=False)
     
