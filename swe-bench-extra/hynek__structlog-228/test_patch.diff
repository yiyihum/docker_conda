diff --git a/tests/test_stdlib.py b/tests/test_stdlib.py
index e9abb08..b34e21a 100644
--- a/tests/test_stdlib.py
+++ b/tests/test_stdlib.py
@@ -455,7 +455,7 @@ def configure_for_pf():
     reset_defaults()
 
 
-def configure_logging(pre_chain, logger=None):
+def configure_logging(pre_chain, logger=None, pass_foreign_args=False):
     """
     Configure logging to use ProcessorFormatter.
     """
@@ -470,6 +470,7 @@ def configure_logging(pre_chain, logger=None):
                     "foreign_pre_chain": pre_chain,
                     "format": "%(message)s [in %(funcName)s]",
                     "logger": logger,
+                    "pass_foreign_args": pass_foreign_args,
                 }
             },
             "handlers": {
@@ -527,6 +528,29 @@ class TestProcessorFormatter(object):
             "hello world. [in test_clears_args]\n",
         ) == capsys.readouterr()
 
+    def test_pass_foreign_args_true_sets_positional_args_key(
+        self, configure_for_pf, capsys
+    ):
+        """
+        Test that when `pass_foreign_args` is `True` we set the
+        `positional_args` key in the `event_dict` before clearing args.
+        """
+        test_processor = call_recorder(lambda l, m, event_dict: event_dict)
+        configure_logging((test_processor,), pass_foreign_args=True)
+        configure(
+            processors=[ProcessorFormatter.wrap_for_formatter],
+            logger_factory=LoggerFactory(),
+            wrapper_class=BoundLogger,
+        )
+
+        positional_args = {"foo": "bar"}
+        logging.getLogger().info("okay %(foo)s", positional_args)
+
+        event_dict = test_processor.calls[0].args[2]
+
+        assert "positional_args" in event_dict
+        assert positional_args == event_dict["positional_args"]
+
     def test_log_dict(self, configure_for_pf, capsys):
         """
         Test that dicts can be logged with std library loggers.
