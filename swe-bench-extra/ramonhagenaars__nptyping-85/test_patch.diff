diff --git a/tests/test_ndarray.py b/tests/test_ndarray.py
index bbf647f..e4929b4 100644
--- a/tests/test_ndarray.py
+++ b/tests/test_ndarray.py
@@ -105,6 +105,20 @@ class NDArrayTest(TestCase):
             NDArray[Shape["*, ..."], Any],
             "This should match with an array of any dimensions of any size.",
         )
+        self.assertIsInstance(
+            np.array([[0]]),
+            NDArray[Shape["1, 1, ..."], Any],
+            "This should match with an array of shape (1, 1).",
+        )
+        self.assertIsInstance(
+            np.array([[[[0]]]]),
+            NDArray[Shape["1, 1, ..."], Any],
+            "This should match with an array of shape (1, 1, 1, 1).",
+        )
+        self.assertIsInstance(
+            np.array([[[[0, 0], [0, 0]], [[0, 0], [0, 0]]]]),
+            NDArray[Shape["1, 2, ..."], Any],
+        )
 
     def test_isinstance_fails_with_ellipsis(self):
         self.assertNotIsInstance(
@@ -112,6 +126,10 @@ class NDArrayTest(TestCase):
             NDArray[Shape["1, ..."], Any],
             "This should match with an array of any dimensions of size 1.",
         )
+        self.assertNotIsInstance(
+            np.array([[[[[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]]]]]),
+            NDArray[Shape["1, 2, ..."], Any],
+        )
 
     def test_isinstance_succeeds_with_dim_breakdown(self):
         self.assertIsInstance(
diff --git a/tests/test_shape_expression.py b/tests/test_shape_expression.py
index 7dd5453..5e2b571 100644
--- a/tests/test_shape_expression.py
+++ b/tests/test_shape_expression.py
@@ -14,8 +14,10 @@ class ShapeExpressionTest(TestCase):
         validate_shape_expression("1, 2, 3")
         validate_shape_expression("1, ...")
         validate_shape_expression("*, ...")
+        validate_shape_expression("*, *, ...")
         validate_shape_expression("VaRiAbLe123, ...")
         validate_shape_expression("[a, b], ...")
+        validate_shape_expression("2, 3, ...")
         validate_shape_expression("*, *, *")
         validate_shape_expression("VaRiAbLe123, VaRiAbLe123, VaRiAbLe123")
         validate_shape_expression("[a]")
