diff --git a/tests/func/api/test_data.py b/tests/func/api/test_data.py
--- a/tests/func/api/test_data.py
+++ b/tests/func/api/test_data.py
@@ -193,10 +193,6 @@ def test_get_url_subrepos(tmp_dir, scm, local_cloud):
     assert api.get_url("subrepo/bar") == expected_url
 
 
-@pytest.mark.xfail(
-    raises=PathMissingError,
-    reason="https://github.com/iterative/dvc/issues/7341",
-)
 def test_open_from_remote(tmp_dir, erepo_dir, cloud, local_cloud):
     erepo_dir.add_remote(config=cloud.config, name="other")
     erepo_dir.add_remote(config=local_cloud.config, default=True)
diff --git a/tests/func/artifacts/__init__.py b/tests/func/artifacts/__init__.py
new file mode 100644
diff --git a/tests/func/artifacts/test_artifacts.py b/tests/func/artifacts/test_artifacts.py
new file mode 100644
--- /dev/null
+++ b/tests/func/artifacts/test_artifacts.py
@@ -0,0 +1,132 @@
+import os
+
+import pytest
+
+from dvc.annotations import Artifact
+from dvc.repo.artifacts import name_is_compatible
+from dvc.utils.strictyaml import YAMLSyntaxError, YAMLValidationError
+
+dvcyaml = {
+    "artifacts": {
+        "myart": {"type": "model", "path": "myart.pkl"},
+        "hello": {"type": "file", "path": "hello.txt"},
+        "world": {
+            "type": "object",
+            "path": "world.txt",
+            "desc": "The world is not enough",
+            "labels": ["but", "this", "is"],
+            "meta": {"such": "a", "perfect": "place to start"},
+        },
+    }
+}
+
+
+def test_reading_artifacts_subdir(tmp_dir, dvc):
+    (tmp_dir / "dvc.yaml").dump(dvcyaml)
+
+    subdir = tmp_dir / "subdir"
+    subdir.mkdir()
+
+    (subdir / "dvc.yaml").dump(dvcyaml)
+
+    artifacts = {
+        name: Artifact(**values) for name, values in dvcyaml["artifacts"].items()
+    }
+    assert tmp_dir.dvc.artifacts.read() == {
+        "dvc.yaml": artifacts,
+        f"subdir{os.path.sep}dvc.yaml": artifacts,
+    }
+
+
+bad_dvcyaml_extra_field = {
+    "artifacts": {
+        "lol": {"kek": "cheburek", "path": "lol"},
+        "hello": {"type": "file", "path": "hello.txt"},
+    }
+}
+
+
+bad_dvcyaml_missing_path = {
+    "artifacts": {
+        "lol": {},
+    }
+}
+
+
+@pytest.mark.parametrize(
+    "bad_dvcyaml", [bad_dvcyaml_extra_field, bad_dvcyaml_missing_path]
+)
+def test_broken_dvcyaml_extra_field(tmp_dir, dvc, bad_dvcyaml):
+    (tmp_dir / "dvc.yaml").dump(bad_dvcyaml)
+
+    with pytest.raises(YAMLValidationError):
+        tmp_dir.dvc.artifacts.read()
+
+
+bad_dvcyaml_id_duplication = """
+artifacts:
+  lol:
+    type: kek
+  lol: {}
+"""
+
+
+def test_broken_dvcyaml_id_duplication(tmp_dir, dvc):
+    with open(tmp_dir / "dvc.yaml", "w") as f:
+        f.write(bad_dvcyaml_id_duplication)
+
+    with pytest.raises(YAMLSyntaxError):
+        tmp_dir.dvc.artifacts.read()
+
+
+dvcyaml_redirecting = {"artifacts": "artifacts.yaml"}
+
+
+def test_read_artifacts_yaml(tmp_dir, dvc):
+    (tmp_dir / "dvc.yaml").dump(dvcyaml_redirecting)
+    (tmp_dir / "artifacts.yaml").dump(dvcyaml["artifacts"])
+
+    artifacts = {
+        name: Artifact(**values) for name, values in dvcyaml["artifacts"].items()
+    }
+    assert tmp_dir.dvc.artifacts.read() == {
+        "dvc.yaml": artifacts,
+    }
+
+
+@pytest.mark.parametrize(
+    "name",
+    [
+        "m",
+        "nn",
+        "m1",
+        "model-prod",
+        "model-prod-v1",
+    ],
+)
+def test_check_name_is_valid(name):
+    assert name_is_compatible(name)
+
+
+@pytest.mark.parametrize(
+    "name",
+    [
+        "",
+        "1",
+        "m/",
+        "/m",
+        "1nn",
+        "###",
+        "@@@",
+        "a model",
+        "a_model",
+        "-model",
+        "model-",
+        "model@1",
+        "model#1",
+        "@namespace/model",
+        "namespace/model",
+    ],
+)
+def test_check_name_is_invalid(name):
+    assert not name_is_compatible(name)
diff --git a/tests/func/experiments/test_queue.py b/tests/func/experiments/test_queue.py
--- a/tests/func/experiments/test_queue.py
+++ b/tests/func/experiments/test_queue.py
@@ -92,3 +92,19 @@ def test_queue_remove_done(
     assert set(celery_queue.clear(success=True)) == set(success_tasks[:2])
 
     assert celery_queue.status() == []
+
+
+def test_queue_doesnt_remove_untracked_params_file(tmp_dir, dvc, scm):
+    """Regression test for https://github.com/iterative/dvc/issues/7842"""
+    tmp_dir.gen("params.yaml", "foo: 1")
+    stage = dvc.run(cmd="echo ${foo}", params=["foo"], name="echo-foo")
+    scm.add(
+        [
+            "dvc.yaml",
+            "dvc.lock",
+            ".gitignore",
+        ]
+    )
+    scm.commit("init")
+    dvc.experiments.run(stage.addressing, params=["foo=2"], queue=True)
+    assert (tmp_dir / "params.yaml").exists()
