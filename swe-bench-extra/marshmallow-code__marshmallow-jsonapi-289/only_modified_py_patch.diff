diff --git a/marshmallow_jsonapi/schema.py b/marshmallow_jsonapi/schema.py
index b8de86a..2224516 100644
--- a/marshmallow_jsonapi/schema.py
+++ b/marshmallow_jsonapi/schema.py
@@ -1,3 +1,5 @@
+import itertools
+
 import marshmallow as ma
 from marshmallow.exceptions import ValidationError
 from marshmallow.utils import is_collection
@@ -286,21 +288,34 @@ class Schema(ma.Schema):
 
         formatted_errors = []
         if many:
-            for index, errors in errors.items():
-                for field_name, field_errors in errors.items():
-                    formatted_errors.extend(
-                        [
-                            self.format_error(field_name, message, index=index)
-                            for message in field_errors
-                        ]
-                    )
+            for index, i_errors in errors.items():
+                formatted_errors.extend(self._get_formatted_errors(i_errors, index))
         else:
-            for field_name, field_errors in errors.items():
-                formatted_errors.extend(
-                    [self.format_error(field_name, message) for message in field_errors]
-                )
+            formatted_errors.extend(self._get_formatted_errors(errors))
+
         return {"errors": formatted_errors}
 
+    def _get_formatted_errors(self, errors, index=None):
+        return itertools.chain(
+            *(
+                [
+                    self.format_error(field_name, message, index=index)
+                    for message in field_errors
+                ]
+                for field_name, field_errors in itertools.chain(
+                    *(self._process_nested_errors(k, v) for k, v in errors.items())
+                )
+            )
+        )
+
+    def _process_nested_errors(self, name, data):
+        if not isinstance(data, dict):
+            return [(name, data)]
+
+        return itertools.chain(
+            *(self._process_nested_errors(f"{name}/{k}", v) for k, v in data.items())
+        )
+
     def format_error(self, field_name, message, index=None):
         """Override-able hook to format a single error message as an Error object.
 

