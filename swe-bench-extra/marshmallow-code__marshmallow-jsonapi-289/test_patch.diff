diff --git a/tests/test_schema.py b/tests/test_schema.py
index 4ca16ea..bd6ad4b 100755
--- a/tests/test_schema.py
+++ b/tests/test_schema.py
@@ -1,4 +1,5 @@
 import pytest
+import marshmallow as ma
 from marshmallow import ValidationError
 
 from marshmallow_jsonapi import Schema, fields
@@ -608,6 +609,56 @@ class TestErrorFormatting:
         assert id_err["source"]["pointer"] == "/data/1/id"
         assert id_err["detail"] == "Not a valid string."
 
+    def test_nested_fields_error(self):
+        min_size = 10
+
+        class ThirdLevel(ma.Schema):
+            number = fields.Int(required=True, validate=ma.validate.Range(min=min_size))
+
+        class SecondLevel(ma.Schema):
+            foo = fields.Str(required=True)
+            third = fields.Nested(ThirdLevel)
+
+        class FirstLevel(Schema):
+            class Meta:
+                type_ = "first"
+
+            id = fields.Int()
+            second = fields.Nested(SecondLevel)
+
+        schema = FirstLevel()
+        result = schema.validate(
+            {
+                "data": {
+                    "type": "first",
+                    "attributes": {"second": {"third": {"number": 5}}},
+                }
+            }
+        )
+
+        def sort_func(d):
+            return d["source"]["pointer"]
+
+        expected_errors = sorted(
+            [
+                {
+                    "source": {"pointer": "/data/attributes/second/third/number"},
+                    "detail": f"Must be greater than or equal to {min_size}."
+                    if _MARSHMALLOW_VERSION_INFO[0] >= 3
+                    else f"Must be at least {min_size}.",
+                },
+                {
+                    "source": {"pointer": "/data/attributes/second/foo"},
+                    "detail": ma.fields.Field.default_error_messages["required"],
+                },
+            ],
+            key=sort_func,
+        )
+
+        errors = sorted(result["errors"], key=sort_func)
+
+        assert errors == expected_errors
+
 
 class TestMeta:
     shape = {
