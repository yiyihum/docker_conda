diff --git a/manubot/cite/doi.py b/manubot/cite/doi.py
index 928b849..0a7d0f2 100644
--- a/manubot/cite/doi.py
+++ b/manubot/cite/doi.py
@@ -1,3 +1,4 @@
+import json
 import logging
 import urllib.request
 
@@ -7,6 +8,38 @@ from manubot.cite.pubmed import get_pubmed_ids_for_doi
 from manubot.util import get_manubot_user_agent
 
 
+def expand_short_doi(short_doi):
+    """
+    Convert a shortDOI to a regular DOI.
+    """
+    if not short_doi.startswith('10/'):
+        raise ValueError(f'shortDOIs start with `10/`, but expand_short_doi received: {short_doi}')
+    url = f'https://doi.org/api/handles/{short_doi.lower()}'
+    params = {
+        "type": "HS_ALIAS",
+    }
+    response = requests.get(url, params=params)
+    # response documentation at https://www.handle.net/proxy_servlet.html
+    results = response.json()
+    response_code = results.get('responseCode')  # Handle protocol response code
+    if response_code == 100:
+        raise ValueError(f'Handle not found. Double check short_doi: {short_doi}')
+    if response_code == 200:
+        raise ValueError(f'HS_ALIAS values not found. Double check short_doi: {short_doi}')
+    if response_code != 1:
+        raise ValueError(f'Error response code of {response_code} returned by {response.url}')
+    values = results.get('values', [])
+    for value in values:
+        if value.get('type') == 'HS_ALIAS':
+            doi = value['data']['value']
+            return doi.lower()
+    raise RuntimeError(
+        f'HS_ALIAS value not found by expand_short_doi("{short_doi}")\n'
+        f'The following JSON was retrieved from {response.url}:\n'
+        + json.dumps(results, indent=2)
+    )
+
+
 def get_short_doi_url(doi):
     """
     Get the shortDOI URL for a DOI.
@@ -19,8 +52,7 @@ def get_short_doi_url(doi):
     try:
         response = requests.get(url, headers=headers).json()
         short_doi = response['ShortDOI']
-        short_doi = short_doi[3:]  # Remove "10/" prefix
-        short_url = 'https://doi.org/' + short_doi
+        short_url = 'https://doi.org/' + short_doi[3:]  # Remove "10/" prefix
         return short_url
     except Exception:
         logging.warning(f'shortDOI lookup failed for {doi}', exc_info=True)
diff --git a/manubot/cite/util.py b/manubot/cite/util.py
index 755d5f0..8c2005a 100644
--- a/manubot/cite/util.py
+++ b/manubot/cite/util.py
@@ -1,3 +1,4 @@
+import functools
 import logging
 import re
 
@@ -34,16 +35,33 @@ citation_pattern = re.compile(
     r'(?<!\w)@[a-zA-Z0-9][\w:.#$%&\-+?<>~/]*[a-zA-Z0-9/]')
 
 
+@functools.lru_cache(maxsize=5_000)
 def standardize_citation(citation):
     """
-    Standardize citation idenfiers based on their source
+    Standardize citation identifiers based on their source
     """
     source, identifier = citation.split(':', 1)
+
     if source == 'doi':
+        if identifier.startswith('10/'):
+            from manubot.cite.doi import expand_short_doi
+            try:
+                identifier = expand_short_doi(identifier)
+            except Exception as error:
+                # If DOI shortening fails, return the unshortened DOI.
+                # DOI metadata lookup will eventually fail somewhere with
+                # appropriate error handling, as opposed to here.
+                logging.error(
+                    f'Error in expand_short_doi for {identifier} '
+                    f'due to a {error.__class__.__name__}:\n{error}'
+                )
+                logging.info(error, exc_info=True)
         identifier = identifier.lower()
+
     if source == 'isbn':
         from isbnlib import to_isbn13
         identifier = to_isbn13(identifier)
+
     return f'{source}:{identifier}'
 
 
@@ -51,6 +69,7 @@ regexes = {
     'pmid': re.compile(r'[1-9][0-9]{0,7}'),
     'pmcid': re.compile(r'PMC[0-9]+'),
     'doi': re.compile(r'10\.[0-9]{4,9}/\S+'),
+    'shortdoi': re.compile(r'10/[a-zA-Z0-9]+'),
     'wikidata': re.compile(r'Q[0-9]+'),
 }
 
@@ -83,15 +102,23 @@ def inspect_citation_identifier(citation):
             )
 
     if source == 'doi':
-        # https://www.crossref.org/blog/dois-and-matching-regular-expressions/
-        if not identifier.startswith('10.'):
-            return (
-                'DOIs must start with `10.`.'
-            )
-        elif not regexes['doi'].fullmatch(identifier):
+        if identifier.startswith('10.'):
+            # https://www.crossref.org/blog/dois-and-matching-regular-expressions/
+            if not regexes['doi'].fullmatch(identifier):
+                return (
+                    'Identifier does not conform to the DOI regex. '
+                    'Double check the DOI.'
+                )
+        elif identifier.startswith('10/'):
+            # shortDOI, see http://shortdoi.org
+            if not regexes['shortdoi'].fullmatch(identifier):
+                return (
+                    'Identifier does not conform to the shortDOI regex. '
+                    'Double check the shortDOI.'
+                )
+        else:
             return (
-                'Identifier does not conform to the DOI regex. '
-                'Double check the DOI.'
+                'DOIs must start with `10.` (or `10/` for shortDOIs).'
             )
 
     if source == 'isbn':
