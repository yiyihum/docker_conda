diff --git a/tests/test_outliers/test_winsorizer.py b/tests/test_outliers/test_winsorizer.py
index 2b716a0..1737d9f 100644
--- a/tests/test_outliers/test_winsorizer.py
+++ b/tests/test_outliers/test_winsorizer.py
@@ -164,6 +164,87 @@ def test_quantile_capping_both_tails_with_fold_15_percent(df_normal_dist):
     assert np.round(df_normal_dist["var"].max(), 3) > np.round(0.11823196128033647, 3)
 
 
+def test_indicators_are_added(df_normal_dist):
+    transformer = Winsorizer(
+        tail="both", capping_method="quantiles", fold=0.1, add_indicators=True)
+    X = transformer.fit_transform(df_normal_dist)
+    # test that the number of output variables is correct
+    assert X.shape[1] == 3 * df_normal_dist.shape[1]
+    assert np.all(X.iloc[:, df_normal_dist.shape[1]:].sum(axis=0) > 0)
+
+    transformer = Winsorizer(
+        tail="left", capping_method="quantiles", fold=0.1, add_indicators=True)
+    X = transformer.fit_transform(df_normal_dist)
+    assert X.shape[1] == 2 * df_normal_dist.shape[1]
+    assert np.all(X.iloc[:, df_normal_dist.shape[1]:].sum(axis=0) > 0)
+
+    transformer = Winsorizer(
+        tail="right", capping_method="quantiles", fold=0.1, add_indicators=True)
+    X = transformer.fit_transform(df_normal_dist)
+    assert X.shape[1] == 2 * df_normal_dist.shape[1]
+    assert np.all(X.iloc[:, df_normal_dist.shape[1]:].sum(axis=0) > 0)
+
+
+def test_indicators_filter_variables(df_vartypes):
+    transformer = Winsorizer(
+        variables=["Age", "Marks"],
+        tail="both",
+        capping_method="quantiles",
+        fold=0.1,
+        add_indicators=True
+    )
+    X = transformer.fit_transform(df_vartypes)
+    assert X.shape[1] == df_vartypes.shape[1] + 4
+
+    transformer.set_params(tail="left")
+    X = transformer.fit_transform(df_vartypes)
+    assert X.shape[1] == df_vartypes.shape[1] + 2
+
+    transformer.set_params(tail="right")
+    X = transformer.fit_transform(df_vartypes)
+    assert X.shape[1] == df_vartypes.shape[1] + 2
+
+
+def test_indicators_are_correct():
+    transformer = Winsorizer(
+        tail="left",
+        capping_method="quantiles",
+        fold=0.1,
+        add_indicators=True
+    )
+    df = pd.DataFrame({"col": np.arange(100).astype(np.float64)})
+    df_out = transformer.fit_transform(df)
+    expected_ind = np.r_[np.repeat(True, 10), np.repeat(False, 90)].astype(np.float64)
+    pd.testing.assert_frame_equal(
+        df_out.drop("col", axis=1),
+        df.assign(col_left=expected_ind).drop("col", axis=1)
+    )
+
+    transformer.set_params(tail="right")
+    df_out = transformer.fit_transform(df)
+    expected_ind = np.r_[np.repeat(False, 90), np.repeat(True, 10)].astype(np.float64)
+    pd.testing.assert_frame_equal(
+        df_out.drop("col", axis=1),
+        df.assign(col_right=expected_ind).drop("col", axis=1)
+    )
+
+    transformer.set_params(tail="both")
+    df_out = transformer.fit_transform(df)
+    expected_ind_left = np.r_[
+        np.repeat(True, 10), np.repeat(False, 90)
+    ].astype(np.float64)
+    expected_ind_right = np.r_[
+        np.repeat(False, 90), np.repeat(True, 10)
+    ].astype(np.float64)
+    pd.testing.assert_frame_equal(
+        df_out.drop("col", axis=1),
+        df.assign(
+            col_left=expected_ind_left,
+            col_right=expected_ind_right
+        ).drop("col", axis=1)
+    )
+
+
 def test_transformer_ignores_na_in_df(df_na):
     # test case 7: dataset contains na and transformer is asked to ignore them
     transformer = Winsorizer(
@@ -227,6 +308,15 @@ def test_error_if_capping_method_quantiles_and_fold_value_not_permitted():
         Winsorizer(capping_method="quantiles", fold=0.3)
 
 
+def test_error_if_add_incators_not_permitted():
+    with pytest.raises(ValueError):
+        Winsorizer(add_indicators=-1)
+    with pytest.raises(ValueError):
+        Winsorizer(add_indicators=())
+    with pytest.raises(ValueError):
+        Winsorizer(add_indicators=[True])
+
+
 def test_fit_raises_error_if_na_in_inut_df(df_na):
     # test case 8: when dataset contains na, fit method
     with pytest.raises(ValueError):
