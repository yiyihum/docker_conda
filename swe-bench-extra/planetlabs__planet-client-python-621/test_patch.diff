diff --git a/tests/integration/test_data_api.py b/tests/integration/test_data_api.py
index a488165..3c02722 100644
--- a/tests/integration/test_data_api.py
+++ b/tests/integration/test_data_api.py
@@ -110,7 +110,7 @@ async def test_quick_search_sort(item_descriptions,
                                  search_response,
                                  session):
 
-    sort = 'created asc'
+    sort = 'acquired asc'
     quick_search_url = f'{TEST_URL}/quick-search?sort={sort}'
 
     item1, _, _ = item_descriptions
diff --git a/tests/integration/test_data_cli.py b/tests/integration/test_data_cli.py
index 4e7e4ec..cf10c75 100644
--- a/tests/integration/test_data_cli.py
+++ b/tests/integration/test_data_cli.py
@@ -401,6 +401,51 @@ def test_data_search_quick_filter_success(invoke, item_types):
     assert len(result.output.strip().split('\n')) == 1  # we have 1 feature
 
 
+@respx.mock
+def test_data_search_quick_sort_success(invoke):
+    # this cannot be the default value or else the sort param will not be
+    # added to the url
+    sort = 'published asc'
+    search_url = f'{TEST_QUICKSEARCH_URL}?sort={sort}'
+
+    filter = {
+        "type": "DateRangeFilter",
+        "field_name": "acquired",
+        "config": {
+            "gt": "2019-12-31T00:00:00Z"
+        }
+    }
+
+    feature = {"key": "value"}
+    mock_resp = httpx.Response(HTTPStatus.OK, json={'features': [feature]})
+    respx.post(search_url).return_value = mock_resp
+
+    runner = CliRunner()
+    result = invoke(
+        ['search-quick', 'PSScene', json.dumps(filter), f'--sort={sort}'],
+        runner=runner)
+    assert result.exit_code == 0
+    assert json.loads(result.output) == feature
+
+
+@respx.mock
+def test_data_search_quick_sort_invalid(invoke):
+    filter = {
+        "type": "DateRangeFilter",
+        "field_name": "acquired",
+        "config": {
+            "gt": "2019-12-31T00:00:00Z"
+        }
+    }
+
+    runner = CliRunner()
+    result = invoke(
+        ['search-quick', 'PSScene', json.dumps(filter), '--sort=invalid'],
+        runner=runner)
+
+    assert result.exit_code == 2
+
+
 @respx.mock
 @pytest.mark.parametrize("limit,limited_list_length", [(None, 100), (0, 102),
                                                        (1, 1)])
