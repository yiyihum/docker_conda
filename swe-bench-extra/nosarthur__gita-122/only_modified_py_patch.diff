diff --git a/gita/__main__.py b/gita/__main__.py
index 43116df..beecab2 100644
--- a/gita/__main__.py
+++ b/gita/__main__.py
@@ -222,6 +222,42 @@ def f_git_cmd(args: argparse.Namespace):
                 subprocess.run(cmds, cwd=path)
 
 
+def f_shell(args):
+    """
+    Delegate shell command defined in `args.man`, which may or may not
+    contain repo names.
+    """
+    names = []
+    repos = utils.get_repos()
+    groups = utils.get_groups()
+    ctx = utils.get_context()
+    for i, word in enumerate(args.man):
+        if word in repos or word in groups:
+            names.append(word)
+        else:
+            break
+    args.repo = names
+    # TODO: redundant with f_git_cmd
+    if not args.repo and ctx:
+        args.repo = [ctx.stem]
+    if args.repo:  # with user specified repo(s) or group(s)
+        chosen = {}
+        for k in args.repo:
+            if k in repos:
+                chosen[k] = repos[k]
+            if k in groups:
+                for r in groups[k]:
+                    chosen[r] = repos[r]
+        repos = chosen
+    cmds = args.man[i:]
+    for name, path in repos.items():
+        # TODO: pull this out as a function
+        got = subprocess.run(cmds, cwd=path, check=True,
+                stdout=subprocess.PIPE,
+                stderr=subprocess.STDOUT)
+        print(utils.format_output(got.stdout.decode(), name))
+
+
 def f_super(args):
     """
     Delegate git command/alias defined in `args.man`, which may or may not
@@ -415,6 +451,21 @@ def main(argv=None):
         "Another: gita super checkout master ")
     p_super.set_defaults(func=f_super)
 
+    # shell mode
+    p_shell = subparsers.add_parser(
+        'shell',
+        description='shell mode: delegate any shell command in specified or '
+        'all repo(s).\n'
+        'Examples:\n \t gita shell pwd\n'
+        '\t gita shell repo1 repo2 repo3 touch xx')
+    p_shell.add_argument(
+        'man',
+        nargs=argparse.REMAINDER,
+        help="execute arbitrary shell command for specified or all repos "
+        "Example: gita shell myrepo1 ls"
+        "Another: gita shell git checkout master ")
+    p_shell.set_defaults(func=f_shell)
+
     # sub-commands that fit boilerplate
     cmds = utils.get_cmds_from_files()
     for name, data in cmds.items():
diff --git a/gita/utils.py b/gita/utils.py
index 1d334ad..9572f02 100644
--- a/gita/utils.py
+++ b/gita/utils.py
@@ -167,7 +167,7 @@ async def run_async(repo_name: str, path: str, cmds: List[str]) -> Union[None, s
     stdout, stderr = await process.communicate()
     for pipe in (stdout, stderr):
         if pipe:
-            print(format_output(pipe.decode(), f'{repo_name}: '))
+            print(format_output(pipe.decode(), repo_name))
     # The existence of stderr is not good indicator since git sometimes write
     # to stderr even if the execution is successful, e.g. git fetch
     if process.returncode != 0:
@@ -178,7 +178,7 @@ def format_output(s: str, prefix: str):
     """
     Prepends every line in given string with the given prefix.
     """
-    return ''.join([f'{prefix}{line}' for line in s.splitlines(keepends=True)])
+    return ''.join([f'{prefix}: {line}' for line in s.splitlines(keepends=True)])
 
 
 def exec_async_tasks(tasks: List[Coroutine]) -> List[Union[None, str]]:
diff --git a/setup.py b/setup.py
index c6dbe0e..c729963 100644
--- a/setup.py
+++ b/setup.py
@@ -7,7 +7,7 @@ with open('README.md', encoding='utf-8') as f:
 setup(
     name='gita',
     packages=['gita'],
-    version='0.12.6',
+    version='0.12.7',
     license='MIT',
     description='Manage multiple git repos with sanity',
     long_description=long_description,

