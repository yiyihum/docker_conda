diff --git a/tests/integration/test_snapshot_option_extension.py b/tests/integration/test_snapshot_option_extension.py
index 546da3f..884f92a 100644
--- a/tests/integration/test_snapshot_option_extension.py
+++ b/tests/integration/test_snapshot_option_extension.py
@@ -37,12 +37,7 @@ def test_snapshot_default_extension_option_failure(testfile):
         "--snapshot-default-extension",
         "syrupy.extensions.amber.DoesNotExistExtension",
     )
-    result.stderr.re_match_lines(
-        (
-            r".*error: argument --snapshot-default-extension"
-            r": Member 'DoesNotExistExtension' not found.*",
-        )
-    )
+    result.stdout.re_match_lines((r".*: Member 'DoesNotExistExtension' not found.*",))
     assert not Path(
         testfile.tmpdir, "__snapshots__", "test_file", "test_default.raw"
     ).exists()
diff --git a/tests/integration/test_snapshot_option_extension_pythonpath.py b/tests/integration/test_snapshot_option_extension_pythonpath.py
new file mode 100644
index 0000000..3570154
--- /dev/null
+++ b/tests/integration/test_snapshot_option_extension_pythonpath.py
@@ -0,0 +1,101 @@
+import textwrap
+from pathlib import Path
+
+import pytest
+
+import syrupy
+
+SUBDIR = "subdir_not_on_default_path"
+
+
+@pytest.fixture(autouse=True)
+def cache_clear():
+    syrupy.__import_extension.cache_clear()
+
+
+@pytest.fixture
+def testfile(pytester):
+    subdir = pytester.mkpydir(SUBDIR)
+
+    Path(
+        subdir,
+        "extension_file.py",
+    ).write_text(
+        data=textwrap.dedent(
+            """
+            from syrupy.extensions.single_file import SingleFileSnapshotExtension
+            class MySingleFileExtension(SingleFileSnapshotExtension):
+                pass
+            """
+        ),
+        encoding="utf-8",
+    )
+
+    pytester.makepyfile(
+        test_file=(
+            """
+            def test_default(snapshot):
+                assert b"default extension serializer" == snapshot
+            """
+        )
+    )
+
+    return pytester
+
+
+def test_snapshot_default_extension_option_success(testfile):
+    testfile.makeini(
+        f"""
+        [pytest]
+        pythonpath =
+            {Path(testfile.path, SUBDIR).as_posix()}
+    """
+    )
+
+    result = testfile.runpytest(
+        "-v",
+        "--snapshot-update",
+        "--snapshot-default-extension",
+        "extension_file.MySingleFileExtension",
+    )
+    result.stdout.re_match_lines((r"1 snapshot generated\."))
+    assert Path(
+        testfile.path, "__snapshots__", "test_file", "test_default.raw"
+    ).exists()
+    assert not result.ret
+
+
+def test_snapshot_default_extension_option_module_not_found(testfile):
+    result = testfile.runpytest(
+        "-v",
+        "--snapshot-update",
+        "--snapshot-default-extension",
+        "extension_file.MySingleFileExtension",
+    )
+    result.stdout.re_match_lines((r".*: Module 'extension_file' does not exist.*",))
+    assert not Path(
+        testfile.path, "__snapshots__", "test_file", "test_default.raw"
+    ).exists()
+    assert result.ret
+
+
+def test_snapshot_default_extension_option_failure(testfile):
+    testfile.makeini(
+        f"""
+        [pytest]
+        pythonpath =
+            {Path(testfile.path, SUBDIR).as_posix()}
+    """
+    )
+
+    result = testfile.runpytest(
+        "-v",
+        "--snapshot-update",
+        "--snapshot-default-extension",
+        "extension_file.DoesNotExistExtension",
+    )
+    result.stdout.re_match_lines((r".*: Member 'DoesNotExistExtension' not found.*",))
+    assert not Path(
+        testfile.path, "__snapshots__", "test_file", "test_default.raw"
+    ).exists()
+    assert result.ret
