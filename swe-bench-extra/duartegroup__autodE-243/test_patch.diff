diff --git a/tests/test_hessian.py b/tests/test_hessian.py
index c611c22..554a4c2 100644
--- a/tests/test_hessian.py
+++ b/tests/test_hessian.py
@@ -13,7 +13,7 @@ from autode.calculations import Calculation
 from autode.species import Molecule
 from autode.values import Frequency
 from autode.geom import calc_rmsd
-from autode.units import wavenumber
+from autode.units import wavenumber, ha_per_ang_sq
 from autode.exceptions import CalculationException
 from autode.wrappers.keywords import pbe0
 from autode.transition_states.base import displaced_species_along_mode
@@ -243,6 +243,7 @@ def assert_correct_co2_frequencies(hessian, expected=(666, 1415, 2517)):
     """Ensure the projected frequencies of CO2 are roughly right"""
     nu_1, nu_2, nu_3 = expected
 
+    print(hessian.frequencies_proj)
     assert sum(freq == 0.0 for freq in hessian.frequencies_proj) == 5
 
     # Should have a degenerate bending mode for CO2 with ν = 666 cm-1
@@ -419,6 +420,7 @@ def test_hessian_modes():
 
     h2o = Molecule("H2O_hess_orca.xyz")
     h2o.hessian = h2o_hessian_arr
+    assert h2o.hessian.units == ha_per_ang_sq
 
     # The structure is a minimum, thus there should be no imaginary frequencies
     assert h2o.imaginary_frequencies is None
@@ -441,6 +443,9 @@ def test_hessian_modes():
             vib_mode, h2o.hessian.normal_modes[6 + i], atol=0.1
         ) or np.allclose(vib_mode, -h2o.hessian.normal_modes[6 + i], atol=0.1)
 
+    # Hessian units should be retained
+    assert h2o.hessian.units == ha_per_ang_sq
+
 
 @testutils.work_in_zipped_dir(os.path.join(here, "data", "hessians.zip"))
 def test_proj_modes():
@@ -595,6 +600,8 @@ def test_nwchem_hessian_co2():
         keywords=ade.HessianKeywords(),
     )
     calc.set_output_filename("CO2_hess_nwchem.out")
+    print(co2.hessian)
+    print(co2.hessian._mass_weighted)
     assert_correct_co2_frequencies(
         hessian=co2.hessian, expected=(659.76, 1406.83, 2495.73)
     )
diff --git a/tests/test_value.py b/tests/test_value.py
index d2d23a0..cf115e9 100644
--- a/tests/test_value.py
+++ b/tests/test_value.py
@@ -3,6 +3,7 @@ import numpy as np
 from autode.constants import Constants
 from autode.units import ha, kjmol, kcalmol, ev, ang, a0, nm, pm, m, rad, deg
 from autode.values import (
+    _to,
     Value,
     Distance,
     MWDistance,
@@ -278,3 +279,25 @@ def test_div_mul_generate_floats():
 
     # Note: this behaviour is not ideal. But it is better than having the wrong units
     assert isinstance(e * e, float)
+
+
+def test_operations_maintain_other_attrs():
+
+    e = Energy(1, estimated=True, units="eV")
+    assert e.is_estimated and e.units == ev
+
+    e *= 2
+    assert e.is_estimated and e.units == ev
+
+    e /= 2
+    assert e.is_estimated and e.units == ev
+
+    a = e * 2
+    assert a.is_estimated and e.units == ev
+
+
+def test_inplace_value_modification_raises():
+
+    e = Energy(1, units="Ha")
+    with pytest.raises(ValueError):  # floats are immutable
+        _to(e, units="eV", inplace=True)
diff --git a/tests/test_values.py b/tests/test_values.py
index cac6882..dd80591 100644
--- a/tests/test_values.py
+++ b/tests/test_values.py
@@ -106,4 +106,22 @@ class InvalidValue(float):
 def test_to_unsupported():
 
     with pytest.raises(ValueError):
-        _ = _to(InvalidValue(), Unit())
+        _ = _to(InvalidValue(), Unit(), inplace=True)
+
+
+def test_inplace_modification():
+
+    x = Gradient([[1.0, 1.0, 1.0]], units="Ha / Å")
+    return_value = x.to_("eV / Å")
+    assert return_value is None
+
+    assert not np.allclose(x, np.ones(shape=(1, 3)))
+
+
+def test_copy_conversion():
+
+    x = Gradient([[1.0, 1.0, 1.0]], units="Ha / Å")
+    y = x.to("eV / Å")
+
+    assert not np.allclose(x, y)
+    assert np.allclose(x, np.ones(shape=(1, 3)))
