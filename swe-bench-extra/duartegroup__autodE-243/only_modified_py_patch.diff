diff --git a/autode/hessians.py b/autode/hessians.py
index b3f6149..4b8cc76 100644
--- a/autode/hessians.py
+++ b/autode/hessians.py
@@ -234,9 +234,9 @@ class Hessian(ValueArray):
             axis=np.newaxis,
         )
 
-        return Hessian(
-            H / np.sqrt(np.outer(mass_array, mass_array)), units="J m^-2 kg^-1"
-        )
+        return np.array(
+            H / np.sqrt(np.outer(mass_array, mass_array))
+        )  # J Å^-2 kg^-1
 
     @cached_property
     def _proj_mass_weighted(self) -> np.ndarray:
diff --git a/autode/units.py b/autode/units.py
index 8f18818..4b30a1d 100644
--- a/autode/units.py
+++ b/autode/units.py
@@ -211,15 +211,15 @@ kg_m_sq = CompositeUnit(kg, m, m, name="kg m^2")
 
 
 ha_per_ang = CompositeUnit(
-    ha, per=[ang], aliases=["ha Å-1", "ha Å^-1", "ha/ang"]
+    ha, per=[ang], aliases=["ha / Å", "ha Å-1", "ha Å^-1", "ha/ang"]
 )
 
 ha_per_a0 = CompositeUnit(
-    ha, per=[a0], aliases=["ha a0-1", "ha a0^-1", "ha/bohr"]
+    ha, per=[a0], aliases=["ha / a0", "ha a0-1", "ha a0^-1", "ha/bohr"]
 )
 
 ev_per_ang = CompositeUnit(
-    ev, per=[ang], aliases=["ha a0-1", "ev Å^-1", "ev/ang"]
+    ev, per=[ang], aliases=["ev / Å", "ev Å^-1", "ev/ang"]
 )
 
 kcalmol_per_ang = CompositeUnit(
diff --git a/autode/values.py b/autode/values.py
index 295444d..77fc41c 100644
--- a/autode/values.py
+++ b/autode/values.py
@@ -37,9 +37,12 @@ from autode.units import (
 )
 
 
-def _to(value: Union["Value", "ValueArray"], units: Union[Unit, str]):
+def _to(
+    value: Union["Value", "ValueArray"], units: Union[Unit, str], inplace: bool
+) -> Any:
     """
-    Convert a value or value array to a new unit and return a copy
+    Convert a value or value array to a new unit and return a copy if
+    inplace=False
 
     ---------------------------------------------------------------------------
     Arguments:
@@ -65,23 +68,26 @@ def _to(value: Union["Value", "ValueArray"], units: Union[Unit, str]):
             f"No viable unit conversion from {value.units} -> {units}"
         )
 
-    # Convert to the base unit, then to the new units
-    c = float(units.conversion / value.units.conversion)
-
-    if isinstance(value, Value):
-        return value.__class__(float(value) * c, units=units)
-
-    elif isinstance(value, ValueArray):
-        value[:] = np.array(value, copy=True) * c
-        value.units = units
-        return value
-
-    else:
+    if not (isinstance(value, Value) or isinstance(value, ValueArray)):
         raise ValueError(
             f"Cannot convert {value} to new units. Must be one of"
             f" Value of ValueArray"
         )
 
+    if isinstance(value, Value) and inplace:
+        raise ValueError(
+            "Cannot modify a value inplace as floats are immutable"
+        )
+
+    # Convert to the base unit, then to the new units
+    c = float(units.conversion / value.units.conversion)
+
+    new_value = value if inplace else value.copy()
+    new_value *= c
+    new_value.units = units
+
+    return None if inplace else new_value
+
 
 def _units_init(value, units: Union[Unit, str, None]):
     """Initialise the units of this value
@@ -171,6 +177,11 @@ class Value(ABC, float):
 
         return other.to(self.units)
 
+    def _like_self_from_float(self, value: float) -> "Value":
+        new_value = self.__class__(value, units=self.units)
+        new_value.__dict__.update(self.__dict__)
+        return new_value
+
     def __eq__(self, other) -> bool:
         """Equality of two values, which may be in different units"""
 
@@ -210,8 +221,8 @@ class Value(ABC, float):
         if isinstance(other, np.ndarray):
             return other + float(self)
 
-        return self.__class__(
-            float(self) + self._other_same_units(other), units=self.units
+        return self._like_self_from_float(
+            float(self) + self._other_same_units(other)
         )
 
     def __mul__(self, other) -> Union[float, "Value"]:
@@ -225,8 +236,8 @@ class Value(ABC, float):
             )
             return float(self) * self._other_same_units(other)
 
-        return self.__class__(
-            float(self) * self._other_same_units(other), units=self.units
+        return self._like_self_from_float(
+            float(self) * self._other_same_units(other)
         )
 
     def __rmul__(self, other) -> Union[float, "Value"]:
@@ -240,17 +251,11 @@ class Value(ABC, float):
 
     def __floordiv__(self, other) -> Union[float, "Value"]:
         x = float(self) // self._other_same_units(other)
-        if isinstance(other, Value):
-            return x
-
-        return self.__class__(x, units=self.units)
+        return x if isinstance(other, Value) else self._like_self_from_float(x)
 
     def __truediv__(self, other) -> Union[float, "Value"]:
         x = float(self) / self._other_same_units(other)
-        if isinstance(other, Value):
-            return x
-
-        return self.__class__(x, units=self.units)
+        return x if isinstance(other, Value) else self._like_self_from_float(x)
 
     def __abs__(self) -> "Value":
         """Absolute value"""
@@ -269,7 +274,7 @@ class Value(ABC, float):
         Raises:
             (TypeError):
         """
-        return _to(self, units)
+        return _to(self, units, inplace=False)
 
 
 class Energy(Value):
@@ -652,7 +657,21 @@ class ValueArray(ABC, np.ndarray):
         Raises:
             (TypeError):
         """
-        return _to(self, units)
+        return _to(self, units, inplace=False)
+
+    def to_(self, units) -> None:
+        """
+        Convert this array into a set of new units, inplace. This will not copy
+        the array
+
+        -----------------------------------------------------------------------
+        Returns:
+            (None)
+
+        Raises:
+            (TypeError):
+        """
+        _to(self, units, inplace=True)
 
     def __array_finalize__(self, obj):
         """See https://numpy.org/doc/stable/user/basics.subclassing.html"""
