diff --git a/tests/test_client.py b/tests/test_client.py
index 12f1726..e5536aa 100644
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -717,6 +717,19 @@ class FeatureBasedSolverSelection(unittest.TestCase):
         with self.assertRaises(TypeError):
             self.client.get_solvers(order_by=list)
 
+    def test_order_by_respects_default_solver(self):
+        """order_by used in isolation should not affect default_solver filters (issue #401)"""
+
+        with Client('endpoint', 'token', solver=dict(name='qpu2')) as client:
+            # mock the network call to fetch all solvers
+            client._fetch_solvers = lambda **kw: self.solvers
+
+            # the default solver is set on client
+            self.assertEqual(client.get_solver(), self.qpu2)
+
+            # the default solver should not change when we add order_by
+            self.assertEqual(client.get_solver(order_by='id'), self.qpu2)
+
     def test_order_by_string(self):
         # sort by Solver inferred properties
         self.assertEqual(self.client.get_solvers(order_by='id'), [self.hybrid, self.qpu1, self.qpu2, self.software])
diff --git a/tests/test_upload.py b/tests/test_upload.py
index baf12a2..6717d1e 100644
--- a/tests/test_upload.py
+++ b/tests/test_upload.py
@@ -358,6 +358,12 @@ class TestChunkedData(unittest.TestCase):
         chunks_expected = [self.data]
         self.verify_chunking(cd, chunks_expected)
 
+    def test_chunk_generators(self):
+        cd = ChunkedData(self.data, chunk_size=3)
+        chunks_expected = [b'012', b'345', b'678', b'9']
+        chunks_generated = [g().read() for g in cd.generators()]
+        self.assertListEqual(chunks_expected, chunks_generated)
+
 
 @unittest.skipUnless(config, "No live server configuration available.")
 class TestMultipartUpload(unittest.TestCase):
@@ -620,7 +626,6 @@ class TestMockedMultipartUpload(unittest.TestCase):
 
             def put(path, data, headers, seq=iter(range(Client._UPLOAD_PART_RETRIES+1))):
                 body = data.read()
-                data.seek(0)
                 headers = json.dumps(sorted(headers.items()))
                 keys = [
                     (
