diff --git a/src/csvw/metadata.py b/src/csvw/metadata.py
index 4c69354..9c71fe8 100644
--- a/src/csvw/metadata.py
+++ b/src/csvw/metadata.py
@@ -8,7 +8,6 @@ This module implements (partially) the W3C recommendation
 .. seealso:: https://www.w3.org/TR/tabular-metadata/
 """
 import io
-import re
 import json
 import shutil
 import pathlib
@@ -27,6 +26,7 @@ import uritemplate
 from . import utils
 from .datatypes import DATATYPES
 from .dsv import Dialect, UnicodeReaderWithLineNumber, UnicodeWriter
+from .frictionless import DataPackage
 
 DEFAULT = object()
 
@@ -38,11 +38,6 @@ __all__ = [
 ]
 
 
-# Level 1 variable names according to https://tools.ietf.org/html/rfc6570#section-2.3:
-_varchar = r'([a-zA-Z0-9_]|\%[a-fA-F0-9]{2})'
-_varname = re.compile('(' + _varchar + '([.]?' + _varchar + ')*)$')
-
-
 def log_or_raise(msg, log=None, level='warning', exception_cls=ValueError):
     if log:
         getattr(log, level)(msg)
@@ -368,9 +363,7 @@ class Description(DescriptionBase):
 @attr.s
 class Column(Description):
 
-    name = attr.ib(
-        default=None,
-        validator=utils.attr_valid_re(_varname, nullable=True))
+    name = attr.ib(default=None)
     suppressOutput = attr.ib(default=False)
     titles = attr.ib(
         default=None,
@@ -783,6 +776,10 @@ class TableGroup(TableLike):
         for table in self.tables:
             table._parent = self
 
+    @classmethod
+    def from_frictionless_datapackage(cls, dp):
+        return DataPackage(dp).to_tablegroup(cls)
+
     def read(self):
         """
         Read all data of a TableGroup
diff --git a/src/csvw/utils.py b/src/csvw/utils.py
index 6cf85a0..c423732 100644
--- a/src/csvw/utils.py
+++ b/src/csvw/utils.py
@@ -30,26 +30,6 @@ def attr_asdict(obj, omit_defaults=True, omit_private=True):
     return res
 
 
-def attr_valid_re(regex_or_pattern, nullable=False):
-    if hasattr(regex_or_pattern, 'match'):
-        pattern = regex_or_pattern
-    else:
-        pattern = re.compile(regex_or_pattern)
-
-    msg = '{0} is not a valid {1}'
-
-    if nullable:
-        def valid_re(instance, attribute, value):
-            if value is not None and pattern.match(value) is None:
-                raise ValueError(msg.format(value, attribute.name))
-    else:
-        def valid_re(instance, attribute, value):
-            if pattern.match(value) is None:
-                raise ValueError(msg.format(value, attribute.name))
-
-    return valid_re
-
-
 class lazyproperty(object):
     """Non-data descriptor caching the computed result as instance attribute.
     >>> import itertools

