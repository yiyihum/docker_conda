diff --git a/dacsspace/dacsspace.py b/dacsspace/dacsspace.py
index fcecea7..b953a5b 100644
--- a/dacsspace/dacsspace.py
+++ b/dacsspace/dacsspace.py
@@ -6,9 +6,10 @@ from .validator import Validator
 class DACSspace:
     """Base DACSspace class. Fetches data from AS, validates and reports results."""
 
-    def run(self, published_only, invalid_only):
+    def run(self, published_only, invalid_only,
+            schema_identifier='single_level_required.json', schema_filepath=None):
         client = ArchivesSpaceClient()
-        validator = Validator()
+        validator = Validator(schema_identifier, schema_filepath)
         reporter = CSVReporter()
         data = client.get_resources(published_only)
         results = []
@@ -21,3 +22,6 @@ class DACSspace:
 # These variables should eventually be passed as arguments in the command line
 # published_only = False
 # invalid_only = True
+# schema_identifier - should default to single_level_required.json
+# schema_filepath - should default to None, only one of schema_identifier
+# or schema_filepath allowed
diff --git a/dacsspace/validator.py b/dacsspace/validator.py
index 82cc9b3..3f4d8cb 100644
--- a/dacsspace/validator.py
+++ b/dacsspace/validator.py
@@ -1,14 +1,25 @@
 import json
 
-from jsonschema import Draft7Validator
+from jsonschema import Draft202012Validator
 
 
 class Validator:
     """Validates data from ArchivesSpace."""
 
-    def __init__(self):
-        with open("single_level_required.json", "r") as json_file:
+    def __init__(self, schema_identifier, schema_filepath):
+        """Loads and validates the schema from an identifier or filepath.
+
+        Args:
+            schema_identifier (str): a pointer to a schema that is part of
+            DACSspace, located in the `schemas` directory.
+            schema_filepath (str): a filepath pointing to an external schema.
+        """
+        self.validator = Draft202012Validator
+        if not schema_filepath:
+            schema_filepath = f"schemas/{schema_identifier.removesuffix('.json')}.json"
+        with open(schema_filepath, "r") as json_file:
             self.schema = json.load(json_file)
+        self.validator.check_schema(self.schema)
 
     def validate_data(self, data):
         """Validates data.
@@ -21,8 +32,7 @@ class Validator:
            indication of the validation result and, if necessary, an explanation
            of any validation errors. { "valid": False, "explanation": "You are missing the following fields..." }
         """
-        schema = self.schema
-        validator = Draft7Validator(schema)
+        validator = self.validator(self.schema)
         errors_found = [error.message for error in validator.iter_errors(data)]
         if len(errors_found):
             return {"valid": False, "explanation": "\n".join(errors_found)}

