diff --git a/pybryt/execution/__init__.py b/pybryt/execution/__init__.py
index 89ce8a2..64be0d7 100644
--- a/pybryt/execution/__init__.py
+++ b/pybryt/execution/__init__.py
@@ -1,6 +1,6 @@
 """Submission execution internals for PyBryt"""
 
-__all__ = ["check_time_complexity", "tracing_off", "tracing_on"]
+__all__ = ["check_time_complexity", "no_tracing"]
 
 import os
 import dill
@@ -13,7 +13,9 @@ from typing import Any, List, Tuple, Optional
 from textwrap import dedent
 
 from .complexity import check_time_complexity, TimeComplexityResult
-from .tracing import create_collector, _get_tracing_frame, tracing_off, tracing_on, TRACING_VARNAME
+from .tracing import (
+    create_collector, _get_tracing_frame, no_tracing, tracing_off, tracing_on, TRACING_VARNAME
+)
 from ..preprocessors import IntermediateVariablePreprocessor
 from ..utils import make_secret
 
diff --git a/pybryt/execution/tracing.py b/pybryt/execution/tracing.py
index c733705..a45f047 100644
--- a/pybryt/execution/tracing.py
+++ b/pybryt/execution/tracing.py
@@ -216,3 +216,28 @@ def tracing_on(frame=None, tracing_func=None):
     vn2 = f"sys_{make_secret()}"
     frame.f_globals[vn] = tracing_func
     exec(f"import sys as {vn2}\n{vn2}.settrace({vn})", frame.f_globals, frame.f_locals)
+
+
+class no_tracing:
+    """
+    A context manager for turning tracing off for a block of code in a submission.
+
+    If PyBryt is tracing code, any code inside this context will not be traced for values in memory.
+    If PyBryt is not tracing, no action is taken.
+
+    .. code-block:: python
+
+        with pybryt.no_tracing():
+            # this code is not traced
+            foo(1)
+        
+        # this code is traced
+        foo(2)
+    """
+
+    def __enter__(self):
+        tracing_off()
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        tracing_on()
+        return False

