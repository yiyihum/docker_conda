diff --git a/trackintel/preprocessing/positionfixes.py b/trackintel/preprocessing/positionfixes.py
index 9adcb64..4a1bdae 100644
--- a/trackintel/preprocessing/positionfixes.py
+++ b/trackintel/preprocessing/positionfixes.py
@@ -4,10 +4,10 @@ import warnings
 import geopandas as gpd
 import numpy as np
 import pandas as pd
-from shapely.geometry import LineString, Point
+from shapely.geometry import LineString
 
-from trackintel.geogr.distances import haversine_dist
-from trackintel.preprocessing.util import applyParallel, _explode_agg
+from trackintel.geogr.distances import check_gdf_planar, haversine_dist
+from trackintel.preprocessing.util import _explode_agg, angle_centroid_multipoints, applyParallel
 
 
 def generate_staypoints(
@@ -411,7 +411,7 @@ def _generate_staypoints_sliding_user(
     y = df[geo_col].y.to_numpy()
 
     ret_sp = []
-    start = 0
+    curr = start = 0
     for curr in range(1, len(df)):
 
         # the gap of two consecutive positionfixes should not be too long
@@ -451,8 +451,12 @@ def __create_new_staypoints(start, end, pfs, elevation_flag, geo_col, last_flag=
     # if end is the last pfs, we want to include the info from it as well
     if last_flag:
         end = len(pfs)
+    points = pfs[geo_col].iloc[start:end].unary_union
+    if check_gdf_planar(pfs):
+        new_sp[geo_col] = points.centroid
+    else:
+        new_sp[geo_col] = angle_centroid_multipoints(points)[0]
 
-    new_sp[geo_col] = Point(pfs[geo_col].iloc[start:end].x.median(), pfs[geo_col].iloc[start:end].y.median())
     if elevation_flag:
         new_sp["elevation"] = pfs["elevation"].iloc[start:end].median()
     new_sp["pfs_id"] = pfs.index[start:end].to_list()
diff --git a/trackintel/preprocessing/staypoints.py b/trackintel/preprocessing/staypoints.py
index 36b0bbd..9b62793 100644
--- a/trackintel/preprocessing/staypoints.py
+++ b/trackintel/preprocessing/staypoints.py
@@ -4,8 +4,8 @@ import pandas as pd
 from sklearn.cluster import DBSCAN
 import warnings
 
-from trackintel.geogr.distances import meters_to_decimal_degrees
-from trackintel.preprocessing.util import applyParallel
+from trackintel.geogr.distances import meters_to_decimal_degrees, check_gdf_planar
+from trackintel.preprocessing.util import applyParallel, angle_centroid_multipoints
 
 
 def generate_locations(
@@ -136,9 +136,11 @@ def generate_locations(
         # filter staypoints not belonging to locations
         locs = locs.loc[locs["location_id"] != -1]
 
-        with warnings.catch_warnings():  # TODO: fix bug for geographic crs #437
-            warnings.simplefilter("ignore", category=UserWarning)
-            locs["center"] = locs.geometry.centroid  # creates warning for geographic crs
+        if check_gdf_planar(locs):
+            locs["center"] = locs.geometry.centroid
+        else:
+            # error of wrapping e.g. mean([-180, +180]) -> own function needed
+            locs["center"] = angle_centroid_multipoints(locs.geometry)
 
         # extent is the convex hull of the geometry
         locs["extent"] = locs.geometry.convex_hull
@@ -154,7 +156,7 @@ def generate_locations(
         else:
             locs.loc[pointLine_idx, "extent"] = locs.loc[pointLine_idx, "extent"].buffer(epsilon)
 
-        locs = locs.set_geometry("center")
+        locs = locs.set_geometry("center", crs=sp.crs)
         locs = locs[["user_id", "location_id", "center", "extent"]]
 
         # index management
diff --git a/trackintel/preprocessing/util.py b/trackintel/preprocessing/util.py
index ab74ea9..a1f9c31 100644
--- a/trackintel/preprocessing/util.py
+++ b/trackintel/preprocessing/util.py
@@ -1,6 +1,11 @@
 from datetime import timedelta
+
+import geopandas as gpd
+import numpy as np
 import pandas as pd
+import pygeos
 from joblib import Parallel, delayed
+from shapely.geometry.base import BaseGeometry
 from tqdm import tqdm
 
 
@@ -103,3 +108,33 @@ def _explode_agg(column, agg, orig_df, agg_df):
     temp = temp[temp[column].notna()]
     temp.index = temp[column]
     return orig_df.join(temp[agg], how="left")
+
+
+def angle_centroid_multipoints(geometry):
+    """Calculate the mean of angles of MultiPoints
+
+    Parameters
+    ----------
+    geometry : GeoSeries, shapely.geometry.Point, shapely.geometry.MultiPoint
+        Should contain only Points or MultiPoints any other lead to wrong results.
+
+    Returns
+    -------
+    geopandas.GeometryArray
+        Centroid of geometries (shapely.Point)
+    """
+    g = pygeos.from_shapely(geometry)
+    g, index = pygeos.get_coordinates(g, return_index=True)
+    # number of coordinate pairs per MultiPoint
+    count = np.bincount(index)
+    x, y = g[:, 0], g[:, 1]
+    # calculate mean of y Coordinates -> no wrapping
+    y = np.bincount(index, weights=y) / count
+    # calculate mean of x Coordinates with wrapping
+    x_rad = np.deg2rad(x)
+    x_sin = np.bincount(index, weights=np.sin(x_rad)) / count
+    x_cos = np.bincount(index, weights=np.cos(x_rad)) / count
+    x = np.rad2deg(np.arctan2(x_sin, x_cos))
+    # shapely Geometry has no crs information
+    crs = None if isinstance(geometry, BaseGeometry) else geometry.crs
+    return gpd.points_from_xy(x, y, crs=crs)
