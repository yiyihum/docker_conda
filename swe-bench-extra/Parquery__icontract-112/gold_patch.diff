diff --git a/icontract/_checkers.py b/icontract/_checkers.py
index 1b27f5a..1dc79d3 100644
--- a/icontract/_checkers.py
+++ b/icontract/_checkers.py
@@ -66,6 +66,27 @@ def _kwargs_from_call(param_names: List[str], kwdefaults: Dict[str, Any], args:
     return mapping
 
 
+def _not_check(check: Any, contract: Contract) -> bool:
+    """
+    Negate the check value of a condition and capture missing boolyness (*e.g.*, when check is a numpy array).
+
+    :param check: value of the evaluated condition
+    :param contract: corresponding to the check
+    :return: negated check
+    :raise: ValueError if the check could not be negated
+    """
+    try:
+        return not check
+    except Exception as err:  # pylint: disable=broad-except
+        msg_parts = []  # type: List[str]
+        if contract.location is not None:
+            msg_parts.append("{}:\n".format(contract.location))
+
+        msg_parts.append('Failed to negate the evaluation of the condition.')
+
+        raise ValueError(''.join(msg_parts)) from err
+
+
 def _assert_precondition(contract: Contract, resolved_kwargs: Mapping[str, Any]) -> None:
     """
     Assert that the contract holds as a precondition.
@@ -88,7 +109,7 @@ def _assert_precondition(contract: Contract, resolved_kwargs: Mapping[str, Any])
 
     check = contract.condition(**condition_kwargs)
 
-    if not check:
+    if _not_check(check=check, contract=contract):
         if contract.error is not None and (inspect.ismethod(contract.error) or inspect.isfunction(contract.error)):
             assert contract.error_arg_set is not None, "Expected error_arg_set non-None if contract.error a function."
             assert contract.error_args is not None, "Expected error_args non-None if contract.error a function."
@@ -127,7 +148,7 @@ def _assert_invariant(contract: Contract, instance: Any) -> None:
     else:
         check = contract.condition()
 
-    if not check:
+    if _not_check(check=check, contract=contract):
         if contract.error is not None and (inspect.ismethod(contract.error) or inspect.isfunction(contract.error)):
             assert contract.error_arg_set is not None, "Expected error_arg_set non-None if contract.error a function."
             assert contract.error_args is not None, "Expected error_args non-None if contract.error a function."
@@ -199,7 +220,7 @@ def _assert_postcondition(contract: Contract, resolved_kwargs: Mapping[str, Any]
 
     check = contract.condition(**condition_kwargs)
 
-    if not check:
+    if _not_check(check=check, contract=contract):
         if contract.error is not None and (inspect.ismethod(contract.error) or inspect.isfunction(contract.error)):
             assert contract.error_arg_set is not None, "Expected error_arg_set non-None if contract.error a function."
             assert contract.error_args is not None, "Expected error_args non-None if contract.error a function."
