diff --git a/tests/test_invariant.py b/tests/test_invariant.py
index 114649e..302bb5d 100644
--- a/tests/test_invariant.py
+++ b/tests/test_invariant.py
@@ -9,6 +9,7 @@ from typing import Optional  # pylint: disable=unused-import
 
 import icontract
 import tests.error
+import tests.mock
 
 
 class TestOK(unittest.TestCase):
@@ -587,3 +588,19 @@ class TestInvalid(unittest.TestCase):
         self.assertIsNotNone(val_err)
         self.assertEqual("Expected an invariant condition with at most an argument 'self', but got: ['self', 'z']",
                          str(val_err))
+
+    def test_no_boolyness(self):
+        @icontract.invariant(lambda self: tests.mock.NumpyArray([True, False]))
+        class A:
+            def __init__(self) -> None:
+                pass
+
+        value_error = None  # type: Optional[ValueError]
+        try:
+            _ = A()
+        except ValueError as err:
+            value_error = err
+
+        self.assertIsNotNone(value_error)
+        self.assertEqual('Failed to negate the evaluation of the condition.',
+                         tests.error.wo_mandatory_location(str(value_error)))
diff --git a/tests/test_postcondition.py b/tests/test_postcondition.py
index 3ea09f0..7e27bdc 100644
--- a/tests/test_postcondition.py
+++ b/tests/test_postcondition.py
@@ -11,6 +11,7 @@ from typing import Optional, List, Type  # pylint: disable=unused-import
 
 import icontract
 import tests.error
+import tests.mock
 
 
 class TestOK(unittest.TestCase):
@@ -438,3 +439,18 @@ class TestInvalid(unittest.TestCase):
         self.assertEqual("The argument(s) of the postcondition error have not been set: ['z']. "
                          "Does the original function define them? Did you supply them in the call?",
                          tests.error.wo_mandatory_location(str(type_error)))
+
+    def test_no_boolyness(self):
+        @icontract.ensure(lambda: tests.mock.NumpyArray([True, False]))
+        def some_func() -> None:
+            pass
+
+        value_error = None  # type: Optional[ValueError]
+        try:
+            some_func()
+        except ValueError as err:
+            value_error = err
+
+        self.assertIsNotNone(value_error)
+        self.assertEqual('Failed to negate the evaluation of the condition.',
+                         tests.error.wo_mandatory_location(str(value_error)))
diff --git a/tests/test_precondition.py b/tests/test_precondition.py
index 01b3e99..83ba7eb 100644
--- a/tests/test_precondition.py
+++ b/tests/test_precondition.py
@@ -12,6 +12,7 @@ from typing import Optional  # pylint: disable=unused-import
 
 import icontract
 import tests.error
+import tests.mock
 
 
 class TestOK(unittest.TestCase):
@@ -450,6 +451,21 @@ class TestInvalid(unittest.TestCase):
                          "Does the original function define them? Did you supply them in the call?",
                          tests.error.wo_mandatory_location(str(type_error)))
 
+    def test_no_boolyness(self):
+        @icontract.require(lambda: tests.mock.NumpyArray([True, False]))
+        def some_func() -> None:
+            pass
+
+        value_error = None  # type: Optional[ValueError]
+        try:
+            some_func()
+        except ValueError as err:
+            value_error = err
+
+        self.assertIsNotNone(value_error)
+        self.assertEqual('Failed to negate the evaluation of the condition.',
+                         tests.error.wo_mandatory_location(str(value_error)))
+
 
 if __name__ == '__main__':
     unittest.main()
