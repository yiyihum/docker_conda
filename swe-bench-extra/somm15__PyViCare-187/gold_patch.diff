diff --git a/PyViCare/PyViCareCachedService.py b/PyViCare/PyViCareCachedService.py
index b2a8b61..0c781fd 100644
--- a/PyViCare/PyViCareCachedService.py
+++ b/PyViCare/PyViCareCachedService.py
@@ -1,23 +1,16 @@
 import logging
 import threading
-from datetime import datetime
 from typing import Any
 
 from PyViCare.PyViCareAbstractOAuthManager import AbstractViCareOAuthManager
 from PyViCare.PyViCareService import (ViCareDeviceAccessor, ViCareService,
                                       readFeature)
-from PyViCare.PyViCareUtils import PyViCareInvalidDataError
+from PyViCare.PyViCareUtils import PyViCareInvalidDataError, ViCareTimer
 
 logger = logging.getLogger('ViCare')
 logger.addHandler(logging.NullHandler())
 
 
-class ViCareTimer:
-    # class is used to replace logic in unittest
-    def now(self) -> datetime:
-        return datetime.now()
-
-
 class ViCareCachedService(ViCareService):
 
     def __init__(self, oauth_manager: AbstractViCareOAuthManager, accessor: ViCareDeviceAccessor, cacheDuration: int) -> None:
diff --git a/PyViCare/PyViCareDevice.py b/PyViCare/PyViCareDevice.py
index b4253a3..3c3e212 100644
--- a/PyViCare/PyViCareDevice.py
+++ b/PyViCare/PyViCareDevice.py
@@ -1,10 +1,10 @@
 import logging
-from datetime import datetime
 from typing import Any, Callable, List, Optional
 
 from PyViCare.PyViCareService import ViCareService
 from PyViCare.PyViCareUtils import (PyViCareNotSupportedFeatureError,
-                                    handleAPICommandErrors, handleNotSupported)
+                                    ViCareTimer, handleAPICommandErrors,
+                                    handleNotSupported)
 
 logger = logging.getLogger('ViCare')
 logger.addHandler(logging.NullHandler())
@@ -70,8 +70,8 @@ class Device:
         if schedule == "error" or schedule["active"] is not True:
             return None
 
-        currentDateTime = datetime.now()
-        currentTime = currentDateTime.time()
+        currentDateTime = ViCareTimer().now()
+        currentTime = ViCareTimer.time_as_delta(currentDateTime)
 
         current_day = VICARE_DAYS[currentDateTime.weekday()]
         if current_day not in schedule:
@@ -79,8 +79,8 @@ class Device:
 
         mode = None
         for s in schedule[current_day]:
-            startTime = datetime.strptime(s["start"], '%H:%M').time()
-            endTime = datetime.strptime(s["end"], '%H:%M').time()
+            startTime = ViCareTimer.parse_time_as_delta(s["start"])
+            endTime = ViCareTimer.parse_time_as_delta(s["end"])
             if startTime <= currentTime and currentTime <= endTime:
                 if s["mode"] == VICARE_DHW_TEMP2:  # temp-2 overrides all other modes
                     return s["mode"]
@@ -245,16 +245,16 @@ class Device:
         if schedule == "error" or schedule["active"] is not True:
             return None
 
-        currentDateTime = datetime.now()
-        currentTime = currentDateTime.time()
+        currentDateTime = ViCareTimer().now()
+        currentTime = ViCareTimer.time_as_delta(currentDateTime)
 
         current_day = VICARE_DAYS[currentDateTime.weekday()]
         if current_day not in schedule:
             return None  # no schedule for day configured
 
         for s in schedule[current_day]:
-            startTime = datetime.strptime(s["start"], '%H:%M').time()
-            endTime = datetime.strptime(s["end"], '%H:%M').time()
+            startTime = ViCareTimer.parse_time_as_delta(s["start"])
+            endTime = ViCareTimer.parse_time_as_delta(s["end"])
             if startTime <= currentTime and currentTime <= endTime:
                 return s["mode"]
         return schedule['default_mode']
diff --git a/PyViCare/PyViCareUtils.py b/PyViCare/PyViCareUtils.py
index f79dbf5..91b9cdc 100644
--- a/PyViCare/PyViCareUtils.py
+++ b/PyViCare/PyViCareUtils.py
@@ -1,4 +1,4 @@
-import datetime
+from datetime import datetime, timedelta
 from functools import wraps
 from typing import Callable
 
@@ -10,6 +10,23 @@ from PyViCare import Feature
 # the device.
 
 
+class ViCareTimer:
+    # class is used to replace logic in unittest
+    def now(self) -> datetime:
+        return datetime.now()
+
+    @staticmethod
+    def time_as_delta(date_time: datetime) -> timedelta:
+        return date_time - datetime(year=date_time.year, month=date_time.month, day=date_time.day)
+
+    @staticmethod
+    def parse_time_as_delta(time_string: str) -> timedelta:
+        return timedelta(
+            hours=int(time_string[0:2]),
+            minutes=int(time_string[3:5])
+        )
+
+
 def handleNotSupported(func: Callable) -> Callable:
     @wraps(func)
     def wrapper(*args, **kwargs):
@@ -73,7 +90,7 @@ class PyViCareRateLimitError(Exception):
         name = extended_payload["name"]
         requestCountLimit = extended_payload["requestCountLimit"]
         limitReset = extended_payload["limitReset"]
-        limitResetDate = datetime.datetime.utcfromtimestamp(limitReset / 1000)
+        limitResetDate = datetime.utcfromtimestamp(limitReset / 1000)
 
         msg = f'API rate limit {name} exceeded. Max {requestCountLimit} calls in timewindow. Limit reset at {limitResetDate.isoformat()}.'
 
