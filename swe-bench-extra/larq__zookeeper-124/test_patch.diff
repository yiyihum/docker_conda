diff --git a/.github/workflows/unittest.yml b/.github/workflows/unittest.yml
index 3da10d9..489e3fe 100644
--- a/.github/workflows/unittest.yml
+++ b/.github/workflows/unittest.yml
@@ -31,7 +31,7 @@ jobs:
       - name: Test with pytest
         run: pytest . -vv --cov=zookeeper --cov-report=xml --cov-config=.coveragerc
       - name: Test example script # Test that the model successfully compiles.
-        run: python examples/larq_experiment.py BinaryNetMnist epochs=0
+        run: python examples/larq_experiment.py BinaryNetMnist epochs=0 --dataset.download
       - name: Upload code-coverage report to Codecov
         if: matrix.python-version == '3.7' && matrix.tf-version == '2.0.1'
         run: curl -s https://codecov.io/bash | bash -s -- -t $token -f ./coverage.xml -F unittests
diff --git a/zookeeper/core/component_test.py b/zookeeper/core/component_test.py
index 8495571..0d188ba 100644
--- a/zookeeper/core/component_test.py
+++ b/zookeeper/core/component_test.py
@@ -326,7 +326,7 @@ def test_type_check(ExampleComponentClass):
     # Attempting to access the field should now raise a type error.
     with pytest.raises(
         TypeError,
-        match="Field 'a' of component 'x' is annotated with type '<class 'int'>', which is not satisfied by default value 4.5.",
+        match="Field 'a' of component 'x' is annotated with type '<class 'int'>', which is not satisfied by value 4.5.",
     ):
         instance.a
 
@@ -417,6 +417,34 @@ def test_component_getattr_value_via_factory_parent():
     assert f.build() == 5
 
 
+def test_component_inherited_factory_value():
+    """https://github.com/larq/zookeeper/issues/123."""
+
+    @factory
+    class IntFactory:
+        def build(self) -> int:
+            return 5
+
+    @component
+    class Child:
+        x: int = ComponentField()
+
+    @component
+    class Parent:
+        child: Child = ComponentField(Child)
+        x: int = ComponentField(IntFactory)
+
+    p = Parent()
+    configure(p, {})
+    assert p.x == 5
+    assert p.child.x == 5
+
+    p = Parent()
+    configure(p, {"child.x": 7})
+    assert p.x == 5
+    assert p.child.x == 7
+
+
 def test_component_post_configure():
     with pytest.raises(
         TypeError,
