diff --git a/reentry/config.py b/reentry/config.py
index 8ef957a..1513702 100644
--- a/reentry/config.py
+++ b/reentry/config.py
@@ -49,7 +49,8 @@ def make_config_parser(*args, **kwargs):
 def get_config(config_file_name=str(find_config())):
     """Create config parser with defaults and read in the config file."""
     default_config_dir = _get_default_config_dir()
-    parser = make_config_parser({'datadir': str(default_config_dir.joinpath('data'))})
+    default_config_values = {'datadir': str(default_config_dir.joinpath('data')), 'data_filename': hashed_data_file_name()}
+    parser = make_config_parser(default_config_values)
     parser.add_section('general')
     parser.read([config_file_name])
 
@@ -60,25 +61,11 @@ def get_config(config_file_name=str(find_config())):
             raise ValueError('environment variable $REENTRY_DATADIR={} exists, but is not a directory'.format(env_datadir))
         parser.set('general', 'datadir', str(env_datadir_path))
 
-    return parser
-
-
-def make_data_file_name():
-    """Find the path to the reentry executable and mangle it into a file name.
-
-    Note: In order to avoid long filenames (e.g. on conda forge), the relevant info is hashed.
-    """
-    sep = os.path.sep
-    python_bin_dir = str(Path(sys.executable).resolve().parent)
-    py_version = 'UNKNOWN'
-    if six.PY2:
-        py_version = 'PY2'
-    elif six.PY3:
-        py_version = 'PY3'
-    file_name = python_bin_dir.lstrip(sep).replace(sep, '.').replace('.', '_') + '_' + py_version
+    env_data_filename = os.getenv('REENTRY_DATA_FILENAME')
+    if env_data_filename:
+        parser.set('general', 'data_filename', env_data_filename)
 
-    file_name_hash = hashlib.sha256(file_name.encode('utf-8'))
-    return file_name_hash.hexdigest()
+    return parser
 
 
 def hashed_data_file_name():
@@ -96,12 +83,7 @@ def get_datafile():
     """Create the path to the data file used to store entry points."""
     config = get_config()
 
-    pkg_path_filename = make_data_file_name()
-    datafile = Path(config.get('general', 'datadir')).joinpath(pkg_path_filename)
-    if datafile.exists():  # pylint: disable=no-member
-        return str(datafile)  # if the unhashed exists, continue to use that one
-
-    pkg_path_filename = hashed_data_file_name()
+    pkg_path_filename = config.get('general', 'data_filename')
     datafile = Path(config.get('general', 'datadir')).joinpath(pkg_path_filename)
     if not datafile.exists():  # pylint: disable=no-member
         datafile.parent.mkdir(parents=True, exist_ok=True)

