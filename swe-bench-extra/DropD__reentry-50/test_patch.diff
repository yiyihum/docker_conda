diff --git a/reentry/tests/test_config.py b/reentry/tests/test_config.py
index a18d4e6..7c600cf 100644
--- a/reentry/tests/test_config.py
+++ b/reentry/tests/test_config.py
@@ -6,6 +6,7 @@ try:
 except ImportError:
     from pathlib import Path
 
+import os
 import pytest  # pylint: disable=unused-import
 import six
 from six.moves import configparser
@@ -27,16 +28,36 @@ def test_make_config_parser():
         assert isinstance(parser, configparser.ConfigParser)
 
 
-def test_get_config():
-    """Make sure the configparser gets created correctly."""
-    parser = config.get_config()
-
+def _check_config_valid(parser, expected_filename=None):
+    """
+    Perform validations for a given config.
+    If expected_filename is given, check its value too.
+    """
     if six.PY2:
         assert isinstance(parser, configparser.SafeConfigParser)
     else:
         assert isinstance(parser, configparser.ConfigParser)
 
     assert parser.get('general', 'datadir')
+    assert parser.get('general', 'data_filename')
+    if expected_filename:
+        assert parser.get('general', 'data_filename') == expected_filename
+
+
+def test_get_config():
+    """Make sure the configparser gets created correctly."""
+    parser = config.get_config()
+    _check_config_valid(parser)
+
+
+def test_get_config_with_env_var():
+    """Make sure the configparser gets created correctly when REENTRY_DATA_FILENAME is set."""
+    data_filename = 'entrypoints'
+    os.environ['REENTRY_DATA_FILENAME'] = data_filename
+    parser = config.get_config()
+    os.environ.pop('REENTRY_DATA_FILENAME')
+
+    _check_config_valid(parser, data_filename)
 
 
 def test_get_datafile():
