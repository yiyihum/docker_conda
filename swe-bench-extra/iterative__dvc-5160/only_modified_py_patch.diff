diff --git a/dvc/command/diff.py b/dvc/command/diff.py
--- a/dvc/command/diff.py
+++ b/dvc/command/diff.py
@@ -22,7 +22,7 @@ def _show_md(diff, show_hash=False, hide_missing=False):
 
     header = ["Status", "Hash", "Path"] if show_hash else ["Status", "Path"]
     rows = []
-    statuses = ["added", "deleted", "modified"]
+    statuses = ["added", "deleted", "renamed", "modified"]
     if not hide_missing:
         statuses.append("not in cache")
     for status in statuses:
@@ -31,6 +31,8 @@ def _show_md(diff, show_hash=False, hide_missing=False):
             continue
         for entry in entries:
             path = entry["path"]
+            if isinstance(path, dict):
+                path = f"{path['old']} -> {path['new']}"
             if show_hash:
                 check_sum = _digest(entry.get("hash", ""))
                 rows.append([status, check_sum, path])
@@ -72,13 +74,14 @@ def _format(diff, hide_missing=False):
             "added": colorama.Fore.GREEN,
             "modified": colorama.Fore.YELLOW,
             "deleted": colorama.Fore.RED,
+            "renamed": colorama.Fore.GREEN,
             "not in cache": colorama.Fore.YELLOW,
         }
 
         summary = {}
         groups = []
 
-        states = ["added", "deleted", "modified"]
+        states = ["added", "deleted", "renamed", "modified"]
         if not hide_missing:
             states.append("not in cache")
         for state in states:
@@ -92,6 +95,8 @@ def _format(diff, hide_missing=False):
 
             for entry in entries:
                 path = entry["path"]
+                if isinstance(path, dict):
+                    path = f"{path['old']} -> {path['new']}"
                 checksum = entry.get("hash")
                 summary[state] += 1 if not path.endswith(os.sep) else 0
                 content.append(
@@ -99,7 +104,7 @@ def _format(diff, hide_missing=False):
                         space="    ",
                         checksum=_digest(checksum) if checksum else "",
                         separator="  " if checksum else "",
-                        path=entry["path"],
+                        path=path,
                     )
                 )
 
@@ -117,7 +122,7 @@ def _format(diff, hide_missing=False):
 
         fmt = (
             "files summary: {added} added, {deleted} deleted,"
-            " {modified} modified"
+            " {renamed} renamed, {modified} modified"
         )
         if not hide_missing:
             fmt += ", {not in cache} not in cache"
@@ -138,7 +143,12 @@ def run(self):
                 del diff["not in cache"]
 
             for key, entries in diff.items():
-                entries = sorted(entries, key=lambda entry: entry["path"])
+                entries = sorted(
+                    entries,
+                    key=lambda entry: entry["path"]["old"]
+                    if isinstance(entry["path"], dict)
+                    else entry["path"],
+                )
                 if not show_hash:
                     for entry in entries:
                         del entry["hash"]
diff --git a/dvc/repo/diff.py b/dvc/repo/diff.py
--- a/dvc/repo/diff.py
+++ b/dvc/repo/diff.py
@@ -65,6 +65,17 @@ def diff(self, a_rev="HEAD", b_rev=None, targets=None):
     deleted = sorted(deleted_or_missing - set(missing))
     modified = sorted(set(old) & set(new))
 
+    # Cases when file was changed and renamed are resulted
+    # in having deleted and added record
+    # To cover such cases we need to change hashing function
+    # to produce rolling/chunking hash
+
+    renamed = _calculate_renamed(new, old, added, deleted)
+
+    for renamed_item in renamed:
+        added.remove(renamed_item["path"]["new"])
+        deleted.remove(renamed_item["path"]["old"])
+
     ret = {
         "added": [{"path": path, "hash": new[path]} for path in added],
         "deleted": [{"path": path, "hash": old[path]} for path in deleted],
@@ -73,6 +84,7 @@ def diff(self, a_rev="HEAD", b_rev=None, targets=None):
             for path in modified
             if old[path] != new[path]
         ],
+        "renamed": renamed,
         "not in cache": [
             {"path": path, "hash": old[path]} for path in missing
         ],
@@ -171,3 +183,34 @@ def _targets_to_path_infos(repo_tree, targets):
             missing.append(target)
 
     return path_infos, missing
+
+
+def _calculate_renamed(new, old, added, deleted):
+    old_inverted = {}
+    # It is needed to be dict of lists to cover cases
+    # when repo has paths with same hash
+    for path, path_hash in old.items():
+        bucket = old_inverted.get(path_hash, None)
+        if bucket is None:
+            old_inverted[path_hash] = [path]
+        else:
+            bucket.append(path)
+
+    renamed = []
+    for path in added:
+        path_hash = new[path]
+        old_paths = old_inverted.get(path_hash, None)
+        if not old_paths:
+            continue
+        old_path = None
+        for tmp_old_path in old_paths:
+            if tmp_old_path in deleted:
+                old_path = tmp_old_path
+                break
+        if not old_path:
+            continue
+        renamed.append(
+            {"path": {"old": old_path, "new": path}, "hash": path_hash}
+        )
+
+    return renamed

