diff --git a/tests/fake_data/dataframes.py b/tests/fake_data/dataframes.py
index a86536b..b88d574 100644
--- a/tests/fake_data/dataframes.py
+++ b/tests/fake_data/dataframes.py
@@ -26,3 +26,14 @@ df_test_code_naf = pd.DataFrame(
 )
 
 df_test_full = pd.concat((df_test_code_naf, df_test_acoss, df_test_paydex), axis=1)
+
+df_test_redressement_urssaf = pd.DataFrame(
+    {
+        "montant_part_ouvriere_latest": [50, 60, 100],
+        "montant_part_patronale_latest": [75, 50, 100],
+        "montant_part_ouvriere_july2020": [50, 50, 50],
+        "montant_part_patronale_july2020": [50, 50, 0],
+        "cotisation_moy12m_latest": [100, 100, 75],
+        "group_final": ["vert", "vert", "rouge"],
+    }
+)
diff --git a/tests/unit/pipelines_test.py b/tests/unit/pipelines_test.py
index 2dba9ba..9b62b1f 100644
--- a/tests/unit/pipelines_test.py
+++ b/tests/unit/pipelines_test.py
@@ -10,22 +10,23 @@ from predictsignauxfaibles.pipelines import (
 )
 
 from predictsignauxfaibles.preprocessors import Preprocessor
+from predictsignauxfaibles.redressements import Redressement
 
 from tests.fake_data.dataframes import df_test_full
 
 
 @pytest.mark.parametrize("pipeline", ALL_PIPELINES)
-def test_final_pipeline(pipeline):
-    for preprocessor in pipeline:
-        assert isinstance(preprocessor, Preprocessor)
-        assert hasattr(preprocessor, "name")
-        assert hasattr(preprocessor, "function")
-        assert hasattr(preprocessor, "input")
-        assert hasattr(preprocessor, "output")
-        assert isinstance(preprocessor.name, str)
-        assert callable(preprocessor.function)
-        assert isinstance(preprocessor.input, list)
-        assert isinstance(preprocessor.output, list) or preprocessor.output is None
+def test_all_pipeline(pipeline):
+    for step in pipeline:
+        assert isinstance(step, (Preprocessor, Redressement))
+        assert hasattr(step, "name")
+        assert hasattr(step, "function")
+        assert hasattr(step, "input")
+        assert hasattr(step, "output")
+        assert isinstance(step.name, str)
+        assert callable(step.function)
+        assert isinstance(step.input, list)
+        assert isinstance(step.output, list) or step.output is None
 
 
 def test_default_pipeline_sucess():
diff --git a/tests/unit/redressements_test.py b/tests/unit/redressements_test.py
new file mode 100644
index 0000000..2078717
--- /dev/null
+++ b/tests/unit/redressements_test.py
@@ -0,0 +1,11 @@
+# pylint: disable=missing-function-docstring
+import pandas as pd
+from predictsignauxfaibles.redressements import redressement_urssaf_covid
+
+from tests.fake_data.dataframes import df_test_redressement_urssaf
+
+
+def test_redressement_urssaf_covid():
+    data_in = df_test_redressement_urssaf.copy()
+    data_out = redressement_urssaf_covid(data_in)
+    assert (data_out["group_final_regle_urssaf"] == ["orange", "vert", "rouge"]).all()
