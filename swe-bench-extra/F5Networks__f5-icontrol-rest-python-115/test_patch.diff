diff --git a/conftest.py b/conftest.py
index d11adba..b882e7b 100644
--- a/conftest.py
+++ b/conftest.py
@@ -93,3 +93,8 @@ def POST_URL(opt_bigip, opt_port):
 def FAKE_URL(opt_bigip, opt_port):
     fake_url = 'https://' + opt_bigip + ':' + opt_port + '/mgmt/tm/bogus/'
     return fake_url
+
+
+@pytest.fixture
+def BASE_URL(opt_bigip):
+    return 'https://' + opt_bigip + '/mgmt/tm/'
diff --git a/icontrol/test/test_session.py b/icontrol/test/test_session.py
index df65187..e1aa136 100644
--- a/icontrol/test/test_session.py
+++ b/icontrol/test/test_session.py
@@ -37,6 +37,17 @@ def uparts():
     parts_dict = {'base_uri': 'https://0.0.0.0/mgmt/tm/root/RESTiface/',
                   'partition': 'BIGCUSTOMER',
                   'name': 'foobar1',
+                  'sub_path': '',
+                  'suffix': '/members/m1'}
+    return parts_dict
+
+
+@pytest.fixture()
+def uparts_with_subpath():
+    parts_dict = {'base_uri': 'https://0.0.0.0/mgmt/tm/root/RESTiface/',
+                  'partition': 'BIGCUSTOMER',
+                  'name': 'foobar1',
+                  'sub_path': 'sp',
                   'suffix': '/members/m1'}
     return parts_dict
 
@@ -116,6 +127,14 @@ def test_correct_uri_construction_partitionless(uparts):
     assert uri == 'https://0.0.0.0/mgmt/tm/root/RESTiface/foobar1/members/m1'
 
 
+def test_correct_uri_construction_partitionless_subpath(uparts_with_subpath):
+    uparts_with_subpath['partition'] = ''
+    with pytest.raises(session.InvalidURIComponentPart) as IC:
+        session.generate_bigip_uri(**uparts_with_subpath)
+    assert str(IC.value) == \
+        'When giving the subPath component include partition as well.'
+
+
 def test_correct_uri_construction_nameless(uparts):
     uparts['name'] = ''
     uri = session.generate_bigip_uri(**uparts)
@@ -123,6 +142,13 @@ def test_correct_uri_construction_nameless(uparts):
         "https://0.0.0.0/mgmt/tm/root/RESTiface/~BIGCUSTOMER/members/m1"
 
 
+def test_correct_uri_construction_nameless_subpath(uparts_with_subpath):
+    uparts_with_subpath['name'] = ''
+    uri = session.generate_bigip_uri(**uparts_with_subpath)
+    assert uri ==\
+        "https://0.0.0.0/mgmt/tm/root/RESTiface/~BIGCUSTOMER~sp/members/m1"
+
+
 def test_correct_uri_construction_partitionless_and_nameless(uparts):
     uparts['partition'] = ''
     uparts['name'] = ''
@@ -130,6 +156,16 @@ def test_correct_uri_construction_partitionless_and_nameless(uparts):
     assert uri == "https://0.0.0.0/mgmt/tm/root/RESTiface/members/m1"
 
 
+def test_correct_uri_construction_partitionless_and_nameless_subpath(
+        uparts_with_subpath):
+    uparts_with_subpath['partition'] = ''
+    uparts_with_subpath['name'] = ''
+    with pytest.raises(session.InvalidURIComponentPart) as IC:
+        session.generate_bigip_uri(**uparts_with_subpath)
+    assert str(IC.value) == \
+        'When giving the subPath component include partition as well.'
+
+
 def test_correct_uri_construction_partition_name_and_suffixless(uparts):
     uparts['partition'] = ''
     uparts['name'] = ''
@@ -138,6 +174,17 @@ def test_correct_uri_construction_partition_name_and_suffixless(uparts):
     assert uri == "https://0.0.0.0/mgmt/tm/root/RESTiface/"
 
 
+def test_correct_uri_construction_partition_name_and_suffixless_subpath(
+        uparts_with_subpath):
+    uparts_with_subpath['partition'] = ''
+    uparts_with_subpath['name'] = ''
+    uparts_with_subpath['suffix'] = ''
+    with pytest.raises(session.InvalidURIComponentPart) as IC:
+        session.generate_bigip_uri(**uparts_with_subpath)
+    assert str(IC.value) == \
+        'When giving the subPath component include partition as well.'
+
+
 def test_correct_uri_construction_partitionless_and_suffixless(uparts):
     uparts['partition'] = ''
     uparts['suffix'] = ''
@@ -145,6 +192,16 @@ def test_correct_uri_construction_partitionless_and_suffixless(uparts):
     assert uri == 'https://0.0.0.0/mgmt/tm/root/RESTiface/foobar1'
 
 
+def test_correct_uri_construction_partitionless_and_suffixless_subpath(
+        uparts_with_subpath):
+    uparts_with_subpath['partition'] = ''
+    uparts_with_subpath['suffix'] = ''
+    with pytest.raises(session.InvalidURIComponentPart) as IC:
+        session.generate_bigip_uri(**uparts_with_subpath)
+    assert str(IC.value) == \
+        'When giving the subPath component include partition as well.'
+
+
 def test_correct_uri_construction_nameless_and_suffixless(uparts):
     uparts['name'] = ''
     uparts['suffix'] = ''
@@ -152,6 +209,14 @@ def test_correct_uri_construction_nameless_and_suffixless(uparts):
     assert uri == 'https://0.0.0.0/mgmt/tm/root/RESTiface/~BIGCUSTOMER'
 
 
+def test_correct_uri_construction_nameless_and_suffixless_subpath(
+        uparts_with_subpath):
+    uparts_with_subpath['name'] = ''
+    uparts_with_subpath['suffix'] = ''
+    uri = session.generate_bigip_uri(**uparts_with_subpath)
+    assert uri == 'https://0.0.0.0/mgmt/tm/root/RESTiface/~BIGCUSTOMER~sp'
+
+
 # Test exception handling
 def test_wrapped_delete_success(iCRS, uparts):
     iCRS.delete(uparts['base_uri'], partition='AFN', name='AIN',
diff --git a/test/functional/test_session.py b/test/functional/test_session.py
index ef4e613..568d5b1 100644
--- a/test/functional/test_session.py
+++ b/test/functional/test_session.py
@@ -35,6 +35,64 @@ nat_data = {
 }
 
 
+iapp_templ_data = {
+    "name": "test_templ",
+    "partition": "Common",
+    "actions": {
+        "definition":
+        {
+            "implementation": '''tmsh::create {
+            ltm pool /Common/test_serv.app/test_pool
+            load-balancing-mode least-connections-node
+            members replace-all-with {128.0.0.2:8080{address 128.0.0.2}}
+            }''',
+            "presentation": ""
+        }
+    }
+}
+
+
+iapp_serv_data = {
+    "name": "test_serv",
+    "partition": "Common",
+    "template": "/Common/test_templ"
+}
+
+
+@pytest.fixture
+def setup_subpath(request, ICR, BASE_URL):
+    app_templ_url = BASE_URL + 'sys/application/template/'
+    app_serv_url = BASE_URL + 'sys/application/service/'
+
+    def teardown_iapp():
+        try:
+            ICR.delete(
+                app_serv_url, uri_as_parts=True,
+                name='test_serv', partition='Common',
+                subPath='test_serv.app')
+        except Exception:
+            pass
+
+        try:
+            ICR.delete(
+                app_templ_url, uri_as_parts=True,
+                name='test_templ', partition='Common')
+        except Exception:
+            pass
+
+    teardown_iapp()
+    ICR.post(app_templ_url, json=iapp_templ_data)
+    try:
+        ICR.post(app_serv_url, json=iapp_serv_data)
+    except HTTPError as ex:
+        # The creation of an iapp service does cause a 404 error in bigip
+        # versions up to but excluding 12.0
+        if ex.response.status_code == 404:
+            pass
+    request.addfinalizer(teardown_iapp)
+    return app_serv_url
+
+
 def teardown_nat(request, icr, url, name, partition):
     '''Remove the nat object that we create during a test '''
     def teardown():
@@ -69,6 +127,23 @@ def invalid_token_credentials(user, password, url):
             'Authentication required!' in err.value.message)
 
 
+def test_get_with_subpath(setup_subpath, ICR, BASE_URL):
+    # The iapp creates a pool. We should be able to get that pool with subPath
+    app_serv_url = setup_subpath
+    res = ICR.get(
+        app_serv_url, name='test_serv',
+        partition='Common', subPath='test_serv.app')
+    assert res.status_code == 200
+    pool_uri = BASE_URL + 'ltm/pool/'
+    pool_res = ICR.get(
+        pool_uri, name='test_pool',
+        partition='Common', subPath='test_serv.app')
+    assert pool_res.status_code == 200
+    data = pool_res.json()
+    assert data['items'][0]['subPath'] == 'test_serv.app'
+    assert data['items'][0]['name'] == 'test_pool'
+
+
 def test_get(ICR, GET_URL):
     '''Test a GET request to a valid url
 
