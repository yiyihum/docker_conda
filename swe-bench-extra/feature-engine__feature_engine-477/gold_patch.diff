diff --git a/feature_engine/_prediction/base_predictor.py b/feature_engine/_prediction/base_predictor.py
index 3fab9a3..3ab45be 100644
--- a/feature_engine/_prediction/base_predictor.py
+++ b/feature_engine/_prediction/base_predictor.py
@@ -270,7 +270,7 @@ class BaseTargetMeanEstimator(BaseEstimator):
 
         return X_tr
 
-    def _predict(self, X: pd.DataFrame) -> np.array:
+    def _predict(self, X: pd.DataFrame) -> np.ndarray:
         """
         Predict using the average of the target mean value across variables.
 
diff --git a/feature_engine/_prediction/target_mean_classifier.py b/feature_engine/_prediction/target_mean_classifier.py
index 484f5b8..3338f3f 100644
--- a/feature_engine/_prediction/target_mean_classifier.py
+++ b/feature_engine/_prediction/target_mean_classifier.py
@@ -125,7 +125,7 @@ class TargetMeanClassifier(BaseTargetMeanEstimator, ClassifierMixin):
 
         return super().fit(X, y)
 
-    def predict_proba(self, X: pd.DataFrame) -> np.array:
+    def predict_proba(self, X: pd.DataFrame) -> np.ndarray:
         """
         Predict class probabilities for X.
 
@@ -148,7 +148,7 @@ class TargetMeanClassifier(BaseTargetMeanEstimator, ClassifierMixin):
         prob = self._predict(X)
         return np.vstack([1 - prob, prob]).T
 
-    def predict_log_proba(self, X: pd.DataFrame) -> np.array:
+    def predict_log_proba(self, X: pd.DataFrame) -> np.ndarray:
         """
         Predict class log-probabilities for X.
 
@@ -167,7 +167,7 @@ class TargetMeanClassifier(BaseTargetMeanEstimator, ClassifierMixin):
         """
         return np.log(self.predict_proba(X))
 
-    def predict(self, X: pd.DataFrame) -> np.array:
+    def predict(self, X: pd.DataFrame) -> np.ndarray:
         """
         Predict class for X.
 
diff --git a/feature_engine/_prediction/target_mean_regressor.py b/feature_engine/_prediction/target_mean_regressor.py
index bd2d949..b220fc2 100644
--- a/feature_engine/_prediction/target_mean_regressor.py
+++ b/feature_engine/_prediction/target_mean_regressor.py
@@ -106,7 +106,7 @@ class TargetMeanRegressor(BaseTargetMeanEstimator, RegressorMixin):
 
         return super().fit(X, y)
 
-    def predict(self, X: pd.DataFrame) -> np.array:
+    def predict(self, X: pd.DataFrame) -> np.ndarray:
         """
         Predict using the average of the target mean value across variables.
 
diff --git a/feature_engine/variable_manipulation.py b/feature_engine/variable_manipulation.py
index 1608469..25ac9f1 100644
--- a/feature_engine/variable_manipulation.py
+++ b/feature_engine/variable_manipulation.py
@@ -27,11 +27,14 @@ def _check_input_parameter_variables(variables: Variables) -> Any:
     """
 
     msg = "variables should be a string, an int or a list of strings or integers."
+    msg_dupes = "the list contains duplicated variable names"
 
     if variables:
         if isinstance(variables, list):
             if not all(isinstance(i, (str, int)) for i in variables):
                 raise ValueError(msg)
+            if len(variables) != len(set(variables)):
+                raise ValueError(msg_dupes)
         else:
             if not isinstance(variables, (str, int)):
                 raise ValueError(msg)
@@ -250,7 +253,9 @@ def _find_or_check_datetime_variables(
 
 
 def _find_all_variables(
-    X: pd.DataFrame, variables: Variables = None, exclude_datetime: bool = False,
+    X: pd.DataFrame,
+    variables: Variables = None,
+    exclude_datetime: bool = False,
 ) -> List[Union[str, int]]:
     """
     If variables are None, captures all variables in the dataframe in a list.
