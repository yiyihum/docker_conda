diff --git a/tests/test_cli.py b/tests/test_cli.py
index d48105b..266ee25 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -40,6 +40,43 @@ class TestCli(unittest.TestCase):
                 for val in values:
                     self.assertEqual(config.get(val), val)
 
+    def test_configure_list_config(self):
+        runner = CliRunner()
+        with runner.isolated_filesystem():
+            touch('dwave.conf')
+            with mock.patch('dwave.cloud.config.homebase.site_config_dir_list',
+                            lambda **kw: ['/system1', '/system2']):
+                with mock.patch('dwave.cloud.config.homebase.user_config_dir',
+                                lambda **kw: '/user'):
+                    with mock.patch('os.path.exists', lambda *x: True):
+                        # test --list-config-files
+                        result = runner.invoke(cli, [
+                            'configure', '--list-config-files'
+                        ])
+                        self.assertEqual(result.output.strip(), '\n'.join([
+                            '/system1/dwave.conf', '/system2/dwave.conf',
+                            '/user/dwave.conf', './dwave.conf']))
+
+                        # test --list-system-paths
+                        result = runner.invoke(cli, [
+                            'configure', '--list-system-paths'
+                        ])
+                        self.assertEqual(result.output.strip(), '\n'.join([
+                            '/system1/dwave.conf', '/system2/dwave.conf']))
+
+                        # test --list-user-paths
+                        result = runner.invoke(cli, [
+                            'configure', '--list-user-paths'
+                        ])
+                        self.assertEqual(result.output.strip(), '/user/dwave.conf')
+
+                        # test --list-local-paths
+                        result = runner.invoke(cli, [
+                            'configure', '--list-local-paths'
+                        ])
+                        self.assertEqual(result.output.strip(), './dwave.conf')
+
+
     def test_ping(self):
         config_file = 'dwave.conf'
         profile = 'profile'
diff --git a/tests/test_config.py b/tests/test_config.py
index 84ef393..11d26ff 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -9,7 +9,7 @@ from functools import partial
 from dwave.cloud.exceptions import ConfigFileParseError, ConfigFileReadError
 from dwave.cloud.testing import mock, iterable_mock_open
 from dwave.cloud.config import (
-    detect_existing_configfile_paths, load_config_from_files, load_config)
+    get_configfile_paths, load_config_from_files, load_config)
 
 
 class TestConfig(unittest.TestCase):
@@ -70,7 +70,7 @@ class TestConfig(unittest.TestCase):
     def test_no_config_detected(self):
         """When no config file detected, `load_config_from_files` should return
         empty config."""
-        with mock.patch("dwave.cloud.config.detect_existing_configfile_paths", lambda: []):
+        with mock.patch("dwave.cloud.config.get_configfile_paths", lambda: []):
             self.assertFalse(load_config_from_files().sections())
 
     def test_invalid_filename_given(self):
@@ -79,7 +79,7 @@ class TestConfig(unittest.TestCase):
     def test_config_file_detection_cwd(self):
         configpath = "./dwave.conf"
         with mock.patch("os.path.exists", lambda path: path == configpath):
-            self.assertEqual(detect_existing_configfile_paths(), [configpath])
+            self.assertEqual(get_configfile_paths(), [configpath])
 
     def test_config_file_detection_user(self):
         if sys.platform == 'win32':
@@ -91,7 +91,7 @@ class TestConfig(unittest.TestCase):
             configpath = os.path.expanduser("~/.config/dwave/dwave.conf")
 
         with mock.patch("os.path.exists", lambda path: path == configpath):
-            self.assertEqual(detect_existing_configfile_paths(), [configpath])
+            self.assertEqual(get_configfile_paths(), [configpath])
 
     def test_config_file_detection_system(self):
         if sys.platform == 'win32':
@@ -103,11 +103,11 @@ class TestConfig(unittest.TestCase):
             configpath = "/etc/xdg/dwave/dwave.conf"
 
         with mock.patch("os.path.exists", lambda path: path == configpath):
-            self.assertEqual(detect_existing_configfile_paths(), [configpath])
+            self.assertEqual(get_configfile_paths(), [configpath])
 
     def test_config_file_detection_nonexisting(self):
         with mock.patch("os.path.exists", lambda path: False):
-            self.assertEqual(detect_existing_configfile_paths(), [])
+            self.assertEqual(get_configfile_paths(), [])
 
 
     def _assert_config_valid(self, config):
@@ -281,7 +281,7 @@ class TestConfig(unittest.TestCase):
             endpoint = beta
         """
 
-        with mock.patch("dwave.cloud.config.detect_existing_configfile_paths",
+        with mock.patch("dwave.cloud.config.get_configfile_paths",
                         lambda: ['config_system', 'config_user']):
 
             # test per-key override
diff --git a/tests/test_mock_solver_loading.py b/tests/test_mock_solver_loading.py
index d1ee10c..21adf08 100644
--- a/tests/test_mock_solver_loading.py
+++ b/tests/test_mock_solver_loading.py
@@ -210,7 +210,7 @@ solver = alpha-solver
 
 
 # patch the new config loading mechanism, to test only legacy config loading
-@mock.patch("dwave.cloud.config.detect_existing_configfile_paths", lambda: [])
+@mock.patch("dwave.cloud.config.get_configfile_paths", lambda: [])
 class MockLegacyConfiguration(unittest.TestCase):
     """Ensure that the precedence of configuration sources is followed."""
 
@@ -265,7 +265,7 @@ class MockLegacyConfiguration(unittest.TestCase):
     def test_only_file_key(self):
         """If give a name from the config file the proper URL should be loaded."""
         with mock.patch("dwave.cloud.config.open", iterable_mock_open(config_body), create=True):
-            with mock.patch("dwave.cloud.config.detect_existing_configfile_paths", lambda *x: ['file']):
+            with mock.patch("dwave.cloud.config.get_configfile_paths", lambda *x: ['file']):
                 with Client.from_config(profile='alpha') as client:
                     client.session.get = GetEvent.handle
                     try:
