diff --git a/dwave/cloud/cli.py b/dwave/cloud/cli.py
index 0e5a503..da8a816 100644
--- a/dwave/cloud/cli.py
+++ b/dwave/cloud/cli.py
@@ -1,18 +1,72 @@
 from __future__ import print_function
 
+from functools import wraps
+
 import click
 from timeit import default_timer as timer
 
 from dwave.cloud import Client
 from dwave.cloud.utils import readline_input
+from dwave.cloud.package_info import __title__, __version__
 from dwave.cloud.exceptions import (
     SolverAuthenticationError, InvalidAPIResponseError, UnsupportedSolverError)
 from dwave.cloud.config import (
     load_config_from_files, get_default_config,
-    get_configfile_path, get_default_configfile_path)
+    get_configfile_path, get_default_configfile_path,
+    get_configfile_paths)
+
+
+def click_info_switch(f):
+    """Decorator to create Click eager info switch option, as described in docs:
+    http://click.pocoo.org/6/options/#callbacks-and-eager-options.
+
+    Takes a no-argument function and abstracts the boilerplate required by
+    Click (value checking, exit on done).
+
+    Example:
+
+        @click.option('--my-option', is_flag=True, callback=my_option,
+                    expose_value=False, is_eager=True)
+        def test():
+            pass
+
+        @click_info_switch
+        def my_option()
+            click.echo('some info related to my switch')
+    """
+
+    @wraps(f)
+    def wrapped(ctx, param, value):
+        if not value or ctx.resilient_parsing:
+            return
+        f()
+        ctx.exit()
+    return wrapped
+
+
+@click_info_switch
+def list_config_files():
+    for path in get_configfile_paths():
+        click.echo(path)
+
+@click_info_switch
+def list_system_config():
+    for path in get_configfile_paths(user=False, local=False, only_existing=False):
+        click.echo(path)
+
+@click_info_switch
+def list_user_config():
+    for path in get_configfile_paths(system=False, local=False, only_existing=False):
+        click.echo(path)
+
+@click_info_switch
+def list_local_config():
+    for path in get_configfile_paths(system=False, user=False, only_existing=False):
+        click.echo(path)
 
 
 @click.group()
+@click.version_option(prog_name=__title__, version=__version__)
 def cli():
     """D-Wave cloud tool."""
 
@@ -22,6 +76,18 @@ def cli():
               type=click.Path(exists=True, dir_okay=False))
 @click.option('--profile', default=None,
               help='Connection profile name (config section name)')
+@click.option('--list-config-files', is_flag=True, callback=list_config_files,
+              expose_value=False, is_eager=True,
+              help='List paths of all config files detected on this system')
+@click.option('--list-system-paths', is_flag=True, callback=list_system_config,
+              expose_value=False, is_eager=True,
+              help='List paths of system-wide config files examined')
+@click.option('--list-user-paths', is_flag=True, callback=list_user_config,
+              expose_value=False, is_eager=True,
+              help='List paths of user-local config files examined')
+@click.option('--list-local-paths', is_flag=True, callback=list_local_config,
+              expose_value=False, is_eager=True,
+              help='List paths of local config files examined')
 def configure(config_file, profile):
     """Create and/or update cloud client configuration file."""
 
diff --git a/dwave/cloud/config.py b/dwave/cloud/config.py
index e84711f..e61d1b1 100644
--- a/dwave/cloud/config.py
+++ b/dwave/cloud/config.py
@@ -13,38 +13,61 @@ CONF_AUTHOR = "dwavesystem"
 CONF_FILENAME = "dwave.conf"
 
 
-def detect_existing_configfile_paths():
-    """Returns the list of existing config files found on disk.
+def get_configfile_paths(system=True, user=True, local=True, only_existing=True):
+    """Returns a list of (existing) config files found on disk.
 
     Candidates examined depend on the OS, but for Linux possible list is:
     ``dwave.conf`` in CWD, user-local ``.config/dwave/``, system-wide
     ``/etc/dwave/``. For details, see :func:`load_config_from_file`.
+
+    Args:
+        system (boolean, default=True):
+            Search for system-wide config files.
+
+        user (boolean, default=True):
+            Search for user-local config files.
+
+        local (boolean, default=True):
+            Search for local config files (in CWD).
+
+        only_existing (boolean, default=True):
+            Return only paths for files that exist on disk.
+
+    Returns:
+        list[str]:
+            A list of config file paths.
     """
 
+    candidates = []
+
     # system-wide has the lowest priority, `/etc/dwave/dwave.conf`
-    candidates = homebase.site_config_dir_list(
-        app_author=CONF_AUTHOR, app_name=CONF_APP,
-        use_virtualenv=False, create=False)
+    if system:
+        candidates.extend(homebase.site_config_dir_list(
+            app_author=CONF_AUTHOR, app_name=CONF_APP,
+            use_virtualenv=False, create=False))
 
     # user-local will override it, `~/.config/dwave/dwave.conf`
-    candidates.append(homebase.user_config_dir(
-        app_author=CONF_AUTHOR, app_name=CONF_APP, roaming=False,
-        use_virtualenv=False, create=False))
+    if user:
+        candidates.append(homebase.user_config_dir(
+            app_author=CONF_AUTHOR, app_name=CONF_APP, roaming=False,
+            use_virtualenv=False, create=False))
 
     # highest priority (overrides all): `./dwave.conf`
-    candidates.append(".")
+    if local:
+        candidates.append(".")
 
     paths = [os.path.join(base, CONF_FILENAME) for base in candidates]
-    existing_paths = [path for path in paths if os.path.exists(path)]
+    if only_existing:
+        paths = list(filter(os.path.exists, paths))
 
-    return existing_paths
+    return paths
 
 
 def get_configfile_path():
     """Returns the highest-priority existing config file from a list
-    of possible candidates returned by `detect_existing_configfile_paths()`, and
+    of possible candidates returned by `get_configfile_paths()`, and
     ``None`` if no candidate config file exists."""
-    paths = detect_existing_configfile_paths()
+    paths = get_configfile_paths()
     return paths[-1] if paths else None
 
 
@@ -123,7 +146,7 @@ def load_config_from_files(filenames=None):
             Config file parse failed.
     """
     if filenames is None:
-        filenames = detect_existing_configfile_paths()
+        filenames = get_configfile_paths()
 
     config = configparser.ConfigParser(default_section="defaults")
     for filename in filenames:
