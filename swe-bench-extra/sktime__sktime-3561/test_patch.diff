diff --git a/sktime/benchmarking/tests/test_experiments.py b/sktime/benchmarking/tests/test_experiments.py
index 968078fac..e065cdd0a 100644
--- a/sktime/benchmarking/tests/test_experiments.py
+++ b/sktime/benchmarking/tests/test_experiments.py
@@ -65,25 +65,3 @@ def test_run_classification_experiment(tmp_path):
     # remove files
     test_path.unlink()
     train_path.unlink()
-
-
-# def test_load_and_run_clustering_experiment():
-#     """Test loading, running and saving.
-#
-#     Currently it just checks that the files have been created, then deletes them.
-#     Later it can be enhanced to check the results can be loaded.
-#     """
-#     load_and_run_clustering_experiment(
-#         overwrite=True,
-#         problem_path="../../datasets/data/",
-#         results_path="../Temp/",
-#         cls_name="kmeans",
-#         dataset="UnitTest",
-#         resample_id=0,
-#         train_file=True,
-#     )
-#     assert os.path.isfile("../Temp/kmeans/Predictions/UnitTest/testResample0.csv")
-#     assert os.path.isfile("../Temp/kmeans/Predictions/UnitTest/trainResample0.csv")
-#     os.remove("../Temp/kmeans/Predictions/UnitTest/testResample0.csv")
-#     os.remove("../Temp/kmeans/Predictions/UnitTest/trainResample0.csv")
-#
diff --git a/sktime/utils/tests/test_sampling.py b/sktime/utils/tests/test_sampling.py
index 3d17cca37..85fca8bfb 100644
--- a/sktime/utils/tests/test_sampling.py
+++ b/sktime/utils/tests/test_sampling.py
@@ -1,10 +1,13 @@
 # -*- coding: utf-8 -*-
 """Testing sampling utilities."""
 
+import numpy as np
 import pytest
 
+from sktime.datasets import load_unit_test
+from sktime.datatypes import check_is_scitype
 from sktime.utils._testing.deep_equals import deep_equals
-from sktime.utils.sampling import random_partition
+from sktime.utils.sampling import random_partition, stratified_resample
 
 NK_FIXTURES = [(10, 3), (15, 5), (19, 6), (3, 1), (1, 2)]
 SEED_FIXTURES = [42, 0, 100, -5]
@@ -42,3 +45,23 @@ def test_seed(n, k, seed):
     part2 = random_partition(n, k, seed)
 
     assert deep_equals(part, part2)
+
+
+def test_stratified_resample():
+    """Test resampling returns valid data structure and maintains class distribution."""
+    trainX, trainy = load_unit_test(split="TRAIN")
+    testX, testy = load_unit_test(split="TEST")
+    new_trainX, new_trainy, new_testX, new_testy = stratified_resample(
+        trainX, trainy, testX, testy, 0
+    )
+
+    valid_train = check_is_scitype(new_trainX, scitype="Panel")
+    valid_test = check_is_scitype(new_testX, scitype="Panel")
+    assert valid_test and valid_train
+    # count class occurrences
+    unique_train, counts_train = np.unique(trainy, return_counts=True)
+    unique_test, counts_test = np.unique(testy, return_counts=True)
+    unique_train_new, counts_train_new = np.unique(new_trainy, return_counts=True)
+    unique_test_new, counts_test_new = np.unique(new_testy, return_counts=True)
+    assert list(counts_train_new) == list(counts_train)
+    assert list(counts_test_new) == list(counts_test)
