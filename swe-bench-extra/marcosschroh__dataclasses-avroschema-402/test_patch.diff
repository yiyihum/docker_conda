diff --git a/tests/model_generator/conftest.py b/tests/model_generator/conftest.py
index bec01d9..58873a6 100644
--- a/tests/model_generator/conftest.py
+++ b/tests/model_generator/conftest.py
@@ -212,6 +212,24 @@ def schema_with_enum_types() -> Dict:
     }
 
 
+@pytest.fixture
+def schema_with_enum_types_case_sensitivity() -> Dict:
+    return {
+        "type": "record",
+        "name": "User",
+        "fields": [
+            {
+                "name": "unit_multi_player",
+                "type": {
+                    "type": "enum",
+                    "name": "unit_multi_player",
+                    "symbols": ["Q", "q"],
+                },
+            }
+        ],
+    }
+
+
 @pytest.fixture
 def schema_one_to_one_relationship() -> JsonDict:
     return {
diff --git a/tests/model_generator/test_model_generator.py b/tests/model_generator/test_model_generator.py
index a3d3e6d..a0a9279 100644
--- a/tests/model_generator/test_model_generator.py
+++ b/tests/model_generator/test_model_generator.py
@@ -204,6 +204,28 @@ class User(AvroModel):
     assert result.strip() == expected_result.strip()
 
 
+def test_schema_with_enum_types_case_sensitivity(schema_with_enum_types_case_sensitivity: types.JsonDict) -> None:
+    expected_result = """
+from dataclasses_avroschema import AvroModel
+import dataclasses
+import enum
+
+
+class UnitMultiPlayer(enum.Enum):
+    Q = "Q"
+    q = "q"
+
+
+@dataclasses.dataclass
+class User(AvroModel):
+    unit_multi_player: UnitMultiPlayer
+
+"""
+    model_generator = ModelGenerator()
+    result = model_generator.render(schema=schema_with_enum_types_case_sensitivity)
+    assert result.strip() == expected_result.strip()
+
+
 def test_schema_one_to_one_relationship(schema_one_to_one_relationship: types.JsonDict) -> None:
     expected_result = """
 from dataclasses_avroschema import AvroModel
