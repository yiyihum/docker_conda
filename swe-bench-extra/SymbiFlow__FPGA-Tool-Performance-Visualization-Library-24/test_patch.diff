diff --git a/tests/test_fetcher_small.py b/tests/test_fetcher_small.py
index 80d8fdc..84bde5e 100644
--- a/tests/test_fetcher_small.py
+++ b/tests/test_fetcher_small.py
@@ -22,6 +22,7 @@ class TestHydraFetcherSmall(unittest.TestCase):
             different mapping
                 exclusion, renaming
             pagination
+            with/without board and date information
     """
 
     def test_hydrafetcher_init(self):
@@ -75,7 +76,11 @@ class TestHydraFetcherSmall(unittest.TestCase):
                     
                     # /meta.json
                     meta_url = f'https://hydra.vtr.tools/build/{build_num}/download/5/meta.json'
-                    payload = {"build_num": build_num}
+                    payload = {
+                        "build_num": build_num,
+                        "date": "2020-07-17T22:12:40",
+                        "board": "arty"
+                    }
                     m.get(meta_url, json=payload) # setup /meta.json request mock
 
             # run tests on different eval_num
@@ -88,8 +93,161 @@ class TestHydraFetcherSmall(unittest.TestCase):
                         eval_num=eval_num)
                     result = hf.get_evaluation().get_df()
 
-                    col = [x for x in range(eval_num * 4, eval_num * 4 + 4)]
-                    expected = pd.DataFrame({"build_num": col})
+                    expected = pd.DataFrame({
+                        "build_num": [x for x in range(eval_num * 4, eval_num * 4 + 4)],
+                        "date": ["2020-07-17T22:12:40" for _ in range(4)],
+                        "board": ["arty" for _ in range(4)]
+                        })
+                    assert_frame_equal(result, expected)
+
+                    eval_id = hf.get_evaluation().get_eval_id()
+                    assert eval_id == eval_num + 1
+
+    def test_hydrafetcher_get_evaluation_icebreaker_old(self):
+        """
+        get_evaluation() should return an Evaluation corresponding to the small
+        dataset and the specified eval_num.
+
+        Tests legacy icebreaker support, where icebreaker boards report
+        max frequency in MHz instead of Hz.
+        """
+        with requests_mock.Mocker() as m:
+            evals_fn = 'tests/sample_data/evals.small.json'
+            evals_url = 'https://hydra.vtr.tools/jobset/dusty/fpga-tool-perf/evals'
+
+            build_fn = 'tests/sample_data/build.small.json'
+
+            # setup /evals request mock
+            with open(evals_fn, "r") as f:
+                json_data = f.read()
+                m.get(evals_url, text=json_data) 
+
+            # setup /build and /meta.json request mock
+            with open(build_fn, "r") as f:
+                json_data = f.read()
+
+                for build_num in range(12):
+                    # /build/:buildid
+                    build_url = f'https://hydra.vtr.tools/build/{build_num}'
+                    m.get(build_url, text=json_data)
+                    
+                    # /meta.json
+                    meta_url = f'https://hydra.vtr.tools/build/{build_num}/download/5/meta.json'
+                    payload = {
+                        "build_num": build_num,
+                        "date": "2020-07-30T22:12:40",
+                        "board": "icebreaker",
+                        "max_freq": 81.05
+                    }
+                    m.get(meta_url, json=payload) # setup /meta.json request mock
+
+            # run tests on different eval_num
+            for eval_num in range(0, 3):
+                with self.subTest(eval_num=eval_num):
+                    # if mapping is not defined, should not remap
+                    hf = HydraFetcher(
+                        project="dusty",
+                        jobset="fpga-tool-perf",
+                        eval_num=eval_num,
+                        mapping={"build_num": "build_num"})
+                    result = hf.get_evaluation().get_df()
+
+                    expected = pd.DataFrame({
+                        "build_num": [x for x in range(eval_num * 4, eval_num * 4 + 4)],
+                        "freq": [81.05 for _ in range(4)]
+                        })
+                    print(result.columns)
+                    assert_frame_equal(result, expected)
+
+                    eval_id = hf.get_evaluation().get_eval_id()
+                    assert eval_id == eval_num + 1
+
+    def test_hydrafetcher_get_evaluation_icebreaker_new(self):
+        """
+        get_evaluation() should return an Evaluation corresponding to the small
+        dataset and the specified eval_num.
+
+        Tests legacy icebreaker support does not affect an eval where the date
+        is not before 7-31-2020.
+        """
+        with requests_mock.Mocker() as m:
+            evals_fn = 'tests/sample_data/evals.small.json'
+            evals_url = 'https://hydra.vtr.tools/jobset/dusty/fpga-tool-perf/evals'
+
+            build_fn = 'tests/sample_data/build.small.json'
+
+            # setup /evals request mock
+            with open(evals_fn, "r") as f:
+                json_data = f.read()
+                m.get(evals_url, text=json_data) 
+
+            # setup /build and /meta.json request mock
+            with open(build_fn, "r") as f:
+                json_data = f.read()
+
+                # test if date is not before 7-31-2020
+                for build_num in range(4):
+                    # /build/:buildid
+                    build_url = f'https://hydra.vtr.tools/build/{build_num}'
+                    m.get(build_url, text=json_data)
+                    
+                    # /meta.json
+                    meta_url = f'https://hydra.vtr.tools/build/{build_num}/download/5/meta.json'
+                    payload = {
+                        "build_num": build_num,
+                        "date": "2020-07-31T22:12:40",
+                        "board": "icebreaker",
+                        "max_freq": 81050000
+                    }
+                    m.get(meta_url, json=payload) # setup /meta.json request mock
+
+                # test if board is not icebreaker
+                for build_num in range(4, 8):
+                    # /build/:buildid
+                    build_url = f'https://hydra.vtr.tools/build/{build_num}'
+                    m.get(build_url, text=json_data)
+                    
+                    # /meta.json
+                    meta_url = f'https://hydra.vtr.tools/build/{build_num}/download/5/meta.json'
+                    payload = {
+                        "build_num": build_num,
+                        "date": "2020-07-30T22:12:40",
+                        "board": "arty",
+                        "max_freq": 81050000
+                    }
+                    m.get(meta_url, json=payload) # setup /meta.json request mock
+
+                # test if date and board are not included
+                for build_num in range(8, 12):
+                    # /build/:buildid
+                    build_url = f'https://hydra.vtr.tools/build/{build_num}'
+                    m.get(build_url, text=json_data)
+                    
+                    # /meta.json
+                    meta_url = f'https://hydra.vtr.tools/build/{build_num}/download/5/meta.json'
+                    payload = {
+                        "build_num": build_num,
+                        # date and build intentionally removed
+                        "max_freq": 81050000
+                    }
+                    m.get(meta_url, json=payload) # setup /meta.json request mock
+
+            # run tests on different eval_num
+            for eval_num in range(0, 3):
+                with self.subTest(eval_num=eval_num):
+                    # if mapping is not defined, should not remap
+                    hf = HydraFetcher(
+                        project="dusty",
+                        jobset="fpga-tool-perf",
+                        eval_num=eval_num,
+                        mapping={"build_num": "build_num"})
+                    result = hf.get_evaluation().get_df()
+
+                    # all results should have frequency converted from hz to mhz (no legacy icebreaker)
+                    expected = pd.DataFrame({
+                        "build_num": [x for x in range(eval_num * 4, eval_num * 4 + 4)],
+                        "freq": [81.05 for _ in range(4)]
+                        })
                     assert_frame_equal(result, expected)
 
                     eval_id = hf.get_evaluation().get_eval_id()
@@ -168,7 +326,7 @@ class TestHydraFetcherSmall(unittest.TestCase):
             # setup /evals request mock
             with open(evals_fn, "r") as f:
                 json_data = f.read()
-                m.get(evals_url, text=json_data) 
+                m.get(evals_url, text=json_data)
 
             # setup /build and /meta.json request mock
             with open(build_fn, "r") as f:
@@ -181,7 +339,11 @@ class TestHydraFetcherSmall(unittest.TestCase):
                     
                     # /meta.json
                     meta_url = f'https://hydra.vtr.tools/build/{build_num}/download/5/meta.json'
-                    payload = {"build_num": build_num}
+                    payload = {
+                        "build_num": build_num,
+                        "date": "2020-07-17T22:12:40",
+                        "board": "arty"
+                    }
                     m.get(meta_url, json=payload) # setup /meta.json request mock
 
             # test exclusion
@@ -243,15 +405,17 @@ class TestHydraFetcherSmall(unittest.TestCase):
                     payload = {
                         "max_freq": {
                             "clk": {
-                                "actual": 100
+                                "actual": 1000000
                             },
                             "clk_i": {
-                                "actual": 200
+                                "actual": 2000000
                             },
                             "sys_clk": {
-                                "actual": 300
+                                "actual": 3000000
                             }
-                        }
+                        },
+                        "date": "2020-07-17T22:12:40",
+                        "board": "arty"
                     }
                     m.get(url, json=payload) # setup /meta.json request mock
 
@@ -260,9 +424,9 @@ class TestHydraFetcherSmall(unittest.TestCase):
             # format test cases as tuples:
             # ({hydra_clock_names}, {expected_clock})
             test_cases = [
-                (["clk", "clk_i", "sys_clk"], 100),
-                (["clk_i", "sys_clk", "clk"], 200),
-                (["sys_clk", "clk", "clk_i"], 300),
+                (["clk", "clk_i", "sys_clk"], 1.0),
+                (["clk_i", "sys_clk", "clk"], 2.0),
+                (["sys_clk", "clk", "clk_i"], 3.0),
             ]
 
             for hydra_clock_name, expected_clock in test_cases:
@@ -286,7 +450,7 @@ class TestHydraFetcherSmall(unittest.TestCase):
                 hydra_clock_names=[])
             result = hf.get_evaluation().get_df()
 
-            expected_col = [100 for _ in range(4)]
+            expected_col = [1.0 for _ in range(4)]
             expected_series = pd.Series(expected_col, name="freq")
             assert_series_equal(result["freq"], expected_series)
 
diff --git a/tests/test_helpers.py b/tests/test_helpers.py
index fed1e6f..e343be5 100644
--- a/tests/test_helpers.py
+++ b/tests/test_helpers.py
@@ -39,30 +39,13 @@ class TestHelpers():
         result = get_versions({})
         assert result == {}
 
-    def test_rescale_actual_freq(self):
-        """ Test if rescaling works correctly """
-        result = rescale_actual_freq(1_000_000)
-        assert result == 1_000_000
-
-        result = rescale_actual_freq(1_000_001)
-        assert result == 1.000001
-
-        result = rescale_actual_freq(1000)
-        assert result == 1000
-
-        result = rescale_actual_freq(32_000_000)
-        assert result == 32
-
-        result = rescale_actual_freq(5_000_000)
-        assert result == 5
-
     def test_get_actual_freq(self):
         """ Test if get_actual_freq correctly extracts max frequency """
         obj = {
-            "max_freq": 500
+            "max_freq": 5_000_000
         }
         result = get_actual_freq(flatten(obj))
-        assert result == 500
+        assert result == 5_000_000
 
         obj = {
             "max_freq": {
@@ -72,7 +55,7 @@ class TestHelpers():
             }
         }
         result = get_actual_freq(flatten(obj))
-        assert result == 12
+        assert result == 12_000_000
 
     def test_get_actual_freq_hydra_clock_names(self):
         """ Test if get_actual_freq correctly selects the most important clock """
@@ -89,7 +72,7 @@ class TestHelpers():
             }
         }
         result = get_actual_freq(flatten(obj), ["clk", "sys_clk", "clk_i"])
-        assert result == 12
+        assert result == 12_000_000
 
         # should select sys_clk since it is higher priority
         obj = {
@@ -103,7 +86,7 @@ class TestHelpers():
             }
         }
         result = get_actual_freq(flatten(obj), ["clk", "sys_clk", "clk_i"])
-        assert result == 24
+        assert result == 24_000_000
 
         # should select clk_i since it is higher priority 
         obj = {
@@ -117,7 +100,7 @@ class TestHelpers():
             }
         }
         result = get_actual_freq(flatten(obj), ["clk_i", "sys_clk", "clk"])
-        assert result == 12
+        assert result == 12_000_000
 
         # should select shortest clock name since none are specified
         obj = {
@@ -131,7 +114,7 @@ class TestHelpers():
             }
         }
         result = get_actual_freq(flatten(obj), ["clk", "sys_clk", "clk_i"])
-        assert result == 12
+        assert result == 12_000_000
     
     def test_get_styling(self):
         """ Test if get_styling correctly queries colormap and returns correct
