diff --git a/persistqueue/sqlbase.py b/persistqueue/sqlbase.py
index 48955f7..e0a7672 100644
--- a/persistqueue/sqlbase.py
+++ b/persistqueue/sqlbase.py
@@ -79,6 +79,7 @@ class SQLiteBase(object):
 
     def _init(self):
         """Initialize the tables in DB."""
+
         if self.path == self._MEMORY:
             self.memory_sql = True
             log.debug("Initializing Sqlite3 Queue in memory.")
@@ -99,19 +100,26 @@ class SQLiteBase(object):
             if not self.memory_sql:
                 self._putter = self._new_db_connection(
                     self.path, self.multithreading, self.timeout)
-
+        if self.auto_commit is False:
+            log.warning('auto_commit=False is still experimental,'
+                        'only use it with care.')
+            self._getter.isolation_level = "DEFERRED"
+            self._putter.isolation_level = "DEFERRED"
         # SQLite3 transaction lock
         self.tran_lock = threading.Lock()
         self.put_event = threading.Event()
 
     def _new_db_connection(self, path, multithreading, timeout):
+        conn = None
         if path == self._MEMORY:
-            return sqlite3.connect(path,
+            conn = sqlite3.connect(path,
                                    check_same_thread=not multithreading)
         else:
-            return sqlite3.connect('{}/data.db'.format(path),
+            conn = sqlite3.connect('{}/data.db'.format(path),
                                    timeout=timeout,
                                    check_same_thread=not multithreading)
+        conn.execute('PRAGMA journal_mode=WAL;')
+        return conn
 
     @with_conditional_transaction
     def _insert_into(self, *record):
@@ -134,7 +142,7 @@ class SQLiteBase(object):
     def _count(self):
         sql = 'SELECT COUNT({}) FROM {}'.format(self._key_column,
                                                 self._table_name)
-        row = self._putter.execute(sql).fetchone()
+        row = self._getter.execute(sql).fetchone()
         return row[0] if row else 0
 
     def _task_done(self):
diff --git a/persistqueue/sqlqueue.py b/persistqueue/sqlqueue.py
index 6c86f2f..2a53cfe 100644
--- a/persistqueue/sqlqueue.py
+++ b/persistqueue/sqlqueue.py
@@ -15,6 +15,9 @@ sqlite3.enable_callback_tracebacks(True)
 
 log = logging.getLogger(__name__)
 
+# 10 seconds internal for `wait` of event
+TICK_FOR_WAIT = 10
+
 
 class SQLiteQueue(sqlbase.SQLiteBase):
     """SQLite3 based FIFO queue."""
@@ -44,7 +47,7 @@ class SQLiteQueue(sqlbase.SQLiteBase):
     def _pop(self):
         with self.action_lock:
             row = self._select()
-            # Perhaps a sqilite bug, sometimes (None, None) is returned
+            # Perhaps a sqlite3 bug, sometimes (None, None) is returned
             # by select, below can avoid these invalid records.
             if row and row[0] is not None:
                 self._delete(row[0])
@@ -54,23 +57,31 @@ class SQLiteQueue(sqlbase.SQLiteBase):
                 return row[1]  # pickled data
             return None
 
-    def get(self, block=False):
-        unpickled = self._pop()
-        item = None
-        if unpickled:
-            item = pickle.loads(unpickled)
+    def get(self, block=True, timeout=None):
+        if not block:
+            pickled = self._pop()
+            if not pickled:
+                raise Empty
+        elif timeout is None:
+            # block until a put event.
+            pickled = self._pop()
+            while not pickled:
+                self.put_event.wait(TICK_FOR_WAIT)
+                pickled = self._pop()
+        elif timeout < 0:
+            raise ValueError("'timeout' must be a non-negative number")
         else:
-            if block:
-                end = _time.time() + 10.0
-                while not unpickled:
-                    remaining = end - _time.time()
-                    if remaining <= 0.0:
-                        raise Empty
-                    # wait for no more than 10 seconds
-                    self.put_event.wait(remaining)
-                    unpickled = self._pop()
-                item = pickle.loads(unpickled)
-
+            # block until the timeout reached
+            endtime = _time.time() + timeout
+            pickled = self._pop()
+            while not pickled:
+                remaining = endtime - _time.time()
+                if remaining <= 0.0:
+                    raise Empty
+                self.put_event.wait(
+                    TICK_FOR_WAIT if TICK_FOR_WAIT < remaining else remaining)
+                pickled = self._pop()
+        item = pickle.loads(pickled)
         return item
 
     def task_done(self):

