diff --git a/tests/cli/test_faulty_invocations.py b/tests/cli/test_faulty_invocations.py
index d81fbd8..d538ec6 100644
--- a/tests/cli/test_faulty_invocations.py
+++ b/tests/cli/test_faulty_invocations.py
@@ -9,7 +9,7 @@ def test_key_does_not_exist(cli):
         cli.path_for_content("{{FOO}}"),
         env={}
     )
-    assert p.stdout == "\n"
+    assert p.stdout == ""
 
 
 def test_corrupt_yaml(cli):
diff --git a/tests/cli/test_standard_usecases.py b/tests/cli/test_standard_usecases.py
index c3c9426..90d0c68 100644
--- a/tests/cli/test_standard_usecases.py
+++ b/tests/cli/test_standard_usecases.py
@@ -3,12 +3,12 @@ from . import cli
 
 def test_source_environment(cli):
     p = cli("-e", cli.path_for_content("{{FOO}}"), env={"FOO": "bar"})
-    assert p.stdout == "bar\n"
+    assert p.stdout == "bar"
 
 
 def test_unicode_var(cli):
     p = cli("-e", cli.path_for_content("{{FOO}}"), env={"FOO": "üêç"})
-    assert p.stdout == "üêç\n"
+    assert p.stdout == "üêç"
 
 
 def test_shadowing_json_env(cli):
@@ -18,7 +18,7 @@ def test_shadowing_json_env(cli):
         cli.path_for_content("{{FOO}}"),
         env={"FOO": "env"}
     )
-    assert p.stdout == "env\n"
+    assert p.stdout == "env"
 
 
 def test_shadowing_yaml_env(cli):
@@ -28,7 +28,7 @@ def test_shadowing_yaml_env(cli):
         cli.path_for_content("{{FOO}}"),
         env={"FOO": "env"}
     )
-    assert p.stdout == "env\n"
+    assert p.stdout == "env"
 
 
 def test_yaml_flow_style(cli):
@@ -36,7 +36,7 @@ def test_yaml_flow_style(cli):
         "--yaml", cli.path_for_content('{"FOO": "yaml"}'),
         cli.path_for_content("{{FOO}}")
     )
-    assert p.stdout == "yaml\n"
+    assert p.stdout == "yaml"
 
 
 def test_environment_by_default(cli):
@@ -44,7 +44,7 @@ def test_environment_by_default(cli):
         cli.path_for_content("{{FOO}}"),
         env={"FOO": "bar"}
     )
-    assert p.stdout == "bar\n"
+    assert p.stdout == "bar"
 
 
 def test_sub_dict_shadowing(cli):
@@ -53,7 +53,7 @@ def test_sub_dict_shadowing(cli):
         "--json", cli.path_for_json({"FOO": {"BAR": "second"}}),
         cli.path_for_content("{{FOO['BAR']}}")
     )
-    assert p.stdout == "second\n"
+    assert p.stdout == "second"
 
 
 def test_sub_dict_merging(cli):
@@ -62,7 +62,7 @@ def test_sub_dict_merging(cli):
         "--json", cli.path_for_json({"merge": {"BAR": "bar"}}),
         cli.path_for_content("{{merge['FOO']}}{{merge['BAR']}}")
     )
-    assert p.stdout == "foobar\n"
+    assert p.stdout == "foobar"
 
 
 def test_second_sub_dict_shadowing(cli):
@@ -71,7 +71,7 @@ def test_second_sub_dict_shadowing(cli):
         "--json", cli.path_for_json({"merge": {"deeper": {"overwritten": "bar"}}}),
         cli.path_for_content("{{merge.deeper.overwritten}}")
     )
-    assert p.stdout == "bar\n"
+    assert p.stdout == "bar"
 
 
 def test_second_sub_dict_merging(cli):
@@ -80,7 +80,7 @@ def test_second_sub_dict_merging(cli):
         "--json", cli.path_for_json({"merge": {"deeper": {"BAR": "bar"}}}),
         cli.path_for_content("{{merge.deeper.FOO}}{{merge.deeper.BAR}}")
     )
-    assert p.stdout == "foobar\n"
+    assert p.stdout == "foobar"
 
 
 def test_shadowing_of_dict(cli):
@@ -89,4 +89,29 @@ def test_shadowing_of_dict(cli):
         "--json", cli.path_for_json({"merge": 'bar'}),
         cli.path_for_content("{{merge}}")
     )
+    assert p.stdout == "bar"
+
+
+def test_keep_no_newline_at_end(cli):
+    p = cli(cli.path_for_content("{{FOO}}"), env={"FOO": "bar"})
+    assert p.stdout == "bar"
+
+
+def test_keep_one_newline_at_end(cli):
+    p = cli(cli.path_for_content("{{FOO}}\n"), env={"FOO": "bar"})
     assert p.stdout == "bar\n"
+
+
+def test_keep_two_newlines_at_end(cli):
+    p = cli(cli.path_for_content("{{FOO}}\n\n"), env={"FOO": "bar"})
+    assert p.stdout == "bar\n\n"
+
+
+def test_keep_one_newline_at_beginning(cli):
+    p = cli(cli.path_for_content("\n{{FOO}}"), env={"FOO": "bar"})
+    assert p.stdout == "\nbar"
+
+
+def test_keep_two_newlines_at_beginning(cli):
+    p = cli(cli.path_for_content("\n\n{{FOO}}"), env={"FOO": "bar"})
+    assert p.stdout == "\n\nbar"
