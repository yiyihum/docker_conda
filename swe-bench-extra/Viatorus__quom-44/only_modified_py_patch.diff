diff --git a/src/quom/__main__.py b/src/quom/__main__.py
index 77d99b3..bb62485 100644
--- a/src/quom/__main__.py
+++ b/src/quom/__main__.py
@@ -29,6 +29,8 @@ def main(args: List[str]):
     parser.add_argument('--source_directory', '-S', type=str, action='append', default=['.'],
                         help='Set the source directories for source files. '
                              'Use ./ or .\\ in front of a path to mark as relative to the header file.')
+    parser.add_argument('--encoding', '-e', type=str, default='utf-8',
+                        help='The encoding used to read and write all files.')
 
     args = parser.parse_args(args)
 
@@ -45,9 +47,9 @@ def main(args: List[str]):
         else:
             source_directories.append(path.resolve())
 
-    with args.output_path.open('w+') as file:
+    with args.output_path.open('w+', encoding=args.encoding) as file:
         Quom(args.input_path, file, args.stitch, args.include_guard, args.trim, args.include_directory,
-             relative_source_directories, source_directories)
+             relative_source_directories, source_directories, args.encoding)
 
 
 def run():
diff --git a/src/quom/quom.py b/src/quom/quom.py
index 5f7d51c..3cf4e13 100644
--- a/src/quom/quom.py
+++ b/src/quom/quom.py
@@ -31,7 +31,8 @@ class Quom:
                  include_guard_format: str = None, trim: bool = True,
                  include_directories: List[Union[Path, str]] = None,
                  relative_source_directories: List[Union[Path]] = None,
-                 source_directories: List[Union[Path]] = None):
+                 source_directories: List[Union[Path]] = None,
+                 encoding: str = 'utf-8'):
         self.__dst = dst
         self.__stitch_format = stitch_format
         self.__include_guard_format = re.compile('^{}$'.format(include_guard_format)) if include_guard_format else None
@@ -40,6 +41,7 @@ class Quom:
         self.__relative_source_directories = relative_source_directories if relative_source_directories else [] \
             if source_directories else [Path('.')]
         self.__source_directories = source_directories if source_directories else [Path('.')]
+        self.__encoding = encoding
 
         self.__processed_files = set()
         self.__source_files = Queue()
@@ -65,16 +67,11 @@ class Quom:
                        is_main_header=False):
         # First check if file exists relative.
         file_path = relative_path / include_path
-        if file_path.exists():
-            with file_path.open() as file:
-                tokens = tokenize(file.read())
-        else:
+        if not file_path.exists():
             # Otherwise search in include directories.
             for include_directory in self.__include_directories:
                 file_path = include_directory / include_path
                 if file_path.exists():
-                    with file_path.open() as file:
-                        tokens = tokenize(file.read())
                     break
             else:
                 raise QuomError('Include not found: "{}"'.format(include_path))
@@ -85,6 +82,9 @@ class Quom:
             return
         self.__processed_files.add(file_path)
 
+        # Tokenize the file.
+        tokens = tokenize(file_path.read_text(encoding=self.__encoding))
+
         for token in tokens:
             # Find local includes.
             token = self.__scan_for_include(file_path, token, is_source_file)

