diff --git a/tests/test_quom/same_file_different_include.py b/tests/test_quom/same_file_different_include.py
index 8ef3b9d..a913dbc 100644
--- a/tests/test_quom/same_file_different_include.py
+++ b/tests/test_quom/same_file_different_include.py
@@ -26,13 +26,13 @@ def test_same_file_different_include(fs):
     os.makedirs('a')
     os.makedirs('b')
 
-    with open('main.cpp', 'w+') as file:
+    with open('main.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_MAIN_CPP)
 
-    with open('a/foo.hpp', 'w+') as file:
+    with open('a/foo.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_HPP)
 
-    with open('b/bar.hpp', 'w+') as file:
+    with open('b/bar.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_BAR_HPP)
 
     dst = StringIO()
diff --git a/tests/test_quom/test_file_encoding.py b/tests/test_quom/test_file_encoding.py
new file mode 100644
index 0000000..416a993
--- /dev/null
+++ b/tests/test_quom/test_file_encoding.py
@@ -0,0 +1,40 @@
+from pathlib import Path
+
+import pytest
+
+from quom.__main__ import main
+
+FILE_MAIN_HPP = """
+int foo(); // qθομ"""
+
+
+def test_file_encoding_default_encoding(fs):
+    with open('main.hpp', 'w+', encoding='utf-8') as file:
+        file.write(FILE_MAIN_HPP)
+
+    main(['main.hpp', 'result.hpp'])
+    assert Path('result.hpp').read_text('utf-8') == FILE_MAIN_HPP
+
+    with pytest.raises(UnicodeDecodeError):
+        Path('result.hpp').read_text('ascii')
+
+    with pytest.raises(UnicodeDecodeError):
+        Path('result.hpp').read_text('utf-32')
+
+
+def test_file_encoding_custom_encoding(fs):
+    with open('main.hpp', 'w+', encoding='utf-32') as file:
+        file.write(FILE_MAIN_HPP)
+
+    main(['main.hpp', 'result.hpp', '--encoding=utf-32'])
+
+    assert Path('result.hpp').read_text('utf-32') == FILE_MAIN_HPP
+
+    with pytest.raises(UnicodeDecodeError):
+        Path('result.hpp').read_text('utf-8')
+
+    with pytest.raises(UnicodeDecodeError):
+        main(['main.hpp', 'result.hpp'])
+
+    with pytest.raises(UnicodeDecodeError):
+        main(['main.hpp', 'result.hpp', '--encoding=utf-8'])
diff --git a/tests/test_quom/test_include_directory.py b/tests/test_quom/test_include_directory.py
index 1d8e572..1666ecf 100644
--- a/tests/test_quom/test_include_directory.py
+++ b/tests/test_quom/test_include_directory.py
@@ -79,28 +79,28 @@ def test_include_directory(fs):
     os.makedirs('include/my_lib/util')
     os.makedirs('include/my_other_lib/')
 
-    with open('include/my_lib/main.hpp', 'w+') as file:
+    with open('include/my_lib/main.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_MAIN_HPP)
 
-    with open('include/my_lib/core/core.hpp', 'w+') as file:
+    with open('include/my_lib/core/core.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_CORE_HPP)
 
-    with open('include/my_lib/core/core.cpp', 'w+') as file:
+    with open('include/my_lib/core/core.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_CORE_CPP)
 
-    with open('include/my_lib/util/foo.hpp', 'w+') as file:
+    with open('include/my_lib/util/foo.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_HPP)
 
-    with open('include/my_lib/util/foo.cpp', 'w+') as file:
+    with open('include/my_lib/util/foo.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_CPP)
 
-    with open('include/my_other_lib/bar.hpp', 'w+') as file:
+    with open('include/my_other_lib/bar.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_BAR_HPP)
 
-    with open('include/my_other_lib/bar.cpp', 'w+') as file:
+    with open('include/my_other_lib/bar.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_BAR_CPP)
 
-    with open('include/my_other_lib/info.hpp', 'w+') as file:
+    with open('include/my_other_lib/info.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_INFO_HPP)
 
     dst = StringIO()
diff --git a/tests/test_quom/test_last_source_file.py b/tests/test_quom/test_last_source_file.py
index 96e2c98..c227c21 100644
--- a/tests/test_quom/test_last_source_file.py
+++ b/tests/test_quom/test_last_source_file.py
@@ -82,13 +82,13 @@ int foo = 42;"""
 
 
 def init():
-    with open('main.hpp', 'w+') as file:
+    with open('main.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_MAIN_HPP)
 
-    with open('foo.hpp', 'w+') as file:
+    with open('foo.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_HPP)
 
-    with open('foo.cpp', 'w+') as file:
+    with open('foo.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_CPP)
 
 
@@ -111,7 +111,7 @@ def test_normal_without_trim(fs):
 
 
 def test_without_newline_at_end(fs):
-    with open('main.hpp', 'w+') as file:
+    with open('main.hpp', 'w+', encoding='utf-8') as file:
         file.write('int a;')
 
     dst = StringIO()
diff --git a/tests/test_quom/test_normal.py b/tests/test_quom/test_normal.py
index a718b87..48dd016 100644
--- a/tests/test_quom/test_normal.py
+++ b/tests/test_quom/test_normal.py
@@ -166,13 +166,13 @@ int foo = 42;
 
 
 def init():
-    with open('main.hpp', 'w+') as file:
+    with open('main.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_MAIN_HPP)
 
-    with open('foo.hpp', 'w+') as file:
+    with open('foo.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_HPP)
 
-    with open('foo.cpp', 'w+') as file:
+    with open('foo.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_FOO_CPP)
 
 
diff --git a/tests/test_quom/test_source_directory.py b/tests/test_quom/test_source_directory.py
index 790d417..9bd63bc 100644
--- a/tests/test_quom/test_source_directory.py
+++ b/tests/test_quom/test_source_directory.py
@@ -30,10 +30,10 @@ def test_source_directory(fs):
     os.makedirs('include/')
     os.makedirs('src/')
 
-    with open('include/main.hpp', 'w+') as file:
+    with open('include/main.hpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_MAIN_HPP)
 
-    with open('src/main.cpp', 'w+') as file:
+    with open('src/main.cpp', 'w+', encoding='utf-8') as file:
         file.write(FILE_MAIN_CPP)
 
     dst = StringIO()
