diff --git a/cdparacord/config.py b/cdparacord/config.py
index 962327b..c7e52e3 100644
--- a/cdparacord/config.py
+++ b/cdparacord/config.py
@@ -30,13 +30,11 @@ class Config:
     __default_config = {
         # Config for the encoder
         'encoder': {
-            'lame': {
-                'parameters': [
-                    '-V2',
-                    '${one_file}',
-                    '${out_file}'
-                ]
-            }
+            'lame': [
+                '-V2',
+                '${one_file}',
+                '${out_file}'
+            ]
         },
         # Tasks follow the format of encoder
         # post_rip are run after an individual file has been ripped to a
diff --git a/cdparacord/dependency.py b/cdparacord/dependency.py
index 9f47b51..b2f165e 100644
--- a/cdparacord/dependency.py
+++ b/cdparacord/dependency.py
@@ -27,7 +27,7 @@ class Dependency:
             # dir. I don't think anyone wants that but they... might...
             return name
 
-        for path in os.environ["PATH"].split(os.pathsep):
+        for path in os.environ['PATH'].split(os.pathsep):
             path = path.strip('"')
             binname = os.path.join(path, name)
             if os.path.isfile(binname) and os.access(binname, os.X_OK):
@@ -35,18 +35,53 @@ class Dependency:
 
         # If we haven't returned, the executable was not found
         raise DependencyError(
-            "Executable {} not found or not executable".format(name))
+            'Executable {} not found or not executable'.format(name))
+
+    def _verify_action_params(self, action):
+        """Confirm certain things about action configuration."""
+        if len(action) > 1:
+            multiple_actions = ', '.join(action.keys())
+            raise DependencyError(
+                'Tried to configure multiple actions in one dict: {}'
+                    .format(multiple_actions))
+
+        if len(action) < 1:
+            raise DependencyError(
+                'Configuration opened an action dict but it had no keys')
+
+        action_key = list(action.keys())[0]
+        action_params = action[action_key]
+
+        if type(action_params) is not list:
+            raise DependencyError(
+                '{} configuration has type {} (list expected)'
+                    .format(action_key, type(action_params).__name__))
+
+        for item in action_params:
+            if type(item) is not str:
+                raise DependencyError(
+                    'Found {} parameter {} with type {} (str expected)'
+                        .format(action_key, item, type(item).__name__))
 
     def _discover(self):
         """Discover dependencies and ensure they exist."""
 
-        # Find the executables
+        # Find the executables, and verify parameters for post-actions
+        # and encoder
         self._encoder = self._find_executable(
             list(self._config.get('encoder').keys())[0])
+
+        self._verify_action_params(self._config.get('encoder'))
+
         self._editor = self._find_executable(self._config.get('editor'))
         self._cdparanoia = self._find_executable(
             self._config.get('cdparanoia'))
 
+        for post_action in ('post_rip', 'post_encode', 'post_finished'):
+            for action in self._config.get(post_action):
+                self._find_executable(list(action.keys())[0])
+                self._verify_action_params(action)
+
         # Ensure discid is importable
         try:
             import discid
@@ -54,7 +89,7 @@ class Dependency:
         # it would be ridiculous as it only depends on documented
         # behaviour and only raises a further exception.
         except OSError as e:  # pragma: no cover
-            raise DependencyError("Could not find libdiscid") from e
+            raise DependencyError('Could not find libdiscid') from e
 
     @property
     def encoder(self):
