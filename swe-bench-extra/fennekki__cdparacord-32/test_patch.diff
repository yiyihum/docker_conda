diff --git a/tests/test_config.py b/tests/test_config.py
index 0bc761c..1a85588 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -185,4 +185,40 @@ def test_update_config_unknown_keys(mock_temp_home, capsys):
     c.update({'invalid_key': True}, quiet_ignore=False)
 
     out, err = capsys.readouterr()
-    assert err == "Warning: Unknown configuration key invalid_key\n"
+    assert err == 'Warning: Unknown configuration key invalid_key\n'
+
+def test_ensure_default_encoder_keys_are_strings(mock_temp_home):
+    """Test default encoder configuration."""
+    from cdparacord import config
+
+    c = config.Config()
+    
+    assert len(c.get('encoder')) == 1
+
+    for encoder in c.get('encoder'):
+        encoder_params = c.get('encoder')[encoder]
+        # If it's not a list something's wrong
+        assert type(encoder_params) is list
+
+        for item in encoder_params:
+            # And the params should be strings
+            assert type(item) is str
+
+def test_ensure_default_postaction_keys_are_strings(mock_temp_home):
+    """Test default encoder configuration."""
+    from cdparacord import config
+
+    c = config.Config()
+
+    for post_action in ('post_rip', 'post_encode', 'post_finished'):
+        for action in c.get(post_action):
+            assert len(action) == 1
+
+            for action_key in action:
+                action_params = action[action_key]
+                # If it's not a list something's wrong
+                assert type(action_params) is list
+
+                for item in action_params:
+                    # And the params should be strings
+                    assert type(item) is str
diff --git a/tests/test_dependency.py b/tests/test_dependency.py
index 96c0519..e7e92df 100644
--- a/tests/test_dependency.py
+++ b/tests/test_dependency.py
@@ -9,45 +9,57 @@ from cdparacord.dependency import Dependency, DependencyError
 
 
 @pytest.fixture
-def mock_external_binary():
+def mock_config_external():
+    """Mock the Config class such that it returns self.param.
+
+    In addition, querying for  encoder results in a dict that contains
+    an empty list in the key self.param.
+    """
+    class MockConfig:
+        def __init__(self, param):
+            self.param = param
+            self.encoder = {self.param: []}
+            self.post = [{self.param: []}]
+
+        def get(self, name):
+            # Maybe we should write a fake config file but there are
+            # Huge issues with mocking the config module...
+            if name == 'encoder':
+                return self.encoder
+            if name in ('post_rip', 'post_encode', 'post_finished'):
+                return self.post
+            return self.param
+    return MockConfig
+
+
+@pytest.fixture
+def mock_external_encoder(mock_config_external):
     """Mock an external dependency binary.
-    
+
     Create a file, set it to be executable and return it as an
-    ostensible external binary.
+    ostensible external binary via configuration.
     """
     with NamedTemporaryFile(prefix='cdparacord-unittest-') as f:
         os.chmod(f.name, stat.S_IXUSR)
-        yield f.name
 
+        conf = mock_config_external(f.name)
+        yield conf
 
-@pytest.fixture
-def mock_config_external():
-    """Mock the Config class such that it always returns given name."""
-    def get_config(mockbin):
-        class MockConfig:
-            def get(self, name):
-                # Maybe we should write a fake config file but there are
-                # Huge issues with mocking the config module...
-                if name == 'encoder':
-                    return {mockbin: []}
-                return mockbin
-        return MockConfig()
-    return get_config
-
-
-def test_find_valid_absolute_dependencies(mock_external_binary, mock_config_external):
+
+def test_find_valid_absolute_dependencies(mock_external_encoder):
     """Finds fake dependencies that exist by absolute path."""
-    
-    Dependency(mock_config_external(mock_external_binary))
+    Dependency(mock_external_encoder)
 
 
-def test_find_valid_dependencies_in_path(mock_external_binary, mock_config_external, monkeypatch):
+def test_find_valid_dependencies_in_path(mock_external_encoder, monkeypatch):
     """Finds fake dependencies that exist in $PATH."""
 
-    dirname, basename = os.path.split(mock_external_binary)
+    dirname, basename = os.path.split(mock_external_encoder.param)
     # Set PATH to only contain the directory our things are in
     monkeypatch.setenv("PATH", dirname)
-    Dependency(mock_config_external(basename))
+    conf = mock_external_encoder
+    conf.param = basename
+    Dependency(conf)
 
 
 def test_fail_to_find_dependencies(mock_config_external):
@@ -55,28 +67,59 @@ def test_fail_to_find_dependencies(mock_config_external):
         # This file should not be executable by default so the finding
         # should fail
         with pytest.raises(DependencyError):
-            Dependency(mock_config_external(f.name))
+            conf = mock_config_external(f.name)
+            Dependency(conf)
 
 
-def test_get_encoder(mock_config_external, mock_external_binary):
+def test_get_encoder(mock_external_encoder):
     """Get the 'encoder' property."""
 
-    deps = Dependency(mock_config_external(mock_external_binary))
+    deps = Dependency(mock_external_encoder)
     # It's an absolute path so the value should be the same
-    assert deps.encoder == mock_external_binary
+    assert deps.encoder == mock_external_encoder.param
 
 
-def test_get_editor(mock_config_external, mock_external_binary):
+def test_get_editor(mock_external_encoder):
     """Get the 'editor' property."""
 
-    deps = Dependency(mock_config_external(mock_external_binary))
+    deps = Dependency(mock_external_encoder)
     # It's an absolute path so the value should be the same
-    assert deps.editor == mock_external_binary
+    assert deps.editor == mock_external_encoder.param
 
 
-def test_get_cdparanoia(mock_config_external, mock_external_binary):
+def test_get_cdparanoia(mock_external_encoder):
     """Get the 'cdparanoia' property."""
 
-    deps = Dependency(mock_config_external(mock_external_binary))
+    deps = Dependency(mock_external_encoder)
     # It's an absolute path so the value should be the same
-    assert deps.cdparanoia == mock_external_binary
+    assert deps.cdparanoia == mock_external_encoder.param
+
+def test_verify_action_params(mock_external_encoder):
+    """Ensure encoder and post-action parameter verification works."""
+
+    conf = mock_external_encoder
+    deps = Dependency(conf)
+
+    # Dict can only have one key
+    invalid_input = {'a': [], 'b': []}
+    with pytest.raises(DependencyError):
+        deps._verify_action_params(invalid_input)
+
+    # Dict mustn't be empty
+    invalid_input = {}
+    with pytest.raises(DependencyError):
+        deps._verify_action_params(invalid_input)
+
+    # Type of encoder param container should be list
+    invalid_input = {conf.param: {'ah', 'beh'}}
+    with pytest.raises(DependencyError):
+        deps._verify_action_params(invalid_input)
+
+    # Type of encoder param items should be str
+    invalid_input = {conf.param: [1]}
+    with pytest.raises(DependencyError):
+        deps._verify_action_params(invalid_input)
+
+    # Test valid
+    deps._verify_action_params({'valid': ['totally', 'valid']})
+
