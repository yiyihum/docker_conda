diff --git a/tests/test_bags.py b/tests/test_bags.py
index 0e66f01..43f9d39 100644
--- a/tests/test_bags.py
+++ b/tests/test_bags.py
@@ -66,10 +66,8 @@ def test_nlargest():
 def test_nlargest_deprecated():
 	"""Test that nlargest raises a DeprecationWarning."""
 	b = bag()
-	with warnings.catch_warnings():
-		warnings.simplefilter('error')
-		with pytest.raises(DeprecationWarning):
-			b.nlargest()
+	with pytest.deprecated_call():
+		b.nlargest()
 
 
 def test_from_map():
diff --git a/tests/test_indexed_dict.py b/tests/test_indexed_dict.py
index af5f81e..b6c1f0e 100644
--- a/tests/test_indexed_dict.py
+++ b/tests/test_indexed_dict.py
@@ -1,6 +1,3 @@
-# pylint: disable=redefined-outer-name
-# pylint: disable=W0212
-
 import pytest
 
 from collections_extended.indexed_dict import IndexedDict
@@ -11,7 +8,7 @@ def assert_internal_state(self):
 	Returns True, so it can be used in an assert expression itself."""
 
 	assert len(self._dict) == len(self._list)
-	for k, (i, v) in self._dict.items():
+	for k, (i, v) in self._dict.items():  # noqa
 		k2, v2 = self._list[i]
 		assert k2 == k
 		assert v2 is v
@@ -61,11 +58,32 @@ def test_get_key_found(d, indexing):
 	assert d.get(**indexing) == 11
 
 
+@pytest.mark.parametrize("indexing", [{"key": "x"}, {"index": 100}, {"index": -6}])
+def test_get_specifying_missing_default(d, indexing):
+	assert d.get(default=5, **indexing) == 5
+
+
+def test_get_deprecated_param(d):
+	with pytest.deprecated_call():
+		assert d.get('x', d='XXX') == 'XXX'
+
+
 @pytest.mark.parametrize("indexing", [{"key": "x"}, {"index": 100}, {"index": -6}])
 def test_get_missing_default(d, indexing):
 	assert d.get(**indexing) is None
 
 
+def test_get_duplicate_default(d):
+	with pytest.raises(ValueError):
+		d.get(d=None, default=None)
+	with pytest.raises(ValueError):
+		d.get(d='XXX', default=None)
+	with pytest.raises(ValueError):
+		d.get(d=None, default='XXX')
+	with pytest.raises(ValueError):
+		d.get(d='XXX', default='XXX')
+
+
 def test_get_both_key_and_index(d):
 	with pytest.raises(TypeError):
 		d.get(key="a", index=4)
@@ -93,6 +111,11 @@ def test_pop_missing_default(d, indexing):
 	assert list(d) == list("abcde")
 
 
+def test_pop_duplicate_default(d):
+	with pytest.raises(ValueError):
+		d.pop(d='XXX', default='XXX')
+
+
 def test_pop_missing_key_no_default(d):
 	with pytest.raises(KeyError):
 		d.pop("X")
@@ -106,6 +129,11 @@ def test_pop_missing_index_no_default(d, index):
 	assert list(d) == list("abcde")
 
 
+def test_deprecated_pop_default(d):
+	with pytest.deprecated_call():
+		assert d.pop(999, d='XXX') == 'XXX'
+
+
 def test_pop_empty_default():
 	d = IndexedDict()
 	assert d.pop(d="XXX") == "XXX"
