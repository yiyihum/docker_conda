diff --git a/libchickadee/test/test_backend_ipapi.py b/libchickadee/test/test_backend_ipapi.py
index c10895c..62a0ee9 100644
--- a/libchickadee/test/test_backend_ipapi.py
+++ b/libchickadee/test/test_backend_ipapi.py
@@ -72,7 +72,7 @@ class IPAPITestCase(unittest.TestCase):
             mock_query.return_value = MockResponse(json_data=self.expected_result[count], status_code=200)
             self.resolver.data = ip
             data = self.resolver.single()
-            self.assertEqual(data, self.expected_result[count])
+            self.assertEqual(data, [self.expected_result[count]])
 
     @patch("libchickadee.backends.ipapi.requests.post")
     def test_ipapi_resolve_batch(self, mock_query):
@@ -105,7 +105,7 @@ class IPAPITestCase(unittest.TestCase):
     def test_ipapi_rate_limiting(self, mock_get, mock_post):
         single = {
             "test_data": self.test_data_ips[1],
-            "expected_data": self.expected_result[1],
+            "expected_data": [self.expected_result[1]],
             "mock_data": [
                 MockResponse(json_data={}, status_code=429, rl='0', ttl='2'),
                 MockResponse(json_data=self.expected_result[1], status_code=200, rl='0', ttl='0')
diff --git a/libchickadee/test/test_chickadee.py b/libchickadee/test/test_chickadee.py
index 03ea9c6..7de8cba 100644
--- a/libchickadee/test/test_chickadee.py
+++ b/libchickadee/test/test_chickadee.py
@@ -188,7 +188,7 @@ class ChickadeeStringTestCase(unittest.TestCase):
         chickadee = Chickadee()
         chickadee.ignore_bogon = False
         chickadee.fields = self.fields
-        mock_query.return_value = self.expected_result.copy()
+        mock_query.return_value = self.expected_result
         data = chickadee.run(','.join(self.test_data_ips))
         res = [x for x in data]
         self.assertCountEqual(res, self.expected_result)
@@ -202,7 +202,7 @@ class ChickadeeStringTestCase(unittest.TestCase):
                 self.data = None
 
             def single(self):
-                return [x for x in expected_results if x['query'] == self.data][0]
+                return [x for x in expected_results if x['query'] == self.data]
 
         chickadee = Chickadee()
         chickadee.ignore_bogon = False
@@ -222,6 +222,13 @@ class ChickadeeStringTestCase(unittest.TestCase):
             failed = True
         self.assertTrue(failed)
 
+    @patch("libchickadee.backends.ipapi.Resolver.batch")
+    def test_manual_run(self, mock_query):
+        chick = Chickadee(fields=self.fields)
+        mock_query.return_value = [self.expected_result[1]]
+        actual = chick.run(self.test_data_ips[1])
+        self.assertDictEqual(self.expected_result[1], actual[0])
+
 
 class ChickadeeFileTestCase(unittest.TestCase):
     """Chickadee script tests."""
