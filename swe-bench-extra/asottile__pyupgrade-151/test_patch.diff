diff --git a/tests/pyupgrade_test.py b/tests/pyupgrade_test.py
index 070c9fe..90b681b 100644
--- a/tests/pyupgrade_test.py
+++ b/tests/pyupgrade_test.py
@@ -17,9 +17,11 @@ from pyupgrade import _imports_unicode_literals
 from pyupgrade import _is_bytestring
 from pyupgrade import _percent_to_format
 from pyupgrade import _simplify_conversion_flag
+from pyupgrade import fields_same
 from pyupgrade import main
 from pyupgrade import parse_format
 from pyupgrade import parse_percent_format
+from pyupgrade import targets_same
 from pyupgrade import unparse_parsed_string
 
 
@@ -1433,6 +1435,143 @@ def test_fix_classes_py3only(s, expected):
     assert _fix_py3_plus(s) == expected
 
 
+@pytest.mark.parametrize(
+    ('s', 'expected'),
+    (
+        (
+            'def f():\n'
+            '    for x in y:\n'
+            '        yield x',
+            'def f():\n'
+            '    yield from y\n',
+        ),
+        (
+            'def f():\n'
+            '    for x in [1, 2, 3]:\n'
+            '        yield x',
+            'def f():\n'
+            '    yield from [1, 2, 3]\n',
+        ),
+        (
+            'def f():\n'
+            '    for x in {x for x in y}:\n'
+            '        yield x',
+            'def f():\n'
+            '    yield from {x for x in y}\n',
+        ),
+        (
+            'def f():\n'
+            '    for x in (1, 2, 3):\n'
+            '        yield x',
+            'def f():\n'
+            '    yield from (1, 2, 3)\n',
+        ),
+        (
+            'def f():\n'
+            '    for x, y in {3: "x", 6: "y"}:\n'
+            '        yield x, y',
+            'def f():\n'
+            '    yield from {3: "x", 6: "y"}\n',
+        ),
+        (
+            'def f():  # Comment one\n'
+            '    # Comment two\n'
+            '    for x, y in {  # Comment three\n'
+            '       3: "x",  # Comment four\n'
+            '       # Comment five\n'
+            '       6: "y"  # Comment six\n'
+            '    }:  # Comment seven\n'
+            '       # Comment eight\n'
+            '       yield x, y  # Comment nine\n'
+            '       # Comment ten',
+            'def f():  # Comment one\n'
+            '    # Comment two\n'
+            '    yield from {  # Comment three\n'
+            '       3: "x",  # Comment four\n'
+            '       # Comment five\n'
+            '       6: "y"  # Comment six\n'
+            '    }\n',
+        ),
+        (
+            'def f():\n'
+            '    for x, y in [{3: (3, [44, "long ss"]), 6: "y"}]:\n'
+            '        yield x, y',
+            'def f():\n'
+            '    yield from [{3: (3, [44, "long ss"]), 6: "y"}]\n',
+        ),
+        (
+            'def f():\n'
+            '    for x, y in z():\n'
+            '        yield x, y',
+            'def f():\n'
+            '    yield from z()\n',
+        ),
+        (
+            'def f():\n'
+            '    def func():\n'
+            '        # This comment is preserved\n'
+            '\n'
+            '        for x, y in z():  # Comment one\n'
+            '\n'
+            '            # Commment two\n'
+            '            yield x, y  # Comment three\n'
+            '            # Comment four\n'
+            '\n\n'
+            '# Comment\n'
+            'def g():\n'
+            '    print(3)',
+            'def f():\n'
+            '    def func():\n'
+            '        # This comment is preserved\n'
+            '\n'
+            '        yield from z()\n'
+            '\n\n'
+            '# Comment\n'
+            'def g():\n'
+            '    print(3)',
+        ),
+    ),
+)
+def test_fix_yield_from(s, expected):
+    assert _fix_py3_plus(s) == expected
+
+
+@pytest.mark.parametrize(
+    's',
+    (
+        'def f():\n'
+        '    for x in z:\n'
+        '        yield y',
+        'def f():\n'
+        '    for x, y in z:\n'
+        '        yield x',
+        'def f():\n'
+        '    for x, y in z:\n'
+        '        yield y',
+        'def f():\n'
+        '    for a, b in z:\n'
+        '        yield x, y',
+        'def f():\n'
+        '    for x, y in z:\n'
+        '        yield y, x',
+        'def f():\n'
+        '    for x, y, c in z:\n'
+        '        yield x, y',
+        'def f():\n'
+        '    for x in z:\n'
+        '        x = 22\n'
+        '        yield x',
+        'def f():\n'
+        '    for x in z:\n'
+        '        yield x\n'
+        '    else:\n'
+        '        print("boom!")\n',
+    ),
+)
+def test_fix_yield_from_noop(s):
+    assert _fix_py3_plus(s) == s
+
+
 @pytest.mark.parametrize(
     's',
     (
@@ -1918,3 +2057,14 @@ def test_noop_token_error(tmpdir):
         '5\\\n',
     )
     assert main((f.strpath, '--py36-plus')) == 0
+
+
+def test_targets_same():
+    assert targets_same(ast.parse('global a, b'), ast.parse('global a, b'))
+    assert not targets_same(ast.parse('global a'), ast.parse('global b'))
+
+
+def test_fields_same():
+    def get_body(expr):
+        return ast.parse(expr).body[0].value
+    assert not fields_same(get_body('x'), get_body('1'))
