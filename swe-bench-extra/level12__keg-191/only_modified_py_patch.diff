diff --git a/keg/app.py b/keg/app.py
index abf0b5c..c6519b9 100644
--- a/keg/app.py
+++ b/keg/app.py
@@ -3,7 +3,6 @@ import importlib
 import flask
 from werkzeug.datastructures import ImmutableDict
 
-from keg.blueprints import keg as kegbp
 import keg.cli
 import keg.config
 from keg.ctx import KegRequestContext
@@ -137,8 +136,6 @@ class Keg(flask.Flask):
             comp_object.init_app(self, parent_path=comp_path)
 
     def init_blueprints(self):
-        # TODO: probably want to be selective about adding our blueprint
-        self.register_blueprint(kegbp)
         for blueprint in self.use_blueprints:
             self.register_blueprint(blueprint)
 
diff --git a/keg/web.py b/keg/web.py
index a6b09dc..cae3c59 100644
--- a/keg/web.py
+++ b/keg/web.py
@@ -315,16 +315,16 @@ class BaseView(MethodView, metaclass=_ViewMeta):
             str_endpoint = str(endpoint)
             view_func = cls.as_view(str_endpoint)
 
-            absolute_found = False
             for rule, options in rules:
-                if rule.startswith('/'):
-                    absolute_found = True
+                if rule and rule.startswith('/'):
                     class_url = rule
+                elif not rule:
+                    rule = class_url
                 else:
                     rule = '{}/{}'.format(class_url, rule)
                 cls.blueprint.add_url_rule(rule, endpoint=endpoint, view_func=view_func, **options)
 
-            if not absolute_found:
+            if not rules:
                 cls.blueprint.add_url_rule(class_url, endpoint=endpoint, view_func=view_func)
 
         for rule, options in cls.url_rules:
diff --git a/keg_apps/web/views/routing.py b/keg_apps/web/views/routing.py
index f2dc75c..b625291 100644
--- a/keg_apps/web/views/routing.py
+++ b/keg_apps/web/views/routing.py
@@ -60,10 +60,10 @@ class ExplicitRouteAlt(KegBaseView):
 
 class HelloWorld(BaseView):
     """
-        /hello -> 'Hello World'
-        /hello/foo -> 'Hello Foo'
+        /hello-world -> 'Hello World'
+        /hello-world/foo -> 'Hello Foo'
     """
-    # relative URL indicates this route should be appended to the default rule for the class
+    rule()
     rule('<name>')
 
     def get(self, name='World'):
@@ -101,6 +101,18 @@ class HelloReq(BaseView):
         return _('Hello {name}', name=name)
 
 
+class HelloReq2(BaseView):
+    """
+        /hello-req2 -> 404
+        /hello-req2/foo -> 'Hello Foo'
+    """
+    # no absolute rule, but only one endpoint to use
+    rule('<name>')
+
+    def get(self, name):
+        return _('Hello {name}', name=name)
+
+
 class Cars(BaseView):
     """
         CRUD for a model/entity

