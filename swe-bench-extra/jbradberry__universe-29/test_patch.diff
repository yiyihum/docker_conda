diff --git a/tests/test_components.py b/tests/test_components.py
index 7cfddbc..37e90c2 100644
--- a/tests/test_components.py
+++ b/tests/test_components.py
@@ -1,7 +1,52 @@
 # -*- coding: utf-8 -*-
 import unittest
 
-from universe import components
+from universe import components, fields, exceptions
+
+
+class ComponentTestCase(unittest.TestCase):
+    class SpecialComponent(components.Component):
+        foo = fields.IntField(required=False)
+        bar = fields.IntField(required=False)
+
+        def validate(self, data):
+            super().validate(data)
+            if ('foo' in data) == ('bar' in data):
+                raise exceptions.ValidationError("Only one of 'foo' or 'bar' can be set.")
+
+        def validate_bar(self, data):
+            if 'bar' in data and data['bar'] % 2 != 0:
+                raise exceptions.ValidationError("'bar' must be even.")
+
+    def test_invalid_type_foo(self):
+        with self.assertRaises(exceptions.ValidationError) as e:
+            self.SpecialComponent().validate({'foo': 'a'})
+        self.assertEqual(str(e.exception), "'foo' must be an integer.")
+
+    def test_invalid_type_bar(self):
+        with self.assertRaises(exceptions.ValidationError) as e:
+            self.SpecialComponent().validate({'bar': 'a'})
+        self.assertEqual(str(e.exception), "'bar' must be an integer.")
+
+    def test_valid_foo(self):
+        self.assertIsNone(self.SpecialComponent().validate({'foo': 42}))
+
+    def test_valid_bar(self):
+        self.assertIsNone(self.SpecialComponent().validate({'bar': 42}))
+
+    def test_custom_field_validation(self):
+        with self.assertRaises(exceptions.ValidationError) as e:
+            self.SpecialComponent().validate({'bar': 3})
+        self.assertEqual(str(e.exception), "'bar' must be even.")
+
+    def test_custom_component_validation(self):
+        with self.assertRaises(exceptions.ValidationError) as e:
+            self.SpecialComponent().validate({})
+        self.assertEqual(str(e.exception), "Only one of 'foo' or 'bar' can be set.")
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            self.SpecialComponent().validate({'foo': 42, 'bar': 12})
+        self.assertEqual(str(e.exception), "Only one of 'foo' or 'bar' can be set.")
 
 
 class MetadataComponentTestCase(unittest.TestCase):
@@ -13,7 +58,7 @@ class MetadataComponentTestCase(unittest.TestCase):
     def test_missing_required_field(self):
         data = {}
         component = components.MetadataComponent()
-        with self.assertRaises(components.ValidationError):
+        with self.assertRaises(exceptions.ValidationError):
             component.serialize(data)
 
 
diff --git a/tests/test_fields.py b/tests/test_fields.py
new file mode 100644
index 0000000..185e01c
--- /dev/null
+++ b/tests/test_fields.py
@@ -0,0 +1,140 @@
+# -*- coding: utf-8 -*-
+import unittest
+
+from universe import fields, exceptions
+
+
+class FieldTestCase(unittest.TestCase):
+    def test_implicit(self):
+        field = fields.Field()
+        field.name = 'foo'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({})
+        self.assertEqual(str(e.exception), "'foo' is required.")
+
+    def test_not_required(self):
+        field = fields.Field(required=False)
+        field.name = 'foo'
+
+        self.assertIsNone(field.validate({}))
+
+    def test_explicit_required(self):
+        field = fields.Field(required=True)
+        field.name = 'foo'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({})
+        self.assertEqual(str(e.exception), "'foo' is required.")
+
+
+class IntFieldTestCase(unittest.TestCase):
+    def test_not_required(self):
+        field = fields.IntField(required=False)
+        field.name = 'widgets'
+
+        self.assertIsNone(field.validate({}))
+
+    def test_explicit_required(self):
+        field = fields.IntField(required=True)
+        field.name = 'widgets'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({})
+        self.assertEqual(str(e.exception), "'widgets' is required.")
+
+    def test_bad_type(self):
+        field = fields.IntField(required=True)
+        field.name = 'widgets'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({'widgets': 'a'})
+        self.assertEqual(str(e.exception), "'widgets' must be an integer.")
+
+    def test_in_range(self):
+        field = fields.IntField(min=0, max=100, required=True)
+        field.name = 'widgets'
+
+        self.assertIsNone(field.validate({'widgets': 42}))
+
+    def test_under_min(self):
+        field = fields.IntField(min=0, max=100, required=True)
+        field.name = 'widgets'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({'widgets': -10})
+        self.assertEqual(str(e.exception), "'widgets' must be greater than or equal to 0.")
+
+    def test_over_max(self):
+        field = fields.IntField(min=0, max=100, required=True)
+        field.name = 'widgets'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({'widgets': 200})
+        self.assertEqual(str(e.exception), "'widgets' must be less than or equal to 100.")
+
+
+class ListFieldTestCase(unittest.TestCase):
+    def test_not_required(self):
+        field = fields.ListField(required=False)
+        field.name = 'queue'
+
+        self.assertIsNone(field.validate({}))
+
+    def test_explicit_required(self):
+        field = fields.ListField(required=True)
+        field.name = 'queue'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({})
+        self.assertEqual(str(e.exception), "'queue' is required.")
+
+    def test_bad_type(self):
+        field = fields.ListField(required=True)
+        field.name = 'queue'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({'queue': 0})
+        self.assertEqual(str(e.exception), "'queue' must be a list.")
+
+    def test_empty_list_is_valid(self):
+        field = fields.ListField(required=True)
+        field.name = 'queue'
+
+        self.assertIsNone(field.validate({'queue': []}))
+
+
+class CharFieldTestCase(unittest.TestCase):
+    def test_not_required(self):
+        field = fields.CharField(required=False)
+        field.name = 'name'
+
+        self.assertIsNone(field.validate({}))
+
+    def test_explicit_required(self):
+        field = fields.CharField(required=True)
+        field.name = 'name'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({})
+        self.assertEqual(str(e.exception), "'name' is required.")
+
+    def test_bad_type(self):
+        field = fields.CharField(required=True)
+        field.name = 'name'
+
+        with self.assertRaises(exceptions.ValidationError) as e:
+            field.validate({'name': 0})
+        self.assertEqual(str(e.exception), "'name' must be a string.")
+
+    def test_empty_string_is_valid(self):
+        field = fields.CharField(required=True)
+        field.name = 'name'
+
+        self.assertIsNone(field.validate({'name': ""}))
+
+    def test_valid_string(self):
+        field = fields.CharField(required=True)
+        field.name = 'name'
+
+        self.assertIsNone(field.validate({'name': "Human"}))
