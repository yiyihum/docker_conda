diff --git a/universe/components.py b/universe/components.py
index f454a10..f39c57f 100644
--- a/universe/components.py
+++ b/universe/components.py
@@ -1,11 +1,7 @@
 import math
 import random
 
-from . import fields
-
-
-class ValidationError(Exception):
-    pass
+from . import fields, exceptions
 
 
 class MetaComponent(type):
@@ -16,6 +12,7 @@ class MetaComponent(type):
         for name, f in attrs.items():
             if isinstance(f, fields.Field):
                 new_attrs['_fields'][name] = f
+                f.name = name
             else:
                 new_attrs[name] = f
 
@@ -24,17 +21,23 @@ class MetaComponent(type):
 
 
 class Component(metaclass=MetaComponent):
+    def validate(self, data):
+        for name, field in self._fields.items():
+            field.validate(data)
+            if hasattr(self, f'validate_{name}'):
+                getattr(self, f'validate_{name}')(data)
+
     def serialize(self, data):
         output = {}
+        self.validate(data)
         for name, field in self._fields.items():
             if name in data:
                 output[name] = data[name]
-            elif getattr(field, 'required', True):
-                raise ValidationError(f"{name} is required.")
         return output
 
     def display(self, data):
         output = {}
+        self.validate(data)
         for name, field in self._fields.items():
             if name in data:
                 value = data[name]
@@ -43,8 +46,6 @@ class Component(metaclass=MetaComponent):
                 else:
                     value = str(value)
                 output[name] = value
-            elif getattr(field, 'required', True):
-                raise ValidationError(f"{name} is required.")
         return output
 
 
diff --git a/universe/engine.py b/universe/engine.py
index f1d4246..08765e2 100644
--- a/universe/engine.py
+++ b/universe/engine.py
@@ -8,6 +8,9 @@ class Entity:
         self._data = data
         self._components = registry[data['type']]
 
+        for _type, component in self._components.items():
+            component.validate(data)
+
     def __getattr__(self, name):
         for component in self.__dict__.get('_components', {}).values():
             if name in component._fields:
diff --git a/universe/exceptions.py b/universe/exceptions.py
new file mode 100644
index 0000000..ead42d5
--- /dev/null
+++ b/universe/exceptions.py
@@ -0,0 +1,4 @@
+
+
+class ValidationError(Exception):
+    pass
diff --git a/universe/fields.py b/universe/fields.py
index d058137..669aaa4 100644
--- a/universe/fields.py
+++ b/universe/fields.py
@@ -1,20 +1,49 @@
+from . import exceptions
 
 
 class Field:
-    pass
+    def __init__(self, required=True):
+        self.required = required
+
+    def validate(self, data):
+        if self.required and self.name not in data:
+            raise exceptions.ValidationError(f"{self.name!r} is required.")
 
 
 class IntField(Field):
-    def __init__(self, min=None, max=None, required=True):
+    def __init__(self, min=None, max=None, **kwargs):
+        super().__init__(**kwargs)
         self.min = min
         self.max = max
-        self.required = required
+
+    def validate(self, data):
+        super().validate(data)
+        if self.name not in data:
+            return
+        value = data[self.name]
+        if not isinstance(value, int):
+            raise exceptions.ValidationError(f"{self.name!r} must be an integer.")
+        if self.min is not None and value < self.min:
+            raise exceptions.ValidationError(f"{self.name!r} must be greater than or equal to {self.min}.")
+        if self.max is not None and value > self.max:
+            raise exceptions.ValidationError(f"{self.name!r} must be less than or equal to {self.max}.")
 
 
 class ListField(Field):
-    pass
+    def validate(self, data):
+        super().validate(data)
+        if self.name not in data:
+            return
+        value = data[self.name]
+        if not isinstance(value, list):
+            raise exceptions.ValidationError(f"{self.name!r} must be a list.")
 
 
 class CharField(Field):
-    def __init__(self, required=True):
-        self.required = required
+    def validate(self, data):
+        super().validate(data)
+        if self.name not in data:
+            return
+        value = data[self.name]
+        if not isinstance(value, str):
+            raise exceptions.ValidationError(f"{self.name!r} must be a string.")
