diff --git a/tests/test_decode.py b/tests/test_decode.py
index b4d6c32..cea212b 100644
--- a/tests/test_decode.py
+++ b/tests/test_decode.py
@@ -6,7 +6,7 @@ import textwrap
 import typing
 import unittest
 
-from pyais import NMEAMessage, encode_dict
+from pyais import NMEAMessage, encode_dict, encode_msg
 from pyais.ais_types import AISType
 from pyais.constants import (EpfdType, ManeuverIndicator, NavAid,
                              NavigationStatus, ShipType, StationType, SyncState,
@@ -1542,3 +1542,16 @@ class TestAIS(unittest.TestCase):
 
         with self.assertRaises(UnknownMessageException):
             decode_nmea_line(b",n:4,r:35435435435,foo bar 200")
+
+    def test_that_lat_and_long_are_rounded_correctly(self):
+        """Original Issue: https://github.com/M0r13n/pyais/issues/107
+        TL;DR: There was a rounding issue with certain values for lat and lon.
+        Decoding, encoding and then decoding again led to slight changes to lat/lon."""
+
+        orig = '!AIVDM,1,1,,A,100u3g@0291Q1>BW6uDUwDk00LE@,0*74'
+
+        first_decode = decode(orig)
+        encoded = encode_msg(first_decode)[0]
+        second_decode = decode(encoded)
+
+        self.assertEqual(first_decode, second_decode)
diff --git a/tests/test_tag_block.py b/tests/test_tag_block.py
index 2f19462..bc107e2 100644
--- a/tests/test_tag_block.py
+++ b/tests/test_tag_block.py
@@ -35,6 +35,29 @@ class TagBlockTestCase(unittest.TestCase):
         self.assertEqual(tb.relative_time, None)
         self.assertEqual(tb.text, None)
 
+    def test_spire_maritime_format(self):
+        """https://documentation.spire.com/tcp-stream-v2/the-nmea-message-encoding-format/"""
+        text = textwrap.dedent("""
+        \\c:1503079517*55\\!AIVDM,1,1,,B,C6:b0Kh09b3t1K4ChsS2FK008NL>`2CT@2N000000000S4h8S400,0*50
+        \\c:1503079517*53\\!AIVDM,1,1,,B,16:Vk1h00g8O=vRBDhNp0nKp0000,0*40
+        \\c:1503079517*53\\!AIVDM,1,1,,B,18155hh00u0DEU`N1F@Bg22R06@D,0*60
+        \\c:1503079517*53\\!AIVDM,1,1,,A,83aGFQ@j2ddtMH1b@g?b`7mL0,0*55
+        \\c:1503079517*53\\!AIVDM,2,1,9,A,53m@FJ400000hT5<0008E8q@TpF000000000000T2P3425rg0:53kThQDQh0,0*48
+        \\c:1503079517*53\\!AIVDM,2,2,9,A,00000000000,2*2D
+        \\c:1503079517*52\\!AIVDM,1,1,,A,13oP50Oi420UAtPgp@UPrP1d01,0*1A
+        \\c:1503079517*52\\!AIVDM,1,1,,B,B3mISo000H;wsB8SetMnww`5oP06,0*7C
+        \\c:1503079517*53\\!AIVDM,2,1,0,B,53aIjwh000010CSK7R04lu8F222222222222221?9@<297?o060@C51D`888,0*1B
+        """)
+
+        messages = [line.encode() for line in text.split() if line]
+
+        with IterMessages(messages) as s:
+            for msg in s:
+                msg.tag_block.init()
+                decoded = msg.decode()
+                self.assertIsNotNone(decoded.mmsi)
+                self.assertEqual(msg.tag_block.receiver_timestamp, '1503079517')
+
     def test_multiple_messages(self):
         text = textwrap.dedent("""
         \\s:2573535,c:1671533231*08\\!BSVDM,2,2,8,B,00000000000,2*36
