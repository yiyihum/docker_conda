diff --git a/.github/workflows/tests.yaml b/.github/workflows/tests.yaml
index 3c8180b..00de968 100644
--- a/.github/workflows/tests.yaml
+++ b/.github/workflows/tests.yaml
@@ -14,7 +14,7 @@ jobs:
       - uses: actions/checkout@v2
       - uses: actions/setup-python@v2
         with:
-          python-version: '3.6'
+          python-version: '3.7'
       - run: pip install tox
       - run: tox -e ${{ matrix.toxenv }}
 
@@ -22,7 +22,7 @@ jobs:
     runs-on: ubuntu-latest
     strategy:
       matrix:
-        python-version: ['3.5', '3.6', '3.7', '3.8', '3.9', '3.10', 'pypy3']
+        python-version: ['3.7', '3.8', '3.9', '3.10', 'pypy-3.7']
 
     steps:
       - uses: actions/checkout@v2
diff --git a/test_canonicaljson.py b/test_canonicaljson.py
index 949e511..0e081c0 100644
--- a/test_canonicaljson.py
+++ b/test_canonicaljson.py
@@ -14,18 +14,18 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
+
 from math import inf, nan
 
 from canonicaljson import (
     encode_canonical_json,
     encode_pretty_printed_json,
+    frozendict_type,
     iterencode_canonical_json,
     iterencode_pretty_printed_json,
     set_json_library,
 )
 
-from frozendict import frozendict
-
 import unittest
 from unittest import mock
 
@@ -108,13 +108,18 @@ class TestCanonicalJson(unittest.TestCase):
             b'{\n    "la merde amus\xc3\xa9e": "\xF0\x9F\x92\xA9"\n}',
         )
 
+    @unittest.skipIf(
+        frozendict_type is None,
+        "If `frozendict` is not available, skip test",
+    )
     def test_frozen_dict(self):
         self.assertEqual(
-            encode_canonical_json(frozendict({"a": 1})),
+            encode_canonical_json(frozendict_type({"a": 1})),
             b'{"a":1}',
         )
         self.assertEqual(
-            encode_pretty_printed_json(frozendict({"a": 1})), b'{\n    "a": 1\n}'
+            encode_pretty_printed_json(frozendict_type({"a": 1})),
+            b'{\n    "a": 1\n}',
         )
 
     def test_unknown_type(self):
