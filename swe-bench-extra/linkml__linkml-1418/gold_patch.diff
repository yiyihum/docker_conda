diff --git a/linkml/generators/README.md b/linkml/generators/README.md
index d518b47b..af044001 100644
--- a/linkml/generators/README.md
+++ b/linkml/generators/README.md
@@ -6,6 +6,7 @@
 |  gen-jsonld-context   | [jsonldcontextgen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/jsonldcontextgen.py) |    ContextGenerator | generate a JSON-LD @context block  | [contextgen help](../../tests/test_scripts/output/gencontext/help) |
 |  gen-csv   | [csvgen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/csvgen.py) |    CsvGenerator | generate a csv summary  | [csvgen help](../../tests/test_scripts/output/gencsv/help) |
 |  gen-graphviz   | [dotgen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/dotgen.py) |    DotGenerator | generate graphviz representation  | [dotgen help](../../tests/test_scripts/output/gengraphviz/help) |
+|  gen-golang   | [golanggen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/golanggen.py) |    GolangGenerator | generate Golang representation  | [golanggen help](../../tests/test_scripts/output/gengolang/help) |
 |  gen-golr-views   | [golrgen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/golrgen.py) |    GolrSchemaGenerator | generate a GOLR(?) representation  | [golrgen help](../../tests/test_scripts/output/genglor/help) |
 |  gen-graphql   | [graphqlgen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/graphqlgen.py) |    GraphqlGenerator | generate a graphql representation  | [graphql help](../../tests/test_scripts/output/gengraphql/help) |
 |  gen-proto  | [protogen.py](https://github.com/linkml/linkml/blob/main/linkml/generators/protogen.py) | ProtoGenerator | generate Protobuf Schema representation | [proto help](../../tests/test_scripts/output/genproto/help) |
diff --git a/linkml/generators/golanggen.py b/linkml/generators/golanggen.py
new file mode 100644
index 00000000..2f87a761
--- /dev/null
+++ b/linkml/generators/golanggen.py
@@ -0,0 +1,216 @@
+import logging
+import os
+from copy import deepcopy
+from dataclasses import dataclass
+from pathlib import Path
+from typing import (Callable, Dict, Iterator, List, Optional, Set, TextIO,
+                    Tuple, Union)
+
+import click
+from jinja2 import Environment, FileSystemLoader, Template
+from linkml_runtime.dumpers import yaml_dumper
+from linkml_runtime.linkml_model.meta import (Annotation, ClassDefinition,
+                                              ClassDefinitionName, Definition,
+                                              DefinitionName, Element,
+                                              EnumDefinition, SchemaDefinition,
+                                              SlotDefinition,
+                                              SlotDefinitionName,
+                                              TypeDefinition)
+from linkml_runtime.utils.formatutils import camelcase, underscore
+from linkml_runtime.utils.schemaview import SchemaView
+
+from linkml._version import __version__
+from linkml.utils.generator import Generator, shared_arguments
+
+type_map = {
+    "str": "string",
+    "int": "int",
+    "Bool": "bool",
+    "float": "float64",
+    "XSDDate": "time.Date",
+}
+
+default_template = """
+{%- if '_' in view.schema.name -%}
+    {%- set package_name = view.schema.name[:view.schema.name.find('_')] -%}
+{%- else -%}
+    {%- set package_name = view.schema.name -%}
+{%- endif -%}
+package {{package_name}}
+
+{% for c in view.all_classes().values() -%}
+    {%- for sn in view.class_slots(c.name, direct=False) %}
+        {%- set s = view.induced_slot(sn, c.name) -%}
+        {%- if "time." in gen.range(s) -%}
+            {%- set usesTime = True %}
+        {%- else -%}
+            {%- set usesTime = False %}
+        {%- endif -%}
+    {%- endfor -%}
+{%- endfor -%}
+{%- if usesTime -%}
+import (
+    "time" // for time.Date
+)
+{%- endif -%}
+
+{% for c in view.all_classes().values() -%}
+{%- if c.description -%}
+/*
+ * {{c.description}}
+ */
+{%- endif -%}
+{% set parents = gen.parents(c) %}
+type {{gen.name(c)}} struct {
+    {%- if parents %}
+	/*
+	 * parent types
+	 */
+    {%- for p in parents %}
+	{{p}}
+    {%- endfor %}
+    {%- endif -%}
+    {%- for sn in view.class_slots(c.name, direct=False) %}
+    {%- set s = view.induced_slot(sn, c.name) -%}
+    {%- if s.description %}
+	/*
+	 * {{s.description}}
+	 */
+    {%- endif %}
+	{{gen.name(s)}} {{gen.range(s)}} `json:"{{gen.json_name(s)}}"`
+    {%- endfor %}
+}
+
+{% endfor %}
+"""
+
+
+@dataclass
+class GolangGenerator(Generator):
+    """
+    Generates Golang code from a schema
+    """
+
+    # ClassVars
+    generatorname = os.path.basename(__file__)
+    generatorversion = "0.1.0"
+    valid_formats = ["text"]
+    uses_schemaloader = False
+
+    def serialize(self) -> str:
+        """
+        Serialize a schema to Golang string
+        :return:
+        """
+        template_obj = Template(default_template)
+        out_str = template_obj.render(
+            gen=self, schema=self.schemaview.schema, view=self.schemaview
+        )
+        return out_str
+
+    def name(self, element: Element) -> str:
+        """
+        Returns the name of the element in its canonical form
+
+        :param element:
+        :return:
+        """
+        alias = element.name
+        if isinstance(element, SlotDefinition) and element.alias:
+            alias = element.alias
+        return camelcase(alias)
+
+    def json_name(self, element: Element) -> str:
+        """
+        Returns the name of the element in its JSON (snake-case) form
+
+        :param element:
+        :return:
+        """
+        alias = element.name
+        if isinstance(element, SlotDefinition) and element.alias:
+            alias = element.alias
+        return underscore(alias)
+
+    def classref(self, cls: ClassDefinition) -> Optional[str]:
+        """
+        Returns the class name for the class that holds a reference (foreign key) to members of this class
+
+        E.g. if a class Person has an identifier field called unique_id, then this will
+        return PersonUniqueId
+
+        :param cls:
+        :return: ref name, None if no identifier
+        """
+        id_slot = self.get_identifier_or_key_slot(cls.name)
+        if id_slot:
+            return f"{self.name(cls)}{camelcase(id_slot.name)}"
+        else:
+            return None
+
+    def get_identifier_or_key_slot(
+        self, cn: ClassDefinitionName
+    ) -> Optional[SlotDefinition]:
+        sv = self.schemaview
+        id_slot = sv.get_identifier_slot(cn)
+        if id_slot:
+            return id_slot
+        else:
+            for s in sv.class_induced_slots(cn):
+                if s.key:
+                    return s
+            return None
+
+    def range(self, slot: SlotDefinition) -> str:
+        sv = self.schemaview
+        r = slot.range
+        if r in sv.all_classes():
+            rc = sv.get_class(r)
+            rc_ref = self.classref(rc)
+            rc_name = self.name(rc)
+            id_slot = self.get_identifier_or_key_slot(r)
+            if slot.multivalued:
+                if not id_slot or slot.inlined:
+                    if slot.inlined_as_list or not id_slot:
+                        return f"[]{rc_name}"
+                    else:
+                        return f"[]{rc_name}"
+                else:
+                    return f"{rc_ref}[]"
+            else:
+                if not id_slot or slot.inlined:
+                    return rc_name
+                else:
+                    return f"{rc_ref}"
+        else:
+            if r in sv.all_types():
+                t = sv.get_type(r)
+                if t.base and t.base in type_map:
+                    return type_map[t.base]
+                else:
+                    logging.warning(f"Unknown type.base: {t.name}")
+            return "string"
+
+    def parents(self, cls: ClassDefinition) -> List[ClassDefinitionName]:
+        if cls.is_a:
+            parents = [cls.is_a]
+        else:
+            parents = []
+        return [ClassDefinitionName(camelcase(p)) for p in parents + cls.mixins]
+
+
+@shared_arguments(GolangGenerator)
+@click.version_option(__version__, "-V", "--version")
+@click.command()
+def cli(yamlfile, **args):
+    """Generate Golang types
+
+    This very simple generator produces a Golang package named after the given
+    schema with structs that implement the classes in that schema.
+    """
+    gen = GolangGenerator(yamlfile, **args)
+    print(gen.serialize())
+
+
+if __name__ == "__main__":
+    cli()
diff --git a/linkml/validators/jsonschemavalidator.py b/linkml/validators/jsonschemavalidator.py
index 96c585e1..74f74c17 100644
--- a/linkml/validators/jsonschemavalidator.py
+++ b/linkml/validators/jsonschemavalidator.py
@@ -52,7 +52,8 @@ class JsonSchemaDataValidator(DataValidator):
         if self.jsonschema_objs is None:
             self.jsonschema_objs = {}
         schema_id = self.schema.id if isinstance(self.schema, SchemaDefinition) else self.schema
-        if schema_id not in self.jsonschema_objs:
+        cache_params = frozenset([schema_id, target_class.class_name])
+        if cache_params not in self.jsonschema_objs:
             jsonschemastr = JsonSchemaGenerator(
                 self.schema,
                 mergeimports=True,
@@ -60,10 +61,10 @@ class JsonSchemaDataValidator(DataValidator):
                 not_closed=not_closed,
             ).serialize(not_closed=not_closed)
             jsonschema_obj = json.loads(jsonschemastr)
-            self.jsonschema_objs[schema_id] = jsonschema_obj
+            self.jsonschema_objs[cache_params] = jsonschema_obj
         else:
             logging.info(f"Using cached jsonschema for {schema_id}")
-            jsonschema_obj = self.jsonschema_objs[schema_id]
+            jsonschema_obj = self.jsonschema_objs[cache_params]
         return jsonschema.validate(inst_dict, schema=jsonschema_obj, format_checker=jsonschema.Draft7Validator.FORMAT_CHECKER)
 
     def validate_dict(
@@ -148,7 +149,7 @@ def cli(
     outargs = {}
     if datautils._is_xsv(input_format):
         if index_slot is None:
-            index_slot = infer_index_slot(sv, target_class)
+            index_slot = datautils.infer_index_slot(sv, target_class)
             if index_slot is None:
                 raise Exception("--index-slot is required for CSV input")
         inargs["index_slot"] = index_slot
diff --git a/pyproject.toml b/pyproject.toml
index 7077b38c..10b4ef33 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -52,6 +52,7 @@ gen-jsonld-context = "linkml.generators.jsonldcontextgen:cli"
 gen-prefix-map = "linkml.generators.prefixmapgen:cli"
 gen-csv = "linkml.generators.csvgen:cli"
 gen-graphviz = "linkml.generators.dotgen:cli"
+gen-golang = "linkml.generators.golanggen:cli"
 gen-golr-views = "linkml.generators.golrgen:cli"
 gen-graphql = "linkml.generators.graphqlgen:cli"
 gen-java = "linkml.generators.javagen:cli"
