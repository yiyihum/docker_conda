diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
new file mode 100644
index 0000000..104ee6e
--- /dev/null
+++ b/.github/workflows/release.yml
@@ -0,0 +1,51 @@
+name: release
+
+on:
+  push:
+    tags:
+      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
+
+jobs:
+  build:
+    name: Create Release
+    runs-on: ubuntu-latest
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@master
+      - name: Create Release
+        id: create_release
+        uses: actions/create-release@latest
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
+        with:
+          tag_name: ${{ github.ref }}
+          release_name: Release ${{ github.ref }}
+          body: |
+            Changes in this Release
+            - ${{ github.ref }}
+          draft: false
+          prerelease: false
+
+  deploy:
+    name: Publish package
+    runs-on: ubuntu-latest
+
+    steps:
+    - uses: actions/checkout@v2
+    - name: Set up Python
+      uses: actions/setup-python@v1
+      with:
+        python-version: '3.x'
+    - name: Install dependencies
+      run: |
+        python -m pip install --upgrade pip
+        pip install setuptools wheel twine cython
+    - name: Build and publish
+      env:
+        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
+        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
+      run: |
+        mkdir -p ./dist
+        python setup.py sdist      # source distribution
+        python setup.py bdist_wheel
+        twine upload dist/*
diff --git a/RELEASING.md b/RELEASING.md
new file mode 100644
index 0000000..494d269
--- /dev/null
+++ b/RELEASING.md
@@ -0,0 +1,23 @@
+# Releasing
+
+Once all the changes for a release have been merged to master, ensure the following:
+
+- [ ] version has been updated in `VERSION`, `lightstep/version.py` and `setup.cfg` 
+- [ ] tests are passing
+- [ ] user facing documentation has been updated
+
+# Publishing
+
+Publishing to [pypi](https://pypi.org/project/lightstep/) is automated via GitHub actions. Once a tag is pushed to the repo, a new GitHub Release is created and package is published  via the actions defined here: https://github.com/lightstep/lightstep-tracer-python/blob/master/.github/workflows/release.yml
+
+```
+$ git clone git@github.com:lightstep/lightstep-tracer-python && cd lightstep-tracer-python
+# ensure the version matches the version beind released
+$ cat VERSION
+4.4.3
+$ cat lightstep/version.py
+LIGHTSTEP_PYTHON_TRACER_VERSION="4.4.3"
+$ cat setup.py | grep version
+    version='4.4.3',
+$ git tag v4.4.3 && git push origin v4.4.3
+```
diff --git a/lightstep/http_converter.py b/lightstep/http_converter.py
index c17573d..a05c582 100644
--- a/lightstep/http_converter.py
+++ b/lightstep/http_converter.py
@@ -1,8 +1,10 @@
+import socket
+import sys
+
 from lightstep.collector_pb2 import Auth, ReportRequest, Span, Reporter, KeyValue, Reference, SpanContext
 from lightstep.converter import Converter
 from . import util
 from . import version as tracer_version
-import sys
 from google.protobuf.timestamp_pb2 import Timestamp
 
 
@@ -22,6 +24,7 @@ class HttpConverter(Converter):
         if tags is None:
             tags = {}
         tracer_tags = tags.copy()
+        tracer_tags['lightstep.hostname'] = tracer_tags.get('lightstep.hostname', socket.gethostname())
 
         tracer_tags.update({
             'lightstep.tracer_platform': 'python',
diff --git a/lightstep/recorder.py b/lightstep/recorder.py
index 1e06282..9bedbee 100644
--- a/lightstep/recorder.py
+++ b/lightstep/recorder.py
@@ -14,7 +14,7 @@ import traceback
 import warnings
 
 from basictracer.recorder import SpanRecorder
-from opentracing.logs import ERROR_KIND, STACK
+from opentracing.logs import ERROR_KIND, STACK, ERROR_OBJECT
 
 from lightstep.http_converter import HttpConverter
 from lightstep.thrift_converter import ThriftConverter
@@ -171,7 +171,11 @@ class Recorder(SpanRecorder):
                 log.key_values[ERROR_KIND] = util._format_exc_type(log.key_values[ERROR_KIND])
 
             if STACK in log.key_values:
-                log.key_values[STACK] = util._format_exc_tb(log.key_values[STACK])
+                log.key_values[STACK] = util._format_exc_tb(
+                    log.key_values.get(ERROR_OBJECT),
+                    log.key_values.get(ERROR_KIND),
+                    log.key_values[STACK]
+                )
 
         return log
 
diff --git a/lightstep/thrift_converter.py b/lightstep/thrift_converter.py
index ffcf314..72debc5 100644
--- a/lightstep/thrift_converter.py
+++ b/lightstep/thrift_converter.py
@@ -1,7 +1,9 @@
+import socket
+import sys
+
 from lightstep import constants
 from lightstep.converter import Converter
 from .crouton import ttypes
-import sys
 from . import util
 from . import version as tracer_version
 import jsonpickle
@@ -22,6 +24,7 @@ class ThriftConverter(Converter):
         if tags is None:
             tags = {}
         tracer_tags = tags.copy()
+        tracer_tags['lightstep.hostname'] = tracer_tags.get('lightstep.hostname', socket.gethostname())
 
         tracer_tags.update({
             'lightstep.tracer_platform': 'python',
diff --git a/lightstep/util.py b/lightstep/util.py
index 50b61d3..33c403e 100755
--- a/lightstep/util.py
+++ b/lightstep/util.py
@@ -105,9 +105,9 @@ def _coerce_to_unicode(val):
             return '(encoding error)'
 
 
-def _format_exc_tb(exc_tb):
+def _format_exc_tb(exc_value, exc_type, exc_tb):
     if type(exc_tb) is types.TracebackType:
-        return ''.join(traceback.format_tb(exc_tb))
+        return ''.join(traceback.format_exception(exc_value, exc_type, exc_tb))
 
     return exc_tb
 
