diff --git a/nipype/interfaces/afni/tests/test_auto_NetCorr.py b/nipype/interfaces/afni/tests/test_auto_NetCorr.py
new file mode 100644
index 000000000..e613dc13e
--- /dev/null
+++ b/nipype/interfaces/afni/tests/test_auto_NetCorr.py
@@ -0,0 +1,99 @@
+# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
+from ..preprocess import NetCorr
+
+
+def test_NetCorr_inputs():
+    input_map = dict(
+        args=dict(
+            argstr="%s",
+        ),
+        environ=dict(
+            nohash=True,
+            usedefault=True,
+        ),
+        fish_z=dict(
+            argstr="-fish_z",
+        ),
+        ignore_LT=dict(
+            argstr="-ignore_LT",
+        ),
+        in_file=dict(
+            argstr="-inset %s",
+            extensions=None,
+            mandatory=True,
+        ),
+        in_rois=dict(
+            argstr="-in_rois %s",
+            extensions=None,
+            mandatory=True,
+        ),
+        mask=dict(
+            argstr="-mask %s",
+            extensions=None,
+        ),
+        nifti=dict(
+            argstr="-nifti",
+        ),
+        num_threads=dict(
+            nohash=True,
+            usedefault=True,
+        ),
+        out_file=dict(
+            argstr="-prefix %s",
+            extensions=None,
+            name_source="in_file",
+            name_template="%s_netcorr",
+            position=1,
+        ),
+        output_mask_nonnull=dict(
+            argstr="-output_mask_nonnull",
+        ),
+        outputtype=dict(),
+        part_corr=dict(
+            argstr="-part_corr",
+        ),
+        push_thru_many_zeros=dict(
+            argstr="-push_thru_many_zeros",
+        ),
+        ts_indiv=dict(
+            argstr="-ts_indiv",
+        ),
+        ts_label=dict(
+            argstr="-ts_label",
+        ),
+        ts_out=dict(
+            argstr="-ts_out",
+        ),
+        ts_wb_Z=dict(
+            argstr="-ts_wb_Z",
+        ),
+        ts_wb_corr=dict(
+            argstr="-ts_wb_corr",
+        ),
+        ts_wb_strlabel=dict(
+            argstr="-ts_wb_strlabel",
+        ),
+        weight_ts=dict(
+            argstr="-weight_ts %s",
+            extensions=None,
+        ),
+    )
+    inputs = NetCorr.input_spec()
+
+    for key, metadata in list(input_map.items()):
+        for metakey, value in list(metadata.items()):
+            assert getattr(inputs.traits()[key], metakey) == value
+
+
+def test_NetCorr_outputs():
+    output_map = dict(
+        out_corr_maps=dict(),
+        out_corr_matrix=dict(
+            extensions=None,
+        ),
+    )
+    outputs = NetCorr.output_spec()
+
+    for key, metadata in list(output_map.items()):
+        for metakey, value in list(metadata.items()):
+            assert getattr(outputs.traits()[key], metakey) == value
diff --git a/nipype/interfaces/fsl/tests/test_preprocess.py b/nipype/interfaces/fsl/tests/test_preprocess.py
index 438f3f0ec..6b1b6cb61 100644
--- a/nipype/interfaces/fsl/tests/test_preprocess.py
+++ b/nipype/interfaces/fsl/tests/test_preprocess.py
@@ -31,6 +31,9 @@ def setup_infile(tmpdir):
 @pytest.mark.skipif(no_fsl(), reason="fsl is not installed")
 def test_bet(setup_infile):
     tmp_infile, tp_dir = setup_infile
+    # BET converts the in_file path to be relative to prevent
+    # failure with long paths.
+    tmp_infile = os.path.relpath(tmp_infile, start=os.getcwd())
     better = fsl.BET()
     assert better.cmd == "bet"
 
@@ -41,8 +44,7 @@ def test_bet(setup_infile):
     # Test generated outfile name
     better.inputs.in_file = tmp_infile
     outfile = fsl_name(better, "foo_brain")
-    outpath = os.path.join(os.getcwd(), outfile)
-    realcmd = "bet %s %s" % (tmp_infile, outpath)
+    realcmd = "bet %s %s" % (tmp_infile, outfile)
     assert better.cmdline == realcmd
     # Test specified outfile name
     outfile = fsl_name(better, "/newdata/bar")
@@ -79,12 +81,11 @@ def test_bet(setup_infile):
     # test each of our arguments
     better = fsl.BET()
     outfile = fsl_name(better, "foo_brain")
-    outpath = os.path.join(os.getcwd(), outfile)
     for name, settings in list(opt_map.items()):
         better = fsl.BET(**{name: settings[1]})
         # Add mandatory input
         better.inputs.in_file = tmp_infile
-        realcmd = " ".join([better.cmd, tmp_infile, outpath, settings[0]])
+        realcmd = " ".join([better.cmd, tmp_infile, outfile, settings[0]])
         assert better.cmdline == realcmd
 
 
