diff --git a/tests/unit/v2/test_command_job.py b/tests/unit/v2/test_command_job.py
new file mode 100644
index 0000000..8240e0b
--- /dev/null
+++ b/tests/unit/v2/test_command_job.py
@@ -0,0 +1,81 @@
+from unittest import TestCase
+
+from auror_core.v2.job import Job, Command
+
+
+class CommandJobTest(TestCase):
+
+    def test_with_command(self):
+        command = "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"
+        result = Command().with_command(command=command)
+        actual = result.extra
+        expected = {'command': "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"}
+
+        self.assertEqual('command', result._type)
+        self.assertEqual(expected, actual)
+
+    def test_with_another_command_without_a_command(self):
+        command = "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"
+        result = Command().with_another_command(command=command)
+        actual = result.extra
+        expected = {'command': "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"}
+
+        self.assertEqual('command', result._type)
+        self.assertEqual(expected, actual)
+
+    def test_with_another_command_where_a_command_already_exists(self):
+        command_ = "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"
+        result_ = Command().with_another_command(command=command_)
+        command = "${python} -c 'from teste import teste_command_spark_again; teste_command_spark_again()'"
+        result = result_.with_another_command(command=command)
+        actual = result.extra
+        expected = {'command': "${python} -c 'from teste import teste_command_spark; teste_command_spark()'", 
+                    'command.1': "${python} -c 'from teste import teste_command_spark_again; teste_command_spark_again()'"}
+
+        self.assertEqual('command', result._type)
+        self.assertEqual(expected, actual)
+    
+    def test_build_method_with_one_command(self):
+        simple_job = {
+            'config': {
+                'command': 'COMMAND'
+            },
+            'dependsOn': ['firstDependencie', 'secondDependecie'],
+            'name': 'AZTest',
+        }
+        actual_job = Command.build(simple_job)
+
+        expected_job = Command(
+            simple_job['name'],
+            simple_job['config'],
+            simple_job['dependsOn']
+        ).with_command(simple_job['config']['command'])
+
+        self.assertEqual(expected_job, actual_job)
+    
+    def test_build_method_with_more_than_one_command(self):
+        extra_commands = {
+            'command.1': 'COMMAND 2',
+            'command.2': 'COMMAND 3',
+        }
+        job = {
+            'config': {
+                'command': 'COMMAND'
+            },
+            'dependsOn': ['firstDependencie', 'secondDependecie'],
+            'name': 'AZTest',
+        }
+        job['config'].update(extra_commands)
+        actual_job = Command.build(job)
+
+        expected_job = Command(
+            job['name'],
+            job['config'],
+            job['dependsOn']
+        ).with_command(job['config']['command']) \
+        .with_another_commands([
+            Command._Command(command, command_number.split('.')[-1])
+            for command_number, command in extra_commands.items()
+        ])
+
+        self.assertEqual(expected_job, actual_job)
diff --git a/tests/unit/v2/test_job.py b/tests/unit/v2/test_job.py
index 505f67b..0d07770 100644
--- a/tests/unit/v2/test_job.py
+++ b/tests/unit/v2/test_job.py
@@ -1,9 +1,12 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 
+import shutil
+import tempfile
+
 from os import path
-import shutil, tempfile
 from unittest import TestCase
+
 from auror_core.v2.job import Job, Command
 
 
@@ -87,42 +90,3 @@ class JobTest(TestCase):
 
         self.assertEqual(None, content.properties["nodes"][0].get("dependsOn"))
         self.assertEqual("command", content.properties["nodes"][0]["type"])
-
-
-class CommandJobTest(TestCase):
-
-    def test_with_all_default(self):
-        expected = Job("test_job_name", None, ["other_job_name"], None,
-                            {"executor.cores": "2", "driver.memory": "6g"})
-
-        self.assertIsInstance(expected, Job)
-
-    def test_with_command(self):
-        command = "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"
-        result = Command().with_command(command=command)
-        actual = result.extra
-        expected = {'command': "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"}
-
-        self.assertEqual('command', result._type)
-        self.assertEqual(expected, actual)
-
-    def test_with_another_command_without_a_command(self):
-        command = "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"
-        result = Command().with_another_command(command=command)
-        actual = result.extra
-        expected = {'command': "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"}
-
-        self.assertEqual('command', result._type)
-        self.assertEqual(expected, actual)
-
-    def test_with_another_command_where_a_command_already_exists(self):
-        command_ = "${python} -c 'from teste import teste_command_spark; teste_command_spark()'"
-        result_ = Command().with_another_command(command=command_)
-        command = "${python} -c 'from teste import teste_command_spark_again; teste_command_spark_again()'"
-        result = result_.with_another_command(command=command)
-        actual = result.extra
-        expected = {'command': "${python} -c 'from teste import teste_command_spark; teste_command_spark()'", 
-                    'command.1': "${python} -c 'from teste import teste_command_spark_again; teste_command_spark_again()'"}
-
-        self.assertEqual('command', result._type)
-        self.assertEqual(expected, actual)
\ No newline at end of file
diff --git a/tests/unit/v2/test_loader.py b/tests/unit/v2/test_loader.py
new file mode 100644
index 0000000..26b2479
--- /dev/null
+++ b/tests/unit/v2/test_loader.py
@@ -0,0 +1,69 @@
+import shutil
+import tempfile
+import os
+
+import mock
+
+from unittest import TestCase
+
+from auror_core.v2.job import Job, Command
+from auror_core.v2.loader import Loader
+
+
+class LoaderTest(TestCase):
+
+    def test_error_on_inexistence_file_path(self):
+        with self.assertRaises(ValueError) as context:
+            Loader('/this/does/not/exist/flow.yaml')
+        self.assertTrue('File does not exists' in str(context.exception))
+    
+    @mock.patch('auror_core.v2.loader.os')
+    @mock.patch('auror_core.v2.loader.yaml')
+    @mock.patch('auror_core.v2.loader.open')
+    def test_should_return_command_type_job_list(self, mock_os, mock_yaml, mock_open):
+        job = {
+            'config': {
+                'command': 'COMMAND'
+            },
+            'dependsOn': ['firstDependencie', 'secondDependecie'],
+            'name': 'AZTest',
+            'type': 'command'
+        }
+        mock_os.path.exists.return_value = True
+        mock_yaml.safe_load.return_value = {'nodes': [job, job]}
+
+        loader = Loader('/flow/path/flow.yaml')
+        jobs = loader.as_job_objects()
+
+        self.assertIsInstance(jobs, list)
+        self.assertEqual(2, len(jobs))
+        self.assertTrue(all([isinstance(job, Job) for job in jobs]))
+    
+    @mock.patch('auror_core.v2.loader.os')
+    @mock.patch('auror_core.v2.loader.yaml')
+    @mock.patch('auror_core.v2.loader.open')
+    def test_should_return_embbed_flow(self, mock_os, mock_yaml, mock_open):
+        job = {
+            'config': {
+                'command': 'COMMAND'
+            },
+            'dependsOn': ['firstDependencie', 'secondDependecie'],
+            'name': 'AZTest',
+            'type': 'command'
+        }
+        job['nodes'] = [job.copy(),]
+        mock_os.path.exists.return_value = True
+        mock_yaml.safe_load.return_value = {'nodes': [job,]}
+
+        loader = Loader('/flow/path/flow.yaml')
+        jobs = loader.as_job_objects()
+
+        expected_job = Command(
+            job['name'],
+            job['config'],
+            job['dependsOn'],
+        ).with_command(job['config']['command'])
+        expected_job = expected_job.with_nodes(expected_job)
+
+        self.assertEqual(1, len(jobs))
+        self.assertEqual(expected_job, jobs[0])
