diff --git a/tests/test_concat.py b/tests/test_concat.py
index 7f9f6af..1a5dfa6 100644
--- a/tests/test_concat.py
+++ b/tests/test_concat.py
@@ -1,8 +1,25 @@
 from hwtypes import BitVector
+import random
 
-def test_concat():
+NTESTS = 10
+MAX_BITS = 128
+
+def test_concat_const():
     a = BitVector[4](4)
     b = BitVector[4](1)
-    c = BitVector.concat(a, b)
-    expected = BitVector[8]([1,0,0,0,0,0,1,0])
+    c = a.concat(b)
+    print(a.binary_string())
+    print(c.binary_string())
+    expected = BitVector[8]([0,0,1,0,1,0,0,0])
     assert expected == c
+
+def test_concat_random():
+    for _ in range(NTESTS):
+        n1 = random.randint(1, MAX_BITS)
+        n2 = random.randint(1, MAX_BITS)
+        a = BitVector.random(n1)
+        b = BitVector.random(n2)
+        c = a.concat(b)
+        assert c.size == a.size + b.size
+        assert c == BitVector[n1 + n2](a.bits() + b.bits())
+        assert c.binary_string() == b.binary_string() + a.binary_string()
diff --git a/tests/test_fp.py b/tests/test_fp.py
index 20628da..d44a34d 100644
--- a/tests/test_fp.py
+++ b/tests/test_fp.py
@@ -125,7 +125,7 @@ def _c_type_vector(T):
 
     return vector
 
-NTESTS = 100
+NTESTS = 128
 
 @pytest.mark.parametrize("mode", [
     RoundingMode.RNE,
@@ -247,6 +247,37 @@ def test_reinterpret_bv(FT):
             assert bv1[:ms] != 0
             assert bv2[:ms] != 0
 
+def test_reinterpret_bv_corner():
+    for _ in range(NTESTS):
+        FT = FPVector[random.randint(3, 16),
+                      random.randint(2, 64),
+                      random.choice(list(RoundingMode)),
+                      True]
+        bv_pinf = BitVector[FT.mantissa_size](0).concat(BitVector[FT.exponent_size](-1)).concat(BitVector[1](0))
+        bv_ninf = BitVector[FT.mantissa_size](0).concat(BitVector[FT.exponent_size](-1)).concat(BitVector[1](1))
+        pinf = FT.reinterpret_from_bv(bv_pinf)
+        ninf = FT.reinterpret_from_bv(bv_ninf)
+        assert pinf.reinterpret_as_bv() == bv_pinf
+        assert ninf.reinterpret_as_bv() == bv_ninf
+        assert pinf.fp_is_positive()
+        assert pinf.fp_is_infinite()
+        assert ninf.fp_is_negative()
+        assert ninf.fp_is_infinite()
+
+        bv_pz = BitVector[FT.size](0)
+        bv_nz = BitVector[FT.size-1](0).concat(BitVector[1](1))
+        pz = FT.reinterpret_from_bv(bv_pz)
+        nz = FT.reinterpret_from_bv(bv_nz)
+        assert pz.reinterpret_as_bv() == bv_pz
+        assert nz.reinterpret_as_bv() == bv_nz
+        assert pz.fp_is_zero()
+        assert nz.fp_is_zero()
+
+        bv_nan = BitVector[FT.mantissa_size](1).concat(BitVector[FT.exponent_size](-1)).concat(BitVector[1](0))
+        nan = FT.reinterpret_from_bv(bv_nan)
+        assert nan.reinterpret_as_bv() == bv_nan
+        assert nan.fp_is_NaN()
+
 @pytest.mark.parametrize("CT, FT", [
     (_c_type_vector(ctypes.c_float), FPVector[8, 23, RoundingMode.RNE, True]),
     (_c_type_vector(ctypes.c_double), FPVector[11, 52, RoundingMode.RNE, True]),])
