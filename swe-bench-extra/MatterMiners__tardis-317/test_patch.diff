diff --git a/tests/plugins_t/test_prometheusmonitoring.py b/tests/plugins_t/test_prometheusmonitoring.py
index 28aef63..7e04087 100644
--- a/tests/plugins_t/test_prometheusmonitoring.py
+++ b/tests/plugins_t/test_prometheusmonitoring.py
@@ -25,9 +25,10 @@ class TestPrometheusMonitoring(TestCase):
 
     @patch("tardis.plugins.prometheusmonitoring.logging", Mock())
     def setUp(self):
+        ip = "127.0.0.1"
         self.config = self.mock_config.return_value
-        self.config.Plugins.PrometheusMonitoring.addr = "127.0.0.1"
-        self.config.Plugins.PrometheusMonitoring.port = get_free_port()
+        self.config.Plugins.PrometheusMonitoring.addr = ip
+        self.config.Plugins.PrometheusMonitoring.port = get_free_port(ip)
 
         self.plugin = PrometheusMonitoring()
 
diff --git a/tests/utilities/utilities.py b/tests/utilities/utilities.py
index 66691ab..c5373bd 100644
--- a/tests/utilities/utilities.py
+++ b/tests/utilities/utilities.py
@@ -11,9 +11,9 @@ def async_return(*args, return_value=None, **kwargs):
     return f
 
 
-def get_free_port():  # from https://gist.github.com/dbrgn/3979133
+def get_free_port(ip: str):  # from https://gist.github.com/dbrgn/3979133
     s = socket.socket()
-    s.bind(("", 0))
+    s.bind((ip, 0))
     port = s.getsockname()[1]
     s.close()
     return port
diff --git a/tests/utilities_t/test_asynccachemap.py b/tests/utilities_t/test_asynccachemap.py
index e67825b..249cf91 100644
--- a/tests/utilities_t/test_asynccachemap.py
+++ b/tests/utilities_t/test_asynccachemap.py
@@ -70,3 +70,33 @@ class TestAsyncCacheMap(TestCase):
         self.assertTrue(
             datetime.now() - self.async_cache_map.last_update < timedelta(seconds=1)
         )
+
+    def test_eq_async_cache_map(self):
+        test_cache_map = AsyncCacheMap(
+            update_coroutine=self.async_cache_map._update_coroutine
+        )
+        # Since both objects have been recently initialized, all values (self._max_age,
+        # self._last_update, self._data and self._lock) are still the defaults
+        self.assertTrue(self.async_cache_map == test_cache_map)
+
+        # Test the opposite
+        self.assertFalse(self.async_cache_map != test_cache_map)
+
+        # change default values
+        run_async(self.async_cache_map.update_status)
+        self.assertFalse(self.async_cache_map == test_cache_map)
+
+        # update default values, self._last_update, self._lock still differ
+        run_async(test_cache_map.update_status)
+        self.assertFalse(self.async_cache_map == test_cache_map)
+
+        # Assimilate lock, self._last_update still differs
+        test_cache_map._lock = self.async_cache_map._lock
+        self.assertFalse(self.async_cache_map == test_cache_map)
+
+        # Make them equal again
+        test_cache_map._last_update = self.async_cache_map._last_update
+        self.assertTrue(self.async_cache_map == test_cache_map)
+
+        # Test different class
+        self.assertFalse(self.async_cache_map == self.test_data)
diff --git a/tests/utilities_t/test_staticmapping.py b/tests/utilities_t/test_staticmapping.py
index b906108..5c17468 100644
--- a/tests/utilities_t/test_staticmapping.py
+++ b/tests/utilities_t/test_staticmapping.py
@@ -26,3 +26,17 @@ class TestStaticMapping(TestCase):
             self.static_map["testB"] = 456
         with self.assertRaises(TypeError):
             self.static_map["testC"] = 456
+
+    def test_eq_async_cache_map(self):
+        test_static_map = StaticMapping(**self.test_data)
+        self.assertTrue(self.static_map == test_static_map)
+
+        # Test the opposite
+        self.assertFalse(self.static_map != test_static_map)
+
+        # Change the data dictionary
+        test_static_map = StaticMapping(test=123)
+        self.assertFalse(self.static_map == test_static_map)
+
+        # Test different class
+        self.assertFalse(self.static_map == self.test_data)
