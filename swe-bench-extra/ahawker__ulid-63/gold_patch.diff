diff --git a/ulid/base32.py b/ulid/base32.py
index f7377b6..b63ba7a 100644
--- a/ulid/base32.py
+++ b/ulid/base32.py
@@ -248,14 +248,7 @@ def decode_ulid(value: str) -> bytes:
     :raises ValueError: when value is not 26 characters
     :raises ValueError: when value cannot be encoded in ASCII
     """
-    length = len(value)
-    if length != 26:
-        raise ValueError('Expects 26 characters for timestamp + randomness; got {}'.format(length))
-
-    try:
-        encoded = value.encode('ascii')
-    except UnicodeEncodeError as ex:
-        raise ValueError('Expects value that can be encoded in ASCII charset: {}'.format(ex))
+    encoded = str_to_bytes(value, 26)
 
     decoding = DECODING
 
@@ -296,14 +289,7 @@ def decode_timestamp(timestamp: str) -> bytes:
     :raises ValueError: when value is not 10 characters
     :raises ValueError: when value cannot be encoded in ASCII
     """
-    length = len(timestamp)
-    if length != 10:
-        raise ValueError('Expects 10 characters for timestamp; got {}'.format(length))
-
-    try:
-        encoded = timestamp.encode('ascii')
-    except UnicodeEncodeError as ex:
-        raise ValueError('Expects timestamp that can be encoded in ASCII charset: {}'.format(ex))
+    encoded = str_to_bytes(timestamp, 10)
 
     decoding = DECODING
 
@@ -334,14 +320,7 @@ def decode_randomness(randomness: str) -> bytes:
     :raises ValueError: when value is not 16 characters
     :raises ValueError: when value cannot be encoded in ASCII
     """
-    length = len(randomness)
-    if length != 16:
-        raise ValueError('Expects 16 characters for randomness; got {}'.format(length))
-
-    try:
-        encoded = randomness.encode('ascii')
-    except UnicodeEncodeError as ex:
-        raise ValueError('Expects randomness that can be encoded in ASCII charset: {}'.format(ex))
+    encoded = str_to_bytes(randomness, 16)
 
     decoding = DECODING
 
@@ -357,3 +336,34 @@ def decode_randomness(randomness: str) -> bytes:
         ((decoding[encoded[12]] << 7) | (decoding[encoded[13]] << 2) | (decoding[encoded[14]] >> 3)) & 0xFF,
         ((decoding[encoded[14]] << 5) | (decoding[encoded[15]])) & 0xFF
     ))
+
+
+def str_to_bytes(value: str, expected_length: int) -> bytes:
+    """
+    Convert the given string to bytes and validate it is within the Base32 character set.
+
+    :param value: String to convert to bytes
+    :type value: :class:`~str`
+    :param expected_length: Expected length of the input string
+    :type expected_length: :class:`~int`
+    :return: Value converted to bytes.
+    :rtype: :class:`~bytes`
+    """
+    length = len(value)
+    if length != expected_length:
+        raise ValueError('Expects {} characters for decoding; got {}'.format(expected_length, length))
+
+    try:
+        encoded = value.encode('ascii')
+    except UnicodeEncodeError as ex:
+        raise ValueError('Expects value that can be encoded in ASCII charset: {}'.format(ex))
+
+    decoding = DECODING
+
+    # Confirm all bytes are valid Base32 decode characters.
+    # Note: ASCII encoding handles the out of range checking for us.
+    for byte in encoded:
+        if decoding[byte] > 31:
+            raise ValueError('Non-base32 character found: "{}"'.format(chr(byte)))
+
+    return encoded
