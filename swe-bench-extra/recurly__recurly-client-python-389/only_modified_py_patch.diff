diff --git a/recurly/pager.py b/recurly/pager.py
index 1102023..02d6d8b 100644
--- a/recurly/pager.py
+++ b/recurly/pager.py
@@ -82,7 +82,7 @@ class Pager:
         """Makes a HEAD request to the API to determine how many total records exist.
         """
         resource = self.__client._make_request("HEAD", self.__path, None, self.__params)
-        return int(resource.get_response().total_records)
+        return resource.get_response().total_records
 
     def __map_array_params(self, params):
         """Converts array parameters to CSV strings to maintain consistency with
diff --git a/recurly/response.py b/recurly/response.py
index a850c51..c42ee80 100644
--- a/recurly/response.py
+++ b/recurly/response.py
@@ -1,7 +1,28 @@
-import sys, traceback
 from datetime import datetime
 import recurly
-import json
+
+
+def parse_int_header(dictionary, key):
+    """Defensively parse an int header"""
+    val = dictionary.get(key)
+
+    if val is None or not isinstance(val, str):
+        return None
+
+    if not val.isdigit():
+        return None
+
+    return int(val)
+
+
+def parse_datetime_header(dictionary, key):
+    """Defensively parse datetime header"""
+
+    int_val = parse_int_header(dictionary, key)
+    if int_val is None:
+        return None
+
+    return datetime.utcfromtimestamp(int_val)
 
 
 class Response:
@@ -12,29 +33,26 @@ class Response:
         self.status = response.status
         http_body = response.read()
         self.body = None
+        self.__headers = response.headers
+
+        self.request_id = self.__headers.get("X-Request-Id")
+        self.date = self.__headers.get("Date")
+
+        self.rate_limit = parse_int_header(self.__headers, "X-RateLimit-Limit")
+        self.rate_limit_remaining = parse_int_header(
+            self.__headers, "X-RateLimit-Remaining"
+        )
+        self.rate_limit_reset = parse_datetime_header(
+            self.__headers, "X-RateLimit-Reset"
+        )
+        self.content_type = self.__headers.get("Content-Type", "").split(";")[0]
+
+        self.proxy_metadata = {
+            "server": self.__headers.get("Server"),
+            "cf-ray": self.__headers.get("CF-RAY"),
+        }
+
+        self.total_records = parse_int_header(self.__headers, "Recurly-Total-Records")
 
-        try:
-            self.__headers = response.headers
-            self.request_id = self.__headers.get("X-Request-Id")
-            self.rate_limit = int(self.__headers.get("X-RateLimit-Limit"))
-            self.rate_limit_remaining = int(self.__headers.get("X-RateLimit-Remaining"))
-            self.rate_limit_reset = datetime.utcfromtimestamp(
-                int(self.__headers.get("X-RateLimit-Reset"))
-            )
-            self.date = self.__headers.get("Date")
-            self.content_type = self.__headers.get("Content-Type", "").split(";")[0]
-            self.proxy_metadata = {
-                "server": self.__headers.get("Server"),
-                "cf-ray": self.__headers.get("CF-RAY"),
-            }
-            self.total_records = self.__headers.get("recurly-total-records")
-            if http_body and len(http_body) > 0:
-                self.body = http_body
-        except:
-            # Re-raise the exception in strict-mode
-            if recurly.STRICT_MODE:
-                raise
-            # Log and ignore it in production, we don't want this to kill the whole request
-            else:
-                print("[WARNING][Recurly] Unexpected error parsing response metadata")
-                traceback.print_exc(file=sys.stdout)
+        if http_body and len(http_body) > 0:
+            self.body = http_body

