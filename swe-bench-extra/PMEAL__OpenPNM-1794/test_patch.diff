diff --git a/tests/unit/algorithms/AdvectionDiffusionTest.py b/tests/unit/algorithms/AdvectionDiffusionTest.py
index e4dc21e0c..46404808c 100644
--- a/tests/unit/algorithms/AdvectionDiffusionTest.py
+++ b/tests/unit/algorithms/AdvectionDiffusionTest.py
@@ -2,6 +2,7 @@ import numpy as np
 import openpnm as op
 from numpy.testing import assert_allclose
 from openpnm.algorithms import AdvectionDiffusion, StokesFlow
+import pytest
 
 
 class AdvectionDiffusionTest:
@@ -156,6 +157,30 @@ class AdvectionDiffusionTest:
             y = ad[ad.settings['quantity']].mean()
             assert_allclose(actual=y, desired=2, rtol=1e-5)
 
+    def test_add_outflow_overwrite_rate_and_value_BC(self):
+        ad = AdvectionDiffusion(network=self.net, phase=self.phase)
+        ad.set_rate_BC(pores=[0, 1], total_rate=1)
+        ad.set_value_BC(pores=[2, 3], values=1)
+        assert np.sum(np.isfinite(ad['pore.bc_rate'])) == 2
+        assert np.sum(np.isfinite(ad['pore.bc_value'])) == 2
+        ad.set_outflow_BC(pores=[0, 1, 2, 3])
+        assert np.sum(np.isfinite(ad['pore.bc_rate'])) == 0
+        assert np.sum(np.isfinite(ad['pore.bc_value'])) == 0
+
+    def test_value_BC_does_not_overwrite_outflow(self):
+        ad = AdvectionDiffusion(network=self.net, phase=self.phase)
+        ad.set_outflow_BC(pores=[0, 1])
+        with pytest.raises(Exception):
+            ad.set_value_BC(pores=[0, 1], values=1)
+
+    def test_add_rate_BC_fails_when_outflow_BC_present(self):
+        ad = AdvectionDiffusion(network=self.net, phase=self.phase)
+        ad.set_outflow_BC(pores=[0, 1])
+        with pytest.raises(Exception):
+            ad.set_rate_BC(pores=[0, 1], total_rate=1)
+        ad.set_rate_BC(pores=[2, 3], total_rate=1)
+        assert np.all(ad['pore.bc_rate'][[2, 3]] == 0.5)
+
     def test_outflow_BC_rigorous(self):
         ad = AdvectionDiffusion(network=self.net, phase=self.phase)
         ad.settings["cache_A"] = False
@@ -220,8 +245,8 @@ class AdvectionDiffusionTest:
 if __name__ == '__main__':
     t = AdvectionDiffusionTest()
     t.setup_class()
+    self = t
     for item in t.__dir__():
         if item.startswith('test'):
             print(f'Running test: {item}')
             t.__getattribute__(item)()
-    self = t
diff --git a/tests/unit/algorithms/GenericTransportTest.py b/tests/unit/algorithms/GenericTransportTest.py
index f8cf4858d..aa0b83ed4 100644
--- a/tests/unit/algorithms/GenericTransportTest.py
+++ b/tests/unit/algorithms/GenericTransportTest.py
@@ -98,6 +98,27 @@ class GenericTransportTest:
         y = np.unique(np.around(alg['pore.mole_fraction'], decimals=3))
         assert np.all(x == y)
 
+    def test_set_value_bc_where_rate_is_already_set_mode_merge(self):
+        alg = op.algorithms.GenericTransport(network=self.net,
+                                             phase=self.phase)
+        alg.settings['conductance'] = 'throat.diffusive_conductance'
+        alg.settings['quantity'] = 'pore.mole_fraction'
+        alg.set_rate_BC(pores=[0, 1], values=1, mode='merge')
+        alg.set_value_BC(pores=[1, 2], values=0, mode='merge')
+        assert np.isfinite(alg['pore.bc_rate']).sum() == 2
+        assert np.isfinite(alg['pore.bc_value']).sum() == 1
+
+    def test_set_value_bc_where_rate_is_already_set_mode_overwrite(self):
+        alg = op.algorithms.GenericTransport(network=self.net,
+                                             phase=self.phase)
+        alg.settings['conductance'] = 'throat.diffusive_conductance'
+        alg.settings['quantity'] = 'pore.mole_fraction'
+        alg.set_rate_BC(pores=[0, 1], values=1, mode='merge')
+        alg.set_value_BC(pores=[2, 3, 4], values=0, mode='merge')
+        alg.set_value_BC(pores=[1, 2], values=0, mode='overwrite')
+        assert np.isfinite(alg['pore.bc_rate']).sum() == 2
+        assert np.isfinite(alg['pore.bc_value']).sum() == 1
+
     def test_cache_A(self):
         alg = op.algorithms.GenericTransport(network=self.net,
                                              phase=self.phase)
diff --git a/tests/unit/algorithms/SolversTest.py b/tests/unit/algorithms/SolversTest.py
index 4fd53af69..3214ec661 100644
--- a/tests/unit/algorithms/SolversTest.py
+++ b/tests/unit/algorithms/SolversTest.py
@@ -145,8 +145,8 @@ class SolversTest:
 if __name__ == '__main__':
     t = SolversTest()
     t.setup_class()
+    self = t
     for item in t.__dir__():
         if item.startswith('test'):
             print('running test: '+item)
             t.__getattribute__(item)()
-    self = t
