diff --git a/tests/test_decorator.py b/tests/test_decorator.py
--- a/tests/test_decorator.py
+++ b/tests/test_decorator.py
@@ -3,12 +3,14 @@
 import sys
 from pathlib import Path
 from typing import List
+from unittest.mock import ANY
 
 import pytest
 
-from pydantic import BaseModel, ValidationError, validate_arguments
+from pydantic import BaseModel, Field, ValidationError, validate_arguments
 from pydantic.decorator import ValidatedFunction
 from pydantic.errors import ConfigError
+from pydantic.typing import Annotated
 
 skip_pre_38 = pytest.mark.skipif(sys.version_info < (3, 8), reason='testing >= 3.8 behaviour only')
 
@@ -142,6 +144,24 @@ def foo(a, b, *args, d=3, **kwargs):
     assert foo(1, 2, kwargs=4, e=5) == "a=1, b=2, args=(), d=3, kwargs={'kwargs': 4, 'e': 5}"
 
 
+def test_field_can_provide_factory() -> None:
+    @validate_arguments
+    def foo(a: int, b: int = Field(default_factory=lambda: 99), *args: int) -> int:
+        """mypy is happy with this"""
+        return a + b + sum(args)
+
+    assert foo(3) == 102
+    assert foo(1, 2, 3) == 6
+
+
+@pytest.mark.skipif(not Annotated, reason='typing_extensions not installed')
+def test_annotated_field_can_provide_factory() -> None:
+    @validate_arguments
+    def foo2(a: int, b: Annotated[int, Field(default_factory=lambda: 99)] = ANY, *args: int) -> int:
+        """mypy reports Incompatible default for argument "b" if we don't supply ANY as default"""
+        return a + b + sum(args)
+
+
 @skip_pre_38
 def test_positional_only(create_module):
     module = create_module(
