diff --git a/bowler/tests/lib.py b/bowler/tests/lib.py
index 490bff7..9a99889 100644
--- a/bowler/tests/lib.py
+++ b/bowler/tests/lib.py
@@ -8,9 +8,7 @@
 import functools
 import multiprocessing
 import sys
-import tempfile
 import unittest
-from contextlib import contextmanager
 from io import StringIO
 
 import click
diff --git a/bowler/tests/query.py b/bowler/tests/query.py
index a87dc30..8e20c55 100644
--- a/bowler/tests/query.py
+++ b/bowler/tests/query.py
@@ -8,7 +8,7 @@
 from unittest import mock
 
 from ..query import SELECTORS, Query
-from ..types import TOKEN, BowlerException, Leaf
+from ..types import TOKEN, Leaf
 from .lib import BowlerTestCase
 
 
@@ -48,6 +48,82 @@ class QueryTest(BowlerTestCase):
             query_func=query_func,
         )
 
+    def test_parse_print_func_py3(self):
+        # Py 3 mode is the default
+        def select_print_func(arg):
+            return Query(arg).select_var("bar").rename("baz")
+
+        template = """{} = 1; {}"""
+        self.run_bowler_modifiers(
+            [
+                (
+                    # ParseError prevents rename succeeding
+                    template.format("bar", 'print "hello world"'),
+                    template.format("bar", 'print "hello world"'),
+                ),
+                (
+                    template.format("bar", 'print("hello world")'),
+                    template.format("baz", 'print("hello world")'),
+                ),
+                (
+                    template.format("bar", 'print("hello world", end="")'),
+                    template.format("baz", 'print("hello world", end="")'),
+                ),
+            ],
+            query_func=select_print_func,
+        )
+
+    def test_parse_print_func_py2(self):
+        def select_print_func(arg):
+            return Query(arg, python_version=2).select_var("bar").rename("baz")
+
+        template = """{} = 1; {}"""
+        self.run_bowler_modifiers(
+            [
+                (
+                    template.format("bar", 'print "hello world"'),
+                    template.format("baz", 'print "hello world"'),
+                ),
+                (
+                    # not a print function call, just parenthesised statement
+                    template.format("bar", 'print("hello world")'),
+                    template.format("baz", 'print("hello world")'),
+                ),
+                (
+                    # ParseError prevents rename succeeding
+                    template.format("bar", 'print("hello world", end="")'),
+                    template.format("bar", 'print("hello world", end="")'),
+                ),
+            ],
+            query_func=select_print_func,
+        )
+
+    def test_parse_print_func_py2_future_print(self):
+        def select_print_func(arg):
+            return Query(arg, python_version=2).select_var("bar").rename("baz")
+
+        template = """\
+from __future__ import print_function
+{} = 1; {}"""
+        self.run_bowler_modifiers(
+            [
+                (
+                    # ParseError prevents rename succeeding
+                    template.format("bar", 'print "hello world"'),
+                    template.format("bar", 'print "hello world"'),
+                ),
+                (
+                    template.format("bar", 'print("hello world")'),
+                    template.format("baz", 'print("hello world")'),
+                ),
+                (
+                    template.format("bar", 'print("hello world", end="")'),
+                    template.format("baz", 'print("hello world", end="")'),
+                ),
+            ],
+            query_func=select_print_func,
+        )
+
     def test_rename_class(self):
         self.run_bowler_modifiers(
             [("class Bar(Foo):\n  pass", "class FooBar(Foo):\n  pass")],
