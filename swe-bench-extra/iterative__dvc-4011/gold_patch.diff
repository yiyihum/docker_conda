diff --git a/dvc/command/run.py b/dvc/command/run.py
--- a/dvc/command/run.py
+++ b/dvc/command/run.py
@@ -45,7 +45,7 @@ def run(self):
                 fname=self.args.file,
                 wdir=self.args.wdir,
                 no_exec=self.args.no_exec,
-                overwrite=self.args.overwrite,
+                force=self.args.force,
                 run_cache=not self.args.no_run_cache,
                 no_commit=self.args.no_commit,
                 outs_persist=self.args.outs_persist,
@@ -176,7 +176,8 @@ def add_parser(subparsers, parent_parser):
         help="Only create stage file without actually running it.",
     )
     run_parser.add_argument(
-        "--overwrite",
+        "-f",
+        "--force",
         action="store_true",
         default=False,
         help="Overwrite existing stage",
diff --git a/dvc/dvcfile.py b/dvc/dvcfile.py
--- a/dvc/dvcfile.py
+++ b/dvc/dvcfile.py
@@ -4,11 +4,9 @@
 
 from voluptuous import MultipleInvalid
 
-import dvc.prompt as prompt
 from dvc.exceptions import DvcException
 from dvc.stage import serialize
 from dvc.stage.exceptions import (
-    StageFileAlreadyExistsError,
     StageFileBadNameError,
     StageFileDoesNotExistError,
     StageFileFormatError,
@@ -109,9 +107,6 @@ def validate(cls, d, fname=None):
         except MultipleInvalid as exc:
             raise StageFileFormatError(f"'{fname}' format error: {exc}")
 
-    def remove_with_prompt(self, force=False):
-        raise NotImplementedError
-
     def remove(self, force=False):
         with contextlib.suppress(FileNotFoundError):
             os.unlink(self.path)
@@ -148,19 +143,6 @@ def dump(self, stage, **kwargs):
         dump_yaml(self.path, serialize.to_single_stage_file(stage))
         self.repo.scm.track_file(self.relpath)
 
-    def remove_with_prompt(self, force=False):
-        if not self.exists():
-            return
-
-        msg = (
-            "'{}' already exists. Do you wish to run the command and "
-            "overwrite it?".format(relpath(self.path))
-        )
-        if not (force or prompt.confirm(msg)):
-            raise StageFileAlreadyExistsError(self.path)
-
-        self.remove()
-
     def remove_stage(self, stage):
         self.remove()
 
diff --git a/dvc/repo/add.py b/dvc/repo/add.py
--- a/dvc/repo/add.py
+++ b/dvc/repo/add.py
@@ -145,7 +145,7 @@ def _create_stages(repo, targets, fname, pbar=None, external=False):
             external=external,
         )
         if stage:
-            Dvcfile(repo, stage.path).remove_with_prompt(force=True)
+            Dvcfile(repo, stage.path).remove()
 
         repo._reset()
 
diff --git a/dvc/repo/imp_url.py b/dvc/repo/imp_url.py
--- a/dvc/repo/imp_url.py
+++ b/dvc/repo/imp_url.py
@@ -39,7 +39,7 @@ def imp_url(self, url, out=None, fname=None, erepo=None, frozen=True):
         return None
 
     dvcfile = Dvcfile(self, stage.path)
-    dvcfile.remove_with_prompt(force=True)
+    dvcfile.remove()
 
     try:
         self.check_modified_graph([stage])
diff --git a/dvc/repo/run.py b/dvc/repo/run.py
--- a/dvc/repo/run.py
+++ b/dvc/repo/run.py
@@ -3,6 +3,7 @@
 from funcy import concat, first, lfilter
 
 from dvc.exceptions import InvalidArgumentError
+from dvc.stage import PipelineStage
 from dvc.stage.exceptions import (
     DuplicateStageName,
     InvalidStageName,
@@ -56,10 +57,25 @@ def _get_file_path(kwargs):
     )
 
 
+def _check_stage_exists(dvcfile, stage):
+    if not dvcfile.exists():
+        return
+
+    hint = "Use '--force' to overwrite."
+    if stage.__class__ != PipelineStage:
+        raise StageFileAlreadyExistsError(
+            f"'{stage.relpath}' already exists. {hint}"
+        )
+    elif stage.name and stage.name in dvcfile.stages:
+        raise DuplicateStageName(
+            f"Stage '{stage.name}' already exists in '{stage.relpath}'. {hint}"
+        )
+
+
 @locked
 @scm_context
 def run(self, fname=None, no_exec=False, single_stage=False, **kwargs):
-    from dvc.stage import PipelineStage, Stage, create_stage
+    from dvc.stage import Stage, create_stage
     from dvc.dvcfile import Dvcfile, PIPELINE_FILE
 
     if not kwargs.get("cmd"):
@@ -93,13 +109,10 @@ def run(self, fname=None, no_exec=False, single_stage=False, **kwargs):
         return None
 
     dvcfile = Dvcfile(self, stage.path)
-    if dvcfile.exists():
-        if kwargs.get("overwrite", True):
-            dvcfile.remove_stage(stage)
-        elif stage_cls != PipelineStage:
-            raise StageFileAlreadyExistsError(dvcfile.relpath)
-        elif stage_name and stage_name in dvcfile.stages:
-            raise DuplicateStageName(stage_name, dvcfile)
+    if kwargs.get("force", True):
+        dvcfile.remove_stage(stage)
+    else:
+        _check_stage_exists(dvcfile, stage)
 
     try:
         self.check_modified_graph([stage])
diff --git a/dvc/stage/exceptions.py b/dvc/stage/exceptions.py
--- a/dvc/stage/exceptions.py
+++ b/dvc/stage/exceptions.py
@@ -20,9 +20,7 @@ def __init__(self, fname):
 
 
 class StageFileAlreadyExistsError(DvcException):
-    def __init__(self, relpath):
-        msg = f"not overwriting '{relpath}'"
-        super().__init__(msg)
+    pass
 
 
 class StageFileIsNotDvcFileError(DvcException):
@@ -100,12 +98,7 @@ def __init__(self, file):
 
 
 class DuplicateStageName(DvcException):
-    def __init__(self, name, file):
-        super().__init__(
-            "Stage '{name}' already exists in '{relpath}'.".format(
-                name=name, relpath=file.relpath
-            )
-        )
+    pass
 
 
 class InvalidStageName(DvcException):
