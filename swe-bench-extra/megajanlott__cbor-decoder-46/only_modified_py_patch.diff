diff --git a/cbor/MajorType.py b/cbor/MajorType.py
index 2f43a8c..018d188 100644
--- a/cbor/MajorType.py
+++ b/cbor/MajorType.py
@@ -1,9 +1,10 @@
 from cbor.CBORStream import CBORStream
 from cbor.State import State
-from cbor.type.ByteString import ByteString
-from cbor.type.TextString import TextString
 from cbor.type.Array import ArrayInfo
+from cbor.type.ByteString import ByteString
 from cbor.type.Map import MapInfo
+from cbor.type.Tag import TagInfo
+from cbor.type.TextString import TextString
 
 MAJOR_TYPE_MASK = 0b11100000
 MAJOR_TYPE_SIZE = 3
@@ -29,5 +30,7 @@ class MajorType(State):
             return ArrayInfo()
         elif t == 5:
             return MapInfo()
+        elif t == 6:
+            return TagInfo()
 
         return
diff --git a/cbor/type/Array.py b/cbor/type/Array.py
index 28bb061..014cdfe 100644
--- a/cbor/type/Array.py
+++ b/cbor/type/Array.py
@@ -12,7 +12,7 @@ class ArrayInfo(cbor.State.State):
         if length == 0:
             handler(']')
         elif length < 24:
-            return [cbor.MajorType.MajorType(), ArrayRead(length)]
+            return [ArrayRead(length), cbor.MajorType.MajorType()]
         elif length == 24:
             return [ArrayLen(1)]
         elif length == 25:
@@ -22,7 +22,7 @@ class ArrayInfo(cbor.State.State):
         elif length == 27:
             return [ArrayLen(8)]
         elif length == 31:
-            return [cbor.MajorType.MajorType(), ArrayInf()]
+            return [ArrayInf(), cbor.MajorType.MajorType()]
         return []
 
 
@@ -37,7 +37,7 @@ class ArrayRead(cbor.State.State):
     def run(self, stream: cbor.CBORStream.CBORStream, handler):
         if self.n > 1:
             handler(',')
-            return [cbor.MajorType.MajorType(), ArrayRead(self.n - 1)]
+            return [ArrayRead(self.n - 1), cbor.MajorType.MajorType()]
         handler(']')
         return []
 
@@ -53,11 +53,11 @@ class ArrayLen(cbor.State.State):
     def run(self, stream: cbor.CBORStream.CBORStream, handler):
         info = stream.read(self.n)
         length = int.from_bytes(info, byteorder='big')
-        return [cbor.MajorType.MajorType(), ArrayRead(length)]
+        return [ArrayRead(length), cbor.MajorType.MajorType()]
 
 
 class ArrayInf(cbor.State.State):
 
     def run(self, stream: cbor.CBORStream.CBORStream, handler):
         handler(',')
-        return [cbor.MajorType.MajorType(), ArrayInf()]
+        return [ArrayInf(), cbor.MajorType.MajorType()]
