diff --git a/eliot/_action.py b/eliot/_action.py
index 5b5b519..56d9b4f 100644
--- a/eliot/_action.py
+++ b/eliot/_action.py
@@ -236,7 +236,15 @@ class Action(object):
         ).encode("ascii")
 
     @classmethod
-    def continue_task(cls, logger=None, task_id=_TASK_ID_NOT_SUPPLIED):
+    def continue_task(
+        cls,
+        logger=None,
+        task_id=_TASK_ID_NOT_SUPPLIED,
+        *,
+        action_type="eliot:remote_task",
+        _serializers=None,
+        **fields,
+    ):
         """
         Start a new action which is part of a serialized task.
 
@@ -247,6 +255,15 @@ class Action(object):
             L{Action.serialize_task_id}, either ASCII-encoded bytes or unicode
             string. Required.
 
+        @param action_type: The type of this action,
+            e.g. C{"yourapp:subsystem:dosomething"}.
+
+        @param _serializers: Either a L{eliot._validation._ActionSerializers}
+            instance or C{None}. In the latter case no validation or serialization
+            will be done for messages generated by the L{Action}.
+
+        @param fields: Additional fields to add to the start message.
+
         @return: The new L{Action} instance.
         """
         if task_id is _TASK_ID_NOT_SUPPLIED:
@@ -255,9 +272,9 @@ class Action(object):
             task_id = task_id.decode("ascii")
         uuid, task_level = task_id.split("@")
         action = cls(
-            logger, uuid, TaskLevel.fromString(task_level), "eliot:remote_task"
+            logger, uuid, TaskLevel.fromString(task_level), action_type, _serializers
         )
-        action._start({})
+        action._start(fields)
         return action
 
     # Backwards-compat variants:

