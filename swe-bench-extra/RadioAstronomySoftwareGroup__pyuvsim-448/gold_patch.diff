diff --git a/README.md b/README.md
index 530118e..c5f7d9f 100644
--- a/README.md
+++ b/README.md
@@ -20,6 +20,7 @@ precision necessary for 21cm cosmology science,
 1. High level of test coverage including accuracy (design goal is 97%).
 2. Testing against analytic calculations, monitored by continuous integration (see memo #XXX)
 3. Comparison with external simulations with standardized reference simulations
+
 ## Usability and extensibility
 A secondary goal is a community simulation environment which provides well documented and flexible code to support a diversity of use cases.
 Key elements of this approach include:
@@ -41,6 +42,14 @@ Each addition of new physics is validated against analytic calculations and incl
 1. Time domain sources (TODO)
 1. Ionospheric scintillation (TODO)
 
+# Citation
+Please cite pyuvsim by citing our JOSS paper:
+
+Lanman et al., (2019). pyuvsim: A comprehensive simulation package for radio
+interferometers in python. Journal of Open Source Software, 4(37), 1234,
+https://doi.org/10.21105/joss.01234
+
+[ADS Link](https://ui.adsabs.harvard.edu/abs/2019JOSS....4.1234L/abstract)
 
 
 ## Installation
@@ -174,9 +183,14 @@ We use a `generation.major.minor` format.
 Testing: Backed by unittests, internal model validation, and significant external comparison.
 * Major - Adds new physical effect or major computational improvement. Small number of improvements with each release.
 Testing: Backed by unittests, internal model validation and limited external comparison.
-* Minor - Bug fixes and small improvements not expected to change physical model.
+* Minor - Bug fixes and small improvements not expected to change physical model
+and which do not include breaking API changes.
 Testing: Backed by unittests
 
+We do our best to provide a significant period (usually 2 major generations) of
+deprecation warnings for all breaking changes to the API.
+We track all changes in our [changelog](https://github.com/RadioAstronomySoftwareGroup/pyuvsim/blob/main/CHANGELOG.md).
+
 ### Some helpful definitions
 * __Physical effects__: things like polarization effects, noise, ionospheric modeling, or nonterrestrial observing positions.
 * __Major computational improvement__:  Support for new catalog types (e.g, diffuse maps), new analysis tools, changes to parallelization scheme
diff --git a/ci/min_deps.yaml b/ci/min_deps.yaml
index 87e1c5b..60d89a1 100644
--- a/ci/min_deps.yaml
+++ b/ci/min_deps.yaml
@@ -10,6 +10,7 @@ dependencies:
   - pip
   - pytest
   - pytest-cov
+  - pytest-xdist
   - pyuvdata>=2.2.10
   - pyyaml>=5.1
   - scipy>=1.3
diff --git a/ci/min_versions.yaml b/ci/min_versions.yaml
index 13f2305..8b4c7ed 100644
--- a/ci/min_versions.yaml
+++ b/ci/min_versions.yaml
@@ -16,6 +16,7 @@ dependencies:
   - python-casacore==3.3.1
   - pytest
   - pytest-cov
+  - pytest-xdist
   - pyuvdata==2.2.10
   - pyyaml==5.1.*
   - scipy==1.3.*
diff --git a/pyuvsim/simsetup.py b/pyuvsim/simsetup.py
index 8dfb2b1..c7dbf44 100644
--- a/pyuvsim/simsetup.py
+++ b/pyuvsim/simsetup.py
@@ -2028,13 +2028,13 @@ def initialize_uvdata_from_keywords(
         # Increment name appropriately:
         output_layout_filepath = os.path.join(path_out, output_layout_filename)
         output_layout_filename = os.path.basename(
-            check_file_exists_and_increment(output_layout_filepath, 'csv')
+            check_file_exists_and_increment(output_layout_filepath)
         )
 
         if output_yaml_filename is None:
             output_yaml_filename = 'obsparam.yaml'
         output_yaml_filename = check_file_exists_and_increment(
-            os.path.join(path_out, output_yaml_filename), 'yaml'
+            os.path.join(path_out, output_yaml_filename)
         )
 
         if antenna_layout_filepath is not None:
diff --git a/pyuvsim/utils.py b/pyuvsim/utils.py
index d3bc5a2..654d677 100644
--- a/pyuvsim/utils.py
+++ b/pyuvsim/utils.py
@@ -146,43 +146,15 @@ def zenithangle_azimuth_to_altaz(zenith_angle, azimuth):
     return altitude, new_azimuth
 
 
-def strip_extension(filepath, ext=None):
-    """
-    Remove extension from file.
-
-    Parameters
-    ----------
-    ext : str
-        Extenstion to remove. If not specified, only 'uvfits', 'uvh5', 'yaml' extensions
-        are removed.
-    """
-    if '.' not in filepath:
-        return filepath, ''
-    file_list = filepath.split('.')
-    if ext is not None:
-        return filepath[:-len(ext) - 1], '.' + ext
-    ext = file_list[-1]
-    # miriad files might not have an extension
-    # limited list of recognized extensions
-    if ext not in ['uvfits', 'uvh5', 'yaml']:
-        return filepath, ''
-    return ".".join(file_list[:-1]), '.' + file_list[-1]
-
-
-def check_file_exists_and_increment(filepath, extension=None):
+def check_file_exists_and_increment(filepath):
     """
     Check for a file and increment the name if it does to ensure a unique name.
 
     Given filepath (path + filename), check if it exists. If so, add a _1
     at the end, if that exists add a _2, and so on.
 
-    Parameters
-    ----------
-    extension : str
-        File extension, to be removed before modifying the filename and then added back.
-
     """
-    base_filepath, ext = strip_extension(filepath, extension)
+    base_filepath, ext = os.path.splitext(filepath)
     bf_list = base_filepath.split('_')
     if bf_list[-1].isdigit():
         base_filepath = '_'.join(bf_list[:-1])
