diff --git a/edk2toolext/tests/test_edk2_update.py b/edk2toolext/tests/test_edk2_update.py
index c712e86..25ee5b5 100644
--- a/edk2toolext/tests/test_edk2_update.py
+++ b/edk2toolext/tests/test_edk2_update.py
@@ -84,7 +84,7 @@ def test_one_level_recursive(self):
         updater = self.invoke_update(tree.get_settings_provider_path())
         # make sure it worked
         self.assertTrue(os.path.exists(os.path.join(WORKSPACE, "Edk2TestUpdate_extdep",
-                                                    "NuGet.CommandLine_extdep", "extdep_state.json")))
+                                                    "NuGet.CommandLine_extdep", "extdep_state.yaml")))
         build_env, shell_env, failure = updater.PerformUpdate()
         # we should have no failures
         self.assertEqual(failure, 0)
diff --git a/edk2toolext/tests/test_self_describing_environment.py b/edk2toolext/tests/test_self_describing_environment.py
index 2277791..3fcf43d 100644
--- a/edk2toolext/tests/test_self_describing_environment.py
+++ b/edk2toolext/tests/test_self_describing_environment.py
@@ -10,6 +10,7 @@
 import pygit2
 import unittest
 import tempfile
+import yaml
 from edk2toolext.environment import self_describing_environment
 from edk2toolext.tests.uefi_tree import uefi_tree
 from edk2toolext.environment import version_aggregator
@@ -166,6 +167,33 @@ def test_git_worktree(self):
         # that are present in the worktree
         self_describing_environment.BootstrapEnvironment(self.workspace, ('global',))
 
+    def test_no_verify_extdep(self):
+        tree = uefi_tree(self.workspace, create_platform=False)
+        tree.create_ext_dep(dep_type="git",
+                            scope="global",
+                            name="HelloWorld",
+                            source="https://github.com/octocat/Hello-World.git",
+                            version="7fd1a60b01f91b314f59955a4e4d4e80d8edf11d")
+
+        # Bootstrap the environment
+        self_describing_environment.BootstrapEnvironment(self.workspace, ("global",))
+        self_describing_environment.UpdateDependencies(self.workspace, scopes=("global",))
+        self_describing_environment.VerifyEnvironment(self.workspace, scopes=("global",))
+
+        # Delete the readme to make the repo dirty then verify it fails
+        readme = os.path.join(tree.get_workspace(), "HelloWorld_extdep", "HelloWorld", "README")
+        os.remove(readme)
+        self.assertFalse(self_describing_environment.VerifyEnvironment(self.workspace, scopes=("global",)))
+
+        # Update the state file to not verify the specific external dependency then verify it passes
+        state_file = os.path.join(tree.get_workspace(), "HelloWorld_extdep", "extdep_state.yaml")
+        with open(state_file, 'r+') as f:
+            content = yaml.safe_load(f)
+            f.seek(0)
+            content["verify"] = False
+            yaml.safe_dump(content, f)
+        self.assertTrue(self_describing_environment.VerifyEnvironment(self.workspace, scopes=("global",)))
+
 
 if __name__ == '__main__':
     unittest.main()
