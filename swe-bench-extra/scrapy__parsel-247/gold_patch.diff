diff --git a/docs/usage.rst b/docs/usage.rst
index d0a6fb0..dcef13d 100644
--- a/docs/usage.rst
+++ b/docs/usage.rst
@@ -400,7 +400,7 @@ Removing elements
 -----------------
 
 If for any reason you need to remove elements based on a Selector or
-a SelectorList, you can do it with the ``remove()`` method, available for both
+a SelectorList, you can do it with the ``drop()`` method, available for both
 classes.
 
 .. warning:: this is a destructive action and cannot be undone. The original
@@ -425,7 +425,7 @@ Example removing an ad from a blog post:
     >>> sel = Selector(text=doc)
     >>> sel.xpath('//div/text()').getall()
     ['Content paragraph...', '\n        ', '\n            Ad content...\n            ', '\n        ', '\n    ', 'More content...']
-    >>> sel.xpath('//div[@class="ad"]').remove()
+    >>> sel.xpath('//div[@class="ad"]').drop()
     >>> sel.xpath('//div//text()').getall()
     ['Content paragraph...', 'More content...']
 
diff --git a/parsel/selector.py b/parsel/selector.py
index e0d5a40..b84b030 100644
--- a/parsel/selector.py
+++ b/parsel/selector.py
@@ -4,13 +4,14 @@ XPath selectors based on lxml
 
 import typing
 import warnings
-from typing import Any, Dict, List, Optional, Mapping, Pattern, Union
+from typing import Any, Dict, List, Mapping, Optional, Pattern, Union
+from warnings import warn
 
 from lxml import etree, html
 from pkg_resources import parse_version
 
-from .utils import flatten, iflatten, extract_regex, shorten
-from .csstranslator import HTMLTranslator, GenericTranslator
+from .csstranslator import GenericTranslator, HTMLTranslator
+from .utils import extract_regex, flatten, iflatten, shorten
 
 _SelectorType = typing.TypeVar("_SelectorType", bound="Selector")
 
@@ -27,6 +28,10 @@ class CannotRemoveElementWithoutParent(Exception):
     pass
 
 
+class CannotDropElementWithoutParent(CannotRemoveElementWithoutParent):
+    pass
+
+
 class SafeXMLParser(etree.XMLParser):
     def __init__(self, *args, **kwargs) -> None:
         kwargs.setdefault("resolve_entities", False)
@@ -236,9 +241,21 @@ class SelectorList(List[_SelectorType]):
         """
         Remove matched nodes from the parent for each element in this list.
         """
+        warn(
+            "Method parsel.selector.SelectorList.remove is deprecated, please use parsel.selector.SelectorList.drop method instead",
+            category=DeprecationWarning,
+            stacklevel=2,
+        )
         for x in self:
             x.remove()
 
+    def drop(self) -> None:
+        """
+        Drop matched nodes from the parent for each element in this list.
+        """
+        for x in self:
+            x.drop()
+
 
 class Selector:
     """
@@ -503,6 +520,11 @@ class Selector:
         """
         Remove matched nodes from the parent element.
         """
+        warn(
+            "Method parsel.selector.Selector.remove is deprecated, please use parsel.selector.Selector.drop method instead",
+            category=DeprecationWarning,
+            stacklevel=2,
+        )
         try:
             parent = self.root.getparent()
         except AttributeError:
@@ -523,6 +545,30 @@ class Selector:
                 "are you trying to remove a root element?"
             )
 
+    def drop(self):
+        """
+        Drop matched nodes from the parent element.
+        """
+        try:
+            self.root.getparent()
+        except AttributeError:
+            # 'str' object has no attribute 'getparent'
+            raise CannotRemoveElementWithoutRoot(
+                "The node you're trying to drop has no root, "
+                "are you trying to drop a pseudo-element? "
+                "Try to use 'li' as a selector instead of 'li::text' or "
+                "'//li' instead of '//li/text()', for example."
+            )
+
+        try:
+            self.root.drop_tree()
+        except (AttributeError, AssertionError):
+            # 'NoneType' object has no attribute 'drop'
+            raise CannotDropElementWithoutParent(
+                "The node you're trying to remove has no parent, "
+                "are you trying to remove a root element?"
+            )
+
     @property
     def attrib(self) -> Dict[str, str]:
         """Return the attributes dictionary for underlying element."""
