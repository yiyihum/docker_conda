diff --git a/docs/examples/models_generics_inheritance_extend.py b/docs/examples/models_generics_inheritance_extend.py
new file mode 100644
--- /dev/null
+++ b/docs/examples/models_generics_inheritance_extend.py
@@ -0,0 +1,19 @@
+from typing import TypeVar, Generic
+from pydantic.generics import GenericModel
+
+TypeX = TypeVar('TypeX')
+TypeY = TypeVar('TypeY')
+TypeZ = TypeVar('TypeZ')
+
+
+class BaseClass(GenericModel, Generic[TypeX, TypeY]):
+    x: TypeX
+    y: TypeY
+
+
+class ChildClass(BaseClass[int, TypeY], Generic[TypeY, TypeZ]):
+    z: TypeZ
+
+
+# Replace TypeY by str
+print(ChildClass[str, int](x=1, y='y', z=3))
diff --git a/pydantic/generics.py b/pydantic/generics.py
--- a/pydantic/generics.py
+++ b/pydantic/generics.py
@@ -6,6 +6,7 @@
     Callable,
     ClassVar,
     Dict,
+    Generic,
     Optional,
     Tuple,
     Type,
@@ -41,7 +42,7 @@ def __class_getitem__(cls: Type[GenericModelT], params: Union[Type[Any], Tuple[T
         cached = _generic_types_cache.get((cls, params))
         if cached is not None:
             return cached
-        if cls.__concrete__:
+        if cls.__concrete__ and Generic not in cls.__bases__:
             raise TypeError('Cannot parameterize a concrete instantiation of a generic model')
         if not isinstance(params, tuple):
             params = (params,)
