diff --git a/tests/test_algos.py b/tests/test_algos.py
index 88e8cbf..064aad5 100644
--- a/tests/test_algos.py
+++ b/tests/test_algos.py
@@ -6,6 +6,8 @@ import sys
 import os
 
 from asn1crypto import algos, core
+
+from .unittest_data import data_decorator, data
 from ._unittest_compat import patch
 
 patch()
@@ -22,6 +24,7 @@ tests_root = os.path.dirname(__file__)
 fixtures_dir = os.path.join(tests_root, 'fixtures')
 
 
+@data_decorator
 class AlgoTests(unittest.TestCase):
 
     def test_signed_digest_parameters(self):
@@ -78,3 +81,31 @@ class AlgoTests(unittest.TestCase):
         params = algo["parameters"]
         self.assertEqual(params["version"].native, 'v1-0')
         self.assertEqual(params["rounds"].native, 42)
+
+    @staticmethod
+    def sha3_algo_pairs():
+        return [
+            ('sha3_224_dsa', 'sha3_224', 'dsa'),
+            ('sha3_256_dsa', 'sha3_256', 'dsa'),
+            ('sha3_384_dsa', 'sha3_384', 'dsa'),
+            ('sha3_512_dsa', 'sha3_512', 'dsa'),
+            ('sha3_224_ecdsa', 'sha3_224', 'ecdsa'),
+            ('sha3_256_ecdsa', 'sha3_256', 'ecdsa'),
+            ('sha3_384_ecdsa', 'sha3_384', 'ecdsa'),
+            ('sha3_512_ecdsa', 'sha3_512', 'ecdsa'),
+            ('sha3_224_rsa', 'sha3_224', 'rsa'),
+            ('sha3_256_rsa', 'sha3_256', 'rsa'),
+            ('sha3_384_rsa', 'sha3_384', 'rsa'),
+            ('sha3_512_rsa', 'sha3_512', 'rsa'),
+        ]
+
+    @data('sha3_algo_pairs', True)
+    def sha3_algos_round_trip(self, digest_alg, sig_alg):
+        alg_name = "%s_%s" % (digest_alg, sig_alg)
+        original = algos.SignedDigestAlgorithm({'algorithm': alg_name})
+        parsed = algos.SignedDigestAlgorithm.load(original.dump())
+        self.assertEqual(parsed.hash_algo, digest_alg)
+        self.assertEqual(
+            parsed.signature_algo,
+            'rsassa_pkcs1v15' if sig_alg == 'rsa' else sig_alg
+        )
diff --git a/tests/test_core.py b/tests/test_core.py
index 7ac9196..fabb675 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -1,6 +1,7 @@
 # coding: utf-8
 from __future__ import unicode_literals, division, absolute_import, print_function
 
+import pickle
 import unittest
 import os
 from datetime import datetime, timedelta
@@ -1375,3 +1376,11 @@ class CoreTests(unittest.TestCase):
 
         with self.assertRaisesRegex(ValueError, "Second arc must be "):
             core.ObjectIdentifier("0.40")
+
+    def test_pickle_integration(self):
+        orig = Seq({'id': '2.3.4', 'value': b"\xde\xad\xbe\xef"})
+        pickled_bytes = pickle.dumps(orig)
+        # ensure that our custom pickling implementation was used
+        self.assertIn(b"unpickle_helper", pickled_bytes)
+        unpickled = pickle.loads(pickled_bytes)
+        self.assertEqual(orig.native, unpickled.native)
