diff --git a/fffw/encoding/outputs.py b/fffw/encoding/outputs.py
index 968db2f..92e0ba0 100644
--- a/fffw/encoding/outputs.py
+++ b/fffw/encoding/outputs.py
@@ -1,11 +1,12 @@
+from collections import defaultdict
 from dataclasses import dataclass
-from itertools import chain
-from typing import List, cast, Optional, Iterable, Any
+from typing import List, cast, Optional, Iterable, Any, Tuple, Dict
 
-from fffw.graph.meta import AUDIO, VIDEO, StreamType
+from fffw.encoding import mixins
 from fffw.graph import base
+from fffw.graph.meta import AUDIO, VIDEO, StreamType
 from fffw.wrapper import BaseWrapper, ensure_binary, param
-from fffw.encoding import mixins
+
 __all__ = [
     'Codec',
     'Output',
@@ -57,9 +58,22 @@ class Codec(mixins.StreamValidationMixin, base.Dest, BaseWrapper):
         return bool(self.edge)
 
     def get_args(self) -> List[bytes]:
+        """
+        Insert map argument before all rest codec params.
+        """
         args = ['-map', self.map]
         return ensure_binary(args) + super().get_args()
 
+    def as_pairs(self) -> List[Tuple[Optional[str], Optional[str]]]:
+        """
+        Add stream index suffix to all named params
+        """
+        pairs = super().as_pairs()
+        result = []
+        for p, v in pairs:
+            result.append((p and f'{p}:{self.index}', v))
+        return result
+
     def clone(self, count: int = 1) -> List["Codec"]:
         """
         Creates multiple copies of self to reuse it as output node for multiple
@@ -202,8 +216,6 @@ class OutputList(list):
         :param outputs: list of output files
         """
         super().__init__()
-        self.__video_index = 0
-        self.__audio_index = 0
         self.extend(outputs)
 
     @property
@@ -219,8 +231,7 @@ class OutputList(list):
 
         :param output: output file
         """
-        for codec in output.codecs:
-            self.__set_index(codec)
+        self.__set_index(output)
         super().append(output)
 
     def extend(self, outputs: Iterable[Output]) -> None:
@@ -229,20 +240,25 @@ class OutputList(list):
 
         :param outputs: list of output files
         """
-        for codec in chain(*map(lambda output: output.codecs, outputs)):
-            self.__set_index(codec)
+        for output in outputs:
+            self.__set_index(output)
         super().extend(outputs)
 
     def get_args(self) -> List[bytes]:
+        """
+        Combine all output params together
+        """
         result: List[bytes] = []
-        for source in self:
-            result.extend(source.get_args())
+        for output in self:
+            result.extend(output.get_args())
         return result
 
-    def __set_index(self, codec: Codec) -> None:
-        if codec.kind == VIDEO:
-            codec.index = self.__video_index
-            self.__video_index += 1
-        else:
-            codec.index = self.__audio_index
-            self.__audio_index += 1
+    @staticmethod
+    def __set_index(output: Output) -> None:
+        """
+        Enumerate codecs in output with a stream index in this output
+        """
+        indices: Dict[StreamType, int] = defaultdict(lambda: 0)
+        for codec in output.codecs:
+            codec.index = indices[codec.kind]
+            indices[codec.kind] += 1
