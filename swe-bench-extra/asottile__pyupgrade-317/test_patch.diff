diff --git a/tests/super_test.py b/tests/super_test.py
index 7ec0095..95eba81 100644
--- a/tests/super_test.py
+++ b/tests/super_test.py
@@ -121,3 +121,77 @@ def test_fix_super_noop(s):
 )
 def test_fix_super(s, expected):
     assert _fix_py3_plus(s, (3,)) == expected
+
+
+@pytest.mark.parametrize(
+    's',
+    (
+        pytest.param(
+            'class C(B):\n'
+            '    def f(self):\n'
+            '        B.f(notself)\n',
+            id='old style super, first argument is not first function arg',
+        ),
+        pytest.param(
+            'class C(B1, B2):\n'
+            '    def f(self):\n'
+            '        B1.f(self)\n',
+            # TODO: is this safe to rewrite? I don't think so
+            id='old-style super, multiple inheritance first class',
+        ),
+        pytest.param(
+            'class C(B1, B2):\n'
+            '    def f(self):\n'
+            '        B2.f(self)\n',
+            # TODO: is this safe to rewrite? I don't think so
+            id='old-style super, multiple inheritance not-first class',
+        ),
+        pytest.param(
+            'class C(Base):\n'
+            '    def f(self):\n'
+            '        return [Base.f(self) for _ in ()]\n',
+            id='super in comprehension',
+        ),
+        pytest.param(
+            'class C(Base):\n'
+            '    def f(self):\n'
+            '        def g():\n'
+            '            Base.f(self)\n'
+            '        g()\n',
+            id='super in nested functions',
+        ),
+        pytest.param(
+            'class C(not_simple()):\n'
+            '    def f(self):\n'
+            '        not_simple().f(self)\n',
+            id='not a simple base',
+        ),
+        pytest.param(
+            'class C(a().b):\n'
+            '    def f(self):\n'
+            '        a().b.f(self)\n',
+            id='non simple attribute base',
+        ),
+    ),
+)
+def test_old_style_class_super_noop(s):
+    assert _fix_py3_plus(s, (3,)) == s
+
+
+@pytest.mark.parametrize(
+    ('s', 'expected'),
+    (
+        (
+            'class C(B):\n'
+            '    def f(self):\n'
+            '        B.f(self)\n'
+            '        B.f(self, arg, arg)\n',
+            'class C(B):\n'
+            '    def f(self):\n'
+            '        super().f()\n'
+            '        super().f(arg, arg)\n',
+        ),
+    ),
+)
+def test_old_style_class_super(s, expected):
+    assert _fix_py3_plus(s, (3,)) == expected
diff --git a/tests/versioned_branches_test.py b/tests/versioned_branches_test.py
index b0512f1..2f93791 100644
--- a/tests/versioned_branches_test.py
+++ b/tests/versioned_branches_test.py
@@ -264,6 +264,25 @@ def test_fix_py2_block_noop(s):
 
             id='six.PY2, comment after',
         ),
+        pytest.param(
+            'if six.PY2:\n'
+            '    def f():\n'
+            '        print("py2")\n'
+            '    def g():\n'
+            '        print("py2")\n'
+            'else:\n'
+            '    def f():\n'
+            '        print("py3")\n'
+            '    def g():\n'
+            '        print("py3")\n',
+
+            'def f():\n'
+            '    print("py3")\n'
+            'def g():\n'
+            '    print("py3")\n',
+
+            id='six.PY2 multiple functions',
+        ),
         pytest.param(
             'if True:\n'
             '    if six.PY3:\n'
