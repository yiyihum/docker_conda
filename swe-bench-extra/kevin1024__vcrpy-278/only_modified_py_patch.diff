diff --git a/vcr/matchers.py b/vcr/matchers.py
index b54ed2f..8fe334e 100644
--- a/vcr/matchers.py
+++ b/vcr/matchers.py
@@ -49,7 +49,8 @@ def _transform_json(body):
     # Request body is always a byte string, but json.loads() wants a text
     # string. RFC 7159 says the default encoding is UTF-8 (although UTF-16
     # and UTF-32 are also allowed: hmmmmm).
-    return json.loads(body.decode('utf-8'))
+    if body:
+        return json.loads(body.decode('utf-8'))
 
 
 _xml_header_checker = _header_checker('text/xml')
diff --git a/vcr/serializers/compat.py b/vcr/serializers/compat.py
index 0fcc583..8364997 100644
--- a/vcr/serializers/compat.py
+++ b/vcr/serializers/compat.py
@@ -24,7 +24,7 @@ def convert_body_to_bytes(resp):
     http://pyyaml.org/wiki/PyYAMLDocumentation#Python3support
     """
     try:
-        if not isinstance(resp['body']['string'], six.binary_type):
+        if resp['body']['string'] is not None and not isinstance(resp['body']['string'], six.binary_type):
             resp['body']['string'] = resp['body']['string'].encode('utf-8')
     except (KeyError, TypeError, UnicodeEncodeError):
         # The thing we were converting either wasn't a dictionary or didn't
diff --git a/vcr/stubs/aiohttp_stubs/__init__.py b/vcr/stubs/aiohttp_stubs/__init__.py
index a19be69..5730d3b 100644
--- a/vcr/stubs/aiohttp_stubs/__init__.py
+++ b/vcr/stubs/aiohttp_stubs/__init__.py
@@ -4,8 +4,9 @@ from __future__ import absolute_import
 import asyncio
 import functools
 import json
+import urllib
 
-from aiohttp import ClientResponse
+from aiohttp import ClientResponse, helpers
 
 from vcr.request import Request
 
@@ -26,15 +27,38 @@ class MockClientResponse(ClientResponse):
 
 
 def vcr_request(cassette, real_request):
-
     @functools.wraps(real_request)
     @asyncio.coroutine
     def new_request(self, method, url, **kwargs):
         headers = kwargs.get('headers')
         headers = self._prepare_headers(headers)
         data = kwargs.get('data')
-
-        vcr_request = Request(method, url, data, headers)
+        params = kwargs.get('params')
+
+        # INFO: Query join logic from
+        # https://github.com/KeepSafe/aiohttp/blob/b3eeedbc2f515ec2aa6e87ba129524c17b6fe4e3/aiohttp/client_reqrep.py#L167-L188
+        scheme, netloc, path, query, fragment = urllib.parse.urlsplit(url)
+        if not path:
+            path = '/'
+
+        # NOTICE: Not sure this is applicable here:
+        # if isinstance(params, collections.Mapping):
+        #     params = list(params.items())
+
+        if params:
+            if not isinstance(params, str):
+                params = urllib.parse.urlencode(params)
+            if query:
+                query = '%s&%s' % (query, params)
+            else:
+                query = params
+
+        request_path = urllib.parse.urlunsplit(('', '', helpers.requote_uri(path),
+                                                query, fragment))
+        request_url = urllib.parse.urlunsplit(
+            (scheme, netloc, request_path, '', ''))
+
+        vcr_request = Request(method, request_url, data, headers)
 
         if cassette.can_play_response_for(vcr_request):
             vcr_response = cassette.play_response(vcr_request)

