diff --git a/tests/test_iqlearn_sklearn_predict.py b/tests/test_iqlearn_sklearn_predict.py
index faec86e..e8b822c 100644
--- a/tests/test_iqlearn_sklearn_predict.py
+++ b/tests/test_iqlearn_sklearn_predict.py
@@ -114,11 +114,11 @@ def test_iqlearn_regwrapper_rule():
     assert len(dtr_model.models[0]) == 2
 
 
-def test_iqlearn_regwrapper_rf():
+def test_iqlearn_rf():
     # setup params
     n = 10
     thres = int(n / 2)
-    # sample rule base models
+    # rf models
     model1 = RandomForestRegressor()
     model2 = RandomForestRegressor()
     # sample dataframe
@@ -143,7 +143,7 @@ def test_iqlearn_regwrapper_rf():
             "outcome": "Y2"
         }
     ]
-    # fit model (dummy)
+    # fit model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info
@@ -163,7 +163,7 @@ def test_iqlearn_regwrapper_rf():
     a2 = action_all.query("stage == 1")[["A2", "val"]].reset_index(drop=True)
     assert_frame_equal(action_1, a1)
     assert_frame_equal(action_2, a2)
-    # fit bootstrap model (dummy)
+    # fit bootstrap model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info,
@@ -177,7 +177,7 @@ def test_iqlearn_regwrapper_rf_multiple_actions():
     # setup params
     n = 10
     thres = int(n / 2)
-    # sample rule base models
+    # rf models
     model1 = RandomForestRegressor()
     model2 = RandomForestRegressor()
     # sample dataframe
@@ -202,7 +202,7 @@ def test_iqlearn_regwrapper_rf_multiple_actions():
             "outcome": "Y2"
         }
     ]
-    # fit model (dummy)
+    # fit model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info
@@ -222,7 +222,7 @@ def test_iqlearn_regwrapper_rf_multiple_actions():
     a2 = action_all.query("stage == 1")[["A1", "A2", "val"]].reset_index(drop=True)
     assert_frame_equal(action_1, a1)
     assert_frame_equal(action_2, a2)
-    # fit bootstrap model (dummy)
+    # fit bootstrap model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info,
@@ -236,7 +236,7 @@ def test_iqlearn_regwrapper_rf_ordinalencoder():
     # setup params
     n = 30
     thres = int(n / 2)
-    # sample rule base models
+    # rf models
     model1 = RandomForestRegressor()
     model2 = RandomForestRegressor()
     # sample dataframe
@@ -261,7 +261,7 @@ def test_iqlearn_regwrapper_rf_ordinalencoder():
             "outcome": "Y2"
         }
     ]
-    # fit model (dummy)
+    # fit model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info
@@ -281,7 +281,7 @@ def test_iqlearn_regwrapper_rf_ordinalencoder():
     a2 = action_all.query("stage == 1")[["A2", "val"]].reset_index(drop=True)
     assert_frame_equal(action_1, a1)
     assert_frame_equal(action_2, a2)
-    # fit bootstrap model (dummy)
+    # fit bootstrap model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info,
diff --git a/tests/test_iqlearn_sm_predict.py b/tests/test_iqlearn_sm_predict.py
index 448ab14..64dfc73 100644
--- a/tests/test_iqlearn_sm_predict.py
+++ b/tests/test_iqlearn_sm_predict.py
@@ -10,7 +10,7 @@ def test_iqlearn_sm():
     # setup params
     n = 10
     thres = int(n / 2)
-    # sample rule base models
+    # statsmodels
     model1 = "p_outcome ~ L1 * A1"
     model2 = "p_outcome ~ L1 + A1 + Y1 * A2"
     # sample dataframe
@@ -35,7 +35,7 @@ def test_iqlearn_sm():
             "outcome": "Y2"
         }
     ]
-    # fit model (dummy)
+    # fit model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info
@@ -55,7 +55,7 @@ def test_iqlearn_sm():
     a2 = action_all.query("stage == 1")[["A2", "val"]].reset_index(drop=True)
     assert_frame_equal(action_1, a1)
     assert_frame_equal(action_2, a2)
-    # fit bootstrap model (dummy)
+    # fit bootstrap model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info,
@@ -69,7 +69,7 @@ def test_iqlearn_sm_multiple_actions():
     # setup params
     n = 10
     thres = int(n / 2)
-    # sample rule base models
+    # statsmodels
     model1 = "p_outcome ~ L1 * A1"
     model2 = "p_outcome ~ L1 + A1 + Y1 * A2"
     # sample dataframe
@@ -94,7 +94,7 @@ def test_iqlearn_sm_multiple_actions():
             "outcome": "Y2"
         }
     ]
-    # fit model (dummy)
+    # fit model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info
@@ -114,7 +114,7 @@ def test_iqlearn_sm_multiple_actions():
     a2 = action_all.query("stage == 1")[["A1", "A2", "val"]].reset_index(drop=True)
     assert_frame_equal(action_1, a1)
     assert_frame_equal(action_2, a2)
-    # fit bootstrap model (dummy)
+    # fit bootstrap model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info,
@@ -128,7 +128,7 @@ def test_iqlearn_sm_multinomial_action():
     # setup params
     n = 30
     thres = int(n / 2)
-    # sample rule base models
+    # statsmodels
     model1 = "p_outcome ~ L1 * C(A1)"
     model2 = "p_outcome ~ L1 + A1 + Y1 * C(A2)"
     # sample dataframe
@@ -153,7 +153,7 @@ def test_iqlearn_sm_multinomial_action():
             "outcome": "Y2"
         }
     ]
-    # fit model (dummy)
+    # fit model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info
@@ -173,7 +173,7 @@ def test_iqlearn_sm_multinomial_action():
     a2 = action_all.query("stage == 1")[["A2", "val"]].reset_index(drop=True)
     assert_frame_equal(action_1, a1)
     assert_frame_equal(action_2, a2)
-    # fit bootstrap model (dummy)
+    # fit bootstrap model
     dtr_model = IqLearnReg(
         n_stages=2,
         model_info=model_info,
@@ -181,3 +181,48 @@ def test_iqlearn_sm_multinomial_action():
     )
     dtr_model.fit(df)
     assert len(dtr_model.models[0]) == 2
+
+
+def test_iqlearn_sm_get_params():
+    # setup params
+    n = 300
+    thres = int(n / 2)
+    # statsmodels
+    model1 = "p_outcome ~ L1 * A1"
+    model2 = "p_outcome ~ L1 + A1 + Y1 * A2"
+    # sample dataframe
+    df = pd.DataFrame()
+    df["L1"] = np.random.normal(0, size=n)
+    df["A1"] = [0, 1] * int(n / 2)
+    df["A2"] = [0] * int(n / 2) + [1] * int(n / 2)
+    df["Y1"] = df["L1"] * df["A1"] + np.random.normal(0, scale=5, size=n)
+    df["Y2"] = df["A1"] + df["Y1"] * df["A2"] + np.random.normal(0, scale=5, size=n)
+    # set model info
+    model_info = [
+        {
+            "model": model1,
+            "action_dict": {"A1": [0, 1]},
+            "feature": ["L1", "A1"],
+            "outcome": "Y1"
+        },
+        {
+            "model": model2,
+            "action_dict": {"A1": [0, 1], "A2": [0, 1]},
+            "feature": ["L1", "A1", "Y1", "A2"],
+            "outcome": "Y2"
+        }
+    ]
+    # fit bootstrap model
+    dtr_model = IqLearnReg(
+        n_stages=2,
+        model_info=model_info,
+        n_bs=10
+    )
+    dtr_model.fit(df)
+    # get params
+    params = dtr_model.get_params()
+    l1_unique_shape = params.query("stage == 0 & variable == 'L1'")["value"].unique().shape[0]
+    a1_unique_shape = params.query("stage == 0 & variable == 'A1'")["value"].unique().shape[0]
+    a2_unique_shape = params.query("stage == 1 & variable == 'A2'")["value"].unique().shape[0]
+    assert l1_unique_shape != 1 or a1_unique_shape != 1 or a2_unique_shape != 1
+    assert len(dtr_model.models[0]) == 10
