diff --git a/README.md b/README.md
index 0210681..76d80b4 100644
--- a/README.md
+++ b/README.md
@@ -15,7 +15,7 @@ Pydtr enables you to implement DTR methods easily by using sklearn-based interfa
 
 |                Method                 |  Single binary treatment   |  Multiple treatments  |    Multinomial treatment   |  Continuous Treatment  |
 | ---- | ---- | ---- | ---- | ---- |
-|  IqLearnReg <br> (with sklearn)      |  :white_check_mark:   |   :white_check_mark:  |   :white_check_mark: <br>(with ordinal encoded treatment)  |
+|  IqLearnReg <br> (with sklearn)      |  :white_check_mark:   |   :white_check_mark:  |   :white_check_mark: <br>(with pipeline)  |
 |  IqLearnReg <br> (with statsmodels)  |  :white_check_mark:   |   :white_check_mark:  |   :white_check_mark:       |
 | GEstimation | WIP | | WIP | WIP |
 
@@ -25,21 +25,37 @@ When a treatment variable is multinomial and you use a sklearn model as a regres
 
 G-estimation, a famous method of DTR, is now unavailable.
 
-## Requirement
+## Requirements
 
-- python (>= 3.6)
-- pip
+- python>=3.6
+- pandas>=1.1.2
+- scikit-learn>=0.23.2
+- numpy>=1.19.2
+- statsmodels>=0.12.0
 
-## Install
+## Installation
 
-`pip install pydtr`
+### From pypi
+
+```
+pip install pydtr
+```
+
+### From source
+
+```
+git clone https://github.com/fullflu/pydtr.git
+cd pydtr
+python setup.py install
+```
 
 ## Usage
 
 ### Iterative Q Learning (IqLearnReg)
 
 You need to import libraries and prepare data.
-```
+
+```python
 # import
 import numpy as np
 import pandas as pd
@@ -59,7 +75,8 @@ df["Y2"] = np.zeros(n)
 ```
 
 You can use sklearn-based models.
-```
+
+```python
 # set model info
 model_info = [
     {
@@ -89,7 +106,8 @@ opt_action_all_stages = dtr_model.predict_all_stages(df)
 ```
 
 You can also use statsmodels-based models.
-```
+
+```python
 # set model info
 model_info = [
     {
@@ -160,4 +178,4 @@ If all checkes have passed in pull-requests, I will merge and release them.
 
 ## References
 
-- Chakraborty, Bibhas. *Statistical methods for dynamic treatment regimes.* Springer, 2013.
+- Chakraborty, B, Moodie, EE. *Statistical Methods for Dynamic Treatment Regimes.* Springer, New York, 2013.
diff --git a/src/pydtr/iqlearn/base.py b/src/pydtr/iqlearn/base.py
index 52ca6e7..d08901d 100644
--- a/src/pydtr/iqlearn/base.py
+++ b/src/pydtr/iqlearn/base.py
@@ -6,7 +6,6 @@ from abc import ABCMeta, abstractmethod
 import pandas as pd
 import numpy as np
 from sklearn.utils import resample
-from sklearn.utils.estimator_checks import check_estimator
 
 
 class IqLearnBase(object):
@@ -103,10 +102,6 @@ class IqLearnBase(object):
             size_bs = df.shape[0]
         return resample(df, n_samples=size_bs)
 
-    @staticmethod
-    def _check_model_type(model):
-        assert type(model) == str or check_estimator(model)
-
     def fit(self, df: pd.DataFrame):
         """
         Fit dtr models
@@ -136,16 +131,15 @@ class IqLearnBase(object):
         # fit models using bootstrap
         for i in range(self.n_bs):
             df_i = self._sample_bs(df)
-            print("{}th bootstrap".format(i))
             for t in reversed(range(self.n_stages)):
                 # extract feature and outcome
-                X = df[self.model_info[t]["feature"]]
-                y = df[self.model_info[t]["outcome"]]
+                X = df_i[self.model_info[t]["feature"]]
+                y = df_i[self.model_info[t]["outcome"]]
                 if t == self.n_stages - 1:
                     p_outcome = y.values
                 else:
-                    X2 = df[self.model_info[t + 1]["feature"]]
-                    y2 = df[self.model_info[t + 1]["outcome"]]
+                    X2 = df_i[self.model_info[t + 1]["feature"]]
+                    y2 = df_i[self.model_info[t + 1]["outcome"]]
                     p_outcome = self._get_p_outcome(self.model_all[t + 1], X2, y2, t)
                 # fit model of stage t
                 self._fit_model(X, p_outcome, t, i)
@@ -172,9 +166,9 @@ class IqLearnBase(object):
     def get_params(self) -> pd.DataFrame:
         # get estimated parameters
         params = pd.DataFrame()
-        for t, m in enumerate(self.models[:-1]):
+        for t in reversed(range(self.n_stages)):
             if type(self.model_info[t]["model"]) == str:
-                tmp_df = pd.melt(pd.DataFrame([i.params for i in m]))
+                tmp_df = pd.melt(pd.DataFrame([i.params for i in self.models[t]]))
                 tmp_df["stage"] = t
                 params = pd.concat([params, tmp_df])
         return params
diff --git a/src/pydtr/version.py b/src/pydtr/version.py
index f102a9c..3b93d0b 100644
--- a/src/pydtr/version.py
+++ b/src/pydtr/version.py
@@ -1,1 +1,1 @@
-__version__ = "0.0.1"
+__version__ = "0.0.2"
