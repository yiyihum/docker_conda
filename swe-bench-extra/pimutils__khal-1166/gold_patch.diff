diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 7021c0c..8b8d2ef 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -20,6 +20,7 @@ not released
   anymore
 * NEW the `configure` command can now set up vdirsyncer
 * NEW better error message for misuses of `at` and `list`
+* NEW `discover` collection type now supports `**` (arbitrary depths)
 
 0.10.5
 ======
diff --git a/khal/settings/khal.spec b/khal/settings/khal.spec
index 85c93df..be60a07 100644
--- a/khal/settings/khal.spec
+++ b/khal/settings/khal.spec
@@ -10,6 +10,7 @@
 # The path to an existing directory where this calendar is saved as a *vdir*.
 # The directory is searched for events or birthdays (see ``type``). The path
 # also accepts glob expansion via `*` or `?` when type is set to discover.
+# `**` means arbitrary depths of directories.
 # This allows for paths such as `~/accounts/*/calendars/*`, where the
 # calendars directory contains vdir directories. In addition, `~/calendars/*`
 # and `~/calendars/default` are valid paths if there exists a vdir in the
diff --git a/khal/settings/utils.py b/khal/settings/utils.py
index bd1281a..f01c26f 100644
--- a/khal/settings/utils.py
+++ b/khal/settings/utils.py
@@ -24,6 +24,7 @@ import datetime as dt
 import glob
 import logging
 import os
+import pathlib
 from os.path import expanduser, expandvars, join
 from typing import Callable, Iterable, Literal, Optional, Union
 
@@ -189,12 +190,25 @@ def get_unique_name(path: str, names: Iterable[str]) -> str:
     return name
 
 
-def get_all_vdirs(path: str) -> Iterable[str]:
+def get_all_vdirs(expand_path: str) -> Iterable[str]:
     """returns a list of paths, expanded using glob
     """
-    # FIXME currently returns a list of all files in path
-    items = glob.glob(path)
-    return items
+    # FIXME currently returns a list of all directories in path
+    # we add an additional / at the end to make sure we are only getting
+    # directories
+    items = glob.glob(f'{expand_path}/', recursive=True)
+    paths = [pathlib.Path(item) for item in sorted(items, key=len, reverse=True)]
+    leaves = set()
+    parents = set()
+    for path in paths:
+        if path in parents:
+            # we have already seen the current directory as the parent of
+            # another directory, so this directory can't be a vdir
+            continue
+        parents.add(path.parent)
+        leaves.add(path)
+    # sort to make sure that auto generated names are always identical
+    return sorted(os.fspath(path) for path in leaves)
 
 
 def get_vdir_type(_: str) -> str:
