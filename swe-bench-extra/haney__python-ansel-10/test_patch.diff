diff --git a/tests/test_codec.py b/tests/test_codec.py
index e313bc6..c0de0e4 100644
--- a/tests/test_codec.py
+++ b/tests/test_codec.py
@@ -11,6 +11,7 @@ class Codec(ansel.codec.Codec):
     decode_char_map = {ord(b"a"): "1", ord(b"b"): "23"}
     encode_modifier_map = {"n": b"5", "o": b"67"}
     decode_modifier_map = {ord(b"n"): "5", ord(b"o"): "67"}
+    decode_control_map = {ord(b"\n"): "8", ord(b"\t"): "9A"}
 
 
 @pytest.mark.parametrize(
@@ -93,9 +94,9 @@ def test_decode_valid(input, expected, expected_len):
 @pytest.mark.parametrize(
     "input, expected, expected_len",
     [
-        (b"n", "5", 1),
-        (b"an", "15", 2),
-        (b"bn", "235", 2),
+        (b"n", " 5", 1),
+        (b"an", "1 5", 2),
+        (b"bn", "23 5", 2),
         (b"na", "15", 2),
         (b"naa", "151", 3),
         (b"noa", "1675", 3),
@@ -109,6 +110,36 @@ def test_decode_valid_with_modifiers(input, expected, expected_len):
     assert expected_len == output_len
 
 
+@pytest.mark.parametrize(
+    "input, expected, expected_len",
+    [(b"\n", "8", 1), (b"\t", "9A", 1), (b"\n\t", "89A", 2)],
+)
+def test_decode_valid_with_control(input, expected, expected_len):
+    codec = Codec()
+    output, output_len = codec.decode(input)
+    assert expected == output
+    assert expected_len == output_len
+
+
+@pytest.mark.parametrize(
+    "input, expected, expected_len",
+    [
+        (b"n", " 5", 1),
+        (b"\nn", "8 5", 2),
+        (b"\tn", "9A 5", 2),
+        (b"n\n", " 58", 2),
+        (b"n\n\n", " 588", 3),
+        (b"no\n", " 6758", 3),
+        (b"on\t", " 5679A", 3),
+    ],
+)
+def test_decode_valid_with_control_and_modifiers(input, expected, expected_len):
+    codec = Codec()
+    output, output_len = codec.decode(input)
+    assert expected == output
+    assert expected_len == output_len
+
+
 @pytest.mark.parametrize(
     "input, start, end, reason",
     [
diff --git a/tests/test_incremental.py b/tests/test_incremental.py
index ff45362..2129582 100644
--- a/tests/test_incremental.py
+++ b/tests/test_incremental.py
@@ -11,6 +11,7 @@ class IncrementalDecoder(ansel.incremental.IncrementalDecoder):
     decode_char_map = {ord(b"a"): "1", ord(b"b"): "23"}
     encode_modifier_map = {"n": b"5", "o": b"67"}
     decode_modifier_map = {ord(b"n"): "5", ord(b"o"): "67"}
+    decode_control_map = {ord(b"\n"): "8", ord(b"\t"): "9A"}
 
 
 class IncrementalEncoder(ansel.incremental.IncrementalEncoder):
@@ -201,6 +202,8 @@ def test_decode_valid(input, expected, expected_len):
         [b"an", b"nb"],
         [b"a", b"n", b"n", b"b"],
         [b"n", b"o"],
+        [b"a", b"n", b"\n"],
+        [b"b", b"o", b"\t", b"a"],
     ],
 )
 def test_decode_incremental(partials):
@@ -214,9 +217,9 @@ def test_decode_incremental(partials):
 @pytest.mark.parametrize(
     "input, expected, expected_len",
     [
-        (b"n", "5", 1),
-        (b"an", "15", 2),
-        (b"bn", "235", 2),
+        (b"n", " 5", 1),
+        (b"an", "1 5", 2),
+        (b"bn", "23 5", 2),
         (b"na", "15", 2),
         (b"naa", "151", 3),
         (b"noa", "1675", 3),
@@ -230,6 +233,36 @@ def test_decode_valid_with_modifiers(input, expected, expected_len):
     assert (b"", 0) == decoder.getstate()
 
 
+@pytest.mark.parametrize(
+    "input, expected, expected_len",
+    [(b"\n", "8", 1), (b"\t", "9A", 1), (b"\n\t", "89A", 2)],
+)
+def test_decode_valid_with_control(input, expected, expected_len):
+    decoder = IncrementalDecoder()
+    output = decoder.decode(input)
+    assert expected == output
+    assert (b"", 0) == decoder.getstate()
+
+
+@pytest.mark.parametrize(
+    "input, expected, expected_len",
+    [
+        (b"n", " 5", 1),
+        (b"\nn", "8 5", 2),
+        (b"\tn", "9A 5", 2),
+        (b"n\n", " 58", 2),
+        (b"n\n\n", " 588", 3),
+        (b"no\n", " 6758", 3),
+        (b"on\t", " 5679A", 3),
+    ],
+)
+def test_decode_valid_with_control_modifiers(input, expected, expected_len):
+    decoder = IncrementalDecoder()
+    output = decoder.decode(input, final=True)
+    assert expected == output
+    assert (b"", 0) == decoder.getstate()
+
+
 @pytest.mark.parametrize(
     "input, start, end, reason",
     [
