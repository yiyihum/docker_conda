diff --git a/test/test_mount.py b/test/test_mount.py
index 582c087..1fbef40 100644
--- a/test/test_mount.py
+++ b/test/test_mount.py
@@ -6,12 +6,17 @@ class TestAppMounting(ServerTestBase):
     def setUp(self):
         ServerTestBase.setUp(self)
         self.subapp = bottle.Bottle()
-        @self.subapp.route('')
+
         @self.subapp.route('/')
-        @self.subapp.route('/test/:test')
+        @self.subapp.route('/test/<test>')
         def test(test='foo'):
             return test
 
+    def test_mount_unicode_path_bug602(self):
+        self.app.mount('/mount/', self.subapp)
+        self.assertBody('äöü', '/mount/test/äöü')
+        self.app.route('/route/<param>', callback=lambda param: param)
+        self.assertBody('äöü', '/route/äöü')
 
     def test_mount_order_bug581(self):
         self.app.mount('/test/', self.subapp)
diff --git a/test/test_sendfile.py b/test/test_sendfile.py
index 622d992..d6693c2 100755
--- a/test/test_sendfile.py
+++ b/test/test_sendfile.py
@@ -142,3 +142,13 @@ class TestSendFile(unittest.TestCase):
         self.assertEqual([(10, 100)], r('bytes=10-'))
         self.assertEqual([(5, 11)],  r('bytes=5-10'))
         self.assertEqual([(10, 100), (90, 100), (5, 11)],  r('bytes=10-,-10,5-10'))
+
+    def test_custom_headers(self):
+        """ SendFile: Custom headers """
+        headers = {'X-Custom-Header': 'test-value'}
+        headers_orig = headers.copy()
+        res = static_file(basename, root=root, headers=headers)
+        self.assertTrue('X-Custom-Header' in res.headers)
+        self.assertEqual('test-value', res.headers['X-Custom-Header'])
+        # Check the passed in headers dict isn't modified.
+        self.assertEqual(headers_orig, headers)
diff --git a/test/test_server.py b/test/test_server.py
index 0a48e41..b7732e0 100644
--- a/test/test_server.py
+++ b/test/test_server.py
@@ -53,13 +53,13 @@ class TestServer(unittest.TestCase):
             rv = self.p.poll()
             if rv is None:
                 raise AssertionError("Server took too long to start up.")
-            if rv is 128: # Import error
+            if rv == 128: # Import error
                 if os.environ.get('CI') != 'true' or \
                         os.environ.get('TRAVIS_PYTHON_VERSION') not in ('2.7', '3.6'):
                     tools.warn("Skipping %r test (ImportError)." % self.server)
                     self.skip = True
                     return
-            if rv is 3: # Port in use
+            if rv == 3: # Port in use
                 continue
             raise AssertionError("Server exited with error code %d" % rv)
         raise AssertionError("Could not find a free port to test server.")
