diff --git a/apiron/client.py b/apiron/client.py
index 8070302..333e30b 100644
--- a/apiron/client.py
+++ b/apiron/client.py
@@ -1,6 +1,7 @@
 import collections
 import logging
 import random
+import warnings
 from urllib import parse
 
 import requests
@@ -108,10 +109,20 @@ class ServiceCaller:
         headers=None,
         cookies=None,
         auth=None,
+        **kwargs
     ):
         host = cls.choose_host(service=service)
 
+        if path_kwargs:
+            warnings.warn(
+                'path_kwargs is no longer necessary and will be removed in a future version of apiron. '
+                'You can call endpoints using plain keyword arguments instead!',
+                RuntimeWarning,
+                stacklevel=4
+            )
+
         path_kwargs = path_kwargs or {}
+        path_kwargs.update(**kwargs)
         path = endpoint.get_formatted_path(**path_kwargs)
 
         merged_params = endpoint.get_merged_params(params)
@@ -148,6 +159,7 @@ class ServiceCaller:
         retry_spec=DEFAULT_RETRY,
         timeout_spec=DEFAULT_TIMEOUT,
         logger=None,
+        **kwargs
     ):
         """
         :param Service service:
@@ -240,6 +252,7 @@ class ServiceCaller:
             headers=headers,
             cookies=cookies,
             auth=auth,
+            **kwargs
         )
 
         logger.info('{method} {url}'.format(
diff --git a/apiron/endpoint/endpoint.py b/apiron/endpoint/endpoint.py
index 9dc84be..26c4df6 100644
--- a/apiron/endpoint/endpoint.py
+++ b/apiron/endpoint/endpoint.py
@@ -1,4 +1,5 @@
 import logging
+import string
 import warnings
 
 from apiron.exceptions import UnfulfilledParameterException
@@ -85,8 +86,38 @@ class Endpoint:
         :rtype:
             str
         """
+        self._validate_path_placeholders(self.path_placeholders, kwargs)
+
         return self.path.format(**kwargs)
 
+    @property
+    def path_placeholders(self):
+        """
+        The formattable placeholders from this endpoint's path, in the order they appear.
+
+        Example:
+
+            >>> endpoint = Endpoint(path='/api/{foo}/{bar}')
+            >>> endpoint.path_placeholders
+            ['foo', 'bar']
+        """
+
+        parser = string.Formatter()
+        return [
+            placeholder_name
+            for _, placeholder_name, _, _ in parser.parse(self.path)
+            if placeholder_name
+        ]
+
+    def _validate_path_placeholders(self, placeholder_names, path_kwargs):
+        if any(path_kwarg not in placeholder_names for path_kwarg in path_kwargs):
+            warnings.warn(
+                'An unknown path kwarg was supplied to {}. '
+                'kwargs supplied: {}'.format(self, path_kwargs),
+                RuntimeWarning,
+                stacklevel=6,
+            )
+
     def get_merged_params(self, supplied_params=None):
         """
         Merge this endpoint's default parameters with the supplied parameters
@@ -116,7 +147,7 @@ class Endpoint:
                     empty_params=empty_params,
                 ),
                 RuntimeWarning,
-                stacklevel=4,
+                stacklevel=5,
             )
 
         unfulfilled_params = {
