diff --git a/tests/test_core.py b/tests/test_core.py
index daf0f59..349c58b 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -13,7 +13,6 @@ from IPython.terminal.embed import InteractiveShellEmbed
 
 from dotenv import dotenv_values, find_dotenv, load_dotenv, set_key
 from dotenv.compat import PY2, StringIO
-from dotenv.main import Binding, parse_stream
 
 
 @contextlib.contextmanager
@@ -26,81 +25,6 @@ def restore_os_environ():
         os.environ.update(environ)
 
 
-@pytest.mark.parametrize("test_input,expected", [
-    ("", []),
-    ("a=b", [Binding(key="a", value="b", original="a=b")]),
-    ("'a'=b", [Binding(key="'a'", value="b", original="'a'=b")]),
-    ("[=b", [Binding(key="[", value="b", original="[=b")]),
-    (" a = b ", [Binding(key="a", value="b", original=" a = b ")]),
-    ("export a=b", [Binding(key="a", value="b", original="export a=b")]),
-    (" export 'a'=b", [Binding(key="'a'", value="b", original=" export 'a'=b")]),
-    (" export 'a'=b", [Binding(key="'a'", value="b", original=" export 'a'=b")]),
-    ("# a=b", [Binding(key=None, value=None, original="# a=b")]),
-    ('a=b # comment', [Binding(key="a", value="b", original="a=b # comment")]),
-    ("a=b space ", [Binding(key="a", value="b space", original="a=b space ")]),
-    ("a='b space '", [Binding(key="a", value="b space ", original="a='b space '")]),
-    ('a="b space "', [Binding(key="a", value="b space ", original='a="b space "')]),
-    ("export export_a=1", [Binding(key="export_a", value="1", original="export export_a=1")]),
-    ("export port=8000", [Binding(key="port", value="8000", original="export port=8000")]),
-    ('a="b\nc"', [Binding(key="a", value="b\nc", original='a="b\nc"')]),
-    ("a='b\nc'", [Binding(key="a", value="b\nc", original="a='b\nc'")]),
-    ('a="b\nc"', [Binding(key="a", value="b\nc", original='a="b\nc"')]),
-    ('a="b\\nc"', [Binding(key="a", value='b\nc', original='a="b\\nc"')]),
-    ('a="b\\"c"', [Binding(key="a", value='b"c', original='a="b\\"c"')]),
-    ("a='b\\'c'", [Binding(key="a", value="b'c", original="a='b\\'c'")]),
-    ("a=à", [Binding(key="a", value="à", original="a=à")]),
-    ('a="à"', [Binding(key="a", value="à", original='a="à"')]),
-    ('garbage', [Binding(key=None, value=None, original="garbage")]),
-    (
-        "a=b\nc=d",
-        [
-            Binding(key="a", value="b", original="a=b\n"),
-            Binding(key="c", value="d", original="c=d"),
-        ],
-    ),
-    (
-        "a=b\r\nc=d",
-        [
-            Binding(key="a", value="b", original="a=b\r\n"),
-            Binding(key="c", value="d", original="c=d"),
-        ],
-    ),
-    (
-        'a=\nb=c',
-        [
-            Binding(key="a", value='', original='a=\n'),
-            Binding(key="b", value='c', original="b=c"),
-        ]
-    ),
-    (
-        'a="\nb=c',
-        [
-            Binding(key="a", value='"', original='a="\n'),
-            Binding(key="b", value='c', original="b=c"),
-        ]
-    ),
-    (
-        '# comment\na="b\nc"\nd=e\n',
-        [
-            Binding(key=None, value=None, original="# comment\n"),
-            Binding(key="a", value="b\nc", original='a="b\nc"\n'),
-            Binding(key="d", value="e", original="d=e\n"),
-        ],
-    ),
-    (
-        'garbage[%$#\na=b',
-        [
-            Binding(key=None, value=None, original="garbage[%$#\n"),
-            Binding(key="a", value="b", original='a=b'),
-        ],
-    ),
-])
-def test_parse_stream(test_input, expected):
-    result = parse_stream(StringIO(test_input))
-
-    assert list(result) == expected
-
-
 def test_warns_if_file_does_not_exist():
     with warnings.catch_warnings(record=True) as w:
         load_dotenv('.does_not_exist', verbose=True)
diff --git a/tests/test_parser.py b/tests/test_parser.py
new file mode 100644
index 0000000..f191f90
--- /dev/null
+++ b/tests/test_parser.py
@@ -0,0 +1,88 @@
+# -*- coding: utf-8 -*-
+import pytest
+
+from dotenv.compat import StringIO
+from dotenv.parser import Binding, parse_stream
+
+
+@pytest.mark.parametrize("test_input,expected", [
+    (u"", []),
+    (u"a=b", [Binding(key=u"a", value=u"b", original=u"a=b")]),
+    (u"'a'=b", [Binding(key=u"a", value=u"b", original=u"'a'=b")]),
+    (u"[=b", [Binding(key=u"[", value=u"b", original=u"[=b")]),
+    (u" a = b ", [Binding(key=u"a", value=u"b", original=u" a = b ")]),
+    (u"export a=b", [Binding(key=u"a", value=u"b", original=u"export a=b")]),
+    (u" export 'a'=b", [Binding(key=u"a", value=u"b", original=u" export 'a'=b")]),
+    (u"# a=b", [Binding(key=None, value=None, original=u"# a=b")]),
+    (u"a=b#c", [Binding(key=u"a", value=u"b#c", original=u"a=b#c")]),
+    (u'a=b # comment', [Binding(key=u"a", value=u"b", original=u"a=b # comment")]),
+    (u"a=b space ", [Binding(key=u"a", value=u"b space", original=u"a=b space ")]),
+    (u"a='b space '", [Binding(key=u"a", value=u"b space ", original=u"a='b space '")]),
+    (u'a="b space "', [Binding(key=u"a", value=u"b space ", original=u'a="b space "')]),
+    (u"export export_a=1", [Binding(key=u"export_a", value=u"1", original=u"export export_a=1")]),
+    (u"export port=8000", [Binding(key=u"port", value=u"8000", original=u"export port=8000")]),
+    (u'a="b\nc"', [Binding(key=u"a", value=u"b\nc", original=u'a="b\nc"')]),
+    (u"a='b\nc'", [Binding(key=u"a", value=u"b\nc", original=u"a='b\nc'")]),
+    (u'a="b\nc"', [Binding(key=u"a", value=u"b\nc", original=u'a="b\nc"')]),
+    (u'a="b\\nc"', [Binding(key=u"a", value=u'b\nc', original=u'a="b\\nc"')]),
+    (u"a='b\\nc'", [Binding(key=u"a", value=u'b\\nc', original=u"a='b\\nc'")]),
+    (u'a="b\\"c"', [Binding(key=u"a", value=u'b"c', original=u'a="b\\"c"')]),
+    (u"a='b\\'c'", [Binding(key=u"a", value=u"b'c", original=u"a='b\\'c'")]),
+    (u"a=à", [Binding(key=u"a", value=u"à", original=u"a=à")]),
+    (u'a="à"', [Binding(key=u"a", value=u"à", original=u'a="à"')]),
+    (u'garbage', [Binding(key=None, value=None, original=u"garbage")]),
+    (
+        u"a=b\nc=d",
+        [
+            Binding(key=u"a", value=u"b", original=u"a=b\n"),
+            Binding(key=u"c", value=u"d", original=u"c=d"),
+        ],
+    ),
+    (
+        u"a=b\r\nc=d",
+        [
+            Binding(key=u"a", value=u"b", original=u"a=b\r\n"),
+            Binding(key=u"c", value=u"d", original=u"c=d"),
+        ],
+    ),
+    (
+        u'a=\nb=c',
+        [
+            Binding(key=u"a", value=u'', original=u'a=\n'),
+            Binding(key=u"b", value=u'c', original=u"b=c"),
+        ]
+    ),
+    (
+        u'a=b\n\nc=d',
+        [
+            Binding(key=u"a", value=u"b", original=u"a=b\n"),
+            Binding(key=u"c", value=u"d", original=u"\nc=d"),
+        ]
+    ),
+    (
+        u'a="\nb=c',
+        [
+            Binding(key=None, value=None, original=u'a="\n'),
+            Binding(key=u"b", value=u"c", original=u"b=c"),
+        ]
+    ),
+    (
+        u'# comment\na="b\nc"\nd=e\n',
+        [
+            Binding(key=None, value=None, original=u"# comment\n"),
+            Binding(key=u"a", value=u"b\nc", original=u'a="b\nc"\n'),
+            Binding(key=u"d", value=u"e", original=u"d=e\n"),
+        ],
+    ),
+    (
+        u'garbage[%$#\na=b',
+        [
+            Binding(key=None, value=None, original=u"garbage[%$#\n"),
+            Binding(key=u"a", value=u"b", original=u'a=b'),
+        ],
+    ),
+])
+def test_parse_stream(test_input, expected):
+    result = parse_stream(StringIO(test_input))
+
+    assert list(result) == expected
