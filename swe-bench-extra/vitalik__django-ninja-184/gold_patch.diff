diff --git a/docs/docs/tutorial/response-schema.md b/docs/docs/tutorial/response-schema.md
index f31ce32..7f1359b 100644
--- a/docs/docs/tutorial/response-schema.md
+++ b/docs/docs/tutorial/response-schema.md
@@ -286,3 +286,21 @@ Organization.update_forward_refs()  # !!! this is important
 def list_organizations(request):
     ...
 ```
+
+## Self-referencing schemes from `create_schema()`
+
+To be able to use the method `update_forward_refs()` from a schema generated via `create_schema()`,
+the "name" of the class needs to be in our namespace.  In this case it is very important to pass
+the `name` parameter to `create_schema()`
+
+```Python hl_lines="3"
+UserSchema = create_schema(
+    User,
+    name='UserSchema',  # !!! this is important for update_forward_refs()  
+    fields=['id', 'username']
+    custom_fields=[
+        ('manager', 'UserSchema', None),
+    ]
+)
+UserSchema.update_forward_refs()
+```
diff --git a/ninja/operation.py b/ninja/operation.py
index 1956a61..f9718af 100644
--- a/ninja/operation.py
+++ b/ninja/operation.py
@@ -94,6 +94,10 @@ class Operation:
             result = self.view_func(request, **values)
             return self._result_to_response(request, result)
         except Exception as e:
+            if isinstance(e, TypeError) and "required positional argument" in str(e):
+                msg = "Did you fail to use functools.wraps() in a decorator?"
+                msg = f"{e.args[0]}: {msg}" if e.args else msg
+                e.args = (msg,) + e.args[1:]
             return self.api.on_exception(request, e)
 
     def set_api_instance(self, api: "NinjaAPI", router: "Router") -> None:
