diff --git a/tests/test_find_command_line_interface.py b/tests/test_find_command_line_interface.py
index a2db94a1..19f35eea 100644
--- a/tests/test_find_command_line_interface.py
+++ b/tests/test_find_command_line_interface.py
@@ -1,12 +1,17 @@
-# Copyright (c) 2017 The Regents of the University of Michigan
+# Copyright (c) 2019 The Regents of the University of Michigan
 # All rights reserved.
 # This software is licensed under the BSD 3-Clause License.
+import io
 import os
+import sys
 import json
 import unittest
 from itertools import chain
+from contextlib import contextmanager
 
+from signac.common import six
 from signac.contrib.filterparse import parse_filter_arg
+from signac.core.json import JSONDecodeError
 
 FILTERS = [
     {'a': 0},
@@ -65,6 +70,29 @@ ARRAY_EXPRESSIONS = [
 ]
 
 
+class StringIO(io.StringIO):
+    "PY27 compatibility layer."
+
+    def write(self, s):
+        if six.PY2:
+            super(StringIO, self).write(unicode(s))  # noqa
+        else:
+            super(StringIO, self).write(s)
+
+
+@contextmanager
+def redirect_stderr(new_target=None):
+    "Temporarily redirect all output to stderr to new_target."
+    if new_target is None:
+        new_target = StringIO()
+    old_target = sys.stderr
+    try:
+        sys.stderr = new_target
+        yield
+    finally:
+        sys.stderr = old_target
+
+
 class FindCommandLineInterfaceTest(unittest.TestCase):
 
     @staticmethod
@@ -92,6 +120,11 @@ class FindCommandLineInterfaceTest(unittest.TestCase):
         for expr in chain(ARITHMETIC_EXPRESSIONS, ARRAY_EXPRESSIONS):
             self.assertEqual(self._parse(['a', json.dumps(expr)]), {'a': expr})
 
+    def test_invalid_json(self):
+        with redirect_stderr():
+            with self.assertRaises(JSONDecodeError):
+                parse_filter_arg(['{"x": True}'])
+
 
 if __name__ == '__main__':
     unittest.main()
