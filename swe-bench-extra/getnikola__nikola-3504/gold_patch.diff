diff --git a/CHANGES.txt b/CHANGES.txt
index 565f272e6..6dcdf0f3a 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -9,6 +9,8 @@ Features
 * Add ``BasePlugin.register_auto_watched_folder()``
 * Allow different ``PANDOC_OPTIONS`` values based on input extensions
   by specifying a dict of ``{".extension": [options]}`` (Issue #3492)
+* Allow boolean/integer ``pretty_url`` post meta values in YAML/TOML
+  (Issue #3503)
 
 Bugfixes
 --------
diff --git a/nikola/post.py b/nikola/post.py
index b58f181ca..795f9d60f 100644
--- a/nikola/post.py
+++ b/nikola/post.py
@@ -54,7 +54,8 @@ from .utils import (
     to_datetime,
     demote_headers,
     get_translation_candidate,
-    map_metadata
+    map_metadata,
+    bool_from_meta,
 )
 
 try:
@@ -427,13 +428,14 @@ class Post(object):
 
     def has_pretty_url(self, lang):
         """Check if this page has a pretty URL."""
-        m = self.meta[lang].get('pretty_url', '')
-        if m:
-            # match is a non-empty string, overides anything
-            return m.lower() == 'true' or m.lower() == 'yes'
-        else:
+        meta_value = bool_from_meta(self.meta[lang], 'pretty_url')
+
+        if meta_value is None:
             # use PRETTY_URLS, unless the slug is 'index'
             return self.pretty_urls and self.meta[lang]['slug'] != 'index'
+        else:
+            # override with meta value
+            return meta_value
 
     def _has_pretty_url(self, lang):
         """Check if this page has a pretty URL."""
@@ -450,13 +452,13 @@ class Post(object):
             return True
         lang = nikola.utils.LocaleBorg().current_lang
         if self.is_translation_available(lang):
-            if self.meta[lang].get('has_math') in ('true', 'True', 'yes', '1', 1, True):
+            if bool_from_meta(self.meta[lang], 'has_math'):
                 return True
             if self.config['USE_TAG_METADATA']:
                 return 'mathjax' in self.tags_for_language(lang)
         # If it has math in ANY other language, enable it. Better inefficient than broken.
         for lang in self.translated_to:
-            if self.meta[lang].get('has_math') in ('true', 'True', 'yes', '1', 1, True):
+            if bool_from_meta(self.meta[lang], 'has_math'):
                 return True
         if self.config['USE_TAG_METADATA']:
             return 'mathjax' in self.alltags
diff --git a/nikola/utils.py b/nikola/utils.py
index 82e99d6bd..54cd36f68 100644
--- a/nikola/utils.py
+++ b/nikola/utils.py
@@ -97,7 +97,7 @@ __all__ = ('CustomEncoder', 'get_theme_path', 'get_theme_path_real',
            'adjust_name_for_index_path', 'adjust_name_for_index_link',
            'NikolaPygmentsHTML', 'create_redirect', 'clean_before_deployment',
            'sort_posts', 'smartjoin', 'indent', 'load_data', 'html_unescape',
-           'rss_writer', 'map_metadata', 'req_missing',
+           'rss_writer', 'map_metadata', 'req_missing', 'bool_from_meta',
            # Deprecated, moved to hierarchy_utils:
            'TreeNode', 'clone_treenode', 'flatten_tree_structure',
            'sort_classifications', 'join_hierarchical_category_path',
@@ -1497,6 +1497,24 @@ def write_metadata(data, metadata_format=None, comment_wrap=False, site=None, co
         return DEFAULT_EXTRACTOR.write_metadata(data, comment_wrap)
 
 
+def bool_from_meta(meta, key, fallback=False, blank=None):
+    """Convert a boolean-ish meta value to a boolean."""
+    value = meta.get(key)
+    if isinstance(value, str):
+        value_lowercase = value.lower().strip()
+        if value_lowercase in {"true", "yes", "1"}:
+            return True
+        elif value_lowercase in {"false", "no", "0"}:
+            return False
+        elif not value_lowercase:
+            return blank
+    elif isinstance(value, int):
+        return bool(value)
+    elif value is None:
+        return blank
+    return fallback
+
+
 def ask(query, default=None):
     """Ask a question."""
     if default:
