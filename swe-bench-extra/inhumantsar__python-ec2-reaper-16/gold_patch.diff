diff --git a/ec2_reaper/aws_lambda.py b/ec2_reaper/aws_lambda.py
index e9fcdd2..ff4f30b 100644
--- a/ec2_reaper/aws_lambda.py
+++ b/ec2_reaper/aws_lambda.py
@@ -25,10 +25,15 @@ TAG_MATCHER = json.loads(TAG_MATCHER) if isinstance(TAG_MATCHER, strclasses) els
 SLACK_ENDPOINT = os.environ.get('SLACK_ENDPOINT', None)
 
 DEBUG = os.environ.get('DEBUG', True)
+log.debug('startup: got value for DEBUG: {} ({})'.format(DEBUG, type(DEBUG)))
+if isinstance(DEBUG, str):
+    DEBUG = False if DEBUG.lower() == 'false' else True
+
 if DEBUG:
     log.setLevel(logging.DEBUG)
     logging.getLogger('botocore').setLevel(logging.INFO)
     logging.getLogger('boto3').setLevel(logging.INFO)
+    log.debug('startup: debug logging on')
 else:
     log.setLevel(logging.INFO)
     logging.getLogger('botocore').setLevel(logging.WARNING)
@@ -42,9 +47,12 @@ class DateTimeJSONEncoder(json.JSONEncoder):
         return json.JSONEncoder.default(self, o)
 
 def _respond(body, error=True, headers=None, status_code=500):
-    o = {'statusCode': status_code, 'body': body}
+    o = {'statusCode': status_code}
     if headers:
         o['headers'] = headers
+
+    # just in case body contains untranslatable datetimes
+    o['body'] = json.loads(json.dumps(body, cls=DateTimeJSONEncoder))
     return o
 
 def _get_expires(launch_time, min_age=MIN_AGE):
