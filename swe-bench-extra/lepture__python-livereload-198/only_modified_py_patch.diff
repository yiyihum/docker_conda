diff --git a/livereload/watcher.py b/livereload/watcher.py
index b0545e6..8ac39ca 100644
--- a/livereload/watcher.py
+++ b/livereload/watcher.py
@@ -23,10 +23,14 @@ logger = logging.getLogger('livereload')
 
 
 class Watcher(object):
-    """A file watcher registery."""
+    """A file watcher registry."""
     def __init__(self):
         self._tasks = {}
-        self._mtimes = {}
+
+        # modification time of filepaths for each task,
+        # before and after checking for changes
+        self._task_mtimes = {}
+        self._new_mtimes = {}
 
         # setting changes
         self._changes = []
@@ -65,6 +69,7 @@ class Watcher(object):
             'func': func,
             'delay': delay,
             'ignore': ignore,
+            'mtimes': {},
         }
 
     def start(self, callback):
@@ -73,7 +78,10 @@ class Watcher(object):
         return False
 
     def examine(self):
-        """Check if there are changes, if true, run the given task."""
+        """Check if there are changes. If so, run the given task.
+
+        Returns a tuple of modified filepath and reload delay.
+        """
         if self._changes:
             return self._changes.pop()
 
@@ -82,6 +90,7 @@ class Watcher(object):
         delays = set()
         for path in self._tasks:
             item = self._tasks[path]
+            self._task_mtimes = item['mtimes']
             if self.is_changed(path, item['ignore']):
                 func = item['func']
                 delay = item['delay']
@@ -102,13 +111,49 @@ class Watcher(object):
         return self.filepath, delay
 
     def is_changed(self, path, ignore=None):
+        """Check if any filepaths have been added, modified, or removed.
+
+        Updates filepath modification times in self._task_mtimes.
+        """
+        self._new_mtimes = {}
+        changed = False
+
         if os.path.isfile(path):
-            return self.is_file_changed(path, ignore)
+            changed = self.is_file_changed(path, ignore)
         elif os.path.isdir(path):
-            return self.is_folder_changed(path, ignore)
-        return self.is_glob_changed(path, ignore)
+            changed = self.is_folder_changed(path, ignore)
+        else:
+            changed = self.is_glob_changed(path, ignore)
+
+        if not changed:
+            changed = self.is_file_removed()
+
+        self._task_mtimes.update(self._new_mtimes)
+        return changed
+
+    def is_file_removed(self):
+        """Check if any filepaths have been removed since last check.
+
+        Deletes removed paths from self._task_mtimes.
+        Sets self.filepath to one of the removed paths.
+        """
+        removed_paths = set(self._task_mtimes) - set(self._new_mtimes)
+        if not removed_paths:
+            return False
+
+        for path in removed_paths:
+            self._task_mtimes.pop(path)
+            # self.filepath seems purely informational, so setting one
+            # of several removed files seems sufficient
+            self.filepath = path
+        return True
 
     def is_file_changed(self, path, ignore=None):
+        """Check if filepath has been added or modified since last check.
+
+        Updates filepath modification times in self._new_mtimes.
+        Sets self.filepath to changed path.
+        """
         if not os.path.isfile(path):
             return False
 
@@ -120,20 +165,21 @@ class Watcher(object):
 
         mtime = os.path.getmtime(path)
 
-        if path not in self._mtimes:
-            self._mtimes[path] = mtime
+        if path not in self._task_mtimes:
+            self._new_mtimes[path] = mtime
             self.filepath = path
             return mtime > self._start
 
-        if self._mtimes[path] != mtime:
-            self._mtimes[path] = mtime
+        if self._task_mtimes[path] != mtime:
+            self._new_mtimes[path] = mtime
             self.filepath = path
             return True
 
-        self._mtimes[path] = mtime
+        self._new_mtimes[path] = mtime
         return False
 
     def is_folder_changed(self, path, ignore=None):
+        """Check if directory path has any changed filepaths."""
         for root, dirs, files in os.walk(path, followlinks=True):
             for d in self.ignored_dirs:
                 if d in dirs:
@@ -145,6 +191,7 @@ class Watcher(object):
         return False
 
     def is_glob_changed(self, path, ignore=None):
+        """Check if glob path has any changed filepaths."""
         for f in glob.glob(path):
             if self.is_file_changed(f, ignore):
                 return True

