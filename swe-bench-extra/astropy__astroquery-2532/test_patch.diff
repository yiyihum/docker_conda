diff --git a/astroquery/sdss/tests/test_sdss.py b/astroquery/sdss/tests/test_sdss.py
index 495dcf71..6f5516a5 100644
--- a/astroquery/sdss/tests/test_sdss.py
+++ b/astroquery/sdss/tests/test_sdss.py
@@ -177,7 +177,7 @@ def test_sdss_spectrum_mjd(patch_request, patch_get_readable_fileobj, dr):
 @pytest.mark.parametrize("dr", dr_list)
 def test_sdss_spectrum_coords(patch_request, patch_get_readable_fileobj, dr,
                               coords=coords):
-    sp = sdss.SDSS.get_spectra(coords, data_release=dr)
+    sp = sdss.SDSS.get_spectra(coordinates=coords, data_release=dr)
     image_tester(sp, 'spectra')
 
 
@@ -220,7 +220,7 @@ def test_sdss_image_run(patch_request, patch_get_readable_fileobj, dr):
 @pytest.mark.parametrize("dr", dr_list)
 def test_sdss_image_coord(patch_request, patch_get_readable_fileobj, dr,
                           coord=coords):
-    img = sdss.SDSS.get_images(coords, data_release=dr)
+    img = sdss.SDSS.get_images(coordinates=coords, data_release=dr)
     image_tester(img, 'images')
 
 
@@ -454,6 +454,63 @@ def test_photoobj_run_camcol_field_payload(patch_request, dr):
     assert query_payload['format'] == 'csv'
 
 
+@pytest.mark.parametrize("dr", dr_list)
+def test_get_spectra_specobj_payload(patch_request, dr):
+    expect = ("SELECT DISTINCT "
+              "s.run2d, s.plate, s.mjd, s.fiberID "
+              "FROM PhotoObjAll AS p "
+              "JOIN SpecObjAll AS s ON p.objID = s.bestObjID "
+              "WHERE "
+              "(s.plate=751 AND s.mjd=52251)")
+    query_payload = sdss.SDSS.get_spectra_async(plate=751, mjd=52251,
+                                                get_query_payload=True,
+                                                data_release=dr)
+    assert query_payload['cmd'] == expect
+    assert query_payload['format'] == 'csv'
+
+
+@pytest.mark.parametrize("dr", dr_list)
+def test_get_spectra_coordinates_payload(patch_request, dr):
+    expect = ("SELECT\r\n"
+              "s.run2d, s.plate, s.mjd, s.fiberID, s.SpecObjID AS obj_id, dbo.fPhotoTypeN(p.type) AS type "
+              "FROM #upload u JOIN #x x ON x.up_id = u.up_id JOIN PhotoObjAll AS p ON p.objID = x.objID "
+              "JOIN SpecObjAll AS s ON p.objID = s.bestObjID "
+              "ORDER BY x.up_id")
+    query_payload = sdss.SDSS.get_spectra_async(coordinates=coords_column,
+                                                get_query_payload=True,
+                                                data_release=dr)
+    assert query_payload['uquery'] == expect
+    assert query_payload['format'] == 'csv'
+    assert query_payload['photoScope'] == 'nearPrim'
+
+
+@pytest.mark.parametrize("dr", dr_list)
+def test_get_images_photoobj_payload(patch_request, dr):
+    expect = ("SELECT DISTINCT "
+              "p.run, p.rerun, p.camcol, p.field "
+              "FROM PhotoObjAll AS p WHERE "
+              "(p.run=5714 AND p.camcol=6 AND p.rerun=301)")
+    query_payload = sdss.SDSS.get_images_async(run=5714, camcol=6,
+                                               get_query_payload=True,
+                                               data_release=dr)
+    assert query_payload['cmd'] == expect
+    assert query_payload['format'] == 'csv'
+
+
+@pytest.mark.parametrize("dr", dr_list)
+def test_get_images_coordinates_payload(patch_request, dr):
+    expect = ("SELECT\r\n"
+              "p.run, p.rerun, p.camcol, p.field, dbo.fPhotoTypeN(p.type) AS type "
+              "FROM #upload u JOIN #x x ON x.up_id = u.up_id JOIN PhotoObjAll AS p ON p.objID = x.objID "
+              "ORDER BY x.up_id")
+    query_payload = sdss.SDSS.get_images_async(coordinates=coords_column,
+                                               get_query_payload=True,
+                                               data_release=dr)
+    assert query_payload['uquery'] == expect
+    assert query_payload['format'] == 'csv'
+    assert query_payload['photoScope'] == 'nearPrim'
+
+
 @pytest.mark.parametrize("dr", dr_list)
 def test_spectra_plate_mjd_payload(patch_request, dr):
     expect = ("SELECT DISTINCT "
diff --git a/astroquery/sdss/tests/test_sdss_remote.py b/astroquery/sdss/tests/test_sdss_remote.py
index eb190cbd..329e94b8 100644
--- a/astroquery/sdss/tests/test_sdss_remote.py
+++ b/astroquery/sdss/tests/test_sdss_remote.py
@@ -63,7 +63,7 @@ class TestSDSSRemote:
         sp = sdss.SDSS.get_spectra(plate=2345, fiberID=572)
 
     def test_sdss_spectrum_coords(self):
-        sp = sdss.SDSS.get_spectra(self.coords)
+        sp = sdss.SDSS.get_spectra(coordinates=self.coords)
 
     def test_sdss_sql(self):
         query = """
@@ -91,7 +91,7 @@ class TestSDSSRemote:
         img = sdss.SDSS.get_images(run=1904, camcol=3, field=164)
 
     def test_sdss_image_coord(self):
-        img = sdss.SDSS.get_images(self.coords)
+        img = sdss.SDSS.get_images(coordinates=self.coords)
 
     def test_sdss_specobj(self):
         colnames = ['ra', 'dec', 'objid', 'run', 'rerun', 'camcol', 'field',
@@ -161,7 +161,7 @@ class TestSDSSRemote:
                                "self._request, fix it before merging #586"))
     def test_spectra_timeout(self):
         with pytest.raises(TimeoutError):
-            sdss.SDSS.get_spectra(self.coords, timeout=self.mintimeout)
+            sdss.SDSS.get_spectra(coordinates=self.coords, timeout=self.mintimeout)
 
     def test_query_non_default_field(self):
         # A regression test for #469
