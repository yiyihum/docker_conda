diff --git a/ispyb/model/test_unitcell.py b/ispyb/model/test_unitcell.py
new file mode 100644
index 0000000..e499ab4
--- /dev/null
+++ b/ispyb/model/test_unitcell.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import, division, print_function
+import ispyb.model.integration
+
+
+def test_value_in_equals_value_out():
+  uc = ispyb.model.integration.UnitCell(10,20,30,40,50,60)
+  assert uc.a == 10
+  assert uc.b == 20
+  assert uc.c == 30
+  assert uc.alpha == 40
+  assert uc.beta == 50
+  assert uc.gamma == 60
diff --git a/tests/conftest.py b/tests/conftest.py
index 6f3fc3f..75a4f92 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import, division, print_function
 
 import os
 
+import ispyb
 import pytest
 
 @pytest.fixture
diff --git a/tests/test_misc.py b/tests/test_misc.py
index 07977e1..522d16f 100644
--- a/tests/test_misc.py
+++ b/tests/test_misc.py
@@ -3,7 +3,10 @@ from __future__ import absolute_import, division, print_function
 import threading
 
 import context
+import ispyb
 import ispyb.exception
+import ispyb.model.__future__
+import mysql.connector.errors
 import pytest
 
 def test_multi_threads_upsert(testconfig):
@@ -42,3 +45,45 @@ def test_retrieve_failure(testconfig):
   with ispyb.open(testconfig) as conn:
     with pytest.raises(ispyb.exception.ISPyBNoResultException):
       rs = conn.mx_acquisition.retrieve_data_collection_main(0)
+
+def test_database_reconnects_on_connection_failure(testconfig, testdb):
+  ispyb.model.__future__.enable(testconfig, section='ispyb_mysql_sp')
+
+  # Create minimal data collection and data collection group for test
+  params = testdb.mx_acquisition.get_data_collection_group_params()
+  params['parentid'] = 55168
+  dcgid = testdb.mx_acquisition.insert_data_collection_group(list(params.values()))
+  assert dcgid, "Could not create dummy data collection group"
+  params = testdb.mx_acquisition.get_data_collection_params()
+  params['parentid'] = dcgid
+  dcid = testdb.mx_acquisition.insert_data_collection(list(params.values()))
+  assert dcid, "Could not create dummy data collection"
+
+  # Test the database connections
+  # This goes from DCID to DCGID using the default connection,
+  # and looks into the GridInfo table using the __future__ connection.
+  assert bool(testdb.get_data_collection(dcid).group.gridinfo) is False
+
+  fconn = ispyb.model.__future__._db
+  iconn = testdb.conn
+
+  # Break both connections from the server side
+  c = iconn.cursor()
+  with pytest.raises(mysql.connector.errors.DatabaseError):
+    c.execute("KILL CONNECTION_ID();")
+  c.close()
+
+  c = fconn.cursor()
+  with pytest.raises(mysql.connector.errors.DatabaseError):
+    c.execute("KILL CONNECTION_ID();")
+  c.close()
+
+  # Confirm both connections are broken
+  with pytest.raises(mysql.connector.errors.OperationalError):
+    iconn.cursor()
+
+  with pytest.raises(mysql.connector.errors.OperationalError):
+    fconn.cursor()
+
+  # Test implicit reconnect
+  assert bool(testdb.get_data_collection(dcid).group.gridinfo) is False
