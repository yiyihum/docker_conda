diff --git a/pynetdicom/dimse.py b/pynetdicom/dimse.py
index caf8a8a38..a92d1c97e 100644
--- a/pynetdicom/dimse.py
+++ b/pynetdicom/dimse.py
@@ -324,6 +324,8 @@ class DIMSEServiceProvider:
             #   Reset the DIMSE message, ready for the next one
             self.message.encoded_command_set = BytesIO()
             self.message.data_set = BytesIO()
+            self.message._data_set_file = None
+            self.message._data_set_path = None
             self.message = None
 
     def send_msg(self, primitive: DimsePrimitiveType, context_id: int) -> None:
diff --git a/pynetdicom/dimse_messages.py b/pynetdicom/dimse_messages.py
index a307cfcd4..76eec93c2 100644
--- a/pynetdicom/dimse_messages.py
+++ b/pynetdicom/dimse_messages.py
@@ -418,9 +418,6 @@ class DIMSEMessage:
             # xxxxxx11 - Command information, the last fragment
             control_header_byte = data[0]
 
-            # LOGGER.debug('Control header byte %s', control_header_byte)
-            # print(f'Control header byte {control_header_byte}')
-
             # COMMAND SET
             # P-DATA fragment contains Command Set information
             #   (control_header_byte is xxxxxx01 or xxxxxx11)
@@ -497,6 +494,7 @@ class DIMSEMessage:
                 #   number of P-DATA primitives.
                 if self._data_set_file:
                     self._data_set_file.write(data[1:])
+                    self._data_set_file.file.flush()
                 else:
                     cast(BytesIO, self.data_set).write(data[1:])
 
diff --git a/pynetdicom/dimse_primitives.py b/pynetdicom/dimse_primitives.py
index daa100bb9..0d9b20e28 100644
--- a/pynetdicom/dimse_primitives.py
+++ b/pynetdicom/dimse_primitives.py
@@ -21,11 +21,13 @@ from pynetdicom.utils import set_ae, decode_bytes, set_uid
 
 
 if TYPE_CHECKING:  # pragma: no cover
+    from io import BufferedWriter
     from typing import Protocol  # Python 3.8+
 
     class NTF(Protocol):
         # Protocol for a NamedTemporaryFile
         name: str
+        file: BufferedWriter
 
         def write(self, data: bytes) -> bytes:
             ...

