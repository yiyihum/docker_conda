diff --git a/.github/workflows/CI_build.yml b/.github/workflows/CI_build.yml
index 560f56f3..5da54c30 100644
--- a/.github/workflows/CI_build.yml
+++ b/.github/workflows/CI_build.yml
@@ -257,16 +257,11 @@ jobs:
         run: |
           export BUILDDIR=$RUNNER_TEMP/matchms/_build/noarch/
           [ "$RUNNING_OS" = "Windows" ] && export BUILDDIR=$RUNNER_TEMP\\matchms\\_build\\noarch\\
-          conda install \
-            --channel bioconda \
-            --channel conda-forge \
-            --channel nlesc \
-            matchms
           # Install matchms without nlesc channel to prevent package to be installed from nlesc channel instead of wanted $BUILDDIR channel
           conda install \
-            --channel bioconda \
+            --channel $BUILDDIR \
             --channel conda-forge \
-            --channel $BUILDDIR -v \
+            --channel bioconda -v \
             matchms
       - name: List conda packages
         shell: bash -l {0}
diff --git a/CHANGELOG.md b/CHANGELOG.md
index d42aaf67..59a1d1ee 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -7,6 +7,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
 
 ## [Unreleased]
 
+### Added
+
+- `save_as_msp()` function to export spectrums to .msp file [#215](https://github.com/matchms/matchms/pull/215)
+
 ## [0.8.2] - 2021-03-08
 
 ### Added
diff --git a/conda/environment-dev.yml b/conda/environment-dev.yml
index 4f1fa6f0..69db070c 100644
--- a/conda/environment-dev.yml
+++ b/conda/environment-dev.yml
@@ -14,4 +14,14 @@ dependencies:
   - rdkit >=2020.03.1
   - scipy >=1.4.0
   - pip:
-    - -e ..[dev]
+    - bump2version
+    - deprecated
+    - lxml
+    - isort>=4.2.5,<5
+    - prospector[with_pyroma]
+    - pytest
+    - pytest-cov
+    - sphinx>=3.0.0,!=3.2.0,!=3.5.0,<4.0.0
+    - sphinx_rtd_theme
+    - sphinxcontrib-apidoc
+    - yapf
diff --git a/matchms/exporting/__init__.py b/matchms/exporting/__init__.py
index cd91b5dc..4de3e38f 100644
--- a/matchms/exporting/__init__.py
+++ b/matchms/exporting/__init__.py
@@ -3,13 +3,15 @@ Functions for exporting mass spectral data
 ##########################################
 
 Individual :meth:`~matchms.Spectrum`, or lists of :meth:`~matchms.Spectrum`
-can be exported to json or mgf files.
+can be exported to json, mgf, or msp files.
 """
 from .save_as_json import save_as_json
 from .save_as_mgf import save_as_mgf
+from .save_as_msp import save_as_msp
 
 
 __all__ = [
     "save_as_json",
     "save_as_mgf",
+    "save_as_msp",
 ]
diff --git a/matchms/exporting/save_as_msp.py b/matchms/exporting/save_as_msp.py
new file mode 100644
index 00000000..a440705e
--- /dev/null
+++ b/matchms/exporting/save_as_msp.py
@@ -0,0 +1,68 @@
+import os
+from typing import IO
+from typing import List
+from ..Spectrum import Spectrum
+from ..Spikes import Spikes
+
+
+def save_as_msp(spectra: List[Spectrum], filename: str):
+    """Save spectrum(s) as msp file.
+
+    :py:attr:`~matchms.Spectrum.losses` of spectrum will not be saved.
+
+    Example:
+
+    .. code-block:: python
+
+        import numpy
+        from matchms import Spectrum
+        from matchms.exporting import save_as_msp
+
+        # Create dummy spectrum
+        spectrum = Spectrum(mz=numpy.array([100, 200, 300], dtype="float"),
+                            intensities=numpy.array([10, 10, 500], dtype="float"),
+                            metadata={"charge": -1,
+                                      "inchi": '"InChI=1S/C6H12"',
+                                      "precursor_mz": 222.2})
+
+        # Write spectrum to test file
+        save_as_msp(spectrum, "test.msp")
+
+    Parameters
+    ----------
+    spectra:
+        Expected input are match.Spectrum.Spectrum() objects.
+    filename:
+        Provide filename to save spectrum(s).
+    """
+
+    assert filename.endswith('.msp'), "File extension must be 'msp'."
+
+    spectra = ensure_list(spectra)
+
+    with open(filename, 'w') as outfile:
+        for spectrum in spectra:
+            write_spectrum(spectrum, outfile)
+
+
+def write_spectrum(spectrum: Spectrum, outfile: IO):
+    write_metadata(spectrum.metadata, outfile)
+    write_peaks(spectrum.peaks, outfile)
+    outfile.write(os.linesep)
+
+
+def write_peaks(peaks: Spikes, outfile: IO):
+    for mz, intensity in zip(peaks.mz, peaks.intensities):
+        outfile.write('%s\t%s\n' % (str(mz), str(intensity)))
+
+
+def write_metadata(metadata: dict, outfile: IO):
+    for key, value in metadata.items():
+        outfile.write('%s: %s\n' % (key.upper(), str(value)))
+
+
+def ensure_list(spectra) -> List[Spectrum]:
+    if not isinstance(spectra, list):
+        # Assume that input was single Spectrum
+        spectra = [spectra]
+    return spectra
