diff --git a/src/psyclone/tests/psyir/frontend/fparser2_derived_type_test.py b/src/psyclone/tests/psyir/frontend/fparser2_derived_type_test.py
index 45295197a..b89c509e3 100644
--- a/src/psyclone/tests/psyir/frontend/fparser2_derived_type_test.py
+++ b/src/psyclone/tests/psyir/frontend/fparser2_derived_type_test.py
@@ -154,8 +154,10 @@ def test_name_clash_derived_type_def(f2008_parser):
 
 @pytest.mark.usefixtures("f2008_parser")
 @pytest.mark.parametrize("use_stmt", ["use grid_mod, only: grid_type",
+                                      "use grid_mod, only: GRID_TYPE",
                                       "use grid_mod"])
-def test_parse_derived_type(use_stmt):
+@pytest.mark.parametrize("type_name", ["GRID_TYPE", "grid_type"])
+def test_parse_derived_type(use_stmt, type_name):
     ''' Check that the fronted correctly creates a TypeSymbol of type
     StructureType from the declaration of a derived type. '''
     fake_parent = KernelSchedule("dummy_schedule")
@@ -164,10 +166,11 @@ def test_parse_derived_type(use_stmt):
     reader = FortranStringReader("{0}\n"
                                  "type :: my_type\n"
                                  "  integer :: flag\n"
-                                 "  type(grid_type), private :: grid\n"
+                                 "  type({1}), private :: grid\n"
                                  "  real, dimension(3) :: posn\n"
                                  "end type my_type\n"
-                                 "type(my_type) :: var\n".format(use_stmt))
+                                 "type(my_type) :: var\n".format(use_stmt,
+                                                                 type_name))
     fparser2spec = Fortran2003.Specification_Part(reader)
     processor.process_declarations(fake_parent, fparser2spec.content, [])
     sym = symtab.lookup("my_type")
diff --git a/src/psyclone/tests/psyir/symbols/symboltable_test.py b/src/psyclone/tests/psyir/symbols/symboltable_test.py
index 72b21fd8a..4fde3e0ff 100644
--- a/src/psyclone/tests/psyir/symbols/symboltable_test.py
+++ b/src/psyclone/tests/psyir/symbols/symboltable_test.py
@@ -490,8 +490,9 @@ def test_swap_symbol():
     assert ("Cannot swap symbols that have different names, got: 'var1' and "
             "'var2'" in str(err.value))
     # Finally, check that the method correctly adds the new symbol to the
-    # table and removes the old one.
-    symbol3 = DataSymbol("var1", REAL_TYPE)
+    # table and removes the old one (even if the case of the name of the
+    # new symbol differs from the original).
+    symbol3 = DataSymbol("Var1", REAL_TYPE)
     sym_table.swap(symbol1, symbol3)
     assert sym_table.lookup("var1") is symbol3
     assert symbol1 not in sym_table._symbols
@@ -536,7 +537,9 @@ def test_swap_symbol_properties():
         sym_table.swap_symbol_properties(symbol1, symbol4)
     assert "Symbol 'var2' is not in the symbol table." in str(excinfo.value)
 
-    # Raise exception if both symbols have the same name
+    # Raise exception if both symbols have the same name. The only way this
+    # can currently occur is if they are the same symbol (as the normalised
+    # symbol name is used as the key in the symbol table).
     with pytest.raises(ValueError) as excinfo:
         sym_table.swap_symbol_properties(symbol1, symbol1)
     assert("The symbols should have different names, but found 'var1' for "
