diff --git a/tests/func/machine/test_machine_status.py b/tests/func/machine/test_machine_status.py
--- a/tests/func/machine/test_machine_status.py
+++ b/tests/func/machine/test_machine_status.py
@@ -8,6 +8,7 @@ def test_status(
     status = machine_instance
     assert main(["machine", "status", "foo"]) == 0
     cap = capsys.readouterr()
-    assert "instance_num_1:" in cap.out
+    assert "machine 'foo':\n" in cap.out
+    assert "\tinstance_num_1:\n" in cap.out
     for key in CmdMachineStatus.SHOWN_FIELD:
-        assert f"\t{key:20}: {status[key]}" in cap.out
+        assert f"\t\t{key:20}: {status[key]}\n" in cap.out
diff --git a/tests/unit/command/test_machine.py b/tests/unit/command/test_machine.py
--- a/tests/unit/command/test_machine.py
+++ b/tests/unit/command/test_machine.py
@@ -1,4 +1,5 @@
 import configobj
+from mock import call
 
 from dvc.cli import parse_args
 from dvc.command.machine import (
@@ -19,6 +20,8 @@
             "[feature]\n"
             "  machine = true\n"
             "['machine \"foo\"']\n"
+            "  cloud = aws\n"
+            "['machine \"myaws\"']\n"
             "  cloud = aws"
         )
     }
@@ -42,7 +45,7 @@ def test_remove(tmp_dir):
     cmd = cli_args.func(cli_args)
     assert cmd.run() == 0
     config = configobj.ConfigObj(str(tmp_dir / ".dvc" / "config"))
-    assert list(config.keys()) == ["feature"]
+    assert list(config.keys()) == ["feature", 'machine "myaws"']
 
 
 def test_create(tmp_dir, dvc, mocker):
@@ -58,7 +61,8 @@ def test_create(tmp_dir, dvc, mocker):
     m.assert_called_once_with("foo")
 
 
-def test_status(tmp_dir, dvc, mocker):
+def test_status(tmp_dir, scm, dvc, mocker):
+    tmp_dir.gen(DATA)
     cli_args = parse_args(["machine", "status", "foo"])
     assert cli_args.func == CmdMachineStatus
 
@@ -66,10 +70,18 @@ def test_status(tmp_dir, dvc, mocker):
     m = mocker.patch.object(
         cmd.repo.machine, "status", autospec=True, return_value=[]
     )
-
     assert cmd.run() == 0
     m.assert_called_once_with("foo")
 
+    cli_args = parse_args(["machine", "status"])
+    cmd = cli_args.func(cli_args)
+    m = mocker.patch.object(
+        cmd.repo.machine, "status", autospec=True, return_value=[]
+    )
+    assert cmd.run() == 0
+    assert m.call_count == 2
+    m.assert_has_calls([call("foo"), call("myaws")])
+
 
 def test_destroy(tmp_dir, dvc, mocker):
     cli_args = parse_args(["machine", "destroy", "foo"])
