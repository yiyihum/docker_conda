diff --git a/rebench.conf b/rebench.conf
index a43c60c..6052139 100644
--- a/rebench.conf
+++ b/rebench.conf
@@ -17,7 +17,7 @@ benchmark_suites:
     TestSuite1:
         gauge_adapter: Test
         # location: /Users/...
-        command: TestBenchMarks %(benchmark)s %(input)s %(variable)s
+        command: TestBenchMarks %(benchmark)s %(input)s %(variable)s something-else
         input_sizes: [1, 2, 10, 100, 1000]
         benchmarks:
             - Bench1
@@ -29,7 +29,7 @@ benchmark_suites:
             - val2
     TestSuite2:
         gauge_adapter: Test
-        command: TestBenchMarks %(benchmark)s %(input)s %(variable)s
+        command: TestBenchMarks %(benchmark)s %(input)s %(variable)s another-thing
         input_sizes: [1, 2, 10, 100, 1000]
         cores: [7, 13, 55]
         benchmarks:
diff --git a/rebench/executor.py b/rebench/executor.py
index 2ac7163..5a16273 100644
--- a/rebench/executor.py
+++ b/rebench/executor.py
@@ -508,6 +508,8 @@ class Executor(object):
                        + "{ind}{ind}Return code: %d\n"
                        + "{ind}{ind}max_invocation_time: %s\n") % (
                            return_code, run_id.max_invocation_time)
+            elif return_code is None:
+                msg = "{ind}Run failed. Return code: None\n"
             else:
                 msg = "{ind}Run failed. Return code: %d\n" % return_code
 
diff --git a/rebench/persistence.py b/rebench/persistence.py
index c71426d..081a441 100644
--- a/rebench/persistence.py
+++ b/rebench/persistence.py
@@ -317,12 +317,16 @@ class _FilePersistence(_ConcretePersistence):
         shebang_with_metadata += "# Environment: " + json.dumps(determine_environment()) + "\n"
         shebang_with_metadata += "# Source: " + json.dumps(
             determine_source_details(self._configurator)) + "\n"
-        shebang_with_metadata += self._SEP.join(Measurement.get_column_headers()) + "\n"
+
+        csv_header = self._SEP.join(Measurement.get_column_headers()) + "\n"
 
         try:
             # pylint: disable-next=unspecified-encoding,consider-using-with
             data_file = open(self._data_filename, 'a+')
+            is_empty = data_file.tell() == 0
             data_file.write(shebang_with_metadata)
+            if is_empty:
+                data_file.write(csv_header)
             data_file.flush()
             return data_file
         except Exception as err:  # pylint: disable=broad-except
