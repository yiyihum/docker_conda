diff --git a/traits_futures/asyncio/tests/test_asyncio_event_loop.py b/traits_futures/asyncio/tests/test_asyncio_event_loop.py
index 03f8468..8265ed8 100644
--- a/traits_futures/asyncio/tests/test_asyncio_event_loop.py
+++ b/traits_futures/asyncio/tests/test_asyncio_event_loop.py
@@ -12,7 +12,7 @@
 Tests for the asyncio event loop.
 """
 
-
+import asyncio
 import unittest
 
 from traits_futures.asyncio.event_loop import AsyncioEventLoop
@@ -20,6 +20,35 @@ from traits_futures.tests.i_event_loop_tests import IEventLoopTests
 
 
 class TestAsyncioEventLoop(IEventLoopTests, unittest.TestCase):
+    def event_loop_factory(self):
+        """
+        Factory for the event loop.
+
+        Returns
+        -------
+        event_loop: IEventLoop
+        """
+        asyncio_event_loop = asyncio.new_event_loop()
+        self.addCleanup(asyncio_event_loop.close)
+        return AsyncioEventLoop(event_loop=asyncio_event_loop)
+
+    def test_asyncio_event_loop_closed(self):
+        with self.assertWarns(DeprecationWarning):
+            event_loop = AsyncioEventLoop()
+        # Dig out the underlying asyncio event loop.
+        asyncio_event_loop = event_loop._event_loop
+        self.assertFalse(asyncio_event_loop.is_closed())
+        event_loop.close()
+        self.assertTrue(asyncio_event_loop.is_closed())
 
-    #: Factory for instances of the event loop.
-    event_loop_factory = AsyncioEventLoop
+    def test_creation_from_asyncio_event_loop(self):
+        asyncio_event_loop = asyncio.new_event_loop()
+        event_loop = AsyncioEventLoop(event_loop=asyncio_event_loop)
+        self.assertEqual(event_loop._event_loop, asyncio_event_loop)
+        try:
+            self.assertFalse(asyncio_event_loop.is_closed())
+            # Closing our wrapper shouldn't close the asyncio event loop.
+            event_loop.close()
+            self.assertFalse(asyncio_event_loop.is_closed())
+        finally:
+            asyncio_event_loop.close()
diff --git a/traits_futures/asyncio/tests/test_event_loop_helper.py b/traits_futures/asyncio/tests/test_event_loop_helper.py
index 5c5e3d3..3525223 100644
--- a/traits_futures/asyncio/tests/test_event_loop_helper.py
+++ b/traits_futures/asyncio/tests/test_event_loop_helper.py
@@ -12,6 +12,7 @@
 Tests for the asyncio implementation of IEventLoopHelper.
 """
 
+import asyncio
 import unittest
 
 from traits_futures.asyncio.event_loop import AsyncioEventLoop
@@ -21,6 +22,14 @@ from traits_futures.tests.i_event_loop_helper_tests import (
 
 
 class TestEventLoopHelper(IEventLoopHelperTests, unittest.TestCase):
+    def event_loop_factory(self):
+        """
+        Factory for the event loop.
 
-    #: Zero-parameter callable that creates a suitable IEventLoop instance.
-    event_loop_factory = AsyncioEventLoop
+        Returns
+        -------
+        event_loop: IEventLoop
+        """
+        asyncio_event_loop = asyncio.new_event_loop()
+        self.addCleanup(asyncio_event_loop.close)
+        return AsyncioEventLoop(event_loop=asyncio_event_loop)
diff --git a/traits_futures/asyncio/tests/test_pingee.py b/traits_futures/asyncio/tests/test_pingee.py
index bdfd3cf..302cdb1 100644
--- a/traits_futures/asyncio/tests/test_pingee.py
+++ b/traits_futures/asyncio/tests/test_pingee.py
@@ -12,6 +12,7 @@
 Tests for the asyncio implementations of IPingee and IPinger.
 """
 
+import asyncio
 import unittest
 
 from traits_futures.asyncio.event_loop import AsyncioEventLoop
@@ -20,5 +21,14 @@ from traits_futures.tests.i_pingee_tests import IPingeeTests
 
 
 class TestPingee(TestAssistant, IPingeeTests, unittest.TestCase):
+    def event_loop_factory(self):
+        """
+        Factory for the event loop.
 
-    event_loop_factory = AsyncioEventLoop
+        Returns
+        -------
+        event_loop: IEventLoop
+        """
+        asyncio_event_loop = asyncio.new_event_loop()
+        self.addCleanup(asyncio_event_loop.close)
+        return AsyncioEventLoop(event_loop=asyncio_event_loop)
diff --git a/traits_futures/testing/test_assistant.py b/traits_futures/testing/test_assistant.py
index 97495c5..06af3d4 100644
--- a/traits_futures/testing/test_assistant.py
+++ b/traits_futures/testing/test_assistant.py
@@ -13,6 +13,8 @@ Test support, providing the ability to run the event loop from within tests.
 """
 
 
+import asyncio
+
 from traits.api import Bool, HasStrictTraits
 
 from traits_futures.asyncio.event_loop import AsyncioEventLoop
@@ -44,10 +46,17 @@ class TestAssistant:
     Most of the logic is devolved to a toolkit-specific EventLoopHelper class.
     """
 
-    #: Factory for the event loop. This should be a zero-argument callable
-    #: that provides an IEventLoop instance. Override in subclasses to
-    #: run tests with a particular toolkit.
-    event_loop_factory = AsyncioEventLoop
+    def event_loop_factory(self):
+        """
+        Factory for the event loop.
+
+        Returns
+        -------
+        event_loop: IEventLoop
+        """
+        asyncio_event_loop = asyncio.new_event_loop()
+        self.addCleanup(asyncio_event_loop.close)
+        return AsyncioEventLoop(event_loop=asyncio_event_loop)
 
     def setUp(self):
         self._event_loop = self.event_loop_factory()
