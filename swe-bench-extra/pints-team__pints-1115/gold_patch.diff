diff --git a/pints/_mcmc/__init__.py b/pints/_mcmc/__init__.py
index c6090196..fa5c8853 100644
--- a/pints/_mcmc/__init__.py
+++ b/pints/_mcmc/__init__.py
@@ -418,6 +418,9 @@ class MCMCController(object):
         self._n_workers = 1
         self.set_parallel()
 
+        # :meth:`run` can only be called once
+        self._has_run = False
+
         #
         # Stopping criteria
         #
@@ -507,6 +510,12 @@ class MCMCController(object):
         If storing chains to memory has been disabled with
         :meth:`set_chain_storage`, then ``None`` is returned instead.
         """
+
+        # Can only run once for each controller instance
+        if self._has_run:
+            raise RuntimeError("Controller is valid for single use only")
+        self._has_run = True
+
         # Check stopping criteria
         has_stopping_criterion = False
         has_stopping_criterion |= (self._max_iterations is not None)
diff --git a/pints/_nested/__init__.py b/pints/_nested/__init__.py
index f19315e6..d06a7ccf 100644
--- a/pints/_nested/__init__.py
+++ b/pints/_nested/__init__.py
@@ -315,6 +315,9 @@ class NestedController(object):
         # Performance metrics
         self._time = None
 
+        # :meth:`run` can only be called once
+        self._has_run = False
+
     def active_points(self):
         """
         Returns the active points from nested sampling.
@@ -522,6 +525,11 @@ class NestedController(object):
         samples and an estimate of the marginal likelihood.
         """
 
+        # Can only run once for each controller instance
+        if self._has_run:
+            raise RuntimeError("Controller is valid for single use only")
+        self._has_run = True
+
         # Choose method to evaluate
         f = self._initialise_callable()
 
diff --git a/pints/_optimisers/__init__.py b/pints/_optimisers/__init__.py
index 66dc177f..6b72063e 100644
--- a/pints/_optimisers/__init__.py
+++ b/pints/_optimisers/__init__.py
@@ -382,6 +382,9 @@ class OptimisationController(object):
         self._n_workers = 1
         self.set_parallel()
 
+        # :meth:`run` can only be called once
+        self._has_run = False
+
         #
         # Stopping criteria
         #
@@ -452,6 +455,11 @@ class OptimisationController(object):
         """
         Runs the optimisation, returns a tuple ``(xbest, fbest)``.
         """
+        # Can only run once for each controller instance
+        if self._has_run:
+            raise RuntimeError("Controller is valid for single use only")
+        self._has_run = True
+
         # Check stopping criteria
         has_stopping_criterion = False
         has_stopping_criterion |= (self._max_iterations is not None)
