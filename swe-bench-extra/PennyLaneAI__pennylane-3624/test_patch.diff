diff --git a/tests/math/test_is_independent.py b/tests/math/test_is_independent.py
index cdeaf3062..5e933eaa9 100644
--- a/tests/math/test_is_independent.py
+++ b/tests/math/test_is_independent.py
@@ -115,11 +115,10 @@ class TestIsIndependentAutograd:
         seed = 921
         rnd_args = _get_random_args(args, self.interface, num, seed, bounds)
         assert len(rnd_args) == num
-        np.random.seed(seed)
+        rng = np.random.default_rng(seed)
         for _rnd_args in rnd_args:
             expected = tuple(
-                np.random.random(np.shape(arg)) * (bounds[1] - bounds[0]) + bounds[0]
-                for arg in args
+                rng.random(np.shape(arg)) * (bounds[1] - bounds[0]) + bounds[0] for arg in args
             )
             assert all(np.allclose(_exp, _rnd) for _exp, _rnd in zip(expected, _rnd_args))
 
@@ -244,11 +243,10 @@ class TestIsIndependentJax:
         seed = 921
         rnd_args = _get_random_args(args, self.interface, num, seed, bounds)
         assert len(rnd_args) == num
-        np.random.seed(seed)
+        rng = np.random.default_rng(seed)
         for _rnd_args in rnd_args:
             expected = tuple(
-                np.random.random(np.shape(arg)) * (bounds[1] - bounds[0]) + bounds[0]
-                for arg in args
+                rng.random(np.shape(arg)) * (bounds[1] - bounds[0]) + bounds[0] for arg in args
             )
             assert all(np.allclose(_exp, _rnd) for _exp, _rnd in zip(expected, _rnd_args))
 
diff --git a/tests/qchem/test_hartree_fock.py b/tests/qchem/test_hartree_fock.py
index 5ce5809ac..3db579f62 100644
--- a/tests/qchem/test_hartree_fock.py
+++ b/tests/qchem/test_hartree_fock.py
@@ -21,6 +21,26 @@ from pennylane import numpy as np
 from pennylane import qchem
 
 
+def test_scf_leaves_random_seed_unchanged():
+    """Tests that the scf function leaves the global numpy sampling state unchanged."""
+
+    symbols = ["H", "H"]
+    geometry = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]], requires_grad=False)
+    alpha = np.array(
+        [[3.42525091, 0.62391373, 0.1688554], [3.42525091, 0.62391373, 0.1688554]],
+        requires_grad=True,
+    )
+    mol = qchem.Molecule(symbols, geometry, alpha=alpha)
+    args = [alpha]
+
+    initial_numpy_state = np.random.get_state()
+    v_fock, coeffs, fock_matrix, h_core, rep_tensor = qchem.scf(mol)(*args)
+    final_numpy_state = np.random.get_state()
+
+    assert initial_numpy_state[0] == final_numpy_state[0]
+    assert np.all(initial_numpy_state[1] == final_numpy_state[1])
+
+
 @pytest.mark.parametrize(
     ("symbols", "geometry", "v_fock", "coeffs", "fock_matrix", "h_core", "repulsion_tensor"),
     [
diff --git a/tests/templates/test_layers/test_random.py b/tests/templates/test_layers/test_random.py
index 94537749a..50aeea78b 100644
--- a/tests/templates/test_layers/test_random.py
+++ b/tests/templates/test_layers/test_random.py
@@ -150,10 +150,10 @@ def circuit_template(weights):
 
 def circuit_decomposed(weights):
     # this structure is only true for a seed of 42 and 3 wires
-    qml.RX(weights[0, 0], wires=1)
-    qml.RX(weights[0][1], wires=0)
-    qml.CNOT(wires=[1, 0])
-    qml.RZ(weights[0, 2], wires=2)
+    qml.RY(weights[0, 0], wires=1)
+    qml.RX(weights[0][1], wires=2)
+    qml.CNOT(wires=[1, 2])
+    qml.RZ(weights[0, 2], wires=1)
     return qml.expval(qml.PauliZ(0))
 
 
@@ -169,16 +169,14 @@ class TestInterfaces:
 
         decomp = op.decomposition()
         expected = [
-            qml.RX(weights[0][0], wires=1),
-            qml.RX(weights[0][1], wires=0),
-            qml.CNOT(wires=[1, 0]),
-            qml.RZ(weights[0][2], wires=2),
+            qml.RY(weights[0][0], wires=1),
+            qml.RX(weights[0][1], wires=2),
+            qml.CNOT(wires=[1, 2]),
+            qml.RZ(weights[0][2], wires=1),
         ]
 
         for op1, op2 in zip(decomp, expected):
-            assert op1.name == op2.name
-            assert op1.data == op2.data
-            assert op1.wires == op2.wires
+            assert qml.equal(op1, op2)
 
     def test_autograd(self, tol):
         """Tests the autograd interface."""
