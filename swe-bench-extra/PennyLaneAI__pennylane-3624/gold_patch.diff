diff --git a/doc/releases/changelog-dev.md b/doc/releases/changelog-dev.md
index fc59a61f5..6adf859bb 100644
--- a/doc/releases/changelog-dev.md
+++ b/doc/releases/changelog-dev.md
@@ -160,13 +160,22 @@
   from the queue instead of updating their metadata to have an `"owner"`.
   [(#3282)](https://github.com/PennyLaneAI/pennylane/pull/3282)
 
+* `qchem.scf`, `RandomLayers.compute_decomposition`, and `Wires.select_random` all use
+  local random number generators now instead of global random number generators. This may lead to slighlty
+  different random numbers, and an independence of the results from the global random number generation state.
+  Please provide a seed to each individual function instead if you want controllable results.
+  [(#3624)](https://github.com/PennyLaneAI/pennylane/pull/3624)
+
 <h3>Deprecations</h3>
 
 <h3>Documentation</h3>
 
 <h3>Bug fixes</h3>
 
-* Handles breaking networkx version change by selectively skipping a qcut tensorflow-jit test,
+* Uses a local random number generator where possible to avoid mutating the global random state.
+  [(#3624)](https://github.com/PennyLaneAI/pennylane/pull/3624)
+
+* Handles breaking networkx version change by selectively skipping a qcut tensorflow-jit test.
   [(#3609)](https://github.com/PennyLaneAI/pennylane/pull/3609)
   [(#3619)](https://github.com/PennyLaneAI/pennylane/pull/3619)
 
diff --git a/pennylane/math/is_independent.py b/pennylane/math/is_independent.py
index 78fcbbc01..d90b32784 100644
--- a/pennylane/math/is_independent.py
+++ b/pennylane/math/is_independent.py
@@ -196,10 +196,9 @@ def _get_random_args(args, interface, num, seed, bounds):
             tuple(torch.rand(np.shape(arg)) * width + bounds[0] for arg in args) for _ in range(num)
         ]
     else:
-        np.random.seed(seed)
+        rng = np.random.default_rng(seed)
         rnd_args = [
-            tuple(np.random.random(np.shape(arg)) * width + bounds[0] for arg in args)
-            for _ in range(num)
+            tuple(rng.random(np.shape(arg)) * width + bounds[0] for arg in args) for _ in range(num)
         ]
         if interface == "autograd":
 
diff --git a/pennylane/qchem/hartree_fock.py b/pennylane/qchem/hartree_fock.py
index 8634e2dcf..fb3762b5f 100644
--- a/pennylane/qchem/hartree_fock.py
+++ b/pennylane/qchem/hartree_fock.py
@@ -132,8 +132,8 @@ def scf(mol, n_steps=50, tol=1e-8):
             s = overlap_matrix(basis_functions)(*args)
             h_core = core_matrix(basis_functions, charges, r)(*args)
 
-        qml.math.random.seed(2030)
-        s = s + qml.math.diag(qml.math.random.rand(len(s)) * 1.0e-12)
+        rng = qml.math.random.default_rng(2030)
+        s = s + qml.math.diag(rng.random(len(s)) * 1.0e-12)
 
         w, v = qml.math.linalg.eigh(s)
         x = v @ qml.math.diag(1.0 / qml.math.sqrt(w)) @ v.T
diff --git a/pennylane/templates/layers/random.py b/pennylane/templates/layers/random.py
index 8e07418dc..20a3d90dd 100644
--- a/pennylane/templates/layers/random.py
+++ b/pennylane/templates/layers/random.py
@@ -233,8 +233,7 @@ class RandomLayers(Operation):
          RX(tensor(1.4000), wires=['a'])]
         """
         wires = qml.wires.Wires(wires)
-        if seed is not None:
-            np.random.seed(seed)
+        rng = np.random.default_rng(seed)
 
         shape = qml.math.shape(weights)
         n_layers = qml.math.shape(weights)[0]
@@ -244,17 +243,17 @@ class RandomLayers(Operation):
 
             i = 0
             while i < shape[1]:
-                if np.random.random() > ratio_imprimitive:
+                if rng.random() > ratio_imprimitive:
                     # apply a random rotation gate to a random wire
-                    gate = np.random.choice(rotations)
-                    rnd_wire = wires.select_random(1)
+                    gate = rng.choice(rotations)
+                    rnd_wire = wires.select_random(1, seed=rng)
                     op_list.append(gate(weights[l][i], wires=rnd_wire))
                     i += 1
 
                 else:
                     # apply the entangler to two random wires
                     if len(wires) > 1:
-                        rnd_wires = wires.select_random(2)
+                        rnd_wires = wires.select_random(2, seed=rng)
                         op_list.append(imprimitive(wires=rnd_wires))
         return op_list
 
diff --git a/pennylane/wires.py b/pennylane/wires.py
index 61a54129f..21d556e51 100644
--- a/pennylane/wires.py
+++ b/pennylane/wires.py
@@ -348,10 +348,9 @@ class Wires(Sequence):
         if n_samples > len(self._labels):
             raise WireError(f"Cannot sample {n_samples} wires from {len(self._labels)} wires.")
 
-        if seed is not None:
-            np.random.seed(seed)
+        rng = np.random.default_rng(seed)
 
-        indices = np.random.choice(len(self._labels), size=n_samples, replace=False)
+        indices = rng.choice(len(self._labels), size=n_samples, replace=False)
         subset = tuple(self[i] for i in indices)
         return Wires(subset, _override=True)
 
