diff --git a/tests/test_graph.py b/tests/test_graph.py
index dd68ec9..e8c25d9 100644
--- a/tests/test_graph.py
+++ b/tests/test_graph.py
@@ -49,6 +49,18 @@ class FilterGraphTestCase(TestCase):
         self.output_list = outputs.OutputList((self.output,))
         self.fc = FilterComplex(self.input_list, self.output_list)
 
+    def test_ensure_video(self):
+        """ Test video stream type assertion helper."""
+        with self.assertRaises(TypeError):
+            ensure_video(self.audio_metadata)
+        self.assertIs(ensure_video(self.video_metadata), self.video_metadata)
+
+    def test_ensure_audio(self):
+        """ Test audio stream type assertion helper."""
+        with self.assertRaises(TypeError):
+            ensure_audio(self.video_metadata)
+        self.assertIs(ensure_audio(self.audio_metadata), self.audio_metadata)
+
     def test_filter_graph(self):
         """ Filter complex smoke test and features demo.
 
@@ -246,8 +258,8 @@ class FilterGraphTestCase(TestCase):
         """
         Concat filter sums samples count for audio streams.
         """
-        audio_meta = audio_meta_data(duration=1000.0, sampling_rate=48000,
-                                     samples_count=48000 * 1000)
+        audio_meta = audio_meta_data(duration=1000.0, sampling_rate=24000,
+                                     samples_count=24000 * 1000)
         a = inputs.Stream(AUDIO, meta=audio_meta)
         self.input_list.append(inputs.input_file('second.mp4', a))
         concat = a | Concat(AUDIO)
@@ -258,7 +270,7 @@ class FilterGraphTestCase(TestCase):
         am = cast(AudioMeta, self.output.codecs[-1].get_meta_data())
         self.assertEqual(self.audio_metadata.duration + audio_meta.duration,
                          am.duration)
-        self.assertEqual(self.audio_metadata.samples + audio_meta.samples,
+        self.assertEqual(round(am.duration * audio_meta.sampling_rate),
                          am.samples)
 
     def test_trim_metadata(self):
diff --git a/tests/test_wrapper.py b/tests/test_wrapper.py
new file mode 100644
index 0000000..ba68852
--- /dev/null
+++ b/tests/test_wrapper.py
@@ -0,0 +1,121 @@
+import asyncio
+import io
+import random
+import sys
+import time
+from dataclasses import dataclass
+from typing import List
+from unittest import TestCase, mock
+
+from fffw.wrapper import param
+from fffw.wrapper.base import UniversalLineReader, BaseWrapper
+
+
+@dataclass
+class Python(BaseWrapper):
+    command = 'python'
+    module: str = param(name='m')
+
+
+def script():
+    line = input()
+    sys.stdout.write(f'stdout: {line}\n')
+    sys.stderr.write(f'stderr: {line}\n')
+    time.sleep(int(line) // 100)
+    return int(line)
+
+
+if __name__ == '__main__':
+    sys.exit(script())
+
+
+class WrapperTestCase(TestCase):
+
+    def test_run_child_process(self):
+        p = Python(module='tests.test_wrapper')
+        ret, out, err = p.run('1')
+        self.assertEqual(ret, 1)
+        self.assertEqual(out, 'stdout: 1\n')
+        self.assertEqual(err, 'stderr: 1\n')
+
+    def test_child_timeout(self):
+        p = Python(module='tests.test_wrapper')
+        ret, out, err = p.run('100', timeout=0.01)
+        self.assertEqual(ret, -9)
+
+
+class UniversalLineReaderTestCase(TestCase):
+    def setUp(self) -> None:
+        self.data = io.BytesIO()
+        self.stream = mock.MagicMock(read=self.read)
+        self.reader = UniversalLineReader(self.stream, bufsize=100, blocksize=5)
+
+    async def read(self, n=-1):
+        return self.data.read(n)
+
+    async def iterate(self) -> List[str]:
+        result = []
+        async for line in self.reader:
+            result.append(line)
+        return result
+
+    def assert_lines(self, lines: List[str]):
+        for line in lines:
+            self.data.write(line.encode('utf-8'))
+        self.data.seek(0)
+        result = asyncio.get_event_loop().run_until_complete(self.iterate())
+        self.assertListEqual(lines, result)
+
+    def test_read_lf(self):
+        lines = []
+        for c in 'abcdefghijklmnopqrstuvwxyz':
+            length = random.randint(0, 15)
+            lines.append(c * length + '\n')
+        for line in lines:
+            self.data.write(line.encode('utf-8'))
+        self.data.seek(0)
+
+        self.assert_lines(lines)
+
+    def test_read_cr(self):
+        lines = []
+        for c in 'abcdefghijklmnopqrstuvwxyz':
+            length = random.randint(0, 15)
+            lines.append(c * length + '\r')
+
+        self.assert_lines(lines)
+
+    def test_read_crlf(self):
+        lines = []
+        for c in 'abcdefghijklmnopqrstuvwxyz':
+            length = random.randint(0, 15)
+            lines.append(c * length + '\r\n')
+
+        self.assert_lines(lines)
+
+    def test_empty_lines(self):
+        lines = [
+            'a\n',
+            '\n',
+            'b\n'
+        ]
+
+        self.assert_lines(lines)
+
+    def test_last_incomplete_line(self):
+        lines = [
+            'aaaaa\n',
+            'b'
+        ]
+
+        self.assert_lines(lines)
+
+    def test_empty_stream(self):
+        self.assert_lines([])
+
+    def test_buffer_overrun(self):
+        max_line = 'a' * self.reader.bufsize
+        lines = [max_line + '\n']
+
+        with self.assertRaises(asyncio.LimitOverrunError):
+            self.assert_lines(lines)
