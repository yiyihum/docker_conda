diff --git a/pyhocon/config_tree.py b/pyhocon/config_tree.py
index ca015ff..6993aef 100644
--- a/pyhocon/config_tree.py
+++ b/pyhocon/config_tree.py
@@ -220,6 +220,8 @@ class ConfigTree(OrderedDict):
         """
         value = self.get(key, default)
         if value == default:
+            if key in self:
+                del self[key]
             return default
 
         lst = ConfigTree.parse_key(key)
diff --git a/pyhocon/tool.py b/pyhocon/tool.py
index 8620fc2..241fd35 100644
--- a/pyhocon/tool.py
+++ b/pyhocon/tool.py
@@ -3,6 +3,8 @@ import logging
 import sys
 from pyhocon import ConfigFactory
 from pyhocon.config_tree import ConfigTree
+from pyhocon.config_tree import NoneValue
+
 
 try:
     basestring
@@ -52,7 +54,7 @@ class HOCONConverter(object):
                 lines += '\n{indent}]'.format(indent=''.rjust(level * indent, ' '))
         elif isinstance(config, basestring):
             lines = '"{value}"'.format(value=config.replace('\n', '\\n').replace('"', '\\"'))
-        elif config is None:
+        elif config is None or isinstance(config, NoneValue):
             lines = 'null'
         elif config is True:
             lines = 'true'
@@ -103,7 +105,7 @@ class HOCONConverter(object):
                 lines = '"""{value}"""'.format(value=config)  # multilines
             else:
                 lines = '"{value}"'.format(value=config.replace('\n', '\\n').replace('"', '\\"'))
-        elif config is None:
+        elif config is None or isinstance(config, NoneValue):
             lines = 'null'
         elif config is True:
             lines = 'true'
@@ -150,6 +152,8 @@ class HOCONConverter(object):
                 lines = config
             else:
                 lines = '|\n' + '\n'.join([line.rjust(level * indent, ' ') for line in lines])
+        elif config is None or isinstance(config, NoneValue):
+            lines = 'null'
         elif config is True:
             lines = 'true'
         elif config is False:
@@ -185,6 +189,8 @@ class HOCONConverter(object):
             lines.append('.'.join(stripped_key_stack) + ' = true')
         elif config is False:
             lines.append('.'.join(stripped_key_stack) + ' = false')
+        elif config is None or isinstance(config, NoneValue):
+            pass
         else:
             lines.append('.'.join(stripped_key_stack) + ' = ' + str(config))
         return '\n'.join([line for line in lines if len(line) > 0])
