diff --git a/env/requirements-tests.txt b/env/requirements-tests.txt
index 2a8058e..ed9de3d 100644
--- a/env/requirements-tests.txt
+++ b/env/requirements-tests.txt
@@ -6,3 +6,4 @@ coverage
 pyvista
 vtk>=9
 netcdf4
+numba_progress
\ No newline at end of file
diff --git a/harmonica/tests/test_prism.py b/harmonica/tests/test_prism.py
index 325072f..d3c5ad5 100644
--- a/harmonica/tests/test_prism.py
+++ b/harmonica/tests/test_prism.py
@@ -7,11 +7,18 @@
 """
 Test forward modelling for prisms.
 """
+from unittest.mock import patch
+
 import numpy as np
 import numpy.testing as npt
 import pytest
 import verde as vd
 
+try:
+    from numba_progress import ProgressBar
+except ImportError:
+    ProgressBar = None
+
 from ..forward.prism import _check_prisms, prism_gravity, safe_atan2, safe_log
 from ..gravity_corrections import bouguer_correction
 from .utils import run_only_with_numba
@@ -381,3 +388,50 @@ def test_prisms_parallel_vs_serial():
             coordinates, prisms, densities, field=field, parallel=False
         )
         npt.assert_allclose(result_parallel, result_serial)
+
+
+@pytest.mark.skipif(ProgressBar is None, reason="requires numba_progress")
+@pytest.mark.use_numba
+def test_progress_bar():
+    """
+    Check if forward gravity results with and without progress bar match
+    """
+    prisms = [
+        [-100, 0, -100, 0, -10, 0],
+        [0, 100, -100, 0, -10, 0],
+        [-100, 0, 0, 100, -10, 0],
+        [0, 100, 0, 100, -10, 0],
+    ]
+    densities = [2000, 3000, 4000, 5000]
+    coordinates = vd.grid_coordinates(
+        region=(-100, 100, -100, 100), spacing=20, extra_coords=10
+    )
+    for field in ("potential", "g_z"):
+        result_progress_true = prism_gravity(
+            coordinates, prisms, densities, field=field, progressbar=True
+        )
+        result_progress_false = prism_gravity(
+            coordinates, prisms, densities, field=field, progressbar=False
+        )
+        npt.assert_allclose(result_progress_true, result_progress_false)
+
+
+@patch("harmonica.forward.prism.ProgressBar", None)
+def test_numba_progress_missing_error():
+    """
+    Check if error is raised when progresbar=True and numba_progress package
+    is not installed.
+    """
+    prisms = [
+        [-100, 0, -100, 0, -10, 0],
+        [0, 100, -100, 0, -10, 0],
+        [-100, 0, 0, 100, -10, 0],
+        [0, 100, 0, 100, -10, 0],
+    ]
+    densities = [2000, 3000, 4000, 5000]
+    coordinates = [0, 0, 0]
+    # Check if error is raised
+    with pytest.raises(ImportError):
+        prism_gravity(
+            coordinates, prisms, densities, field="potential", progressbar=True
+        )
diff --git a/harmonica/tests/test_prism_layer.py b/harmonica/tests/test_prism_layer.py
index ddcbe57..634e563 100644
--- a/harmonica/tests/test_prism_layer.py
+++ b/harmonica/tests/test_prism_layer.py
@@ -8,6 +8,7 @@
 Test prisms layer
 """
 import warnings
+from unittest.mock import patch
 
 import numpy as np
 import numpy.testing as npt
@@ -22,6 +23,11 @@ try:
 except ImportError:
     pyvista = None
 
+try:
+    from numba_progress import ProgressBar
+except ImportError:
+    ProgressBar = None
+
 
 @pytest.fixture(params=("numpy", "xarray"))
 def dummy_layer(request):
@@ -422,3 +428,40 @@ def test_to_pyvista(dummy_layer, properties):
         assert pv_grid.array_names == ["density"]
         assert pv_grid.get_array("density").ndim == 1
         npt.assert_allclose(pv_grid.get_array("density"), layer.density.values.ravel())
+
+
+@pytest.mark.skipif(ProgressBar is None, reason="requires numba_progress")
+@pytest.mark.use_numba
+def test_progress_bar(dummy_layer):
+    """
+    Check if forward gravity results with and without progress bar match
+    """
+    coordinates = vd.grid_coordinates((1, 3, 7, 10), spacing=1, extra_coords=30.0)
+    (easting, northing), surface, reference, density = dummy_layer
+    layer = prism_layer(
+        (easting, northing), surface, reference, properties={"density": density}
+    )
+    result_progress_true = layer.prism_layer.gravity(
+        coordinates, field="g_z", progressbar=True
+    )
+
+    result_progress_false = layer.prism_layer.gravity(
+        coordinates, field="g_z", progressbar=False
+    )
+    npt.assert_allclose(result_progress_true, result_progress_false)
+
+
+@patch("harmonica.forward.prism.ProgressBar", None)
+def test_numba_progress_missing_error(dummy_layer):
+    """
+    Check if error is raised when progressbar=True and numba_progress package
+    is not installed.
+    """
+    coordinates = vd.grid_coordinates((1, 3, 7, 10), spacing=1, extra_coords=30.0)
+    (easting, northing), surface, reference, density = dummy_layer
+    layer = prism_layer(
+        (easting, northing), surface, reference, properties={"density": density}
+    )
+    # Check if error is raised
+    with pytest.raises(ImportError):
+        layer.prism_layer.gravity(coordinates, field="g_z", progressbar=True)
