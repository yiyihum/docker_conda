diff --git a/fiasco/ions.py b/fiasco/ions.py
index 3a97dd5..6dd30db 100644
--- a/fiasco/ions.py
+++ b/fiasco/ions.py
@@ -6,7 +6,7 @@ import astropy.units as u
 import numpy as np
 
 from functools import cached_property
-from scipy.interpolate import interp1d, splev, splrep
+from scipy.interpolate import interp1d, PchipInterpolator, splev, splrep
 from scipy.ndimage import map_coordinates
 
 from fiasco import proton_electron_ratio
@@ -173,18 +173,34 @@ Using Datasets:
         ionization equilibrium outside of this temperature range, it is better to use the ionization
         and recombination rates.
 
+        Note
+        ----
+        The cubic interpolation is performed in log-log spaceusing a Piecewise Cubic Hermite
+        Interpolating Polynomial with `~scipy.interpolate.PchipInterpolator`. This helps to
+        ensure smoothness while reducing oscillations in the interpolated ionization fractions.
+
         See Also
         --------
         fiasco.Element.equilibrium_ionization
         """
-        f = interp1d(self._ioneq[self._dset_names['ioneq_filename']]['temperature'].to('MK').value,
-                     self._ioneq[self._dset_names['ioneq_filename']]['ionization_fraction'],
-                     kind='linear',
-                     bounds_error=False,
-                     fill_value=np.nan)
-        ioneq = f(self.temperature.to('MK').value)
-        isfinite = np.isfinite(ioneq)
-        ioneq[isfinite] = np.where(ioneq[isfinite] < 0., 0., ioneq[isfinite])
+        temperature = self.temperature.to_value('K')
+        temperature_data = self._ioneq[self._dset_names['ioneq_filename']]['temperature'].to_value('K')
+        ioneq_data = self._ioneq[self._dset_names['ioneq_filename']]['ionization_fraction'].value
+        # Perform PCHIP interpolation in log-space on only the non-zero ionization fractions.
+        # See https://github.com/wtbarnes/fiasco/pull/223 for additional discussion.
+        is_nonzero = ioneq_data > 0.0
+        f_interp = PchipInterpolator(np.log10(temperature_data[is_nonzero]),
+                                     np.log10(ioneq_data[is_nonzero]),
+                                     extrapolate=False)
+        ioneq = f_interp(np.log10(temperature))
+        ioneq = 10**ioneq
+        # This sets all entries that would have interpolated to zero ionization fraction to zero
+        ioneq = np.where(np.isnan(ioneq), 0.0, ioneq)
+        # Set entries that are truly out of bounds of the original temperature data back to NaN
+        out_of_bounds = np.logical_or(temperature<temperature_data.min(), temperature>temperature_data.max())
+        ioneq = np.where(out_of_bounds, np.nan, ioneq)
+        is_finite = np.isfinite(ioneq)
+        ioneq[is_finite] = np.where(ioneq[is_finite] < 0., 0., ioneq[is_finite])
         return u.Quantity(ioneq)
 
     @property
@@ -339,6 +355,7 @@ Using Datasets:
 
         See Also
         --------
+        proton_collision_deexcitation_rate
         electron_collision_excitation_rate
         """
         # Create scaled temperature--these are not stored in the file
@@ -389,6 +406,7 @@ Using Datasets:
     def level_populations(self,
                           density: u.cm**(-3),
                           include_protons=True,
+                          include_level_resolved_rate_correction=True,
                           couple_density_to_temperature=False) -> u.dimensionless_unscaled:
         """
         Energy level populations as a function of temperature and density.
@@ -507,10 +525,136 @@ Using Datasets:
             # positivity
             np.fabs(pop, out=pop)
             np.divide(pop, pop.sum(axis=1)[:, np.newaxis], out=pop)
+            # Apply ionization/recombination correction
+            if include_level_resolved_rate_correction:
+                correction = self._population_correction(pop, d, c_matrix)
+                pop *= correction
+                np.divide(pop, pop.sum(axis=1)[:, np.newaxis], out=pop)
             populations[:, i, :] = pop
 
         return u.Quantity(populations)
 
+    def _level_resolved_rates_interpolation(self, temperature_table, rate_table,
+                                            extrapolate_above=False,
+                                            extrapolate_below=False):
+        # NOTE: According to CHIANTI Technical Report No. 20, Section 5,
+        # the interpolation of the level resolved recombination,
+        # the rates should be zero below the temperature range and above
+        # the temperature range, the last two points should be used to perform
+        # a linear extrapolation. For the ionization rates, the rates should be
+        # zero above the temperature range and below the temperature range, the
+        # last two points should be used. Thus, we need to perform two interpolations
+        # for each level.
+        # NOTE: In the CHIANTI IDL code, the interpolation is done using a cubic spline.
+        # Here, the rates are interpolated using a Piecewise Cubic Hermite Interpolating
+        # Polynomial (PCHIP) which balances smoothness and also reduces the oscillations
+        # that occur with higher order spline fits. This is needed mostly due to the wide
+        # range over which this data is fit.
+        temperature = self.temperature.to_value('K')
+        rates = []
+        for t, r in zip(temperature_table.to_value('K'), rate_table.to_value('cm3 s-1')):
+            rate_interp = PchipInterpolator(t, r, extrapolate=False)(temperature)
+            # NOTE: Anything outside of the temperature range will be set to NaN by the
+            # interpolation but we want these to be 0.
+            rate_interp = np.where(np.isnan(rate_interp), 0, rate_interp)
+            if extrapolate_above:
+                f_extrapolate = interp1d(t[-2:], r[-2:], kind='linear', fill_value='extrapolate')
+                i_extrapolate = np.where(temperature > t[-1])
+                rate_interp[i_extrapolate] = f_extrapolate(temperature[i_extrapolate])
+            if extrapolate_below:
+                f_extrapolate = interp1d(t[:2], r[:2], kind='linear', fill_value='extrapolate')
+                i_extrapolate = np.where(temperature < t[0])
+                rate_interp[i_extrapolate] = f_extrapolate(temperature[i_extrapolate])
+            rates.append(rate_interp)
+        # NOTE: Take transpose to maintain consistent ordering of temperature in the leading
+        # dimension and levels in the last dimension
+        rates =  u.Quantity(rates, 'cm3 s-1').T
+        # NOTE: The linear extrapolation at either end may return rates < 0 so we set these
+        # to zero.
+        rates = np.where(rates<0, 0, rates)
+        return rates
+
+    @cached_property
+    @needs_dataset('cilvl')
+    @u.quantity_input
+    def _level_resolved_ionization_rate(self):
+        ionization_rates = self._level_resolved_rates_interpolation(
+            self._cilvl['temperature'],
+            self._cilvl['ionization_rate'],
+            extrapolate_below=True,
+            extrapolate_above=False,
+        )
+        return self._cilvl['upper_level'], ionization_rates
+
+    @cached_property
+    @needs_dataset('reclvl')
+    @u.quantity_input
+    def _level_resolved_recombination_rate(self):
+        recombination_rates = self._level_resolved_rates_interpolation(
+            self._reclvl['temperature'],
+            self._reclvl['recombination_rate'],
+            extrapolate_below=False,
+            extrapolate_above=True,
+        )
+        return self._reclvl['upper_level'], recombination_rates
+
+    @u.quantity_input
+    def _population_correction(self, population, density, rate_matrix):
+        """
+        Correct level population to account for ionization and
+        recombination processes.
+
+        Parameters
+        ----------
+        population: `np.ndarray`
+        density: `~astropy.units.Quantity`
+        rate_matrix: `~astropy.units.Quantity`
+
+        Returns
+        -------
+        correction: `np.ndarray`
+            Correction factor to multiply populations by
+        """
+        # NOTE: These are done in separate try/except blocks because some ions have just a cilvl file,
+        # some have just a reclvl file, and some have both.
+        # NOTE: Ioneq values for surrounding ions are retrieved afterwards because first and last ions do
+        # not have previous or next ions but also do not have reclvl or cilvl files.
+        # NOTE: stripping the units off and adding them at the end because of some strange astropy
+        # Quantity behavior that does not allow for adding these two compatible shapes together.
+        numerator = np.zeros(population.shape)
+        try:
+            upper_level_ionization, ionization_rate = self._level_resolved_ionization_rate
+            ioneq_previous = self.previous_ion().ioneq.value[:, np.newaxis]
+            numerator[:, upper_level_ionization-1] += (ionization_rate * ioneq_previous).to_value('cm3 s-1')
+        except MissingDatasetException:
+            pass
+        try:
+            upper_level_recombination, recombination_rate = self._level_resolved_recombination_rate
+            ioneq_next = self.next_ion().ioneq.value[:, np.newaxis]
+            numerator[:, upper_level_recombination-1] += (recombination_rate * ioneq_next).to_value('cm3 s-1')
+        except MissingDatasetException:
+            pass
+        numerator *= density.to_value('cm-3')
+
+        c = rate_matrix.to_value('s-1').copy()
+        # This excludes processes that depopulate the level
+        i_diag, j_diag = np.diag_indices(c.shape[1])
+        c[:, i_diag, j_diag] = 0.0
+        # Sum of the population-weighted excitations from lower levels
+        # and cascades from higher levels
+        denominator = np.einsum('ijk,ik->ij', c, population)
+        denominator *= self.ioneq.value[:, np.newaxis]
+        # Set any zero entries to NaN to avoid divide by zero warnings
+        denominator = np.where(denominator==0.0, np.nan, denominator)
+
+        ratio = numerator / denominator
+        # Set ratio to zero where denominator is zero. This also covers the
+        # case of out-of-bounds ionization fractions (which will be NaN)
+        ratio = np.where(np.isfinite(ratio), ratio, 0.0)
+        # NOTE: Correction should not affect the ground state populations
+        ratio[:, 0] = 0.0
+        return 1.0 + ratio
+
     @needs_dataset('abundance', 'elvlc')
     @u.quantity_input
     def contribution_function(self, density: u.cm**(-3), **kwargs) -> u.cm**3 * u.erg / u.s:
