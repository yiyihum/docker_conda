diff --git a/fiasco/conftest.py b/fiasco/conftest.py
index ce8c437..15519c7 100644
--- a/fiasco/conftest.py
+++ b/fiasco/conftest.py
@@ -84,6 +84,11 @@ TEST_FILES = {
     'fe_27.rrparams':                       '75383b0f1b167f862cfd26bbadd2a029',
     'fe_10.psplups':                        'dd34363f6daa81dbf106fbeb211b457d',
     'fe_10.elvlc':                          'f221d4c7167336556d57378ac368afc1',
+    'fe_20.elvlc':                          'bbddcf958dd41311ea24bf177c2b62de',
+    'fe_20.wgfa':                           'c991c30b98b03c9152ba5a2c71877149',
+    'fe_20.scups':                          'f0e375cad2ec8296efb2abcb8f02705e',
+    'fe_20.cilvl':                          'b71833c51a03c7073f1657ce60afcdbb',
+    'fe_20.reclvl':                         'cf28869709acef521fb6a1c9a2b59530',
 }
 
 
diff --git a/fiasco/tests/idl/test_idl_ioneq.py b/fiasco/tests/idl/test_idl_ioneq.py
index 6061370..ac542c8 100644
--- a/fiasco/tests/idl/test_idl_ioneq.py
+++ b/fiasco/tests/idl/test_idl_ioneq.py
@@ -32,6 +32,7 @@ def ioneq_from_idl(idl_env, ascii_dbase_root):
     'C 2',
     'C 3',
     'Ca 2',
+    'Fe 20',
 ])
 def test_ioneq_from_idl(ion_name, ioneq_from_idl, hdf5_dbase_root):
     temperature = 10**ioneq_from_idl['ioneq_logt'] * u.K
diff --git a/fiasco/tests/test_collections.py b/fiasco/tests/test_collections.py
index ae8575b..507ae1f 100644
--- a/fiasco/tests/test_collections.py
+++ b/fiasco/tests/test_collections.py
@@ -93,16 +93,18 @@ def test_length(collection):
 def test_free_free(another_collection, wavelength):
     ff = another_collection.free_free(wavelength)
     assert ff.shape == temperature.shape + wavelength.shape if wavelength.shape else (1,)
-    index = 50 if wavelength.shape else 0
-    assert u.allclose(ff[50, index], 3.19877384e-35 * u.Unit('erg cm3 s-1 Angstrom-1'))
+    index_w = 50 if wavelength.shape else 0
+    index_t = 24  # This is approximately where the ioneq for Fe V peaks
+    assert u.allclose(ff[index_t, index_w], 3.2914969734961024e-42 * u.Unit('erg cm3 s-1 Angstrom-1'))
 
 
 @pytest.mark.parametrize('wavelength', [wavelength, wavelength[50]])
 def test_free_bound(another_collection, wavelength):
     fb = another_collection.free_bound(wavelength)
     assert fb.shape == temperature.shape + wavelength.shape if wavelength.shape else (1,)
-    index = 50 if wavelength.shape else 0
-    assert u.allclose(fb[50, index], 3.2653516e-29 * u.Unit('erg cm3 s-1 Angstrom-1'))
+    index_w = 50 if wavelength.shape else 0
+    index_t = 24  # This is approximately where the ioneq for Fe V peaks
+    assert u.allclose(fb[index_t, index_w], 1.1573022245197259e-35 * u.Unit('erg cm3 s-1 Angstrom-1'))
 
 
 def test_radiative_los(collection):
diff --git a/fiasco/tests/test_ion.py b/fiasco/tests/test_ion.py
index 04abc5d..fa7ea95 100644
--- a/fiasco/tests/test_ion.py
+++ b/fiasco/tests/test_ion.py
@@ -32,6 +32,13 @@ def c6(hdf5_dbase_root):
     return fiasco.Ion('C VI', temperature, hdf5_dbase_root=hdf5_dbase_root)
 
 
+@pytest.fixture
+def fe20(hdf5_dbase_root):
+    # NOTE: This ion was added because it has reclvl and cilvl files which
+    # we need to test the level-resolved rate correction factor
+    return fiasco.Ion('Fe XX', temperature, hdf5_dbase_root=hdf5_dbase_root)
+
+
 def test_new_instance(ion):
     abundance_filename = ion._instance_kwargs['abundance_filename']
     new_ion = ion._new_instance()
@@ -99,15 +106,7 @@ def test_scalar_temperature(hdf5_dbase_root):
     t_data = ion._ioneq[ion._dset_names['ioneq_filename']]['temperature']
     ioneq_data = ion._ioneq[ion._dset_names['ioneq_filename']]['ionization_fraction']
     i_t = np.where(t_data == ion.temperature)
-    np.testing.assert_allclose(ioneq, ioneq_data[i_t])
-
-
-def test_scalar_density(hdf5_dbase_root):
-    ion = fiasco.Ion('H 1', temperature, hdf5_dbase_root=hdf5_dbase_root)
-    pop = ion.level_populations(1e8 * u.cm**-3)
-    assert pop.shape == ion.temperature.shape + (1,) + ion._elvlc['level'].shape
-    # This value has not been checked for correctness
-    np.testing.assert_allclose(pop[0, 0, 0], 0.9965048292729177)
+    assert u.allclose(ioneq, ioneq_data[i_t])
 
 
 def test_no_elvlc_raises_index_error(hdf5_dbase_root):
@@ -116,13 +115,21 @@ def test_no_elvlc_raises_index_error(hdf5_dbase_root):
 
 
 def test_ioneq(ion):
-    assert ion.ioneq.shape == temperature.shape
     t_data = ion._ioneq[ion._dset_names['ioneq_filename']]['temperature']
     ioneq_data = ion._ioneq[ion._dset_names['ioneq_filename']]['ionization_fraction']
-    i_t = np.where(t_data == ion.temperature[0])
-    # Essentially test that we've done the interpolation to the data correctly
-    # for a single value
-    np.testing.assert_allclose(ion.ioneq[0], ioneq_data[i_t])
+    ion_at_nodes = ion._new_instance(temperature=t_data)
+    assert u.allclose(ion_at_nodes.ioneq, ioneq_data, rtol=1e-6)
+
+
+def test_ioneq_positive(ion):
+    assert np.all(ion.ioneq >= 0)
+
+
+def test_ioneq_out_bounds_is_nan(ion):
+    t_data = ion._ioneq[ion._dset_names['ioneq_filename']]['temperature']
+    t_out_of_bounds = t_data[[0,-1]] + [-100, 1e6] * u.K
+    ion_out_of_bounds = ion._new_instance(temperature=t_out_of_bounds)
+    assert np.isnan(ion_out_of_bounds.ioneq).all()
 
 
 def test_formation_temeprature(ion):
@@ -132,7 +139,7 @@ def test_formation_temeprature(ion):
 def test_abundance(ion):
     assert ion.abundance.dtype == np.dtype('float64')
     # This value has not been tested for correctness
-    np.testing.assert_allclose(ion.abundance, 0.0001258925411794166)
+    assert u.allclose(ion.abundance, 0.0001258925411794166)
 
 
 def test_proton_collision(fe10):
@@ -164,6 +171,15 @@ def test_missing_ip(hdf5_dbase_root):
         _ = ion.ip
 
 
+def test_level_populations(ion):
+    pop = ion.level_populations(1e8 * u.cm**-3)
+    assert pop.shape == ion.temperature.shape + (1,) + ion._elvlc['level'].shape
+    # This value has not been checked for correctness
+    assert u.allclose(pop[0, 0, 0], 0.011643747849652244)
+    # Check that the total populations are normalized to 1 for all temperatures
+    assert u.allclose(pop.squeeze().sum(axis=1), 1, atol=None, rtol=1e-15)
+
+
 def test_contribution_function(ion):
     cont_func = ion.contribution_function(1e7 * u.cm**-3)
     assert cont_func.shape == ion.temperature.shape + (1, ) + ion._wgfa['wavelength'].shape
@@ -204,6 +220,39 @@ def test_coupling_unequal_dimensions_exception(ion):
         _ = ion.level_populations([1e7, 1e8]*u.cm**(-3), couple_density_to_temperature=True)
 
 
+@pytest.fixture
+def pops_with_correction(fe20):
+    return fe20.level_populations(1e9*u.cm**(-3)).squeeze()
+
+
+@pytest.fixture
+def pops_no_correction(fe20):
+    return fe20.level_populations(1e9*u.cm**(-3),
+                                  include_level_resolved_rate_correction=False).squeeze()
+
+
+def test_level_populations_normalized(pops_no_correction, pops_with_correction):
+    assert u.allclose(pops_with_correction.sum(axis=1), 1, atol=None, rtol=1e-15)
+    assert u.allclose(pops_no_correction.sum(axis=1), 1, atol=None, rtol=1e-15)
+
+
+def test_level_populations_correction(fe20, pops_no_correction, pops_with_correction):
+    # Test level-resolved correction applied to correct levels
+    i_corrected = np.unique(np.concatenate([fe20._cilvl['upper_level'], fe20._reclvl['upper_level']]))
+    i_corrected -= 1
+    # This tests that, for at least some portion of the temperature axis, the populations are
+    # significantly different for each corrected level
+    pops_equal = u.isclose(pops_with_correction[:, i_corrected], pops_no_correction[:, i_corrected],
+                           atol=0.0, rtol=1e-5)
+    assert ~np.all(np.all(pops_equal, axis=0))
+    # All other levels should be unchanged (with some tolerance for renormalization)
+    is_uncorrected = np.ones(pops_no_correction.shape[-1], dtype=bool)
+    is_uncorrected[i_corrected] = False
+    i_uncorrected = np.where(is_uncorrected)
+    assert u.allclose(pops_with_correction[:, i_uncorrected], pops_no_correction[:, i_uncorrected],
+                      atol=0.0, rtol=1e-5)
+
+
 def test_emissivity(ion):
     emm = ion.emissivity(1e7 * u.cm**-3)
     assert emm.shape == ion.temperature.shape + (1, ) + ion._wgfa['wavelength'].shape
