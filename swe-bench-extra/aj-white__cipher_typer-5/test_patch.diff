diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/test_cipher.py b/tests/test_cipher.py
new file mode 100644
index 0000000..2892e8f
--- /dev/null
+++ b/tests/test_cipher.py
@@ -0,0 +1,134 @@
+import string
+
+import pytest
+from cipher_typer.cipher import CaeserCipher, CaeserSeedCipher, InvalidSelector
+
+
+def test_caeser_all_no_key():
+    c = CaeserCipher("all")
+    message = string.ascii_letters + string.digits
+    enc = c.encrypt(message)
+    dec = c.decrypt(enc)
+    assert dec == message
+
+
+def test_caeser_all():
+    c = CaeserCipher("all")
+    message = string.ascii_letters + string.digits
+    enc = c.encrypt(message, 25)
+    dec = c.decrypt(enc, 25)
+    assert dec == message
+
+
+def test_caeser_lower():
+    c = CaeserCipher("lower")
+    message = string.ascii_lowercase
+    enc = c.encrypt(message, 18)
+    dec = c.decrypt(enc, 18)
+    assert dec == message
+
+
+def test_caeser_upper():
+    c = CaeserCipher("upper")
+    message = string.ascii_uppercase
+    enc = c.encrypt(message, 13)
+    dec = c.decrypt(enc, 13)
+    assert dec == message
+
+
+def test_caeser_both():
+    c = CaeserCipher("both")
+    message = "I am BOTH Upper and lowerCase"
+    enc = c.encrypt(message, 9)
+    dec = c.decrypt(enc, 9)
+    assert dec == message
+
+
+def test_caeser_key_error():
+    c = CaeserCipher("lower")
+    message = string.ascii_lowercase
+    with pytest.raises(IndexError):
+        assert c.encrypt(message, 56)
+        assert c.decrypt(message, 87)
+
+
+def test_caeser_invalid_selector():
+    with pytest.raises(InvalidSelector):
+        assert CaeserCipher("jeff")
+
+
+def test_caeser_mixed_case_message_with_lower():
+    c = CaeserCipher("lower")
+    message = "I am in B8th CaseS"
+    assert c.encrypt(message, 7) == "I ht pu B8ao ChzlS"
+
+
+def test_caser_mixed_case_message_with_upper():
+    c = CaeserCipher("upper")
+    message = "&I am in UPper and LowerCASE WIth 67"
+    assert c.encrypt(message, 18) == "&A am in MHper and DowerUSKW OAth 67"
+
+
+# Test CaserSeedCipher class
+def test_caeser_seed_all_no_key():
+    cs = CaeserSeedCipher()
+    message = string.ascii_letters + string.digits
+    enc = cs.encrypt(message)
+    dec = cs.decrypt(enc)
+    assert dec == message
+
+
+def test_caeser_seed_all():
+    cs = CaeserSeedCipher()
+    message = string.ascii_letters + " " + string.digits + "#"
+    enc = cs.encrypt(message, 60)
+    dec = cs.decrypt(enc, 60)
+    assert dec == message
+
+
+def test_caeser_seed_lower():
+    cs = CaeserSeedCipher("lower")
+    message = string.ascii_lowercase
+    enc = cs.encrypt(message, 3)
+    dec = cs.decrypt(enc, 3)
+    assert dec == message
+
+
+def test_caeser_seed_upper():
+    cs = CaeserSeedCipher("upper")
+    message = string.ascii_uppercase
+    enc = cs.encrypt(message, 11)
+    dec = cs.decrypt(enc, 11)
+    assert dec == message
+
+
+def test_caeser_seed_both():
+    cs = CaeserSeedCipher("both")
+    message = string.ascii_letters
+    enc = cs.encrypt(message, 12)
+    dec = cs.decrypt(enc, 12)
+    assert dec == message
+
+
+def test_caeser_seed_key_error():
+    cs = CaeserSeedCipher()
+    with pytest.raises(IndexError):
+        assert cs.encrypt("Jeff", 100)
+        assert cs.decrypt("Jeff", 230)
+
+
+def test_caeser_seed_invalid_selector():
+    with pytest.raises(InvalidSelector):
+        assert CaeserSeedCipher("poo")
+
+
+def test_caser_seed_mixed_case_lower():
+    cs = CaeserSeedCipher("lower")
+    message = "I am in B8th CaseS"
+    assert cs.encrypt(message, 7) == "I kq lp B8od CktbS"
+
+
+def test_caser_seed_mixed_case_upper():
+    cs = CaeserSeedCipher("upper")
+    message = "&I am in UPper and LowerCASE WIth 67"
+    assert cs.encrypt(message, 18) == "&S am in JMper and EowerVFCK XSth 67"
