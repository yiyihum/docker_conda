diff --git a/pyannotate_tools/annotations/__main__.py b/pyannotate_tools/annotations/__main__.py
index 709fafa..f1c8190 100644
--- a/pyannotate_tools/annotations/__main__.py
+++ b/pyannotate_tools/annotations/__main__.py
@@ -42,7 +42,7 @@ def main():
 
     # Run pass 2 with output written to a temporary file.
     infile = args.type_info
-    generate_annotations_json(infile, tf.name)
+    generate_annotations_json(infile, tf.name, target_stream=tf)
 
     # Run pass 3 reading from a temporary file.
     FixAnnotateJson.stub_json_file = tf.name
diff --git a/pyannotate_tools/annotations/main.py b/pyannotate_tools/annotations/main.py
index 123fa0c..aea22c2 100644
--- a/pyannotate_tools/annotations/main.py
+++ b/pyannotate_tools/annotations/main.py
@@ -2,7 +2,7 @@
 
 import json
 
-from typing import List
+from typing import List, Optional, IO
 from mypy_extensions import TypedDict
 
 from pyannotate_tools.annotations.types import ARG_STAR, ARG_STARSTAR
@@ -22,8 +22,8 @@ FunctionData = TypedDict('FunctionData', {'path': str,
                                           'samples': int})
 
 
-def generate_annotations_json(source_path, target_path):
-    # type: (str, str) -> None
+def generate_annotations_json(source_path, target_path, source_stream=None, target_stream=None):
+    # type: (str, str, Optional[IO[str]], Optional[IO[str]]) -> None
     """Produce annotation data JSON file from a JSON file with runtime-collected types.
 
     Data formats:
@@ -31,7 +31,7 @@ def generate_annotations_json(source_path, target_path):
     * The source JSON is a list of pyannotate_tools.annotations.parse.RawEntry items.
     * The output JSON is a list of FunctionData items.
     """
-    items = parse_json(source_path)
+    items = parse_json(source_path, source_stream)
     results = []
     for item in items:
         arg_types, return_type = infer_annotation(item.type_comments)
@@ -55,5 +55,8 @@ def generate_annotations_json(source_path, target_path):
             'samples': item.samples
         }  # type: FunctionData
         results.append(data)
-    with open(target_path, 'w') as f:
-        json.dump(results, f, sort_keys=True, indent=4)
+    if target_stream:
+        json.dump(results, target_stream, sort_keys=True, indent=4)
+    else:
+        with open(target_path, 'w') as f:
+            json.dump(results, f, sort_keys=True, indent=4)
diff --git a/pyannotate_tools/annotations/parse.py b/pyannotate_tools/annotations/parse.py
index 28a7851..bc9d3c1 100644
--- a/pyannotate_tools/annotations/parse.py
+++ b/pyannotate_tools/annotations/parse.py
@@ -9,7 +9,7 @@ import json
 import re
 import sys
 
-from typing import Any, List, Mapping, Set, Tuple
+from typing import Any, List, Mapping, Set, Tuple, Optional, IO
 from typing_extensions import Text
 from mypy_extensions import NoReturn, TypedDict
 
@@ -86,14 +86,17 @@ class ParseError(Exception):
         self.comment = comment
 
 
-def parse_json(path):
-    # type: (str) -> List[FunctionInfo]
+def parse_json(path, stream=None):
+    # type: (str, Optional[IO[str]]) -> List[FunctionInfo]
     """Deserialize a JSON file containing runtime collected types.
 
     The input JSON is expected to to have a list of RawEntry items.
     """
-    with open(path) as f:
-        data = json.load(f)  # type: List[RawEntry]
+    if stream:
+        data = json.load(stream)  # type: List[RawEntry]
+    else:
+        with open(path) as f:
+            data = json.load(f)
     result = []
 
     def assert_type(value, typ):
