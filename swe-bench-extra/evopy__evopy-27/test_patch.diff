diff --git a/test/test_evopy.py b/test/test_evopy.py
index 9ddda48..56fa63c 100644
--- a/test/test_evopy.py
+++ b/test/test_evopy.py
@@ -3,12 +3,14 @@ import numpy as np
 
 from evopy import EvoPy
 
+
 def test_random_consistency():
     """Test whether the random state gives consistent runs when initialized."""
     x_first = EvoPy(lambda x: pow(x, 2), 1, random_seed=42).run()
     x_second = EvoPy(lambda x: pow(x, 2), 1, random_seed=42).run()
     assert x_first == x_second
 
+
 def test_random_consistency_multiple_runs():
     """"Test whether the random state is not re-used in sequential runs"""
     evopy = EvoPy(lambda x: pow(x, 2), 1, random_seed=42)
@@ -16,6 +18,7 @@ def test_random_consistency_multiple_runs():
     x_second = evopy.run()
     assert x_first != x_second
 
+
 def test_simple_use_case():
     """Test whether evopy can successfully run for a simple evaluation function."""
     evopy = EvoPy(lambda x: pow(x, 2), 1)
@@ -25,6 +28,32 @@ def test_simple_use_case():
     assert best_individual.size == 1
 
 
+def test_early_timed_stop():
+    """Test whether evopy can successfully stop early when given a specified time constraint."""
+    count = [0]
+
+    def increment_reporter(report):
+        count[0] = report.generation + 1
+
+    evopy = EvoPy(lambda x: pow(x, 2), 1, max_run_time=0, reporter=increment_reporter)
+    evopy.run()
+
+    assert count[0] == 1
+
+
+def test_early_target_value_stop():
+    """Test whether evopy can successfully stop after achieving a specified target value."""
+    count = [0]
+
+    def increment_reporter(report):
+        count[0] = report.generation + 1
+
+    evopy = EvoPy(lambda x: 0, 1, target_fitness_value=0, reporter=increment_reporter)
+    evopy.run()
+
+    assert count[0] == 1
+
+
 def test_empty_input_array():
     """Test whether evopy can successfully run for a simple evaluation function."""
     evopy = EvoPy(lambda x: 0, 0)
