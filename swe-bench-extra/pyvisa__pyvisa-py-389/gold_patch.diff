diff --git a/CHANGES b/CHANGES
index 6a454f7..8494603 100644
--- a/CHANGES
+++ b/CHANGES
@@ -7,6 +7,8 @@ PyVISA-py Changelog
 - addd URL-support to ASLR devices PR #386
 - add support for GPIB secondary addresses
 - fix missing sock.close() in rpc _connect()
+- Adjusted how `iter_bytes` works to be more accurate to the VISA spec and removed
+  it from the `serial` module (it can still be found in `common`)
 - fix HiSLIP message tracking after read timeout PR #376
 - handle read_termination of null in tcipip PR #394
 - fix tcpip keepalive PR #396
diff --git a/pyvisa_py/common.py b/pyvisa_py/common.py
index 884ba63..478042a 100644
--- a/pyvisa_py/common.py
+++ b/pyvisa_py/common.py
@@ -6,6 +6,7 @@
 
 """
 import logging
+from typing import Iterator, Optional
 
 from pyvisa import logger
 
@@ -28,3 +29,75 @@ class NamedObject(object):
 
 
 int_to_byte = lambda val: val.to_bytes(1, "big")
+
+
+# TODO(anyone): This is copypasta from `pyvisa-sim` project - find a way to
+#   reduce duplication, probably in that project instead of here.
+def _create_bitmask(bits: int) -> int:
+    """Create a bitmask for the given number of bits."""
+    mask = (1 << bits) - 1
+    return mask
+
+
+# TODO(anyone): This is copypasta from `pyvisa-sim` project - find a way to
+#   reduce duplication, probably in that project instead of here.
+def iter_bytes(
+    data: bytes, data_bits: Optional[int] = None, send_end: Optional[bool] = None
+) -> Iterator[bytes]:
+    """Clip values to the correct number of bits per byte.
+    Serial communication may use from 5 to 8 bits.
+    Parameters
+    ----------
+    data : The data to clip as a byte string.
+    data_bits : How many bits per byte should be sent. Clip to this many bits.
+        For example: data_bits=5: 0xff (0b1111_1111) --> 0x1f (0b0001_1111).
+        Acceptable range is 5 to 8, inclusive. Values above 8 will be clipped to 8.
+        This maps to the VISA attribute VI_ATTR_ASRL_DATA_BITS.
+    send_end :
+        If None (the default), apply the mask that is determined by data_bits.
+        If False, apply the mask and set the highest (post-mask) bit to 0 for
+        all bytes.
+        If True, apply the mask and set the highest (post-mask) bit to 0 for
+        all bytes except for the final byte, which has the highest bit set to 1.
+    References
+    ----------
+    + https://www.ivifoundation.org/downloads/Architecture%20Specifications/vpp43_2022-05-19.pdf,
+    + https://www.ni.com/docs/en-US/bundle/ni-visa/page/ni-visa/vi_attr_asrl_data_bits.html,
+    + https://www.ni.com/docs/en-US/bundle/ni-visa/page/ni-visa/vi_attr_asrl_end_out.html
+
+    """
+    if send_end and data_bits is None:
+        raise ValueError("'send_end' requires a valid 'data_bits' value.")
+
+    if data_bits is None:
+        for d in data:
+            yield bytes([d])
+    else:
+        if data_bits <= 0:
+            raise ValueError("'data_bits' cannot be zero or negative")
+        if data_bits > 8:
+            data_bits = 8
+
+        if send_end is None:
+            # only apply the mask
+            mask = _create_bitmask(data_bits)
+            for d in data:
+                yield bytes([d & mask])
+        elif bool(send_end) is False:
+            # apply the mask and set highest bits to 0
+            # This is effectively the same has reducing the mask by 1 bit.
+            mask = _create_bitmask(data_bits - 1)
+            for d in data:
+                yield bytes([d & mask])
+        elif bool(send_end) is True:
+            # apply the mask and set highest bits to 0
+            # This is effectively the same has reducing the mask by 1 bit.
+            mask = _create_bitmask(data_bits - 1)
+            for d in data[:-1]:
+                yield bytes([d & mask])
+            # except for the last byte which has it's highest bit set to 1.
+            last_byte = data[-1]
+            highest_bit = 1 << (data_bits - 1)
+            yield bytes([(last_byte & mask) | highest_bit])
+        else:
+            raise ValueError(f"Unknown 'send_end' value '{send_end}'")
diff --git a/pyvisa_py/serial.py b/pyvisa_py/serial.py
index f438cf3..3319026 100644
--- a/pyvisa_py/serial.py
+++ b/pyvisa_py/serial.py
@@ -7,7 +7,7 @@
 
 """
 import sys
-from typing import Any, List, Optional, Tuple
+from typing import Any, List, Tuple
 
 from pyvisa import attributes, constants, logger, rname
 from pyvisa.constants import (
@@ -34,24 +34,6 @@ except ImportError as e:
 IS_WIN = sys.platform == "win32"
 
 
-def iter_bytes(data: bytes, mask: Optional[int] = None, send_end: bool = False):
-    if send_end and mask is None:
-        raise ValueError("send_end requires a valid mask.")
-
-    if mask is None:
-        for d in data:
-            yield bytes([d])
-
-    else:
-        for d in data[:-1]:
-            yield bytes([d & ~mask])
-
-        if send_end:
-            yield bytes([data[-1] | ~mask])
-        else:
-            yield bytes([data[-1] & ~mask])
-
-
 def to_state(boolean_input: bool) -> constants.LineState:
     """Convert a boolean input into a LineState value."""
     if boolean_input:
@@ -184,20 +166,20 @@ class SerialSession(Session):
 
         """
         logger.debug("Serial.write %r" % data)
-        end_out, _ = self.get_attribute(ResourceAttribute.asrl_end_out)
         send_end, _ = self.get_attribute(ResourceAttribute.send_end_enabled)
+        end_out, _ = self.get_attribute(ResourceAttribute.asrl_end_out)
+        data_bits, _ = self.get_attribute(constants.ResourceAttribute.asrl_data_bits)
 
-        if end_out in (SerialTermination.none, SerialTermination.termination_break):
+        if end_out == SerialTermination.none:
             pass
         elif end_out == SerialTermination.last_bit:
-            last_bit, _ = self.get_attribute(ResourceAttribute.asrl_data_bits)
-            mask = 1 << (last_bit - 1)
-            data = bytes(iter_bytes(data, mask, send_end))
-
+            data = b"".join(common.iter_bytes(data, data_bits, send_end))
         elif end_out == SerialTermination.termination_char:
             term_char, _ = self.get_attribute(ResourceAttribute.termchar)
+            data = b"".join(common.iter_bytes(data, data_bits, send_end=None))
             data = data + common.int_to_byte(term_char)
-
+        elif end_out == SerialTermination.termination_break:
+            data = b"".join(common.iter_bytes(data, data_bits, send_end=None))
         else:
             raise ValueError("Unknown value for VI_ATTR_ASRL_END_OUT: %s" % end_out)
 
