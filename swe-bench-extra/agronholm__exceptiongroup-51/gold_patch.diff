diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 038c6c8..14901c8 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -21,13 +21,13 @@ repos:
   - id: isort
 
 - repo: https://github.com/asottile/pyupgrade
-  rev: v3.3.0
+  rev: v3.3.1
   hooks:
   - id: pyupgrade
     args: ["--py37-plus", "--keep-runtime-typing"]
 
 - repo: https://github.com/psf/black
-  rev: 22.10.0
+  rev: 22.12.0
   hooks:
   - id: black
     exclude: "tests/test_catch_py311.py"
diff --git a/CHANGES.rst b/CHANGES.rst
index c2af7ae..ee46dfd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -3,6 +3,11 @@ Version history
 
 This library adheres to `Semantic Versioning 2.0 <http://semver.org/>`_.
 
+**UNRELEASED**
+
+- Backported upstream fix for gh-99553 (custom subclasses of ``BaseExceptionGroup`` that
+  also inherit from ``Exception`` should not be able to wrap base exceptions)
+
 **1.0.4**
 
 - Fixed regression introduced in v1.0.3 where the code computing the suggestions would
diff --git a/src/exceptiongroup/_exceptions.py b/src/exceptiongroup/_exceptions.py
index ebdd172..a2ca092 100644
--- a/src/exceptiongroup/_exceptions.py
+++ b/src/exceptiongroup/_exceptions.py
@@ -67,6 +67,18 @@ class BaseExceptionGroup(BaseException, Generic[_BaseExceptionT_co]):
             if all(isinstance(exc, Exception) for exc in __exceptions):
                 cls = ExceptionGroup
 
+        if issubclass(cls, Exception):
+            for exc in __exceptions:
+                if not isinstance(exc, Exception):
+                    if cls is ExceptionGroup:
+                        raise TypeError(
+                            "Cannot nest BaseExceptions in an ExceptionGroup"
+                        )
+                    else:
+                        raise TypeError(
+                            f"Cannot nest BaseExceptions in {cls.__name__!r}"
+                        )
+
         return super().__new__(cls, __message, __exceptions)
 
     def __init__(
@@ -219,15 +231,7 @@ class BaseExceptionGroup(BaseException, Generic[_BaseExceptionT_co]):
 
 class ExceptionGroup(BaseExceptionGroup[_ExceptionT_co], Exception):
     def __new__(cls, __message: str, __exceptions: Sequence[_ExceptionT_co]) -> Self:
-        instance: ExceptionGroup[_ExceptionT_co] = super().__new__(
-            cls, __message, __exceptions
-        )
-        if cls is ExceptionGroup:
-            for exc in __exceptions:
-                if not isinstance(exc, Exception):
-                    raise TypeError("Cannot nest BaseExceptions in an ExceptionGroup")
-
-        return instance
+        return super().__new__(cls, __message, __exceptions)
 
     if TYPE_CHECKING:
 
