diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
index 77d65b2..311aec4 100644
--- a/.github/workflows/test.yml
+++ b/.github/workflows/test.yml
@@ -40,7 +40,7 @@ jobs:
         path: ~/.cache/pip
         key: pip-test-${{ matrix.python-version }}-${{ matrix.os }}
     - name: Install dependencies
-      run: pip install .[test] coverage[toml] coveralls
+      run: pip install .[test] coveralls coverage[toml]
     - name: Test with pytest
       run: coverage run -m pytest
     - name: Upload Coverage
diff --git a/tests/test_exceptions.py b/tests/test_exceptions.py
index d0d33cd..9a0e39b 100644
--- a/tests/test_exceptions.py
+++ b/tests/test_exceptions.py
@@ -3,6 +3,8 @@ import collections.abc
 import sys
 import unittest
 
+import pytest
+
 from exceptiongroup import BaseExceptionGroup, ExceptionGroup
 
 
@@ -90,19 +92,35 @@ class InstanceCreation(unittest.TestCase):
         beg = BaseExceptionGroup("beg", [ValueError(1), KeyboardInterrupt(2)])
         self.assertIs(type(beg), BaseExceptionGroup)
 
-    def test_EG_subclass_wraps_anything(self):
+    def test_EG_subclass_wraps_non_base_exceptions(self):
         class MyEG(ExceptionGroup):
             pass
 
         self.assertIs(type(MyEG("eg", [ValueError(12), TypeError(42)])), MyEG)
-        self.assertIs(type(MyEG("eg", [ValueError(12), KeyboardInterrupt(42)])), MyEG)
 
-    def test_BEG_subclass_wraps_anything(self):
-        class MyBEG(BaseExceptionGroup):
+    @pytest.mark.skipif(
+        sys.version_info[:3] == (3, 11, 0),
+        reason="Behavior was made stricter in 3.11.1",
+    )
+    def test_EG_subclass_does_not_wrap_base_exceptions(self):
+        class MyEG(ExceptionGroup):
+            pass
+
+        msg = "Cannot nest BaseExceptions in 'MyEG'"
+        with self.assertRaisesRegex(TypeError, msg):
+            MyEG("eg", [ValueError(12), KeyboardInterrupt(42)])
+
+    @pytest.mark.skipif(
+        sys.version_info[:3] == (3, 11, 0),
+        reason="Behavior was made stricter in 3.11.1",
+    )
+    def test_BEG_and_E_subclass_does_not_wrap_base_exceptions(self):
+        class MyEG(BaseExceptionGroup, ValueError):
             pass
 
-        self.assertIs(type(MyBEG("eg", [ValueError(12), TypeError(42)])), MyBEG)
-        self.assertIs(type(MyBEG("eg", [ValueError(12), KeyboardInterrupt(42)])), MyBEG)
+        msg = "Cannot nest BaseExceptions in 'MyEG'"
+        with self.assertRaisesRegex(TypeError, msg):
+            MyEG("eg", [ValueError(12), KeyboardInterrupt(42)])
 
 
 def create_simple_eg():
