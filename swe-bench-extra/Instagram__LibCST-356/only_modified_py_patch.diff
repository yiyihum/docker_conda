diff --git a/libcst/matchers/_matcher_base.py b/libcst/matchers/_matcher_base.py
index 27475d5..0cf281c 100644
--- a/libcst/matchers/_matcher_base.py
+++ b/libcst/matchers/_matcher_base.py
@@ -932,6 +932,24 @@ def SaveMatchedNode(matcher: _OtherNodeT, name: str) -> _OtherNodeT:
     return cast(_OtherNodeT, _ExtractMatchingNode(matcher, name))
 
 
+def _matches_zero_nodes(
+    matcher: Union[
+        BaseMatcherNode,
+        _BaseWildcardNode,
+        MatchIfTrue[Callable[[object], bool]],
+        _BaseMetadataMatcher,
+        DoNotCareSentinel,
+    ]
+) -> bool:
+    if isinstance(matcher, AtLeastN) and matcher.n == 0:
+        return True
+    if isinstance(matcher, AtMostN):
+        return True
+    if isinstance(matcher, _ExtractMatchingNode):
+        return _matches_zero_nodes(matcher.matcher)
+    return False
+
+
 @dataclass(frozen=True)
 class _SequenceMatchesResult:
     sequence_capture: Optional[
@@ -960,14 +978,13 @@ def _sequence_matches(  # noqa: C901
         return _SequenceMatchesResult({}, None)
     if not nodes and matchers:
         # Base case, we have one or more matcher that wasn't matched
-        return (
-            _SequenceMatchesResult({}, [])
-            if all(
-                (isinstance(m, AtLeastN) and m.n == 0) or isinstance(m, AtMostN)
-                for m in matchers
+        if all(_matches_zero_nodes(m) for m in matchers):
+            return _SequenceMatchesResult(
+                {m.name: () for m in matchers if isinstance(m, _ExtractMatchingNode)},
+                (),
             )
-            else _SequenceMatchesResult(None, None)
-        )
+        else:
+            return _SequenceMatchesResult(None, None)
     if nodes and not matchers:
         # Base case, we have nodes left that don't match any matcher
         return _SequenceMatchesResult(None, None)

