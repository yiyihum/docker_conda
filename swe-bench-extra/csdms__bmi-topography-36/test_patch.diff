diff --git a/tests/test_api_key.py b/tests/test_api_key.py
index 1751b37..9107a76 100644
--- a/tests/test_api_key.py
+++ b/tests/test_api_key.py
@@ -1,7 +1,9 @@
 import os
 from unittest import mock
 
-from bmi_topography.topography import find_api_key, read_first_of
+import pytest
+
+from bmi_topography.topography import find_user_api_key, read_first_of, use_demo_key
 
 
 def copy_environ(exclude=None):
@@ -13,24 +15,24 @@ def copy_environ(exclude=None):
     return {key: value for key, value in os.environ.items() if key not in exclude}
 
 
-def test_find_api_key_not_found():
+def test_find_user_api_key_not_found():
     """The API key is not given anywhere"""
     env = copy_environ(exclude="OPENTOPOGRAPHY_API_KEY")
     with mock.patch.dict(os.environ, env, clear=True):
-        assert find_api_key() == ""
+        assert find_user_api_key() == ""
 
 
 @mock.patch.dict(os.environ, {"OPENTOPOGRAPHY_API_KEY": "foo"})
-def test_find_api_key_env(tmpdir):
+def test_find_user_api_key_env(tmpdir):
     """The API key is an environment variable"""
     with tmpdir.as_cwd():
         with open(".opentopography.txt", "w") as fp:
             fp.write("bar")
-    assert find_api_key() == "foo"
+    assert find_user_api_key() == "foo"
 
 
 @mock.patch.dict(os.environ, {"OPENTOPOGRAPHY_API_KEY": "foo"})
-def test_find_api_key_from_file(tmpdir):
+def test_find_user_api_key_from_file(tmpdir):
     """The API key is in a file"""
     env = copy_environ(exclude="OPENTOPOGRAPHY_API_KEY")
     with tmpdir.as_cwd():
@@ -38,7 +40,7 @@ def test_find_api_key_from_file(tmpdir):
             fp.write("bar")
 
         with mock.patch.dict(os.environ, env, clear=True):
-            assert find_api_key() == "bar"
+            assert find_user_api_key() == "bar"
 
 
 def test_read_first_missing(tmpdir):
@@ -56,3 +58,14 @@ def test_read_first_file(tmpdir):
 
         assert read_first_of(["foo.txt", "bar.txt"]) == "foo"
         assert read_first_of(["bar.txt", "foo.txt"]) == "bar"
+
+
+def test_use_demo_key_is_a_string():
+    demo_key = use_demo_key()
+    assert isinstance(demo_key, str)
+    assert len(demo_key) > 0
+
+
+def test_use_demo_key_issues_warning():
+    with pytest.warns(UserWarning):
+        use_demo_key()
diff --git a/tests/test_cli.py b/tests/test_cli.py
index cd5ec63..696cd67 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -1,4 +1,6 @@
 """Test bmi-topography command-line interface"""
+import pathlib
+
 from click.testing import CliRunner
 
 from bmi_topography.cli import main
@@ -20,31 +22,40 @@ def test_version():
 
 def test_defaults():
     runner = CliRunner()
-    result = runner.invoke(main)
+    result = runner.invoke(main, ["--quiet"])
+    assert pathlib.Path(result.output.strip()).is_file()
     assert result.exit_code == 0
 
 
+def test_quiet():
+    runner = CliRunner()
+    quiet_lines = runner.invoke(main, ["--quiet"]).output.splitlines()
+    verbose_lines = runner.invoke(main).output.splitlines()
+
+    assert len(verbose_lines) > len(quiet_lines)
+
+
 def test_demtype_valid():
     runner = CliRunner()
-    result = runner.invoke(main, ["--dem_type=SRTMGL1", "--no_fetch"])
+    result = runner.invoke(main, ["--dem-type=SRTMGL1", "--no-fetch"])
     assert result.exit_code == 0
 
 
 def test_demtype_invalid():
     runner = CliRunner()
-    result = runner.invoke(main, ["--dem_type=foobar"])
+    result = runner.invoke(main, ["--dem-type=foobar"])
     assert result.exit_code != 0
 
 
 def test_demtype_is_case_sensitive():
     runner = CliRunner()
-    result = runner.invoke(main, ["--dem_type=srtmgl1"])
+    result = runner.invoke(main, ["--dem-type=srtmgl1"])
     assert result.exit_code != 0
 
 
 def test_south_inrange():
     runner = CliRunner()
-    result = runner.invoke(main, ["--south=-90.0", "--no_fetch"])
+    result = runner.invoke(main, ["--south=-90.0", "--no-fetch"])
     assert result.exit_code == 0
 
 
@@ -56,7 +67,7 @@ def test_south_outrange():
 
 def test_north_inrange():
     runner = CliRunner()
-    result = runner.invoke(main, ["--north=90.0", "--no_fetch"])
+    result = runner.invoke(main, ["--north=90.0", "--no-fetch"])
     assert result.exit_code == 0
 
 
@@ -68,7 +79,7 @@ def test_north_outrange():
 
 def test_west_inrange():
     runner = CliRunner()
-    result = runner.invoke(main, ["--west=-180.0", "--no_fetch"])
+    result = runner.invoke(main, ["--west=-180.0", "--no-fetch"])
     assert result.exit_code == 0
 
 
@@ -80,7 +91,7 @@ def test_west_outrange():
 
 def test_east_inrange():
     runner = CliRunner()
-    result = runner.invoke(main, ["--east=180.0", "--no_fetch"])
+    result = runner.invoke(main, ["--east=180.0", "--no-fetch"])
     assert result.exit_code == 0
 
 
@@ -92,17 +103,17 @@ def test_east_outrange():
 
 def test_output_format_valid():
     runner = CliRunner()
-    result = runner.invoke(main, ["--output_format=GTiff", "--no_fetch"])
+    result = runner.invoke(main, ["--output-format=GTiff", "--no-fetch"])
     assert result.exit_code == 0
 
 
 def test_output_format_invalid():
     runner = CliRunner()
-    result = runner.invoke(main, ["--output_format=foobar"])
+    result = runner.invoke(main, ["--output-format=foobar"])
     assert result.exit_code != 0
 
 
 def test_output_format_is_case_sensitive():
     runner = CliRunner()
-    result = runner.invoke(main, ["--output_format=gtiff"])
+    result = runner.invoke(main, ["--output-format=gtiff"])
     assert result.exit_code != 0
