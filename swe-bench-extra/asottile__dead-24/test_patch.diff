diff --git a/tests/dead_test.py b/tests/dead_test.py
index 9ee3a09..f8b63ba 100644
--- a/tests/dead_test.py
+++ b/tests/dead_test.py
@@ -140,3 +140,71 @@ def test_partially_disabled(git_dir, capsys):
     assert dead.main(())
     out, _ = capsys.readouterr()
     assert out == 'x is never read, defined in f.py:1, f.py:3\n'
+
+
+def test_unused_argument(git_dir, capsys):
+    git_dir.join('f.py').write('def f(a, *b, c, **d): return 1\nf')
+    subprocess.check_call(('git', 'add', '.'))
+    assert dead.main(())
+    out, _ = capsys.readouterr()
+    assert out == (
+        'a is never read, defined in f.py:1\n'
+        'b is never read, defined in f.py:1\n'
+        'c is never read, defined in f.py:1\n'
+        'd is never read, defined in f.py:1\n'
+    )
+
+
+def test_unused_argument_in_scope(git_dir, capsys):
+    git_dir.join('f.py').write('def f(g): return 1\ndef g(): pass\ng\nf\n')
+    subprocess.check_call(('git', 'add', '.'))
+    assert dead.main(())
+    out, _ = capsys.readouterr()
+    assert out == 'g is never read, defined in f.py:1\n'
+
+
+def test_using_an_argument(git_dir):
+    git_dir.join('f.py').write('def f(g): return g\nf')
+    subprocess.check_call(('git', 'add', '.'))
+    assert not dead.main(())
+
+
+def test_ignore_unused_arguments_stubs(git_dir):
+    git_dir.join('f.py').write(
+        'import abc\n'
+        'from typing import overload\n'
+        'class C:\n'
+        '    @abc.abstractmethod\n'
+        '    def func(self, arg1):\n'
+        '        pass\n'
+        'def func2(arg2):\n'
+        '    pass\n'
+        'def func3(arg3):\n'
+        '    pass\n'
+        '@overload\n'
+        'def func4(arg4):\n'
+        '    ...\n'
+        'def func5(arg5):\n'
+        '    """docstring but trivial"""\n'
+        'def func6(arg6):\n'
+        '    raise NotImplementedError\n'
+        'def func7(arg7):\n'
+        '    raise NotImplementedError()\n'
+        'def func8(arg8):\n'
+        '    """docstring plus raise"""\n'
+        '    raise NotImplementedError()\n'
+        'C.func, func2, func3, func4, func5, func6, func7, func8\n',
+    )
+    subprocess.check_call(('git', 'add', '.'))
+    assert not dead.main(())
+
+
+def test_ignored_arguments(git_dir):
+    git_dir.join('f.py').write(
+        'class C:\n'
+        '    @classmethod\n'
+        '    def f(cls): return 1\n'  # allow conventional `cls` method
+        'C.f',
+    )
+    subprocess.check_call(('git', 'add', '.'))
+    assert not dead.main(())
