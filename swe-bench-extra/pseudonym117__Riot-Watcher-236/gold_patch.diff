diff --git a/src/riotwatcher/_apis/league_of_legends/ChampionMasteryApiV4.py b/src/riotwatcher/_apis/league_of_legends/ChampionMasteryApiV4.py
index d86dc7f..5f5d2e3 100644
--- a/src/riotwatcher/_apis/league_of_legends/ChampionMasteryApiV4.py
+++ b/src/riotwatcher/_apis/league_of_legends/ChampionMasteryApiV4.py
@@ -18,60 +18,75 @@ class ChampionMasteryApiV4(NamedEndpoint):
         """
         super().__init__(base_api, self.__class__.__name__)
 
-    def by_summoner(self, region: str, encrypted_summoner_id: str):
+    def by_puuid(self, region: str, puuid: str):
         """
         Get all champion mastery entries.
 
-        :param string region:                   the region to execute this request on
-        :param string encrypted_summoner_id:    Summoner ID associated with the player
+        :param string region:               the region to execute this request on
+        :param string puuid:                PUUID associated with the player
 
         :returns: List[ChampionMasteryDTO]: This object contains a list of Champion
                                             Mastery information for player and champion
                                             combination.
         """
         return self._request_endpoint(
-            self.by_summoner.__name__,
+            self.by_puuid.__name__,
             region,
-            ChampionMasteryApiV4Urls.by_summoner,
-            encrypted_summoner_id=encrypted_summoner_id,
+            ChampionMasteryApiV4Urls.by_puuid,
+            puuid=puuid,
         )
 
-    def by_summoner_by_champion(
-        self, region: str, encrypted_summoner_id: str, champion_id: int
-    ):
+    def by_puuid_by_champion(self, region: str, puuid: str, champion_id: int):
         """
         Get a champion mastery by player ID and champion ID.
 
-        :param string region:                   the region to execute this
-                                                request on
-        :param string encrypted_summoner_id:    Summoner ID associated with the player
-        :param long champion_id:                Champion ID to retrieve Champion
-                                                Mastery for
+        :param string region:         the region to execute this request on
+        :param string puuid:          PUUID associated with the player
+        :param long champion_id:      Champion ID to retrieve Champion Mastery for
 
         :returns: ChampionMasteryDTO: This object contains single Champion Mastery
                                       information for player and champion combination.
         """
         return self._request_endpoint(
-            self.by_summoner_by_champion.__name__,
+            self.by_puuid_by_champion.__name__,
             region,
-            ChampionMasteryApiV4Urls.by_summoner_by_champion,
-            encrypted_summoner_id=encrypted_summoner_id,
+            ChampionMasteryApiV4Urls.by_puuid_by_champion,
+            puuid=puuid,
             champion_id=champion_id,
         )
 
-    def scores_by_summoner(self, region: str, encrypted_summoner_id: str):
+    def top_by_puuid(self, region: str, puuid: str, count: int = None):
+        """
+        Get specified number of top champion mastery entries sorted by number of champion
+        points descending.
+
+        :param string region:   the region to execute this request on
+        :param string puuid:    PUUID associated with the player
+        :param int count:       Number of entries to retrieve, defaults to 3.
+
+        :returns: List[ChampionMasteryDto]
+        """
+        return self._request_endpoint(
+            self.top_by_puuid.__name__,
+            region,
+            ChampionMasteryApiV4Urls.top_by_puuid,
+            puuid=puuid,
+            count=count,
+        )
+
+    def scores_by_puuid(self, region: str, puuid: str):
         """
         Get a player's total champion mastery score, which is the sum of individual
         champion mastery levels
 
-        :param string region:                   the region to execute this request on
-        :param string encrypted_summoner_id:    Summoner ID associated with the player
+        :param string region:   the region to execute this request on
+        :param string puuid:    PUUID of the player
 
         :returns: int
         """
         return self._request_endpoint(
-            self.scores_by_summoner.__name__,
+            self.scores_by_puuid.__name__,
             region,
-            ChampionMasteryApiV4Urls.scores_by_summoner,
-            encrypted_summoner_id=encrypted_summoner_id,
+            ChampionMasteryApiV4Urls.scores_by_puuid,
+            puuid=puuid,
         )
diff --git a/src/riotwatcher/_apis/league_of_legends/urls/ChampionMasteryApiUrls.py b/src/riotwatcher/_apis/league_of_legends/urls/ChampionMasteryApiUrls.py
index 928b6a8..570b4f9 100644
--- a/src/riotwatcher/_apis/league_of_legends/urls/ChampionMasteryApiUrls.py
+++ b/src/riotwatcher/_apis/league_of_legends/urls/ChampionMasteryApiUrls.py
@@ -8,12 +8,11 @@ class ChampionMasteryV4Endpoint(LeagueEndpoint):
 
 
 class ChampionMasteryApiV4Urls:
-    by_summoner = ChampionMasteryV4Endpoint(
-        "/champion-masteries/by-summoner/{encrypted_summoner_id}"
+    by_puuid = ChampionMasteryV4Endpoint("/champion-masteries/by-puuid/{puuid}")
+    by_puuid_by_champion = ChampionMasteryV4Endpoint(
+        "/champion-masteries/by-puuid/{puuid}/by-champion/{champion_id}"
     )
-    by_summoner_by_champion = ChampionMasteryV4Endpoint(
-        "/champion-masteries/by-summoner/{encrypted_summoner_id}/by-champion/{champion_id}"
-    )
-    scores_by_summoner = ChampionMasteryV4Endpoint(
-        "/scores/by-summoner/{encrypted_summoner_id}"
+    top_by_puuid = ChampionMasteryV4Endpoint(
+        "/champion-masteries/by-puuid/{puuid}/top", count=int
     )
+    scores_by_puuid = ChampionMasteryV4Endpoint("/scores/by-puuid/{puuid}")
