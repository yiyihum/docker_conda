diff --git a/pycqed/analysis/tools/plotting.py b/pycqed/analysis/tools/plotting.py
index 72814d22..35b3b62f 100644
--- a/pycqed/analysis/tools/plotting.py
+++ b/pycqed/analysis/tools/plotting.py
@@ -85,6 +85,30 @@ def SI_prefix_and_scale_factor(val, unit=None):
     return scale_factor, unit
 
 
+def SI_val_to_msg_str(val: float, unit: str=None):
+    """
+    Takes in a value  with optional unit and returns a string tuple consisting
+    of (value_str, unit) where the value and unit are rescaled according to
+    SI prefixes.
+    """
+    validtypes = (float, int, np.integer, np.floating)
+    if unit in SI_UNITS and isinstance(val, validtypes):
+        if val == 0:
+            prefix_power = 0
+        else:
+            # The defined prefixes go down to -24 but this is below
+            # the numerical precision of python
+            prefix_power = np.clip(-15, (np.log10(abs(val))//3 * 3), 24)
+        # Determine SI prefix, number 8 corresponds to no prefix
+        SI_prefix_idx = int(prefix_power/3 + 8)
+        prefix = SI_PREFIXES[SI_prefix_idx]
+        # Convert the unit
+        val = val*10**-prefix_power
+        unit = prefix+unit
+
+    value_str = str(val)
+    return value_str, unit
+  
 def data_to_table_png(data: list, filename: str, title: str='',
                       close_fig: bool=True):
     """
@@ -110,7 +134,7 @@ def data_to_table_png(data: list, filename: str, title: str='',
     if close_fig:
         plt.close(fig)
 
-
+        
 def annotate_point_pair(ax, text, xy_start, xy_end, xycoords='data',
                         text_offset=(-10, -5), arrowprops=None, **kw):
     '''
diff --git a/pycqed/instrument_drivers/virtual_instruments/ins_mon/qc_snapshot_widget.py b/pycqed/instrument_drivers/virtual_instruments/ins_mon/qc_snapshot_widget.py
index 4392940c..49f38825 100644
--- a/pycqed/instrument_drivers/virtual_instruments/ins_mon/qc_snapshot_widget.py
+++ b/pycqed/instrument_drivers/virtual_instruments/ins_mon/qc_snapshot_widget.py
@@ -1,15 +1,6 @@
 # -*- coding: utf-8 -*-
 from pyqtgraph.Qt import QtGui
-from pycqed.analysis.tools.plotting import SI_UNITS, SI_PREFIXES
-import types
-import traceback
-import numpy as np
-
-try:
-    import metaarray
-    HAVE_METAARRAY = True
-except Exception:
-    HAVE_METAARRAY = False
+from pycqed.analysis.tools.plotting import SI_val_to_msg_str
 
 
 class QcSnaphotWidget(QtGui.QTreeWidget):
@@ -25,10 +16,12 @@ class QcSnaphotWidget(QtGui.QTreeWidget):
         self.setData(data)
         self.setColumnCount(4)
         self.setHeaderLabels(['Name', 'Value', 'Unit', 'Last update'])
+        self.nodes = {}
 
     def setData(self, data):
-        """data should be a QCoDes snapshot of a station."""
-        self.clear()
+        """
+        data should be a QCoDes snapshot of a station.
+        """
         self.buildTreeSnapshot(snapshot=data)
         self.resizeColumnToContents(0)
 
@@ -40,72 +33,35 @@ class QcSnaphotWidget(QtGui.QTreeWidget):
 
         for ins in sorted(snapshot.keys()):
             ins_snapshot = snapshot[ins]
-            node = QtGui.QTreeWidgetItem([ins, "", ""])
-            parent.addChild(node)
+            if ins not in self.nodes:
+                self.nodes[ins] = QtGui.QTreeWidgetItem([ins, "", ""])
+                parent.addChild(self.nodes[ins])
+
+            node = self.nodes[ins]
             for par_name in sorted(ins_snapshot['parameters'].keys()):
                 par_snap = ins_snapshot['parameters'][par_name]
                 # Depending on the type of data stored in value do different
-                # things.
+                # things, currently only blocks non-dicts
                 if not isinstance(par_snap['value'], dict):
-                    value_str, unit = par_val_to_msg(par_snap['value'],
-                                                     par_snap['unit'])
+                    value_str, unit = SI_val_to_msg_str(par_snap['value'],
+                                                        par_snap['unit'])
 
                     # Omits printing of the date to make it more readable
                     if par_snap['ts'] is not None:
                         latest_str = par_snap['ts'][11:]
                     else:
                         latest_str = ''
-                    par_node = QtGui.QTreeWidgetItem(
-                        [par_name, value_str, unit, latest_str])
-                    node.addChild(par_node)
-
-    def buildTree(self, data, parent, name='', hideRoot=False):
-        if hideRoot:
-            node = parent
-        else:
-            typeStr = type(data).__name__
-            if typeStr == 'instance':
-                typeStr += ": " + data.__class__.__name__
-            node = QtGui.QTreeWidgetItem([name, typeStr, ""])
-            parent.addChild(node)
-
-        # convert traceback to a list of strings
-        if isinstance(data, types.TracebackType):
-            data = list(
-                map(str.strip, traceback.format_list(
-                    traceback.extract_tb(data))))
-        elif HAVE_METAARRAY and (hasattr(data, 'implements')
-                                 and data.implements('MetaArray')):
-            data = {
-                'data': data.view(np.ndarray),
-                'meta': data.infoCopy()
-            }
-
-        if isinstance(data, dict):
-            for k in data.keys():
-                self.buildTree(data[k], node, str(k))
-        elif isinstance(data, list) or isinstance(data, tuple):
-            for i, d in enumerate(data):
-                self.buildTree(d, node, str(i))
-        else:
-            node.setText(2, str(data))
-
-
-def par_val_to_msg(val, unit=None):
-    validtypes = (float, int, np.integer, np.floating)
-    if unit in SI_UNITS and isinstance(val, validtypes):
-        if val == 0:
-            prefix_power = 0
-        else:
-            # The defined prefixes go down to -24 but this is below
-            # the numerical precision of python
-            prefix_power = np.clip(-15, (np.log10(abs(val))//3 * 3), 24)
-        # Determine SI prefix, number 8 corresponds to no prefix
-        SI_prefix_idx = int(prefix_power/3 + 8)
-        prefix = SI_PREFIXES[SI_prefix_idx]
-        # Convert the unit
-        val = val*10**-prefix_power
-        unit = prefix+unit
 
-    value_str = str(val)
-    return value_str, unit
+                    # Name of the node in the self.nodes dictionary
+                    param_node_name = '{}.{}'.format(ins, par_name)
+                    # If node does not yet exist, create a node
+                    if param_node_name not in self.nodes:
+                        param_node = QtGui.QTreeWidgetItem(
+                            [par_name, value_str, unit, latest_str])
+                        node.addChild(param_node)
+                        self.nodes[param_node_name] = param_node
+                    else:  # else update existing node
+                        param_node = self.nodes[param_node_name]
+                        param_node.setData(1, 0, value_str)
+                        param_node.setData(2, 0, unit)
+                        param_node.setData(3, 0, latest_str)
diff --git a/pycqed/instrument_drivers/virtual_instruments/instrument_monitor.py b/pycqed/instrument_drivers/virtual_instruments/instrument_monitor.py
index 12bf89f8..980a97b9 100644
--- a/pycqed/instrument_drivers/virtual_instruments/instrument_monitor.py
+++ b/pycqed/instrument_drivers/virtual_instruments/instrument_monitor.py
@@ -46,7 +46,6 @@ class InstrumentMonitor(Instrument):
             snapshot = self.station.snapshot()
             self.tree.setData(snapshot['instruments'])
 
-
     def _init_qt(self):
         # starting the process for the pyqtgraph plotting
         # You do not want a new process to be created every time you start a
@@ -57,7 +56,6 @@ class InstrumentMonitor(Instrument):
         ins_mon_mod = 'pycqed.instrument_drivers.virtual_instruments.ins_mon.qc_snapshot_widget'
         self.__class__.rpg = self.proc._import(ins_mon_mod)
 
-
     def create_tree(self, figsize=(1000, 600)):
 
         self.tree = self.rpg.QcSnaphotWidget()

