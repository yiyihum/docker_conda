diff --git a/screeninfo/__init__.py b/screeninfo/__init__.py
index ad1968a..2163dd4 100644
--- a/screeninfo/__init__.py
+++ b/screeninfo/__init__.py
@@ -1,2 +1,9 @@
 from .common import Enumerator, Monitor
-from .screeninfo import get_monitors
+from .screeninfo import ScreenInfoError, get_monitors
+
+__all__ = [
+    "Enumerator",
+    "Monitor",
+    "ScreenInfoError",
+    "get_monitors",
+]
diff --git a/screeninfo/screeninfo.py b/screeninfo/screeninfo.py
index 01ec49a..e10bb39 100644
--- a/screeninfo/screeninfo.py
+++ b/screeninfo/screeninfo.py
@@ -13,23 +13,20 @@ ENUMERATOR_MAP = {
 }
 
 
-def _get_monitors(enumerator: Enumerator) -> T.List[Monitor]:
-    return list(ENUMERATOR_MAP[enumerator].enumerate_monitors())
-
-
 def get_monitors(
     name: T.Union[Enumerator, str, None] = None
 ) -> T.List[Monitor]:
     """Returns a list of :class:`Monitor` objects based on active monitors."""
-    enumerator = Enumerator(name) if name is not None else None
+    if name is not None:
+        return list(ENUMERATOR_MAP[Enumerator(name)].enumerate_monitors())
 
-    if enumerator is not None:
-        return _get_monitors(enumerator)
-
-    for enumerator in Enumerator:
+    for enumerator in ENUMERATOR_MAP.keys():
         try:
-            return _get_monitors(enumerator)
-        except Exception:
-            pass
+            monitors = get_monitors(enumerator)
+        except Exception as ex:
+            monitors = []
+
+        if monitors:
+            return monitors
 
     raise ScreenInfoError("No enumerators available")

