diff --git a/CHANGELOG.md b/CHANGELOG.md
index a780331..e14d12f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,6 +9,12 @@ and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.
 
 <!-- The line "## <square-bracket>Unreleased</square-bracket>" is replaced by the ci/release.py script with the new release version and release date. -->
 
+## [Unreleased]
+
+### Fixed
+
+- Make the access modifiers work when called from a dict comprehension, list comprehension, lambda, or other code block that gets its own frame. Fixes [#5](https://github.com/fniessink/access-modifiers/issues/5).
+
 ## [0.1.3] - [2019-08-24]
 
 ### Fixed
diff --git a/access_modifiers/access_modifiers.py b/access_modifiers/access_modifiers.py
index 948c72c..b8a56d9 100644
--- a/access_modifiers/access_modifiers.py
+++ b/access_modifiers/access_modifiers.py
@@ -19,11 +19,15 @@ def privatemethod(method: Callable[..., ReturnType]) -> Callable[..., ReturnType
     def private_method_wrapper(*args, **kwargs) -> ReturnType:
         """Wrap the original method to make it private."""
         caller_frame = getframe(1)
+        caller_code = caller_frame.f_code
+        caller_name = caller_code.co_name
+        while caller_name.startswith("<"):  # Code is a <lambda>, <dictcomp>, <listcomp>, or other non-method code block
+            caller_frame = caller_frame.f_back
+            caller_code = caller_frame.f_code
+            caller_name = caller_code.co_name
         caller_instance = caller_frame.f_locals.get("self")
         if caller_instance is not args[0]:
             raise AccessException(f"Attempted call to private method {method} from another object")
-        caller_code = caller_frame.f_code
-        caller_name = caller_code.co_name
         # Look up the calling method to see if it's defined in the same class as the private method
         for caller_class in caller_instance.__class__.mro():
             caller = caller_class.__dict__.get(caller_name)
