diff --git a/tests/conftest.py b/tests/conftest.py
index aeb3cbf..eda236e 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -379,6 +379,43 @@ def example_spec_modifiers():
     return spec
 
 
+@pytest.fixture
+def example_spec_zero_staterror():
+    spec = {
+        "channels": [
+            {
+                "name": "SR",
+                "samples": [
+                    {
+                        "data": [5.0, 0.0],
+                        "modifiers": [
+                            {"data": None, "name": "mu", "type": "normfactor"},
+                            {
+                                "data": [1.0, 0.0],
+                                "name": "staterror_SR",
+                                "type": "staterror",
+                            },
+                        ],
+                        "name": "Signal",
+                    }
+                ],
+            }
+        ],
+        "measurements": [
+            {
+                "config": {
+                    "parameters": [],
+                    "poi": "mu",
+                },
+                "name": "zero staterror",
+            }
+        ],
+        "observations": [{"data": [5, 0], "name": "SR"}],
+        "version": "1.0.0",
+    }
+    return spec
+
+
 # code below allows marking tests as slow and adds --runslow to run them
 # implemented following https://docs.pytest.org/en/6.2.x/example/simple.html
 def pytest_addoption(parser):
diff --git a/tests/test_model_utils.py b/tests/test_model_utils.py
index 257a00d..b1369d6 100644
--- a/tests/test_model_utils.py
+++ b/tests/test_model_utils.py
@@ -147,7 +147,10 @@ def test_asimov_parameters(example_spec, example_spec_shapefactor, example_spec_
 
 
 def test_prefit_uncertainties(
-    example_spec, example_spec_multibin, example_spec_shapefactor
+    example_spec,
+    example_spec_multibin,
+    example_spec_shapefactor,
+    example_spec_zero_staterror,
 ):
     model = pyhf.Workspace(example_spec).model()
     unc = model_utils.prefit_uncertainties(model)
@@ -161,6 +164,10 @@ def test_prefit_uncertainties(
     unc = model_utils.prefit_uncertainties(model)
     assert np.allclose(unc, [0.0, 0.0, 0.0])
 
+    model = pyhf.Workspace(example_spec_zero_staterror).model()
+    unc = model_utils.prefit_uncertainties(model)
+    assert np.allclose(unc, [0.0, 0.2, 0.0])  # partially fixed staterror
+
 
 def test__hashable_model_key(example_spec):
     # key matches for two models built from the same spec
