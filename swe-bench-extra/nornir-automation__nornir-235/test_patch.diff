diff --git a/tests/core/test_connections.py b/tests/core/test_connections.py
index b400c14..54c277d 100644
--- a/tests/core/test_connections.py
+++ b/tests/core/test_connections.py
@@ -1,8 +1,16 @@
 from typing import Any, Dict, Optional
 
+import pytest
+
 from nornir.core.configuration import Config
-from nornir.core.connections import ConnectionPlugin
-from nornir.core.exceptions import ConnectionAlreadyOpen, ConnectionNotOpen
+from nornir.core.connections import ConnectionPlugin, Connections
+from nornir.core.exceptions import (
+    ConnectionAlreadyOpen,
+    ConnectionNotOpen,
+    ConnectionPluginNotRegistered,
+    ConnectionPluginAlreadyRegistered,
+)
+from nornir.plugins.connections import register_default_connection_plugins
 
 
 class DummyConnectionPlugin(ConnectionPlugin):
@@ -30,6 +38,10 @@ class DummyConnectionPlugin(ConnectionPlugin):
         self.connection = False
 
 
+class AnotherDummyConnectionPlugin(DummyConnectionPlugin):
+    pass
+
+
 def open_and_close_connection(task):
     task.host.open_connection("dummy")
     assert "dummy" in task.host.connections
@@ -68,29 +80,31 @@ def validate_params(task, conn, params):
 
 
 class Test(object):
+    @classmethod
+    def setup_class(cls):
+        Connections.deregister_all()
+        Connections.register("dummy", DummyConnectionPlugin)
+        Connections.register("dummy_no_overrides", DummyConnectionPlugin)
+
     def test_open_and_close_connection(self, nornir):
-        nornir.data.available_connections["dummy"] = DummyConnectionPlugin
         nr = nornir.filter(name="dev2.group_1")
         r = nr.run(task=open_and_close_connection, num_workers=1)
         assert len(r) == 1
         assert not r.failed
 
     def test_open_connection_twice(self, nornir):
-        nornir.data.available_connections["dummy"] = DummyConnectionPlugin
         nr = nornir.filter(name="dev2.group_1")
         r = nr.run(task=open_connection_twice, num_workers=1)
         assert len(r) == 1
         assert not r.failed
 
     def test_close_not_opened_connection(self, nornir):
-        nornir.data.available_connections["dummy"] = DummyConnectionPlugin
         nr = nornir.filter(name="dev2.group_1")
         r = nr.run(task=close_not_opened_connection, num_workers=1)
         assert len(r) == 1
         assert not r.failed
 
     def test_context_manager(self, nornir):
-        nornir.data.available_connections["dummy"] = DummyConnectionPlugin
         with nornir.filter(name="dev2.group_1") as nr:
             nr.run(task=a_task)
             assert "dummy" in nr.inventory.hosts["dev2.group_1"].connections
@@ -98,7 +112,6 @@ class Test(object):
         nornir.data.reset_failed_hosts()
 
     def test_validate_params_simple(self, nornir):
-        nornir.data.available_connections["dummy_no_overrides"] = DummyConnectionPlugin
         params = {
             "hostname": "127.0.0.1",
             "username": "root",
@@ -118,7 +131,6 @@ class Test(object):
         assert not r.failed
 
     def test_validate_params_overrides(self, nornir):
-        nornir.data.available_connections["dummy"] = DummyConnectionPlugin
         params = {
             "hostname": "overriden_hostname",
             "username": "root",
@@ -131,3 +143,51 @@ class Test(object):
         r = nr.run(task=validate_params, conn="dummy", params=params, num_workers=1)
         assert len(r) == 1
         assert not r.failed
+
+
+class TestConnectionPluginsRegistration(object):
+    def setup_method(self, method):
+        Connections.deregister_all()
+        Connections.register("dummy", DummyConnectionPlugin)
+        Connections.register("another_dummy", AnotherDummyConnectionPlugin)
+
+    def teardown_method(self, method):
+        Connections.deregister_all()
+        register_default_connection_plugins()
+
+    def test_count(self):
+        assert len(Connections.available) == 2
+
+    def test_register_new(self):
+        Connections.register("new_dummy", DummyConnectionPlugin)
+        assert "new_dummy" in Connections.available
+
+    def test_register_already_registered_same(self):
+        Connections.register("dummy", DummyConnectionPlugin)
+        assert Connections.available["dummy"] == DummyConnectionPlugin
+
+    def test_register_already_registered_new(self):
+        with pytest.raises(ConnectionPluginAlreadyRegistered):
+            Connections.register("dummy", AnotherDummyConnectionPlugin)
+
+    def test_deregister_existing(self):
+        Connections.deregister("dummy")
+        assert len(Connections.available) == 1
+        assert "dummy" not in Connections.available
+
+    def test_deregister_nonexistent(self):
+        with pytest.raises(ConnectionPluginNotRegistered):
+            Connections.deregister("nonexistent_dummy")
+
+    def test_deregister_all(self):
+        Connections.deregister_all()
+        assert Connections.available == {}
+
+    def test_get_plugin(self):
+        assert Connections.get_plugin("dummy") == DummyConnectionPlugin
+        assert Connections.get_plugin("another_dummy") == AnotherDummyConnectionPlugin
+        assert len(Connections.available) == 2
+
+    def test_nonexistent_plugin(self):
+        with pytest.raises(ConnectionPluginNotRegistered):
+            Connections.get_plugin("nonexistent_dummy")
