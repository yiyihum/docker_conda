diff --git a/csvkit/utilities/csvgrep.py b/csvkit/utilities/csvgrep.py
index df18eb8..c0b080b 100644
--- a/csvkit/utilities/csvgrep.py
+++ b/csvkit/utilities/csvgrep.py
@@ -35,7 +35,8 @@ class CSVGrep(CSVKitUtility):
                                     help='If specified, must be the path to a file. For each tested row, if any line in the file (stripped of line separators) is an exact match for the cell value, the row will pass.')
         self.argparser.add_argument('-i', '--invert-match', dest='inverse', action='store_true',
                                     help='If specified, select non-matching instead of matching rows.')
-
+        self.argparser.add_argument('-a', '--any-match', dest='any_match', action='store_true',
+                                    help='If specified, select rows where any column matches instead of all columns.')
     def main(self):
         if self.args.names_only:
             self.print_column_names()
@@ -67,7 +68,7 @@ class CSVGrep(CSVKitUtility):
             pattern = self.args.pattern
 
         patterns = dict((column_id, pattern) for column_id in column_ids)
-        filter_reader = FilteringCSVReader(rows, header=False, patterns=patterns, inverse=self.args.inverse)
+        filter_reader = FilteringCSVReader(rows, header=False, patterns=patterns, inverse=self.args.inverse, any_match=self.args.any_match)
 
         output = agate.csv.writer(self.output_file, **writer_kwargs)
         output.writerow(column_names)
diff --git a/csvkit/utilities/csvstack.py b/csvkit/utilities/csvstack.py
index 56e2051..cba10af 100644
--- a/csvkit/utilities/csvstack.py
+++ b/csvkit/utilities/csvstack.py
@@ -23,20 +23,15 @@ class CSVStack(CSVKitUtility):
                                     help='Use the filename of each input file as its grouping value. When specified, -g will be ignored.')
 
     def main(self):
-        self.input_files = []
-
-        for path in self.args.input_paths:
-            self.input_files.append(self._open_input_file(path))
-
-        if not self.input_files:
+        if not self.args.input_paths:
             self.argparser.error('You must specify at least one file to stack.')
 
-        if self.args.group_by_filenames:
-            groups = [os.path.basename(f.name) for f in self.input_files]
-        elif self.args.groups:
+        has_groups = self.args.group_by_filenames or self.args.groups
+
+        if self.args.groups and not self.args.group_by_filenames:
             groups = self.args.groups.split(',')
 
-            if len(groups) != len(self.input_files):
+            if len(groups) != len(self.args.input_paths):
                 self.argparser.error('The number of grouping values must be equal to the number of CSV files being stacked.')
         else:
             groups = None
@@ -45,7 +40,9 @@ class CSVStack(CSVKitUtility):
 
         output = agate.csv.writer(self.output_file, **self.writer_kwargs)
 
-        for i, f in enumerate(self.input_files):
+        for i, path in enumerate(self.args.input_paths):
+            f = self._open_input_file(path)
+
             if isinstance(self.args.skip_lines, int):
                 skip_lines = self.args.skip_lines
                 while skip_lines > 0:
@@ -56,12 +53,18 @@ class CSVStack(CSVKitUtility):
 
             rows = agate.csv.reader(f, **self.reader_kwargs)
 
+            if has_groups:
+                if groups:
+                    group = groups[i]
+                else:
+                    group = os.path.basename(f.name)
+
             # If we have header rows, use them
             if not self.args.no_header_row:
                 headers = next(rows, [])
 
                 if i == 0:
-                    if groups:
+                    if has_groups:
                         headers.insert(0, group_name)
 
                     output.writerow(headers)
@@ -72,19 +75,19 @@ class CSVStack(CSVKitUtility):
                 headers = make_default_headers(len(row))
 
                 if i == 0:
-                    if groups:
+                    if has_groups:
                         headers.insert(0, group_name)
 
                     output.writerow(headers)
 
-                if groups:
-                    row.insert(0, groups[i])
+                if has_groups:
+                    row.insert(0, group)
 
                 output.writerow(row)
 
             for row in rows:
-                if groups:
-                    row.insert(0, groups[i])
+                if has_groups:
+                    row.insert(0, group)
 
                 output.writerow(row)
 
