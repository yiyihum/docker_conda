diff --git a/tests/helpers.py b/tests/helpers.py
index f2c4542..bfab93e 100644
--- a/tests/helpers.py
+++ b/tests/helpers.py
@@ -386,7 +386,7 @@ class ProjectMock:
             return self
 
         if violations:
-            expected.append(f"Violations: ❌ {violations} to change manually.")
+            expected.append(f"Violations: ❌ {violations} to fix manually.")
         elif expected_str_or_lines:
             # If the number of violations was not passed but a list of errors was,
             # remove the violation count from the actual results.
diff --git a/tests/test_project.py b/tests/test_project.py
index 3136890..28aecae 100644
--- a/tests/test_project.py
+++ b/tests/test_project.py
@@ -13,6 +13,7 @@ from nitpick.constants import (
     PACKAGE_JSON,
     PRE_COMMIT_CONFIG_YAML,
     PYPROJECT_TOML,
+    RUN_NITPICK_INIT_OR_CONFIGURE_STYLE_MANUALLY,
     SETUP_CFG,
     SETUP_PY,
     TOX_INI,
@@ -20,7 +21,6 @@ from nitpick.constants import (
 from nitpick.core import Nitpick
 from nitpick.exceptions import QuitComplainingError
 from nitpick.project import Configuration, confirm_project_root, find_main_python_file
-from nitpick.style import StyleManager
 from nitpick.violations import ProjectViolations
 from tests.helpers import ProjectMock
 
@@ -123,12 +123,12 @@ def test_django_project_structure(tmp_path):
 
 
 def test_when_no_config_file_the_default_style_is_requested(tmp_path, caplog):
-    """There is a root dir (setup.py), but no config file."""
-    project = ProjectMock(tmp_path, pyproject_toml=False, setup_py=True).api_check(offline=True)
-    style_url = StyleManager.get_default_style_url()
+    """There is a root dir (setup.py), but no style file. The user should explicitly set the style, no default will be used."""
+    project = ProjectMock(tmp_path, pyproject_toml=False, setup_py=True)
+    error = f"NIP004 No style file configured.{RUN_NITPICK_INIT_OR_CONFIGURE_STYLE_MANUALLY}"
+    project.flake8().assert_single_error(error).cli_run(error, exit_code=1)
     assert project.nitpick_instance.project.read_configuration() == Configuration(None, [], "")
     assert "Config file: none found {}" in caplog.messages
-    assert f"Using default remote Nitpick style: {style_url} {{}}" in caplog.messages
 
 
 @pytest.mark.parametrize("config_file", [DOT_NITPICK_TOML, PYPROJECT_TOML])
diff --git a/tests/test_violations.py b/tests/test_violations.py
index eac967f..198e665 100644
--- a/tests/test_violations.py
+++ b/tests/test_violations.py
@@ -37,12 +37,12 @@ def test_reporter():
     reporter.increment()
     assert reporter.manual == 1
     assert reporter.fixed == 0
-    assert reporter.get_counts() == "Violations: ❌ 1 to change manually."
+    assert reporter.get_counts() == "Violations: ❌ 1 to fix manually."
 
     reporter.increment(True)
     assert reporter.manual == 1
     assert reporter.fixed == 1
-    assert reporter.get_counts() == "Violations: ✅ 1 fixed, ❌ 1 to change manually."
+    assert reporter.get_counts() == "Violations: ✅ 1 fixed, ❌ 1 to fix manually."
 
     reporter.reset()
     assert reporter.manual == 0
