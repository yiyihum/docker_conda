diff --git a/dwave/cloud/api/client.py b/dwave/cloud/api/client.py
index 470f6e0..d330eda 100644
--- a/dwave/cloud/api/client.py
+++ b/dwave/cloud/api/client.py
@@ -320,9 +320,10 @@ class DWaveAPIClient:
 
         retry = urllib3.Retry(**kwargs)
 
-        # note: `Retry.BACKOFF_MAX` can't be set on construction
+        # note: prior to `urllib3==2`, backoff_max had to be set manually on object
         if backoff_max is not None:
-            retry.BACKOFF_MAX = backoff_max
+            # handle `urllib3>=1.21.1,<1.27` AND `urllib3>=1.21.1,<3`
+            retry.BACKOFF_MAX = retry.backoff_max = backoff_max
 
         return retry
 
diff --git a/dwave/cloud/client/base.py b/dwave/cloud/client/base.py
index 28a9e9a..43f797e 100644
--- a/dwave/cloud/client/base.py
+++ b/dwave/cloud/client/base.py
@@ -622,11 +622,7 @@ class Client(object):
 
         # create http idempotent Retry config
         def get_retry_conf():
-            # need a subclass to override the backoff_max
-            class Retry(urllib3.Retry):
-                BACKOFF_MAX = self.http_retry_backoff_max
-
-            return Retry(
+            retry = urllib3.Retry(
                 total=self.http_retry_total,
                 connect=self.http_retry_connect,
                 read=self.http_retry_read,
@@ -637,6 +633,12 @@ class Client(object):
                 raise_on_status=True,
                 respect_retry_after_header=True)
 
+            if self.http_retry_backoff_max is not None:
+                # handle `urllib3>=1.21.1,<1.27` AND `urllib3>=1.21.1,<3`
+                retry.BACKOFF_MAX = retry.backoff_max = self.http_retry_backoff_max
+
+            return retry
+
         session = BaseUrlSession(base_url=endpoint)
         session.mount('http://',
             TimeoutingHTTPAdapter(timeout=self.request_timeout,
