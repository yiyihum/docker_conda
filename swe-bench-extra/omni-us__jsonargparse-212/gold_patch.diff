diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 23e37a4..5692d1a 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -28,6 +28,8 @@ Fixed
 - List type with empty list default causes failure `PyLaia#48
   <https://github.com/jpuigcerver/PyLaia/issues/48>`__.
 - Pure dataclass instance default being considered as a subclass type.
+- Discard ``init_args`` after ``class_path`` change causes error `#205
+  <https://github.com/omni-us/jsonargparse/issues/205>`__.
 
 
 v4.18.0 (2022-11-29)
diff --git a/jsonargparse/namespace.py b/jsonargparse/namespace.py
index cc62bc7..affd615 100644
--- a/jsonargparse/namespace.py
+++ b/jsonargparse/namespace.py
@@ -244,7 +244,7 @@ class Namespace(argparse.Namespace):
             if isinstance(val, Namespace):
                 if branches:
                     yield key, val
-                for subkey, subval in val.items():
+                for subkey, subval in val.items(branches):
                     yield key+'.'+del_clash_mark(subkey), subval
             else:
                 yield key, val
diff --git a/jsonargparse/typehints.py b/jsonargparse/typehints.py
index 064c6d1..1edc7c8 100644
--- a/jsonargparse/typehints.py
+++ b/jsonargparse/typehints.py
@@ -295,8 +295,12 @@ class ActionTypeHint(Action):
 
     @staticmethod
     def discard_init_args_on_class_path_change(parser_or_action, prev_cfg, cfg):
+        if isinstance(prev_cfg, dict):
+            return
         keys = list(prev_cfg.keys(branches=True))
-        for key in keys:
+        num = 0
+        while num < len(keys):
+            key = keys[num]
             prev_val = prev_cfg.get(key)
             val = cfg.get(key)
             if is_subclass_spec(prev_val) and is_subclass_spec(val):
@@ -305,6 +309,14 @@ class ActionTypeHint(Action):
                     action = _find_action(parser_or_action, key)
                 if isinstance(action, ActionTypeHint):
                     discard_init_args_on_class_path_change(action, prev_val, val)
+                    prev_sub_cfg = prev_val.get('init_args')
+                    if prev_sub_cfg:
+                        sub_add_kwargs = getattr(action, 'sub_add_kwargs', {})
+                        subparser = ActionTypeHint.get_class_parser(val['class_path'], sub_add_kwargs)
+                        sub_cfg = val.get('init_args', Namespace())
+                        ActionTypeHint.discard_init_args_on_class_path_change(subparser, prev_sub_cfg, sub_cfg)
+                    keys = keys[:num+1] + [k for k in keys[num+1:] if not k.startswith(key+'.')]
+            num += 1
 
 
     @staticmethod
