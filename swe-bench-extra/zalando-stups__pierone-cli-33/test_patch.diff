diff --git a/setup.py b/setup.py
old mode 100644
new mode 100755
diff --git a/tests/fixtures/clair_response.json b/tests/fixtures/clair_response.json
new file mode 100644
index 0000000..2638daa
--- /dev/null
+++ b/tests/fixtures/clair_response.json
@@ -0,0 +1,70 @@
+{
+  "Layer": {
+    "Name": "sha256:0000000000000000000000000000000000000000000000000000000000000000",
+    "NamespaceName": "ubuntu:16.04",
+    "ParentName": "sha256:0000000000000000000000000000000000000000000000000000000000000000",
+    "IndexedByVersion": 2,
+    "Features": [
+      {
+        "Name": "python3.5",
+        "NamespaceName": "ubuntu:16.04",
+        "Version": "3.5.1-10",
+        "AddedBy": "sha256:0000000000000000000000000000000000000000000000000000000000000000"
+      },
+      {
+        "Name": "python-pip",
+        "NamespaceName": "ubuntu:16.04",
+        "Version": "8.1.1-2",
+        "Vulnerabilities": [
+          {
+            "Name": "CVE-2013-5123",
+            "NamespaceName": "ubuntu:16.04",
+            "Description": "The mirroring support (-M, --use-mirrors) was implemented without any sort of authenticity checks and is downloaded over plaintext HTTP. Further more by default it will dynamically discover the list of available mirrors by querying a DNS entry and extrapolating from that data. It does not attempt to use any sort of method of securing this querying of the DNS like DNSSEC. Software packages are downloaded over these insecure links, unpacked, and then typically the setup.py python file inside of them is executed.",
+            "Link": "http://people.ubuntu.com/~ubuntu-security/cve/CVE-2013-5123",
+            "Severity": "Medium"
+          },
+          {
+            "Name": "CVE-2014-8991",
+            "NamespaceName": "ubuntu:16.04",
+            "Description": "pip 1.3 through 1.5.6 allows local users to cause a denial of service (prevention of package installation) by creating a /tmp/pip-build-* file for another user.",
+            "Link": "http://people.ubuntu.com/~ubuntu-security/cve/CVE-2014-8991",
+            "Severity": "Low",
+            "Metadata": {
+              "NVD": {
+                "CVSSv2": {
+                  "Score": 2.1,
+                  "Vectors": "AV:L/AC:L/Au:N/C:N/I:N"
+                }
+              }
+            }
+          }
+        ],
+        "AddedBy": "sha256:0000000000000000000000000000000000000000000000000000000000000000"
+      },
+      {
+        "Name": "openssl",
+        "NamespaceName": "ubuntu:16.04",
+        "Version": "1.0.2g-1ubuntu4",
+        "Vulnerabilities": [
+          {
+            "Name": "CVE-2016-2108",
+            "NamespaceName": "ubuntu:16.04",
+            "Description": "The ASN.1 implementation in OpenSSL before 1.0.1o and 1.0.2 before 1.0.2c allows remote attackers to execute arbitrary code or cause a denial of service (buffer underflow and memory corruption) via an ANY field in crafted serialized data, aka the \"negative zero\" issue.",
+            "Link": "http://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-2108",
+            "Severity": "High",
+            "Metadata": {
+              "NVD": {
+                "CVSSv2": {
+                  "Score": 10,
+                  "Vectors": "AV:N/AC:L/Au:N/C:C/I:C"
+                }
+              }
+            },
+            "FixedBy": "1.0.2g-1ubuntu4.1"
+          }
+        ],
+        "AddedBy": "sha256:0000000000000000000000000000000000000000000000000000000000000000"
+      }
+    ]
+  }
+}
diff --git a/tests/test_api.py b/tests/test_api.py
index 5cb2fc7..3548e01 100644
--- a/tests/test_api.py
+++ b/tests/test_api.py
@@ -1,9 +1,11 @@
 import json
 import os
 from unittest.mock import MagicMock
-import yaml
-from pierone.api import docker_login, DockerImage, get_latest_tag, Unauthorized, image_exists
+
 import pytest
+import yaml
+from pierone.api import (DockerImage, Unauthorized, docker_login,
+                         get_latest_tag, image_exists)
 
 
 def test_docker_login(monkeypatch, tmpdir):
@@ -12,22 +14,22 @@ def test_docker_login(monkeypatch, tmpdir):
     response.status_code = 200
     response.json.return_value = {'access_token': '12377'}
     monkeypatch.setattr('requests.get', MagicMock(return_value=response))
-    token = docker_login('https://pierone.example.org', 'services', 'mytok',
-                         'myuser', 'mypass', 'https://token.example.org', use_keyring=False)
+    docker_login('https://pierone.example.org', 'services', 'mytok',
+                 'myuser', 'mypass', 'https://token.example.org', use_keyring=False)
     path = os.path.expanduser('~/.docker/config.json')
     with open(path) as fd:
         data = yaml.safe_load(fd)
-    assert {'auth': 'b2F1dGgyOjEyMzc3', 'email': 'no-mail-required@example.org'} == data.get('auths').get('https://pierone.example.org')
+        assert {'auth': 'b2F1dGgyOjEyMzc3', 'email': 'no-mail-required@example.org'} == data.get('auths').get('https://pierone.example.org')
 
 
 def test_docker_login_service_token(monkeypatch, tmpdir):
     monkeypatch.setattr('os.path.expanduser', lambda x: x.replace('~', str(tmpdir)))
     monkeypatch.setattr('tokens.get', lambda x: '12377')
-    token = docker_login('https://pierone.example.org', None, 'mytok', 'myuser', 'mypass', 'https://token.example.org')
+    docker_login('https://pierone.example.org', None, 'mytok', 'myuser', 'mypass', 'https://token.example.org')
     path = os.path.expanduser('~/.docker/config.json')
     with open(path) as fd:
         data = yaml.safe_load(fd)
-    assert {'auth': 'b2F1dGgyOjEyMzc3', 'email': 'no-mail-required@example.org'} == data.get('auths').get('https://pierone.example.org')
+        assert {'auth': 'b2F1dGgyOjEyMzc3', 'email': 'no-mail-required@example.org'} == data.get('auths').get('https://pierone.example.org')
 
 
 def test_keep_dockercfg_entries(monkeypatch, tmpdir):
@@ -49,12 +51,12 @@ def test_keep_dockercfg_entries(monkeypatch, tmpdir):
     with open(path, 'w') as fd:
         json.dump(existing_data, fd)
 
-    token = docker_login('https://pierone.example.org', 'services', 'mytok',
-                         'myuser', 'mypass', 'https://token.example.org', use_keyring=False)
+    docker_login('https://pierone.example.org', 'services', 'mytok',
+                 'myuser', 'mypass', 'https://token.example.org', use_keyring=False)
     with open(path) as fd:
         data = yaml.safe_load(fd)
-    assert {'auth': 'b2F1dGgyOjEyMzc3', 'email': 'no-mail-required@example.org'} == data.get('auths', {}).get('https://pierone.example.org')
-    assert existing_data.get(key) == data.get(key)
+        assert {'auth': 'b2F1dGgyOjEyMzc3', 'email': 'no-mail-required@example.org'} == data.get('auths', {}).get('https://pierone.example.org')
+        assert existing_data.get(key) == data.get(key)
 
 
 def test_get_latest_tag(monkeypatch):
diff --git a/tests/test_cli.py b/tests/test_cli.py
index 6f58d15..6282253 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -1,9 +1,9 @@
 import json
 import os
-from click.testing import CliRunner
+import re
 from unittest.mock import MagicMock
-import yaml
-import zign.api
+
+from click.testing import CliRunner
 from pierone.cli import cli
 
 
@@ -40,6 +40,7 @@ def test_login_given_url_option(monkeypatch, tmpdir):
     runner = CliRunner()
 
     config = {}
+
     def store(data, section):
         config.update(**data)
 
@@ -50,9 +51,9 @@ def test_login_given_url_option(monkeypatch, tmpdir):
     monkeypatch.setattr('requests.get', lambda x, timeout: response)
 
     with runner.isolated_filesystem():
-        result = runner.invoke(cli, ['login'], catch_exceptions=False, input='pieroneurl\n')
+        runner.invoke(cli, ['login'], catch_exceptions=False, input='pieroneurl\n')
         assert config == {'url': 'https://pieroneurl'}
-        result = runner.invoke(cli, ['login', '--url', 'someotherregistry'], catch_exceptions=False)
+        runner.invoke(cli, ['login', '--url', 'someotherregistry'], catch_exceptions=False)
         with open(os.path.join(str(tmpdir), '.docker/config.json')) as fd:
             data = json.load(fd)
         assert data['auths']['https://pieroneurl']['auth'] == 'b2F1dGgyOnRvazEyMw=='
@@ -65,7 +66,7 @@ def test_scm_source(monkeypatch, tmpdir):
     response.json.return_value = {'url': 'git:somerepo', 'revision': 'myrev123'}
 
     runner = CliRunner()
-    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url':'foobar'})
+    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url': 'foobar'})
     monkeypatch.setattr('zign.api.get_token', MagicMock(return_value='tok123'))
     monkeypatch.setattr('pierone.cli.get_tags', MagicMock(return_value={}))
     monkeypatch.setattr('os.path.expanduser', lambda x: x.replace('~', str(tmpdir)))
@@ -75,12 +76,13 @@ def test_scm_source(monkeypatch, tmpdir):
         assert 'myrev123' in result.output
         assert 'git:somerepo' in result.output
 
+
 def test_image(monkeypatch, tmpdir):
     response = MagicMock()
     response.json.return_value = [{'name': '1.0', 'team': 'stups', 'artifact': 'kio'}]
 
     runner = CliRunner()
-    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url':'foobar'})
+    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url': 'foobar'})
     monkeypatch.setattr('zign.api.get_token', MagicMock(return_value='tok123'))
     monkeypatch.setattr('os.path.expanduser', lambda x: x.replace('~', str(tmpdir)))
     monkeypatch.setattr('pierone.api.session.get', MagicMock(return_value=response))
@@ -93,16 +95,130 @@ def test_image(monkeypatch, tmpdir):
 
 def test_tags(monkeypatch, tmpdir):
     response = MagicMock()
-    response.json.return_value = [{'name': '1.0', 'created_by': 'myuser', 'created': '2015-08-20T08:14:59.432Z'}]
+    response.json.return_value = [
+        # Former pierone payload
+        {
+            'name': '1.0',
+            'created_by': 'myuser',
+            'created': '2015-08-20T08:14:59.432Z'
+        },
+        # New pierone payload with clair but no information about CVEs -- old images
+        {
+            "name": "1.1",
+            "created": "2016-05-19T15:23:41.065Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": None,
+            "severity_fix_available": None,
+            "severity_no_fix_available": None
+        },
+        # New pierone payload with clair but no information about CVEs -- still processing
+        {
+            "name": "1.1",
+            "created": "2016-05-19T15:23:41.065Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": "sha256:here",
+            "severity_fix_available": None,
+            "severity_no_fix_available": None
+        },
+        # New pierone payload with clair but could not figure out
+        {
+            "name": "1.1",
+            "created": "2016-05-19T15:23:41.065Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": "sha256:here",
+            "severity_fix_available": "clair:CouldntFigureOut",
+            "severity_no_fix_available": "clair:CouldntFigureOut"
+        },
+        # New pierone payload with clair with no CVEs found
+        {
+            "name": "1.1",
+            "created": "2016-05-19T15:23:41.065Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": "sha256:here",
+            "severity_fix_available": "clair:NoCVEsFound",
+            "severity_no_fix_available": "clair:NoCVEsFound"
+        },
+        # New pierone payload with clair input and info about CVEs
+        {
+            "name": "1.2",
+            "created": "2016-05-23T13:29:17.753Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": "sha256:here",
+            "severity_fix_available": "High",
+            "severity_no_fix_available": "Medium"
+        }
+    ]
 
     runner = CliRunner()
-    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url':'foobar'})
+    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url': 'foobar'})
     monkeypatch.setattr('zign.api.get_token', MagicMock(return_value='tok123'))
     monkeypatch.setattr('os.path.expanduser', lambda x: x.replace('~', str(tmpdir)))
     monkeypatch.setattr('pierone.api.session.get', MagicMock(return_value=response))
     with runner.isolated_filesystem():
         result = runner.invoke(cli, ['tags', 'myteam', 'myart'], catch_exceptions=False)
         assert '1.0' in result.output
+        assert 'Fixable CVE Severity' in result.output
+        assert 'Unfixable CVE Severity' in result.output
+        assert 'TOO_OLD' in result.output
+        assert 'NOT_PROCESSED_YET' in result.output
+        assert 'NO_CVES_FOUND' in result.output
+        assert re.search('HIGH\s+MEDIUM', result.output), 'Should how information about CVEs'
+
+
+def test_cves(monkeypatch, tmpdir):
+    pierone_service_payload = [
+        # Former pierone payload
+        {
+            'name': '1.0',
+            'created_by': 'myuser',
+            'created': '2015-08-20T08:14:59.432Z'
+        },
+        # New pierone payload with clair but no information about CVEs
+        {
+            "name": "1.1",
+            "created": "2016-05-19T15:23:41.065Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": None,
+            "severity_fix_available": None,
+            "severity_no_fix_available": None
+        },
+        # New pierone payload with clair input and info about CVEs
+        {
+            "name": "1.2",
+            "created": "2016-05-23T13:29:17.753Z",
+            "created_by": "myuser",
+            "image": "sha256:here",
+            "clair_id": "sha256:here",
+            "severity_fix_available": "High",
+            "severity_no_fix_available": "Medium"
+        }
+    ]
+
+    with open(os.path.join(os.path.dirname(__file__),
+                           'fixtures', 'clair_response.json'), 'r') as fixture:
+        clair_service_payload = json.loads(fixture.read())
+
+    response = MagicMock()
+    response.json.side_effect = [
+        pierone_service_payload,
+        clair_service_payload
+    ]
+
+    runner = CliRunner()
+    monkeypatch.setattr('stups_cli.config.load_config', lambda x: {'url': 'foobar', 'clair_url': 'barfoo'})
+    monkeypatch.setattr('zign.api.get_token', MagicMock(return_value='tok123'))
+    monkeypatch.setattr('os.path.expanduser', lambda x: x.replace('~', str(tmpdir)))
+    monkeypatch.setattr('pierone.api.session.get', MagicMock(return_value=response))
+    with runner.isolated_filesystem():
+        result = runner.invoke(cli, ['cves', 'myteam', 'myart', '1.2'], catch_exceptions=False)
+        assert 'CVE-2013-5123' in result.output
+        assert re.match('[^\n]+\n[^\n]+HIGH', result.output), 'Results should be ordered by highest priority'
 
 
 def test_latest(monkeypatch, tmpdir):
