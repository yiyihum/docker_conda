diff --git a/setup.py b/setup.py
index 6c934d0..e2fa579 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@ from setuptools import setup
 
 setup(
     name='snapcast',
-    version='2.3.3',
+    version='2.3.4',
     description='Control Snapcast.',
     url='https://github.com/happyleavesaoc/python-snapcast/',
     license='MIT',
diff --git a/snapcast/control/group.py b/snapcast/control/group.py
index 7935b2f..3b9a8be 100644
--- a/snapcast/control/group.py
+++ b/snapcast/control/group.py
@@ -105,8 +105,10 @@ class Snapgroup():
     @property
     def friendly_name(self):
         """Get friendly name."""
-        return self.name if self.name != '' else "+".join(
-            sorted([self._server.client(c).friendly_name for c in self.clients]))
+        fname =  self.name if self.name != '' else "+".join(
+            sorted([self._server.client(c).friendly_name for c in self.clients
+                    if c in [client.identifier for client in self._server.clients]]))
+        return fname if fname != '' else self.identifier
 
     @property
     def clients(self):
diff --git a/snapcast/control/server.py b/snapcast/control/server.py
index e93f5b1..afff4b3 100644
--- a/snapcast/control/server.py
+++ b/snapcast/control/server.py
@@ -284,7 +284,6 @@ class Snapserver():
                 new_groups[group.get('id')].update(group)
             else:
                 new_groups[group.get('id')] = Snapgroup(self, group)
-            _LOGGER.debug('group found: %s', new_groups[group.get('id')])
             for client in group.get('clients'):
                 if client.get('id') in self._clients:
                     new_clients[client.get('id')] = self._clients[client.get('id')]
@@ -292,6 +291,7 @@ class Snapserver():
                 else:
                     new_clients[client.get('id')] = Snapclient(self, client)
                 _LOGGER.debug('client found: %s', new_clients[client.get('id')])
+            _LOGGER.debug('group found: %s', new_groups[group.get('id')])
         self._groups = new_groups
         self._clients = new_clients
         self._streams = new_streams
@@ -402,14 +402,21 @@ class Snapserver():
 
     def _on_stream_update(self, data):
         """Handle stream update."""
-        self._streams[data.get('id')].update(data.get('stream'))
-        _LOGGER.debug('stream %s updated', self._streams[data.get('id')].friendly_name)
-        self._streams[data.get("id")].callback()
-        for group in self._groups.values():
-            if group.stream == data.get('id'):
-                group.callback()
-                for clientID in group.clients:
-                    self._clients.get(clientID).callback()
+        if data.get('id') in self._streams:
+            self._streams[data.get('id')].update(data.get('stream'))
+            _LOGGER.debug('stream %s updated', self._streams[data.get('id')].friendly_name)
+            self._streams[data.get("id")].callback()
+            for group in self._groups.values():
+                if group.stream == data.get('id'):
+                    group.callback()
+                    for clientID in group.clients:
+                        self._clients.get(clientID).callback()
+        else:
+            if data.get('stream', {}).get('uri', {}).get('query', {}).get('codec') == 'null':
+                _LOGGER.debug('stream %s is input-only, ignore', data.get('id'))
+            else:
+                _LOGGER.info('stream %s not found, synchronize', data.get('id'))
+                self.synchronize(self.status())
 
     def set_on_update_callback(self, func):
         """Set on update callback function."""
