diff --git a/data_extractor/abc.py b/data_extractor/abc.py
index 115b15e..5c3df63 100644
--- a/data_extractor/abc.py
+++ b/data_extractor/abc.py
@@ -52,7 +52,10 @@ class ComplexExtractorMeta(type):
 
                     line = line.strip()
                     raise SyntaxError(
-                        f"{line!r} overwriten the parameter {key!r} of '{name}.__init__' method.",
+                        (
+                            f"{line!r} overwriten the parameter {key!r} of '{name}.__init__' method. "
+                            f"Please using the optional parameter name={key!r} in {attr!r} to avoid overwriting parameter name."
+                        ),
                         (filename, lineno, index, line),
                     )
 
diff --git a/data_extractor/item.py b/data_extractor/item.py
index c3dcbd0..0156388 100644
--- a/data_extractor/item.py
+++ b/data_extractor/item.py
@@ -18,6 +18,7 @@ class Field(AbstractExtractor):
     Extract data by cooperating with extractor.
 
     :param extractor: The object for data extracting base on :class:`data_extractor.abc.SimpleExtractor`.
+    :param name: Optional parameter for special field name.
     :param default: Default value when not found. Default: :data:`data_extractor.utils.sentinel`.
     :param is_many: Indicate the data which extractor extracting is more than one.
 
@@ -28,6 +29,7 @@ class Field(AbstractExtractor):
     def __init__(
         self,
         extractor: SimpleExtractorBase,
+        name: str = None,
         default: Any = sentinel,
         is_many: bool = False,
     ):
@@ -38,11 +40,22 @@ class Field(AbstractExtractor):
             raise ValueError(f"Can't both set default={default} and is_many=True")
 
         self.extractor = extractor
+        self.name = name
         self.default = default
         self.is_many = is_many
 
     def __repr__(self) -> str:
-        return f"{self.__class__.__name__}({self.extractor!r}, default={self.default!r}, is_many={self.is_many})"
+        args = [f"{self.extractor!r}"]
+        if self.name is not None:
+            args.append(f"name={self.name!r}")
+
+        if self.default is not sentinel:
+            args.append(f"default={self.default!r}")
+
+        if self.is_many:
+            args.append(f"is_many={self.is_many!r}")
+
+        return f"{self.__class__.__name__}({', '.join(args)})"
 
     def extract(self, element: Any) -> Any:
         """
@@ -88,7 +101,11 @@ class Item(Field):
         rv = {}
         for field in self.field_names():
             try:
-                rv[field] = getattr(self, field).extract(element)
+                extractor = getattr(self, field)
+                if extractor.name is not None:
+                    field = extractor.name
+
+                rv[field] = extractor.extract(element)
             except ExtractError as exc:
                 exc._append(extractor=self)
                 raise exc
