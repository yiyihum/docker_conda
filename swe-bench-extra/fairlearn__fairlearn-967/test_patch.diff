diff --git a/test/unit/metrics/test_extra_metrics.py b/test/unit/metrics/test_extra_metrics.py
index f26cbba..4f68dc1 100644
--- a/test/unit/metrics/test_extra_metrics.py
+++ b/test/unit/metrics/test_extra_metrics.py
@@ -36,17 +36,17 @@ class TestGetLabelsForConfusionMatrix:
         r1 = _get_labels_for_confusion_matrix([-1], None)
         assert np.array_equal(r1, [-1, 1])
         r2 = _get_labels_for_confusion_matrix([1], None)
-        assert np.array_equal(r2, [None, 1])
+        assert np.array_equal(r2, [np.iinfo(np.int64).min, 1])
 
     def test_single_value_numeric_pos_label(self):
         r0 = _get_labels_for_confusion_matrix([0], 3)
         assert np.array_equal(r0, [0, 3])
         r1 = _get_labels_for_confusion_matrix([0], 0)
-        assert np.array_equal(r1, [None, 0])
+        assert np.array_equal(r1, [np.iinfo(np.int64).min, 0])
 
     def test_single_value_alpha_pos_label(self):
         r0 = _get_labels_for_confusion_matrix(['a'], 'a')
-        assert np.array_equal(r0, [None, 'a'])
+        assert np.array_equal(r0, [np.iinfo(np.int64).min, 'a'])
         r1 = _get_labels_for_confusion_matrix(['a'], 0)
         assert np.array_equal(r1, ['a', 0])
 
diff --git a/test/unit/preprocessing/linear_dep_remover/test_sklearn_compat.py b/test/unit/preprocessing/linear_dep_remover/test_sklearn_compat.py
index 257a4fe..eebd8b4 100644
--- a/test/unit/preprocessing/linear_dep_remover/test_sklearn_compat.py
+++ b/test/unit/preprocessing/linear_dep_remover/test_sklearn_compat.py
@@ -4,51 +4,44 @@
 import pytest
 import numpy as np
 import pandas as pd
-from sklearn.utils import estimator_checks
+from sklearn.utils.estimator_checks import parametrize_with_checks
 
 from fairlearn.preprocessing import CorrelationRemover
 
 
-@pytest.mark.parametrize(
-    "test_fn",
+@parametrize_with_checks(
     [
-        # transformer checks
-        estimator_checks.check_transformer_general,
-        estimator_checks.check_transformers_unfitted,
-        # general estimator checks
-        estimator_checks.check_fit2d_predict1d,
-        estimator_checks.check_methods_subset_invariance,
-        estimator_checks.check_fit2d_1sample,
-        estimator_checks.check_fit2d_1feature,
-        estimator_checks.check_get_params_invariance,
-        estimator_checks.check_set_params,
-        estimator_checks.check_dict_unchanged,
-        estimator_checks.check_dont_overwrite_parameters,
-        # nonmeta_checks
-        estimator_checks.check_estimators_dtypes,
-        estimator_checks.check_fit_score_takes_y,
-        estimator_checks.check_dtype_object,
-        estimator_checks.check_sample_weights_pandas_series,
-        estimator_checks.check_sample_weights_list,
-        estimator_checks.check_estimators_fit_returns_self,
-        estimator_checks.check_complex_data,
-        estimator_checks.check_estimators_empty_data_messages,
-        estimator_checks.check_pipeline_consistency,
-        estimator_checks.check_estimators_nan_inf,
-        estimator_checks.check_estimators_overwrite_params,
-        estimator_checks.check_estimator_sparse_data,
-        estimator_checks.check_estimators_pickle,
+        CorrelationRemover(sensitive_feature_ids=[]),
+        CorrelationRemover(sensitive_feature_ids=[0]),
     ]
 )
-def test_estimator_checks(test_fn):
-    test_fn(CorrelationRemover.__name__, CorrelationRemover(sensitive_feature_ids=[]))
-    test_fn(CorrelationRemover.__name__, CorrelationRemover(sensitive_feature_ids=[0]))
+def test_sklearn_compatible_estimator(estimator, check):
+    check(estimator)
 
 
 def test_linear_dependence():
-    X = np.array([[0, 0, 1, 1, ],
-                  [1, 1, 2, 2, ],
-                  [0.1, 0.2, 1.2, 1.1, ]]).T
+    X = np.array(
+        [
+            [
+                0,
+                0,
+                1,
+                1,
+            ],
+            [
+                1,
+                1,
+                2,
+                2,
+            ],
+            [
+                0.1,
+                0.2,
+                1.2,
+                1.1,
+            ],
+        ]
+    ).T
 
     X_tfm = CorrelationRemover(sensitive_feature_ids=[0]).fit(X).transform(X)
     assert X_tfm.shape[1] == 2
@@ -56,12 +49,33 @@ def test_linear_dependence():
 
 
 def test_linear_dependence_pd():
-    X = np.array([[0, 0, 1, 1, ],
-                  [1, 1, 2, 2, ],
-                  [0.1, 0.2, 1.2, 1.1, ]]).T
+    X = np.array(
+        [
+            [
+                0,
+                0,
+                1,
+                1,
+            ],
+            [
+                1,
+                1,
+                2,
+                2,
+            ],
+            [
+                0.1,
+                0.2,
+                1.2,
+                1.1,
+            ],
+        ]
+    ).T
 
-    df = pd.DataFrame(X, columns=['a', 'b', 'c'])
+    df = pd.DataFrame(X, columns=["a", "b", "c"])
 
-    X_tfm = CorrelationRemover(sensitive_feature_ids=['a']).fit(df).transform(df)
+    X_tfm = (
+        CorrelationRemover(sensitive_feature_ids=["a"]).fit(df).transform(df)
+    )
     assert X_tfm.shape[1] == 2
     assert np.allclose(X_tfm[:, 0], 1.5)
