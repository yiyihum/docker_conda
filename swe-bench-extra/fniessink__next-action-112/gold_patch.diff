diff --git a/CHANGELOG.md b/CHANGELOG.md
index 66a03aa..38070b6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,12 @@ All notable changes to this project will be documented in this file.
 The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
 and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).
 
+## [Unreleased] - 2018-06-09
+
+### Added
+
+- Default context and/or project filters can be configured in the configuration file. Closes #109.
+
 ## [0.17.0] - 2018-06-07
 
 ### Added
diff --git a/README.md b/README.md
index 1fa3797..e64a6e4 100644
--- a/README.md
+++ b/README.md
@@ -239,11 +239,11 @@ $ next-action --config-file docs/.next-action.cfg
 
 To skip reading the default configuration file, and also not read an alternative configuration file, use the `--config-file` option without arguments.
 
-The configuration file format is [YAML](http://yaml.org). The options currently supported are which todo.txt files must be read, how many next actions should be shown, and the styling.
+The configuration file format is [YAML](http://yaml.org). The options currently supported are which todo.txt files must be read, how many next actions should be shown, output styling, and context and/or project filters.
 
 #### Configuring a default todo.txt
 
-A default todo.txt file to use can be specified like this:
+A default todo.txt file to use can be specified like this in the configuration file:
 
 ```yaml
 file: ~/Dropbox/todo.txt
@@ -272,7 +272,30 @@ Or you can have *Next-action* show all next actions:
 all: True
 ```
 
-#### Configuring the minimum priority to show
+#### Limiting the tasks from which next actions are selected
+
+##### By contexts and/or projects
+
+You can limit the tasks from which the next action is selected by specifying contexts and/or projects to filter on, just like you would do on the command line:
+
+```yaml
+filters: -+FutureProject @work -@waiting
+```
+
+This would make *Next-action* by default select next actions from tasks with a `@work` context and without the `@waiting` context and not belonging to the `+FutureProject`.
+
+An alternative syntax is:
+
+```yaml
+filters:
+  - -+FutureProject
+  - '@work'
+  - -@waiting
+```
+
+Note that filters starting with `@` need to be in quotes. This is a [YAML restriction](http://yaml.org/spec/1.1/current.html#c-directive).
+
+##### By priority
 
 The minimum priority of next action to show can be specified as well:
 
@@ -347,9 +370,9 @@ To run the unit tests:
 
 ```console
 $ python -m unittest
-.........................................................................................................................................................................
+.....................................................................................................................................................................................
 ----------------------------------------------------------------------
-Ran 169 tests in 0.601s
+Ran 181 tests in 0.709s
 
 OK
 ```
diff --git a/next_action/arguments/config.py b/next_action/arguments/config.py
index 6c6acdc..5cf2f99 100644
--- a/next_action/arguments/config.py
+++ b/next_action/arguments/config.py
@@ -39,8 +39,8 @@ def validate_config_file(config, config_filename: str, error: Callable[[str], No
     schema = {
         "file": {
             "type": ["string", "list"],
-            "schema": {
-                "type": "string"}},
+            "schema": {"type": "string"}
+        },
         "number": {
             "type": "integer",
             "min": 1,
@@ -54,6 +54,11 @@ def validate_config_file(config, config_filename: str, error: Callable[[str], No
             "type": "string",
             "allowed": [letter for letter in string.ascii_uppercase]
         },
+        "filters": {
+            "type": ["string", "list"],
+            "regex": r"^\-?[@|\+]\S+(\s+\-?[@|\+]\S+)*",
+            "schema": {"type": "string", "regex": r"^\-?[@|\+]\S+"}
+        },
         "reference": {
             "type": "string",
             "allowed": ["always", "never", "multiple"]
diff --git a/next_action/arguments/parser.py b/next_action/arguments/parser.py
index 7805962..a112145 100644
--- a/next_action/arguments/parser.py
+++ b/next_action/arguments/parser.py
@@ -2,6 +2,7 @@
 
 import argparse
 import datetime
+import re
 import shutil
 import string
 import sys
@@ -170,6 +171,12 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         if self.arguments_not_specified("-p", "--priority"):
             priority = config.get("priority", self.get_default("priority"))
             setattr(namespace, "priority", priority)
+        filters = config.get("filters", [])
+        if isinstance(filters, str):
+            filters = re.split(r"\s", filters)
+        for configured_filter in filters:
+            if self.filter_not_specified(configured_filter):
+                getattr(namespace, "filters").append(configured_filter)
 
     @staticmethod
     def arguments_not_specified(*arguments: str) -> bool:
@@ -177,6 +184,13 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         return not any([command_line_arg.startswith(argument) for argument in arguments
                         for command_line_arg in sys.argv])
 
+    @staticmethod
+    def filter_not_specified(filtered: str) -> bool:
+        """ Return whether the context or project or its opposite were specified on the command line. """
+        prefix = "-"
+        opposite = filtered[len(prefix):] if filtered.startswith(prefix) else prefix + filtered
+        return not (filtered in sys.argv or opposite in sys.argv)
+
     def fix_filenames(self, namespace: argparse.Namespace) -> None:
         """ Fix the filenames. """
         # Work around the issue that the "append" action doesn't overwrite defaults.
