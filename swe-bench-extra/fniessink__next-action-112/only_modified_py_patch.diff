diff --git a/next_action/arguments/config.py b/next_action/arguments/config.py
index 6c6acdc..5cf2f99 100644
--- a/next_action/arguments/config.py
+++ b/next_action/arguments/config.py
@@ -39,8 +39,8 @@ def validate_config_file(config, config_filename: str, error: Callable[[str], No
     schema = {
         "file": {
             "type": ["string", "list"],
-            "schema": {
-                "type": "string"}},
+            "schema": {"type": "string"}
+        },
         "number": {
             "type": "integer",
             "min": 1,
@@ -54,6 +54,11 @@ def validate_config_file(config, config_filename: str, error: Callable[[str], No
             "type": "string",
             "allowed": [letter for letter in string.ascii_uppercase]
         },
+        "filters": {
+            "type": ["string", "list"],
+            "regex": r"^\-?[@|\+]\S+(\s+\-?[@|\+]\S+)*",
+            "schema": {"type": "string", "regex": r"^\-?[@|\+]\S+"}
+        },
         "reference": {
             "type": "string",
             "allowed": ["always", "never", "multiple"]
diff --git a/next_action/arguments/parser.py b/next_action/arguments/parser.py
index 7805962..a112145 100644
--- a/next_action/arguments/parser.py
+++ b/next_action/arguments/parser.py
@@ -2,6 +2,7 @@
 
 import argparse
 import datetime
+import re
 import shutil
 import string
 import sys
@@ -170,6 +171,12 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         if self.arguments_not_specified("-p", "--priority"):
             priority = config.get("priority", self.get_default("priority"))
             setattr(namespace, "priority", priority)
+        filters = config.get("filters", [])
+        if isinstance(filters, str):
+            filters = re.split(r"\s", filters)
+        for configured_filter in filters:
+            if self.filter_not_specified(configured_filter):
+                getattr(namespace, "filters").append(configured_filter)
 
     @staticmethod
     def arguments_not_specified(*arguments: str) -> bool:
@@ -177,6 +184,13 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         return not any([command_line_arg.startswith(argument) for argument in arguments
                         for command_line_arg in sys.argv])
 
+    @staticmethod
+    def filter_not_specified(filtered: str) -> bool:
+        """ Return whether the context or project or its opposite were specified on the command line. """
+        prefix = "-"
+        opposite = filtered[len(prefix):] if filtered.startswith(prefix) else prefix + filtered
+        return not (filtered in sys.argv or opposite in sys.argv)
+
     def fix_filenames(self, namespace: argparse.Namespace) -> None:
         """ Fix the filenames. """
         # Work around the issue that the "append" action doesn't overwrite defaults.

