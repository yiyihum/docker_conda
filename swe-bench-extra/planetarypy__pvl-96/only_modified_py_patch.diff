diff --git a/pvl/collections.py b/pvl/collections.py
index 5eebdbd..4687f2b 100644
--- a/pvl/collections.py
+++ b/pvl/collections.py
@@ -305,6 +305,21 @@ class OrderedMultiDict(dict, MutableMappingSequence):
     def pop(self, *args, **kwargs):
         """Removes all items with the specified *key*."""
 
+        if len(args) == 0 and len(kwargs) == 0:
+            if not self:
+                raise KeyError(
+                    "pop(): {!s} ".format(type(self).__name__) + "is empty"
+                )
+
+            key, _ = item = self.__items.pop()
+            values = dict_getitem(self, key)
+            values.pop()
+
+            if not values:
+                dict_delitem(self, key)
+
+            return item
+
         warnings.warn(
             "The pop(k) function removes "
             "all keys with value k to remain backwards compatible with the "
@@ -314,9 +329,6 @@ class OrderedMultiDict(dict, MutableMappingSequence):
             FutureWarning,
         )
 
-        if len(args) == 0 and len(kwargs) == 0:
-            return self.popitem()
-
         return self.popall(*args, *kwargs)
 
     def popitem(self):
@@ -329,22 +341,7 @@ class OrderedMultiDict(dict, MutableMappingSequence):
             "Consider using the list-like .pop(), without an argument instead.",
             FutureWarning,
         )
-        # Yes, I know .pop() without an argument just redirects here, but it
-        # won't always.
-
-        if not self:
-            raise KeyError(
-                "popitem(): {!s} ".format(type(self).__name__) + "is empty"
-            )
-
-        key, _ = item = self.__items.pop()
-        values = dict_getitem(self, key)
-        values.pop()
-
-        if not values:
-            dict_delitem(self, key)
-
-        return item
+        return self.pop()
 
     def copy(self):
         return type(self)(self)
diff --git a/pvl/parser.py b/pvl/parser.py
index bf3c04f..af34b4f 100644
--- a/pvl/parser.py
+++ b/pvl/parser.py
@@ -305,7 +305,7 @@ class PVLParser(object):
         """
         raise Exception
 
-    def parse_aggregation_block(self, tokens: abc.Generator):
+    def parse_aggregation_block(self, tokens: abc.Generator):  # noqa: C901
         """Parses the tokens for an Aggregation Block, and returns
         the modcls object that is the result of the parsing and
         decoding.
@@ -339,8 +339,18 @@ class PVLParser(object):
                     # t = next(tokens)
                     # print(f'parsing agg block, next token is: {t}')
                     # tokens.send(t)
-                    self.parse_end_aggregation(begin, block_name, tokens)
-                    break
+                    try:
+                        self.parse_end_aggregation(begin, block_name, tokens)
+                        break
+                    except ValueError as ve:
+                        try:
+                            (agg, keep_parsing) = self.parse_module_post_hook(
+                                agg, tokens
+                            )
+                            if not keep_parsing:
+                                raise ve
+                        except Exception:
+                            raise ve
 
         return block_name, agg
 
@@ -839,7 +849,7 @@ class OmniParser(PVLParser):
         EmptyValueAtLine object.
         """
         # It enables this by checking to see if the next thing is an
-        # '=' which means there was an empty assigment at the previous
+        # '=' which means there was an empty assignment at the previous
         # equals sign, and then unwinding the stack to give the
         # previous assignment the EmptyValueAtLine() object and trying
         # to continue parsing.

