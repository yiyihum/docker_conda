diff --git a/src/plopp/core/graph.py b/src/plopp/core/graph.py
index 5c4d1f9..12ff700 100644
--- a/src/plopp/core/graph.py
+++ b/src/plopp/core/graph.py
@@ -18,7 +18,7 @@ def _make_graphviz_digraph(*args, **kwargs):
 def _add_graph_edges(dot, node, inventory, hide_views):
     name = node.id
     inventory.append(name)
-    dot.node(name, label=escape(str(node.func)))
+    dot.node(name, label=escape(str(node.func)) + '\nid = ' + name)
     for child in node.children:
         key = child.id
         if key not in inventory:
diff --git a/src/plopp/core/model.py b/src/plopp/core/model.py
index 6db54de..db33f0e 100644
--- a/src/plopp/core/model.py
+++ b/src/plopp/core/model.py
@@ -19,6 +19,7 @@ class Node:
         self.kwparents = dict(kwparents)
         for parent in chain(self.parents, self.kwparents.values()):
             parent.add_child(self)
+        self._data = None
 
     def remove(self):
         if self.children:
@@ -33,9 +34,14 @@ class Node:
         self.kwparents.clear()
 
     def request_data(self):
-        args = (parent.request_data() for parent in self.parents)
-        kwargs = {key: parent.request_data() for key, parent in self.kwparents.items()}
-        return self.func(*args, **kwargs)
+        if self._data is None:
+            args = (parent.request_data() for parent in self.parents)
+            kwargs = {
+                key: parent.request_data()
+                for key, parent in self.kwparents.items()
+            }
+            self._data = self.func(*args, **kwargs)
+        return self._data
 
     def add_child(self, child):
         self.children.append(child)
@@ -44,6 +50,7 @@ class Node:
         self.views.append(view)
 
     def notify_children(self, message):
+        self._data = None
         self.notify_views(message)
         for child in self.children:
             child.notify_children(message)
