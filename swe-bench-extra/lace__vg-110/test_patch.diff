diff --git a/vg/test_apex.py b/vg/test_apex.py
index 605aa67..d42f5f9 100644
--- a/vg/test_apex.py
+++ b/vg/test_apex.py
@@ -45,10 +45,10 @@ def test_apex():
     # Test non-normalized too.
     np.testing.assert_array_equal(vg.apex(points, along=np.array([1, 1, 1])), expected)
 
-    with pytest.raises(ValueError, match="Invalid shape \\(3,\\): apex expects nx3"):
+    with pytest.raises(ValueError, match=r"Invalid shape \(3,\): apex expects nx3"):
         vg.apex(vg.basis.x, along=vg.basis.x)
 
-    with pytest.raises(ValueError, match="along should be a 3x1 vector"):
+    with pytest.raises(ValueError, match=r"along should be a \(3,\) vector"):
         vg.apex(points, along=points)
 
 
diff --git a/vg/test_farthest.py b/vg/test_farthest.py
index a9bba6c..6af5f4f 100644
--- a/vg/test_farthest.py
+++ b/vg/test_farthest.py
@@ -17,10 +17,8 @@ def test_farthest():
         vg.farthest(from_points, to_point, ret_index=False), from_points[1]
     )
 
-    with pytest.raises(
-        ValueError, match="Invalid shape \\(3,\\): farthest expects nx3"
-    ):
+    with pytest.raises(ValueError, match=r"Invalid shape \(3,\): farthest expects nx3"):
         vg.farthest(to_point, to_point)
 
-    with pytest.raises(ValueError, match="to_point should be 3x1"):
+    with pytest.raises(ValueError, match=r"to_point should be \(3,\)"):
         vg.farthest(from_points, from_points)
diff --git a/vg/test_matrix_transform.py b/vg/test_matrix_transform.py
index 5e6908c..9ead30e 100644
--- a/vg/test_matrix_transform.py
+++ b/vg/test_matrix_transform.py
@@ -28,7 +28,7 @@ def test_apply_homogeneous_stacked():
 def test_apply_homogeneous_error():
     with pytest.raises(ValueError, match="Transformation matrix should be 4x4"):
         apply_transform(np.array([1.0, 2.0, 3.0]), np.array([1.0]))
-    with pytest.raises(ValueError, match="Vertices should be 3x1 or Nx3"):
+    with pytest.raises(ValueError, match=r"Vertices should be \(3,\) or Nx3"):
         apply_transform(np.array([1.0, 2.0]), transform)
     with pytest.raises(ValueError, match="Not sure what to do with 3 dimensions"):
         apply_transform(np.array([[[1.0, 2.0, 3.0]]]), transform)
diff --git a/vg/test_within.py b/vg/test_within.py
index e310b17..e84ee3b 100644
--- a/vg/test_within.py
+++ b/vg/test_within.py
@@ -66,7 +66,7 @@ def test_within_error():
             radius=False,
             of_point=np.array([0.0, 1.0, 0.0]),
         )
-    with pytest.raises(ValueError, match="to_point should be 3x1"):
+    with pytest.raises(ValueError, match=r"to_point should be \(3,\)"):
         vg.within(
             np.array([[2.0, 4.0, 0.0]]), radius=4.0, of_point=np.array([0.0, 1.0])
         )
