diff --git a/polliwog/pointcloud/__init__.py b/polliwog/pointcloud/__init__.py
index 7b816e6..d9ea056 100644
--- a/polliwog/pointcloud/__init__.py
+++ b/polliwog/pointcloud/__init__.py
@@ -2,6 +2,6 @@
 Functions for working with point clouds (i.e. unstructured sets of 3D points).
 """
 
-from ._pointcloud_functions import percentile
+from ._pointcloud_functions import extent, percentile
 
-__all__ = ["percentile"]
+__all__ = ["extent", "percentile"]
diff --git a/polliwog/pointcloud/_pointcloud_functions.py b/polliwog/pointcloud/_pointcloud_functions.py
index 5393544..9767839 100644
--- a/polliwog/pointcloud/_pointcloud_functions.py
+++ b/polliwog/pointcloud/_pointcloud_functions.py
@@ -28,3 +28,39 @@ def percentile(points, axis, percentile):
     selected_coord_on_axis = np.percentile(coords_on_axis, percentile)
     centroid = np.average(points, axis=0)
     return vg.reject(centroid, axis) + selected_coord_on_axis * axis
+
+
+def extent(points, ret_indices=False):
+    """
+    Find the distance between the two farthest-most points.
+
+    Args:
+        points (np.arraylike): A `kx3` stack of points.
+        ret_indices (bool): When `True`, return the indices along with the
+            distance.
+
+    Returns:
+        object: With `ret_indices=False`, the distance; with
+        `ret_indices=True` a tuple `(distance, first_index, second_index)`.
+
+    Note:
+        This is implemented using a brute-force method.
+    """
+    k = vg.shape.check(locals(), "points", (-1, 3))
+    if k < 2:
+        raise ValueError("At least two points are required")
+
+    farthest_i = -1
+    farthest_j = -1
+    farthest_distance = -1
+    for i, probe in enumerate(points):
+        distances = vg.euclidean_distance(points, probe)
+        this_farthest_j = np.argmax(distances)
+        if distances[this_farthest_j] > farthest_distance:
+            farthest_i = i
+            farthest_j = this_farthest_j
+            farthest_distance = distances[this_farthest_j]
+    if ret_indices:
+        return farthest_distance, farthest_i, farthest_j
+    else:
+        return farthest_distance
diff --git a/polliwog/shapes/_shapes.py b/polliwog/shapes/_shapes.py
index a21adcc..8c60dd4 100644
--- a/polliwog/shapes/_shapes.py
+++ b/polliwog/shapes/_shapes.py
@@ -1,10 +1,10 @@
 import numpy as np
+import vg
 
 __all__ = [
-    "create_rectangular_prism",
-    "create_cube",
-    "create_triangular_prism",
-    "create_rectangle",
+    "rectangular_prism",
+    "cube",
+    "triangular_prism",
 ]
 
 
@@ -15,7 +15,7 @@ def _maybe_flatten(vertices, faces, ret_unique_vertices_and_faces):
         return vertices[faces]
 
 
-def create_rectangular_prism(origin, size, ret_unique_vertices_and_faces=False):
+def rectangular_prism(origin, size, ret_unique_vertices_and_faces=False):
     """
     Tesselate an axis-aligned rectangular prism. One vertex is `origin`. The
     diametrically opposite vertex is `origin + size`.
@@ -40,6 +40,9 @@ def create_rectangular_prism(origin, size, ret_unique_vertices_and_faces=False):
     """
     from ..tri import quads_to_tris
 
+    vg.shape.check(locals(), "origin", (3,))
+    vg.shape.check(locals(), "size", (3,))
+
     lower_base_plane = np.array(
         [
             # Lower base plane
@@ -73,7 +76,7 @@ def create_rectangular_prism(origin, size, ret_unique_vertices_and_faces=False):
     return _maybe_flatten(vertices, faces, ret_unique_vertices_and_faces)
 
 
-def create_cube(origin, size, ret_unique_vertices_and_faces=False):
+def cube(origin, size, ret_unique_vertices_and_faces=False):
     """
     Tesselate an axis-aligned cube. One vertex is `origin`. The diametrically
     opposite vertex is `size` units along `+x`, `+y`, and `+z`.
@@ -96,14 +99,18 @@ def create_cube(origin, size, ret_unique_vertices_and_faces=False):
         - With `ret_unique_vertices_and_faces=False`: a `12x3x3` matrix of
           flattened triangle coordinates.
     """
-    return create_rectangular_prism(
+    vg.shape.check(locals(), "origin", (3,))
+    if not isinstance(size, float):
+        raise ValueError("`size` should be a number")
+
+    return rectangular_prism(
         origin,
         np.repeat(size, 3),
         ret_unique_vertices_and_faces=ret_unique_vertices_and_faces,
     )
 
 
-def create_triangular_prism(p1, p2, p3, height, ret_unique_vertices_and_faces=False):
+def triangular_prism(p1, p2, p3, height, ret_unique_vertices_and_faces=False):
     """
     Tesselate a triangular prism whose base is the triangle `p1`, `p2`, `p3`.
     If the vertices are oriented in a counterclockwise direction, the prism
@@ -129,6 +136,12 @@ def create_triangular_prism(p1, p2, p3, height, ret_unique_vertices_and_faces=Fa
     """
     from .. import Plane
 
+    vg.shape.check(locals(), "p1", (3,))
+    vg.shape.check(locals(), "p2", (3,))
+    vg.shape.check(locals(), "p3", (3,))
+    if not isinstance(height, float):
+        raise ValueError("`height` should be a number")
+
     base_plane = Plane.from_points(p1, p2, p3)
     lower_base_to_upper_base = height * -base_plane.normal
     vertices = np.vstack(([p1, p2, p3], [p1, p2, p3] + lower_base_to_upper_base))
@@ -148,28 +161,3 @@ def create_triangular_prism(p1, p2, p3, height, ret_unique_vertices_and_faces=Fa
     )
 
     return _maybe_flatten(vertices, faces, ret_unique_vertices_and_faces)
-
-
-def create_rectangle(ret_unique_vertices_and_faces=False):
-    """
-    Create a rectangle.
-
-    Args:
-        ret_unique_vertices_and_faces (bool): When `True` return a vertex
-            array containing the unique vertices and an array of faces (i.e.
-            vertex indices). When `False`, return a flattened array of
-            triangle coordinates.
-
-    Returns:
-        object:
-
-        - With `ret_unique_vertices_and_faces=True`: a tuple containing
-          an `4x3` array of vertices and a `2x3` array of triangle faces.
-        - With `ret_unique_vertices_and_faces=False`: a `16x3x3` matrix of
-          flattened triangle coordinates.
-    """
-    vertices = np.array(
-        [[1.0, 0.0, 0.0], [-1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, -1.0]]
-    )
-    faces = np.array([[0, 1, 2], [3, 1, 0]], dtype=np.uint64)
-    return _maybe_flatten(vertices, faces, ret_unique_vertices_and_faces)
