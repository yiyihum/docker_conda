diff --git a/src/anyio/__init__.py b/src/anyio/__init__.py
index da6124c..74caae8 100644
--- a/src/anyio/__init__.py
+++ b/src/anyio/__init__.py
@@ -3,6 +3,8 @@ __all__ = (
     'maybe_async_cm',
     'run',
     'sleep',
+    'sleep_forever',
+    'sleep_until',
     'current_time',
     'get_all_backends',
     'get_cancelled_exc_class',
@@ -71,7 +73,9 @@ __all__ = (
 )
 
 from ._core._compat import maybe_async, maybe_async_cm
-from ._core._eventloop import current_time, get_all_backends, get_cancelled_exc_class, run, sleep
+from ._core._eventloop import (
+    current_time, get_all_backends, get_cancelled_exc_class, run, sleep, sleep_forever,
+    sleep_until)
 from ._core._exceptions import (
     BrokenResourceError, BrokenWorkerProcess, BusyResourceError, ClosedResourceError,
     DelimiterNotFound, EndOfStream, ExceptionGroup, IncompleteRead, TypedAttributeLookupError,
diff --git a/src/anyio/_core/_eventloop.py b/src/anyio/_core/_eventloop.py
index ba14385..6021ab9 100644
--- a/src/anyio/_core/_eventloop.py
+++ b/src/anyio/_core/_eventloop.py
@@ -1,3 +1,4 @@
+import math
 import sys
 import threading
 from contextlib import contextmanager
@@ -68,6 +69,32 @@ async def sleep(delay: float) -> None:
     return await get_asynclib().sleep(delay)
 
 
+async def sleep_forever() -> None:
+    """
+    Pause the current task until it's cancelled.
+
+    This is a shortcut for ``sleep(math.inf)``.
+
+    .. versionadded:: 3.1
+
+    """
+    await sleep(math.inf)
+
+
+async def sleep_until(deadline: float) -> None:
+    """
+    Pause the current task until the given time.
+
+    :param deadline: the absolute time to wake up at (according to the internal monotonic clock of
+        the event loop)
+
+    .. versionadded:: 3.1
+
+    """
+    now = current_time()
+    await sleep(max(deadline - now, 0))
+
+
 def current_time() -> DeprecatedAwaitableFloat:
     """
     Return the current value of the event loop's internal clock.

