diff --git a/openfe/tests/setup/__init__.py b/openfe/tests/setup/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/openfe/tests/setup/conftest.py b/openfe/tests/setup/conftest.py
new file mode 100644
index 00000000..d74d1b89
--- /dev/null
+++ b/openfe/tests/setup/conftest.py
@@ -0,0 +1,8 @@
+import pytest
+
+
+@pytest.fixture
+def mock_atommapping():
+    """Mock to functions that take an AtomMapping as input"""
+    # TODO: add internal structure of this once we have an AtomMapping class
+    return "foo"  # current tests using this just need a placeholder
diff --git a/openfe/tests/setup/test_scorer.py b/openfe/tests/setup/test_scorer.py
new file mode 100644
index 00000000..faf00255
--- /dev/null
+++ b/openfe/tests/setup/test_scorer.py
@@ -0,0 +1,40 @@
+import pytest
+from openfe.setup.scorer import Scorer
+
+
+class ConcreteScorer(Scorer):
+    """Test implementation of Scorer with a score"""
+    def score(self, atommapping):
+        return 3.14
+
+
+class ConcreteAnnotator(Scorer):
+    """Test implementation of Scorer with a custom annotation"""
+    def score(self, atommapping):
+        return None
+
+    def annotation(self, atommapping):
+        return {'annotation': 'data'}
+
+
+class TestScorer:
+    def test_abstract_error(self, mock_atommapping):
+        scorer = Scorer()
+        with pytest.raises(NotImplementedError, match="'Scorer'.*abstract"):
+            scorer(mock_atommapping)
+
+    def test_concrete_scorer(self, mock_atommapping):
+        # The ConcreteScorer class should give the implemented value for the
+        # score and the default empty dict for the annotation.
+        scorer = ConcreteScorer()
+        result = scorer(mock_atommapping)
+        assert result.score == 3.14
+        assert result.annotation == {}
+
+    def test_concrete_annotator(self, mock_atommapping):
+        # The ConcreteAnnotator class should give the implemented (None)
+        # value for the score and the implemented value of the annotation.
+        scorer = ConcreteAnnotator()
+        result = scorer(mock_atommapping)
+        assert result.score is None
+        assert result.annotation == {'annotation': 'data'}
