diff --git a/porespy/metrics/_funcs.py b/porespy/metrics/_funcs.py
index d1001a351..e44651570 100644
--- a/porespy/metrics/_funcs.py
+++ b/porespy/metrics/_funcs.py
@@ -1104,7 +1104,7 @@ def pc_curve(im, sizes=None, pc=None, seq=None,
     return pc_curve
 
 
-def satn_profile(satn, s, axis=0, span=10, mode='tile'):
+def satn_profile(satn, s=None, im=None, axis=0, span=10, mode='tile'):
     r"""
     Computes a saturation profile from an image of fluid invasion
 
@@ -1115,7 +1115,12 @@ def satn_profile(satn, s, axis=0, span=10, mode='tile'):
         invasion.  0's are treated as solid and -1's are treated as uninvaded
         void space.
     s : scalar
-        The global saturation value for which the profile is desired
+        The global saturation value for which the profile is desired. If `satn` is
+        a pre-thresholded boolean image then this is ignored, `im` is required.
+    im : ndarray
+        A boolean image with `True` values indicating the void phase. This is used
+        to compute the void volume if `satn` is given as a pre-thresholded boolean
+        mask.
     axis : int
         The axis along which to profile should be measured
     span : int
@@ -1153,46 +1158,41 @@ def satn_profile(satn, s, axis=0, span=10, mode='tile'):
     <https://porespy.org/examples/metrics/reference/satn_profile.html>`_
     to view online example.
     """
-    # @numba.njit()
-    def func(satn, s, axis, span, mode):
-        span = max(1, span)
-        satn = np.swapaxes(satn, 0, axis)
-        if mode == 'tile':
-            y = np.zeros(int(satn.shape[0]/span))
-            z = np.zeros_like(y)
-            for i in range(int(satn.shape[0]/span)):
-                void = satn[i*span:(i+1)*span, ...] != 0
-                nwp = (satn[i*span:(i+1)*span, ...] < s) \
-                    *(satn[i*span:(i+1)*span, ...] > 0)
-                y[i] = nwp.sum(dtype=np.int64)/void.sum(dtype=np.int64)
-                z[i] = i*span + (span-1)/2
-        if mode == 'slide':
-            y = np.zeros(int(satn.shape[0]-span))
-            z = np.zeros_like(y)
-            for i in range(int(satn.shape[0]-span)):
-                void = satn[i:i+span, ...] != 0
-                nwp = (satn[i:i+span, ...] < s)*(satn[i:i+span, ...] > 0)
-                y[i] = nwp.sum(dtype=np.int64)/void.sum(dtype=np.int64)
-                z[i] = i + (span-1)/2
-        return z, y
-
-    z, y = func(satn=satn, s=s, axis=axis, span=span, mode=mode)
-
-    class results(Results):
-        r"""
-
-        Attributes
-        ----------
-        position : ndarray
-            The position along the given axis at which saturation values are
-            computed.  The units are in voxels.
-        saturation : ndarray
-            The computed saturation value at each position
-
-        """
-        position = z
-        saturation = y
-
+    span = max(1, span)
+    if s is None:
+        if satn.dtype != bool:
+            msg = 'Must specify a target saturation if saturation map is provided'
+            raise Exception(msg)
+        s = 2  # Will find ALL voxels, then > 0 will limit to only True ones
+        satn = satn.astype(int)
+        satn[satn == 0] = -1
+        satn[~im] = 0
+    else:
+        msg = 'The maximum saturation in the image is less than the given threshold'
+        if satn.max() < s:
+            raise Exception(msg)
+
+    satn = np.swapaxes(satn, 0, axis)
+    if mode == 'tile':
+        y = np.zeros(int(satn.shape[0]/span))
+        z = np.zeros_like(y)
+        for i in range(int(satn.shape[0]/span)):
+            void = satn[i*span:(i+1)*span, ...] != 0
+            nwp = (satn[i*span:(i+1)*span, ...] <= s) \
+                *(satn[i*span:(i+1)*span, ...] > 0)
+            y[i] = nwp.sum(dtype=np.int64)/void.sum(dtype=np.int64)
+            z[i] = i*span + (span-1)/2
+    if mode == 'slide':
+        y = np.zeros(int(satn.shape[0]-span))
+        z = np.zeros_like(y)
+        for i in range(int(satn.shape[0]-span)):
+            void = satn[i:i+span, ...] != 0
+            nwp = (satn[i:i+span, ...] <= s)*(satn[i:i+span, ...] > 0)
+            y[i] = nwp.sum(dtype=np.int64)/void.sum(dtype=np.int64)
+            z[i] = i + (span-1)/2
+    results = Results()
+    results.position = z
+    results.saturation = y
     return results
 
 

