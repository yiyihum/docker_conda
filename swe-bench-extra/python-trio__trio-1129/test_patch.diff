diff --git a/test-requirements.txt b/test-requirements.txt
index 5aab7fc4..3237f14f 100644
--- a/test-requirements.txt
+++ b/test-requirements.txt
@@ -26,7 +26,7 @@ isort==4.3.21             # via pylint
 jedi==0.14.1
 lazy-object-proxy==1.4.1  # via astroid
 mccabe==0.6.1             # via flake8, pylint
-more-itertools==7.1.0     # via pytest
+more-itertools==7.2.0     # via pytest
 outcome==1.0.0
 packaging==19.0           # via pytest
 parso==0.5.1              # via jedi
@@ -42,7 +42,7 @@ pyflakes==2.1.1           # via flake8
 pygments==2.4.2           # via ipython
 pylint==2.3.1
 pyopenssl==19.0.0
-pyparsing==2.4.0          # via packaging
+pyparsing==2.4.1          # via packaging
 pytest-cov==2.7.1
 pytest==5.0.1
 six==1.12.0               # via astroid, cryptography, packaging, prompt-toolkit, pyopenssl, traitlets
diff --git a/trio/tests/test_unix_pipes.py b/trio/tests/test_unix_pipes.py
index 7728a57f..46f28d54 100644
--- a/trio/tests/test_unix_pipes.py
+++ b/trio/tests/test_unix_pipes.py
@@ -11,14 +11,17 @@ from ..testing import wait_all_tasks_blocked, check_one_way_stream
 posix = os.name == "posix"
 pytestmark = pytest.mark.skipif(not posix, reason="posix only")
 if posix:
-    from .._unix_pipes import PipeSendStream, PipeReceiveStream
+    from .._unix_pipes import FdStream
+else:
+    with pytest.raises(ImportError):
+        from .._unix_pipes import FdStream
 
 
 # Have to use quoted types so import doesn't crash on windows
-async def make_pipe() -> "Tuple[PipeSendStream, PipeReceiveStream]":
+async def make_pipe() -> "Tuple[FdStream, FdStream]":
     """Makes a new pair of pipes."""
     (r, w) = os.pipe()
-    return PipeSendStream(w), PipeReceiveStream(r)
+    return FdStream(w), FdStream(r)
 
 
 async def make_clogged_pipe():
@@ -49,7 +52,7 @@ async def make_clogged_pipe():
 
 async def test_send_pipe():
     r, w = os.pipe()
-    async with PipeSendStream(w) as send:
+    async with FdStream(w) as send:
         assert send.fileno() == w
         await send.send_all(b"123")
         assert (os.read(r, 8)) == b"123"
@@ -59,7 +62,7 @@ async def test_send_pipe():
 
 async def test_receive_pipe():
     r, w = os.pipe()
-    async with PipeReceiveStream(r) as recv:
+    async with FdStream(r) as recv:
         assert (recv.fileno()) == r
         os.write(w, b"123")
         assert (await recv.receive_some(8)) == b"123"
@@ -93,10 +96,10 @@ async def test_pipes_combined():
 
 async def test_pipe_errors():
     with pytest.raises(TypeError):
-        PipeReceiveStream(None)
+        FdStream(None)
 
     with pytest.raises(ValueError):
-        await PipeReceiveStream(0).receive_some(0)
+        await FdStream(0).receive_some(0)
 
 
 async def test_del():
@@ -146,7 +149,7 @@ async def test_misdirected_aclose_regression():
     if r2_fd != old_r_fd:  # pragma: no cover
         os.dup2(r2_fd, old_r_fd)
         os.close(r2_fd)
-    async with PipeReceiveStream(old_r_fd) as r2:
+    async with FdStream(old_r_fd) as r2:
         assert r2.fileno() == old_r_fd
 
         # And now set up a background task that's working on the new receive
