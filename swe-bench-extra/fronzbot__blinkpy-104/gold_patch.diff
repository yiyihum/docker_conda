diff --git a/.gitignore b/.gitignore
index 0bd45aa..9a182cc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -10,3 +10,4 @@ dist/*
 .sh
 build/*
 docs/_build
+*.log
diff --git a/blinkpy/blinkpy.py b/blinkpy/blinkpy.py
index e5fe32c..7124f1a 100644
--- a/blinkpy/blinkpy.py
+++ b/blinkpy/blinkpy.py
@@ -21,7 +21,7 @@ from blinkpy.helpers.util import (
     create_session, BlinkURLHandler,
     BlinkAuthenticationException)
 from blinkpy.helpers.constants import (
-    BLINK_URL, LOGIN_URL, LOGIN_BACKUP_URL)
+    BLINK_URL, LOGIN_URL, LOGIN_BACKUP_URL, PROJECT_URL)
 
 REFRESH_RATE = 30
 
@@ -146,8 +146,7 @@ class Blink():
         if all_networks:
             _LOGGER.error(("More than one unboarded network. "
                            "Platform may not work as intended. "
-                           "Please open an issue on "
-                           "https://github.com/fronzbot/blinkpy."))
+                           "Please open an issue on %s"), PROJECT_URL)
 
     def refresh(self, force_cache=False):
         """
diff --git a/blinkpy/camera.py b/blinkpy/camera.py
index cb2666e..d36a5da 100644
--- a/blinkpy/camera.py
+++ b/blinkpy/camera.py
@@ -162,8 +162,8 @@ class BlinkCamera():
             else:
                 self.motion_detected = False
         except KeyError:
-            _LOGGER.warning("Could not extract clip info from camera %s",
-                            self.name)
+            _LOGGER.info("Could not extract clip info from camera %s",
+                         self.name)
 
     def image_to_file(self, path):
         """
@@ -187,6 +187,9 @@ class BlinkCamera():
         """
         _LOGGER.debug("Writing video from %s to %s", self.name, path)
         response = self._cached_video
+        if response is None:
+            _LOGGER.error("No saved video exist for %s.", self.name)
+            return
         with open(path, 'wb') as vidfile:
             copyfileobj(response.raw, vidfile)
 
diff --git a/blinkpy/helpers/util.py b/blinkpy/helpers/util.py
index 23fb58d..253220e 100644
--- a/blinkpy/helpers/util.py
+++ b/blinkpy/helpers/util.py
@@ -2,7 +2,7 @@
 
 import logging
 from requests import Request, Session, exceptions
-from blinkpy.helpers.constants import BLINK_URL
+from blinkpy.helpers.constants import BLINK_URL, PROJECT_URL
 import blinkpy.helpers.errors as ERROR
 
 
@@ -17,7 +17,7 @@ def create_session():
 
 def attempt_reauthorization(blink):
     """Attempt to refresh auth token and links."""
-    _LOGGER.debug("Auth token expired, attempting reauthorization.")
+    _LOGGER.info("Auth token expired, attempting reauthorization.")
     headers = blink.get_auth_token()
     return headers
 
@@ -48,20 +48,25 @@ def http_req(blink, url='http://example.com', data=None, headers=None,
 
     try:
         response = blink.session.send(prepped, stream=stream)
+        if json_resp and 'code' in response.json():
+            if is_retry:
+                _LOGGER.error(("Cannot obtain new token for server auth. "
+                               "Please report this issue on %s"), PROJECT_URL)
+                return None
+            else:
+                headers = attempt_reauthorization(blink)
+                return http_req(blink, url=url, data=data, headers=headers,
+                                reqtype=reqtype, stream=stream,
+                                json_resp=json_resp, is_retry=True)
     except (exceptions.ConnectionError, exceptions.Timeout):
-        _LOGGER.error("Cannot connect to server. Possible outage.")
-        return None
-
-    if json_resp and 'code' in response.json():
-        if is_retry:
-            _LOGGER.error("Cannot authenticate with server.")
-            raise BlinkAuthenticationException(
-                (response.json()['code'], response.json()['message']))
-        else:
+        _LOGGER.error("Cannot connect to server with url %s.", url)
+        if not is_retry:
             headers = attempt_reauthorization(blink)
             return http_req(blink, url=url, data=data, headers=headers,
                             reqtype=reqtype, stream=stream,
                             json_resp=json_resp, is_retry=True)
+        _LOGGER.error("Possible issue with Blink servers.")
+        return None
 
     if json_resp:
         return response.json()
