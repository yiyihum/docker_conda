diff --git a/tests/test_api.py b/tests/test_api.py
index d50a64e..103367d 100644
--- a/tests/test_api.py
+++ b/tests/test_api.py
@@ -1,6 +1,7 @@
 """Test various api functions."""
 
 import unittest
+from unittest import mock
 from blinkpy import api
 from blinkpy.blinkpy import Blink
 from blinkpy.helpers.util import create_session
@@ -20,13 +21,21 @@ class TestBlinkAPI(unittest.TestCase):
         """Tear down blink module."""
         self.blink = None
 
-    def test_http_req_connect_error(self):
+    @mock.patch('blinkpy.blinkpy.Blink.get_auth_token')
+    def test_http_req_connect_error(self, mock_auth):
         """Test http_get error condition."""
-        expected = ("ERROR:blinkpy.helpers.util:"
-                    "Cannot connect to server. Possible outage.")
+        mock_auth.return_value = {'foo': 'bar'}
+        firstlog = ("ERROR:blinkpy.helpers.util:"
+                    "Cannot connect to server with url {}").format(
+                        'http://notreal.fake.')
+        nextlog = ("INFO:blinkpy.helpers.util:"
+                   "Auth token expired, attempting reauthorization.")
+        lastlog = ("ERROR:blinkpy.helpers.util:"
+                   "Possible issue with Blink servers.")
+        expected = [firstlog, nextlog, firstlog, lastlog]
         with self.assertLogs() as getlog:
             api.http_get(self.blink, 'http://notreal.fake')
         with self.assertLogs() as postlog:
             api.http_post(self.blink, 'http://notreal.fake')
-        self.assertEqual(getlog.output, [expected])
-        self.assertEqual(postlog.output, [expected])
+        self.assertEqual(getlog.output, expected)
+        self.assertEqual(postlog.output, expected)
diff --git a/tests/test_blinkpy.py b/tests/test_blinkpy.py
index 0f5dadd..577d177 100644
--- a/tests/test_blinkpy.py
+++ b/tests/test_blinkpy.py
@@ -14,6 +14,7 @@ from blinkpy.sync_module import BlinkSyncModule
 from blinkpy.helpers.util import (
     http_req, create_session, BlinkAuthenticationException,
     BlinkException, BlinkURLHandler)
+from blinkpy.helpers.constants import PROJECT_URL
 import tests.mock_responses as mresp
 
 USERNAME = 'foobar'
@@ -77,11 +78,15 @@ class TestBlinkSetup(unittest.TestCase):
     def test_bad_request(self, mock_sess):
         """Check that we raise an Exception with a bad request."""
         self.blink.session = create_session()
+        explog = ("ERROR:blinkpy.helpers.util:"
+                  "Cannot obtain new token for server auth. "
+                  "Please report this issue on {}").format(PROJECT_URL)
         with self.assertRaises(BlinkException):
             http_req(self.blink, reqtype='bad')
 
-        with self.assertRaises(BlinkAuthenticationException):
+        with self.assertLogs() as logrecord:
             http_req(self.blink, reqtype='post', is_retry=True)
+        self.assertEqual(logrecord.output, [explog])
 
     def test_authentication(self, mock_sess):
         """Check that we can authenticate Blink up properly."""
