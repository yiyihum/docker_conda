diff --git a/examples/house7.xml b/examples/house7.xml
index b3301351..4de32c3e 100644
--- a/examples/house7.xml
+++ b/examples/house7.xml
@@ -76,7 +76,12 @@
                         <Slab>
                             <SystemIdentifier id="slab1"/>
                             <Area>900</Area>
-                            <!-- omitting insulation to see if it comes out at zero -->
+                            <PerimeterInsulation>
+                                <SystemIdentifier id='slab1perimeterins'/>
+                                <Layer>
+                                    <NominalRValue>0.0</NominalRValue>
+                                </Layer>
+                            </PerimeterInsulation>
                         </Slab>
                     </Foundation>
                 </Foundations>
diff --git a/examples/house7_v3.xml b/examples/house7_v3.xml
index 8ebe06fe..a6483cdf 100644
--- a/examples/house7_v3.xml
+++ b/examples/house7_v3.xml
@@ -89,7 +89,12 @@
                     <Slab>
                         <SystemIdentifier id="slab1"/>
                         <Area>900</Area>
-                        <!-- omitting insulation to see if it comes out at zero -->
+                        <PerimeterInsulation>
+                            <SystemIdentifier id='slab1perimeterins'/>
+                            <Layer>
+                                <NominalRValue>0.0</NominalRValue>
+                            </Layer>
+                        </PerimeterInsulation>
                     </Slab>
                 </Slabs>
                 <Windows>
diff --git a/hescorehpxml/base.py b/hescorehpxml/base.py
index 83c3306a..55ef7dd0 100644
--- a/hescorehpxml/base.py
+++ b/hescorehpxml/base.py
@@ -1698,8 +1698,7 @@ class HPXMLtoHEScoreTranslatorBase(object):
                             else:
                                 raise TranslationError(
                                     'If there is more than one FoundationWall, an Area is required for each.')
-                    fwall_assembly_rvalue = self.get_foundation_wall_assembly_rvalue(fwall, fwall)
-                    if fwall_assembly_rvalue is not None:  # TODO: Allow for AssemblyEffectiveRValue
+                    if not self.every_surface_layer_has_nominal_rvalue(fwall):
                         raise TranslationError(
                             f'Every foundation wall insulation layer needs a NominalRValue, fwall_id = {fwallid}')
                     else:
@@ -1723,8 +1722,7 @@ class HPXMLtoHEScoreTranslatorBase(object):
                         else:
                             raise TranslationError(
                                 'If there is more than one Slab, an ExposedPerimeter is required for each.')
-                    slab_assembly_rvalue = self.get_slab_assembly_rvalue(slab, slab)
-                    if slab_assembly_rvalue is not None:  # TODO: Allow for AssemblyEffectiveRValue
+                    if not self.every_surface_layer_has_nominal_rvalue(slab):
                         raise TranslationError(
                             f"Every slab insulation layer needs a NominalRValue, slab_id = {slabid}")
                     else:
@@ -2519,6 +2517,23 @@ class HPXMLtoHEScoreTranslatorBase(object):
 
         return generation
 
+    def every_surface_layer_has_nominal_rvalue(self, surf_el):
+        # This variable will be true only if every wall layer has a NominalRValue
+        if surf_el.tag.endswith('Slab'):
+            surf_ins_layers = self.xpath(surf_el, 'h:PerimeterInsulation/h:Layer', aslist=True)
+        elif surf_el.tag.endswith('FoundationWall'):
+            surf_ins_layers = self.xpath(surf_el, 'h:Insulation/h:Layer', aslist=True)
+        every_layer_has_nominal_rvalue = True
+        if surf_ins_layers:
+            for layer in surf_ins_layers:
+                if self.xpath(layer, 'h:NominalRValue') is None:
+                    every_layer_has_nominal_rvalue = False
+                    break
+        else:
+            every_layer_has_nominal_rvalue = False
+
+        return every_layer_has_nominal_rvalue
+
     def validate_hescore_inputs(self, hescore_inputs):
 
         def do_bounds_check(fieldname, value, minincl, maxincl):
