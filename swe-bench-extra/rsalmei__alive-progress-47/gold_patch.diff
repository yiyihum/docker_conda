diff --git a/alive_progress/__init__.py b/alive_progress/__init__.py
index 6e364dd..f0e16c0 100644
--- a/alive_progress/__init__.py
+++ b/alive_progress/__init__.py
@@ -12,7 +12,7 @@ from .core.progress import alive_bar
 from .styles.exhibit import print_chars, show_bars, show_spinners, showtime
 from .styles.internal import BARS, SPINNERS, THEMES
 
-VERSION = (1, 6, 0)
+VERSION = (1, 6, 1)
 
 __author__ = 'Rogério Sampaio de Almeida'
 __email__ = 'rsalmei@gmail.com'
diff --git a/alive_progress/core/logging_hook.py b/alive_progress/core/logging_hook.py
index 1ffa0b4..21570ea 100644
--- a/alive_progress/core/logging_hook.py
+++ b/alive_progress/core/logging_hook.py
@@ -1,12 +1,31 @@
+# coding=utf-8
+from __future__ import absolute_import, division, print_function, unicode_literals
+
 import logging
 import sys
 
 
-def install_logging_hook():  # pragma: no cover
+def install_logging_hook():
     root = logging.root
-    return {h: h.setStream(sys.stdout) for h in root.handlers
-            if isinstance(h, logging.StreamHandler)}
+    return {h: set_stream(h, sys.stdout) for h in root.handlers  # noqa
+            if h.__class__ == logging.StreamHandler}  # want only this, not its subclasses.
+
+
+def uninstall_logging_hook(before):
+    [set_stream(h, s) for h, s in before.items()]
 
 
-def uninstall_logging_hook(before):  # pragma: no cover
-    [h.setStream(s) for h, s in before.items()]
+if sys.version_info >= (3, 7):
+    def set_stream(handler, stream):
+        return handler.setStream(stream)
+else:  # pragma: no cover
+    def set_stream(handler, stream):
+        # from python 3.7 implementation.
+        result = handler.stream
+        handler.acquire()
+        try:
+            handler.flush()
+            handler.stream = stream
+        finally:
+            handler.release()
+        return result
diff --git a/alive_progress/core/progress.py b/alive_progress/core/progress.py
index 3848d16..00f95b9 100644
--- a/alive_progress/core/progress.py
+++ b/alive_progress/core/progress.py
@@ -12,8 +12,8 @@ from itertools import chain, islice, repeat
 from .configuration import config_handler
 from .logging_hook import install_logging_hook, uninstall_logging_hook
 from .timing import gen_simple_exponential_smoothing_eta, to_elapsed_text, to_eta_text
-from .utils import clear_traces, hide_cursor, render_title, sanitize_text, show_cursor, \
-    terminal_columns
+from .utils import clear_traces, hide_cursor, render_title, sanitize_text_marking_wide_chars, \
+    show_cursor, terminal_columns
 from ..animations.utils import spinner_player
 
 
@@ -107,7 +107,7 @@ def alive_bar(total=None, title=None, calibrate=None, **options):
 
         line = ' '.join(filter(None, (
             title, bar_repr(run.percent, end), spin, monitor(), 'in',
-            to_elapsed_text(elapsed, end), run.stats(), run.text)))
+            to_elapsed_text(elapsed, end), stats(), run.text)))
 
         line_len, cols = len(line), terminal_columns()
         with print_lock:
@@ -123,7 +123,7 @@ def alive_bar(total=None, title=None, calibrate=None, **options):
             print()
 
     def set_text(message):
-        run.text = sanitize_text(message)
+        run.text = sanitize_text_marking_wide_chars(message)
 
     if config.manual:
         # FIXME update bar signatures and remove deprecated in v2.
@@ -219,7 +219,6 @@ def alive_bar(total=None, title=None, calibrate=None, **options):
         stats = lambda: spec.format(run.rate, to_eta_text(gen_eta.send((current(), run.rate))))
         bar_repr = config.bar(config.length)
     else:  # unknown progress.
-        eta_text = lambda: None  # noqa
         bar_repr = config.unknown(config.length, config.bar)
         stats = lambda: '({:.1f}/s)'.format(run.rate)  # noqa
     stats_end = lambda: '({:.2{}}/s)'.format(run.rate, rate_spec)  # noqa
@@ -245,9 +244,8 @@ def alive_bar(total=None, title=None, calibrate=None, **options):
             return math.log10((run.rate * adjust_log_curve) + 1.) * factor + min_fps
         return max_fps
 
-    end, run.text, run.eta_text, run.stats = False, '', '', stats
-    run.count, run.last_line_len = 0, 0
-    run.percent, run.rate, run.init = 0., 0., 0.
+    end, run.text, run.last_line_len = False, '', 0
+    run.count, run.percent, run.rate, run.init = 0, 0., 0., 0.
 
     if total:
         if config.manual:
@@ -282,5 +280,5 @@ def alive_bar(total=None, title=None, calibrate=None, **options):
             thread = None  # lets the internal thread terminate gracefully.
             local_copy.join()
 
-        end, run.text, run.stats = True, '', stats_end
+        end, run.text, stats = True, '', stats_end
         alive_repr()
diff --git a/alive_progress/core/utils.py b/alive_progress/core/utils.py
index 771c091..4f6b19e 100644
--- a/alive_progress/core/utils.py
+++ b/alive_progress/core/utils.py
@@ -3,6 +3,10 @@ from __future__ import absolute_import, division, print_function, unicode_litera
 
 import os
 import sys
+import unicodedata
+from itertools import chain
+
+ZWJ = '\u200d'  # zero-width joiner (it's the only one that actually worked on my terminal)
 
 
 def clear_traces():  # pragma: no cover
@@ -20,18 +24,23 @@ def show_cursor():  # pragma: no cover
     sys.__stdout__.write('\033[?25h')
 
 
-def sanitize_text(text):
-    return ' '.join(str(text).split())
+def sanitize_text_marking_wide_chars(text):
+    text = ' '.join((text or '').split())
+    return ''.join(chain.from_iterable(
+        (ZWJ, x) if unicodedata.east_asian_width(x) == 'W' else (x,)
+        for x in text))
 
 
 def render_title(title, length):
     if not title:
         return ''
-    elif not length:
-        return title
     elif length == 1:
         return '…'
 
+    title = sanitize_text_marking_wide_chars(title)
+    if not length:
+        return title
+
     # fixed size left align implementation.
     # there may be more in v2, like other alignments, variable with maximum size, and
     # even scrolling and bouncing.
diff --git a/noxfile.py b/noxfile.py
new file mode 100644
index 0000000..d366a5b
--- /dev/null
+++ b/noxfile.py
@@ -0,0 +1,6 @@
+import nox
+
+@nox.session(python=["2.7", "3.5", "3.6", "3.7", "3.8"])
+def tests(session):
+    session.install('-r', 'requirements/test.txt')
+    session.run('pytest')
