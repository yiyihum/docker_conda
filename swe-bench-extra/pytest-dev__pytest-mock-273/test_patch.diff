diff --git a/tests/test_pytest_mock.py b/tests/test_pytest_mock.py
index 6d8feda..cca50ad 100644
--- a/tests/test_pytest_mock.py
+++ b/tests/test_pytest_mock.py
@@ -211,7 +211,7 @@ class TestMockerStub:
     def test_repr_with_name(self, mocker: MockerFixture) -> None:
         test_name = "funny walk"
         stub = mocker.stub(name=test_name)
-        assert "name={!r}".format(test_name) in repr(stub)
+        assert f"name={test_name!r}" in repr(stub)
 
     def __test_failure_message(self, mocker: MockerFixture, **kwargs: Any) -> None:
         expected_name = kwargs.get("name") or "mock"
@@ -267,19 +267,19 @@ def test_instance_method_spy_exception(
 ) -> None:
     class Foo:
         def bar(self, arg):
-            raise exc_cls("Error with {}".format(arg))
+            raise exc_cls(f"Error with {arg}")
 
     foo = Foo()
     spy = mocker.spy(foo, "bar")
 
     expected_calls = []
     for i, v in enumerate([10, 20]):
-        with pytest.raises(exc_cls, match="Error with {}".format(v)):
+        with pytest.raises(exc_cls, match=f"Error with {v}"):
             foo.bar(arg=v)
 
         expected_calls.append(mocker.call(arg=v))
         assert foo.bar.call_args_list == expected_calls  # type:ignore[attr-defined]
-        assert str(spy.spy_exception) == "Error with {}".format(v)
+        assert str(spy.spy_exception) == f"Error with {v}"
 
 
 def test_instance_method_spy_autospec_true(mocker: MockerFixture) -> None:
@@ -296,7 +296,7 @@ def test_instance_method_spy_autospec_true(mocker: MockerFixture) -> None:
 
 
 def test_spy_reset(mocker: MockerFixture) -> None:
-    class Foo(object):
+    class Foo:
         def bar(self, x):
             if x == 0:
                 raise ValueError("invalid x")
@@ -475,7 +475,6 @@ def test_callable_like_spy(testdir: Any, mocker: MockerFixture) -> None:
     assert spy.spy_return == 20
 
 
-@pytest.mark.asyncio
 async def test_instance_async_method_spy(mocker: MockerFixture) -> None:
     class Foo:
         async def bar(self, arg):
@@ -728,6 +727,12 @@ def test_standalone_mock(testdir: Any) -> None:
 @pytest.mark.usefixtures("needs_assert_rewrite")
 def test_detailed_introspection(testdir: Any) -> None:
     """Check that the "mock_use_standalone" is being used."""
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         def test(mocker):
@@ -769,11 +774,16 @@ def test_detailed_introspection(testdir: Any) -> None:
 @pytest.mark.usefixtures("needs_assert_rewrite")
 def test_detailed_introspection_async(testdir: Any) -> None:
     """Check that the "mock_use_standalone" is being used."""
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         import pytest
 
-        @pytest.mark.asyncio
         async def test(mocker):
             m = mocker.AsyncMock()
             await m('fo')
@@ -824,6 +834,12 @@ def test_assert_called_with_unicode_arguments(mocker: MockerFixture) -> None:
 
 def test_plain_stopall(testdir: Any) -> None:
     """patch.stopall() in a test should not cause an error during unconfigure (#137)"""
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         import random
@@ -958,6 +974,12 @@ def test_abort_patch_context_manager_with_stale_pyc(testdir: Any) -> None:
 
 
 def test_used_with_class_scope(testdir: Any) -> None:
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         import pytest
@@ -982,6 +1004,12 @@ def test_used_with_class_scope(testdir: Any) -> None:
 
 
 def test_used_with_module_scope(testdir: Any) -> None:
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         import pytest
@@ -1004,7 +1032,12 @@ def test_used_with_module_scope(testdir: Any) -> None:
 
 
 def test_used_with_package_scope(testdir: Any) -> None:
-    """..."""
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         import pytest
@@ -1027,7 +1060,12 @@ def test_used_with_package_scope(testdir: Any) -> None:
 
 
 def test_used_with_session_scope(testdir: Any) -> None:
-    """..."""
+    testdir.makeini(
+        """
+        [pytest]
+        asyncio_mode=auto
+        """
+    )
     testdir.makepyfile(
         """
         import pytest
