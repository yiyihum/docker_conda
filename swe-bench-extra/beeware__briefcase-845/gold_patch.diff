diff --git a/changes/837.bugfix.rst b/changes/837.bugfix.rst
new file mode 100644
index 00000000..5473bb5f
--- /dev/null
+++ b/changes/837.bugfix.rst
@@ -0,0 +1,1 @@
+The RCEdit plugin can now be upgraded.
diff --git a/changes/841.bugfix.rst b/changes/841.bugfix.rst
new file mode 100644
index 00000000..f05efe07
--- /dev/null
+++ b/changes/841.bugfix.rst
@@ -0,0 +1,1 @@
+When verifying the existence of the Android emulator, Briefcase now looks for the actual binary, not the folder that contains the binary. This was causing false positives on some Android SDK setups.
diff --git a/changes/842.feature.rst b/changes/842.feature.rst
new file mode 100644
index 00000000..21b07dad
--- /dev/null
+++ b/changes/842.feature.rst
@@ -0,0 +1,1 @@
+Log messages can now be captured on iOS if they originate from a dynamically loaded module.
diff --git a/src/briefcase/integrations/android_sdk.py b/src/briefcase/integrations/android_sdk.py
index ecc7193a..48dfe94d 100644
--- a/src/briefcase/integrations/android_sdk.py
+++ b/src/briefcase/integrations/android_sdk.py
@@ -406,7 +406,7 @@ connection.
         # might be missing.
         (self.root_path / "platforms").mkdir(exist_ok=True)
 
-        if (self.root_path / "emulator").exists():
+        if (self.emulator_path).exists():
             self.command.logger.debug("Android emulator is already installed.")
             return
 
diff --git a/src/briefcase/integrations/rcedit.py b/src/briefcase/integrations/rcedit.py
index 375f7320..16886a25 100644
--- a/src/briefcase/integrations/rcedit.py
+++ b/src/briefcase/integrations/rcedit.py
@@ -3,6 +3,7 @@ from briefcase.exceptions import MissingToolError
 
 class RCEdit:
     name = "rcedit"
+    full_name = "RCEdit"
 
     def __init__(self, command):
         self.command = command
diff --git a/src/briefcase/platforms/iOS/xcode.py b/src/briefcase/platforms/iOS/xcode.py
index cb248810..a1bdca11 100644
--- a/src/briefcase/platforms/iOS/xcode.py
+++ b/src/briefcase/platforms/iOS/xcode.py
@@ -351,6 +351,19 @@ class iOSXcodeRunCommand(iOSXcodeMixin, RunCommand):
             ) from e
 
         # Start log stream for the app.
+        # The following sets up a log stream filter that looks for:
+        #  1. a log sender that matches that app binary; or,
+        #  2. a log sender of that is a Python extension module,
+        #     and a process that matches the app binary.
+        # Case (1) works when the standard libary is statically linked,
+        #   and for native NSLog() calls in the bootstrap binary
+        # Case (2) works when the standard library is dynamically linked,
+        #   and ctypes (which handles the NSLog integration) is an
+        #   extension module.
+        # It's not enough to filter on *just* the processImagePath,
+        # as the process will generate lots of system-level messages.
+        # We can't filter on *just* the senderImagePath, because other
+        # apps will generate log messages that would be caught by the filter.
         simulator_log_popen = self.subprocess.Popen(
             [
                 "xcrun",
@@ -362,7 +375,9 @@ class iOSXcodeRunCommand(iOSXcodeMixin, RunCommand):
                 "--style",
                 "compact",
                 "--predicate",
-                f'senderImagePath ENDSWITH "/{app.formal_name}"',
+                f'senderImagePath ENDSWITH "/{app.formal_name}"'
+                f' OR (processImagePath ENDSWITH "/{app.formal_name}"'
+                ' AND senderImagePath ENDSWITH "-iphonesimulator.so")',
             ],
             stdout=subprocess.PIPE,
             stderr=subprocess.STDOUT,
diff --git a/src/briefcase/platforms/macOS/__init__.py b/src/briefcase/platforms/macOS/__init__.py
index 6c9530d7..1f90a3c5 100644
--- a/src/briefcase/platforms/macOS/__init__.py
+++ b/src/briefcase/platforms/macOS/__init__.py
@@ -47,6 +47,10 @@ class macOSRunMixin:
         #  2. a log sender of libffi, and a process that matches the app binary.
         # Case (1) works for pre-Python 3.9 static linked binaries.
         # Case (2) works for Python 3.9+ dynamic linked binaries.
+        # It's not enough to filter on *just* the processImagePath,
+        # as the process will generate lots of system-level messages.
+        # We can't filter on *just* the senderImagePath, because other
+        # apps will generate log messages that would be caught by the filter.
         sender = os.fsdecode(
             self.binary_path(app) / "Contents" / "MacOS" / app.formal_name
         )
