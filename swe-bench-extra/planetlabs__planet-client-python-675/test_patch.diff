diff --git a/tests/integration/test_data_cli.py b/tests/integration/test_data_cli.py
index 60a1a64..f146cf0 100644
--- a/tests/integration/test_data_cli.py
+++ b/tests/integration/test_data_cli.py
@@ -23,6 +23,7 @@ from click.testing import CliRunner
 import pytest
 
 from planet.cli import cli
+from planet.specs import get_item_types
 
 LOGGER = logging.getLogger(__name__)
 
@@ -55,6 +56,23 @@ def test_data_command_registered(invoke):
     # Add other sub-commands here.
 
 
+def test_data_search_command_registered(invoke):
+    """planet-data search command prints help and usage message."""
+    runner = CliRunner()
+    result = invoke(["search", "--help"], runner=runner)
+    all_item_types = [a for a in get_item_types()]
+    assert result.exit_code == 0
+    assert "Usage" in result.output
+    assert "limit" in result.output
+    assert "name" in result.output
+    assert "sort" in result.output
+    assert "pretty" in result.output
+    assert "help" in result.output
+    for a in all_item_types:
+        assert a in result.output.replace('\n', '').replace(' ', '')
+    # Add other sub-commands here.
+
+
 PERMISSION_FILTER = {"type": "PermissionFilter", "config": ["assets:download"]}
 STD_QUALITY_FILTER = {
     "type": "StringInFilter",
@@ -358,8 +376,8 @@ def test_data_filter_update(invoke, assert_and_filters_equal, default_filters):
 @respx.mock
 @pytest.mark.asyncio
 @pytest.mark.parametrize("filter", ['{1:1}', '{"foo"}'])
-@pytest.mark.parametrize(
-    "item_types", ['PSScene', 'SkySatScene', ('PSScene', 'SkySatScene')])
+@pytest.mark.parametrize("item_types",
+                         ['PSScene', 'SkySatScene', 'PSScene, SkySatScene'])
 def test_data_search_cmd_filter_invalid_json(invoke, item_types, filter):
     """Test for planet data search_quick. Test with multiple item_types.
     Test should fail as filter does not contain valid JSON."""
@@ -375,8 +393,8 @@ def test_data_search_cmd_filter_invalid_json(invoke, item_types, filter):
 
 
 @respx.mock
-@pytest.mark.parametrize(
-    "item_types", ['PSScene', 'SkySatScene', ('PSScene', 'SkySatScene')])
+@pytest.mark.parametrize("item_types",
+                         ['PSScene', 'SkySatScene', 'PSScene, SkySatScene'])
 def test_data_search_cmd_filter_success(invoke, item_types):
     """Test for planet data search_quick. Test with multiple item_types.
     Test should succeed as filter contains valid JSON."""
@@ -495,8 +513,8 @@ def test_data_search_cmd_limit(invoke,
 @respx.mock
 @pytest.mark.asyncio
 @pytest.mark.parametrize("filter", ['{1:1}', '{"foo"}'])
-@pytest.mark.parametrize(
-    "item_types", ['PSScene', 'SkySatScene', ('PSScene', 'SkySatScene')])
+@pytest.mark.parametrize("item_types",
+                         ['PSScene', 'SkySatScene', 'PSScene, SkySatScene'])
 def test_data_search_create_filter_invalid_json(invoke, item_types, filter):
     """Test for planet data search_create. Test with multiple item_types.
     Test should fail as filter does not contain valid JSON."""
@@ -514,8 +532,8 @@ def test_data_search_create_filter_invalid_json(invoke, item_types, filter):
 
 
 @respx.mock
-@pytest.mark.parametrize(
-    "item_types", ['PSScene', 'SkySatScene', ('PSScene', 'SkySatScene')])
+@pytest.mark.parametrize("item_types",
+                         ['PSScene', 'SkySatScene', 'PSScene, SkySatScene'])
 def test_data_search_create_filter_success(invoke, item_types):
     """Test for planet data search_create. Test with multiple item_types.
     Test should succeed as filter contains valid JSON."""
@@ -601,8 +619,8 @@ def test_data_stats_invalid_filter(invoke, filter):
 
 
 @respx.mock
-@pytest.mark.parametrize(
-    "item_types", ['PSScene', 'SkySatScene', ('PSScene', 'SkySatScene')])
+@pytest.mark.parametrize("item_types",
+                         ['PSScene', 'SkySatScene', 'PSScene, SkySatScene'])
 @pytest.mark.parametrize("interval, exit_code", [(None, 1), ('hou', 2),
                                                  ('hour', 0)])
 def test_data_stats_invalid_interval(invoke, item_types, interval, exit_code):
@@ -630,8 +648,8 @@ def test_data_stats_invalid_interval(invoke, item_types, interval, exit_code):
 
 
 @respx.mock
-@pytest.mark.parametrize(
-    "item_types", ['PSScene', 'SkySatScene', ('PSScene', 'SkySatScene')])
+@pytest.mark.parametrize("item_types",
+                         ['PSScene', 'SkySatScene', 'PSScene, SkySatScene'])
 @pytest.mark.parametrize("interval", ['hour', 'day', 'week', 'month', 'year'])
 def test_data_stats_success(invoke, item_types, interval):
     """Test for planet data stats. Test with multiple item_types.
diff --git a/tests/unit/test_data_item_type.py b/tests/unit/test_data_item_type.py
new file mode 100644
index 0000000..41d7b78
--- /dev/null
+++ b/tests/unit/test_data_item_type.py
@@ -0,0 +1,55 @@
+# Copyright 2022 Planet Labs PBC.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+import logging
+import pytest
+import click
+from planet.cli.data import check_item_types
+
+LOGGER = logging.getLogger(__name__)
+
+
+class MockContext:
+
+    def __init__(self):
+        self.obj = {}
+
+
+@pytest.mark.parametrize("item_types",
+                         [
+                             'PSScene3Band',
+                             'MOD09GQ',
+                             'MYD09GA',
+                             'REOrthoTile',
+                             'SkySatCollect',
+                             'SkySatScene',
+                             'MYD09GQ',
+                             'Landsat8L1G',
+                             'Sentinel2L1C',
+                             'MOD09GA',
+                             'Sentinel1',
+                             'PSScene',
+                             'PSOrthoTile',
+                             'PSScene4Band',
+                             'REScene'
+                         ])
+def test_item_type_success(item_types):
+    ctx = MockContext()
+    result = check_item_types(ctx, 'item_types', [item_types])
+    assert result == [item_types]
+
+
+def test_item_type_fail():
+    ctx = MockContext()
+    with pytest.raises(click.BadParameter):
+        check_item_types(ctx, 'item_type', "bad_item_type")
diff --git a/tests/unit/test_specs.py b/tests/unit/test_specs.py
index 6f721e9..21b4e57 100644
--- a/tests/unit/test_specs.py
+++ b/tests/unit/test_specs.py
@@ -23,6 +23,23 @@ LOGGER = logging.getLogger(__name__)
 TEST_PRODUCT_BUNDLE = 'visual'
 # must be a valid item type for TEST_PRODUCT_BUNDLE
 TEST_ITEM_TYPE = 'PSScene'
+ALL_ITEM_TYPES = [
+    'PSOrthoTile',
+    'Sentinel1',
+    'REOrthoTile',
+    'PSScene',
+    'PSScene4Band',
+    'Landsat8L1G',
+    'PSScene3Band',
+    'REScene',
+    'MOD09GA',
+    'MYD09GA',
+    'MOD09GQ',
+    'SkySatCollect',
+    'Sentinel2L1C',
+    'MYD09GQ',
+    'SkySatScene'
+]
 
 
 def test_get_type_match():
@@ -90,6 +107,12 @@ def test_get_product_bundles():
     assert TEST_PRODUCT_BUNDLE in bundles
 
 
-def test_get_item_types():
-    item_types = specs.get_item_types(TEST_PRODUCT_BUNDLE)
+def test_get_item_types_with_bundle():
+    item_types = specs.get_item_types(product_bundle=TEST_PRODUCT_BUNDLE)
     assert TEST_ITEM_TYPE in item_types
+
+
+def test_get_item_types_without_bundle():
+    item_types = specs.get_item_types()
+    for item in item_types:
+        assert item in ALL_ITEM_TYPES
