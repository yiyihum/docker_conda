diff --git a/cincoconfig/config.py b/cincoconfig/config.py
index 119738e..2657aa7 100644
--- a/cincoconfig/config.py
+++ b/cincoconfig/config.py
@@ -5,6 +5,7 @@
 # this source code package.
 #
 
+import os
 import sys
 from typing import Union, Any, Iterator, Tuple, Callable, List
 from argparse import Namespace
@@ -498,6 +499,7 @@ class Config(BaseConfig):
         :param format: output format
         '''
         content = self.dumps(format)
+        filename = os.path.expanduser(filename)
         with open(filename, 'wb') as file:
             file.write(content)
 
@@ -508,7 +510,7 @@ class Config(BaseConfig):
         :param filename: source filename
         :param format: source format
         '''
-
+        filename = os.path.expanduser(filename)
         with open(filename, 'rb') as file:
             content = file.read()
 
diff --git a/cincoconfig/encryption.py b/cincoconfig/encryption.py
index e404c8e..0a5405e 100644
--- a/cincoconfig/encryption.py
+++ b/cincoconfig/encryption.py
@@ -104,8 +104,9 @@ class KeyFile:
         '''
         INTERNAL METHOD. Load configuration key.
         '''
+        filename = os.path.expanduser(self.filename)
         try:
-            with open(self.filename, 'rb') as fp:
+            with open(filename, 'rb') as fp:
                 self.__key = fp.read()
         except OSError:
             self.__key = self.__generate_key()
@@ -119,7 +120,8 @@ class KeyFile:
         :returns: the generated key
         '''
         key = os.urandom(32)
-        with open(self.filename, 'wb') as fp:
+        filename = os.path.expanduser(self.filename)
+        with open(filename, 'wb') as fp:
             fp.write(key)
         return key
 
diff --git a/cincoconfig/fields.py b/cincoconfig/fields.py
index bf64778..3ecdc31 100644
--- a/cincoconfig/fields.py
+++ b/cincoconfig/fields.py
@@ -286,6 +286,15 @@ class IPv4NetworkField(StringField):
     '''
     storage_type = str
 
+    def __init__(self, min_prefix_len: int = None, max_prefix_len: int = None, **kwargs):
+        '''
+        :param min_prefix_len: minimum subnet prefix length (/X), in bits
+        :param max_prefix_len: maximum subnet prefix length (/X), in bits
+        '''
+        super().__init__(**kwargs)
+        self.min_prefix_len = min_prefix_len
+        self.max_prefix_len = max_prefix_len
+
     def _validate(self, cfg: BaseConfig, value: str) -> str:
         '''
         Validate a value.
@@ -299,6 +308,13 @@ class IPv4NetworkField(StringField):
             net = IPv4Network(value)
         except ValueError as err:
             raise ValueError('value is not a valid IPv4 Network (CIDR)') from err
+
+        if self.min_prefix_len and net.prefixlen < self.min_prefix_len:
+            raise ValueError('value must be at least a /%d subnet' % self.min_prefix_len)
+
+        if self.max_prefix_len and net.prefixlen > self.max_prefix_len:
+            raise ValueError('value must be smaller than a /%d subnet' % self.max_prefix_len)
+
         return str(net)
 
 
@@ -398,7 +414,7 @@ class FilenameField(StringField):
             return value
 
         if not os.path.isabs(value) and self.startdir:
-            value = os.path.abspath(os.path.join(self.startdir, value))
+            value = os.path.abspath(os.path.expanduser(os.path.join(self.startdir, value)))
 
         if os.path.sep == '\\':
             value = value.replace('/', '\\')
@@ -1217,7 +1233,7 @@ class IncludeField(FilenameField):
         :returns: the new basic value tree containing the base tree and the included tree
         '''
         filename = self.validate(config, filename)
-        with open(filename, 'rb') as fp:
+        with open(os.path.expanduser(filename), 'rb') as fp:
             content = fp.read()
 
         child = fmt.loads(config, content)
