diff --git a/zulipterminal/cli/run.py b/zulipterminal/cli/run.py
index 87794e9..a3ccd9d 100755
--- a/zulipterminal/cli/run.py
+++ b/zulipterminal/cli/run.py
@@ -61,6 +61,7 @@ requests_logger.setLevel(logging.DEBUG)
 VALID_BOOLEAN_SETTINGS: Dict[str, Tuple[str, str]] = {
     "autohide": ("autohide", "no_autohide"),
     "notify": ("enabled", "disabled"),
+    "exit_confirmation": ("enabled", "disabled"),
 }
 
 COLOR_DEPTH_ARGS_TO_DEPTHS: Dict[str, int] = {
@@ -78,10 +79,14 @@ DEFAULT_SETTINGS = {
     "footlinks": "enabled",
     "color-depth": "256",
     "maximum-footlinks": "3",
+    "exit_confirmation": "enabled",
 }
 assert DEFAULT_SETTINGS["autohide"] in VALID_BOOLEAN_SETTINGS["autohide"]
 assert DEFAULT_SETTINGS["notify"] in VALID_BOOLEAN_SETTINGS["notify"]
 assert DEFAULT_SETTINGS["color-depth"] in COLOR_DEPTH_ARGS_TO_DEPTHS
+assert (
+    DEFAULT_SETTINGS["exit_confirmation"] in VALID_BOOLEAN_SETTINGS["exit_confirmation"]
+)
 
 
 def in_color(color: str, text: str) -> str:
@@ -537,6 +542,7 @@ def main(options: Optional[List[str]] = None) -> None:
                 incomplete_theme_text += "      (all themes are incomplete)"
             print(in_color("yellow", incomplete_theme_text))
         print_setting("autohide setting", zterm["autohide"])
+        print_setting("exit confirmation setting", zterm["exit_confirmation"])
         if zterm["footlinks"].source == ConfigSource.ZULIPRC:
             print_setting(
                 "maximum footlinks value",
diff --git a/zulipterminal/core.py b/zulipterminal/core.py
index f93d89e..2799210 100644
--- a/zulipterminal/core.py
+++ b/zulipterminal/core.py
@@ -70,12 +70,14 @@ class Controller:
         in_explore_mode: bool,
         autohide: bool,
         notify: bool,
+        exit_confirmation: bool,
     ) -> None:
         self.theme_name = theme_name
         self.theme = theme
         self.color_depth = color_depth
         self.in_explore_mode = in_explore_mode
         self.autohide = autohide
+        self.exit_confirmation = exit_confirmation
         self.notify_enabled = notify
         self.maximum_footlinks = maximum_footlinks
 
@@ -107,7 +109,12 @@ class Controller:
         self._exception_pipe = self.loop.watch_pipe(self._raise_exception)
 
         # Register new ^C handler
-        signal.signal(signal.SIGINT, self.exit_handler)
+        signal.signal(
+            signal.SIGINT,
+            self.prompting_exit_handler
+            if self.exit_confirmation
+            else self.no_prompt_exit_handler,
+        )
 
     def raise_exception_in_main_thread(
         self, exc_info: ExceptionInfo, *, critical: bool
@@ -621,7 +628,10 @@ class Controller:
         self.client.deregister(queue_id, 1.0)
         sys.exit(0)
 
-    def exit_handler(self, signum: int, frame: Any) -> None:
+    def no_prompt_exit_handler(self, signum: int, frame: Any) -> None:
+        self.deregister_client()
+
+    def prompting_exit_handler(self, signum: int, frame: Any) -> None:
         question = urwid.Text(
             ("bold", " Please confirm that you wish to exit Zulip-Terminal "),
             "center",

