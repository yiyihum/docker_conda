diff --git a/src/model/relationship.py b/src/model/relationship.py
index 1b34fe0..88026c9 100644
--- a/src/model/relationship.py
+++ b/src/model/relationship.py
@@ -9,8 +9,10 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 from enum import auto, Enum
-from typing import Optional
+from typing import Optional, Union
 
+from src.model.spdx_no_assertion import SpdxNoAssertion
+from src.model.spdx_none import SpdxNone
 from src.model.typing.dataclass_with_properties import dataclass_with_properties
 from src.model.typing.type_checks import check_types_and_set_values
 
@@ -67,9 +69,9 @@ class RelationshipType(Enum):
 class Relationship:
     spdx_element_id: str
     relationship_type: RelationshipType
-    related_spdx_element_id: str
+    related_spdx_element_id: Union[str, SpdxNone, SpdxNoAssertion]
     comment: Optional[str] = None
 
-    def __init__(self, spdx_element_id: str, relationship_type: RelationshipType, related_spdx_element_id: str,
-                 comment: Optional[str] = None):
+    def __init__(self, spdx_element_id: str, relationship_type: RelationshipType,
+                 related_spdx_element_id: Union[str, SpdxNone, SpdxNoAssertion], comment: Optional[str] = None):
         check_types_and_set_values(self, locals())
diff --git a/src/parser/json/relationship_parser.py b/src/parser/json/relationship_parser.py
index defecd3..e2c910e 100644
--- a/src/parser/json/relationship_parser.py
+++ b/src/parser/json/relationship_parser.py
@@ -15,7 +15,7 @@ from src.model.typing.constructor_type_errors import ConstructorTypeErrors
 from src.parser.error import SPDXParsingError
 from src.parser.json.dict_parsing_functions import raise_parsing_error_if_logger_has_messages, json_str_to_enum_name, \
     construct_or_raise_parsing_error, \
-    parse_field_or_log_error, parse_list_of_elements
+    parse_field_or_log_error, parse_field_or_no_assertion_or_none
 from src.parser.logger import Logger
 
 
@@ -58,7 +58,7 @@ class RelationshipParser:
     def parse_relationship(self, relationship_dict: Dict) -> Relationship:
         logger = Logger()
         spdx_element_id: Optional[str] = relationship_dict.get("spdxElementId")
-        related_spdx_element: Optional[str] = relationship_dict.get("relatedSpdxElement")
+        related_spdx_element: Optional[str] = parse_field_or_no_assertion_or_none(relationship_dict.get("relatedSpdxElement"))
         relationship_type: Optional[RelationshipType] = parse_field_or_log_error(logger, relationship_dict.get(
             "relationshipType"), self.parse_relationship_type)
         relationship_comment: Optional[str] = relationship_dict.get("comment")
diff --git a/src/validation/relationship_validator.py b/src/validation/relationship_validator.py
index a929225..edf8754 100644
--- a/src/validation/relationship_validator.py
+++ b/src/validation/relationship_validator.py
@@ -9,10 +9,12 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
-from typing import List
+from typing import List, Union
 
 from src.model.document import Document
 from src.model.relationship import Relationship, RelationshipType
+from src.model.spdx_no_assertion import SpdxNoAssertion
+from src.model.spdx_none import SpdxNone
 from src.validation.spdx_id_validators import validate_spdx_id
 from src.validation.validation_message import ValidationMessage, ValidationContext, SpdxElementType
 
@@ -30,12 +32,14 @@ def validate_relationship(relationship: Relationship, document: Document, spdx_v
     context = ValidationContext(element_type=SpdxElementType.RELATIONSHIP,
                                 full_element=relationship)
 
-    first_id: str = relationship.spdx_element_id
-    second_id: str = relationship.related_spdx_element_id
     relationship_type: RelationshipType = relationship.relationship_type
 
-    for spdx_id in [first_id, second_id]:
-        messages: List[str] = validate_spdx_id(spdx_id, document, check_document=True)
+    messages: List[str] = validate_spdx_id(relationship.spdx_element_id, document, check_document=True)
+    for message in messages:
+        validation_messages.append(ValidationMessage(message, context))
+
+    if relationship.related_spdx_element_id not in [SpdxNone(), SpdxNoAssertion()]:
+        messages: List[str] = validate_spdx_id(relationship.related_spdx_element_id, document, check_document=True)
         for message in messages:
             validation_messages.append(ValidationMessage(message, context))
 
