diff --git a/tests/model/test_relationship.py b/tests/model/test_relationship.py
index 4d0a0a6..c3b99a6 100644
--- a/tests/model/test_relationship.py
+++ b/tests/model/test_relationship.py
@@ -1,19 +1,20 @@
 import pytest
 
 from src.model.relationship import Relationship, RelationshipType
+from src.model.spdx_no_assertion import SpdxNoAssertion
 
 
 def test_correct_initialization():
-    relationship = Relationship("id", RelationshipType.OTHER, "other_id", "comment")
+    relationship = Relationship("id", RelationshipType.OTHER, SpdxNoAssertion(), "comment")
     assert relationship.spdx_element_id == "id"
     assert relationship.relationship_type == RelationshipType.OTHER
-    assert relationship.related_spdx_element_id == "other_id"
+    assert relationship.related_spdx_element_id == SpdxNoAssertion()
     assert relationship.comment == "comment"
 
 
 def test_wrong_type_in_spdx_element_id():
     with pytest.raises(TypeError):
-        Relationship(42, RelationshipType.OTHER, "other_id")
+        Relationship(SpdxNoAssertion(), RelationshipType.OTHER, "other_id")
 
 
 def test_wrong_type_in_relationship_type():
diff --git a/tests/parser/test_relationship_parser.py b/tests/parser/test_relationship_parser.py
index d1afa64..27f2c4f 100644
--- a/tests/parser/test_relationship_parser.py
+++ b/tests/parser/test_relationship_parser.py
@@ -13,6 +13,7 @@ from unittest import TestCase
 import pytest
 
 from src.model.relationship import RelationshipType, Relationship
+from src.model.spdx_no_assertion import SpdxNoAssertion
 from src.parser.error import SPDXParsingError
 from src.parser.json.relationship_parser import RelationshipParser
 
@@ -23,7 +24,7 @@ def test_parse_relationship():
     relationship_dict = {
         "spdxElementId": "SPDXRef-DOCUMENT",
         "relationshipType": "CONTAINS",
-        "relatedSpdxElement": "SPDXRef-Package",
+        "relatedSpdxElement": "NOASSERTION",
         "comment": "Comment."
     }
 
@@ -31,7 +32,7 @@ def test_parse_relationship():
 
     assert relationship.relationship_type == RelationshipType.CONTAINS
     assert relationship.spdx_element_id == "SPDXRef-DOCUMENT"
-    assert relationship.related_spdx_element_id == "SPDXRef-Package"
+    assert relationship.related_spdx_element_id == SpdxNoAssertion()
     assert relationship.comment == "Comment."
 
 
diff --git a/tests/validation/test_relationship_validator.py b/tests/validation/test_relationship_validator.py
index 1d56bd6..2e2a08b 100644
--- a/tests/validation/test_relationship_validator.py
+++ b/tests/validation/test_relationship_validator.py
@@ -15,15 +15,19 @@ import pytest
 
 from src.model.document import Document
 from src.model.relationship import Relationship, RelationshipType
+from src.model.spdx_no_assertion import SpdxNoAssertion
+from src.model.spdx_none import SpdxNone
 from src.validation.relationship_validator import validate_relationship
 from src.validation.validation_message import ValidationMessage, SpdxElementType, ValidationContext
 from tests.valid_defaults import get_document, get_package, get_relationship, get_file
 
 
-def test_valid_relationship():
+@pytest.mark.parametrize("related_spdx_element",
+                         ["SPDXRef-Package", SpdxNoAssertion(), SpdxNone()])
+def test_valid_relationship(related_spdx_element):
     document: Document = get_document(packages=[get_package(spdx_id="SPDXRef-Package")])
 
-    relationship = Relationship("SPDXRef-DOCUMENT", RelationshipType.AMENDS, "SPDXRef-Package", comment="comment")
+    relationship = Relationship("SPDXRef-DOCUMENT", RelationshipType.AMENDS, related_spdx_element, comment="comment")
     validation_messages: List[ValidationMessage] = validate_relationship(relationship, document, "2.3")
 
     assert validation_messages == []
