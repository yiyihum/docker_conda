diff --git a/aiosmtpd/testing/helpers.py b/aiosmtpd/testing/helpers.py
index a02568e..614760b 100644
--- a/aiosmtpd/testing/helpers.py
+++ b/aiosmtpd/testing/helpers.py
@@ -66,24 +66,15 @@ def start(plugin):
 
 
 def assert_auth_success(testcase: TestCase, *response):
-    testcase.assertEqual(
-        (235, b"2.7.0 Authentication successful"),
-        response
-    )
+    assert response == (235, b"2.7.0 Authentication successful")
 
 
 def assert_auth_invalid(testcase: TestCase, *response):
-    testcase.assertEqual(
-        (535, b"5.7.8 Authentication credentials invalid"),
-        response
-    )
+    assert response == (535, b"5.7.8 Authentication credentials invalid")
 
 
 def assert_auth_required(testcase: TestCase, *response):
-    testcase.assertEqual(
-        (530, b"5.7.0 Authentication required"),
-        response
-    )
+    assert response == (530, b"5.7.0 Authentication required")
 
 
 SUPPORTED_COMMANDS_TLS: bytes = (
diff --git a/aiosmtpd/tests/test_smtp.py b/aiosmtpd/tests/test_smtp.py
index c2eed49..d225303 100644
--- a/aiosmtpd/tests/test_smtp.py
+++ b/aiosmtpd/tests/test_smtp.py
@@ -1,8 +1,10 @@
 """Test the SMTP protocol."""
 
+import os
 import time
 import socket
 import asyncio
+import logging
 import unittest
 import warnings
 
@@ -36,6 +38,7 @@ BCRLF = b'\r\n'
 
 
 ModuleResources = ExitStack()
+mail_logger = logging.getLogger('mail.log')
 
 
 def setUpModule():
@@ -43,6 +46,24 @@ def setUpModule():
     # and oftentimes (not always, though) leads to Error
     ModuleResources.enter_context(patch("socket.getfqdn", return_value="localhost"))
 
+    loglevel = int(os.environ.get("AIOSMTPD_TESTLOGLEVEL", logging.INFO))
+    mail_logger.setLevel(loglevel)
+
+    if "AIOSMTPD_TESTLOGFILE" in os.environ:
+        fhandler = logging.FileHandler(
+            os.environ["AIOSMTPD_TESTLOGFILE"],
+            mode="a",
+            encoding="latin1",
+        )
+        fhandler.setLevel(1)
+        fhandler.setFormatter(
+            logging.Formatter(
+                u"{asctime} - {name} - {levelname} - {message}",
+                style="{",
+            )
+        )
+        mail_logger.addHandler(fhandler)
+
 
 def tearDownModule():
     ModuleResources.close()
@@ -80,7 +101,14 @@ class PeekerHandler:
     ):
         return MISSING
 
-    async def auth_WITH_UNDERSCORE(self, server, args):
+    async def auth_WITH_UNDERSCORE(self, server: Server, args):
+        """
+        Be careful when using this AUTH mechanism; log_client_response is set to
+        True, and this will raise some severe warnings.
+        """
+        await server.challenge_auth(
+            "challenge", encode_to_b64=False, log_client_response=True
+        )
         return "250 OK"
 
     @auth_mechanism("with-dash")
@@ -241,6 +269,7 @@ class TestProtocol(unittest.TestCase):
     def setUp(self):
         self.transport = Mock()
         self.transport.write = self._write
+        self.transport.get_extra_info.return_value = "MockedPeer"
         self.responses = []
         self._old_loop = asyncio.get_event_loop()
         self.loop = asyncio.new_event_loop()
@@ -941,6 +970,26 @@ class TestSMTP(unittest.TestCase):
             )
             assert_auth_success(self, code, response)
 
+    def test_authplain_goodcreds_sanitized_log(self):
+        oldlevel = mail_logger.getEffectiveLevel()
+        mail_logger.setLevel(logging.DEBUG)
+        with SMTP(*self.address) as client:
+            client.ehlo('example.com')
+            with self.assertLogs(mail_logger, level="DEBUG") as cm:
+                code, response = client.docmd(
+                    'AUTH PLAIN ' +
+                    b64encode(b'\0goodlogin\0goodpasswd').decode()
+                )
+        mail_logger.setLevel(oldlevel)
+        interestings = [
+            msg for msg in cm.output if "AUTH PLAIN" in msg
+        ]
+        assert len(interestings) == 2
+        assert interestings[0].startswith("DEBUG:")
+        assert interestings[0].endswith("b'AUTH PLAIN ********\\r\\n'")
+        assert interestings[1].startswith("INFO:")
+        assert interestings[1].endswith("b'AUTH PLAIN ********'")
+
     def test_auth_plain_null(self):
         with SMTP(*self.address) as client:
             client.ehlo('example.com')
@@ -1110,6 +1159,19 @@ class TestSMTPAuth(unittest.TestCase):
                 code, mesg = client.docmd("AAA=")
                 assert_auth_success(self, code, mesg)
 
+    def test_auth_loginteract_warning(self):
+        """AUTH state of different clients must be independent"""
+        with SMTP(*self.address) as client:
+            client.ehlo("example.com")
+            resp = client.docmd("AUTH WITH_UNDERSCORE")
+            assert resp == (334, b"challenge")
+            with warnings.catch_warnings(record=True) as w:
+                code, mesg = client.docmd('=')
+            assert_auth_success(self, code, mesg)
+            assert len(w) > 0
+            assert str(w[0].message) == "AUTH interaction logging is enabled!"
+            assert str(w[1].message) == "Sensitive information might be leaked!"
+
 
 class TestRequiredAuthentication(unittest.TestCase):
     def setUp(self):
