diff --git a/test/test_229.py b/test/test_229.py
new file mode 100644
index 0000000..cb8d36a
--- /dev/null
+++ b/test/test_229.py
@@ -0,0 +1,51 @@
+import pytest
+
+import python_jsonschema_objects as pjo
+
+
+def test_const_properties():
+    schema = {
+        "title": "Example",
+        "type": "object",
+        "properties": {
+            "url": {
+                "type": "string",
+                "default": "https://example.com/your-username/my-project",
+            },
+            "type": {"type": "string", "const": "git"},
+        },
+    }
+
+    ob = pjo.ObjectBuilder(schema)
+    ns1 = ob.build_classes()
+    ex = ns1.Example()
+    ex.url = "can be anything"
+
+    # we expect the value to be set already for const values
+    assert ex.type == "git"
+    with pytest.raises(pjo.ValidationError):
+        # Trying to set the value to something else should throw validation errors
+        ex.type = "mercurial"
+
+    # setting the value to the const value is a no-op, but permitted
+    ex.type = "git"
+
+
+def test_const_bare_type():
+    schema = {
+        "title": "Example",
+        "type": "string",
+        "const": "I stand alone",
+    }
+
+    ob = pjo.ObjectBuilder(schema)
+    ns1 = ob.build_classes()
+    ex = ns1.Example("I stand alone")
+    # we expect the value to be set already for const values
+    assert ex == "I stand alone"
+    with pytest.raises(pjo.ValidationError):
+        # Trying to set the value to something else should throw validation errors
+        ex = ns1.Example("mercurial")
+
+    # setting the value to the const value is a no-op, but permitted
+    ex = ns1.Example("I stand alone")
diff --git a/test/test_default_values.py b/test/test_default_values.py
index dc76ec5..3c0743f 100644
--- a/test/test_default_values.py
+++ b/test/test_default_values.py
@@ -53,15 +53,17 @@ def test_nullable_types_are_still_nullable(ns):
 
     thing1.p1 = None
     thing1.validate()
-    assert thing1.as_dict() == {"p1": 0, "p2": None}
+    assert thing1.as_dict() == {"p1": None, "p2": None}
 
 
 def test_null_types_without_defaults_do_not_serialize(ns):
     thing1 = ns.DefaultTest()
 
+    assert thing1.as_dict() == {"p1": 0, "p2": None}
+
     thing1.p3 = 10
     thing1.validate()
     thing1.p1 = None
     thing1.validate()
 
-    assert thing1.as_dict() == {"p1": 0, "p2": None, "p3": 10}
+    assert thing1.as_dict() == {"p1": None, "p2": None, "p3": 10}
