diff --git a/python_jsonschema_objects/classbuilder.py b/python_jsonschema_objects/classbuilder.py
index e9aaabe..783b064 100644
--- a/python_jsonschema_objects/classbuilder.py
+++ b/python_jsonschema_objects/classbuilder.py
@@ -4,6 +4,7 @@ import itertools
 import logging
 import sys
 
+import jsonschema.exceptions
 import referencing._core
 import six
 
@@ -184,11 +185,23 @@ class ProtocolBase(collections.abc.MutableMapping):
         # but only for the ones that have defaults set.
         for name in self.__has_default__:
             if name not in props:
-                default_value = copy.deepcopy(self.__propinfo__[name]["default"])
+                # "defaults" could come from either the 'default' keyword or the 'const' keyword
+                try:
+                    default_value = self.__propinfo__[name]["default"]
+                except KeyError:
+                    try:
+                        default_value = self.__propinfo__[name]["const"]
+                    except KeyError:
+                        raise jsonschema.exceptions.SchemaError(
+                            "Schema parsing error. Expected {0} to have default or const value".format(
+                                name
+                            )
+                        )
+
                 logger.debug(
                     util.lazy_format("Initializing '{0}' to '{1}'", name, default_value)
                 )
-                setattr(self, name, default_value)
+                setattr(self, name, copy.deepcopy(default_value))
 
         for prop in props:
             try:
@@ -626,7 +639,7 @@ class ClassBuilder(object):
                 "__propinfo__": {
                     "__literal__": clsdata,
                     "__title__": clsdata.get("title"),
-                    "__default__": clsdata.get("default"),
+                    "__default__": clsdata.get("default") or clsdata.get("const"),
                 }
             },
         )
@@ -670,6 +683,17 @@ class ClassBuilder(object):
                 )
                 defaults.add(prop)
 
+            if "const" in detail:
+                logger.debug(
+                    util.lazy_format(
+                        "Setting const for {0}.{1} to: {2}",
+                        nm,
+                        prop,
+                        detail["const"],
+                    )
+                )
+                defaults.add(prop)
+
             if detail.get("type", None) == "object":
                 uri = "{0}/{1}_{2}".format(nm, prop, "<anonymous>")
                 self.resolved[uri] = self.construct(uri, detail, (ProtocolBase,), **kw)
diff --git a/python_jsonschema_objects/literals.py b/python_jsonschema_objects/literals.py
index d56c946..37367e1 100644
--- a/python_jsonschema_objects/literals.py
+++ b/python_jsonschema_objects/literals.py
@@ -44,6 +44,10 @@ class LiteralValue(object):
 
         self.validate()
 
+        constval = self.const()
+        if constval is not None:
+            self._value = constval
+
     def as_dict(self):
         return self.for_json()
 
@@ -54,6 +58,10 @@ class LiteralValue(object):
     def default(cls):
         return cls.__propinfo__.get("__default__")
 
+    @classmethod
+    def const(cls):
+        return cls.__propinfo__.get("__literal__", {}).get("const", None)
+
     @classmethod
     def propinfo(cls, propname):
         if propname not in cls.__propinfo__:
diff --git a/python_jsonschema_objects/validators.py b/python_jsonschema_objects/validators.py
index 92a792d..b2921a2 100644
--- a/python_jsonschema_objects/validators.py
+++ b/python_jsonschema_objects/validators.py
@@ -58,6 +58,12 @@ def enum(param, value, _):
         raise ValidationError("{0} is not one of {1}".format(value, param))
 
 
+@registry.register()
+def const(param, value, _):
+    if value != param:
+        raise ValidationError("{0} is not constant {1}".format(value, param))
+
+
 @registry.register()
 def minimum(param, value, type_data):
     exclusive = type_data.get("exclusiveMinimum")

