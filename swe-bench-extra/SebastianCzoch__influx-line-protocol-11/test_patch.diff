diff --git a/influx_line_protocol/test_metric.py b/influx_line_protocol/test_metric.py
index 73ae904..d4d323a 100644
--- a/influx_line_protocol/test_metric.py
+++ b/influx_line_protocol/test_metric.py
@@ -15,12 +15,58 @@ class TestMetric(unittest.TestCase):
 
         self.assertEqual("test,tag1=string ", str(metric))
 
+    def test_metric_escape_measurement_spaces(self):
+        metric = Metric("test test")
+        metric.add_value("a", "b")
+
+        self.assertEqual("test\\ test a=\"b\"", str(metric))
+
+    def test_metric_escape_measurement_commas(self):
+        metric = Metric("test,test")
+        metric.add_value("a", "b")
+
+        self.assertEqual("test\\,test a=\"b\"", str(metric))
+
     def test_metric_with_tag_string_space_without_values_and_timestamp(self):
         metric = Metric("test")
         metric.add_tag("tag name", "string with space")
 
         self.assertEqual("test,tag\\ name=string\\ with\\ space ", str(metric))
 
+    def test_metric_escape_tag_and_field_commas(self):
+        metric = Metric("test")
+        metric.add_tag("a,b", "c,d")
+        metric.add_value("x,y", "z")
+
+        self.assertEqual("test,a\\,b=c\\,d x\\,y=\"z\"", str(metric))
+
+    def test_metric_escape_tag_and_field_equals(self):
+        metric = Metric("test")
+        metric.add_tag("a=b", "c=d")
+        metric.add_value("x=y", "z")
+
+        self.assertEqual("test,a\\=b=c\\=d x\\=y=\"z\"", str(metric))
+
+    def test_metric_escape_field_double_quotes(self):
+        metric = Metric("test")
+        metric.add_tag("a\"b", "c\"d")
+        metric.add_value("x\"y", "z\"")
+
+        self.assertEqual("test,a\"b=c\"d x\"y=\"z\\\"\"", str(metric))
+
+    def test_metric_escape_tag_and_field_backslash(self):
+        metric = Metric("test")
+        metric.add_tag("a\\b", "c\\d")
+        metric.add_value("x\\y", "z\\a")
+
+        self.assertEqual("test,a\\\\b=c\\\\d x\\\\y=\"z\\\\a\"", str(metric))
+
+    def test_metric_escape_field_double_quotes_and_backslash(self):
+        metric = Metric("test")
+        metric.add_value("x", "z\\\"")
+
+        self.assertEqual("test x=\"z\\\\\\\"\"", str(metric))
+
     def test_metric_with_tag_value_and_timestamp(self):
         metric = Metric("test")
         metric.add_tag("tag", "string")
