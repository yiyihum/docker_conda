diff --git a/tests/test_entity_state.py b/tests/test_entity_state.py
index 15b6a08..ce29e61 100644
--- a/tests/test_entity_state.py
+++ b/tests/test_entity_state.py
@@ -1,6 +1,7 @@
 import unittest
 
 from draftjs_exporter.command import Command
+from draftjs_exporter.dom import DOM
 from draftjs_exporter.entity_state import EntityException, EntityState
 from draftjs_exporter.options import Options
 from tests.test_entities import link
@@ -16,6 +17,12 @@ entity_map = {
         'data': {
             'url': 'http://example.com'
         }
+    },
+    '2': {
+        'type': 'LINK',
+        'data': {
+            'url': 'http://test.com'
+        }
     }
 }
 
@@ -62,3 +69,68 @@ class TestEntityState(unittest.TestCase):
     def test_get_entity_details_raises(self):
         with self.assertRaises(EntityException):
             self.entity_state.get_entity_details('1')
+
+    def test_render_entities_unstyled(self):
+        self.assertEqual(self.entity_state.render_entities('Test text', {}, []), 'Test text')
+
+    def test_render_entities_unicode(self):
+        self.assertEqual(self.entity_state.render_entities('🍺', {}, []), '🍺')
+
+    def test_render_entities_inline(self):
+        self.entity_state.apply(Command('start_entity', 0, '0'))
+        self.entity_state.render_entities('Test text', {}, [])
+        self.entity_state.apply(Command('stop_entity', 9, '0'))
+        self.assertEqual(DOM.render_debug(self.entity_state.render_entities('Test text', {}, [])), '<a href="http://example.com">Test text</a>')
+
+    def test_render_entities_inline_multiple(self):
+        self.entity_state.apply(Command('start_entity', 0, '0'))
+        self.entity_state.render_entities('Test 1', {}, [])
+        self.entity_state.apply(Command('stop_entity', 5, '0'))
+        self.entity_state.apply(Command('start_entity', 5, '2'))
+        self.assertEqual(DOM.render_debug(self.entity_state.render_entities('Test text', {}, [])), '<a href="http://example.com">Test 1</a>')
+        self.entity_state.render_entities('Test 2', {}, [])
+        self.entity_state.apply(Command('stop_entity', 10, '2'))
+        self.assertEqual(DOM.render_debug(self.entity_state.render_entities('Test text', {}, [])), '<a href="http://test.com"><fragment>Test textTest 2</fragment></a>')
+
+    def test_render_entities_data(self):
+        blocks = [
+            {
+                'key': '5s7g9',
+                'text': 'test',
+                'type': 'unstyled',
+                'depth': 0,
+                'inlineStyleRanges': [],
+                'entityRanges': [],
+            },
+        ]
+
+        def component(props):
+            self.assertEqual(props['entity']['blocks'], blocks)
+            self.assertEqual(props['entity']['block'], blocks[0])
+            self.assertEqual(props['entity']['type'], 'LINK')
+            self.assertEqual(props['entity']['mutability'], 'MUTABLE')
+            self.assertEqual(props['entity']['entity_range']['key'], '0')
+            return None
+
+        entity_state = EntityState(Options.map_entities({
+            'LINK': component,
+        }), entity_map)
+
+        entity_state.apply(Command('start_entity', 0, '0'))
+        entity_state.render_entities('Test text', blocks[0], blocks)
+        entity_state.apply(Command('stop_entity', 9, '0'))
+        entity_state.render_entities('Test text', blocks[0], blocks)
+
+    def test_render_entities_data_no_mutability(self):
+        def component(props):
+            self.assertEqual(props['entity']['mutability'], None)
+            return None
+
+        entity_state = EntityState(Options.map_entities({
+            'LINK': component,
+        }), entity_map)
+
+        entity_state.apply(Command('start_entity', 0, '2'))
+        entity_state.render_entities('Test text', {}, [])
+        entity_state.apply(Command('stop_entity', 9, '2'))
+        entity_state.render_entities('Test text', {}, [])
