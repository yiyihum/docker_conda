diff --git a/tests/barrel_splitter/test_somatosensory_barrels.py b/tests/barrel_splitter/test_somatosensory_barrels.py
index 4f5ee74..e8d2a93 100644
--- a/tests/barrel_splitter/test_somatosensory_barrels.py
+++ b/tests/barrel_splitter/test_somatosensory_barrels.py
@@ -46,10 +46,11 @@ def test_layer_ids():
     names = ["region1", "region2", "region3"]
     layers = ["layer1", "layer2"]
     result = tested.layer_ids(region_map, names, layers)
+
     expected = {
-        "region1": {"region1": 5293416420, "layer1": 1111509459, "layer2": 8291842637},
-        "region2": {"region2": 9197100151, "layer1": 1048759989, "layer2": 8562892645},
-        "region3": {"region3": 2807168083, "layer1": 2207162267, "layer2": 3619321798},
+        "region1": {"region1": 3631290122, "layer1": 2267454475, "layer2": 1012379119},
+        "region2": {"region2": 1722831506, "layer1": 3787876483, "layer2": 1416363748},
+        "region3": {"region3": 1193141608, "layer1": 3031486657, "layer2": 3890489924},
     }
     assert result == expected
 
diff --git a/tests/layer_splitter/test_isocortex_layer_23.py b/tests/layer_splitter/test_isocortex_layer_23.py
index fd89f49..f4a1c04 100644
--- a/tests/layer_splitter/test_isocortex_layer_23.py
+++ b/tests/layer_splitter/test_isocortex_layer_23.py
@@ -91,7 +91,7 @@ def test_edit_hierarchy():
             "parent_structure_id": 219,
         },
         {
-            "id": 2438771567,
+            "id": 2906756445,
             "acronym": "MO3",
             "name": "Somatomotor areas, Layer 3",
             "children": [],
@@ -109,7 +109,6 @@ def test_edit_hierarchy():
         ids_to_reuse,
         region_map,
     )
-
     assert isocortex_hierarchy == expected_hierarchy
 
 
diff --git a/tests/test_app_barrel_splitter.py b/tests/test_app_barrel_splitter.py
index eccb9b1..ec913c7 100644
--- a/tests/test_app_barrel_splitter.py
+++ b/tests/test_app_barrel_splitter.py
@@ -19,24 +19,24 @@ output_bfd = {
     1070,
     1998,
     1999,
-    6808354304,
-    4625922081,
-    9632197987,
-    6740949287,
-    4025629096,
-    1028864429,
-    1132763284,
-    1135236927,
-    1569938381,
-    4159694229,
-    5965588094,
-    7178447226,
-    7758245998,
-    7766041724,
-    7882359060,
-    8701962317,
-    8773083888,
-    9288923888,
+    1050271831,
+    1419828837,
+    1541598958,
+    1561898146,
+    1669999094,
+    1742227897,
+    1779524838,
+    1914058509,
+    1941812702,
+    2061835172,
+    2112620658,
+    2190770412,
+    2321675771,
+    2491030215,
+    3335143301,
+    3364575989,
+    3625413550,
+    3951617891,
 }
 
 
@@ -74,4 +74,4 @@ def test_split_barrels():
 
         barrel_cortex_ids = output_region_map.find("SSp-bfd", attr="acronym", with_descendants=True)
 
-        assert barrel_cortex_ids == set(output_bfd)
+        assert barrel_cortex_ids == output_bfd
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 8921641..b385e65 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -2,6 +2,7 @@
 import json
 from pathlib import Path
 
+import numpy as np
 import numpy.testing as npt
 import pytest
 from voxcell import RegionMap
@@ -59,14 +60,25 @@ def test_id_from_acronym(region_map):
 
     # existing region -> existing id
     res1 = tested.id_from_acronym(region_map, "VISp1")
+    _assert_within_integer_type_range(res1, np.uint32)
     assert region_map.get(res1, attr="acronym") == "VISp1"
 
-    # new regeion -> non-existing id
-    res2 = tested.id_from_acronym(region_map, "MontyPython")
+    # new region -> non-existing id
+    res2 = tested.id_from_acronym(region_map, "VISPXXX")
+    _assert_within_integer_type_range(res2, np.uint32)
     with pytest.raises(VoxcellError, match="Region ID not found"):
         region_map.get(res2, attr="acronym")
 
 
+def _assert_within_integer_type_range(value, int_dtype):
+    info = np.iinfo(int_dtype)
+    check = info.min <= value < info.max
+    assert check, (
+        f"Value not within dtype '{int_dtype.__name__}' range: "
+        f"{info.min} <= {value} < {info.max}"
+    )
+
+
 def test_create_id_generator(region_map):
     id_generator = tested.create_id_generator(region_map)
 
