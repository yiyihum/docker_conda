diff --git a/daftlistings/daft.py b/daftlistings/daft.py
index c46baeb..e2ff99a 100644
--- a/daftlistings/daft.py
+++ b/daftlistings/daft.py
@@ -58,6 +58,16 @@ class Daft:
         self._filters.append({"name": name,
                               "values": [value]})
 
+    def _add_and_filter(self, name: str, value: str):
+        if self._andFilters:
+            for f in self._andFilters:
+                if f["name"] == name:
+                    if value not in f["values"]:
+                        f["values"].append(value)
+                    return
+        self._andFilters.append({"name": name,
+                              "values": [value]})
+
     def _add_sort_filter(self, sort_filter: str):
         self._sort_filter = sort_filter
 
@@ -153,6 +163,21 @@ class Daft:
         else:
             raise TypeError("Argument must be location.Location or string.")
 
+    def set_facility(self, facility: Facility):
+        if self._section == None:
+            raise ValueError('SearchType must be set before Facility')
+        else:
+            if isinstance(facility, Facility):
+                if self._section in [s.value for s in facility.valid_types]:
+                    self._add_and_filter('facilities', facility.value)
+                else:
+                    search_type = [(name,member) for name, member in SearchType.__members__.items() if member.value == self._section][0]
+                    compatible_facilities = [f.name for f in Facility if search_type[1] in f.valid_types]
+                    raise ValueError(f"Facility {facility.name} incompatible with SearchType {search_type[0]}\nThe following facilities are compatible with this SearchType:\n{compatible_facilities}")
+            else:
+                raise TypeError("Argument must be of type Facility")
+           
+
     def set_sort_type(self, sort_type: SortType):
         if isinstance(sort_type, SortType):
             self._add_sort_filter(sort_type.value)
@@ -178,6 +203,8 @@ class Daft:
             payload["section"] = self._section
         if self._filters:
             payload["filters"] = self._filters
+        if self._andFilters:
+            payload["andFilters"] = self._andFilters
         if self._ranges:
             payload["ranges"] = self._ranges
         if self._geoFilter:
diff --git a/daftlistings/enums.py b/daftlistings/enums.py
index b166c1a..04f2bd4 100644
--- a/daftlistings/enums.py
+++ b/daftlistings/enums.py
@@ -62,6 +62,42 @@ class MiscFilter(enum.Enum):
     TOILETS = "toilets"
 
 
+class Facility(enum.Enum):
+    def __new__(cls, *args, **kwargs):
+        obj = object.__new__(cls)
+        obj._value_ = args[0]
+        return obj
+
+    def __init__(self, _, valid_types):
+        self.valid_types = valid_types
+
+    ALARM = ("alarm", [SearchType.RESIDENTIAL_SALE, SearchType.RESIDENTIAL_RENT, SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    CENTRAL_HEATING_GAS = ("gas-fired-central-heating", [SearchType.RESIDENTIAL_SALE])
+    CENTRAL_HEATING_OIL = ("oil-fired-central-heating", [SearchType.RESIDENTIAL_SALE])
+    PARKING = ("parking", [SearchType.RESIDENTIAL_SALE, SearchType.RESIDENTIAL_RENT, SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    WHEELCHAIR_ACCESS = ("wheelchair-access", [SearchType.RESIDENTIAL_SALE, SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    WIRED_FOR_CABLE_TELEVISION = ("wired-for-cable-television", [SearchType.RESIDENTIAL_SALE])
+    CABLE_TELEVISION = ("cable-television", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])    
+    DISHWASHER = ("dishwasher", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    GARDEN_PATIO_BALCONY = ("garden-patio-balcony", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    CENTRAL_HEATING = ("central-heating", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    INTERNET = ("internet", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    MICROWAVE = ("microwave", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    PETS_ALLOWED = ("pets-allowed", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    SMOKING = ("smoking", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    SERVICED_PROPERTY = ("serviced-property", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    DRYER = ("dryer", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    WASHING_MACHINE = ("washing-machine", [SearchType.RESIDENTIAL_RENT, SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    ENSUITE = ("ensuite", [SearchType.SHARING, SearchType.STUDENT_ACCOMMODATION])
+    CAT_5_CABLING = ("cat-5-cabling", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+    CAT_6_CABLING = ("cat-6-data-cabling", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+    KITCHEN_AREA = ("kitchen-area", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+    MEETING_ROOMS = ("meeting-rooms", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+    RECEPTION = ("reception", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+    PHONE_LINES = ("phone-lines", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+    TOILETS = ("toilets", [SearchType.COMMERCIAL_SALE, SearchType.COMMERCIAL_RENT])
+
+
 class AddedSince(enum.Enum):
     DAYS_3 = "now-3d/d"
     DAYS_7 = "now-7d/d"
