diff --git a/neurom/features/morphology.py b/neurom/features/morphology.py
index 69098cb..4b2c4de 100644
--- a/neurom/features/morphology.py
+++ b/neurom/features/morphology.py
@@ -63,6 +63,13 @@ from neurom.morphmath import convex_hull
 feature = partial(feature, namespace=NameSpace.NEURON)
 
 
+def _assert_soma_center(morph):
+    if morph.soma.center is None:
+        raise NeuroMError(
+            f"The morphology named '{morph.name}' has no soma so the feature can not be computed."
+        )
+
+
 def _map_neurites(function, morph, neurite_type):
     return list(
         iter_neurites(morph, mapfun=function, filt=is_type(neurite_type))
@@ -132,6 +139,8 @@ def trunk_origin_azimuths(morph, neurite_type=NeuriteType.all):
 
     The range of the azimuth angle [-pi, pi] radians
     """
+    _assert_soma_center(morph)
+
     def azimuth(neurite):
         """Azimuth of a neurite trunk."""
         return morphmath.azimuth_from_vector(
@@ -151,6 +160,8 @@ def trunk_origin_elevations(morph, neurite_type=NeuriteType.all):
 
     The range of the elevation angle [-pi/2, pi/2] radians
     """
+    _assert_soma_center(morph)
+
     def elevation(neurite):
         """Elevation of a section."""
         return morphmath.elevation_from_vector(
@@ -163,6 +174,8 @@ def trunk_origin_elevations(morph, neurite_type=NeuriteType.all):
 @feature(shape=(...,))
 def trunk_vectors(morph, neurite_type=NeuriteType.all):
     """Calculate the vectors between all the trunks of the morphology and the soma center."""
+    _assert_soma_center(morph)
+
     def vector_to_root_node(neurite):
         return morphmath.vector(neurite.root_node.points[0], morph.soma.center)
 
@@ -496,6 +509,7 @@ def sholl_crossings(morph, neurite_type=NeuriteType.all, center=None, radii=None
             '`sholl_crossings` input error. If `center` or `radii` is not set then `morph` is ' \
             'expected to be an instance of Morphology and have a soma.'
         if center is None:
+            _assert_soma_center(morph)
             center = morph.soma.center
         if radii is None:
             radii = [morph.soma.radius]
@@ -525,6 +539,7 @@ def sholl_frequency(morph, neurite_type=NeuriteType.all, step_size=10, bins=None
         If a `neurite_type` is specified and there are no trees corresponding to it, an empty
         list will be returned.
     """
+    _assert_soma_center(morph)
     neurite_filter = is_type(neurite_type)
 
     if bins is None:
@@ -701,6 +716,7 @@ def length_fraction_above_soma(morph, neurite_type=NeuriteType.all, up="Y"):
     Returns:
         The fraction of neurite length that lies on the right of the soma along the given axis.
     """
+    _assert_soma_center(morph)
     axis = up.upper()
 
     if axis not in {"X", "Y", "Z"}:
diff --git a/neurom/features/population.py b/neurom/features/population.py
index 98cbd4d..dfd0a7e 100644
--- a/neurom/features/population.py
+++ b/neurom/features/population.py
@@ -47,6 +47,7 @@ from neurom.core.dataformat import COLS
 from neurom.core.types import NeuriteType
 from neurom.core.types import tree_type_checker as is_type
 from neurom.features import feature, NameSpace
+from neurom.features.morphology import _assert_soma_center
 from neurom.features.morphology import sholl_crossings
 
 feature = partial(feature, namespace=NameSpace.POPULATION)
@@ -78,7 +79,8 @@ def sholl_frequency(morphs, neurite_type=NeuriteType.all, step_size=10, bins=Non
                         for n in m.neurites if neurite_filter(n))
         bins = np.arange(min_soma_edge, min_soma_edge + max_radii, step_size)
 
-    return np.array([
-        sholl_crossings(m, neurite_type, m.soma.center, bins)
-        for m in morphs
-    ]).sum(axis=0)
+    def _sholl_crossings(morph):
+        _assert_soma_center(morph)
+        return sholl_crossings(morph, neurite_type, morph.soma.center, bins)
+
+    return np.array([_sholl_crossings(m) for m in morphs]).sum(axis=0)

