diff --git a/tests/test_client.py b/tests/test_client.py
index 8e73444..ee10d48 100644
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -50,6 +50,22 @@ class TestServiceClient(unittest.TestCase):
         self.creds = mock.create_autospec(OAuthTokenAuthentication)
         return super(TestServiceClient, self).setUp()
 
+    def test_session_callback(self):
+
+        client = ServiceClient(self.creds, self.cfg)
+        local_session = requests.Session()
+
+        def callback(session, global_config, local_config, **kwargs):
+            self.assertIs(session, local_session)
+            self.assertIs(global_config, self.cfg)
+            self.assertTrue(local_config["test"])
+            return {'used_callback': True}
+
+        self.cfg.session_configuration_callback = callback
+
+        output_kwargs = client._configure_session(local_session, **{"test": True})
+        self.assertTrue(output_kwargs['used_callback'])
+
     def test_client_request(self):
 
         client = ServiceClient(self.creds, self.cfg)
diff --git a/tests/test_serialization.py b/tests/test_serialization.py
index c6cf07d..4d6a80a 100644
--- a/tests/test_serialization.py
+++ b/tests/test_serialization.py
@@ -172,6 +172,32 @@ class TestRuntimeSerialized(unittest.TestCase):
         self.s = Serializer({'TestObj': self.TestObj})
         return super(TestRuntimeSerialized, self).setUp()
 
+    def test_validation_flag(self):
+        s = Serializer()
+        s.client_side_validation = True
+
+        with self.assertRaises(ValidationError):
+            s.query("filter", "", "str", min_length=666)
+        with self.assertRaises(ValidationError):
+            s.url("filter", "", "str", min_length=666)
+        with self.assertRaises(ValidationError):
+            s.header("filter", "", "str", min_length=666)
+
+        test_obj = self.TestObj()
+        self.TestObj._validation = {
+            'attr_b': {'required': True},
+        }
+        test_obj.attr_b = None
+
+        with self.assertRaises(ValidationError):
+            self.s.body(test_obj, 'TestObj')
+
+        s.client_side_validation = False
+        s.query("filter", "", "str", min_length=666)
+        s.url("filter", "", "str", min_length=666)
+        s.header("filter", "", "str", min_length=666)
+        s.body(test_obj, 'TestObj')
+
     def test_serialize_direct_model(self):
         testobj = self.TestObj()
         testobj.attr_a = "myid"
