diff --git a/git/cmd.py b/git/cmd.py
index 3d170fac..3665eb02 100644
--- a/git/cmd.py
+++ b/git/cmd.py
@@ -5,7 +5,7 @@
 # the BSD License: http://www.opensource.org/licenses/bsd-license.php
 from __future__ import annotations
 import re
-from contextlib import contextmanager
+import contextlib
 import io
 import logging
 import os
@@ -14,6 +14,7 @@ from subprocess import call, Popen, PIPE, DEVNULL
 import subprocess
 import threading
 from textwrap import dedent
+import unittest.mock
 
 from git.compat import (
     defenc,
@@ -963,8 +964,11 @@ class Git(LazyMixin):
                     redacted_command,
                     '"kill_after_timeout" feature is not supported on Windows.',
                 )
+            # Only search PATH, not CWD. This must be in the *caller* environment. The "1" can be any value.
+            patch_caller_env = unittest.mock.patch.dict(os.environ, {"NoDefaultCurrentDirectoryInExePath": "1"})
         else:
             cmd_not_found_exception = FileNotFoundError  # NOQA # exists, flake8 unknown @UndefinedVariable
+            patch_caller_env = contextlib.nullcontext()
         # end handle
 
         stdout_sink = PIPE if with_stdout else getattr(subprocess, "DEVNULL", None) or open(os.devnull, "wb")
@@ -980,21 +984,21 @@ class Git(LazyMixin):
             istream_ok,
         )
         try:
-            proc = Popen(
-                command,
-                env=env,
-                cwd=cwd,
-                bufsize=-1,
-                stdin=istream or DEVNULL,
-                stderr=PIPE,
-                stdout=stdout_sink,
-                shell=shell is not None and shell or self.USE_SHELL,
-                close_fds=is_posix,  # unsupported on windows
-                universal_newlines=universal_newlines,
-                creationflags=PROC_CREATIONFLAGS,
-                **subprocess_kwargs,
-            )
-
+            with patch_caller_env:
+                proc = Popen(
+                    command,
+                    env=env,
+                    cwd=cwd,
+                    bufsize=-1,
+                    stdin=istream or DEVNULL,
+                    stderr=PIPE,
+                    stdout=stdout_sink,
+                    shell=shell is not None and shell or self.USE_SHELL,
+                    close_fds=is_posix,  # unsupported on windows
+                    universal_newlines=universal_newlines,
+                    creationflags=PROC_CREATIONFLAGS,
+                    **subprocess_kwargs,
+                )
         except cmd_not_found_exception as err:
             raise GitCommandNotFound(redacted_command, err) from err
         else:
@@ -1144,7 +1148,7 @@ class Git(LazyMixin):
                 del self._environment[key]
         return old_env
 
-    @contextmanager
+    @contextlib.contextmanager
     def custom_environment(self, **kwargs: Any) -> Iterator[None]:
         """
         A context manager around the above ``update_environment`` method to restore the
diff --git a/git/repo/base.py b/git/repo/base.py
index ab202654..113fca45 100644
--- a/git/repo/base.py
+++ b/git/repo/base.py
@@ -60,6 +60,7 @@ from git.types import (
     PathLike,
     Lit_config_levels,
     Commit_ish,
+    CallableProgress,
     Tree_ish,
     assert_never,
 )
@@ -1258,7 +1259,7 @@ class Repo(object):
     def clone(
         self,
         path: PathLike,
-        progress: Optional[Callable] = None,
+        progress: Optional[CallableProgress] = None,
         multi_options: Optional[List[str]] = None,
         allow_unsafe_protocols: bool = False,
         allow_unsafe_options: bool = False,
@@ -1297,7 +1298,7 @@ class Repo(object):
         cls,
         url: PathLike,
         to_path: PathLike,
-        progress: Optional[Callable] = None,
+        progress: CallableProgress = None,
         env: Optional[Mapping[str, str]] = None,
         multi_options: Optional[List[str]] = None,
         allow_unsafe_protocols: bool = False,
diff --git a/git/types.py b/git/types.py
index 9064ecbf..9f862172 100644
--- a/git/types.py
+++ b/git/types.py
@@ -8,42 +8,39 @@ import sys
 from typing import (
     Dict,
     NoReturn,
-    Sequence,
+    Sequence as Sequence,
     Tuple,
     Union,
     Any,
+    Optional,
+    Callable,
     TYPE_CHECKING,
     TypeVar,
 )  # noqa: F401
 
-if sys.version_info[:2] >= (3, 8):
+if sys.version_info >= (3, 8):
     from typing import (
         Literal,
-        SupportsIndex,
         TypedDict,
         Protocol,
+        SupportsIndex as SupportsIndex,
         runtime_checkable,
     )  # noqa: F401
 else:
     from typing_extensions import (
         Literal,
-        SupportsIndex,  # noqa: F401
+        SupportsIndex as SupportsIndex,
         TypedDict,
         Protocol,
         runtime_checkable,
     )  # noqa: F401
 
-# if sys.version_info[:2] >= (3, 10):
+# if sys.version_info >= (3, 10):
 #     from typing import TypeGuard  # noqa: F401
 # else:
 #     from typing_extensions import TypeGuard  # noqa: F401
 
-
-if sys.version_info[:2] < (3, 9):
-    PathLike = Union[str, os.PathLike]
-else:
-    # os.PathLike only becomes subscriptable from Python 3.9 onwards
-    PathLike = Union[str, os.PathLike[str]]
+PathLike = Union[str, "os.PathLike[str]"]
 
 if TYPE_CHECKING:
     from git.repo import Repo
@@ -62,6 +59,9 @@ Lit_commit_ish = Literal["commit", "tag", "blob", "tree"]
 
 Lit_config_levels = Literal["system", "global", "user", "repository"]
 
+# Progress parameter type alias -----------------------------------------
+
+CallableProgress = Optional[Callable[[int, Union[str, float], Union[str, float, None], str], None]]
 
 # def is_config_level(inp: str) -> TypeGuard[Lit_config_levels]:
 #     # return inp in get_args(Lit_config_level)  # only py >= 3.8
diff --git a/git/util.py b/git/util.py
index 0ef8bdeb..a3748f0f 100644
--- a/git/util.py
+++ b/git/util.py
@@ -935,11 +935,7 @@ class LockFile(object):
             )
 
         try:
-            flags = os.O_WRONLY | os.O_CREAT | os.O_EXCL
-            if is_win:
-                flags |= os.O_SHORT_LIVED
-            fd = os.open(lock_file, flags, 0)
-            os.close(fd)
+            open(lock_file, mode='w', closefd=True)
         except OSError as e:
             raise IOError(str(e)) from e
 
diff --git a/requirements-dev.txt b/requirements-dev.txt
index bacde349..946b4c94 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -10,4 +10,4 @@ pytest-icdiff
 # pytest-profiling
 
 
-tox
\ No newline at end of file
+tox
