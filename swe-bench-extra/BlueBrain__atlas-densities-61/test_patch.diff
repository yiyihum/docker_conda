diff --git a/tests/app/test_cell_densities.py b/tests/app/test_cell_densities.py
index ddc894d..df2d5dc 100644
--- a/tests/app/test_cell_densities.py
+++ b/tests/app/test_cell_densities.py
@@ -271,6 +271,8 @@ def _get_measurements_to_average_densities_result(runner, hierarchy_path, measur
         hierarchy_path,
         "--annotation-path",
         "annotation.nrrd",
+        "--region-name",
+        "Basic cell groups and regions",
         "--cell-density-path",
         "cell_density.nrrd",
         "--neuron-density-path",
diff --git a/tests/densities/test_measurement_to_density.py b/tests/densities/test_measurement_to_density.py
index 2c6bdb8..440d918 100644
--- a/tests/densities/test_measurement_to_density.py
+++ b/tests/densities/test_measurement_to_density.py
@@ -20,6 +20,11 @@ def region_map():
     return RegionMap.from_dict(get_hierarchy())
 
 
+@pytest.fixture
+def annotations():
+    return np.array([[[0, 10710, 10710, 10711, 10711, 0]]], dtype=int)
+
+
 @pytest.fixture
 def cell_densities():
     densities = np.array([5.0 / 9.0, 4.0 / 8.0, 1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0])
@@ -55,6 +60,37 @@ def volumes(voxel_volume=2):
     )
 
 
+def test_remove_unknown_regions(region_map, annotations):
+    measurements = pd.DataFrame(
+        {
+            "brain_region": [
+                "Lobule Ii",
+                "Lobule II, granular layer",
+                "Lobule II, molecular layer",
+            ],
+            "measurement": [0.722, 28118.0, 31047],
+            "standard_deviation": [0.722, 6753.9, 5312],
+            "measurement_type": ["volume", "cell count", "cell count"],
+            "measurement_unit": ["mm^3", "number of cells", "number of cells"],
+            "source_title": ["Article 1", "Article 2", "Article 1"],
+        }
+    )
+    tested.remove_unknown_regions(measurements, region_map, annotations, get_hierarchy_info())
+    expected = pd.DataFrame(
+        {
+            "brain_region": [
+                "Lobule II, molecular layer",
+            ],
+            "measurement": [31047.0],
+            "standard_deviation": [5312.0],
+            "measurement_type": ["cell count"],
+            "measurement_unit": ["number of cells"],
+            "source_title": ["Article 1"],
+        }
+    )
+    pdt.assert_frame_equal(measurements.reset_index(drop=True), expected)
+
+
 def test_cell_count_to_density(region_map, volumes):
     measurements = pd.DataFrame(
         {
