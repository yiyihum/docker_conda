diff --git a/tests/test_immutabledict.py b/tests/test_immutabledict.py
index 41dfab2..84c97ff 100644
--- a/tests/test_immutabledict.py
+++ b/tests/test_immutabledict.py
@@ -2,7 +2,11 @@ import pickle
 from collections.abc import Mapping
 from unittest import TestCase
 
-from immutablecollections import immutabledict, ImmutableDict
+from immutablecollections import (
+    immutabledict,
+    ImmutableDict,
+    immutabledict_from_unique_keys,
+)
 
 
 class TestImmutableDict(TestCase):
@@ -138,3 +142,20 @@ class TestImmutableDict(TestCase):
             immutabledict([(5, "apple"), (2, "banana")]).__reduce__(),
             (immutabledict, (((5, "apple"), (2, "banana")),)),
         )
+
+    def test_immutabledict_duplication_blocking(self):
+        bad = [(7, 8), (9, 10), (7, 11)]
+        with self.assertRaises(ValueError):
+            immutabledict(bad, forbid_duplicate_keys=True)
+        with self.assertRaises(ValueError):
+            immutabledict_from_unique_keys(bad)
+        with self.assertRaises(ValueError):
+            immutabledict((x for x in bad), forbid_duplicate_keys=True)
+        with self.assertRaises(ValueError):
+            immutabledict_from_unique_keys(x for x in bad)
+
+        good = [(7, 8), (9, 10), (12, 11)]
+        immutabledict(good, forbid_duplicate_keys=True)
+        immutabledict_from_unique_keys(good)
+        immutabledict((x for x in good), forbid_duplicate_keys=True)
+        immutabledict_from_unique_keys(x for x in good)
diff --git a/tests/test_immutableset.py b/tests/test_immutableset.py
index ead7932..591a8e9 100644
--- a/tests/test_immutableset.py
+++ b/tests/test_immutableset.py
@@ -286,11 +286,18 @@ class TestImmutableSet(TestCase):
         self.assertEqual({"a"}, frozenset(["a", "b"]) - immutableset(["b", "c"]))
 
     def test_forbid_duplicate_elements(self):
+        bad = [4, 6, 7, 9, 7]
         with self.assertRaises(ValueError):
-            immutableset([4, 6, 7, 9, 7], forbid_duplicate_elements=True)
-        immutableset([3, 7, 5, 9], forbid_duplicate_elements=True)
-
-    def test_immutableset_from_unique_elements(self):
+            immutableset(bad, forbid_duplicate_elements=True)
+        with self.assertRaises(ValueError):
+            immutableset_from_unique_elements(bad)
         with self.assertRaises(ValueError):
-            immutableset_from_unique_elements([4, 6, 7, 9, 7])
-        immutableset_from_unique_elements([3, 7, 5, 9])
+            immutableset((x for x in bad), forbid_duplicate_elements=True)
+        with self.assertRaises(ValueError):
+            immutableset_from_unique_elements(x for x in bad)
+
+        good = [3, 7, 5, 9]
+        immutableset(good, forbid_duplicate_elements=True)
+        immutableset_from_unique_elements(good)
+        immutableset((x for x in good), forbid_duplicate_elements=True)
+        immutableset_from_unique_elements(x for x in good)
