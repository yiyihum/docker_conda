diff --git a/tests/base.py b/tests/base.py
index 98cdc61..ad2c04f 100644
--- a/tests/base.py
+++ b/tests/base.py
@@ -1,4 +1,4 @@
-from unittest.case import TestCase
+from unittest import TestCase
 from unittest.mock import patch, ANY as MOCK_ANY
 
 import boto3
diff --git a/tests/test_ses_domain_identity.py b/tests/test_ses_domain_identity.py
index 9664a39..7396429 100644
--- a/tests/test_ses_domain_identity.py
+++ b/tests/test_ses_domain_identity.py
@@ -98,8 +98,8 @@ class TestDomainIdentityHandler(HandlerTestCase):
             "RequestType": "Create",
             "ResourceProperties": {
                 "Domain": "example.com.",
-                "EnableSend": True,
-                "EnableReceive": True,
+                "EnableSend": "true",
+                "EnableReceive": "true",
                 "MailFromSubdomain": "bounce",
                 "CustomDMARC": '"v=DMARC1; p=quarantine; rua=mailto:d@example.com;"',
                 "TTL": "300",
@@ -166,8 +166,8 @@ class TestDomainIdentityHandler(HandlerTestCase):
             "RequestType": "Update",
             "ResourceProperties": {
                 "Domain": "example.com.",
-                "EnableSend": False,
-                "EnableReceive": True,
+                "EnableSend": "false",
+                "EnableReceive": "true",
                 "CustomDMARC": None,
             },
             "StackId": self.mock_stack_id}
@@ -208,8 +208,8 @@ class TestDomainIdentityHandler(HandlerTestCase):
             "PhysicalResourceId": "arn:aws:ses:mock-region:111111111111:identity/example.com",
             "ResourceProperties": {
                 "Domain": "example.com.",
-                "EnableSend": True,
-                "EnableReceive": True,
+                "EnableSend": "true",
+                "EnableReceive": "true",
             },
             "StackId": self.mock_stack_id}
         self.ses_stubber.add_response(
@@ -244,8 +244,8 @@ class TestDomainIdentityHandler(HandlerTestCase):
             "PhysicalResourceId": "example.com",  # old format: just the domain
             "ResourceProperties": {
                 "Domain": "example.com.",
-                "EnableSend": True,
-                "EnableReceive": True,
+                "EnableSend": "true",
+                "EnableReceive": "true",
             },
             "StackId": self.mock_stack_id}
         # self.ses_stubber.nothing: *no* SES ops should occur
@@ -280,3 +280,17 @@ class TestDomainIdentityHandler(HandlerTestCase):
             'ERROR:root:Error updating SES: An error occurred (InvalidParameterValue) when'
             ' calling the VerifyDomainIdentity operation: Invalid domain name bad domain name.',
             cm.output[0])
+
+    def test_invalid_boolean_property(self):
+        event = {
+            "RequestType": "Create",
+            "ResourceProperties": {
+                "Domain": "example.com",
+                "EnableSend": "yes",
+            },
+            "StackId": self.mock_stack_id}
+        handle_domain_identity_request(event, self.mock_context)
+        self.assertSentResponse(
+            event, status="FAILED",
+            reason="The 'EnableSend' property must be 'true' or 'false', not 'yes'.",
+            physical_resource_id=MOCK_ANY)
diff --git a/tests/test_utils.py b/tests/test_utils.py
new file mode 100644
index 0000000..2b49ed2
--- /dev/null
+++ b/tests/test_utils.py
@@ -0,0 +1,41 @@
+from unittest import TestCase
+
+from aws_cfn_ses_domain.utils import to_bool
+
+
+class TestToBool(TestCase):
+    TRUE_VALUES = (
+        'true', 'True', 'TRUE', 'tRuE',
+        1, '1',
+        True,
+    )
+
+    FALSE_VALUES = (
+        'false', 'False', 'FALSE', 'fAlSe',
+        0, '0',
+        None, 'None',
+        'null',  # JSON's None as a string
+        '',  # empty string
+        False,
+    )
+
+    INVALID_VALUES = (
+        'yes', 'no', 't', 'f', ' ',
+        100, -1, 0.5,
+    )
+
+    def test_true(self):
+        for value in self.TRUE_VALUES:
+            with self.subTest(value=value):
+                self.assertIs(to_bool(value), True)
+
+    def test_false(self):
+        for value in self.FALSE_VALUES:
+            with self.subTest(value=value):
+                self.assertIs(to_bool(value), False)
+
+    def test_invalid(self):
+        for value in self.INVALID_VALUES:
+            with self.subTest(value=value):
+                with self.assertRaises(ValueError):
+                    to_bool(value)
