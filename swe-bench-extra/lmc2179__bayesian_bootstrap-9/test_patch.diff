diff --git a/bayesian_bootstrap/tests/test_bootstrap.py b/bayesian_bootstrap/tests/test_bootstrap.py
index e817c81..91bf78d 100644
--- a/bayesian_bootstrap/tests/test_bootstrap.py
+++ b/bayesian_bootstrap/tests/test_bootstrap.py
@@ -36,7 +36,7 @@ class TestMoments(unittest.TestCase):
         posterior_samples = bayesian_bootstrap(X, np.mean, 10000, 100,low_mem=False)
         self.assertAlmostEqual(np.mean(posterior_samples), 0, delta=0.01)
         self.assertAlmostEqual(len([s for s in posterior_samples if s < 0]), 5000, delta=1000)
-        
+
     def test_var_resample(self):
         X = np.random.uniform(-1, 1, 500)
         posterior_samples = bayesian_bootstrap(X, np.var, 10000, 5000, low_mem=True)
@@ -72,7 +72,7 @@ class TestIntervals(unittest.TestCase):
         return x
 
 class TestRegression(unittest.TestCase):
-    def test_parameter_estimation_low_memory(self):
+    def test_parameter_estimation_resampling_low_memory(self):
         X = np.random.uniform(0, 4, 1000)
         y = X + np.random.normal(0, 1, 1000)
         m = BayesianBootstrapBagging(LinearRegression(), 10000, 1000, low_mem=True)
@@ -96,7 +96,7 @@ class TestRegression(unittest.TestCase):
         self.assertGreater(r, 0)
 
 
-    def test_parameter_estimation(self):
+    def test_parameter_estimation_resampling(self):
         X = np.random.uniform(0, 4, 1000)
         y = X + np.random.normal(0, 1, 1000)
         m = BayesianBootstrapBagging(LinearRegression(), 10000, 1000, low_mem=False)
@@ -117,7 +117,54 @@ class TestRegression(unittest.TestCase):
         self.assertAlmostEqual(np.mean(intercept_samples), 0, delta=0.3)
         l, r = highest_density_interval(intercept_samples, alpha=0.05)
         self.assertLess(l, 0)
-        self.assertGreater(r, 0)       
+        self.assertGreater(r, 0)
+
+    def test_parameter_estimation_bayes(self):
+        X = np.random.uniform(0, 4, 1000)
+        y = X + np.random.normal(0, 1, 1000)
+        m = BayesianBootstrapBagging(LinearRegression(), 10000, low_mem=False)
+        m.fit(X.reshape(-1, 1), y)
+        coef_samples = [b.coef_ for b in m.base_models_]
+        intercept_samples = [b.intercept_ for b in m.base_models_]
+        self.assertAlmostEqual(np.mean(coef_samples), 1, delta=0.3)
+        l, r = central_credible_interval(coef_samples, alpha=0.05)
+        self.assertLess(l, 1)
+        self.assertGreater(r, 1)
+        l, r = highest_density_interval(coef_samples, alpha=0.05)
+        self.assertLess(l, 1)
+        self.assertGreater(r, 1)
+        self.assertAlmostEqual(np.mean(intercept_samples), 0, delta=0.3)
+        l, r = central_credible_interval(intercept_samples, alpha=0.05)
+        self.assertLess(l, 0)
+        self.assertGreater(r, 0)
+        self.assertAlmostEqual(np.mean(intercept_samples), 0, delta=0.3)
+        l, r = highest_density_interval(intercept_samples, alpha=0.05)
+        self.assertLess(l, 0)
+        self.assertGreater(r, 0)
+
+    def test_parameter_estimation_bayes_low_memory(self):
+        X = np.random.uniform(0, 4, 1000)
+        y = X + np.random.normal(0, 1, 1000)
+        m = BayesianBootstrapBagging(LinearRegression(), 10000, low_mem=True)
+        m.fit(X.reshape(-1, 1), y)
+        coef_samples = [b.coef_ for b in m.base_models_]
+        intercept_samples = [b.intercept_ for b in m.base_models_]
+        self.assertAlmostEqual(np.mean(coef_samples), 1, delta=0.3)
+        l, r = central_credible_interval(coef_samples, alpha=0.05)
+        self.assertLess(l, 1)
+        self.assertGreater(r, 1)
+        l, r = highest_density_interval(coef_samples, alpha=0.05)
+        self.assertLess(l, 1)
+        self.assertGreater(r, 1)
+        self.assertAlmostEqual(np.mean(intercept_samples), 0, delta=0.3)
+        l, r = central_credible_interval(intercept_samples, alpha=0.05)
+        self.assertLess(l, 0)
+        self.assertGreater(r, 0)
+        self.assertAlmostEqual(np.mean(intercept_samples), 0, delta=0.3)
+        l, r = highest_density_interval(intercept_samples, alpha=0.05)
+        self.assertLess(l, 0)
+        self.assertGreater(r, 0)
+
 
 if __name__ == '__main__':
     unittest.main()
