diff --git a/pook/assertion.py b/pook/assertion.py
index 493b065..152f1e6 100644
--- a/pook/assertion.py
+++ b/pook/assertion.py
@@ -30,8 +30,6 @@ def equal(x, y):
     """
     return test_case().assertEqual(x, y) or True
 
-    assert x == y
-
 
 def matches(x, y, regex_expr=False):
     """
@@ -52,9 +50,6 @@ def matches(x, y, regex_expr=False):
     # Parse regex expression, if needed
     x = strip_regex(x) if regex_expr and isregex_expr(x) else x
 
-    # Run regex assertion
-    # Retrieve original regex pattern
-    x = x.pattern if isregex(x) else x
     # Assert regular expression via unittest matchers
     return test_case().assertRegex(y, x) or True
 
diff --git a/pook/headers.py b/pook/headers.py
index 26c9d38..0cb1213 100644
--- a/pook/headers.py
+++ b/pook/headers.py
@@ -237,7 +237,7 @@ class HTTPHeaderDict(MutableMapping):
 
 def to_string_value(value):
     """
-    Retrieve a string value for arbitrary header field value.
+    Retrieve a string value for an arbitrary value.
 
     HTTP header values are specified as ASCII strings. However,
     the specificiation also states that non-ASCII bytes should be
@@ -247,15 +247,15 @@ def to_string_value(value):
     obscure the input, like base 64).
 
     Arguments::
-        value (str|bytes):
+        value (mixed):
             The value to cast to ``str``.
 
     Returns::
         str:
             Unicode escaped ``value`` if it was ``bytes``; otherwise,
-            ``value`` is returned.
+            ``value`` is returned, cast through ``str``.
     """
-    if isinstance(value, str):
-        return value
+    if hasattr(value, "decode"):
+        return value.decode("unicode_escape")
 
-    return value.decode('unicode_escape')
+    return str(value)
diff --git a/pook/matchers/headers.py b/pook/matchers/headers.py
index fb76a61..1d1b325 100644
--- a/pook/matchers/headers.py
+++ b/pook/matchers/headers.py
@@ -1,5 +1,6 @@
 from .base import BaseMatcher
 from ..headers import to_string_value
+from ..regex import Pattern
 
 
 class HeadersMatcher(BaseMatcher):
@@ -15,16 +16,41 @@ class HeadersMatcher(BaseMatcher):
     @BaseMatcher.matcher
     def match(self, req):
         for key in self.expectation:
-            # Retrieve value to match
-            # Cast it to a string that can be compared
-            # If it is already a string ``to_string_value`` is a noop
-            value = to_string_value(self.expectation[key])
+            assert key in req.headers, f"Header '{key}' not present"
+
+            expected_value = self.to_comparable_value(self.expectation[key])
 
             # Retrieve header value by key
-            header = req.headers.get(key)
+            actual_value = req.headers.get(key)
+
+            assert not all([
+                expected_value is not None,
+                actual_value is None,
+            ]), (
+                f"Expected a value `{expected_value}` "
+                f"for '{key}' but found `None`"
+            )
 
             # Compare header value
-            if not self.compare(value, header, regex_expr=True):
+            if not self.compare(expected_value, actual_value, regex_expr=True):
                 return False
 
         return True
+
+    def to_comparable_value(self, value):
+        """
+        Return a comparable version of ``value``.
+
+        Arguments:
+            value (mixed): the value to cast.
+
+        Returns:
+            str|re.Pattern|None
+        """
+        if isinstance(value, (str, Pattern)):
+            return value
+
+        if value is None:
+            return value
+
+        return to_string_value(value)
diff --git a/pook/regex.py b/pook/regex.py
index 8ec84c3..2559ebd 100644
--- a/pook/regex.py
+++ b/pook/regex.py
@@ -1,7 +1,10 @@
 import re
+import sys
 
-# Little hack to extra the regexp object type at runtime
-retype = type(re.compile(''))
+if sys.version_info < (3, 7):
+    Pattern = type(re.compile(''))
+else:
+    Pattern = re.Pattern
 
 
 def isregex_expr(expr):
@@ -38,7 +41,7 @@ def isregex(value):
     """
     if not value:
         return False
-    return any((isregex_expr(value), isinstance(value, retype)))
+    return any((isregex_expr(value), isinstance(value, Pattern)))
 
 
 def strip_regex(expr):
@@ -52,4 +55,4 @@ def strip_regex(expr):
     Returns:
         str
     """
-    return expr.replace[3:-1] if isregex_expr(expr) else expr
+    return expr[3:-1] if isregex_expr(expr) else expr
