diff --git a/matchms/filtering/add_precursor_mz.py b/matchms/filtering/add_precursor_mz.py
index 9e402764..2022653f 100644
--- a/matchms/filtering/add_precursor_mz.py
+++ b/matchms/filtering/add_precursor_mz.py
@@ -1,6 +1,21 @@
+from typing import Iterable
+from typing import TypeVar
 from ..typing import SpectrumType
 
 
+_T = TypeVar('_T')
+_accepted_keys = ["precursor_mz", "precursormz", "precursor_mass"]
+_accepted_types = (float, str, int)
+_convertible_types = (str, int)
+
+
+def get_first_common_element(first: Iterable[_T], second: Iterable[_T]) -> _T:
+    """ Get first common element from two lists.
+    Returns 'None' if there are no common elements.
+    """
+    return next((item for item in first if item in second), None)
+
+
 def add_precursor_mz(spectrum_in: SpectrumType) -> SpectrumType:
     """Add precursor_mz to correct field and make it a float.
 
@@ -12,10 +27,19 @@ def add_precursor_mz(spectrum_in: SpectrumType) -> SpectrumType:
 
     spectrum = spectrum_in.clone()
 
-    if isinstance(spectrum.get("precursor_mz", None), str):
-        spectrum.set("precursor_mz", float(spectrum.get("precursor_mz").strip()))
-    elif spectrum.get("precursor_mz", None) is None:
-        pepmass = spectrum.get("pepmass", None)
+    precursor_mz_key = get_first_common_element(spectrum.metadata.keys(), _accepted_keys)
+    precursor_mz = spectrum.get(precursor_mz_key)
+
+    if isinstance(precursor_mz, _accepted_types):
+        if isinstance(precursor_mz, str):
+            try:
+                precursor_mz = float(precursor_mz.strip())
+            except ValueError:
+                print("%s can't be converted to float.", precursor_mz)
+                return spectrum
+        spectrum.set("precursor_mz", float(precursor_mz))
+    elif precursor_mz is None:
+        pepmass = spectrum.get("pepmass")
         if pepmass is not None and isinstance(pepmass[0], float):
             spectrum.set("precursor_mz", pepmass[0])
         else:

