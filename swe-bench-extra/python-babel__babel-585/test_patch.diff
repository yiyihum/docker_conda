diff --git a/tests/test_numbers.py b/tests/test_numbers.py
index 493c1a7..32f4280 100644
--- a/tests/test_numbers.py
+++ b/tests/test_numbers.py
@@ -19,7 +19,7 @@ from datetime import date
 from babel import Locale, localedata, numbers
 from babel.numbers import (
     list_currencies, validate_currency, UnknownCurrencyError, is_currency, normalize_currency,
-    get_currency_precision, get_decimal_precision)
+    get_currency_precision, get_decimal_precision, get_currency_unit_pattern)
 from babel.localedata import locale_identifiers
 from babel._compat import decimal
 
@@ -228,6 +228,17 @@ def test_get_currency_precision():
     assert get_currency_precision('JPY') == 0
 
 
+def test_get_currency_unit_pattern():
+    assert get_currency_unit_pattern('USD', locale='en_US') == '{0} {1}'
+    assert get_currency_unit_pattern('USD', locale='es_GT') == '{1} {0}'
+
+    # 'ro' locale various pattern according to count
+    assert get_currency_unit_pattern('USD', locale='ro', count=1) == '{0} {1}'
+    assert get_currency_unit_pattern('USD', locale='ro', count=2) == '{0} {1}'
+    assert get_currency_unit_pattern('USD', locale='ro', count=100) == '{0} de {1}'
+    assert get_currency_unit_pattern('USD', locale='ro') == '{0} de {1}'
+
+
 def test_get_territory_currencies():
     assert numbers.get_territory_currencies('AT', date(1995, 1, 1)) == ['ATS']
     assert numbers.get_territory_currencies('AT', date(2011, 1, 1)) == ['EUR']
@@ -415,6 +426,52 @@ def test_format_currency_quantization():
             '0.9999999999', 'USD', locale=locale_code, decimal_quantization=False).find('9999999999') > -1
 
 
+def test_format_currency_long_display_name():
+    assert (numbers.format_currency(1099.98, 'USD', locale='en_US', format_type='name')
+            == u'1,099.98 US dollars')
+    assert (numbers.format_currency(1.00, 'USD', locale='en_US', format_type='name')
+            == u'1.00 US dollar')
+    assert (numbers.format_currency(1.00, 'EUR', locale='en_US', format_type='name')
+            == u'1.00 euro')
+    assert (numbers.format_currency(2, 'EUR', locale='en_US', format_type='name')
+            == u'2.00 euros')
+    # This tests that '{1} {0}' unitPatterns are found:
+    assert (numbers.format_currency(1, 'USD', locale='sw', format_type='name')
+            == u'dola ya Marekani 1.00')
+    # This tests unicode chars:
+    assert (numbers.format_currency(1099.98, 'USD', locale='es_GT', format_type='name')
+            == u'dÃ³lares estadounidenses 1,099.98')
+    # Test for completely unknown currency, should fallback to currency code
+    assert (numbers.format_currency(1099.98, 'XAB', locale='en_US', format_type='name')
+            == u'1,099.98 XAB')
+
+    # Test for finding different unit patterns depending on count
+    assert (numbers.format_currency(1, 'USD', locale='ro', format_type='name')
+            == u'1,00 dolar american')
+    assert (numbers.format_currency(2, 'USD', locale='ro', format_type='name')
+            == u'2,00 dolari americani')
+    assert (numbers.format_currency(100, 'USD', locale='ro', format_type='name')
+            == u'100,00 de dolari americani')
+
+
+def test_format_currency_long_display_name_all():
+    for locale_code in localedata.locale_identifiers():
+        assert numbers.format_currency(
+            1, 'USD', locale=locale_code, format_type='name').find('1') > -1
+        assert numbers.format_currency(
+            '1', 'USD', locale=locale_code, format_type='name').find('1') > -1
+
+
+def test_format_currency_long_display_name_custom_format():
+    assert (numbers.format_currency(1099.98, 'USD', locale='en_US',
+                                    format_type='name', format='##0')
+            == '1099.98 US dollars')
+    assert (numbers.format_currency(1099.98, 'USD', locale='en_US',
+                                    format_type='name', format='##0',
+                                    currency_digits=False)
+            == '1100 US dollars')
+
+
 def test_format_percent():
     assert numbers.format_percent(0.34, locale='en_US') == u'34%'
     assert numbers.format_percent(0, locale='en_US') == u'0%'
