diff --git a/text_to_num/lang/base.py b/text_to_num/lang/base.py
index b2a8cc9..e349c1c 100644
--- a/text_to_num/lang/base.py
+++ b/text_to_num/lang/base.py
@@ -70,7 +70,7 @@ class Language:
         return NotImplemented
 
     def not_numeric_word(self, word: Optional[str]) -> bool:
-        return word is None or word != self.DECIMAL_SEP and word not in self.NUMBERS
+        return word is None or word != self.DECIMAL_SEP and word not in self.NUMBERS and word not in self.ZERO
 
     def split_number_word(self, word: str) -> str:  # maybe use: List[str]
         """In some languages numbers are written as one word, e.g. German
diff --git a/text_to_num/lang/english.py b/text_to_num/lang/english.py
index e155a2e..4286476 100644
--- a/text_to_num/lang/english.py
+++ b/text_to_num/lang/english.py
@@ -117,7 +117,7 @@ class English(Language):
 
     AND_NUMS: Set[str] = set()
     AND = "and"
-    NEVER_IF_ALONE = {"one"}
+    NEVER_IF_ALONE = {"one", "o"}
 
     # Relaxed composed numbers (two-words only)
     # start => (next, target)
diff --git a/text_to_num/parsers.py b/text_to_num/parsers.py
index d66d9ed..72c3add 100644
--- a/text_to_num/parsers.py
+++ b/text_to_num/parsers.py
@@ -655,21 +655,21 @@ class WordToDigitParser:
         elif (
             word in self.lang.ZERO
             and self.at_start_of_seq()
-            and (
-                look_ahead is None
-                or look_ahead in self.lang.NUMBERS
-                or look_ahead in self.lang.ZERO
-                or look_ahead in self.lang.DECIMAL_SEP
-            )
+            and look_ahead is not None
+            and look_ahead in self.lang.DECIMAL_SEP
         ):
-            self._value.append("0")
+            pass
         elif (
             word in self.lang.ZERO
             and self.at_start_of_seq()
-            and look_ahead is not None
-            and look_ahead in self.lang.DECIMAL_SEP
+            # and (
+            #     look_ahead is None
+            #     or look_ahead in self.lang.NUMBERS
+            #     or look_ahead in self.lang.ZERO
+            #     or look_ahead in self.lang.DECIMAL_SEP
+            # )
         ):
-            pass
+            self._value.append("0")
         elif self._push(self.lang.ord2card(word) or "", look_ahead):
             self._value.append(
                 self.lang.num_ord(

