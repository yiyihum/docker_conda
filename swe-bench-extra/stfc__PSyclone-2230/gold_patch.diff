diff --git a/changelog b/changelog
index dab8c8548..060343dfb 100644
--- a/changelog
+++ b/changelog
@@ -527,6 +527,9 @@
 	new, associated optimisation scripts. Includes bug fixes for
 	matmul inlining transformation.
 
+	179) PR #2230 for #2228. Improve reporting of errors due to kernel
+	functors not explicitly included in algorithm use statements.
+
 release 2.3.1 17th of June 2022
 
 	1) PR #1747 for #1720. Adds support for If blocks to PSyAD.
diff --git a/src/psyclone/generator.py b/src/psyclone/generator.py
index c3d2aafc3..69dc40bdf 100644
--- a/src/psyclone/generator.py
+++ b/src/psyclone/generator.py
@@ -61,6 +61,7 @@ from psyclone.domain.common.transformations import AlgTrans
 from psyclone.domain.gocean.transformations import (
     RaisePSyIR2GOceanKernTrans, GOceanAlgInvoke2PSyCallTrans)
 from psyclone.domain.lfric.algorithm import LFRicBuiltinFunctor
+from psyclone.domain.lfric.lfric_builtins import BUILTIN_MAP
 from psyclone.domain.lfric.transformations import (
     LFRicAlgTrans, RaisePSyIR2LFRicKernTrans, LFRicAlgInvoke2PSyCallTrans)
 from psyclone.errors import GenerationError, InternalError
@@ -75,6 +76,7 @@ from psyclone.psyir.backend.fortran import FortranWriter
 from psyclone.psyir.frontend.fortran import FortranReader
 from psyclone.psyir.frontend.fparser2 import Fparser2Reader
 from psyclone.psyir.nodes import Loop, Container, Routine
+from psyclone.psyir.symbols import UnresolvedInterface
 from psyclone.psyir.transformations import TransformationError
 from psyclone.version import __VERSION__
 
@@ -92,7 +94,6 @@ LFRIC_TESTING = False
 
 
 def handle_script(script_name, info, function_name, is_optional=False):
-    # pylint: disable=too-many-locals
     '''Loads and applies the specified script to the given algorithm or
     psy layer. The relevant script function (in 'function_name') is
     called with 'info' as the argument.
@@ -188,34 +189,39 @@ def generate(filename, api="", kernel_paths=None, script_name=None,
 
     :param str filename: the file containing the algorithm specification.
     :param str api: the name of the API to use. Defaults to empty string.
-    :param kernel_paths: the directories from which to recursively \
-        search for the files containing the kernel source (if \
-        different from the location of the algorithm specification). \
+    :param kernel_paths: the directories from which to recursively
+        search for the files containing the kernel source (if
+        different from the location of the algorithm specification).
         Defaults to None.
     :type kernel_paths: Optional[List[str]]
-    :param str script_name: a script file that can apply optimisations \
-        to the PSy layer (can be a path to a file or a filename that \
+    :param str script_name: a script file that can apply optimisations
+        to the PSy layer (can be a path to a file or a filename that
         relies on the PYTHONPATH to find the module). Defaults to None.
-    :param bool line_length: a logical flag specifying whether we care \
-        about line lengths being longer than 132 characters. If so, \
-        the input (algorithm and kernel) code is checked to make sure \
+    :param bool line_length: a logical flag specifying whether we care
+        about line lengths being longer than 132 characters. If so,
+        the input (algorithm and kernel) code is checked to make sure
         that it conforms. The default is False.
-    :param bool distributed_memory: a logical flag specifying whether \
-        to generate distributed memory code. The default is set in the \
+    :param bool distributed_memory: a logical flag specifying whether
+        to generate distributed memory code. The default is set in the
         'config.py' file.
-    :param str kern_out_path: directory to which to write transformed \
+    :param str kern_out_path: directory to which to write transformed
         kernel code. Defaults to empty string.
-    :param bool kern_naming: the scheme to use when re-naming transformed \
+    :param bool kern_naming: the scheme to use when re-naming transformed
         kernels. Defaults to "multiple".
-    :return: 2-tuple containing the fparser1 AST for the algorithm code and \
+    :return: 2-tuple containing the fparser1 AST for the algorithm code and
         the fparser1 AST or a string (for NEMO) of the psy code.
-    :rtype: Tuple[:py:class:`fparser.one.block_statements.BeginSource`, \
-            :py:class:`fparser.one.block_statements.Module`] | \
-            Tuple[:py:class:`fparser.one.block_statements.BeginSource`, str]
+    :rtype: Tuple[:py:class:`fparser.one.block_statements.BeginSource`,
+        :py:class:`fparser.one.block_statements.Module`] |
+        Tuple[:py:class:`fparser.one.block_statements.BeginSource`, str]
 
     :raises GenerationError: if an invalid API is specified.
     :raises GenerationError: if an invalid kernel-renaming scheme is specified.
+    :raises GenerationError: if there is an error raising the PSyIR to
+        domain-specific PSyIR.
+    :raises GenerationError: if a kernel functor is not named in a use
+        statement.
     :raises IOError: if the filename or search path do not exist.
+    :raises NoInvokesError: if no invokes are found in the algorithm file.
 
     For example:
 
@@ -318,6 +324,27 @@ def generate(filename, api="", kernel_paths=None, script_name=None,
                 if isinstance(kern, LFRicBuiltinFunctor):
                     # Skip builtins
                     continue
+                if isinstance(kern.symbol.interface, UnresolvedInterface):
+                    # This kernel functor is not specified in a use statement.
+                    # Find all container symbols that are in scope.
+                    st_ref = kern.scope.symbol_table
+                    container_symbols = [
+                        symbol.name for symbol in st_ref.containersymbols]
+                    while st_ref.parent_symbol_table():
+                        st_ref = st_ref.parent_symbol_table()
+                        container_symbols += [
+                            symbol.name for symbol in st_ref.containersymbols]
+                    message = (
+                        f"Kernel functor '{kern.symbol.name}' in routine "
+                        f"'{kern.scope.name}' from algorithm file "
+                        f"'{filename}' must be named in a use "
+                        f"statement (found {container_symbols})")
+                    if api == "dynamo0.3":
+                        message += (
+                            f" or be a recognised built-in (one of "
+                            f"{list(BUILTIN_MAP.keys())})")
+                    message += "."
+                    raise GenerationError(message)
                 container_symbol = kern.symbol.interface.container_symbol
 
                 # Find the kernel file containing the container
