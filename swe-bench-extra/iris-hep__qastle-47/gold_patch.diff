diff --git a/README.md b/README.md
index e97480f..cbf062f 100644
--- a/README.md
+++ b/README.md
@@ -78,6 +78,7 @@ All defined s-expressions are listed here, though this specification will be exp
   - Zip: `(Zip <source>)`
   - OrderBy: `(OrderBy <source> <key_selector>)`
     - `key_selector` must be a `lambda` with one argument
+  - CrossJoin: `(CrossJoin <first> <second>)`
 
 
 ## Example
diff --git a/qastle/linq_util.py b/qastle/linq_util.py
index be3e88e..9fb9251 100644
--- a/qastle/linq_util.py
+++ b/qastle/linq_util.py
@@ -75,6 +75,13 @@ class OrderBy(ast.AST):
         self.key_selector = key_selector
 
 
+class CrossJoin(ast.AST):
+    def __init__(self, first, second):
+        self._fields = ['first', 'second']
+        self.first = first
+        self.second = second
+
+
 linq_operator_names = ('Where',
                        'Select',
                        'SelectMany',
@@ -85,7 +92,8 @@ linq_operator_names = ('Where',
                        'Min',
                        'Sum',
                        'Zip',
-                       'OrderBy')
+                       'OrderBy',
+                       'CrossJoin')
 
 
 class InsertLINQNodesTransformer(ast.NodeTransformer):
@@ -178,6 +186,11 @@ class InsertLINQNodesTransformer(ast.NodeTransformer):
                 raise SyntaxError('OrderBy() call argument must be a lambda')
             return OrderBy(source=self.visit(source),
                            key_selector=self.visit(args[0]))
+        elif function_name == 'CrossJoin':
+            if len(args) != 1:
+                raise SyntaxError('CrossJoin() call must have exactly one argument')
+            return CrossJoin(first=self.visit(source),
+                             second=self.visit(args[0]))
         else:
             raise NameError('Unhandled LINQ operator: ' + function_name)
 
diff --git a/qastle/transform.py b/qastle/transform.py
index c0b45b7..fe9a820 100644
--- a/qastle/transform.py
+++ b/qastle/transform.py
@@ -1,5 +1,5 @@
 from .linq_util import (Where, Select, SelectMany, First, Aggregate, Count, Max,
-                        Min, Sum, Zip, OrderBy)
+                        Min, Sum, Zip, OrderBy, CrossJoin)
 from .ast_util import wrap_ast, unwrap_ast
 
 import lark
@@ -209,6 +209,11 @@ class PythonASTToTextASTTransformer(ast.NodeVisitor):
                                                self.visit(node.source),
                                                self.visit(node.key_selector))
 
+    def visit_CrossJoin(self, node):
+        return self.make_composite_node_string('CrossJoin',
+                                               self.visit(node.first),
+                                               self.visit(node.second))
+
     def generic_visit(self, node):
         raise SyntaxError('Unsupported node type: ' + str(type(node)))
 
@@ -455,5 +460,10 @@ class TextASTToPythonASTTransformer(lark.Transformer):
                                   + str(len(fields[1].args.args)))
             return OrderBy(source=fields[0], key_selector=fields[1])
 
+        elif node_type == 'CrossJoin':
+            if len(fields) != 2:
+                raise SyntaxError('CrossJoin node must have two fields; found ' + str(len(fields)))
+            return CrossJoin(first=fields[0], second=fields[1])
+
         else:
             raise SyntaxError('Unknown composite node type: ' + node_type)
