diff --git a/tests/unittests/test_arguments.py b/tests/unittests/test_arguments.py
index 3156a25..3c60285 100644
--- a/tests/unittests/test_arguments.py
+++ b/tests/unittests/test_arguments.py
@@ -9,37 +9,37 @@ from next_action.arguments import parse_arguments
 class ArgumentParserTest(unittest.TestCase):
     """ Unit tests for the argument parses. """
 
-    @patch.object(sys, "argv", ["next_action"])
+    @patch.object(sys, "argv", ["next-action"])
     def test_default_filename(self):
         """ Test that the argument parser has a default filename. """
         self.assertEqual("todo.txt", parse_arguments().file)
 
-    @patch.object(sys, "argv", ["next_action", "-f", "my_todo.txt"])
+    @patch.object(sys, "argv", ["next-action", "-f", "my_todo.txt"])
     def test_filename_argument(self):
         """ Test that the argument parser accepts a filename. """
         self.assertEqual("my_todo.txt", parse_arguments().file)
 
-    @patch.object(sys, "argv", ["next_action", "--file", "my_other_todo.txt"])
+    @patch.object(sys, "argv", ["next-action", "--file", "my_other_todo.txt"])
     def test_long_filename_argument(self):
         """ Test that the argument parser accepts a filename. """
         self.assertEqual("my_other_todo.txt", parse_arguments().file)
 
-    @patch.object(sys, "argv", ["next_action"])
+    @patch.object(sys, "argv", ["next-action"])
     def test_no_context(self):
         """ Test that the argument parser returns no context if the user doesn't pass one. """
         self.assertEqual(None, parse_arguments().context)
 
-    @patch.object(sys, "argv", ["next_action", "@home"])
+    @patch.object(sys, "argv", ["next-action", "@home"])
     def test_one_context(self):
         """ Test that the argument parser returns the context if the user passes one. """
         self.assertEqual("@home", parse_arguments().context)
 
-    @patch.object(sys, "argv", ["next_action", "home"])
+    @patch.object(sys, "argv", ["next-action", "home"])
     @patch.object(sys.stderr, "write")
     def test_faulty_context(self, mock_stderr_write):
         """ Test that the argument parser exits if the context is faulty. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, parse_arguments)
-        self.assertEqual([call("usage: next_action [-h] [--version] [-f FILE] [@CONTEXT]\n"),
-                          call("next_action: error: Contexts should start with an @.\n")],
+        self.assertEqual([call("usage: next-action [-h] [--version] [-f FILE] [@CONTEXT]\n"),
+                          call("next-action: error: Contexts should start with an @.\n")],
                          mock_stderr_write.call_args_list)
\ No newline at end of file
diff --git a/tests/unittests/test_cli.py b/tests/unittests/test_cli.py
index 3cdefe1..5b20ad6 100644
--- a/tests/unittests/test_cli.py
+++ b/tests/unittests/test_cli.py
@@ -10,7 +10,7 @@ from next_action import __version__
 class CLITest(unittest.TestCase):
     """ Unit tests for the command-line interface. """
 
-    @patch.object(sys, "argv", ["next_action"])
+    @patch.object(sys, "argv", ["next-action"])
     @patch("next_action.cli.open", mock_open(read_data=""))
     @patch.object(sys.stdout, "write")
     def test_empty_task_file(self, mock_stdout_write):
@@ -18,7 +18,7 @@ class CLITest(unittest.TestCase):
         next_action()
         self.assertEqual([call("Nothing to do!"), call("\n")], mock_stdout_write.call_args_list)
 
-    @patch.object(sys, "argv", ["next_action"])
+    @patch.object(sys, "argv", ["next-action"])
     @patch("next_action.cli.open", mock_open(read_data="Todo\n"))
     @patch.object(sys.stdout, "write")
     def test_one_task(self, mock_stdout_write):
@@ -26,7 +26,7 @@ class CLITest(unittest.TestCase):
         next_action()
         self.assertEqual([call("Todo"), call("\n")], mock_stdout_write.call_args_list)
 
-    @patch.object(sys, "argv", ["next_action"])
+    @patch.object(sys, "argv", ["next-action"])
     @patch("next_action.cli.open")
     @patch.object(sys.stdout, "write")
     def test_missing_file(self, mock_stdout_write, mock_open):
@@ -35,13 +35,13 @@ class CLITest(unittest.TestCase):
         next_action()
         self.assertEqual([call("Can't find todo.txt"), call("\n")], mock_stdout_write.call_args_list)
 
-    @patch.object(sys, "argv", ["next_action", "--help"])
+    @patch.object(sys, "argv", ["next-action", "--help"])
     @patch.object(sys.stdout, "write")
     def test_help(self, mock_stdout_write):
         """ Test the help message. """
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, next_action)
-        self.assertEqual(call("""usage: next_action [-h] [--version] [-f FILE] [@CONTEXT]
+        self.assertEqual(call("""usage: next-action [-h] [--version] [-f FILE] [@CONTEXT]
 
 Show the next action in your todo.txt
 
@@ -55,9 +55,9 @@ optional arguments:
 """),
                         mock_stdout_write.call_args_list[0])
 
-    @patch.object(sys, "argv", ["next_action", "--version"])
+    @patch.object(sys, "argv", ["next-action", "--version"])
     @patch.object(sys.stdout, "write")
     def test_version(self, mock_stdout_write):
         """ Test that --version shows the version number. """
         self.assertRaises(SystemExit, next_action)
-        self.assertEqual([call("Next-action {0}\n".format(__version__))], mock_stdout_write.call_args_list)
\ No newline at end of file
+        self.assertEqual([call("next-action {0}\n".format(__version__))], mock_stdout_write.call_args_list)
\ No newline at end of file
