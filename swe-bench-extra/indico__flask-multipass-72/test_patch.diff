diff --git a/tests/test_core.py b/tests/test_core.py
index 0adada1..ef1e60b 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -218,3 +218,12 @@ def test_handle_auth_error_with_redirect(mocker):
         multipass.handle_auth_error(AuthenticationFailed(), redirect_to_login=True)
         assert flash.called
         redirect.assert_called_with(app.config['MULTIPASS_LOGIN_URLS'][0])
+
+
+def test_load_providers_from_entrypoints():
+    app = Flask('test')
+    app.config['SECRET_KEY'] = 'testing'
+    app.config['MULTIPASS_AUTH_PROVIDERS'] = {'test': {'type': 'static'}}
+    app.config['MULTIPASS_IDENTITY_PROVIDERS'] = {'test': {'type': 'static'}}
+    app.config['MULTIPASS_PROVIDER_MAP'] = {'test': 'test'}
+    Multipass(app)
diff --git a/tests/test_util.py b/tests/test_util.py
index 4fc6532..250fbee 100644
--- a/tests/test_util.py
+++ b/tests/test_util.py
@@ -4,6 +4,7 @@
 # Flask-Multipass is free software; you can redistribute it
 # and/or modify it under the terms of the Revised BSD License.
 
+import sys
 from importlib.metadata import EntryPoint
 
 import pytest
@@ -170,7 +171,7 @@ def test_login_view(mocker):
 
 
 class DummyBase:
-    _entry_point = 'dummy'
+    _entry_point = 'fakeproviders'
 
 
 class Dummy(DummyBase):
@@ -190,21 +191,29 @@ class MockEntryPoint(EntryPoint):
         return mapping[self.name]
 
 
-def mock_entry_point(name):
+def mock_entry_point(name, n=0):
     # we can't override MockEntryPoint's `__init__` to pass the default values since it's using
     # a namedtuple in Python<3.11, and required args are handled via __new__ in namedtuple
-    return MockEntryPoint(name, 'dummy.value', 'dummy.group')
+    return MockEntryPoint(name, f'dummy.value.{n}', 'dummy.group')
 
 
 @pytest.fixture
 def mock_entry_points(monkeypatch):
-    def _mock_entry_points(*, group, name):
-        return {
-            'dummy': [mock_entry_point('dummy')],
-            'fake': [mock_entry_point('fake')],
-            'multi': [mock_entry_point('dummy'), mock_entry_point('fake')],
-            'unknown': []
-        }[name]
+    MOCK_EPS = {
+        'fakeproviders': [
+            mock_entry_point('dummy'),
+            mock_entry_point('fake'),
+            mock_entry_point('multi'),
+            mock_entry_point('multi', 1),
+        ]
+    }
+
+    if sys.version_info < (3, 10):
+        def _mock_entry_points():
+            return MOCK_EPS
+    else:
+        def _mock_entry_points(*, group, name):
+            return [ep for ep in MOCK_EPS[group] if ep.name == name]
 
     monkeypatch.setattr('flask_multipass.util.importlib_entry_points', _mock_entry_points)
 
