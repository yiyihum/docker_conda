diff --git a/tests/func/metrics/test_diff.py b/tests/func/metrics/test_diff.py
--- a/tests/func/metrics/test_diff.py
+++ b/tests/func/metrics/test_diff.py
@@ -1,9 +1,8 @@
 import json
 import logging
 
-import yaml
-
 from dvc.main import main
+from dvc.utils.serialize import dump_yaml
 
 
 def test_metrics_diff_simple(tmp_dir, scm, dvc, run_copy_metrics):
@@ -24,7 +23,7 @@ def _gen(val):
 def test_metrics_diff_yaml(tmp_dir, scm, dvc, run_copy_metrics):
     def _gen(val):
         metrics = {"a": {"b": {"c": val, "d": 1, "e": str(val)}}}
-        tmp_dir.gen({"m_temp.yaml": yaml.dump(metrics)})
+        dump_yaml("m_temp.yaml", metrics)
         run_copy_metrics(
             "m_temp.yaml", "m.yaml", metrics=["m.yaml"], commit=str(val)
         )
diff --git a/tests/func/plots/test_plots.py b/tests/func/plots/test_plots.py
--- a/tests/func/plots/test_plots.py
+++ b/tests/func/plots/test_plots.py
@@ -6,7 +6,6 @@
 from collections import OrderedDict
 
 import pytest
-import yaml
 from funcy import first
 
 from dvc.repo.plots.data import (
@@ -21,6 +20,7 @@
     NoFieldInDataError,
     TemplateNotFoundError,
 )
+from dvc.utils.serialize import dump_yaml, dumps_yaml
 
 
 def _write_csv(metric, filename, header=True):
@@ -493,9 +493,7 @@ def test_plot_default_choose_column(tmp_dir, scm, dvc, run_copy_metrics):
 
 def test_plot_yaml(tmp_dir, scm, dvc, run_copy_metrics):
     metric = [{"val": 2}, {"val": 3}]
-    with open("metric_t.yaml", "w") as fobj:
-        yaml.dump(metric, fobj)
-
+    dump_yaml("metric_t.yaml", metric)
     run_copy_metrics(
         "metric_t.yaml", "metric.yaml", plots_no_cache=["metric.yaml"]
     )
@@ -543,7 +541,7 @@ def test_load_metric_from_dict_yaml(tmp_dir):
     metric = [{"acccuracy": 1, "loss": 2}, {"accuracy": 3, "loss": 4}]
     dmetric = {"train": metric}
 
-    plot_data = YAMLPlotData("-", "revision", yaml.dump(dmetric))
+    plot_data = YAMLPlotData("-", "revision", dumps_yaml(dmetric))
 
     expected = metric
     for d in expected:
diff --git a/tests/func/test_add.py b/tests/func/test_add.py
--- a/tests/func/test_add.py
+++ b/tests/func/test_add.py
@@ -17,7 +17,6 @@
     OutputDuplicationError,
     OverlappingOutputPathsError,
     RecursiveAddingWhileUsingFilename,
-    YAMLFileCorruptedError,
 )
 from dvc.main import main
 from dvc.output.base import OutputAlreadyTrackedError, OutputIsStageFileError
@@ -27,7 +26,7 @@
 from dvc.tree.local import LocalTree
 from dvc.utils import LARGE_DIR_SIZE, file_md5, relpath
 from dvc.utils.fs import path_isin
-from dvc.utils.serialize import load_yaml
+from dvc.utils.serialize import YAMLFileCorruptedError, load_yaml
 from tests.basic_env import TestDvc
 from tests.utils import get_gitignore_content
 
diff --git a/tests/func/test_lockfile.py b/tests/func/test_lockfile.py
--- a/tests/func/test_lockfile.py
+++ b/tests/func/test_lockfile.py
@@ -1,20 +1,18 @@
 from collections import OrderedDict
 from operator import itemgetter
 
-import yaml
-
 from dvc.dvcfile import PIPELINE_LOCK
 from dvc.stage.utils import split_params_deps
 from dvc.utils.fs import remove
-from dvc.utils.serialize import parse_yaml_for_update
+from dvc.utils.serialize import dumps_yaml, parse_yaml_for_update
 from tests.func.test_run_multistage import supported_params
 
 FS_STRUCTURE = {
     "foo": "bar\nfoobar",
     "bar": "foo\nfoobar",
     "foobar": "foobar\nbar",
-    "params.yaml": yaml.dump(supported_params),
-    "params2.yaml": yaml.dump(supported_params),
+    "params.yaml": dumps_yaml(supported_params),
+    "params2.yaml": dumps_yaml(supported_params),
 }
 
 
diff --git a/tests/func/test_repro_multistage.py b/tests/func/test_repro_multistage.py
--- a/tests/func/test_repro_multistage.py
+++ b/tests/func/test_repro_multistage.py
@@ -3,7 +3,6 @@
 from textwrap import dedent
 
 import pytest
-import yaml
 from funcy import lsplit
 
 from dvc.dvcfile import PIPELINE_FILE, PIPELINE_LOCK
@@ -474,11 +473,8 @@ def test_repro_multiple_params(tmp_dir, dvc):
     from dvc.stage.utils import split_params_deps
     from tests.func.test_run_multistage import supported_params
 
-    with (tmp_dir / "params2.yaml").open("w+") as f:
-        yaml.dump(supported_params, f)
-
-    with (tmp_dir / "params.yaml").open("w+") as f:
-        yaml.dump(supported_params, f)
+    dump_yaml(tmp_dir / "params2.yaml", supported_params)
+    dump_yaml(tmp_dir / "params.yaml", supported_params)
 
     (tmp_dir / "foo").write_text("foo")
     stage = dvc.run(
@@ -518,9 +514,8 @@ def test_repro_multiple_params(tmp_dir, dvc):
     assert set(defaults) == {"answer", "floats", "nested.nested1"}
 
     assert not dvc.reproduce(stage.addressing)
-    with (tmp_dir / "params.yaml").open("w+") as f:
-        params = deepcopy(supported_params)
-        params["answer"] = 43
-        yaml.dump(params, f)
+    params = deepcopy(supported_params)
+    params["answer"] = 43
+    dump_yaml(tmp_dir / "params.yaml", params)
 
     assert dvc.reproduce(stage.addressing) == [stage]
diff --git a/tests/func/test_run_multistage.py b/tests/func/test_run_multistage.py
--- a/tests/func/test_run_multistage.py
+++ b/tests/func/test_run_multistage.py
@@ -2,12 +2,11 @@
 import textwrap
 
 import pytest
-import yaml
 
 from dvc.exceptions import InvalidArgumentError
 from dvc.repo import Repo
 from dvc.stage.exceptions import DuplicateStageName, InvalidStageName
-from dvc.utils.serialize import parse_yaml_for_update
+from dvc.utils.serialize import dump_yaml, parse_yaml_for_update
 
 
 def test_run_with_name(tmp_dir, dvc, run_copy):
@@ -236,9 +235,7 @@ def test_run_already_exists(tmp_dir, dvc, run_copy):
 def test_run_params_default(tmp_dir, dvc):
     from dvc.dependency import ParamsDependency
 
-    with (tmp_dir / "params.yaml").open("w+") as f:
-        yaml.dump(supported_params, f)
-
+    dump_yaml(tmp_dir / "params.yaml", supported_params)
     stage = dvc.run(
         name="read_params",
         params=["nested.nested1.nested2"],
@@ -261,9 +258,7 @@ def test_run_params_default(tmp_dir, dvc):
 def test_run_params_custom_file(tmp_dir, dvc):
     from dvc.dependency import ParamsDependency
 
-    with (tmp_dir / "params2.yaml").open("w+") as f:
-        yaml.dump(supported_params, f)
-
+    dump_yaml(tmp_dir / "params2.yaml", supported_params)
     stage = dvc.run(
         name="read_params",
         params=["params2.yaml:lists"],
@@ -286,9 +281,7 @@ def test_run_params_custom_file(tmp_dir, dvc):
 def test_run_params_no_exec(tmp_dir, dvc):
     from dvc.dependency import ParamsDependency
 
-    with (tmp_dir / "params2.yaml").open("w+") as f:
-        yaml.dump(supported_params, f)
-
+    dump_yaml(tmp_dir / "params2.yaml", supported_params)
     stage = dvc.run(
         name="read_params",
         params=["params2.yaml:lists"],
diff --git a/tests/unit/dependency/test_params.py b/tests/unit/dependency/test_params.py
--- a/tests/unit/dependency/test_params.py
+++ b/tests/unit/dependency/test_params.py
@@ -1,11 +1,9 @@
 import pytest
-import toml
-import yaml
 
 from dvc.dependency import ParamsDependency, loadd_from, loads_params
 from dvc.dependency.param import BadParamFileError, MissingParamsError
 from dvc.stage import Stage
-from dvc.utils.serialize import load_yaml
+from dvc.utils.serialize import dump_toml, dump_yaml, load_yaml
 
 PARAMS = {
     "foo": 1,
@@ -92,9 +90,8 @@ def test_read_params_unsupported_format(tmp_dir, dvc):
 
 
 def test_read_params_nested(tmp_dir, dvc):
-    tmp_dir.gen(
-        DEFAULT_PARAMS_FILE,
-        yaml.dump({"some": {"path": {"foo": ["val1", "val2"]}}}),
+    dump_yaml(
+        DEFAULT_PARAMS_FILE, {"some": {"path": {"foo": ["val1", "val2"]}}}
     )
     dep = ParamsDependency(Stage(dvc), None, ["some.path.foo"])
     assert dep.read_params() == {"some.path.foo": ["val1", "val2"]}
@@ -102,20 +99,14 @@ def test_read_params_nested(tmp_dir, dvc):
 
 def test_read_params_default_loader(tmp_dir, dvc):
     parameters_file = "parameters.foo"
-    tmp_dir.gen(
-        parameters_file,
-        yaml.dump({"some": {"path": {"foo": ["val1", "val2"]}}}),
-    )
+    dump_yaml(parameters_file, {"some": {"path": {"foo": ["val1", "val2"]}}})
     dep = ParamsDependency(Stage(dvc), parameters_file, ["some.path.foo"])
     assert dep.read_params() == {"some.path.foo": ["val1", "val2"]}
 
 
 def test_read_params_wrong_suffix(tmp_dir, dvc):
     parameters_file = "parameters.toml"
-    tmp_dir.gen(
-        parameters_file,
-        yaml.dump({"some": {"path": {"foo": ["val1", "val2"]}}}),
-    )
+    dump_yaml(parameters_file, {"some": {"path": {"foo": ["val1", "val2"]}}})
     dep = ParamsDependency(Stage(dvc), parameters_file, ["some.path.foo"])
     with pytest.raises(BadParamFileError):
         dep.read_params()
@@ -123,10 +114,7 @@ def test_read_params_wrong_suffix(tmp_dir, dvc):
 
 def test_read_params_toml(tmp_dir, dvc):
     parameters_file = "parameters.toml"
-    tmp_dir.gen(
-        parameters_file,
-        toml.dumps({"some": {"path": {"foo": ["val1", "val2"]}}}),
-    )
+    dump_toml(parameters_file, {"some": {"path": {"foo": ["val1", "val2"]}}})
     dep = ParamsDependency(Stage(dvc), parameters_file, ["some.path.foo"])
     assert dep.read_params() == {"some.path.foo": ["val1", "val2"]}
 
@@ -144,13 +132,10 @@ def test_save_info_missing_param(tmp_dir, dvc):
         dep.save_info()
 
 
-@pytest.mark.parametrize(
-    "param_value",
-    ["", "false", "[]", "{}", "null", "no", "off"]
-    # we use pyyaml to load params.yaml, which only supports YAML 1.1
-    # so, some of the above are boolean values
-)
+@pytest.mark.regression_4184
+@pytest.mark.parametrize("param_value", ["", "false", "[]", "{}", "null"])
 def test_params_with_false_values(tmp_dir, dvc, param_value):
+    """These falsy params values should not ignored by `status` on loading."""
     key = "param"
     dep = ParamsDependency(Stage(dvc), DEFAULT_PARAMS_FILE, [key])
     (tmp_dir / DEFAULT_PARAMS_FILE).write_text(f"{key}: {param_value}")
diff --git a/tests/unit/test_lockfile.py b/tests/unit/test_lockfile.py
--- a/tests/unit/test_lockfile.py
+++ b/tests/unit/test_lockfile.py
@@ -1,8 +1,8 @@
 import pytest
-import yaml
 
 from dvc.dvcfile import Lockfile, LockfileCorruptedError
 from dvc.stage import PipelineStage
+from dvc.utils.serialize import dump_yaml
 
 
 def test_stage_dump_no_outs_deps(tmp_dir, dvc):
@@ -14,8 +14,7 @@ def test_stage_dump_no_outs_deps(tmp_dir, dvc):
 
 def test_stage_dump_when_already_exists(tmp_dir, dvc):
     data = {"s1": {"cmd": "command", "deps": [], "outs": []}}
-    with open("path.lock", "w+") as f:
-        yaml.dump(data, f)
+    dump_yaml("path.lock", data)
     stage = PipelineStage(name="s2", repo=dvc, path="path", cmd="command2")
     lockfile = Lockfile(dvc, "path.lock")
     lockfile.dump(stage)
@@ -33,9 +32,7 @@ def test_stage_dump_with_deps_and_outs(tmp_dir, dvc):
             "outs": [{"md5": "2.txt", "path": "checksum"}],
         }
     }
-    with open("path.lock", "w+") as f:
-        yaml.dump(data, f)
-
+    dump_yaml("path.lock", data)
     lockfile = Lockfile(dvc, "path.lock")
     stage = PipelineStage(name="s2", repo=dvc, path="path", cmd="command2")
     lockfile.dump(stage)
@@ -77,8 +74,7 @@ def test_load_when_lockfile_does_not_exist(tmp_dir, dvc):
     ],
 )
 def test_load_when_lockfile_is_corrupted(tmp_dir, dvc, corrupt_data):
-    with open("Dvcfile.lock", "w+") as f:
-        yaml.dump(corrupt_data, f)
+    dump_yaml("Dvcfile.lock", corrupt_data)
     lockfile = Lockfile(dvc, "Dvcfile.lock")
     with pytest.raises(LockfileCorruptedError) as exc_info:
         lockfile.load()
