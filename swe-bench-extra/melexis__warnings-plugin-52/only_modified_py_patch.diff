diff --git a/src/mlx/warnings.py b/src/mlx/warnings.py
index 240e13b..7f23c10 100644
--- a/src/mlx/warnings.py
+++ b/src/mlx/warnings.py
@@ -1,9 +1,13 @@
 #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 
+from __future__ import print_function
+
 import argparse
+import os
 import pkg_resources
 import re
+import subprocess
 import sys
 import abc
 from junitparser import JUnitXml, Failure, Error
@@ -313,33 +317,76 @@ def warnings_wrapper(args):
     group.add_argument('-s', '--sphinx', dest='sphinx', action='store_true')
     group.add_argument('-j', '--junit', dest='junit', action='store_true')
     parser.add_argument('-v', '--verbose', dest='verbose', action='store_true')
+    parser.add_argument('--command', dest='command', action='store_true',
+                        help='Treat program arguments as command to execute to obtain data')
     parser.add_argument('-m', '--maxwarnings', type=int, required=False, default=0,
                         help='Maximum amount of warnings accepted')
     parser.add_argument('--minwarnings', type=int, required=False, default=0,
                         help='Minimum amount of warnings accepted')
     parser.add_argument('--version', action='version', version='%(prog)s {version}'.format(version=pkg_resources.require('mlx.warnings')[0].version))
 
-    parser.add_argument('logfile', nargs='+', help='Logfile that might contain warnings')
+    parser.add_argument('logfile', nargs='+', help='Logfile (or command) that might contain warnings')
+    parser.add_argument('flags', nargs=argparse.REMAINDER, help='Possible not-used flags from above are considered as command flags')
+
     args = parser.parse_args(args)
 
     warnings = WarningsPlugin(sphinx=args.sphinx, doxygen=args.doxygen, junit=args.junit, verbose=args.verbose)
     warnings.set_maximum(args.maxwarnings)
     warnings.set_minimum(args.minwarnings)
 
+    if args.command:
+        cmd = args.logfile
+        if args.flags:
+            cmd.extend(args.flags)
+        warnings_command(warnings, cmd)
+    else:
+        warnings_logfile(warnings, args.logfile)
+
+    warnings.return_count()
+    return warnings.return_check_limits()
+
+
+def warnings_command(warnings, cmd):
+    try:
+        print("Executing: ", end='')
+        print(cmd)
+        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
+                                stdin=subprocess.PIPE, bufsize=1, universal_newlines=True)
+        out, err = proc.communicate()
+        # Check stdout
+        if out:
+            try:
+                print(out.decode(encoding="utf-8"))
+                warnings.check(out.decode(encoding="utf-8"))
+            except AttributeError as e:
+                warnings.check(out)
+                print(out)
+        # Check stderr
+        if err:
+            try:
+                warnings.check(err.decode(encoding="utf-8"))
+                print(err.decode(encoding="utf-8"), file=sys.stderr)
+            except AttributeError as e:
+                warnings.check(err)
+                print(err, file=sys.stderr)
+    except OSError as e:
+        if e.errno == os.errno.ENOENT:
+            print("It seems like program " + str(cmd) + " is not installed.")
+        raise
+
+
+def warnings_logfile(warnings, log):
     # args.logfile doesn't necessarily contain wildcards, but just to be safe, we
     # assume it does, and try to expand them.
     # This mechanism is put in place to allow wildcards to be passed on even when
     # executing the script on windows (in that case there is no shell expansion of wildcards)
     # so that the script can be used in the exact same way even when moving from one
     # OS to another.
-    for file_wildcard in args.logfile:
+    for file_wildcard in log:
         for logfile in glob.glob(file_wildcard):
             with open(logfile, 'r') as loghandle:
                 warnings.check(loghandle.read())
 
-    warnings.return_count()
-    return warnings.return_check_limits()
-
 
 def main():
     sys.exit(warnings_wrapper(sys.argv[1:]))
