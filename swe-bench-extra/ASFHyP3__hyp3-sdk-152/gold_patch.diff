diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2c340f0..55972fc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -7,7 +7,14 @@ and this project adheres to [PEP 440](https://www.python.org/dev/peps/pep-0440/)
 and uses [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
 
+## [1.4.1](https://github.com/ASFHyP3/hyp3-sdk/compare/v1.4.1...v1.4.1)
+
+### Fixed
+- Slicing a `Batch` object will now return a new `Batch` instead of `list` of jobs
+- `Batch` equality now compares the contained jobs and not object identity
+
 ## [1.4.0](https://github.com/ASFHyP3/hyp3-sdk/compare/v1.3.2...v1.4.0)
+
 ### Added
 - Exposed new `include_displacement_maps` parameter for `HyP3.prepare_insar_job` and `HyP3.submit_insar_job`, which will
   cause both a line-of-sight displacement and a vertical displacement GeoTIFF to be included in the product.
diff --git a/hyp3_sdk/jobs.py b/hyp3_sdk/jobs.py
index fbe31e8..dbcfb4d 100644
--- a/hyp3_sdk/jobs.py
+++ b/hyp3_sdk/jobs.py
@@ -170,21 +170,22 @@ class Batch:
     def __contains__(self, job: Job):
         return job in self.jobs
 
-    def __delitem__(self, job: Job):
+    def __eq__(self, other: 'Batch'):
+        return self.jobs == other.jobs
+
+    def __delitem__(self, job: int):
         self.jobs.pop(job)
         return self
 
     def __getitem__(self, index: int):
+        if isinstance(index, slice):
+            return Batch(self.jobs[index])
         return self.jobs[index]
 
     def __setitem__(self, index: int, job: Job):
         self.jobs[index] = job
         return self
 
-    def __reverse__(self):
-        for job in self.jobs[::-1]:
-            yield job
-
     def __repr__(self):
         reprs = ", ".join([job.__repr__() for job in self.jobs])
         return f'Batch([{reprs}])'
diff --git a/hyp3_sdk/util.py b/hyp3_sdk/util.py
index 94ab7a7..cae1eac 100644
--- a/hyp3_sdk/util.py
+++ b/hyp3_sdk/util.py
@@ -109,8 +109,8 @@ def download_file(url: str, filepath: Union[Path, str], chunk_size=None, retries
 
     session.mount('https://', HTTPAdapter(max_retries=retry_strategy))
     session.mount('http://', HTTPAdapter(max_retries=retry_strategy))
-
-    with session.get(url, stream=True) as s:
+    stream = False if chunk_size is None else True
+    with session.get(url, stream=stream) as s:
         s.raise_for_status()
         tqdm = get_tqdm_progress_bar()
         with tqdm.wrapattr(open(filepath, "wb"), 'write', miniters=1, desc=filepath.name,
