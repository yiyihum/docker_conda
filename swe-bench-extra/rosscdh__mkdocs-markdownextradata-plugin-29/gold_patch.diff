diff --git a/README.md b/README.md
index a5913f4..1766c43 100644
--- a/README.md
+++ b/README.md
@@ -102,7 +102,19 @@ If inside your data folder you have a directory and a file file
 called `[path/to/datafiles/]sections/captions.yaml` - where `[path/to/datafiles/]` is the path in your configuration -
 the data inside that file will be available in your templates as `sections.captions.whatever_variable_in_the_yaml`.
 
+### Jinja2 Template Engine Configuration
 
+You may provide [Jinja2 configuration](https://jinja.palletsprojects.com/en/2.11.x/api/#high-level-api) as plugin options:
+
+```yml
+plugins:
+    - markdownextradata:
+        jinja_options:
+          comment_start_string: __CUSTOMCOMMENTSTART__
+```
+
+The above example will make it so that instead of `{#`, the template engine will interpret `__CUSTOMCOMMENTSTART__` as comment start delimiter. This is useful in cases where
+you write Markdown that contains Jinja-like syntax that's colliding with the template engine. Alternatively, it lets you control what the variable delimiter is (instead of the default `{{ }}`).
 
 ## Testing
 
diff --git a/markdownextradata/plugin.py b/markdownextradata/plugin.py
index 5ad5e2e..5433413 100644
--- a/markdownextradata/plugin.py
+++ b/markdownextradata/plugin.py
@@ -27,8 +27,11 @@ class MarkdownExtraDataPlugin(BasePlugin):
     Inject certain config variables into the markdown
     """
 
+    JINJA_OPTIONS = "jinja_options"
+
     config_scheme = (
         ("data", mkdocs.config.config_options.Type(str_type, default=None)),
+        (JINJA_OPTIONS, mkdocs.config.config_options.Type(dict, default={}))
     )
 
     def __add_data__(self, config, namespace, data):
@@ -91,6 +94,7 @@ class MarkdownExtraDataPlugin(BasePlugin):
     def on_page_markdown(self, markdown, config, **kwargs):
         context = {key: config.get(key) for key in CONFIG_KEYS if key in config}
         context.update(config.get("extra", {}))
-        env = jinja2.Environment(undefined=jinja2.DebugUndefined)
+        jinja_options = self.config[self.JINJA_OPTIONS]
+        env = jinja2.Environment(undefined=jinja2.DebugUndefined, **jinja_options)
         md_template = env.from_string(markdown)
         return md_template.render(**config.get("extra"))
