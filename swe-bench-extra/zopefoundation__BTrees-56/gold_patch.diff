diff --git a/BTrees/_base.py b/BTrees/_base.py
index 3158d91..bef710a 100644
--- a/BTrees/_base.py
+++ b/BTrees/_base.py
@@ -111,7 +111,7 @@ class _BucketBase(_Base):
         while low < high:
             i = (low + high) // 2
             k = keys[i]
-            if k == key:
+            if k is key or k == key:
                 return i
             if k < key:
                 low = i + 1
diff --git a/CHANGES.rst b/CHANGES.rst
index c396cf6..d40ebd9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,10 +6,18 @@
 
 - Make the CPython implementation consistent with the pure-Python
   implementation and only check object keys for default comparison
-  when setting keys. In Python 2 this makes it possible to remove
-  keys that were added using a less restrictive version of BTrees.
-  (In Python 3 keys that are unorderable still cannot be removed.)
-  See: https://github.com/zopefoundation/BTrees/issues/53
+  when setting keys. In Python 2 this makes it possible to remove keys
+  that were added using a less restrictive version of BTrees. (In
+  Python 3 keys that are unorderable still cannot be removed.)
+  Likewise, all versions can unpickle trees that already had such
+  keys. See: https://github.com/zopefoundation/BTrees/issues/53 and
+  https://github.com/zopefoundation/BTrees/issues/51
+
+- Make the Python implementation consistent with the CPython
+  implementation and check object key identity before checking
+  equality and performing comparisons. This can allow fixing trees
+  that have keys that now have broken comparison functions. See
+  https://github.com/zopefoundation/BTrees/issues/50
 
 - Make the CPython implementation consistent with the pure-Python
   implementation and no longer raise ``TypeError`` for an object key
