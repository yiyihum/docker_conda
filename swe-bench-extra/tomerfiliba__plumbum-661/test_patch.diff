diff --git a/tests/test_local.py b/tests/test_local.py
index 889624a..3b5eb51 100644
--- a/tests/test_local.py
+++ b/tests/test_local.py
@@ -607,7 +607,7 @@ class TestLocalMachine:
 
     @skip_on_windows
     def test_modifiers(self):
-        from plumbum.cmd import grep, ls
+        from plumbum.cmd import cat, grep, ls
 
         f = (ls["-a"] | grep["\\.py"]) & BG
         f.wait()
@@ -615,11 +615,17 @@ class TestLocalMachine:
 
         command = ls["-a"] | grep["local"]
         command_false = ls["-a"] | grep["not_a_file_here"]
+        command_false_2 = command_false | cat
         command & FG
         assert command & TF
         assert not (command_false & TF)
+        assert not (command_false_2 & TF)
         assert command & RETCODE == 0
         assert command_false & RETCODE == 1
+        assert command_false_2 & RETCODE == 1
+        assert (command & TEE)[0] == 0
+        assert (command_false & TEE(retcode=None))[0] == 1
+        assert (command_false_2 & TEE(retcode=None))[0] == 1
 
     @skip_on_windows
     def test_tee_modifier(self, capfd):
diff --git a/tests/test_pipelines.py b/tests/test_pipelines.py
new file mode 100644
index 0000000..8ea47e2
--- /dev/null
+++ b/tests/test_pipelines.py
@@ -0,0 +1,87 @@
+from typing import List, Tuple
+
+import pytest
+
+import plumbum
+from plumbum._testtools import skip_on_windows
+from plumbum.commands import BaseCommand
+
+
+@skip_on_windows
+@pytest.mark.timeout(3)
+def test_draining_stderr(generate_cmd, process_cmd):
+    stdout, stderr = get_output_with_iter_lines(
+        generate_cmd | process_cmd | process_cmd
+    )
+    expected_output = {f"generated {i}" for i in range(5000)}
+    expected_output.update(f"consumed {i}" for i in range(5000))
+    assert set(stderr) - expected_output == set()
+    assert len(stderr) == 15000
+    assert len(stdout) == 5000
+
+
+@skip_on_windows
+@pytest.mark.timeout(3)
+def test_draining_stderr_with_stderr_redirect(tmp_path, generate_cmd, process_cmd):
+    stdout, stderr = get_output_with_iter_lines(
+        generate_cmd | (process_cmd >= str(tmp_path / "output.txt")) | process_cmd
+    )
+    expected_output = {f"generated {i}" for i in range(5000)}
+    expected_output.update(f"consumed {i}" for i in range(5000))
+    assert set(stderr) - expected_output == set()
+    assert len(stderr) == 10000
+    assert len(stdout) == 5000
+
+
+@skip_on_windows
+@pytest.mark.timeout(3)
+def test_draining_stderr_with_stdout_redirect(tmp_path, generate_cmd, process_cmd):
+    stdout, stderr = get_output_with_iter_lines(
+        generate_cmd | process_cmd | process_cmd > str(tmp_path / "output.txt")
+    )
+    expected_output = {f"generated {i}" for i in range(5000)}
+    expected_output.update(f"consumed {i}" for i in range(5000))
+    assert set(stderr) - expected_output == set()
+    assert len(stderr) == 15000
+    assert len(stdout) == 0
+
+
+@pytest.fixture()
+def generate_cmd(tmp_path):
+    generate = tmp_path / "generate.py"
+    generate.write_text(
+        """\
+import sys
+for i in range(5000):
+    print("generated", i, file=sys.stderr)
+    print(i)
+"""
+    )
+    return plumbum.local["python"][generate]
+
+
+@pytest.fixture()
+def process_cmd(tmp_path):
+    process = tmp_path / "process.py"
+    process.write_text(
+        """\
+import sys
+for line in sys.stdin:
+    i = line.strip()
+    print("consumed", i, file=sys.stderr)
+    print(i)
+"""
+    )
+    return plumbum.local["python"][process]
+
+
+def get_output_with_iter_lines(cmd: BaseCommand) -> Tuple[List[str], List[str]]:
+    stderr, stdout = [], []
+    proc = cmd.popen()
+    for stdout_line, stderr_line in proc.iter_lines(retcode=[0, None]):
+        if stderr_line:
+            stderr.append(stderr_line)
+        if stdout_line:
+            stdout.append(stdout_line)
+    proc.wait()
+    return stdout, stderr
