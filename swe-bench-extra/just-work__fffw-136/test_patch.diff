diff --git a/tests/test_graph.py b/tests/test_graph.py
index c6edf1b..983a7e2 100644
--- a/tests/test_graph.py
+++ b/tests/test_graph.py
@@ -7,6 +7,7 @@ from fffw.encoding import inputs, outputs, codecs
 from fffw.encoding.complex import FilterComplex
 from fffw.encoding.filters import *
 from fffw.graph import *
+from fffw.graph import base
 from fffw.wrapper import param
 
 
@@ -35,6 +36,71 @@ class FdkAAC(codecs.AudioCodec):
         return replace(ensure_audio(*metadata), bitrate=self.bitrate)
 
 
+class SourceImpl(base.Source):
+
+    @property
+    def name(self) -> str:  # pragma: no cover
+        return ''
+
+
+class NodeImpl(base.Node):
+
+    @property
+    def args(self) -> str:  # pragma: no cover
+        return ''
+
+
+class DestImpl(base.Dest):
+    pass
+
+
+class GraphBaseTestCase(TestCase):
+    def setUp(self) -> None:
+        super().setUp()
+        self.source = SourceImpl(VIDEO)
+        self.node = NodeImpl()
+        self.another = NodeImpl()
+        self.dest = DestImpl()
+        self.source_edge = base.Edge(self.source, self.node)
+        self.inter_edge = base.Edge(self.node, self.another)
+        self.dest_edge = base.Edge(self.another, self.dest)
+
+    def test_node_connect_edge_validation(self):
+        """
+        Checks edge validation for Node.
+        """
+
+        with self.subTest("only edge allowed"):
+            with self.assertRaises(TypeError):
+                self.node.connect_edge(object())  # type: ignore
+
+        with self.subTest("edge output cross-link"):
+            with self.assertRaises(ValueError):
+                self.node.connect_edge(self.dest_edge)
+
+        with self.subTest("success"):
+            self.node.connect_edge(self.source_edge)
+
+    def test_dest_connect_edge_validation(self):
+        """
+        Checks edge validation for Dest.
+        """
+        with self.subTest("only edge allowed"):
+            with self.assertRaises(TypeError):
+                self.dest.connect_edge(object())  # type: ignore
+
+        with self.subTest("edge output cross-link"):
+            with self.assertRaises(ValueError):
+                self.dest.connect_edge(self.source_edge)
+
+        with self.subTest("success"):
+            self.dest.connect_edge(self.dest_edge)
+
+        with self.subTest("slot is busy"):
+            with self.assertRaises(RuntimeError):
+                self.dest.connect_edge(self.dest_edge)
+
+
 class FilterGraphBaseTestCase(TestCase):
 
     def setUp(self) -> None:
@@ -322,9 +388,9 @@ class FilterGraphTestCase(FilterGraphBaseTestCase):
         vs2 | c
         vs3 | c
         expected = (
-            deepcopy(vs1.meta.scenes) +
-            deepcopy(vs2.meta.scenes) +
-            deepcopy(vs3.meta.scenes)
+                deepcopy(vs1.meta.scenes) +
+                deepcopy(vs2.meta.scenes) +
+                deepcopy(vs3.meta.scenes)
         )
         assert len(expected) == 3
         current_duration = TS(0)
@@ -523,12 +589,41 @@ class CopyCodecTestCase(FilterGraphBaseTestCase):
         s1 = split
         s2 = split | Scale(1920, 1080)
 
-        s1 > codecs.Copy(kind=VIDEO)
+        copy = s1 > codecs.Copy(kind=VIDEO)
 
         # one output left
         self.assertListEqual(split.outputs, [s2.input])
         # split is disabled because of single output
         self.assertFalse(split.enabled)
+        # copy codec is connected to source
+        self.assertIs(copy.edge.input, self.source.video)
+
+    def test_split_disconnect_transient(self):
+        """
+        With multiple splits, copy codec is being disconnected from all of them.
+        """
+        video = self.source.video
+        inter = video | Split(VIDEO, output_count=1)
+        split = inter | Split(VIDEO, output_count=2)
+        s1 = split
+        s2 = split | Scale(1920, 1080)
+
+        copy = s1 > codecs.Copy(kind=VIDEO)
+
+        # one output left
+        self.assertListEqual(split.outputs, [s2.input])
+        # split is disabled because of single output
+        self.assertFalse(split.enabled)
+
+        # intermediate split is still connected to another split
+        self.assertIs(inter.output.output, split)
+        # copy codec is connected to source
+        self.assertIs(copy.edge.input, video)
+        # source is still connected to split
+        edges = video._outputs
+        expected = [copy.edge, inter.input]
+        self.assertEqual(len(edges), 2)
+        self.assertSetEqual(set(edges), set(expected))
 
     def test_split_disconnect_on_single_output(self):
         """
