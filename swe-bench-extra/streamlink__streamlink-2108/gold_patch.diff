diff --git a/docs/plugin_matrix.rst b/docs/plugin_matrix.rst
index 9cb83e2b..c34c9516 100644
--- a/docs/plugin_matrix.rst
+++ b/docs/plugin_matrix.rst
@@ -188,6 +188,7 @@ svtplay                 - svtplay.se         Yes   Yes   Streams may be geo-rest
                         - oppetarkiv.se
 swisstxt                - srf.ch             Yes   No    Streams are geo-restricted to Switzerland.
                         - rsi.ch
+tamago                  player.tamago.live   Yes   --
 teamliquid              teamliquid.net       Yes   Yes
 teleclubzoom            teleclubzoom.ch      Yes   No    Streams are geo-restricted to Switzerland.
 telefe                  telefe.com           No    Yes   Streams are geo-restricted to Argentina.
diff --git a/src/streamlink/plugins/tamago.py b/src/streamlink/plugins/tamago.py
new file mode 100644
index 00000000..0b6dc719
--- /dev/null
+++ b/src/streamlink/plugins/tamago.py
@@ -0,0 +1,52 @@
+import re
+
+from streamlink.plugin import Plugin
+from streamlink.plugin.api import validate
+from streamlink.stream import HTTPStream
+from streamlink import NoStreamsError
+
+
+class Tamago(Plugin):
+
+    _url_re = re.compile(r"https?://(?:player\.)?tamago\.live/w/(?P<id>\d+)")
+
+    _api_url_base = "https://player.tamago.live/api/rooms/{id}"
+
+    _api_response_schema = validate.Schema({
+        u"status": 200,
+        u"message": u"Success",
+        u"data": {
+            u"room_number": validate.text,
+            u"stream": {validate.text: validate.url()}
+        }
+    })
+
+    _stream_qualities = {
+        u"150": "144p",
+        u"350": "360p",
+        u"550": "540p",
+        u"900": "720p",
+    }
+
+    @classmethod
+    def can_handle_url(cls, url):
+        return cls._url_re.match(url) is not None
+
+    def _get_streams(self):
+        user_id = self._url_re.match(self.url).group('id')
+
+        try:
+            api_response = self.session.http.get(self._api_url_base.format(id=user_id))
+            streams = self.session.http.json(api_response, schema=self._api_response_schema)['data']['stream']
+        except Exception:
+            raise NoStreamsError(self.url)
+
+        unique_stream_urls = []
+        for stream in streams.keys():
+            if streams[stream] not in unique_stream_urls:
+                unique_stream_urls.append(streams[stream])
+                quality = self._stream_qualities[stream] if stream in self._stream_qualities.keys() else "720p+"
+                yield quality, HTTPStream(self.session, streams[stream])
+
+
+__plugin__ = Tamago
diff --git a/src/streamlink_cli/utils/progress.py b/src/streamlink_cli/utils/progress.py
index dc7a0687..46dca155 100644
--- a/src/streamlink_cli/utils/progress.py
+++ b/src/streamlink_cli/utils/progress.py
@@ -13,22 +13,51 @@ PROGRESS_FORMATS = (
     "[download] {written}"
 )
 
+# widths generated from
+# http://www.unicode.org/Public/4.0-Update/EastAsianWidth-4.0.0.txt
 
-def terminal_len(value):
-    """Returns the length of the string it would be when displayed.
 
-    Attempts to decode the string as UTF-8 first if it's a bytestring.
-    """
+widths = [
+    (13, 1),    (15, 0),    (126, 1),   (159, 0),   (687, 1),   (710, 0),
+    (711, 1),   (727, 0),   (733, 1),   (879, 0),   (1154, 1),  (1161, 0),
+    (4347, 1),  (4447, 2),  (7467, 1),  (7521, 0),  (8369, 1),  (8426, 0),
+    (9000, 1),  (9002, 2),  (11021, 1), (12350, 2), (12351, 1), (12438, 2),
+    (12442, 0), (19893, 2), (19967, 1), (55203, 2), (63743, 1), (64106, 2),
+    (65039, 1), (65059, 0), (65131, 2), (65279, 1), (65376, 2), (65500, 1),
+    (65510, 2), (120831, 1), (262141, 2), (1114109, 1)
+]
+
+
+def get_width(o):
+    """Returns the screen column width for unicode ordinal."""
+    for num, wid in widths:
+        if o <= num:
+            return wid
+    return 1
+
+
+def terminal_width(value):
+    """Returns the width of the string it would be when displayed."""
     if isinstance(value, bytes):
         value = value.decode("utf8", "ignore")
+    return sum(map(get_width, map(ord, value)))
+
 
-    return len(value)
+def get_cut_prefix(value, max_len):
+    """Drops Characters by unicode not by bytes."""
+    should_convert = isinstance(value, bytes)
+    if should_convert:
+        value = value.decode("utf8", "ignore")
+    for i in range(len(value)):
+        if terminal_width(value[i:]) <= max_len:
+            break
+    return value[i:].encode("utf8", "ignore") if should_convert else value[i:]
 
 
 def print_inplace(msg):
     """Clears out the previous line and prints a new one."""
     term_width = get_terminal_size().columns
-    spacing = term_width - terminal_len(msg)
+    spacing = term_width - terminal_width(msg)
 
     # On windows we need one less space or we overflow the line for some reason.
     if is_win32:
@@ -89,7 +118,8 @@ def progress(iterator, prefix):
      - Time elapsed
      - Average speed, based on the last few seconds.
     """
-    prefix = (".." + prefix[-23:]) if len(prefix) > 25 else prefix
+    if terminal_width(prefix) > 25:
+        prefix = (".." + get_cut_prefix(prefix, 23))
     speed_updated = start = time()
     speed_written = written = 0
     speed_history = deque(maxlen=5)
