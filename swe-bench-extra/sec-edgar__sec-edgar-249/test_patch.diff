diff --git a/secedgar/tests/core/test_combo.py b/secedgar/tests/core/test_combo.py
index 55ea6a2..bab68c7 100644
--- a/secedgar/tests/core/test_combo.py
+++ b/secedgar/tests/core/test_combo.py
@@ -1,8 +1,9 @@
 from datetime import date
 
 import pytest
+
 from secedgar.client import NetworkClient
-from secedgar.core.combo import ComboFilings
+from secedgar.core.combo import ComboFilings, fill_days
 
 
 def lambda_matches(a, b):
@@ -18,6 +19,22 @@ def quarterly_list_matches(l1, l2):
 
 
 class TestComboFilings:
+    @pytest.mark.parametrize(
+        "include_start,include_end,expected",
+        [
+            (True, True, [date(2020, 1, i) for i in (1, 2, 3)]),
+            (True, False, [date(2020, 1, i) for i in (1, 2)]),
+            (False, False, [date(2020, 1, 2)]),
+            (False, True, [date(2020, 1, i) for i in (2, 3)]),
+        ]
+    )
+    def test_fill_days(self, include_start, include_end, expected):
+        result = fill_days(start=date(2020, 1, 1),
+                           end=date(2020, 1, 3),
+                           include_start=include_start,
+                           include_end=include_end)
+        assert result == expected
+
     def test_user_agent_client_none(self):
         with pytest.raises(TypeError):
             _ = ComboFilings(start_date=date(2020, 1, 1),
@@ -30,8 +47,7 @@ class TestComboFilings:
         combo = ComboFilings(start_date=date(2020, 1, 1),
                              end_date=date(2020, 12, 31),
                              client=client)
-        assert combo.quarterly.client == client
-        assert combo.daily.client == client
+        assert combo.client == client
 
     def test_combo_quarterly_only_one_year(self, mock_user_agent):
         combo = ComboFilings(start_date=date(2020, 1, 1),
@@ -102,9 +118,60 @@ class TestComboFilings:
         assert [str(s) for s in combo.daily_date_list] == daily_expected
         assert quarterly_list_matches(combo.quarterly_date_list, quarterly_expected)
 
-    def test_user_agent_passed_to_client(self, mock_user_agent):
+    def test_properties_on_init(self, mock_user_agent):
+        start = date(2020, 1, 1)
+        end = date(2020, 5, 30)
+        bp = 25
+        combo = ComboFilings(start_date=start,
+                             end_date=end,
+                             user_agent=mock_user_agent,
+                             balancing_point=bp)
+
+        assert combo.start_date == start
+        assert combo.end_date == end
+        assert combo.balancing_point == bp
+        assert combo.client.user_agent == mock_user_agent
+
+    @pytest.mark.parametrize(
+        "bad_entry_filter",
+        [
+            None,
+            [],
+            (),
+            0,
+            ""]
+    )
+    def test_bad_entry_filter(self, bad_entry_filter):
+        with pytest.raises(ValueError):
+            _ = ComboFilings(start_date=date(2020, 1, 1),
+                             end_date=date(2020, 5, 30),
+                             entry_filter=bad_entry_filter)
+
+    @pytest.mark.parametrize(
+        "good_entry_filter",
+        [
+            lambda x: True,
+            lambda x: False,
+            lambda f: f.form_type.lower() == "10-k"
+        ]
+    )
+    def test_good_entry_filter(self, good_entry_filter, mock_user_agent):
+        combo = ComboFilings(date(2020, 1, 1),
+                             date(2020, 5, 30),
+                             entry_filter=good_entry_filter,
+                             user_agent=mock_user_agent)
+        assert combo.entry_filter == good_entry_filter
+
+    def test_client_read_only(self, mock_user_agent):
+        combo = ComboFilings(start_date=date(2020, 1, 1),
+                             end_date=date(2020, 1, 3),
+                             user_agent=mock_user_agent)
+        with pytest.raises(AttributeError):
+            combo.client = None
+
+    def test_balancing_point_read_only(self, mock_user_agent):
         combo = ComboFilings(start_date=date(2020, 1, 1),
-                             end_date=date(2021, 1, 1),
+                             end_date=date(2020, 1, 3),
                              user_agent=mock_user_agent)
-        assert combo.quarterly.client.user_agent == mock_user_agent
-        assert combo.daily.client.user_agent == mock_user_agent
+        with pytest.raises(AttributeError):
+            combo.balancing_point = 20
