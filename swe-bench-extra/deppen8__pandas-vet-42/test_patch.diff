diff --git a/tests/test_PD005.py b/tests/test_PD005.py
new file mode 100644
index 0000000..9c68e0e
--- /dev/null
+++ b/tests/test_PD005.py
@@ -0,0 +1,51 @@
+"""
+Test to check for use of explicit arithmetic methods.
+
+Recommend use of binary arithmetic operators instead.
+"""
+import ast
+
+from pandas_vet import VetPlugin
+from pandas_vet import PD005
+
+
+def test_PD005_pass_arithmetic_operator():
+    """
+    Test that using binary arithmetic operator explicitly does not result in an error.
+    """
+    arithmetic_operators = [
+        '+',
+        '-',
+        '*',
+        '/',
+        '**',
+        '//',
+        '%',
+        ]
+    for op in arithmetic_operators:
+        statement = 'C = A {0} B'.format(op)
+        tree = ast.parse(statement)
+        actual = list(VetPlugin(tree).run())
+        expected = []
+        assert actual == expected
+
+
+def test_PD005_fail_arithmetic_method():
+    """
+    Test that using arithmetic method results in an error.
+    """
+    arithmetic_methods = [
+        'add',
+        'sub', 'subtract',
+        'mul', 'multiply',
+        'div', 'divide', 'truediv',
+        'pow',
+        'floordiv',
+        'mod',
+        ]
+    for op in arithmetic_methods:
+        statement = 'C = A.{0}(B)'.format(op)
+        tree = ast.parse(statement)
+        actual = list(VetPlugin(tree).run())
+        expected = [PD005(1, 4)]
+        assert actual == expected
diff --git a/tests/test_PD006.py b/tests/test_PD006.py
new file mode 100644
index 0000000..cb30365
--- /dev/null
+++ b/tests/test_PD006.py
@@ -0,0 +1,35 @@
+"""
+Test to check for use of explicit comparison methods.
+
+Recommend use of binary comparison operators instead.
+"""
+import ast
+
+from pandas_vet import VetPlugin
+from pandas_vet import PD006
+
+
+def test_PD006_pass_comparison_operator():
+    """
+    Test that using binary comparison operator explicitly does not result in an error.
+    """
+    comparison_operators = ['>',  '<',  '>=', '<=', '==', '!=']
+    for op in comparison_operators:
+        statement = 'C = A {0} B'.format(op)
+        tree = ast.parse(statement)
+        actual = list(VetPlugin(tree).run())
+        expected = []
+        assert actual == expected
+
+
+def test_PD006_fail_comparison_method():
+    """
+    Test that using comparison method results in an error.
+    """
+    comparison_methods = ['gt', 'lt', 'ge', 'le', 'eq', 'ne']
+    for op in comparison_methods:
+        statement = 'C = A.{0}(B)'.format(op)
+        tree = ast.parse(statement)
+        actual = list(VetPlugin(tree).run())
+        expected = [PD006(1, 4)]
+        assert actual == expected
