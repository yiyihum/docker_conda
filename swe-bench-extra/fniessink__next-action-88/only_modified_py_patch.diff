diff --git a/docs/update_readme.py b/docs/update_readme.py
index 86a3553..3c77201 100644
--- a/docs/update_readme.py
+++ b/docs/update_readme.py
@@ -21,7 +21,7 @@ def create_toc(lines, toc_header, min_level=2, max_level=3):
         level = line.count("#", 0, 6)
         if level < min_level or level > max_level or line.startswith(toc_header):
             continue
-        indent = (level - 1) * 2
+        indent = (level - min_level) * 2
         title = line.split(" ", 1)[1].rstrip()
         slug = title.lower().replace(" ", "-").replace("*", "").replace(".", "")
         result.append("{0}- [{1}](#{2})".format(" " * indent, title, slug))
@@ -68,17 +68,16 @@ class StateMachine(object):
     def print_toc(self, line):
         """ Print the table of contents. """
         print(self.toc)
-        if line.startswith("  "):
+        if "- [" in line:
             return self.in_old_toc
         print(line)
         return self.default
 
     def in_old_toc(self, line):
         """ Skip the old table of contents. """
-        if line.startswith("  "):
+        if "- [" in line:
             return self.in_old_toc
-        if line:
-            print(line)
+        print(line)
         return self.default
 
 
diff --git a/next_action/arguments/parser.py b/next_action/arguments/parser.py
index fec3e3a..52dc719 100644
--- a/next_action/arguments/parser.py
+++ b/next_action/arguments/parser.py
@@ -22,7 +22,7 @@ class NextActionArgumentParser(argparse.ArgumentParser):
                         "todo.txt file based on task properties such as priority, due date, and creation date. Limit "
                         "the tasks from which the next action is selected by specifying contexts the tasks must have "
                         "and/or projects the tasks must belong to.",
-            usage=textwrap.fill("next-action [-h] [--version] [-c <config.cfg> | -C] [-f <todo.txt>] "
+            usage=textwrap.fill("next-action [-h] [--version] [-c [<config.cfg>]] [-f <todo.txt>] "
                                 "[-n <number> | -a] [-o] [-p [<priority>]] [<context|project> ...]",
                                 width=shutil.get_terminal_size().columns - len("usage: ")))
         self.__default_filenames = ["~/todo.txt"]
@@ -37,10 +37,9 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         config_file.add_argument(
             "--write-config-file", help="generate a sample configuration file and exit", action="store_true")
         config_file.add_argument(
-            "-c", "--config-file", metavar="<config.cfg>", type=str, default="~/.next-action.cfg",
-            help="filename of configuration file to read (default: %(default)s)")
-        config_file.add_argument(
-            "-C", "--no-config-file", help="don't read the configuration file", action="store_true")
+            "-c", "--config-file", metavar="<config.cfg>", type=str, default="~/.next-action.cfg", nargs="?",
+            help="filename of configuration file to read (default: %(default)s); omit filename to not read any "
+                 "configuration file")
         self.add_argument(
             "-f", "--file", action="append", metavar="<todo.txt>", default=self.__default_filenames[:], type=str,
             help="filename of todo.txt file to read; can be '-' to read from standard input; argument can be "
@@ -86,7 +85,7 @@ class NextActionArgumentParser(argparse.ArgumentParser):
         """ Parse the command-line arguments. """
         namespace, remaining = self.parse_known_args(args, namespace)
         self.parse_remaining_args(remaining, namespace)
-        if not namespace.no_config_file:
+        if getattr(namespace, "config_file", self.get_default("config_file")) is not None:
             self.process_config_file(namespace)
         if namespace.write_config_file:
             write_config_file()

