diff --git a/test/paginated_list_test.py b/test/paginated_list_test.py
index 0a411de..77643a5 100644
--- a/test/paginated_list_test.py
+++ b/test/paginated_list_test.py
@@ -1,4 +1,5 @@
 from unittest import TestCase
+from unittest.mock import MagicMock, call
 
 from linode_api4.paginated_list import PaginatedList
 
@@ -76,3 +77,52 @@ class PaginationSlicingTest(TestCase):
         Tests that backwards indexing works as expected
         """
         self.assertEqual(self.normal_list[10:5], self.paginated_list[10:5])
+
+
+class TestModel():
+    """
+    This is a test model class used to simulate an actual model that would be
+    returned by the API
+    """
+    @classmethod
+    def make_instance(*args, **kwargs):
+        return TestModel()
+
+
+class PageLoadingTest(TestCase):
+    def test_page_size_in_request(self):
+        """
+        Tests that the correct page_size is added to requests when loading subsequent pages
+        """
+
+        for i in (25, 100, 500):
+            # these are the pages we're sending in to the mocked list
+            first_page = [ TestModel()  for x in range(i) ]
+            second_page = {
+                "data": [{"id": 1}],
+                "pages": 2,
+                "page": 2,
+                "results": i + 1,
+            }
+
+            # our mock client to intercept the requests and return the mocked info
+            client = MagicMock()
+            client.get = MagicMock(return_value=second_page)
+
+            # let's do it!
+            p = PaginatedList(client, "/test", page=first_page, max_pages=2, total_items=i+1)
+            p[i] # load second page
+
+            # and we called the next page URL with the correct page_size
+            assert client.get.call_args == call("//test?page=2&page_size={}".format(i), filters=None)
+
+    def test_no_pages(self):
+        """
+        Tests that this library correctly handles paginated lists with no data, such
+        as if a paginated endpoint is given a filter that matches nothing.
+        """
+        client = MagicMock()
+
+        p = PaginatedList(client, "/test", page=[], max_pages=0, total_items=0)
+
+        assert(len(p) == 0)
