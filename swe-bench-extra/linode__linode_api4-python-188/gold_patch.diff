diff --git a/.travis.yml b/.travis.yml
index 9c5621d..ebfe9eb 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,6 +3,7 @@ python:
     - "3.6"
     - "3.7"
     - "3.8"
+    - "3.9"
 dist: xenial
 install:
     - python setup.py install
diff --git a/linode_api4/linode_client.py b/linode_api4/linode_client.py
index b776ffd..eae0a99 100644
--- a/linode_api4/linode_client.py
+++ b/linode_api4/linode_client.py
@@ -218,6 +218,10 @@ class LinodeGroup(Group):
                        default to True if the Instance is deployed from an Image
                        or Backup.
         :type booted: bool
+        :param tags: A list of tags to apply to the new instance.  If any of the
+                     tags included do not exist, they will be created as part of
+                     this operation.
+        :type tags: list[str]
 
         :returns: A new Instance object, or a tuple containing the new Instance and
                   the generated password.
@@ -1015,7 +1019,7 @@ class ObjectStorageGroup(Group):
 
 
 class LinodeClient:
-    def __init__(self, token, base_url="https://api.linode.com/v4", user_agent=None):
+    def __init__(self, token, base_url="https://api.linode.com/v4", user_agent=None, page_size=None):
         """
         The main interface to the Linode API.
 
@@ -1031,11 +1035,17 @@ class LinodeClient:
                            application.  Setting this is not necessary, but some
                            applications may desire this behavior.
         :type user_agent: str
+        :param page_size: The default size to request pages at.  If not given,
+                                  the API's default page size is used.  Valid values
+                                  can be found in the API docs, but at time of writing
+                                  are between 25 and 500.
+        :type page_size: int
         """
         self.base_url = base_url
         self._add_user_agent = user_agent
         self.token = token
         self.session = requests.Session()
+        self.page_size = page_size
 
         #: Access methods related to Linodes - see :any:`LinodeGroup` for
         #: more information
@@ -1163,7 +1173,12 @@ class LinodeClient:
         return j
 
     def _get_objects(self, endpoint, cls, model=None, parent_id=None, filters=None):
-        response_json = self.get(endpoint, model=model, filters=filters)
+        # handle non-default page sizes
+        call_endpoint = endpoint
+        if self.page_size is not None:
+            call_endpoint += "?page_size={}".format(self.page_size)
+
+        response_json = self.get(call_endpoint, model=model, filters=filters)
 
         if not "data" in response_json:
             raise UnexpectedResponseError("Problem with response!", json=response_json)
@@ -1306,6 +1321,10 @@ class LinodeClient:
         :type domain: str
         :param master: Whether this is a master (defaults to true)
         :type master: bool
+        :param tags: A list of tags to apply to the new domain.  If any of the
+                     tags included do not exist, they will be created as part of
+                     this operation.
+        :type tags: list[str]
 
         :returns: The new Domain object.
         :rtype: Domain
@@ -1439,6 +1458,10 @@ class LinodeClient:
         :type linode: Instance or int
         :param size: The size, in GB, of the new Volume.  Defaults to 20.
         :type size: int
+        :param tags: A list of tags to apply to the new volume.  If any of the
+                     tags included do not exist, they will be created as part of
+                     this operation.
+        :type tags: list[str]
 
         :returns: The new Volume.
         :rtype: Volume
diff --git a/linode_api4/paginated_list.py b/linode_api4/paginated_list.py
index 8d09d03..c6b51b6 100644
--- a/linode_api4/paginated_list.py
+++ b/linode_api4/paginated_list.py
@@ -37,7 +37,8 @@ class PaginatedList(object):
         self.page_size = len(page)
         self.max_pages = max_pages
         self.lists = [ None for _ in range(0, self.max_pages) ]
-        self.lists[0] = page
+        if self.lists:
+            self.lists[0] = page
         self.list_cls = type(page[0]) if page else None # TODO if this is None that's bad
         self.objects_parent_id = parent_id
         self.cur = 0 # for being a generator
@@ -84,7 +85,7 @@ class PaginatedList(object):
         return "PaginatedList ({} items)".format(self.total_items)
 
     def _load_page(self, page_number):
-        j = self.client.get("/{}?page={}".format(self.page_endpoint, page_number+1),
+        j = self.client.get("/{}?page={}&page_size={}".format(self.page_endpoint, page_number+1, self.page_size),
                 filters=self.query_filters)
 
         if j['pages'] != self.max_pages or j['results'] != len(self):
diff --git a/setup.py b/setup.py
index 0d25334..b8739d9 100755
--- a/setup.py
+++ b/setup.py
@@ -31,7 +31,7 @@ setup(
     # Versions should comply with PEP440.  For a discussion on single-sourcing
     # the version across setup.py and the project code, see
     # https://packaging.python.org/en/latest/single_source_version.html
-    version='3.0.2',
+    version='3.0.4',
 
     description='The official python SDK for Linode API v4',
     long_description=long_description,
