diff --git a/planet/clients/data.py b/planet/clients/data.py
index a7b96ec..0dbe7e3 100644
--- a/planet/clients/data.py
+++ b/planet/clients/data.py
@@ -40,6 +40,12 @@ class Items(Paged):
     ITEMS_KEY = 'features'
 
 
+class Searches(Paged):
+    """Asynchronous iterator over searches from a paged response."""
+    NEXT_KEY = '_next'
+    ITEMS_KEY = 'searches'
+
+
 class DataClient:
     """Low-level asynchronous access to Planet's data API.
 
@@ -212,12 +218,25 @@ class DataClient:
         Returns:
             Description of the saved search.
         """
-        raise NotImplementedError
+        url = f'{self._searches_url()}/{search_id}'
+
+        request_json = {
+            'name': name,
+            'filter': search_filter,
+            'item_types': item_types,
+            '__daily_email_enabled': enable_email
+        }
+
+        request = self._request(url, method='PUT', json=request_json)
+        response = await self._do_request(request)
+        return response.json()
 
     async def list_searches(
             self,
             sort: str = 'created desc',
-            search_type: str = 'any') -> typing.AsyncIterator[dict]:
+            search_type: str = 'any',
+            limit: typing.Union[int,
+                                None] = 100) -> typing.AsyncIterator[dict]:
         """List all saved searches available to the authenticated user.
 
         NOTE: the term 'saved' is overloaded here. We want to list saved
@@ -228,18 +247,29 @@ class DataClient:
         Parameters:
             sort: Field and direction to order results by.
             search_type: Search type filter.
+            limit: Maximum number of items to return.
 
         Returns:
-            List of saved searches that match filter.
+            An iterator over all searches that match filter.
 
         Raises:
             planet.exceptions.APIError: On API error.
             planet.exceptions.ClientError: If sort or search_type are not
                 valid.
         """
-        # NOTE: check sort and search_type args are in LIST_SORT_ORDER and
-        # LIST_SEARCH_TYPE, respectively
-        raise NotImplementedError
+        sort = sort.lower()
+        if sort not in LIST_SORT_ORDER:
+            raise exceptions.ClientError(
+                f'{sort} must be one of {LIST_SORT_ORDER}')
+
+        search_type = search_type.lower()
+        if search_type not in LIST_SEARCH_TYPE:
+            raise exceptions.ClientError(
+                f'{search_type} must be one of {LIST_SEARCH_TYPE}')
+
+        url = f'{self._searches_url()}'
+        request = self._request(url, method='GET')
+        return Searches(request, self._do_request, limit=limit)
 
     async def delete_search(self, search_id: str):
         """Delete an existing saved search.
@@ -247,13 +277,13 @@ class DataClient:
         Parameters:
             search_id: Saved search identifier.
 
-        Returns:
-            Nothing.
-
         Raises:
             planet.exceptions.APIError: On API error.
         """
-        raise NotImplementedError
+        url = f'{self._searches_url()}/{search_id}'
+
+        request = self._request(url, method='DELETE')
+        await self._do_request(request)
 
     async def get_search(self, search_id: str) -> dict:
         """Get a saved search by id.
@@ -269,11 +299,16 @@ class DataClient:
         """
         raise NotImplementedError
 
-    async def run_search(self, search_id: str) -> typing.AsyncIterator[dict]:
+    async def run_search(
+            self,
+            search_id: str,
+            limit: typing.Union[int,
+                                None] = 100) -> typing.AsyncIterator[dict]:
         """Execute a saved search.
 
         Parameters:
             search_id: Stored search identifier.
+            limit: Maximum number of items to return.
 
         Returns:
             Returns an iterator over all items matching the search.
@@ -281,7 +316,10 @@ class DataClient:
         Raises:
             planet.exceptions.APIError: On API error.
         """
-        raise NotImplementedError
+        url = f'{self._searches_url()}/{search_id}/results'
+
+        request = self._request(url, method='GET')
+        return Items(request, self._do_request, limit=limit)
 
     async def get_stats(self,
                         item_types: typing.List[str],
@@ -301,6 +339,7 @@ class DataClient:
             planet.exceptions.APIError: On API error.
             planet.exceptions.ClientError: If interval is not valid.
         """
+        interval = interval.lower()
         if interval not in STATS_INTERVAL:
             raise exceptions.ClientError(
                 f'{interval} must be one of {STATS_INTERVAL}')

