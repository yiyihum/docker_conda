diff --git a/tests/data/basic-tree.yaml b/tests/data/basic-tree.yaml
index 6e0e83a..61f3734 100644
--- a/tests/data/basic-tree.yaml
+++ b/tests/data/basic-tree.yaml
@@ -13,16 +13,16 @@ actor2:
 # generic test
 test1:
     type: test
-    test:
-        - testcase0
+    tests:
+        - testcase1 (generic)
     logs:
-        files: [file1]
+        files: [file01-generic]
 
 # generic test
 test2:
     type: test
     logs:
-        files: [file2]
+        files: [file02-generic]
 
 # all actors but not generic
 test3:
@@ -30,22 +30,38 @@ test3:
     filter:
         actor: [__any__]
     tests:
-        - testcase1
+        - testcase3 (all actors)
 
 test4:
     type: test
     filter:
         actor: [one]
     tests:
-        - testcase2
+        - testcase4 (actor one only)
     logs:
-        files: [file3]
+        files: [file04-actor-one]
 
 test5:
     type: test
     filter:
         actor: [two]
     tests:
-        - testcase3
+        - testcase5 (actor two only)
+        - testcase5.1 (actor two only)
+        - testcase5.2 (actor two only)
     logs:
-        files: [file4]
+        files: [file05-actor-two]
+
+test6:
+    type: test
+    filter:
+        actor: ["!two"]
+    tests:
+        - testcase6 (actor one only)
+
+test7:
+    type: test
+    filter:
+        actor: ["!one", "two"]
+    tests:
+        - testcase7 (actor two only)
diff --git a/tests/test_uji.py b/tests/test_uji.py
index d5381ad..c49040a 100644
--- a/tests/test_uji.py
+++ b/tests/test_uji.py
@@ -1,5 +1,7 @@
 #!/usr/bin/env python3
 
+from typing import Optional
+
 from click.testing import CliRunner
 import pytest
 import os
@@ -16,6 +18,22 @@ def datadir():
     return Path(os.path.realpath(__file__)).parent / 'data'
 
 
+def find_in_section(markdown: str, section: str, string: str) -> Optional[str]:
+    prev_line = None
+    in_section = False
+    for line in markdown.split('\n'):
+        if prev_line is not None and prev_line == section and line == '-' * len(section):
+            in_section = True
+        elif in_section and line == '':
+            in_section = False
+        elif in_section:
+            if string in line:
+                return line
+        prev_line = line
+
+    return None
+
+
 def test_uji_example(datadir):
     args = ['new', os.fspath(Path(datadir) / 'example.yaml')]
     runner = CliRunner()
@@ -49,12 +67,39 @@ def test_uji_tree(datadir):
         assert 'actor2\n------\n' in markdown
         assert 'Generic\n-------\n' in markdown
 
-        # FIXME: check for the tests to be distributed across the actors
+        # check for the tests to be distributed across the actors
         # correctly
+        assert find_in_section(markdown, 'Generic', 'testcase1')
+        assert find_in_section(markdown, 'Generic', 'file01')
+        assert find_in_section(markdown, 'Generic', 'file02')
+
+        assert find_in_section(markdown, 'actor1', 'testcase3')
+        assert find_in_section(markdown, 'actor2', 'testcase3')
+
+        assert find_in_section(markdown, 'actor1', 'testcase4')
+        assert find_in_section(markdown, 'actor1', 'file04')
+        assert not find_in_section(markdown, 'actor2', 'testcase4')
+        assert not find_in_section(markdown, 'actor2', 'file04')
+
+        assert not find_in_section(markdown, 'actor1', 'testcase5')
+        assert not find_in_section(markdown, 'actor1', 'testcase5.1')
+        assert not find_in_section(markdown, 'actor1', 'testcase5.2')
+        assert not find_in_section(markdown, 'actor1', 'file05')
+
+        assert find_in_section(markdown, 'actor2', 'testcase5')
+        assert find_in_section(markdown, 'actor2', 'testcase5.1')
+        assert find_in_section(markdown, 'actor2', 'testcase5.2')
+        assert find_in_section(markdown, 'actor2', 'file05')
+
+        assert find_in_section(markdown, 'actor1', 'testcase6'), markdown
+        assert not find_in_section(markdown, 'actor2', 'testcase6'), markdown
+
+        assert not find_in_section(markdown, 'actor1', 'testcase7'), markdown
+        assert find_in_section(markdown, 'actor2', 'testcase7'), markdown
 
         # Check for the 'emtpy' files to be created
-        assert (Path('testdir') / 'generic' / 'test1' / 'file1').exists()
-        assert (Path('testdir') / 'generic' / 'test2' / 'file2').exists()
-        assert (Path('testdir') / 'actor1' / 'test4' / 'file3').exists()
-        assert (Path('testdir') / 'actor2' / 'test5' / 'file4').exists()
+        assert (Path('testdir') / 'generic' / 'test1' / 'file01-generic').exists()
+        assert (Path('testdir') / 'generic' / 'test2' / 'file02-generic').exists()
+        assert (Path('testdir') / 'actor1' / 'test4' / 'file04-actor-one').exists()
+        assert (Path('testdir') / 'actor2' / 'test5' / 'file05-actor-two').exists()
 
