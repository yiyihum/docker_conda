diff --git a/examples/example.yaml b/examples/example.yaml
index 666bcf1..9b144d6 100644
--- a/examples/example.yaml
+++ b/examples/example.yaml
@@ -36,7 +36,7 @@
 #    description: a longer description for human consumption
 #    tags: a dictionary of key: value that can be used to filter on
 #          value must not be a list/dict
-#  
+#
 # The test type is a description of a test that may produce log files.
 # Allowed subkeys:
 #    extends: inherit all from the referenced section
@@ -47,6 +47,8 @@
 #            The value must be a list, even if it's just one entry
 #            Where the filter tag is missing, this test is assumed
 #            to be run only once.
+#            If a value starts with ! it's a negative match, i.e.
+#            the tag must NOT be present in the actor.
 #    tests: a list of instruction strings describing the tests to be
 #           performed.
 #    files: a list of files to collect
@@ -80,7 +82,7 @@ file:
 #
 # Since we support 'include:' statements, you could have files with all the
 # hw you have defined in mice.yaml, keyboards.yaml, etc.
-  
+
 t450_keyboard:
   type: actor
   name: Lenovo T450s - AT Translated Keyboard
@@ -178,6 +180,15 @@ test_usb_hid:
   tests:
     - verify hid report descriptor parses with `hid-parse`
 
+# A test to run only on non-USB keyboards
+test_nonusb:
+  type: test
+  filter:
+    device: [keyboard]
+    bus: ["!USB"]  # Note: YAML requires quotes
+  tests:
+    - "bus type for this keyboard is XXX"
+
 # This is a test without a filter, so it will show up in the "Generic"
 # section but not for any specific actor. Good for things you need to
 # collect only once.
diff --git a/uji.py b/uji.py
index e5d0b6f..59bf2e4 100755
--- a/uji.py
+++ b/uji.py
@@ -736,8 +736,19 @@ class UjiNew(object):
                 for key, values in test.filters.items():
                     if key not in actor.tags:
                         break
-                    if ('__any__' not in values and
-                            actor.tags[key] not in values):
+
+                    tag = actor.tags[key]
+
+                    excluded = [v[1:] for v in values if v[0] == '!']
+                    if tag in excluded:
+                        break
+
+                    required = [v for v in values if v[0] != '!']
+                    if not required and excluded:
+                        required = ['__any__']
+
+                    if ('__any__' not in required and
+                        actor.tags[key] not in required):
                         break
                 else:
                     dup = deepcopy(test)
