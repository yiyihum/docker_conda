diff --git a/tests/test_graph.py b/tests/test_graph.py
index c7db0fd..bed22b0 100644
--- a/tests/test_graph.py
+++ b/tests/test_graph.py
@@ -1,3 +1,4 @@
+from copy import deepcopy
 from dataclasses import dataclass, replace
 from typing import cast
 from unittest import TestCase
@@ -302,6 +303,33 @@ class FilterGraphTestCase(TestCase):
         self.assertEqual(round(am.duration * audio_meta.sampling_rate),
                          am.samples)
 
+    def test_concat_scenes(self):
+        """
+        Concat shifts scenes start/end timestamps.
+        """
+        video_meta = video_meta_data(duration=1000.0,
+                                     frame_count=10000,
+                                     frame_rate=10.0)
+        vs1 = inputs.Stream(VIDEO, meta=video_meta)
+        vs2 = inputs.Stream(VIDEO, meta=video_meta)
+        vs3 = inputs.Stream(VIDEO, meta=video_meta)
+
+        c = Concat(VIDEO, input_count=3)
+        vs1 | c
+        vs2 | c
+        vs3 | c
+        expected = (
+            deepcopy(vs1.meta.scenes) +
+            deepcopy(vs2.meta.scenes) +
+            deepcopy(vs3.meta.scenes)
+        )
+        assert len(expected) == 3
+        current_duration = TS(0)
+        for scene in expected:
+            scene.position += current_duration
+            current_duration += scene.duration
+        self.assertListEqual(c.meta.scenes, expected)
+
     def test_video_trim_metadata(self):
         """
         Trim filter sets start and changes stream duration.
@@ -389,6 +417,15 @@ class FilterGraphTestCase(TestCase):
         except ValueError:  # pragma: no cover
             self.fail("hardware validation unexpectedly failed")
 
+    def test_upload_filter_clone(self):
+        """ While cloning Upload filter should preserve Device instance."""
+        cuda = meta.Device(hardware='cuda', name='foo')
+        upload = self.source.video | Upload(device=cuda)
+
+        upload = upload.clone(2)[1]
+        vm = cast(VideoMeta, upload.meta)
+        self.assertEqual(vm.device, cuda)
+
     def test_codec_metadata_transform(self):
         """
         Codecs parameters applied to stream metadata when using transform.
diff --git a/tests/test_meta_data.py b/tests/test_meta_data.py
index 801af85..d8fed7f 100644
--- a/tests/test_meta_data.py
+++ b/tests/test_meta_data.py
@@ -217,7 +217,8 @@ class MetaDataTestCase(TestCase):
         self.assertIsInstance(video, meta.VideoMeta)
         scene = meta.Scene(stream=None,
                            start=meta.TS(0),
-                           duration=meta.TS(6.740))
+                           duration=meta.TS(6.740),
+                           position=meta.TS(0))
         expected = meta.VideoMeta(
             scenes=[scene],
             streams=[],
@@ -237,7 +238,8 @@ class MetaDataTestCase(TestCase):
         self.assertIsInstance(audio, meta.AudioMeta)
         scene = meta.Scene(stream=None,
                            start=meta.TS(0),
-                           duration=meta.TS(6.742))
+                           duration=meta.TS(6.742),
+                           position=meta.TS(0))
         expected = meta.AudioMeta(
             scenes=[scene],
             streams=[],
@@ -301,6 +303,11 @@ class TimeStampTestCase(TestCase):
         self.assertIsInstance(ts, meta.TS)
         self.assertAlmostEqual(ts.total_seconds(), expected, places=4)
 
+    def test_ts_hashable(self):
+        marker = object()
+        data = {float(self.ts): marker}
+        self.assertIs(data.get(self.ts), marker)
+
     def test_ts_float(self):
         self.assertEqual(float(self.ts), self.td.total_seconds())
 
