diff --git a/lark/load_grammar.py b/lark/load_grammar.py
index dcb4c81..7b38a74 100644
--- a/lark/load_grammar.py
+++ b/lark/load_grammar.py
@@ -448,6 +448,9 @@ def _literal_to_pattern(literal):
 
     s = eval_escaping(x)
 
+    if s == "":
+        raise GrammarError("Can't have empty terminals (offending literal: %s)" % literal.value)
+
     if literal.type == 'STRING':
         s = s.replace('\\\\', '\\')
         return PatternStr(s, flags, raw=literal.value)
diff --git a/lark/reconstruct.py b/lark/reconstruct.py
index 2efc0ae..ab2fb38 100644
--- a/lark/reconstruct.py
+++ b/lark/reconstruct.py
@@ -87,14 +87,14 @@ class Reconstructor(TreeMatcher):
             else:
                 yield item
 
-    def reconstruct(self, tree, postproc=None):
+    def reconstruct(self, tree, postproc=None, insert_spaces=True):
         x = self._reconstruct(tree)
         if postproc:
             x = postproc(x)
         y = []
         prev_item = ''
         for item in x:
-            if prev_item and item and is_id_continue(prev_item[-1]) and is_id_continue(item[0]):
+            if insert_spaces and prev_item and item and is_id_continue(prev_item[-1]) and is_id_continue(item[0]):
                 y.append(' ')
             y.append(item)
             prev_item = item

