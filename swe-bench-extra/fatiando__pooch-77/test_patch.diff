diff --git a/pooch/tests/data/registry-custom-url.txt b/pooch/tests/data/registry-custom-url.txt
index d68036e..97be99b 100644
--- a/pooch/tests/data/registry-custom-url.txt
+++ b/pooch/tests/data/registry-custom-url.txt
@@ -2,3 +2,5 @@ subdir/tiny-data.txt baee0894dba14b12085eacb204284b97e362f4f3e5a5807693cc90ef415
 tiny-data.zip 0d49e94f07bc1866ec57e7fd1b93a351fba36842ec9b13dd50bf94e8dfa35cbb
 store.zip 0498d2a001e71051bbd2acd2346f38da7cbd345a633cb7bf0f8a20938714b51a
 tiny-data.txt baee0894dba14b12085eacb204284b97e362f4f3e5a5807693cc90ef415c1b2d https://some-site/tiny-data.txt
+tiny-data.tar.gz 41503f083814f43a01a8e9a30c28d7a9fe96839a99727a7fdd0acf7cd5bab63b
+store.tar.gz 088c7f4e0f1859b1c769bb6065de24376f366374817ede8691a6ac2e49f29511
diff --git a/pooch/tests/data/registry.txt b/pooch/tests/data/registry.txt
index b339be9..8a7dcef 100644
--- a/pooch/tests/data/registry.txt
+++ b/pooch/tests/data/registry.txt
@@ -2,3 +2,5 @@ subdir/tiny-data.txt baee0894dba14b12085eacb204284b97e362f4f3e5a5807693cc90ef415
 tiny-data.txt baee0894dba14b12085eacb204284b97e362f4f3e5a5807693cc90ef415c1b2d
 tiny-data.zip 0d49e94f07bc1866ec57e7fd1b93a351fba36842ec9b13dd50bf94e8dfa35cbb
 store.zip 0498d2a001e71051bbd2acd2346f38da7cbd345a633cb7bf0f8a20938714b51a
+tiny-data.tar.gz 41503f083814f43a01a8e9a30c28d7a9fe96839a99727a7fdd0acf7cd5bab63b
+store.tar.gz 088c7f4e0f1859b1c769bb6065de24376f366374817ede8691a6ac2e49f29511
diff --git a/pooch/tests/test_core.py b/pooch/tests/test_core.py
index f1c1802..df44934 100644
--- a/pooch/tests/test_core.py
+++ b/pooch/tests/test_core.py
@@ -17,7 +17,6 @@ import pytest
 from .. import Pooch, create
 from ..utils import file_hash
 from ..downloaders import HTTPDownloader
-from ..processors import Unzip
 
 from .utils import pooch_test_url, pooch_test_registry, check_tiny_data
 
@@ -252,66 +251,6 @@ def test_check_availability():
     assert not pup.is_available("not-a-real-data-file.txt")
 
 
-def test_processors():
-    "Setup a post-download hook and make sure it's only executed when downloading"
-    unzip = Unzip(members=["tiny-data.txt"])
-    with TemporaryDirectory() as local_store:
-        path = Path(local_store)
-        true_path = str(path / "tiny-data.zip.unzip" / "tiny-data.txt")
-        # Setup a pooch in a temp dir
-        pup = Pooch(path=path, base_url=BASEURL, registry=REGISTRY)
-        # Check the warnings when downloading and from the processor
-        with warnings.catch_warnings(record=True) as warn:
-            fnames = pup.fetch("tiny-data.zip", processor=unzip)
-            fname = fnames[0]
-            assert len(fnames) == 1
-            assert len(warn) == 2
-            assert all(issubclass(w.category, UserWarning) for w in warn)
-            assert str(warn[-2].message).split()[0] == "Downloading"
-            assert str(warn[-1].message).startswith("Unzipping 'tiny-data.txt'")
-        assert fname == true_path
-        check_tiny_data(fname)
-        # Check that processor doesn't execute when not downloading
-        with warnings.catch_warnings(record=True) as warn:
-            fnames = pup.fetch("tiny-data.zip", processor=unzip)
-            fname = fnames[0]
-            assert len(fnames) == 1
-            assert not warn
-        assert fname == true_path
-        check_tiny_data(fname)
-
-
-def test_processor_multiplefiles():
-    "Setup a processor to unzip a file and return multiple fnames"
-    with TemporaryDirectory() as local_store:
-        path = Path(local_store)
-        true_paths = {
-            str(path / "store.zip.unzip" / "store" / "tiny-data.txt"),
-            str(path / "store.zip.unzip" / "store" / "subdir" / "tiny-data.txt"),
-        }
-        # Setup a pooch in a temp dir
-        pup = Pooch(path=path, base_url=BASEURL, registry=REGISTRY)
-        # Check the warnings when downloading and from the processor
-        with warnings.catch_warnings(record=True) as warn:
-            fnames = pup.fetch("store.zip", processor=Unzip())
-            assert len(warn) == 2
-            assert all(issubclass(w.category, UserWarning) for w in warn)
-            assert str(warn[-2].message).split()[0] == "Downloading"
-            assert str(warn[-1].message).startswith("Unzipping contents")
-            assert len(fnames) == 2
-            assert true_paths == set(fnames)
-            for fname in fnames:
-                check_tiny_data(fname)
-        # Check that processor doesn't execute when not downloading
-        with warnings.catch_warnings(record=True) as warn:
-            fnames = pup.fetch("store.zip", processor=Unzip())
-            assert not warn
-            assert len(fnames) == 2
-            assert true_paths == set(fnames)
-            for fname in fnames:
-                check_tiny_data(fname)
-
-
 def test_downloader():
     "Setup a downloader function for fetch"
 
diff --git a/pooch/tests/test_processors.py b/pooch/tests/test_processors.py
new file mode 100644
index 0000000..c2dae3f
--- /dev/null
+++ b/pooch/tests/test_processors.py
@@ -0,0 +1,109 @@
+"""
+Test the processor hooks
+"""
+from pathlib import Path
+
+try:
+    from tempfile import TemporaryDirectory
+except ImportError:
+    from backports.tempfile import TemporaryDirectory
+import warnings
+
+import pytest
+
+from .. import Pooch
+from ..processors import Unzip, Untar, ExtractorProcessor
+
+from .utils import pooch_test_url, pooch_test_registry, check_tiny_data
+
+
+REGISTRY = pooch_test_registry()
+BASEURL = pooch_test_url()
+
+
+def test_extractprocessor_fails():
+    "The base class should be used and should fail when passed to fecth"
+    with TemporaryDirectory() as local_store:
+        # Setup a pooch in a temp dir
+        pup = Pooch(path=Path(local_store), base_url=BASEURL, registry=REGISTRY)
+        processor = ExtractorProcessor()
+        with pytest.raises(NotImplementedError) as exception:
+            pup.fetch("tiny-data.tar.gz", processor=processor)
+        assert "'suffix'" in exception.value.args[0]
+        processor.suffix = "tar.gz"
+        with pytest.raises(NotImplementedError) as exception:
+            pup.fetch("tiny-data.tar.gz", processor=processor)
+        assert not exception.value.args
+
+
+@pytest.mark.parametrize(
+    "proc_cls,ext", [(Unzip, ".zip"), (Untar, ".tar.gz")], ids=["Unzip", "Untar"]
+)
+def test_processors(proc_cls, ext):
+    "Setup a post-download hook and make sure it's only executed when downloading"
+    processor = proc_cls(members=["tiny-data.txt"])
+    suffix = proc_cls.suffix
+    extract_dir = "tiny-data" + ext + suffix
+    with TemporaryDirectory() as local_store:
+        path = Path(local_store)
+        true_path = str(path / extract_dir / "tiny-data.txt")
+        # Setup a pooch in a temp dir
+        pup = Pooch(path=path, base_url=BASEURL, registry=REGISTRY)
+        # Check the warnings when downloading and from the processor
+        with warnings.catch_warnings(record=True) as warn:
+            fnames = pup.fetch("tiny-data" + ext, processor=processor)
+            fname = fnames[0]
+            assert len(fnames) == 1
+            assert len(warn) == 2
+            assert all(issubclass(w.category, UserWarning) for w in warn)
+            assert str(warn[-2].message).split()[0] == "Downloading"
+            assert str(warn[-1].message).startswith("Extracting 'tiny-data.txt'")
+        assert fname == true_path
+        check_tiny_data(fname)
+        # Check that processor doesn't execute when not downloading
+        with warnings.catch_warnings(record=True) as warn:
+            fnames = pup.fetch("tiny-data" + ext, processor=processor)
+            fname = fnames[0]
+            assert len(fnames) == 1
+            assert not warn
+        assert fname == true_path
+        check_tiny_data(fname)
+
+
+@pytest.mark.parametrize(
+    "proc_cls,ext,msg",
+    [(Unzip, ".zip", "Unzipping"), (Untar, ".tar.gz", "Untarring")],
+    ids=["Unzip", "Untar"],
+)
+def test_processor_multiplefiles(proc_cls, ext, msg):
+    "Setup a processor to unzip/untar a file and return multiple fnames"
+    processor = proc_cls()
+    suffix = proc_cls.suffix
+    extract_dir = "store" + ext + suffix
+    with TemporaryDirectory() as local_store:
+        path = Path(local_store)
+        true_paths = {
+            str(path / extract_dir / "store" / "tiny-data.txt"),
+            str(path / extract_dir / "store" / "subdir" / "tiny-data.txt"),
+        }
+        # Setup a pooch in a temp dir
+        pup = Pooch(path=path, base_url=BASEURL, registry=REGISTRY)
+        # Check the warnings when downloading and from the processor
+        with warnings.catch_warnings(record=True) as warn:
+            fnames = pup.fetch("store" + ext, processor=processor)
+            assert len(warn) == 2
+            assert all(issubclass(w.category, UserWarning) for w in warn)
+            assert str(warn[-2].message).split()[0] == "Downloading"
+            assert str(warn[-1].message).startswith("{} contents".format(msg))
+            assert len(fnames) == 2
+            assert true_paths == set(fnames)
+            for fname in fnames:
+                check_tiny_data(fname)
+        # Check that processor doesn't execute when not downloading
+        with warnings.catch_warnings(record=True) as warn:
+            fnames = pup.fetch("store" + ext, processor=processor)
+            assert not warn
+            assert len(fnames) == 2
+            assert true_paths == set(fnames)
+            for fname in fnames:
+                check_tiny_data(fname)
diff --git a/pooch/tests/utils.py b/pooch/tests/utils.py
index e25e948..9ea7f33 100644
--- a/pooch/tests/utils.py
+++ b/pooch/tests/utils.py
@@ -55,5 +55,7 @@ def pooch_test_registry():
         "subdir/tiny-data.txt": "baee0894dba14b12085eacb204284b97e362f4f3e5a5807693cc90ef415c1b2d",
         "tiny-data.zip": "0d49e94f07bc1866ec57e7fd1b93a351fba36842ec9b13dd50bf94e8dfa35cbb",
         "store.zip": "0498d2a001e71051bbd2acd2346f38da7cbd345a633cb7bf0f8a20938714b51a",
+        "tiny-data.tar.gz": "41503f083814f43a01a8e9a30c28d7a9fe96839a99727a7fdd0acf7cd5bab63b",
+        "store.tar.gz": "088c7f4e0f1859b1c769bb6065de24376f366374817ede8691a6ac2e49f29511",
     }
     return registry
