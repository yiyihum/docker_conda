diff --git a/harmonica/forward/prism_layer.py b/harmonica/forward/prism_layer.py
index f2f41cc..b9fb207 100644
--- a/harmonica/forward/prism_layer.py
+++ b/harmonica/forward/prism_layer.py
@@ -306,7 +306,13 @@ class DatasetAccessorPrismLayer:
         self._obj.coords["bottom"] = (self.dims, bottom)
 
     def gravity(
-        self, coordinates, field, progressbar=False, density_name="density", **kwargs
+        self,
+        coordinates,
+        field,
+        progressbar=False,
+        density_name="density",
+        thickness_threshold=None,
+        **kwargs,
     ):
         """
         Computes the gravity generated by the layer of prisms
@@ -317,6 +323,8 @@ class DatasetAccessorPrismLayer:
         through the ``density_name`` argument.
         Ignores the prisms which ``top`` or ``bottom`` boundaries are
         ``np.nan``s.
+        Prisms thinner than a given threshold can be optionally ignored through
+        the ``thickness_threshold`` argument.
         All ``kwargs`` will be passed to :func:`harmonica.prism_gravity`.
 
         Parameters
@@ -334,6 +342,10 @@ class DatasetAccessorPrismLayer:
             Name of the property layer (or ``data_var`` of the
             :class:`xarray.Dataset`) that will be used for the density of each
             prism in the layer. Default to ``"density"``
+        thickness_threshold : float or None
+            Prisms thinner than this threshold will be ignored in the
+            forward gravity calculation. If None, every prism with non-zero
+            volume will be considered. Default to None.
 
         Returns
         -------
@@ -354,6 +366,13 @@ class DatasetAccessorPrismLayer:
         # Select only the boundaries and density elements for masked prisms
         boundaries = boundaries[mask.ravel()]
         density = density[mask]
+        # Discard thin prisms and their densities
+        if thickness_threshold is not None:
+            boundaries, density = _discard_thin_prisms(
+                boundaries,
+                density,
+                thickness_threshold,
+            )
         # Return gravity field of prisms
         return prism_gravity(
             coordinates,
@@ -469,3 +488,42 @@ class DatasetAccessorPrismLayer:
                 for data_var in self._obj.data_vars
             }
         return prism_to_pyvista(prisms, properties=properties)
+
+
+def _discard_thin_prisms(
+    prisms,
+    density,
+    thickness_threshold,
+):
+    """
+    Discard prisms with a thickness below a threshold
+
+    Parameters
+    ----------
+    prisms : 2d-array
+        Array containing the boundaries of the prisms in the following order:
+        ``w``, ``e``, ``s``, ``n``, ``bottom``, ``top``.
+        The array must have the following shape: (``n_prisms``, 6), where
+        ``n_prisms`` is the total number of prisms.
+    density : 1d-array
+        Array containing the density of each prism in kg/m^3. Must have the
+        same size as the number of prisms.
+    thickness_threshold : float
+        Prisms thinner than this threshold will be discarded.
+
+    Returns
+    -------
+    prisms : 2d-array
+        A copy of the ``prisms`` array that doesn't include the thin prisms.
+    density : 1d-array
+        A copy of the ``density`` array that doesn't include the density values
+        for thin prisms.
+    """
+    west, east, south, north, bottom, top = tuple(prisms[:, i] for i in range(6))
+    # Mark prisms with thickness < threshold  as null prisms
+    thickness = top - bottom
+    null_prisms = thickness < thickness_threshold
+    # Keep only thick prisms and their densities
+    prisms = prisms[np.logical_not(null_prisms), :]
+    density = density[np.logical_not(null_prisms)]
+    return prisms, density

