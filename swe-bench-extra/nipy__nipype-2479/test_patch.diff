diff --git a/nipype/interfaces/tests/test_io.py b/nipype/interfaces/tests/test_io.py
index 6aafb5b6b..1eea2b31f 100644
--- a/nipype/interfaces/tests/test_io.py
+++ b/nipype/interfaces/tests/test_io.py
@@ -5,6 +5,7 @@ from __future__ import print_function, unicode_literals
 from builtins import str, zip, range, open
 from future import standard_library
 import os
+import copy
 import simplejson
 import glob
 import shutil
@@ -37,6 +38,32 @@ try:
 except ImportError:
     noboto3 = True
 
+# Check for paramiko
+try:
+    import paramiko
+    no_paramiko = False
+
+    # Check for localhost SSH Server
+    # FIXME: Tests requiring this are never run on CI
+    try:
+        proxy = None
+        client = paramiko.SSHClient()
+        client.load_system_host_keys()
+        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
+        client.connect('127.0.0.1', username=os.getenv('USER'), sock=proxy,
+                       timeout=10)
+
+        no_local_ssh = False
+
+    except (paramiko.SSHException,
+            paramiko.ssh_exception.NoValidConnectionsError,
+            OSError):
+        no_local_ssh = True
+
+except ImportError:
+    no_paramiko = True
+    no_local_ssh = True
+
 # Check for fakes3
 standard_library.install_aliases()
 from subprocess import check_call, CalledProcessError
@@ -316,7 +343,7 @@ def test_datasink_to_s3(dummy_input, tmpdir):
         aws_access_key_id='mykey',
         aws_secret_access_key='mysecret',
         service_name='s3',
-        endpoint_url='http://localhost:4567',
+        endpoint_url='http://127.0.0.1:4567',
         use_ssl=False)
     resource.meta.client.meta.events.unregister('before-sign.s3', fix_s3_host)
 
@@ -611,3 +638,52 @@ def test_bids_infields_outfields(tmpdir):
     bg = nio.BIDSDataGrabber()
     for outfield in ['anat', 'func']:
         assert outfield in bg._outputs().traits()
+
+
+@pytest.mark.skipif(no_paramiko, reason="paramiko library is not available")
+@pytest.mark.skipif(no_local_ssh, reason="SSH Server is not running")
+def test_SSHDataGrabber(tmpdir):
+    """Test SSHDataGrabber by connecting to localhost and collecting some data.
+    """
+    old_cwd = tmpdir.chdir()
+
+    source_dir = tmpdir.mkdir('source')
+    source_hdr = source_dir.join('somedata.hdr')
+    source_dat = source_dir.join('somedata.img')
+    source_hdr.ensure() # create
+    source_dat.ensure() # create
+
+    # ssh client that connects to localhost, current user, regardless of
+    # ~/.ssh/config
+    def _mock_get_ssh_client(self):
+        proxy = None
+        client = paramiko.SSHClient()
+        client.load_system_host_keys()
+        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
+        client.connect('127.0.0.1', username=os.getenv('USER'), sock=proxy,
+                       timeout=10)
+        return client
+    MockSSHDataGrabber = copy.copy(nio.SSHDataGrabber)
+    MockSSHDataGrabber._get_ssh_client = _mock_get_ssh_client
+
+    # grabber to get files from source_dir matching test.hdr
+    ssh_grabber = MockSSHDataGrabber(infields=['test'],
+                                     outfields=['test_file'])
+    ssh_grabber.inputs.base_directory = str(source_dir)
+    ssh_grabber.inputs.hostname = '127.0.0.1'
+    ssh_grabber.inputs.field_template = dict(test_file='%s.hdr')
+    ssh_grabber.inputs.template = ''
+    ssh_grabber.inputs.template_args = dict(test_file=[['test']])
+    ssh_grabber.inputs.test = 'somedata'
+    ssh_grabber.inputs.sort_filelist = True
+
+    runtime = ssh_grabber.run()
+
+    # did we successfully get the header?
+    assert runtime.outputs.test_file == str(tmpdir.join(source_hdr.basename))
+    # did we successfully get the data?
+    assert (tmpdir.join(source_hdr.basename) # header file
+            .new(ext='.img') # data file
+            .check(file=True, exists=True)) # exists?
+
+    old_cwd.chdir()
diff --git a/nipype/pipeline/engine/tests/test_join.py b/nipype/pipeline/engine/tests/test_join.py
index 436d29d9e..54ff15048 100644
--- a/nipype/pipeline/engine/tests/test_join.py
+++ b/nipype/pipeline/engine/tests/test_join.py
@@ -7,11 +7,9 @@ from __future__ import (print_function, division, unicode_literals,
                         absolute_import)
 from builtins import open
 
-import os
-
 from ... import engine as pe
 from ....interfaces import base as nib
-from ....interfaces.utility import IdentityInterface
+from ....interfaces.utility import IdentityInterface, Function, Merge
 from ....interfaces.base import traits, File
 
 
@@ -612,3 +610,20 @@ def test_nested_workflow_join(tmpdir):
     # there should be six nodes in total
     assert len(result.nodes()) == 6, \
         "The number of expanded nodes is incorrect."
+
+
+def test_name_prefix_join(tmpdir):
+    tmpdir.chdir()
+
+    def sq(x):
+        return x ** 2
+
+    wf = pe.Workflow('wf', base_dir=tmpdir.strpath)
+    square = pe.Node(Function(function=sq), name='square')
+    square.iterables = [('x', [1, 2])]
+    square_join = pe.JoinNode(Merge(1, ravel_inputs=True),
+                              name='square_join',
+                              joinsource='square',
+                              joinfield=['in1'])
+    wf.connect(square, 'out', square_join, "in1")
+    wf.run()
