diff --git a/daphne/tests/test_utils.py b/daphne/tests/test_utils.py
index 61fe1a3..10a10f3 100644
--- a/daphne/tests/test_utils.py
+++ b/daphne/tests/test_utils.py
@@ -7,9 +7,9 @@ from twisted.web.http_headers import Headers
 from ..utils import parse_x_forwarded_for
 
 
-class TestXForwardedForParsing(TestCase):
+class TestXForwardedForHttpParsing(TestCase):
     """
-    Tests that the parse_x_forwarded_for util correcly parses headers.
+    Tests that the parse_x_forwarded_for util correctly parses twisted Header.
     """
 
     def test_basic(self):
@@ -59,3 +59,57 @@ class TestXForwardedForParsing(TestCase):
     def test_no_original(self):
         headers = Headers({})
         self.assertIsNone(parse_x_forwarded_for(headers))
+
+
+class TestXForwardedForWsParsing(TestCase):
+    """
+    Tests that the parse_x_forwarded_for util correctly parses dict headers.
+    """
+
+    def test_basic(self):
+        headers = {
+            b'X-Forwarded-For': b'10.1.2.3',
+            b'X-Forwarded-Port': b'1234',
+        }
+        self.assertEqual(
+            parse_x_forwarded_for(headers),
+            ['10.1.2.3', 1234]
+        )
+
+    def test_address_only(self):
+        headers = {
+            b'X-Forwarded-For': b'10.1.2.3',
+        }
+        self.assertEqual(
+            parse_x_forwarded_for(headers),
+            ['10.1.2.3', 0]
+        )
+
+    def test_port_in_address(self):
+        headers = {
+            b'X-Forwarded-For': b'10.1.2.3:5123',
+        }
+        self.assertEqual(
+            parse_x_forwarded_for(headers),
+            ['10.1.2.3', 5123]
+        )
+
+    def test_multiple_proxys(self):
+        headers = {
+            b'X-Forwarded-For': b'10.1.2.3, 10.1.2.4',
+        }
+        self.assertEqual(
+            parse_x_forwarded_for(headers),
+            ['10.1.2.4', 0]
+        )
+
+    def test_original(self):
+        headers = {}
+        self.assertEqual(
+            parse_x_forwarded_for(headers, original=['127.0.0.1', 80]),
+            ['127.0.0.1', 80]
+        )
+
+    def test_no_original(self):
+        headers = {}
+        self.assertIsNone(parse_x_forwarded_for(headers))
