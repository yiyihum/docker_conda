diff --git a/cognitive_complexity/api.py b/cognitive_complexity/api.py
index 9a36850..392ca66 100644
--- a/cognitive_complexity/api.py
+++ b/cognitive_complexity/api.py
@@ -2,11 +2,14 @@ import ast
 
 from cognitive_complexity.common_types import AnyFuncdef
 from cognitive_complexity.utils.ast import (
-    has_recursive_calls, process_child_nodes, process_node_itself,
+    has_recursive_calls, is_decorator, process_child_nodes, process_node_itself,
 )
 
 
 def get_cognitive_complexity(funcdef: AnyFuncdef) -> int:
+    if is_decorator(funcdef):
+        return get_cognitive_complexity(funcdef.body[0])  # type: ignore
+
     complexity = 0
     for node in funcdef.body:
         complexity += get_cognitive_complexity_for_node(node)
@@ -18,7 +21,7 @@ def get_cognitive_complexity(funcdef: AnyFuncdef) -> int:
 def get_cognitive_complexity_for_node(
         node: ast.AST,
         increment_by: int = 0,
-        verbose: bool = True,
+        verbose: bool = False,
 ) -> int:
 
     increment_by, base_complexity, should_iter_children = process_node_itself(node, increment_by)
diff --git a/cognitive_complexity/utils/ast.py b/cognitive_complexity/utils/ast.py
index 815bc05..19db71d 100644
--- a/cognitive_complexity/utils/ast.py
+++ b/cognitive_complexity/utils/ast.py
@@ -16,6 +16,15 @@ def has_recursive_calls(funcdef: AnyFuncdef) -> bool:
     ])
 
 
+def is_decorator(funcdef: AnyFuncdef) -> bool:
+    return (
+        isinstance(funcdef, ast.FunctionDef)
+        and len(funcdef.body) == 2
+        and isinstance(funcdef.body[0], ast.FunctionDef)
+        and isinstance(funcdef.body[1], ast.Return)
+    )
+
+
 def process_child_nodes(
     node: ast.AST,
     increment_by: int,

