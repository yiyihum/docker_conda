diff --git a/onlinejudge/_implementation/utils.py b/onlinejudge/_implementation/utils.py
index f0cbc18..eb25a74 100644
--- a/onlinejudge/_implementation/utils.py
+++ b/onlinejudge/_implementation/utils.py
@@ -46,11 +46,14 @@ def next_sibling_tag(tag: bs4.Tag) -> bs4.Tag:
     return tag
 
 
-# remove all HTML tag without interpretation (except <br>)
-# remove all comment
-# using DFS(Depth First Search)
-# discussed in https://github.com/kmyk/online-judge-tools/issues/553
+# TODO: Why this returns bs4.NavigableString?
 def parse_content(parent: Union[bs4.NavigableString, bs4.Tag, bs4.Comment]) -> bs4.NavigableString:
+    """parse_content convert a tag to a string with interpretting `<br>` and ignoring other tags.
+
+    .. seealso::
+        https://github.com/kmyk/online-judge-tools/issues/553
+    """
+
     res = ''
     if isinstance(parent, bs4.Comment):
         pass
@@ -104,10 +107,21 @@ class FormSender:
 
 
 def dos2unix(s: str) -> str:
+    """
+    .. deprecated:: 10.1.0
+        Use :func:`format_sample_case` instead.
+    """
+
     return s.replace('\r\n', '\n')
 
 
-def textfile(s: str) -> str:  # should have trailing newline
+def textfile(s: str) -> str:
+    """textfile convert a string s to the "text file" defined in POSIX
+
+    .. deprecated:: 10.1.0
+        Use :func:`format_sample_case` instead.
+    """
+
     if s.endswith('\n'):
         return s
     elif '\r\n' in s:
@@ -116,6 +130,19 @@ def textfile(s: str) -> str:  # should have trailing newline
         return s + '\n'
 
 
+def format_sample_case(s: str) -> str:
+    """format_sample_case convert a string s to a good form as a sample case.
+
+    A good form means that, it use LR instead of CRLF, it has the trailing newline, and it has no superfluous whitespaces.
+    """
+
+    if not s.strip():
+        return ''
+    lines = s.strip().splitlines()
+    lines = [line.strip() + '\n' for line in lines]
+    return ''.join(lines)
+
+
 def exec_command(command_str: str, *, stdin: 'Optional[IO[Any]]' = None, input: Optional[bytes] = None, timeout: Optional[float] = None, gnu_time: Optional[str] = None) -> Tuple[Dict[str, Any], subprocess.Popen]:
     if input is not None:
         assert stdin is None
diff --git a/onlinejudge/service/codeforces.py b/onlinejudge/service/codeforces.py
index 055b4c3..e61ee12 100644
--- a/onlinejudge/service/codeforces.py
+++ b/onlinejudge/service/codeforces.py
@@ -325,9 +325,8 @@ class CodeforcesProblem(onlinejudge.type.Problem):
             title, pre = list(non_empty_children)
             assert 'title' in title.attrs['class']
             assert pre.name == 'pre'
-            s = utils.parse_content(pre)
-            s = s.lstrip()
-            samples.add(s.encode(), title.string)
+            data = utils.format_sample_case(str(utils.parse_content(pre)))
+            samples.add(data.encode(), title.string)
         return samples.get()
 
     def get_available_languages(self, *, session: Optional[requests.Session] = None) -> List[Language]:
diff --git a/onlinejudge_api/login_service.py b/onlinejudge_api/login_service.py
index 58c5e5b..1e6bc77 100644
--- a/onlinejudge_api/login_service.py
+++ b/onlinejudge_api/login_service.py
@@ -25,7 +25,7 @@ def main(service: Service, *, username: Optional[str], password: Optional[str],
 
     result = {}  # type: Dict[str, Any]
     if check_only:
-        assert username is None
+        # We cannot check `assert username is None` because some environments defines $USERNAME and it is set here. See https://github.com/online-judge-tools/api-client/issues/53
         assert password is None
         result["loggedIn"] = service.is_logged_in(session=session)
     else:

