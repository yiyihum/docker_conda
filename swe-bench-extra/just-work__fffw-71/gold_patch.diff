diff --git a/fffw/encoding/filters.py b/fffw/encoding/filters.py
index 43ed444..2564388 100644
--- a/fffw/encoding/filters.py
+++ b/fffw/encoding/filters.py
@@ -157,6 +157,7 @@ class Scale(VideoFilter):
     :arg height: resulting video height
     """
     filter = "scale"
+    hardware = None  # cpu only
 
     width: int = param(name='w')
     height: int = param(name='h')
@@ -202,10 +203,6 @@ class Split(AutoFilter):
             return ''
         return str(self.output_count)
 
-    def validate_edge_device(self, edge: base.Edge) -> None:
-        # Any device is supported
-        return
-
 
 @dataclass
 class Trim(AutoFilter):
@@ -355,10 +352,6 @@ class Concat(Filter):
             kwargs['samples'] = samples
         return replace(metadata[0], **kwargs)
 
-    def validate_edge_device(self, edge: base.Edge) -> None:
-        # Any device is supported
-        return
-
 
 @dataclass
 class Overlay(VideoFilter):
diff --git a/fffw/encoding/mixins.py b/fffw/encoding/mixins.py
index e74310c..a0e4a2d 100644
--- a/fffw/encoding/mixins.py
+++ b/fffw/encoding/mixins.py
@@ -1,4 +1,4 @@
-from typing import TYPE_CHECKING
+from typing import TYPE_CHECKING, Optional
 
 from fffw.graph import base, VIDEO
 
@@ -9,7 +9,7 @@ else:
 
 
 class StreamValidationMixin(StreamValidationTarget):
-    hardware: str
+    hardware: Optional[str]
 
     def connect_edge(self, edge: base.Edge) -> base.Edge:
         self.validate_edge_kind(edge)
@@ -30,7 +30,11 @@ class StreamValidationMixin(StreamValidationTarget):
         meta = edge.get_meta_data(self)
         if meta is None:
             return
-        filter_hardware = getattr(self, 'hardware', None)
+        try:
+            filter_hardware = getattr(self, 'hardware')
+        except AttributeError:
+            # no hardware restrictions for filter/codec
+            return
         device = getattr(meta, 'device', None)
         edge_hardware = None if device is None else device.hardware
         if filter_hardware != edge_hardware:
