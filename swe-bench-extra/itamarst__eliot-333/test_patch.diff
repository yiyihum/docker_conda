diff --git a/eliot/tests/test_json.py b/eliot/tests/test_json.py
new file mode 100644
index 0000000..87c0a80
--- /dev/null
+++ b/eliot/tests/test_json.py
@@ -0,0 +1,45 @@
+"""
+Tests for L{eliot._json}.
+"""
+
+from __future__ import unicode_literals, absolute_import
+
+from unittest import TestCase, skipUnless, skipIf
+from json import loads, dumps
+
+try:
+    import numpy as np
+except ImportError:
+    np = None
+
+from eliot._json import EliotJSONEncoder
+
+
+class EliotJSONEncoderTests(TestCase):
+    """Tests for L{EliotJSONEncoder}."""
+
+    @skipUnless(np, "NumPy not installed.")
+    def test_numpy(self):
+        """NumPy objects get serialized to readable JSON."""
+        l = [np.float32(12.5), np.float64(2.0), np.float16(0.5),
+             np.bool(True), np.bool(False), np.bool_(True),
+             np.unicode_("hello"),
+             np.byte(12), np.short(12), np.intc(-13), np.int_(0),
+             np.longlong(100), np.intp(7),
+             np.ubyte(12), np.ushort(12), np.uintc(13),
+             np.ulonglong(100), np.uintp(7),
+             np.int8(1), np.int16(3), np.int32(4), np.int64(5),
+             np.uint8(1), np.uint16(3), np.uint32(4), np.uint64(5)]
+        l2 = [l, np.array([1, 2, 3])]
+        roundtripped = loads(dumps(l2, cls=EliotJSONEncoder))
+        self.assertEqual([l, [1, 2, 3]], roundtripped)
+
+    @skipIf(np, "NumPy is installed.")
+    def test_numpy_not_imported(self):
+        """If NumPy is not available, EliotJSONEncoder continues to work.
+
+        This ensures NumPy isn't a hard dependency.
+        """
+        with self.assertRaises(TypeError):
+            dumps([object()], cls=EliotJSONEncoder)
+        self.assertEqual(dumps(12, cls=EliotJSONEncoder), "12")
diff --git a/eliot/tests/test_output.py b/eliot/tests/test_output.py
index 54a7b23..568204d 100644
--- a/eliot/tests/test_output.py
+++ b/eliot/tests/test_output.py
@@ -5,7 +5,7 @@ Tests for L{eliot._output}.
 from __future__ import unicode_literals
 
 from sys import stdout
-from unittest import TestCase, skipIf
+from unittest import TestCase, skipIf, skipUnless
 # Make sure to use StringIO that only accepts unicode:
 from io import BytesIO, StringIO
 import json as pyjson
@@ -14,7 +14,10 @@ from time import time
 from uuid import UUID
 
 from six import PY3, PY2
-
+try:
+    import numpy as np
+except ImportError:
+    np = None
 from zope.interface.verify import verifyClass
 
 from .._output import (
@@ -686,6 +689,21 @@ class ToFileTests(TestCase):
             json.loads(line)
             for line in bytes_f.getvalue().splitlines()], [{"x": "abc"}])
 
+    @skipUnless(np, "NumPy is not installed.")
+    def test_default_encoder_is_EliotJSONEncoder(self):
+        """The default encoder if none are specified is EliotJSONEncoder."""
+        message = {"x": np.int64(3)}
+        f = StringIO()
+        destination = FileDestination(file=f)
+        destination(message)
+        self.assertEqual(
+            [
+                json.loads(line)
+                for line in f.getvalue().splitlines()
+            ],
+            [{"x": 3}]
+        )
+
     def test_filedestination_writes_json_bytes(self):
         """
         L{FileDestination} writes JSON-encoded messages to a file that accepts
