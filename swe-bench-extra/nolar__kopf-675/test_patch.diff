diff --git a/tests/handling/daemons/conftest.py b/tests/handling/daemons/conftest.py
index e2636ea..22b1812 100644
--- a/tests/handling/daemons/conftest.py
+++ b/tests/handling/daemons/conftest.py
@@ -6,10 +6,12 @@ import freezegun
 import pytest
 
 import kopf
+from kopf.reactor.daemons import daemon_killer
 from kopf.reactor.processing import process_resource_event
 from kopf.structs.bodies import RawBody
 from kopf.structs.containers import ResourceMemories
 from kopf.structs.memos import Memo
+from kopf.structs.primitives import ToggleSet
 
 
 class DaemonDummy:
@@ -76,6 +78,31 @@ def simulate_cycle(k8s_mocked, registry, settings, resource, memories, mocker):
     return _simulate_cycle
 
 
+@pytest.fixture()
+async def freeze_checker():
+    return ToggleSet()
+
+
+@pytest.fixture()
+async def freeze_toggle(freeze_checker: ToggleSet):
+    return await freeze_checker.make_toggle(name="freeze_toggle fixture")
+
+
+@pytest.fixture()
+async def background_daemon_killer(settings, memories, freeze_checker):
+    """
+    Run the daemon killer in the background.
+    """
+    task = asyncio.create_task(daemon_killer(
+        settings=settings, memories=memories, freeze_checker=freeze_checker))
+    yield
+    task.cancel()
+    try:
+        await task
+    except asyncio.CancelledError:
+        pass
+
+
 @pytest.fixture()
 def frozen_time():
     """
diff --git a/tests/handling/daemons/test_daemon_termination.py b/tests/handling/daemons/test_daemon_termination.py
index 2d89d22..3ec39de 100644
--- a/tests/handling/daemons/test_daemon_termination.py
+++ b/tests/handling/daemons/test_daemon_termination.py
@@ -18,7 +18,7 @@ async def test_daemon_exits_gracefully_and_instantly_via_stopper(
         dummy.steps['called'].set()
         await kwargs['stopped'].wait()
 
-    # 0th cycle:tTrigger spawning and wait until ready. Assume the finalizers are already added.
+    # 0th cycle: trigger spawning and wait until ready. Assume the finalizers are already added.
     finalizer = settings.persistence.finalizer
     event_object = {'metadata': {'finalizers': [finalizer]}}
     await simulate_cycle(event_object)
@@ -39,6 +39,41 @@ async def test_daemon_exits_gracefully_and_instantly_via_stopper(
     assert k8s_mocked.patch_obj.call_args_list[0][1]['patch']['metadata']['finalizers'] == []
 
 
+@pytest.mark.usefixtures('background_daemon_killer')
+async def test_daemon_exits_gracefully_and_instantly_via_peering_freeze(
+        settings, memories, resource, dummy, simulate_cycle, freeze_toggle,
+        caplog, assert_logs, k8s_mocked, frozen_time, mocker, timer):
+    caplog.set_level(logging.DEBUG)
+
+    # A daemon-under-test.
+    @kopf.daemon(*resource, id='fn')
+    async def fn(**kwargs):
+        dummy.kwargs = kwargs
+        dummy.steps['called'].set()
+        await kwargs['stopped'].wait()
+
+    # 0th cycle: trigger spawning and wait until ready. Assume the finalizers are already added.
+    finalizer = settings.persistence.finalizer
+    event_object = {'metadata': {'finalizers': [finalizer]}}
+    await simulate_cycle(event_object)
+    await dummy.steps['called'].wait()
+
+    # 1st stage: trigger termination due to peering freeze.
+    mocker.resetall()
+    await freeze_toggle.turn_to(True)
+
+    # Check that the daemon has exited near-instantly, with no delays.
+    with timer:
+        await dummy.wait_for_daemon_done()
+    assert timer.seconds < 0.01  # near-instantly
+
+    # There is no way to test for re-spawning here: it is done by watch-events,
+    # which are tested by the peering freezes elsewhere (test_daemon_spawning.py).
+    # We only test that it is capable for respawning (not forever-stopped):
+    memory = await memories.recall(event_object)
+    assert not memory.forever_stopped
+
+
 async def test_daemon_exits_instantly_via_cancellation_with_backoff(
         settings, resource, dummy, simulate_cycle,
         caplog, assert_logs, k8s_mocked, frozen_time, mocker):
