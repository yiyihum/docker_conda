diff --git a/pyais/messages.py b/pyais/messages.py
index 3cdd34d..6154e5a 100644
--- a/pyais/messages.py
+++ b/pyais/messages.py
@@ -11,7 +11,7 @@ from pyais.constants import TalkerID, NavigationStatus, ManeuverIndicator, EpfdT
 from pyais.exceptions import InvalidNMEAMessageException, UnknownMessageException, UnknownPartNoException, \
     InvalidDataTypeException
 from pyais.util import decode_into_bit_array, compute_checksum, int_to_bin, str_to_bin, \
-    encode_ascii_6, from_bytes, int_to_bytes, from_bytes_signed, decode_bin_as_ascii6, get_int
+    encode_ascii_6, from_bytes, int_to_bytes, from_bytes_signed, decode_bin_as_ascii6, get_int, chk_to_int
 
 NMEA_VALUE = typing.Union[str, float, int, bool, bytes]
 
@@ -195,10 +195,12 @@ class NMEAMessage(object):
         self.channel: str = channel.decode('ascii')
         # Decoded message payload as byte string
         self.payload: bytes = payload
+
+        fill, check = chk_to_int(checksum)
         # Fill bits (0 to 5)
-        self.fill_bits: int = int(chr(checksum[0]))
+        self.fill_bits: int = fill
         # Message Checksum (hex value)
-        self.checksum = int(checksum[2:], 16)
+        self.checksum = check
 
         # Finally decode bytes into bits
         self.bit_array: bitarray = decode_into_bit_array(self.payload, self.fill_bits)
diff --git a/pyais/util.py b/pyais/util.py
index 846c89d..06147bc 100644
--- a/pyais/util.py
+++ b/pyais/util.py
@@ -229,3 +229,20 @@ def str_to_bin(val: str, width: int) -> bitarray:
         out += bitarray(txt)
 
     return out
+
+
+def chk_to_int(chk_str: bytes) -> typing.Tuple[int, int]:
+    """
+    Converts a checksum string to a tuple of (fillbits, checksum).
+    >>> chk_to_int(b"0*1B")
+    (0, 27)
+    """
+    if not len(chk_str):
+        return 0, -1
+
+    fill_bits: int = int(chr(chk_str[0]))
+    try:
+        checksum = int(chk_str[2:], 16)
+    except (IndexError, ValueError):
+        checksum = -1
+    return fill_bits, checksum

