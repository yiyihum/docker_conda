diff --git a/tests/test_typing.py b/tests/test_typing.py
index 5b039c4..fa80d31 100644
--- a/tests/test_typing.py
+++ b/tests/test_typing.py
@@ -1,15 +1,17 @@
 # standard library
-from typing import Any, Optional, Union
+from typing import Any, Union
 
 
 # dependencies
 import numpy as np
 import pandas as pd
 from pytest import mark
-from typing_extensions import Annotated, Literal
+from typing_extensions import Annotated as Ann
+from typing_extensions import Literal as L
 from pandas_dataclasses.typing import (
     Attr,
     Data,
+    FType,
     Index,
     Name,
     get_dtype,
@@ -22,26 +24,38 @@ from pandas_dataclasses.typing import (
 testdata_dtype = [
     (Data[Any], None),
     (Data[None], None),
-    (Data[int], np.dtype("int64")),
-    (Data[Literal["i8"]], np.dtype("int64")),
-    (Data[Literal["boolean"]], pd.BooleanDtype()),
+    (Data[int], np.dtype("i8")),
+    (Data[L["i8"]], np.dtype("i8")),
+    (Data[L["boolean"]], pd.BooleanDtype()),
+    (Data[L["category"]], pd.CategoricalDtype()),
     (Index[Any], None),
     (Index[None], None),
-    (Index[int], np.dtype("int64")),
-    (Index[Literal["i8"]], np.dtype("int64")),
-    (Index[Literal["boolean"]], pd.BooleanDtype()),
-    (Optional[Data[float]], np.dtype("float64")),
-    (Optional[Index[float]], np.dtype("float64")),
-    (Union[Data[float], str], np.dtype("float64")),
-    (Union[Index[float], str], np.dtype("float64")),
+    (Index[int], np.dtype("i8")),
+    (Index[L["i8"]], np.dtype("i8")),
+    (Index[L["boolean"]], pd.BooleanDtype()),
+    (Index[L["category"]], pd.CategoricalDtype()),
+    (Ann[Data[float], "data"], np.dtype("f8")),
+    (Ann[Index[float], "index"], np.dtype("f8")),
+    (Union[Ann[Data[float], "data"], Ann[Any, "any"]], np.dtype("f8")),
+    (Union[Ann[Index[float], "index"], Ann[Any, "any"]], np.dtype("f8")),
 ]
 
 testdata_ftype = [
-    (Attr[Any], "attr"),
-    (Data[Any], "data"),
-    (Index[Any], "index"),
-    (Name[Any], "name"),
-    (Any, "other"),
+    (Attr[Any], FType.ATTR),
+    (Data[Any], FType.DATA),
+    (Index[Any], FType.INDEX),
+    (Name[Any], FType.NAME),
+    (Any, FType.OTHER),
+    (Ann[Attr[Any], "attr"], FType.ATTR),
+    (Ann[Data[Any], "data"], FType.DATA),
+    (Ann[Index[Any], "index"], FType.INDEX),
+    (Ann[Name[Any], "name"], FType.NAME),
+    (Ann[Any, "other"], FType.OTHER),
+    (Union[Ann[Attr[Any], "attr"], Ann[Any, "any"]], FType.ATTR),
+    (Union[Ann[Data[Any], "data"], Ann[Any, "any"]], FType.DATA),
+    (Union[Ann[Index[Any], "index"], Ann[Any, "any"]], FType.INDEX),
+    (Union[Ann[Name[Any], "name"], Ann[Any, "any"]], FType.NAME),
+    (Union[Ann[Any, "other"], Ann[Any, "any"]], FType.OTHER),
 ]
 
 testdata_name = [
@@ -49,10 +63,17 @@ testdata_name = [
     (Data[Any], None),
     (Index[Any], None),
     (Name[Any], None),
-    (Annotated[Attr[Any], "attr"], "attr"),
-    (Annotated[Data[Any], "data"], "data"),
-    (Annotated[Index[Any], "index"], "index"),
-    (Annotated[Name[Any], "name"], "name"),
+    (Any, None),
+    (Ann[Attr[Any], "attr"], "attr"),
+    (Ann[Data[Any], "data"], "data"),
+    (Ann[Index[Any], "index"], "index"),
+    (Ann[Name[Any], "name"], "name"),
+    (Ann[Any, "other"], None),
+    (Union[Ann[Attr[Any], "attr"], Ann[Any, "any"]], "attr"),
+    (Union[Ann[Data[Any], "data"], Ann[Any, "any"]], "data"),
+    (Union[Ann[Index[Any], "index"], Ann[Any, "any"]], "index"),
+    (Union[Ann[Name[Any], "name"], Ann[Any, "any"]], "name"),
+    (Union[Ann[Any, "other"], Ann[Any, "any"]], None),
 ]
 
 
@@ -64,7 +85,7 @@ def test_get_dtype(tp: Any, dtype: Any) -> None:
 
 @mark.parametrize("tp, ftype", testdata_ftype)
 def test_get_ftype(tp: Any, ftype: Any) -> None:
-    assert get_ftype(tp).value == ftype
+    assert get_ftype(tp) is ftype
 
 
 @mark.parametrize("tp, name", testdata_name)
