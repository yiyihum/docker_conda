diff --git a/tests/conftest.py b/tests/conftest.py
index db9f9b8..16f377a 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -26,8 +26,8 @@ from htmap._startup import ensure_htmap_dir_exists
 
 # start with base settings (ignore user settings for tests)
 htmap.settings.replace(BASE_SETTINGS)
-htmap.settings['DELIVERY_METHOD'] = 'assume'  # assume is the default for testing
-htmap.settings['WAIT_TIME'] = 0.01
+htmap.settings['DELIVERY_METHOD'] = 'assume'  # assume is the default for all tests that aren't parametric
+htmap.settings['WAIT_TIME'] = 0.1
 htmap.settings['MAP_OPTIONS.request_memory'] = '10MB'
 
 SETTINGS = copy(htmap.settings)
@@ -49,18 +49,11 @@ def delivery_methods(delivery_method, reset_settings):
     htmap.settings['DELIVERY_METHOD'] = delivery_method
 
 
-@pytest.fixture(scope = 'function', autouse = True)
-def set_htmap_dir(tmpdir_factory, reset_settings):
-    path = Path(tmpdir_factory.mktemp('htmap_dir'))
-    htmap.settings['HTMAP_DIR'] = path
-    ensure_htmap_dir_exists()
-
-
 def pytest_addoption(parser):
     parser.addoption(
         "--delivery",
         nargs = "+",
-        default = ['assume'],
+        default = ['assume'],  # assume is the default for parametric delivery testing
     )
 
 
@@ -72,6 +65,24 @@ def pytest_generate_tests(metafunc):
         )
 
 
+MAP_DIRS = []
+
+
+@pytest.fixture(scope = 'function', autouse = True)
+def set_htmap_dir(tmpdir_factory):
+    map_dir = Path(tmpdir_factory.mktemp('htmap_dir'))
+    MAP_DIRS.append(map_dir)
+    htmap.settings['HTMAP_DIR'] = map_dir
+    ensure_htmap_dir_exists()
+
+
+@pytest.fixture(scope = 'session', autouse = True)
+def cleanup():
+    for map_dir in MAP_DIRS:
+        htmap.settings['HTMAP_DIR'] = map_dir
+        htmap.clean(all = True)
+
+
 @pytest.fixture(scope = 'session')
 def doubler():
     def doubler(x):
diff --git a/tests/integration/test_errors_and_holds.py b/tests/integration/test_errors_and_holds.py
index 6064281..25f1507 100644
--- a/tests/integration/test_errors_and_holds.py
+++ b/tests/integration/test_errors_and_holds.py
@@ -34,7 +34,9 @@ def hold_before_error():
 
     assert map.component_statuses == [htmap.ComponentStatus.HELD, htmap.ComponentStatus.ERRORED]
 
-    return map
+    yield map
+
+    map.remove()
 
 
 @pytest.fixture(scope = 'function')
@@ -49,7 +51,9 @@ def error_before_hold():
 
     assert map.component_statuses == [htmap.ComponentStatus.ERRORED, htmap.ComponentStatus.HELD]
 
-    return map
+    yield map
+
+    map.remove()
 
 
 def test_can_get_error_if_hold_in_front(hold_before_error):
diff --git a/tests/integration/test_held_components.py b/tests/integration/test_held_components.py
index 93d1cdb..94f0685 100644
--- a/tests/integration/test_held_components.py
+++ b/tests/integration/test_held_components.py
@@ -20,65 +20,47 @@ import pytest
 import htmap
 
 
-def test_waiting_on_held_component_raises(mapped_doubler):
+@pytest.fixture(scope = 'function')
+def map_with_held_component(mapped_doubler):
     m = mapped_doubler.map(range(1))
     m.hold()
 
     m.wait(holds_ok = True)
 
-    with pytest.raises(htmap.exceptions.MapComponentHeld):
-        m.wait(timeout = 180)
+    yield m
 
+    m.remove()
 
-def test_accessing_held_component_raises(mapped_doubler):
-    m = mapped_doubler.map(range(1))
-    m.hold()
-
-    m.wait(holds_ok = True)
 
+def test_waiting_on_held_component_raises(map_with_held_component):
     with pytest.raises(htmap.exceptions.MapComponentHeld):
-        m[0]
+        map_with_held_component.wait(timeout = 180)
 
 
-def test_getting_held_component_raises(mapped_doubler):
-    m = mapped_doubler.map(range(1))
-    m.hold()
-
-    m.wait(holds_ok = True)
-
+def test_accessing_held_component_raises(map_with_held_component):
     with pytest.raises(htmap.exceptions.MapComponentHeld):
-        m.get(0)
+        map_with_held_component[0]
 
 
-def test_iterating_over_held_component_raises(mapped_doubler):
-    m = mapped_doubler.map(range(1))
-    m.hold()
-
-    m.wait(holds_ok = True)
-
+def test_getting_held_component_raises(map_with_held_component):
     with pytest.raises(htmap.exceptions.MapComponentHeld):
-        list(m)
-
-
-def test_held_component_shows_up_in_hold_reasons(mapped_doubler):
-    m = mapped_doubler.map(range(1))
-    m.hold()
+        map_with_held_component.get(0)
 
-    m.wait(holds_ok = True)
-
-    assert isinstance(m.holds[0], htmap.ComponentHold)
 
+def test_iterating_over_held_component_raises(map_with_held_component):
+    with pytest.raises(htmap.exceptions.MapComponentHeld):
+        list(map_with_held_component)
 
-def test_held_then_released_component_not_in_hold_reasons(mapped_doubler):
-    m = mapped_doubler.map(range(1))
-    m.hold()
 
-    m.wait(holds_ok = True)
+def test_held_component_shows_up_in_hold_reasons(map_with_held_component):
+    assert isinstance(map_with_held_component.holds[0], htmap.ComponentHold)
 
-    assert isinstance(m.holds[0], htmap.ComponentHold)
 
-    m.release()
+@pytest.mark.timeout(60)
+def test_held_then_released_component_not_in_hold_reasons(map_with_held_component):
+    assert isinstance(map_with_held_component.holds[0], htmap.ComponentHold)
 
-    time.sleep(5)  # wait for htcondor to write events
+    map_with_held_component.release()
 
-    assert len(m.holds) == 0
+    while not len(map_with_held_component.holds) == 0:
+        time.sleep(.1)
diff --git a/tests/unit/test_base_descriptors.py b/tests/unit/test_base_descriptors.py
index bbdcc52..379b5a8 100644
--- a/tests/unit/test_base_descriptors.py
+++ b/tests/unit/test_base_descriptors.py
@@ -18,12 +18,12 @@ import pytest
 from pathlib import Path
 
 import htmap
-from htmap.options import get_base_descriptors, register_delivery_mechanism, unregister_delivery_mechanism
+from htmap.options import get_base_descriptors, register_delivery_method, unregister_delivery_mechanism
 
 
 @pytest.fixture(scope = 'module', autouse = True)
 def add_null_delivery():
-    register_delivery_mechanism('null', lambda tag, map_dir: {})
+    register_delivery_method('null', lambda tag, map_dir: {})
 
     yield
 
