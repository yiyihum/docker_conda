diff --git a/.travis.yml b/.travis.yml
index 4cb014c..7a891ec 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -16,7 +16,6 @@ jobs:
   fast_finish: true
 
 install:
-  - pip install codecov
   - travis_retry docker build -t htmap-test --file docker/Dockerfile --build-arg HTCONDOR_VERSION --build-arg PYTHON_VERSION=${TRAVIS_PYTHON_VERSION} .
 
 script:
diff --git a/docker/entrypoint.sh b/docker/entrypoint.sh
index 7dfda05..acedcfd 100644
--- a/docker/entrypoint.sh
+++ b/docker/entrypoint.sh
@@ -9,6 +9,8 @@ mkdir -p "$_condor_local_dir/lock" "$_condor_local_dir/log" "$_condor_local_dir/
 # start condor
 condor_master
 
+condor_version
+
 # once the shared port daemon wakes up, use condor_who to wait for condor to stand up
 while [[ ! -s "${_condor_local_dir}/log/SharedPortLog" ]]
 do
diff --git a/docs/source/dependencies.rst b/docs/source/dependencies.rst
index 369ad43..35525ea 100644
--- a/docs/source/dependencies.rst
+++ b/docs/source/dependencies.rst
@@ -29,8 +29,9 @@ The built-in delivery methods are
 
 * ``docker`` - runs in a (possibly user-supplied) Docker container.
 * ``singularity`` - runs in a (possibly user-supplied) Singularity container.
+* ``shared`` - runs with the same Python installation used submit-side.
 * ``assume`` - assumes that the dependencies have already been installed at the execute location.
-* ``transplant`` - copy the user's Python installation to the execute node.
+* ``transplant`` - copy the submit-side Python installation to the execute location.
 
 More details on each of these methods can be found below.
 
@@ -71,8 +72,8 @@ At runtime:
 
 .. code-block:: python
 
-    htmap.settings['DELIVERY_METHOD'] = 'docker'
-    htmap.settings['DOCKER.IMAGE'] = "<repository>/<image>:<tag>"
+    htmap.settings["DELIVERY_METHOD"] = "docker"
+    htmap.settings["DOCKER.IMAGE"] = "<repository>/<image>:<tag>"
 
 In this mode, HTMap will run inside a Docker image that you provide.
 Remember that this Docker image needs to have the ``htmap`` module installed.
@@ -119,8 +120,8 @@ At runtime:
 
 .. code-block:: python
 
-    htmap.settings['DELIVERY_METHOD'] = 'singularity'
-    htmap.settings['SINGULARITY.IMAGE'] = "<image>"
+    htmap.settings["DELIVERY_METHOD"] = "singularity"
+    htmap.settings["SINGULARITY.IMAGE"] = "<image>"
 
 In this mode, HTMap will run inside a Singularity image that you provide.
 Remember that this Singularity image needs to have the ``cloudpickle`` module installed.
@@ -149,6 +150,37 @@ If you want to use your own Singularity image, just change the ``'SINGULARITY.IM
     If you get a ``stderr`` message from Singularity about a bind mount directory not existing, that's the problem.
 
 
+Run With a Shared Python Installation
+-------------------------------------
+
+In your ``~/.htmaprc`` file:
+
+.. code-block:: bash
+
+    DELIVERY_METHOD = "shared"
+
+At runtime:
+
+.. code-block:: python
+
+    htmap.settings["DELIVERY_METHOD"] = "shared"
+
+In this mode, HTMap will run your components using the same interpreter being
+used submit-side.
+This requires that that the submit-side Python interpreter be
+"visible" from the execute location, which is usually done in one of two ways:
+
+1. The execute location **is** the submit location
+   (i.e., they are the same physical computer).
+2. The Python installation is stored on a shared filesystem, such that submit
+   and execute can both see the same file paths.
+
+Either way, the practical requirement to use this delivery method is that the
+path to the Python interpreter
+(i.e., ``python -c "import sys, print(sys.executable)"``)
+is the same both submit-side and execute-side.
+
+
 Assume Dependencies are Present
 -------------------------------
 
@@ -162,7 +194,7 @@ At runtime:
 
 .. code-block:: python
 
-    htmap.settings['DELIVERY_METHOD'] = 'assume'
+    htmap.settings["DELIVERY_METHOD"] = 'assume'
 
 In this mode, HTMap assumes that a Python installation with all Python dependencies is already present.
 This will almost surely require some additional setup by your HTCondor pool's administrators.
@@ -183,7 +215,7 @@ At runtime:
 
 .. code-block:: python
 
-    htmap.settings['DELIVERY_METHOD'] = 'transplant'
+    htmap.settings["DELIVERY_METHOD"] = 'transplant'
 
 If you are running HTMap from a standalone Python install (like an Anaconda installation),
 you can use this delivery mechanism to transfer a copy of your entire Python install.
diff --git a/docs/source/versions/v0_6_0.rst b/docs/source/versions/v0_6_0.rst
new file mode 100644
index 0000000..f09b410
--- /dev/null
+++ b/docs/source/versions/v0_6_0.rst
@@ -0,0 +1,29 @@
+v0.6.0
+======
+
+New Features
+------------
+
+* Add the ``shared`` delivery method, which supports HTCondor pools that use
+  shared filesystems to make Python installations available universally.
+  Issues: https://github.com/htcondor/htmap/issues/195 and https://github.com/htcondor/htmap/issues/198
+
+
+Changed/Deprecated Features
+---------------------------
+
+
+Bug Fixes
+---------
+
+
+Known Issues
+------------
+
+* Execution errors that result in the job being terminated but no output being
+  produced are still not handled entirely gracefully. Right now, the component
+  state will just show as ``ERRORED``, but there won't be an actual error report.
+* Map component state may become corrupted when a map is manually vacated.
+  Force-removal may be needed to clean up maps if HTCondor and HTMap disagree
+  about the state of their components.
+  Issue: https://github.com/htcondor/htmap/issues/129
diff --git a/htmap/__init__.py b/htmap/__init__.py
index 22617f8..cdd6842 100644
--- a/htmap/__init__.py
+++ b/htmap/__init__.py
@@ -45,7 +45,7 @@ from .maps import (
 from .holds import ComponentHold
 from .errors import ComponentError
 from .state import ComponentStatus
-from .options import MapOptions, register_delivery_mechanism
+from .options import MapOptions, register_delivery_method
 from .management import (
     status,
     status_json,
diff --git a/htmap/options.py b/htmap/options.py
index 7e8df3f..83713d6 100644
--- a/htmap/options.py
+++ b/htmap/options.py
@@ -228,7 +228,7 @@ def create_submit_object_and_itemdata(
     return sub, itemdata
 
 
-def register_delivery_mechanism(
+def register_delivery_method(
     name: str,
     options_func: Callable[[str, Path], dict],
     setup_func: Optional[Callable[[str, Path], None]] = None,
@@ -332,7 +332,7 @@ def _get_base_descriptors_for_assume(
     }
 
 
-register_delivery_mechanism(
+register_delivery_method(
     'assume',
     options_func = _get_base_descriptors_for_assume,
 )
@@ -351,12 +351,33 @@ def _get_base_descriptors_for_docker(
     }
 
 
-register_delivery_mechanism(
+register_delivery_method(
     'docker',
     options_func = _get_base_descriptors_for_docker,
 )
 
 
+def _get_base_descriptors_for_shared(
+    tag: str,
+    map_dir: Path,
+) -> dict:
+    return {
+        'universe': 'vanilla',
+        'executable': Path(sys.executable).absolute().as_posix(),
+        'transfer_executable': 'False',
+        'arguments': f'{names.RUN_SCRIPT} $(component)',
+        'transfer_input_files': [
+            (map_dir / names.RUN_SCRIPT).as_posix(),
+        ],
+    }
+
+
+register_delivery_method(
+    'shared',
+    options_func = _get_base_descriptors_for_shared,
+)
+
+
 def _get_base_descriptors_for_singularity(
     tag: str,
     map_dir: Path,
@@ -373,7 +394,7 @@ def _get_base_descriptors_for_singularity(
     }
 
 
-register_delivery_mechanism(
+register_delivery_method(
     'singularity',
     options_func = _get_base_descriptors_for_singularity,
 )
@@ -451,7 +472,7 @@ def _get_transplant_hash(pip_freeze_output: bytes) -> str:
     return h.hexdigest()
 
 
-register_delivery_mechanism(
+register_delivery_method(
     'transplant',
     options_func = _get_base_descriptors_for_transplant,
     setup_func = _run_delivery_setup_for_transplant,
