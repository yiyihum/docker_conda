diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9d172892..56fb6b94 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -6,6 +6,7 @@ All notable changes to this project will be documented in this file.
 
 ### Added
 - [#1459](https://github.com/pints-team/pints/pull/1459) Added the `iRprop-` local optimiser.
+- [#1456](https://github.com/pints-team/pints/pull/1456) Added an optional `translation` to `ScalingTransform` and added a `UnitCubeTransformation` class.
 - [#1432](https://github.com/pints-team/pints/pull/1432) Added 2 new stochastic models: production and degradation model, Schlogl's system of chemical reactions. Moved the stochastic logistic model into `pints.stochastic` to take advantage of the `MarkovJumpModel`.
 - [#1420](https://github.com/pints-team/pints/pull/1420) The `Optimiser` class now distinguishes between a best-visited point (`x_best`, with score `f_best`) and a best-guessed point (`x_guessed`, with approximate score `f_guessed`). For most optimisers, the two values are equivalent. The `OptimisationController` still tracks `x_best` and `f_best` by default, but this can be modified using the methods `set_f_guessed_tracking` and `f_guessed_tracking`.
 - [#1417](https://github.com/pints-team/pints/pull/1417) Added a module `toy.stochastic` for stochastic models. In particular, `toy.stochastic.MarkovJumpModel` implements Gillespie's algorithm for easier future implementation of stochastic models.
diff --git a/docs/source/transformations.rst b/docs/source/transformations.rst
index 6c2ab145..38d9880e 100644
--- a/docs/source/transformations.rst
+++ b/docs/source/transformations.rst
@@ -44,6 +44,7 @@ Overview:
 - :class:`TransformedErrorMeasure`
 - :class:`TransformedLogPDF`
 - :class:`TransformedLogPrior`
+- :class:`UnitCubeTransformation`
 
 
 .. autoclass:: ComposedTransformation
@@ -67,3 +68,6 @@ Overview:
 .. autoclass:: TransformedLogPDF
 
 .. autoclass:: TransformedLogPrior
+
+.. autoclass:: UnitCubeTransformation
+
diff --git a/pints/__init__.py b/pints/__init__.py
index 6b1c0211..e315c237 100644
--- a/pints/__init__.py
+++ b/pints/__init__.py
@@ -269,6 +269,7 @@ from ._transformation import (
     TransformedErrorMeasure,
     TransformedLogPDF,
     TransformedLogPrior,
+    UnitCubeTransformation,
 )
 
 
diff --git a/pints/_transformation.py b/pints/_transformation.py
index cf0da5a4..0fe44538 100644
--- a/pints/_transformation.py
+++ b/pints/_transformation.py
@@ -834,23 +834,32 @@ class RectangularBoundariesTransformation(Transformation):
 
 class ScalingTransformation(Transformation):
     """
-    Scales the input parameters by multiplying with an array ``scalings``.
+    Scales the input parameters by multiplying with an array ``scalings`` and
+    adding an optional array ``translation``.
 
     The transformation from model parameters ``p`` to search parameters ``q``
     is performed as::
 
-        q = p * scalings
+        q = (p + translation) * scalings
 
     Its Jacobian matrix is a diagonal matrix with ``1 / scalings`` on the
     diagonal.
 
     Extends :class:`Transformation`.
     """
-    def __init__(self, scalings):
+    def __init__(self, scalings, translation=None):
         self._s = pints.vector(scalings)
         self._inv_s = 1. / self._s
         self._n_parameters = len(self._s)
 
+        self._translation = None
+        if translation is not None:
+            self._translation = pints.vector(translation)
+            if len(self._translation) != self._n_parameters:
+                raise ValueError(
+                    'Translation must be None or be a vector of the same'
+                    ' length as the scalings.')
+
     def elementwise(self):
         """ See :meth:`Transformation.elementwise()`. """
         return True
@@ -878,12 +887,16 @@ class ScalingTransformation(Transformation):
 
     def to_model(self, q):
         """ See :meth:`Transformation.to_model()`. """
-        q = pints.vector(q)
-        return self._inv_s * q
+        p = self._inv_s * pints.vector(q)
+        if self._translation is not None:
+            p -= self._translation
+        return p
 
     def to_search(self, p):
         """ See :meth:`Transformation.to_search()`. """
         p = pints.vector(p)
+        if self._translation is not None:
+            p = p + self._translation
         return self._s * p
 
 
@@ -1134,3 +1147,32 @@ class TransformedLogPrior(TransformedLogPDF, pints.LogPrior):
         for i, p in enumerate(ps):
             qs[i, :] = self._transform.to_search(p)
         return qs
+
+
+class UnitCubeTransformation(ScalingTransformation):
+    """
+    Maps a parameter space onto the unit (hyper)cube.
+
+    Transformations from model parameters ``p`` to search parameters ``q`` are
+    made as::
+
+        q = (p - lower) / (upper - lower)
+
+    Extends :class:`ScalingTransformation`.
+    """
+    def __init__(self, lower, upper):
+
+        # Check input
+        self._lower = pints.vector(lower)
+        self._upper = pints.vector(upper)
+        self._n_parameters = len(lower)
+        del lower, upper
+
+        if len(self._upper) != self._n_parameters:
+            raise ValueError(
+                'Lower and upper bounds must have the same length.')
+        if not np.all(self._upper > self._lower):
+            raise ValueError('Upper bounds must exceed lower bounds.')
+
+        super().__init__(1 / (self._upper - self._lower), -self._lower)
+
