diff --git a/recipe_scrapers/_utils.py b/recipe_scrapers/_utils.py
index fe3a401a..064046bd 100644
--- a/recipe_scrapers/_utils.py
+++ b/recipe_scrapers/_utils.py
@@ -75,6 +75,9 @@ def get_minutes(element, return_zero_on_not_found=False):  # noqa: C901: TODO
 
     matched = TIME_REGEX.search(time_text)
 
+    if matched is None or not any(matched.groupdict().values()):
+        return None
+
     minutes = int(matched.groupdict().get("minutes") or 0)
     hours_matched = matched.groupdict().get("hours")
     days_matched = matched.groupdict().get("days")
diff --git a/recipe_scrapers/nihhealthyeating.py b/recipe_scrapers/nihhealthyeating.py
index 2f89803c..435b3615 100644
--- a/recipe_scrapers/nihhealthyeating.py
+++ b/recipe_scrapers/nihhealthyeating.py
@@ -23,7 +23,9 @@ class NIHHealthyEating(AbstractScraper):
         if time_table is None:
             raise ElementNotFoundInHtml("Table with times was not found.")
 
-        return sum([get_minutes(td) for td in time_table.find_all("td")])
+        return sum(
+            [get_minutes(td) for td in time_table.find_all("td") if get_minutes(td)]
+        )
 
     def yields(self):
         # This content must be present for all recipes on this website.
diff --git a/recipe_scrapers/tastykitchen.py b/recipe_scrapers/tastykitchen.py
index 30774625..2531a3ca 100644
--- a/recipe_scrapers/tastykitchen.py
+++ b/recipe_scrapers/tastykitchen.py
@@ -12,12 +12,9 @@ class TastyKitchen(AbstractScraper):
         return self.soup.find("h1", {"itemprop": "name"}).get_text()
 
     def total_time(self):
-        return sum(
-            [
-                get_minutes(self.soup.find("time", {"itemprop": "prepTime"})),
-                get_minutes(self.soup.find("time", {"itemprop": "cookTime"})),
-            ]
-        )
+        prep_time = get_minutes(self.soup.find("time", {"itemprop": "prepTime"})) or 0
+        cook_time = get_minutes(self.soup.find("time", {"itemprop": "cookTime"})) or 0
+        return prep_time + cook_time
 
     def yields(self):
         return get_yields(self.soup.find("span", {"itemprop": "yield"}))
