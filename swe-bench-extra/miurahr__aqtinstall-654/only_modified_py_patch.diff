diff --git a/aqt/installer.py b/aqt/installer.py
index c6cc0c7..4af89c8 100644
--- a/aqt/installer.py
+++ b/aqt/installer.py
@@ -213,6 +213,21 @@ class Cli:
     def _check_qt_arg_version_offline(self, version):
         return version in Settings.available_offline_installer_version
 
+    def _warning_unknown_qt_version(self, qt_version: str) -> str:
+        return self._warning_on_bad_combination(f'Qt version "{qt_version}"')
+
+    def _warning_unknown_target_arch_combo(self, args: List[str]) -> str:
+        return self._warning_on_bad_combination(f"target combination \"{' '.join(args)}\"")
+
+    def _warning_unexpected_modules(self, unexpected_modules: List[str]) -> str:
+        return self._warning_on_bad_combination(f"modules {unexpected_modules}")
+
+    def _warning_on_bad_combination(self, combo_message: str) -> str:
+        return (
+            f"Specified {combo_message} did not exist when this version of aqtinstall was released. "
+            "This may not install properly, but we will try our best."
+        )
+
     def _set_sevenzip(self, external):
         sevenzip = external
         if sevenzip is None:
@@ -257,13 +272,10 @@ class Cli:
             return False
         return True
 
-    def _check_modules_arg(self, qt_version, modules):
-        if modules is None:
-            return True
+    def _select_unexpected_modules(self, qt_version: str, modules: Optional[List[str]]) -> List[str]:
+        """Returns a sorted list of all the requested modules that do not exist in the combinations.json file."""
         available = Settings.available_modules(qt_version)
-        if available is None:
-            return False
-        return all([m in available for m in modules])
+        return sorted(set(modules or []) - set(available or []))
 
     @staticmethod
     def _determine_qt_version(
@@ -388,14 +400,14 @@ class Cli:
         auto_desktop_archives: List[QtPackage] = get_auto_desktop_archives()
 
         if not self._check_qt_arg_versions(qt_version):
-            self.logger.warning("Specified Qt version is unknown: {}.".format(qt_version))
+            self.logger.warning(self._warning_unknown_qt_version(qt_version))
         if not self._check_qt_arg_combination(qt_version, os_name, target, arch):
-            self.logger.warning(
-                "Specified target combination is not valid or unknown: {} {} {}".format(os_name, target, arch)
-            )
+            self.logger.warning(self._warning_unknown_target_arch_combo([os_name, target, arch]))
         all_extra = True if modules is not None and "all" in modules else False
-        if not all_extra and not self._check_modules_arg(qt_version, modules):
-            self.logger.warning("Some of specified modules are unknown.")
+        if not all_extra:
+            unexpected_modules = self._select_unexpected_modules(qt_version, modules)
+            if unexpected_modules:
+                self.logger.warning(self._warning_unexpected_modules(unexpected_modules))
 
         qt_archives: QtArchives = retry_on_bad_connection(
             lambda base_url: QtArchives(
@@ -465,7 +477,7 @@ class Cli:
         archives = args.archives
         all_extra = True if modules is not None and "all" in modules else False
         if not self._check_qt_arg_versions(qt_version):
-            self.logger.warning("Specified Qt version is unknown: {}.".format(qt_version))
+            self.logger.warning(self._warning_unknown_qt_version(qt_version))
 
         srcdocexamples_archives: SrcDocExamplesArchives = retry_on_bad_connection(
             lambda base_url: SrcDocExamplesArchives(
@@ -562,7 +574,7 @@ class Cli:
 
         for arch in archs:
             if not self._check_tools_arg_combination(os_name, tool_name, arch):
-                self.logger.warning("Specified target combination is not valid: {} {} {}".format(os_name, tool_name, arch))
+                self.logger.warning(self._warning_unknown_target_arch_combo([os_name, tool_name, arch]))
 
             tool_archives: ToolArchives = retry_on_bad_connection(
                 lambda base_url: ToolArchives(

