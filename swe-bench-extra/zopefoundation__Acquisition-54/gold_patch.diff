diff --git a/CHANGES.rst b/CHANGES.rst
index c0226e2..d7ed057 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,9 @@ Changelog
 4.9 (unreleased)
 ----------------
 
-- Nothing changed yet.
+- On CPython no longer omit compiling the C code when ``PURE_PYTHON`` is
+  required. Just evaluate it at runtime.
+  (`#53 <https://github.com/zopefoundation/Acquisition/issues/53>`_)
 
 
 4.8 (2021-07-20)
diff --git a/setup.py b/setup.py
index 4ab4ed7..0de7c4f 100644
--- a/setup.py
+++ b/setup.py
@@ -26,8 +26,7 @@ with open('CHANGES.rst') as f:
 # PyPy won't build the extension.
 py_impl = getattr(platform, 'python_implementation', lambda: None)
 is_pypy = py_impl() == 'PyPy'
-is_pure = 'PURE_PYTHON' in os.environ
-if is_pypy or is_pure:
+if is_pypy:
     ext_modules = []
 else:
     ext_modules = [
@@ -53,7 +52,9 @@ setup(
     classifiers=[
         "Development Status :: 6 - Mature",
         "Environment :: Web Environment",
-        "Framework :: Zope2",
+        "Framework :: Zope :: 2",
+        "Framework :: Zope :: 4",
+        "Framework :: Zope :: 5",
         "License :: OSI Approved :: Zope Public License",
         "Operating System :: OS Independent",
         "Programming Language :: Python",
diff --git a/src/Acquisition/__init__.py b/src/Acquisition/__init__.py
index d82f6b7..6a23ffa 100644
--- a/src/Acquisition/__init__.py
+++ b/src/Acquisition/__init__.py
@@ -4,7 +4,6 @@ from __future__ import absolute_import, print_function
 
 
 import os
-import operator
 import platform
 import sys
 import types
@@ -18,12 +17,9 @@ from .interfaces import IAcquirer
 from .interfaces import IAcquisitionWrapper
 
 IS_PYPY = getattr(platform, 'python_implementation', lambda: None)() == 'PyPy'
-IS_PURE = 'PURE_PYTHON' in os.environ
-
-
+IS_PURE = int(os.environ.get('PURE_PYTHON', '0'))
+CAPI = not (IS_PYPY or IS_PURE)
 Acquired = "<Special Object Used to Force Acquisition>"
-
-
 _NOT_FOUND = object()  # marker
 
 ###
@@ -917,7 +913,7 @@ def aq_inContextOf(self, o, inner=True):
     return False
 
 
-if not (IS_PYPY or IS_PURE):  # pragma: no cover
+if CAPI:  # pragma: no cover
     # Make sure we can import the C extension of our dependency.
     from ExtensionClass import _ExtensionClass  # NOQA
     from ._Acquisition import *  # NOQA
