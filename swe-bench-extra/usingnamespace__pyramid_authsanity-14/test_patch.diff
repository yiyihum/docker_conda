diff --git a/.github/workflows/ci-tests.yml b/.github/workflows/ci-tests.yml
new file mode 100644
index 0000000..f2debd8
--- /dev/null
+++ b/.github/workflows/ci-tests.yml
@@ -0,0 +1,95 @@
+name: Build and test
+
+on:
+    # Only on pushes to master or one of the release branches we build on push
+    push:
+        branches:
+            - master
+        tags:
+    # Build pull requests
+    pull_request:
+
+jobs:
+    test:
+        strategy:
+            matrix:
+                py:
+                    - "3.6"
+                    - "3.7"
+                    - "3.8"
+                    - "3.9"
+                    - "pypy3"
+                os:
+                    - "ubuntu-latest"
+                    - "windows-latest"
+                    - "macos-latest"
+                architecture:
+                    - x64
+                    - x86
+
+                include:
+                    # Only run coverage on ubuntu-latest, except on pypy3
+                    - os: "ubuntu-latest"
+                      pytest-args: "--cov"
+                    - os: "ubuntu-latest"
+                      py: "pypy3"
+                      pytest-args: ""
+
+                exclude:
+                    # Linux and macOS don't have x86 python
+                    - os: "ubuntu-latest"
+                      architecture: x86
+                    - os: "macos-latest"
+                      architecture: x86
+                    # PyPy3 on Windows doesn't seem to work
+                    - os: "windows-latest"
+                      py: "pypy3"
+
+        name: "Python: ${{ matrix.py }}-${{ matrix.architecture }} on ${{ matrix.os }}"
+        runs-on: ${{ matrix.os }}
+        steps:
+            - uses: actions/checkout@v2
+            - name: Setup python
+              uses: actions/setup-python@v2
+              with:
+                  python-version: ${{ matrix.py }}
+                  architecture: ${{ matrix.architecture }}
+            - run: pip install tox
+            - name: Running tox
+              run: tox -e py -- ${{ matrix.pytest-args }}
+    coverage:
+        runs-on: ubuntu-latest
+        name: Validate coverage
+        steps:
+            - uses: actions/checkout@v2
+            - name: Setup python
+              uses: actions/setup-python@v1
+              with:
+                  python-version: 3.9
+                  architecture: x64
+            - run: pip install tox
+            - run: tox -e py39-cover,coverage
+    docs:
+        runs-on: ubuntu-latest
+        name: Build the documentation
+        steps:
+            - uses: actions/checkout@v2
+            - name: Setup python
+              uses: actions/setup-python@v2
+              with:
+                  python-version: 3.9
+                  architecture: x64
+            - run: pip install tox
+            - run: tox -e docs
+    lint:
+        runs-on: ubuntu-latest
+        name: Lint the package
+        steps:
+            - uses: actions/checkout@v2
+            - name: Setup python
+              uses: actions/setup-python@v2
+              with:
+                  python-version: 3.9
+                  architecture: x64
+            - run: pip install tox
+            - run: tox -e lint
diff --git a/tests/test_authpolicy.py b/tests/test_authpolicy.py
index 6eadb85..99f2c84 100644
--- a/tests/test_authpolicy.py
+++ b/tests/test_authpolicy.py
@@ -18,7 +18,7 @@ from pyramid_authsanity.interfaces import (
 
 def test_clean_principal_invalid():
     from pyramid_authsanity.policy import _clean_principal
-    from pyramid.security import Everyone
+    from pyramid.authorization import Everyone
 
     ret = _clean_principal(Everyone)
 
@@ -129,7 +129,7 @@ class TestAuthServicePolicy(object):
         assert authuserid is None
 
     def test_no_user_effective_principals(self):
-        from pyramid.security import Everyone
+        from pyramid.authorization import Everyone
         context = None
         request = self._makeOneRequest()
         source = fake_source_init([None, None])(context, request)
@@ -142,7 +142,7 @@ class TestAuthServicePolicy(object):
         assert [Everyone] == groups
 
     def test_user_bad_principal_effective_principals(self):
-        from pyramid.security import Everyone
+        from pyramid.authorization import Everyone
         context = None
         request = self._makeOneRequest()
         source = fake_source_init([Everyone, 'valid'])(context, request)
@@ -155,7 +155,7 @@ class TestAuthServicePolicy(object):
         assert [Everyone] == groups
 
     def test_effective_principals(self):
-        from pyramid.security import Everyone, Authenticated
+        from pyramid.authorization import Everyone, Authenticated
         context = None
         request = self._makeOneRequest()
         source = fake_source_init(['test', 'valid'])(context, request)
@@ -306,7 +306,7 @@ class TestAuthServicePolicyIntegration(object):
         assert authuserid is None
 
     def test_no_user_effective_principals(self):
-        from pyramid.security import Everyone
+        from pyramid.authorization import Everyone
         request = self._makeOneRequest()
         source = fake_source_init([None, None])
         auth = fake_auth_init()
@@ -318,7 +318,7 @@ class TestAuthServicePolicyIntegration(object):
         assert [Everyone] == groups
 
     def test_user_bad_principal_effective_principals(self):
-        from pyramid.security import Everyone
+        from pyramid.authorization import Everyone
         request = self._makeOneRequest()
         source = fake_source_init([Everyone, 'valid'])
         auth = fake_auth_init(fake_userid=Everyone, valid_tickets=['valid'])
@@ -330,7 +330,7 @@ class TestAuthServicePolicyIntegration(object):
         assert [Everyone] == groups
 
     def test_effective_principals(self):
-        from pyramid.security import Everyone, Authenticated
+        from pyramid.authorization import Everyone, Authenticated
         request = self._makeOneRequest()
         source = fake_source_init(['test', 'valid'])
         auth = fake_auth_init(fake_userid='test', valid_tickets=['valid'])
