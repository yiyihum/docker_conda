diff --git a/setup.py b/setup.py
index e386efb..2c1f362 100644
--- a/setup.py
+++ b/setup.py
@@ -9,7 +9,7 @@ except IOError:
     README = CHANGES = ''
 
 requires = [
-    'pyramid',
+    'pyramid>=2.0',
     'zope.interface',
     'pyramid_services>=0.3'
 ]
@@ -27,7 +27,7 @@ docs_require = requires + [
 
 setup(
     name='pyramid_authsanity',
-    version='1.1.0',
+    version='2.0.0',
     description='An auth policy for the Pyramid Web Framework with sane defaults.',
     long_description=README + '\n\n' + CHANGES,
     classifiers=[
@@ -36,11 +36,10 @@ setup(
         'Intended Audience :: Developers',
         'License :: OSI Approved :: ISC License (ISCL)',
         'Programming Language :: Python',
-        'Programming Language :: Python :: 2.6',
-        'Programming Language :: Python :: 2.7',
-        'Programming Language :: Python :: 3.4',
-        'Programming Language :: Python :: 3.5',
         'Programming Language :: Python :: 3.6',
+        'Programming Language :: Python :: 3.7',
+        'Programming Language :: Python :: 3.8',
+        'Programming Language :: Python :: 3.9',
         'Programming Language :: Python :: Implementation :: CPython',
         'Programming Language :: Python :: Implementation :: PyPy',
     ],
diff --git a/src/pyramid_authsanity/policy.py b/src/pyramid_authsanity/policy.py
index d30d392..96b6d0f 100644
--- a/src/pyramid_authsanity/policy.py
+++ b/src/pyramid_authsanity/policy.py
@@ -6,7 +6,7 @@ from pyramid.interfaces import (
     IDebugLogger,
     )
 
-from pyramid.security import (
+from pyramid.authorization import (
     Authenticated,
     Everyone,
     )
diff --git a/src/pyramid_authsanity/sources.py b/src/pyramid_authsanity/sources.py
index 48d392b..ff9a047 100644
--- a/src/pyramid_authsanity/sources.py
+++ b/src/pyramid_authsanity/sources.py
@@ -1,5 +1,3 @@
-from pyramid.compat import native_
-
 from webob.cookies import (
     JSONSerializer,
     SignedCookieProfile,
@@ -129,6 +127,13 @@ def HeaderAuthSourceInitializer(
                 serializer=serializer,
                 )
 
+        def _native(s, encoding='latin-1', errors='strict'):
+            """If ``s`` is an instance of ``str``, return
+            ``s``, otherwise return ``str(s, encoding, errors)``"""
+            if isinstance(s, str):
+                return s
+            return str(s, encoding, errors)
+
         def _get_authorization(self):
             try:
                 type, token = self.request.authorization
@@ -154,7 +159,7 @@ def HeaderAuthSourceInitializer(
                 self.cur_val = None
 
             token = self._create_authorization(value)
-            auth_info = native_(b'Bearer ' + token, 'latin-1', 'strict')
+            auth_info = self._native(b'Bearer ' + token, 'latin-1', 'strict')
             return [('Authorization', auth_info)]
 
         def headers_forget(self):
