diff --git a/tests/test_enums.py b/tests/test_enums.py
index ee3e2bc..bd2fb15 100644
--- a/tests/test_enums.py
+++ b/tests/test_enums.py
@@ -30,6 +30,7 @@ def test_succesfull_enum_typed_field():
     schema = make_executable_schema([enum_definition, enum_field], query)
     result = graphql_sync(schema, "{ testEnum }")
     assert result.errors is None
+    assert result.data == {"testEnum": TEST_VALUE}
 
 
 def test_unsuccesfull_invalid_enum_value_evaluation():
@@ -57,6 +58,18 @@ def test_successful_enum_value_passed_as_argument():
     assert result.errors is None, result.errors
 
 
+def test_unbound_enum_arg_is_transformed_to_string():
+    query = QueryType()
+    query.set_field("testEnum", lambda *_, value: value == "NEWHOPE")
+
+    schema = make_executable_schema([enum_definition, enum_param], [query])
+    result = graphql_sync(schema, "{ testEnum(value: NEWHOPE) }")
+    assert result.data["testEnum"] is True
+
+    result = graphql_sync(schema, "{ testEnum(value: EMPIRE) }")
+    assert result.data["testEnum"] is False
+
+
 def test_unsuccessful_invalid_enum_value_passed_as_argument():
     query = QueryType()
     query.set_field("testEnum", lambda *_, value: True)
@@ -137,9 +150,12 @@ def test_enum_arg_is_transformed_to_internal_value():
     query.set_field("testEnum", lambda *_, value: value == PyEnum.NEWHOPE)
 
     schema = make_executable_schema([enum_definition, enum_param], [query, py_enum])
-    result = graphql_sync(schema, "{ testEnum(value: %s) }" % TEST_VALUE)
+    result = graphql_sync(schema, "{ testEnum(value: NEWHOPE) }")
     assert result.data["testEnum"] is True
 
+    result = graphql_sync(schema, "{ testEnum(value: EMPIRE) }")
+    assert result.data["testEnum"] is False
+
 
 class PyIntEnum(IntEnum):
     NEWHOPE = 1977
@@ -164,5 +180,8 @@ def test_int_enum_arg_is_transformed_to_internal_value():
     query.set_field("testEnum", lambda *_, value: value == PyIntEnum.NEWHOPE)
 
     schema = make_executable_schema([enum_definition, enum_param], [query, int_enum])
-    result = graphql_sync(schema, "{ testEnum(value: %s) }" % TEST_VALUE)
+    result = graphql_sync(schema, "{ testEnum(value: NEWHOPE) }")
     assert result.data["testEnum"] is True
+
+    result = graphql_sync(schema, "{ testEnum(value: EMPIRE) }")
+    assert result.data["testEnum"] is False
