diff --git a/tests/func/test_data_ls.py b/tests/func/test_data_ls.py
new file mode 100644
--- /dev/null
+++ b/tests/func/test_data_ls.py
@@ -0,0 +1,31 @@
+from operator import itemgetter
+
+from dvc.repo.data import ls
+
+
+def test_data_ls(tmp_dir, dvc):
+    assert not list(ls(dvc))
+
+    tmp_dir.dvc_gen("bar", "bar")
+    tmp_dir.gen("foo", "foo")
+    dvc.add(
+        "foo",
+        meta={"key": "value"},
+        labels=["l1", "l2"],
+        type="t1",
+        desc="foo",
+    )
+
+    foo_entry = {
+        "path": "foo",
+        "desc": "foo",
+        "type": "t1",
+        "labels": ["l1", "l2"],
+        "meta": {"key": "value"},
+    }
+    assert sorted(ls(dvc), key=itemgetter("path")) == [
+        {"path": "bar"},
+        foo_entry,
+    ]
+    assert list(ls(dvc, targets=["foo"])) == [foo_entry]
+    assert list(ls(dvc, targets=["foo"], recursive=True)) == [foo_entry]
diff --git a/tests/unit/command/test_compat_flag.py b/tests/unit/command/test_compat_flag.py
--- a/tests/unit/command/test_compat_flag.py
+++ b/tests/unit/command/test_compat_flag.py
@@ -15,6 +15,7 @@ def _id_gen(val) -> str:
     "args, key",
     [
         (["dag", "--show-md"], "markdown"),
+        (["data", "ls", "--show-md"], "markdown"),
         (["diff", "--show-json"], "json"),
         (["diff", "--show-md"], "markdown"),
         (["experiments", "diff", "--show-json"], "json"),
diff --git a/tests/unit/command/test_data_ls.py b/tests/unit/command/test_data_ls.py
new file mode 100644
--- /dev/null
+++ b/tests/unit/command/test_data_ls.py
@@ -0,0 +1,96 @@
+import pytest
+
+from dvc.cli import parse_args
+from dvc.commands.data import CmdDataLs
+
+
+def test_cli(mocker):
+    mocker.patch("dvc.repo.Repo")
+    ls = mocker.patch("dvc.repo.data.ls", return_value={})
+    show_table_spy = mocker.spy(CmdDataLs, "_show_table")
+
+    cli_args = parse_args(
+        [
+            "data",
+            "ls",
+            "--labels",
+            "label1,label2",
+            "--labels",
+            "label3",
+            "--type",
+            "type1,type2",
+            "--type",
+            "type3",
+            "target",
+            "--recursive",
+            "--md",
+        ]
+    )
+
+    assert cli_args.func == CmdDataLs
+    cmd = cli_args.func(cli_args)
+    assert cmd.run() == 0
+
+    ls.assert_called_once_with(
+        cmd.repo,
+        targets=["target"],
+        recursive=True,
+    )
+    show_table_spy.assert_called_once_with(
+        {},
+        filter_labels={"label1", "label2", "label3"},
+        filter_types={"type1", "type2", "type3"},
+        markdown=True,
+    )
+
+
+EXAMPLE_DATA = [
+    {
+        "path": "model.pkl",
+        "desc": "desc",
+        "type": "model",
+        "labels": ["get-started", "dataset-registry"],
+        "meta": {"key": "value", "key1": "value1"},
+    },
+    {
+        "path": "model.pkl",
+        "desc": "desc",
+        "type": "model",
+        "labels": ["get-started", "example"],
+    },
+    {"path": "unlabeled.txt"},
+]
+
+
+@pytest.mark.parametrize(
+    "markdown, expected_output",
+    [
+        (
+            True,
+            """\
+| Path      | Type   | Labels                       | Description   |
+|-----------|--------|------------------------------|---------------|
+| model.pkl | model  | get-started,dataset-registry | desc          |
+| model.pkl | model  | get-started,example          | desc          |\n""",
+        ),
+        (
+            False,
+            """\
+ Path       Type   Labels                        Description
+ model.pkl  model  get-started,dataset-registry  desc
+ model.pkl  model  get-started,example           desc""",
+        ),
+    ],
+    ids=["markdown", "default"],
+)
+def test_ls(capsys, markdown, expected_output):
+    CmdDataLs._show_table(
+        EXAMPLE_DATA,
+        filter_types={"model"},
+        filter_labels={"get-started", "dataset-registry"},
+        markdown=markdown,
+    )
+    out, err = capsys.readouterr()
+    assert not err
+    out = "\n".join(line.rstrip() for line in out.splitlines())
+    assert out == expected_output
