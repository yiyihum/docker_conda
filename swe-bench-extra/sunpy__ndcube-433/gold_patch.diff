diff --git a/changelog/433.trivial.rst b/changelog/433.trivial.rst
new file mode 100644
index 0000000..3ae9cab
--- /dev/null
+++ b/changelog/433.trivial.rst
@@ -0,0 +1,1 @@
+Adds a function to compare the physical types of two WCS objects.
diff --git a/ndcube/utils/wcs.py b/ndcube/utils/wcs.py
index 25a0e47..228fc24 100644
--- a/ndcube/utils/wcs.py
+++ b/ndcube/utils/wcs.py
@@ -8,7 +8,7 @@ import numbers
 from collections import UserDict
 
 import numpy as np
-from astropy.wcs.wcsapi import low_level_api
+from astropy.wcs.wcsapi import BaseHighLevelWCS, BaseLowLevelWCS, low_level_api
 
 __all__ = ['array_indices_for_world_objects', 'convert_between_array_and_pixel_axes',
            'calculate_world_indices_from_axes', 'wcs_ivoa_mapping',
@@ -429,3 +429,51 @@ def array_indices_for_world_objects(wcs, axes=None):
         array_index = convert_between_array_and_pixel_axes(pixel_index, wcs.pixel_n_dim)
         array_indices[oinds] = tuple(array_index[::-1])  # Invert from pixel order to array order
     return tuple(ai for ai in array_indices if ai)
+
+
+def get_low_level_wcs(wcs, name='wcs'):
+    """
+    Returns a low level WCS object from a low level or high level WCS.
+
+    Parameters
+    ----------
+    wcs: `astropy.wcs.wcsapi.BaseHighLevelWCS` or `astropy.wcs.wcsapi.BaseLowLevelWCS`
+        The input WCS for getting the low level WCS object.
+
+    name: `str`, optional
+        Any name for the wcs to be used in the exception that could be raised.
+
+    Returns
+    -------
+    wcs: `astropy.wcs.wcsapi.BaseLowLevelWCS`
+    """
+
+    if isinstance(wcs, BaseHighLevelWCS):
+        return wcs.low_level_wcs
+    elif isinstance(wcs, BaseLowLevelWCS):
+        return wcs
+    else:
+        raise(f'{name} must implement either BaseHighLevelWCS or BaseLowLevelWCS')
+
+
+def compare_wcs_physical_types(source_wcs, target_wcs):
+    """
+    Checks to see if two WCS objects have the same physical types in the same order.
+
+    Parameters
+    ----------
+    source_wcs : `astropy.wcs.wcsapi.BaseHighLevelWCS` or `astropy.wcs.wcsapi.BaseLowLevelWCS`
+        The WCS which is currently in use, usually `self.wcs`.
+
+    target_wcs : `astropy.wcs.wcsapi.BaseHighLevelWCS` or `astropy.wcs.wcsapi.BaseLowLevelWCS`
+        The WCS object on which the NDCube is to be reprojected.
+
+    Returns
+    -------
+    result : `bool`
+    """
+
+    source_wcs = get_low_level_wcs(source_wcs, 'source_wcs')
+    target_wcs = get_low_level_wcs(target_wcs, 'target_wcs')
+
+    return source_wcs.world_axis_physical_types == target_wcs.world_axis_physical_types
