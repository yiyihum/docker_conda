diff --git a/src/_repobee/config.py b/src/_repobee/config.py
index 1a1b194..59aabe2 100644
--- a/src/_repobee/config.py
+++ b/src/_repobee/config.py
@@ -11,7 +11,7 @@ Contains the code required for pre-configuring user interfaces.
 import os
 import pathlib
 import configparser
-from typing import Union, List, Mapping, Optional
+from typing import Union, List, Mapping
 
 import daiquiri
 import repobee_plug as plug
@@ -137,21 +137,8 @@ def get_all_tasks() -> List[plug.Task]:
     return plug.manager.hook.setup_task() + plug.manager.hook.clone_task()
 
 
-def _fetch_token() -> Optional[str]:
-    token = os.getenv(constants.TOKEN_ENV)
-    token_from_old = os.getenv(constants.TOKEN_ENV_OLD)
-    if token_from_old:
-        LOGGER.warning(
-            "The {} environment variable has been deprecated, "
-            "use {} instead".format(
-                constants.TOKEN_ENV_OLD, constants.TOKEN_ENV
-            )
-        )
-    return token or token_from_old
-
-
 def _read_defaults(config_file: pathlib.Path) -> dict:
-    token = _fetch_token()
+    token = os.getenv(constants.TOKEN_ENV)
     if not config_file.is_file():
         return {} if not token else dict(token=token)
     defaults = dict(_read_config(config_file)[constants.DEFAULTS_SECTION_HDR])
diff --git a/src/_repobee/constants.py b/src/_repobee/constants.py
index 5a55a27..a174027 100644
--- a/src/_repobee/constants.py
+++ b/src/_repobee/constants.py
@@ -39,4 +39,3 @@ ORDERED_CONFIGURABLE_ARGS = (
 CONFIGURABLE_ARGS = set(ORDERED_CONFIGURABLE_ARGS)
 
 TOKEN_ENV = "REPOBEE_TOKEN"
-TOKEN_ENV_OLD = "REPOBEE_OAUTH"
diff --git a/src/_repobee/main.py b/src/_repobee/main.py
index 8b994a6..b51af81 100644
--- a/src/_repobee/main.py
+++ b/src/_repobee/main.py
@@ -57,7 +57,7 @@ def main(sys_args: List[str]):
                 parsed_preparser_args.plug
                 or config.get_plugin_names(config_file)
             ) or []
-            plugin.initialize_plugins(plugin_names)
+            plugin.initialize_plugins(plugin_names, allow_filepath=True)
 
         config.execute_config_hooks(config_file)
         ext_commands = plug.manager.hook.create_extension_command()
diff --git a/src/_repobee/plugin.py b/src/_repobee/plugin.py
index 2fff203..cc3f7ca 100644
--- a/src/_repobee/plugin.py
+++ b/src/_repobee/plugin.py
@@ -14,6 +14,9 @@ import tempfile
 import pkgutil
 import pathlib
 import importlib
+import hashlib
+import os
+import sys
 from types import ModuleType
 from typing import List, Optional, Iterable, Mapping, Union
 
@@ -39,7 +42,9 @@ def _external_plugin_qualname(plugin_name):
 
 
 def load_plugin_modules(
-    plugin_names: Iterable[str], allow_qualified: bool = False
+    plugin_names: Iterable[str],
+    allow_qualified: bool = False,
+    allow_filepath: bool = False,
 ) -> List[ModuleType]:
     """Load the given plugins. Plugins are loaded such that they are executed
     in the same order that they are specified in the plugin_names list.
@@ -56,18 +61,16 @@ def load_plugin_modules(
         # import nr 2
         from repobee_javac import javac
 
-    If ``allow_qualified`` is True, an additional import using the provided
-    plugin names as-is is also attempted.
-
-    .. code-block:: python
-
         # import nr 3 (only if allow_qualified)
         import javac
 
+        # import nr 4 (only if allow_filepath)
+        # Dynamically import using the name as a filepath
+
     Args:
         plugin_names: A list of plugin names.
-        allow_qualified: If True, attempts to import modules using the plugin
-            names as qualified paths.
+        allow_qualified: Allow the plugin to be specified by a qualified name.
+        allow_filepath: Allows the plugin to be specified as a filepath.
     Returns:
         a list of loaded modules.
     """
@@ -79,6 +82,7 @@ def load_plugin_modules(
             _try_load_module(_plugin_qualname(name))
             or _try_load_module(_external_plugin_qualname(name))
             or (allow_qualified and _try_load_module(name))
+            or (allow_filepath and _try_load_module_from_filepath(name))
         )
         if not plug_mod:
             msg = "failed to load plugin module " + name
@@ -87,6 +91,30 @@ def load_plugin_modules(
     return loaded_modules
 
 
+def _try_load_module_from_filepath(path: str) -> Optional[ModuleType]:
+    """Try to load a module from the specified filepath.
+
+    Adapted from code by Sebastian Rittau (https://stackoverflow.com/a/67692).
+
+    Args:
+        path: A path to a Python module.
+    Returns:
+        The module if loaded successfully, or None if there was no module at
+        the path.
+    """
+    package_name = f"_{hashlib.sha1(path.encode(sys.getdefaultencoding()))}"
+    module_name = pathlib.Path(path).stem
+    qualname = f"{package_name}.{module_name}"
+    spec = importlib.util.spec_from_file_location(qualname, path)
+    if not spec:
+        return None
+
+    mod = importlib.util.module_from_spec(spec)
+    spec.loader.exec_module(mod)
+
+    return mod
+
+
 def _try_load_module(qualname: str) -> Optional[ModuleType]:
     """Try to load a module.
 
@@ -208,7 +236,9 @@ def try_register_plugin(
 
 
 def initialize_plugins(
-    plugin_names: List[str] = None, allow_qualified: bool = False,
+    plugin_names: List[str] = None,
+    allow_qualified: bool = False,
+    allow_filepath: bool = False,
 ) -> List[Union[ModuleType, type]]:
     """Load and register plugins.
 
@@ -216,18 +246,23 @@ def initialize_plugins(
         plugin_names: An optional list of plugin names that overrides the
             configuration file's plugins.
         allow_qualified: Allows the plugin names to be qualified.
+        allow_filepath: Allows the plugin to be specified as a filepath.
     Returns:
         A list of registered modules and classes.
     Raises:
         :py:class:`_repobee.exception.PluginLoadError`
     """
+    if not allow_filepath:
+        _check_no_filepaths(plugin_names)
     if not allow_qualified:
         _check_no_qualified_names(plugin_names)
 
     registered_plugins = plug.manager.get_plugins()
     plug_modules = [
         p
-        for p in load_plugin_modules(plugin_names, allow_qualified)
+        for p in load_plugin_modules(
+            plugin_names, allow_qualified, allow_filepath
+        )
         if p not in registered_plugins
     ]
     registered = register_plugins(plug_modules)
@@ -235,8 +270,20 @@ def initialize_plugins(
     return registered
 
 
+def _is_filepath(name: str) -> bool:
+    return os.pathsep in name or os.path.exists(name)
+
+
+def _check_no_filepaths(names: List[str]):
+    filepaths = [name for name in names if _is_filepath(name)]
+    if filepaths:
+        raise exception.PluginLoadError(f"Filepaths not allowed: {filepaths}")
+
+
 def _check_no_qualified_names(names: List[str]):
-    qualified_names = [name for name in names if "." in name]
+    qualified_names = [
+        name for name in names if "." in name and not _is_filepath(name)
+    ]
     if qualified_names:
         raise exception.PluginLoadError(
             f"Qualified names not allowed: {qualified_names}"
@@ -244,9 +291,18 @@ def _check_no_qualified_names(names: List[str]):
 
 
 def resolve_plugin_version(plugin_module: ModuleType) -> Optional[str]:
-    """Return the version of the top-level package containing the plugin, or
-    None if it is not defined.
+    """Return the version of this plugin. Tries to resolve the version by
+    first checking if the plugin module itself has a ``__version__``
+    attribute, and then the top level package.
+
+    Args:
+        plugin_module: A plugin module.
+    Returns:
+        The version if found, otherwise None.
     """
+    if hasattr(plugin_module, "__version__"):
+        return plugin_module.__version__
+
     pkg_name = plugin_module.__package__.split(".")[0]
     pkg_module = _try_load_module(pkg_name)
     return (
