diff --git a/tests/unittests/arguments/test_config.py b/tests/unittests/arguments/test_config.py
index 6f126d8..2efa764 100644
--- a/tests/unittests/arguments/test_config.py
+++ b/tests/unittests/arguments/test_config.py
@@ -240,6 +240,12 @@ class ConfigStyleTest(ConfigTestCase):
         """ Test that a command line style overrides the style in the config file. """
         self.assertEqual("vim", parse_arguments()[1].style)
 
+    @patch.object(sys, "argv", ["next-action", "--style"])
+    @patch.object(config, "open", mock_open(read_data="style: default"))
+    def test_cancel_style(self):
+        """ Test that --style without style cancels the style in the config file. """
+        self.assertEqual(None, parse_arguments()[1].style)
+
     @patch.object(sys, "argv", ["next-action"])
     @patch.object(config, "open", mock_open(read_data="style: invalid_style"))
     @patch.object(sys.stderr, "write")
diff --git a/tests/unittests/arguments/test_parser.py b/tests/unittests/arguments/test_parser.py
index 6a262af..f9eebd5 100644
--- a/tests/unittests/arguments/test_parser.py
+++ b/tests/unittests/arguments/test_parser.py
@@ -11,7 +11,7 @@ from next_action.arguments import config, parse_arguments
 
 USAGE_MESSAGE = textwrap.fill(
     "usage: next-action [-h] [--version] [-c [<config.cfg>]] [-f <todo.txt>] [-n <number> | -a] [-o] "
-    "[-p [<priority>]] [<context|project> ...]", 120) + "\n"
+    "[-p [<priority>]] [-s [<style>]] [<context|project> ...]", 120) + "\n"
 
 
 class ParserTestCase(unittest.TestCase):
diff --git a/tests/unittests/test_cli.py b/tests/unittests/test_cli.py
index f26c609..b477698 100644
--- a/tests/unittests/test_cli.py
+++ b/tests/unittests/test_cli.py
@@ -65,8 +65,8 @@ class CLITest(unittest.TestCase):
         os.environ['COLUMNS'] = "120"  # Fake that the terminal is wide enough.
         self.assertRaises(SystemExit, next_action)
         self.assertEqual(call("""\
-usage: next-action [-h] [--version] [-c [<config.cfg>]] [-f <todo.txt>] [-n <number> | -a] [-o] [-p [<priority>]]
-[<context|project> ...]
+usage: next-action [-h] [--version] [-c [<config.cfg>]] [-f <todo.txt>] [-n <number> | -a] [-o] [-p [<priority>]] [-s
+[<style>]] [<context|project> ...]
 
 Show the next action in your todo.txt. The next action is selected from the tasks in the todo.txt file based on task
 properties such as priority, due date, and creation date. Limit the tasks from which the next action is selected by
@@ -88,7 +88,7 @@ optional arguments:
   -o, --overdue         show only overdue next actions
   -p [<priority>], --priority [<priority>]
                         minimum priority (A-Z) of next actions to show (default: None)
-  -s <style>, --style <style>
+  -s [<style>], --style [<style>]
                         colorize the output; available styles: abap, algol, algol_nu, arduino, autumn, borland, bw,
                         colorful, default, emacs, friendly, fruity, igor, lovelace, manni, monokai, murphy, native,
                         paraiso-dark, paraiso-light, pastie, perldoc, rainbow_dash, rrt, tango, trac, vim, vs, xcode
