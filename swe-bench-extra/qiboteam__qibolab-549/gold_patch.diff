diff --git a/src/qibolab/compilers/compiler.py b/src/qibolab/compilers/compiler.py
index 1ba19a6a..1b2af972 100644
--- a/src/qibolab/compilers/compiler.py
+++ b/src/qibolab/compilers/compiler.py
@@ -6,6 +6,7 @@ from qibo.config import raise_error
 
 from qibolab.compilers.default import (
     cz_rule,
+    gpi2_rule,
     identity_rule,
     measurement_rule,
     rz_rule,
@@ -46,6 +47,7 @@ class Compiler:
                 gates.RZ: rz_rule,
                 gates.U3: u3_rule,
                 gates.CZ: cz_rule,
+                gates.GPI2: gpi2_rule,
                 gates.M: measurement_rule,
             }
         )
diff --git a/src/qibolab/compilers/default.py b/src/qibolab/compilers/default.py
index c8840d61..1bc5393b 100644
--- a/src/qibolab/compilers/default.py
+++ b/src/qibolab/compilers/default.py
@@ -24,6 +24,17 @@ def rz_rule(gate, platform):
     return PulseSequence(), {qubit: gate.parameters[0]}
 
 
+def gpi2_rule(gate, platform):
+    """Rule for GPI2."""
+    qubit = gate.target_qubits[0]
+    theta = gate.parameters[0]
+
+    sequence = PulseSequence()
+    pulse = platform.create_RX90_pulse(qubit, start=0, relative_phase=theta)
+    sequence.add(pulse)
+    return sequence, {}
+
+
 def u3_rule(gate, platform):
     """U3 applied as RZ-RX90-RZ-RX90-RZ."""
     qubit = gate.target_qubits[0]
diff --git a/src/qibolab/transpilers/gate_decompositions.py b/src/qibolab/transpilers/gate_decompositions.py
index be12f885..94cd1016 100644
--- a/src/qibolab/transpilers/gate_decompositions.py
+++ b/src/qibolab/transpilers/gate_decompositions.py
@@ -121,6 +121,8 @@ onequbit_dec.add(gates.RY, lambda gate: [gates.U3(0, gate.parameters[0], 0, 0)])
 # apply virtually by changing ``phase`` instead of using pulses
 onequbit_dec.add(gates.RZ, lambda gate: [gates.RZ(0, gate.parameters[0])])
 # apply virtually by changing ``phase`` instead of using pulses
+onequbit_dec.add(gates.GPI2, lambda gate: [gates.GPI2(0, gate.parameters[0])])
+# implemented as single RX90 pulse
 onequbit_dec.add(gates.U1, lambda gate: [gates.RZ(0, gate.parameters[0])])
 onequbit_dec.add(gates.U2, lambda gate: [gates.U3(0, np.pi / 2, gate.parameters[0], gate.parameters[1])])
 onequbit_dec.add(gates.U3, lambda gate: [gates.U3(0, gate.parameters[0], gate.parameters[1], gate.parameters[2])])
