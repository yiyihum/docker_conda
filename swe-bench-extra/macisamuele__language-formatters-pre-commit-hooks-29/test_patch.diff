diff --git a/tests/pretty_format_golang_test.py b/tests/pretty_format_golang_test.py
index f910b23..5875b3c 100644
--- a/tests/pretty_format_golang_test.py
+++ b/tests/pretty_format_golang_test.py
@@ -6,7 +6,9 @@ from __future__ import unicode_literals
 import shutil
 
 import pytest
+from mock import patch
 
+from language_formatters_pre_commit_hooks.pretty_format_golang import _get_eol_attribute
 from language_formatters_pre_commit_hooks.pretty_format_golang import pretty_format_golang
 from tests.conftest import change_dir_context
 from tests.conftest import undecorate_function
@@ -46,3 +48,17 @@ def test_pretty_format_golang_autofix(tmpdir, undecorate_method):
     # file was formatted (shouldn't trigger linter again)
     ret = undecorate_method([srcfile.strpath])
     assert ret == 0
+
+
+@pytest.mark.parametrize(
+    'exit_status, output, expected_eol',
+    [
+        (1, '', None),
+        (0, '', None),
+        (0, 'a\0eol\0lf\0', 'lf'),
+    ],
+)
+@patch('language_formatters_pre_commit_hooks.pretty_format_golang.run_command', autospec=True)
+def test__get_eol_attribute(mock_run_command, exit_status, output, expected_eol):
+    mock_run_command.return_value = (exit_status, output)
+    assert _get_eol_attribute() == expected_eol
diff --git a/tests/utils_test.py b/tests/utils_test.py
index 9924209..f47593c 100644
--- a/tests/utils_test.py
+++ b/tests/utils_test.py
@@ -4,6 +4,7 @@ from __future__ import print_function
 from __future__ import unicode_literals
 
 import os
+import sys
 from os.path import basename
 
 import mock
@@ -18,8 +19,15 @@ from language_formatters_pre_commit_hooks.utils import run_command
 @pytest.mark.parametrize(
     'command, expected_status, expected_output',
     [
-        ['echo "1"', 0, '1\n'],
-        ['echo "1" | grep 0', 1, ''],
+        ('echo 1', 0, '1{}'.format(os.linesep)),
+        pytest.param(
+            'echo 1 | grep 0', 1, '',
+            marks=pytest.mark.skipif(condition=sys.platform == 'win32', reason='Windows does not have `grep`'),
+        ),
+        pytest.param(
+            'echo 1 | findstr 0', 1, '',
+            marks=pytest.mark.skipif(condition=sys.platform != 'win32', reason='Linux and MacOS does not have `findstr`'),
+        ),
         ['true', 0, ''],
         ['false', 1, ''],
     ],
