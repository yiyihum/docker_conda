diff --git a/pyproject.toml b/pyproject.toml
index 8cb4f5a8..39178818 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -25,6 +25,8 @@ pep8-naming = ["-N802", "-N803", "-N806", "-N815"]
 pep8-naming = ["-N802", "-N803", "-N806", "-N816"]
 [tool.flakeheaven.exceptions."rdflib/plugins/serializers/turtle.py"]
 pep8-naming = ["-N802", "-N806", "-N815"]
+[tool.flakeheaven.exceptions."rdflib/__init__.py"]
+pycodestyle = ["-E402"]
 
 
 [tool.black]
diff --git a/rdflib/__init__.py b/rdflib/__init__.py
index 2dbba042..47b3d146 100644
--- a/rdflib/__init__.py
+++ b/rdflib/__init__.py
@@ -84,6 +84,8 @@ __all__ = [
     "VOID",
     "XSD",
     "util",
+    "plugin",
+    "query",
 ]
 
 import logging
@@ -157,7 +159,7 @@ In particular, this determines how the rich comparison operators for
 Literal work, eq, __neq__, __lt__, etc.
 """
 
-from rdflib import plugin, query
+
 from rdflib.graph import ConjunctiveGraph, Dataset, Graph
 from rdflib.namespace import (
     BRICK,
@@ -190,9 +192,5 @@ from rdflib.namespace import (
 )
 from rdflib.term import BNode, IdentifiedNode, Literal, URIRef, Variable
 
-# tedious sop to flake8
-assert plugin
-assert query
-
-from rdflib import util
-from rdflib.container import *
+from rdflib import plugin, query, util  # isort:skip
+from rdflib.container import *  # isort:skip # noqa:F401,F403
diff --git a/rdflib/graph.py b/rdflib/graph.py
index 401b14a7..eb1dc7bc 100644
--- a/rdflib/graph.py
+++ b/rdflib/graph.py
@@ -24,8 +24,11 @@ from urllib.parse import urlparse
 from urllib.request import url2pathname
 from warnings import warn
 
+import rdflib.exceptions as exceptions
+import rdflib.namespace as namespace  # noqa: F401 # This is here because it is used in a docstring.
+import rdflib.plugin as plugin
+import rdflib.query as query
 import rdflib.util  # avoid circular dependency
-from rdflib import exceptions, namespace, plugin, query
 from rdflib.collection import Collection
 from rdflib.exceptions import ParserError
 from rdflib.namespace import RDF, Namespace, NamespaceManager
@@ -120,13 +123,13 @@ Instantiating Graphs with default store (Memory) and default identifier
     <class 'rdflib.term.BNode'>
 
 Instantiating Graphs with a Memory store and an identifier -
-<http://rdflib.net>:
+<https://rdflib.github.io>:
 
-    >>> g = Graph('Memory', URIRef("http://rdflib.net"))
+    >>> g = Graph('Memory', URIRef("https://rdflib.github.io"))
     >>> g.identifier
-    rdflib.term.URIRef('http://rdflib.net')
+    rdflib.term.URIRef('https://rdflib.github.io')
     >>> str(g)  # doctest: +NORMALIZE_WHITESPACE
-    "<http://rdflib.net> a rdfg:Graph;rdflib:storage
+    "<https://rdflib.github.io> a rdfg:Graph;rdflib:storage
      [a rdflib:Store;rdfs:label 'Memory']."
 
 Creating a ConjunctiveGraph - The top level container for all named Graphs
@@ -146,7 +149,7 @@ via triple pattern:
     >>> g.add((statementId, RDF.type, RDF.Statement)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g.add((statementId, RDF.subject,
-    ...     URIRef("http://rdflib.net/store/ConjunctiveGraph"))) # doctest: +ELLIPSIS
+    ...     URIRef("https://rdflib.github.io/store/ConjunctiveGraph"))) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g.add((statementId, RDF.predicate, namespace.RDFS.label)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
@@ -217,7 +220,7 @@ the same store:
     >>> g1.add((stmt1, RDF.type, RDF.Statement)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g1.add((stmt1, RDF.subject,
-    ...     URIRef('http://rdflib.net/store/ConjunctiveGraph'))) # doctest: +ELLIPSIS
+    ...     URIRef('https://rdflib.github.io/store/ConjunctiveGraph'))) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g1.add((stmt1, RDF.predicate, namespace.RDFS.label)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
@@ -226,7 +229,7 @@ the same store:
     >>> g2.add((stmt2, RDF.type, RDF.Statement)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g2.add((stmt2, RDF.subject,
-    ...     URIRef('http://rdflib.net/store/ConjunctiveGraph'))) # doctest: +ELLIPSIS
+    ...     URIRef('https://rdflib.github.io/store/ConjunctiveGraph'))) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g2.add((stmt2, RDF.predicate, RDF.type)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
@@ -235,7 +238,7 @@ the same store:
     >>> g3.add((stmt3, RDF.type, RDF.Statement)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g3.add((stmt3, RDF.subject,
-    ...     URIRef('http://rdflib.net/store/ConjunctiveGraph'))) # doctest: +ELLIPSIS
+    ...     URIRef('https://rdflib.github.io/store/ConjunctiveGraph'))) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
     >>> g3.add((stmt3, RDF.predicate, namespace.RDFS.comment)) # doctest: +ELLIPSIS
     <Graph identifier=... (<class 'rdflib.graph.Graph'>)>
@@ -272,7 +275,7 @@ Parsing N3 from a string
     ... @prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
     ... @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
     ... [ a rdf:Statement ;
-    ...   rdf:subject <http://rdflib.net/store#ConjunctiveGraph>;
+    ...   rdf:subject <https://rdflib.github.io/store#ConjunctiveGraph>;
     ...   rdf:predicate rdfs:label;
     ...   rdf:object "Conjunctive Graph" ] .
     ... '''
@@ -282,11 +285,11 @@ Parsing N3 from a string
 
 Using Namespace class:
 
-    >>> RDFLib = Namespace("http://rdflib.net/")
+    >>> RDFLib = Namespace("https://rdflib.github.io/")
     >>> RDFLib.ConjunctiveGraph
-    rdflib.term.URIRef('http://rdflib.net/ConjunctiveGraph')
+    rdflib.term.URIRef('https://rdflib.github.io/ConjunctiveGraph')
     >>> RDFLib["Graph"]
-    rdflib.term.URIRef('http://rdflib.net/Graph')
+    rdflib.term.URIRef('https://rdflib.github.io/Graph')
 
 """
 
@@ -2002,7 +2005,7 @@ class Dataset(ConjunctiveGraph):
     >>> for c in ds.graphs():  # doctest: +SKIP
     ...     print(c)  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
     DEFAULT
-    http://rdlib.net/.well-known/genid/rdflib/N...
+    https://rdflib.github.io/.well-known/genid/rdflib/N...
     http://www.example.com/gr
     >>> # Note that the Dataset.graphs() call returns names of empty graphs,
     >>> # too. This can be restricted:
@@ -2046,10 +2049,12 @@ class Dataset(ConjunctiveGraph):
 
     def graph(self, identifier=None, base=None):
         if identifier is None:
-            from rdflib.term import rdflib_skolem_genid
+            from rdflib.term import _SKOLEM_DEFAULT_AUTHORITY, rdflib_skolem_genid
 
             self.bind(
-                "genid", "http://rdflib.net" + rdflib_skolem_genid, override=False
+                "genid",
+                _SKOLEM_DEFAULT_AUTHORITY + rdflib_skolem_genid,
+                override=False,
             )
             identifier = BNode().skolemize()
 
diff --git a/rdflib/parser.py b/rdflib/parser.py
index 6bce4842..ceee51d4 100644
--- a/rdflib/parser.py
+++ b/rdflib/parser.py
@@ -31,6 +31,7 @@ from urllib.parse import urljoin
 from urllib.request import Request, url2pathname, urlopen
 from xml.sax import xmlreader
 
+import rdflib.util
 from rdflib import __version__
 from rdflib.namespace import Namespace
 from rdflib.term import URIRef
@@ -183,7 +184,8 @@ class StringInputSource(InputSource):
 
 
 headers = {
-    "User-agent": "rdflib-%s (http://rdflib.net/; eikeon@eikeon.com)" % __version__
+    "User-agent": "rdflib-%s (https://rdflib.github.io/; eikeon@eikeon.com)"
+    % __version__
 }
 
 
@@ -447,7 +449,7 @@ def _create_input_source_from_location(
 
     base = pathlib.Path.cwd().as_uri()
 
-    absolute_location = URIRef(location, base=base)
+    absolute_location = URIRef(rdflib.util._iri2uri(location), base=base)
 
     if absolute_location.startswith("file:///"):
         filename = url2pathname(absolute_location.replace("file:///", "/"))
diff --git a/rdflib/term.py b/rdflib/term.py
index 30dd7fc6..c82df3d5 100644
--- a/rdflib/term.py
+++ b/rdflib/term.py
@@ -75,6 +75,8 @@ if TYPE_CHECKING:
     from .namespace import NamespaceManager
     from .paths import AlternativePath, InvPath, NegatedPath, Path, SequencePath
 
+_SKOLEM_DEFAULT_AUTHORITY = "https://rdflib.github.io"
+
 logger = logging.getLogger(__name__)
 skolem_genid = "/.well-known/genid/"
 rdflib_skolem_genid = "/.well-known/genid/rdflib/"
@@ -482,7 +484,7 @@ class BNode(IdentifiedNode):
         .. versionadded:: 4.0
         """
         if authority is None:
-            authority = "http://rdlib.net/"
+            authority = _SKOLEM_DEFAULT_AUTHORITY
         if basepath is None:
             basepath = rdflib_skolem_genid
         skolem = "%s%s" % (basepath, str(self))
diff --git a/rdflib/util.py b/rdflib/util.py
index 246b5cc8..b73a9594 100644
--- a/rdflib/util.py
+++ b/rdflib/util.py
@@ -36,6 +36,7 @@ from typing import (
     Tuple,
     TypeVar,
 )
+from urllib.parse import quote, urlsplit, urlunsplit
 
 import rdflib.graph  # avoid circular dependency
 from rdflib.compat import sign
@@ -58,6 +59,7 @@ __all__ = [
     "find_roots",
     "get_tree",
     "_coalesce",
+    "_iri2uri",
 ]
 
 
@@ -476,3 +478,36 @@ def _coalesce(*args: Optional[_AnyT]) -> Optional[_AnyT]:
         if arg is not None:
             return arg
     return None
+
+
+def _iri2uri(iri: str) -> str:
+    """
+    Convert an IRI to a URI (Python 3).
+    https://stackoverflow.com/a/42309027
+    https://stackoverflow.com/a/40654295
+    netloc should be encoded using IDNA;
+    non-ascii URL path should be encoded to UTF-8 and then percent-escaped;
+    non-ascii query parameters should be encoded to the encoding of a page
+    URL was extracted from (or to the encoding server uses), then
+    percent-escaped.
+    >>> _iri2uri("https://dbpedia.org/resource/Almería")
+    'https://dbpedia.org/resource/Almer%C3%ADa'
+    """
+
+    (scheme, netloc, path, query, fragment) = urlsplit(iri)
+
+    # Just support http/https, otherwise return the iri unmolested
+    if scheme not in ["http", "https"]:
+        return iri
+
+    scheme = quote(scheme)
+    netloc = quote(netloc.encode("idna").decode("utf-8"))
+    path = quote(path)
+    query = quote(query)
+    fragment = quote(fragment)
+    uri = urlunsplit((scheme, netloc, path, query, fragment))
+
+    if iri.endswith("#") and not uri.endswith("#"):
+        uri += "#"
+
+    return uri
