diff --git a/tests/test_field_for_schema.py b/tests/test_field_for_schema.py
index 4d8b0a0..8f356e9 100644
--- a/tests/test_field_for_schema.py
+++ b/tests/test_field_for_schema.py
@@ -1,11 +1,12 @@
+import inspect
 import typing
 import unittest
 from enum import Enum
 from typing import Dict, Optional, Union, Any
 
-from marshmallow import fields
+from marshmallow import fields, Schema
 
-from marshmallow_dataclass import field_for_schema
+from marshmallow_dataclass import field_for_schema, dataclass
 
 
 class TestFieldForSchema(unittest.TestCase):
@@ -13,7 +14,11 @@ class TestFieldForSchema(unittest.TestCase):
         self.assertEqual(a.__class__, b.__class__, "field class")
 
         def attrs(x):
-            return {k: repr(v) for k, v in x.__dict__.items() if not k.startswith("_")}
+            return {
+                k: f"{v!r} ({v.__mro__!r})" if inspect.isclass(v) else repr(v)
+                for k, v in x.__dict__.items()
+                if not k.startswith("_")
+            }
 
         self.assertEqual(attrs(a), attrs(b))
 
@@ -97,6 +102,19 @@ class TestFieldForSchema(unittest.TestCase):
             fields.Integer(required=False, description="UserId", default=0, missing=0),
         )
 
+    def test_marshmallow_dataclass(self):
+        class NewSchema(Schema):
+            pass
+
+        @dataclass(base_schema=NewSchema)
+        class NewDataclass:
+            pass
+
+        self.assertFieldsEqual(
+            field_for_schema(NewDataclass, metadata=dict(required=False)),
+            fields.Nested(NewDataclass.Schema),
+        )
+
 
 if __name__ == "__main__":
     unittest.main()
