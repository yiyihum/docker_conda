diff --git a/test/conftest.py b/test/conftest.py
index d821c60..3fe8689 100644
--- a/test/conftest.py
+++ b/test/conftest.py
@@ -48,6 +48,15 @@ def simple_attribute(request):
     logging.debug(f"Attribute type: {some_type}, passed value: '{passed_value}', expected: '{expected_value}'")
     return request.param
 
+@pytest.fixture
+def assert_equals_stdout(capsys):
+    def strip(string): return "".join(string.split())
+
+    def should_equal(expected: str, file_path: str=None):
+        out = capsys.readouterr().out
+        assert strip(out) == strip(expected), file_path
+    return should_equal
+
 
 @pytest.fixture(scope="module")
 def parser():
diff --git a/test/test_issue_46.py b/test/test_issue_46.py
new file mode 100644
index 0000000..5538fff
--- /dev/null
+++ b/test/test_issue_46.py
@@ -0,0 +1,99 @@
+from dataclasses import dataclass
+import simple_parsing
+import textwrap
+import pytest
+
+
+@dataclass
+class JBuildRelease:
+    id: int 
+    url: str  
+    docker_image: str  
+
+
+def test_issue_46(assert_equals_stdout):
+    parser = simple_parsing.ArgumentParser()
+    parser.add_argument('--run_id', type=str)
+    parser.add_arguments(JBuildRelease, dest="jbuild", prefix="jbuild")
+    
+    parser.print_help()
+    
+    assert_equals_stdout(textwrap.dedent("""\
+        usage: pytest [-h] [--run_id str] --jbuildid int --jbuildurl str
+                      --jbuilddocker_image str
+        
+        optional arguments:
+          -h, --help            show this help message and exit
+          --run_id str
+        
+        JBuildRelease ['jbuild']:
+          JBuildRelease(id:int, url:str, docker_image:str)
+        
+          --jbuildid int
+          --jbuildurl str
+          --jbuilddocker_image str
+        """
+    ))
+    from .testutils import raises_missing_required_arg
+    with raises_missing_required_arg():
+        args = parser.parse_args("--id 123 --jbuild.id 456 --jbuild.url bob --jbuild.docker_image foo".split())
+
+
+def test_issue_46_solution2(assert_equals_stdout):
+    # This (now) works:
+    parser = simple_parsing.ArgumentParser(add_dest_to_option_strings=True)
+    parser.add_argument('--run_id', type=str)
+    parser.add_arguments(JBuildRelease, dest="jbuild", prefix="jbuild.")
+    
+    parser.print_help()
+    assert_equals_stdout(textwrap.dedent("""\
+        usage: pytest [-h] [--run_id str] --jbuild.id int --jbuild.url str
+                      --jbuild.docker_image str
+
+        optional arguments:
+          -h, --help            show this help message and exit
+          --run_id str
+
+        JBuildRelease ['jbuild']:
+          JBuildRelease(id:int, url:str, docker_image:str)
+
+          --jbuild.id int
+          --jbuild.url str
+          --jbuild.docker_image str
+        """
+    ))
+
+
+@pytest.mark.xfail(reason="TODO: Issue #49")
+def test_conflict_with_regular_argparse_arg():
+    # This _should_ work, but it doesn't, adding a new issue for this:
+    # the problem: SimpleParsing doesn't yet detect 
+    # conflicts between arguments added the usual way with `add_argument` and those
+    # added through `add_arguments`.
+    parser = simple_parsing.ArgumentParser()
+    parser.add_argument('--id', type=str)
+    parser.add_arguments(JBuildRelease, dest="jbuild")
+    args = parser.parse_args("--id 123 --jbuild.id 456 --jbuild.url bob --jbuild.docker_image foo".split())
+    assert args.id == 123
+    assert args.jbuild.id == 456
+
+
+@pytest.mark.xfail(reason="TODO: Issue #49")
+def test_workaround():
+    from simple_parsing import mutable_field, ConflictResolution
+    # This also doesn't work, since the prefix is only added to the 'offending'
+    # argument, rather than to all the args in that group. 
+    @dataclass
+    class Main:
+        id: int
+        jbuild: JBuildRelease
+    
+    parser = simple_parsing.ArgumentParser()
+    parser.add_arguments(Main, "main")
+    args = parser.parse_args("--id 123 --jbuild.id 456 --jbuild.url bob --jbuild.docker_image foo".split())
+    args = args.main
+    assert args.id == 123
+    assert args.jbuild.id == 456
+    
+    
+    
\ No newline at end of file
diff --git a/test/test_issue_48.py b/test/test_issue_48.py
new file mode 100644
index 0000000..4ddc2d8
--- /dev/null
+++ b/test/test_issue_48.py
@@ -0,0 +1,45 @@
+from simple_parsing import ArgumentParser, field
+from dataclasses import dataclass
+
+@dataclass
+class InputArgs:
+    # Start date from which to collect data about base users. Input in iso format (YYYY-MM-DD).
+    # The date is included in the data
+    start_date: str = field(alias="s", metadata={'a':'b'})
+
+    # End date for collecting base users. Input in iso format (YYYY-MM-DD). The date is included in the data.
+    # Should not be before `start_date`
+    end_date: str = field(alias="e")
+
+
+from io import StringIO
+import textwrap
+
+
+def test_issue_48():
+    parser = ArgumentParser("Prepare input data for training")
+    parser.add_arguments(InputArgs, dest="args")
+    s = StringIO()
+    parser.print_help(file=s)
+    s.seek(0)
+    assert s.read().replace(" ", "") == textwrap.dedent("""\
+        usage: Prepare input data for training [-h] -s str -e str
+
+        optional arguments:
+          -h, --help            show this help message and exit
+        
+        InputArgs ['args']:
+          InputArgs(start_date:str, end_date:str)
+        
+          -s str, --start_date str
+                                Start date from which to collect data about base
+                                users. Input in iso format (YYYY-MM-DD). The date is
+                                included in the data (default: None)
+          -e str, --end_date str
+                                End date for collecting base users. Input in iso
+                                format (YYYY-MM-DD). The date is included in the data.
+                                Should not be before `start_date` (default: None)
+        """).replace(" ", "")
+    
+    
+    # args = parser.parse_args()
\ No newline at end of file
