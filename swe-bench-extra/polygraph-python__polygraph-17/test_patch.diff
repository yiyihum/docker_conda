diff --git a/polygraph/types/tests/test_scalars.py b/polygraph/types/tests/test_scalars.py
index 79ccae2..8eecd6a 100644
--- a/polygraph/types/tests/test_scalars.py
+++ b/polygraph/types/tests/test_scalars.py
@@ -1,5 +1,6 @@
 from unittest import TestCase
 
+from polygraph.types.basic_type import typedef
 from polygraph.types.scalar import ID, Boolean, Float, Int, String
 
 
@@ -43,7 +44,7 @@ class BooleanTest(TestCase):
     def test_class_types(self):
         self.assertTrue(Boolean(True))
         self.assertFalse(Boolean(False))
-        self.assertEqual(Boolean._type.name, "Boolean")
+        self.assertEqual(typedef(Boolean).name, "Boolean")
 
     def test_none(self):
         self.assertIsNone(Boolean(None))
diff --git a/polygraph/types/tests/test_types.py b/polygraph/types/tests/test_types.py
index 6dc1e57..aa4bd3a 100644
--- a/polygraph/types/tests/test_types.py
+++ b/polygraph/types/tests/test_types.py
@@ -1,19 +1,19 @@
 from unittest import TestCase, skip
 
 from polygraph.exceptions import PolygraphValueError
-from polygraph.types.basic_type import List, NonNull
+from polygraph.types.basic_type import List, NonNull, typedef
 from polygraph.types.scalar import Boolean, Int, String
 from polygraph.utils.trim_docstring import trim_docstring
 
 
 class TypeMetaTest(TestCase):
     def test_scalar_meta(self):
-        self.assertEqual(Int._type.name, "Int")
-        self.assertEqual(Int._type.description, trim_docstring(Int.__doc__))
-        self.assertEqual(String._type.name, "String")
-        self.assertEqual(String._type.description, trim_docstring(String.__doc__))
-        self.assertEqual(Boolean._type.name, "Boolean")
-        self.assertEqual(Boolean._type.description, trim_docstring(Boolean.__doc__))
+        self.assertEqual(typedef(Int).name, "Int")
+        self.assertEqual(typedef(Int).description, trim_docstring(Int.__doc__))
+        self.assertEqual(typedef(String).name, "String")
+        self.assertEqual(typedef(String).description, trim_docstring(String.__doc__))
+        self.assertEqual(typedef(Boolean).name, "Boolean")
+        self.assertEqual(typedef(Boolean).description, trim_docstring(Boolean.__doc__))
 
     def test_type_string(self):
         self.assertEqual(str(Int), "Int")
@@ -26,8 +26,8 @@ class TypeMetaTest(TestCase):
             """Not the description"""
             pass
 
-        self.assertEqual(FancyString._type.name, "String")
-        self.assertNotEqual(FancyString._type.description, "Not the description")
+        self.assertEqual(FancyString.__type.name, "String")
+        self.assertNotEqual(FancyString.__type.description, "Not the description")
 
 
 class NonNullTest(TestCase):
