diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 6f40899..d6a2932 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -1,6 +1,6 @@
 repos:
 -   repo: https://github.com/psf/black
-    rev: 21.9b0
+    rev: 21.12b0
     hooks:
     - id: black
       args: [--safe, --quiet]
@@ -10,7 +10,7 @@ repos:
     -   id: reorder-python-imports
         args: [ "--application-directories=.:src" , --py3-plus]
 -   repo: https://github.com/pre-commit/pre-commit-hooks
-    rev: v4.0.1
+    rev: v4.1.0
     hooks:
     -   id: trailing-whitespace
     -   id: end-of-file-fixer
@@ -21,16 +21,16 @@ repos:
     hooks:
     -   id: flake8
 -   repo: https://github.com/asottile/pyupgrade
-    rev: v2.29.0
+    rev: v2.29.1
     hooks:
     - id: pyupgrade
       args: [--py36-plus]
 -   repo: https://github.com/asottile/setup-cfg-fmt
-    rev: v1.18.0
+    rev: v1.20.0
     hooks:
     -   id: setup-cfg-fmt
 -   repo: https://github.com/pre-commit/mirrors-mypy
-    rev: 'v0.910-1'
+    rev: 'v0.930'
     hooks:
     -   id: mypy
         additional_dependencies:
diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index f4dd514..9704a01 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -1,3 +1,8 @@
+6.3.4
+======
+
+* compatibility adjustments for setuptools >58
+
 6.3.3
 ======
 
@@ -277,8 +282,8 @@ v3.0.0
 * require parse results to be ScmVersion or None (breaking change)
 * fix #266 by requiring the prefix word to be a word again
   (breaking change as the bug allowed arbitrary prefixes while the original feature only allowed words")
-* introduce a internal config object to allow the configruation fo tag parsing and prefixes
-  (thanks to @punkadiddle for introducing it and passing it trough)
+* introduce an internal config object to allow the configuration for tag parsing and prefixes
+  (thanks to @punkadiddle for introducing it and passing it through)
 
 v2.1.0
 ======
@@ -295,7 +300,7 @@ v2.0.0
 * fix #237 - correct imports in code examples
 * improve mercurial commit detection (thanks Aaron)
 * breaking change: remove support for setuptools before parsed versions
-* reintroduce manifest as the travis deploy cant use the file finder
+* reintroduce manifest as the travis deploy can't use the file finder
 * reconfigure flake8 for future compatibility with black
 * introduce support for branch name in version metadata and support a opt-in simplified semver version scheme
 
@@ -325,8 +330,8 @@ v1.16.0
 =======
 
 * drop support for eol python versions
-* #214 - fix missuse in surogate-escape api
-* add the node-and-timestamp local version sheme
+* #214 - fix misuse in surogate-escape api
+* add the node-and-timestamp local version scheme
 * respect git export ignores
 * avoid shlex.split on windows
 * fix #218 - better handling of mercurial edge-cases with tag commits
@@ -355,7 +360,7 @@ v1.15.5
 v1.15.4
 =======
 
-* fix issue #164: iterate all found entry points to avoid erros when pip remakes egg-info
+* fix issue #164: iterate all found entry points to avoid errors when pip remakes egg-info
 * enhance self-use to enable pip install from github again
 
 v1.15.3
@@ -386,7 +391,7 @@ v1.15.0
   when considering distance in commits
   (thanks Petre Mierlutiu)
 * fix issue #114: stop trying to be smart for the sdist
-  and ensure its always correctly usign itself
+  and ensure its always correctly using itself
 * update trove classifiers
 * fix issue #84: document using the installed package metadata for sphinx
 * fix issue #81: fail more gracious when git/hg are missing
@@ -401,7 +406,7 @@ v1.14.1
             don't consider untracked file
             (this was a regression due to #86 in v1.13.1)
 * consider the distance 0 when the git node is unknown
-  (happens when you haven't commited anything)
+  (happens when you haven't committed anything)
 
 v1.14.0
 =======
@@ -419,7 +424,7 @@ v1.13.0
 
 * fix regression caused by the fix of #101
   * assert types for version dumping
-  * strictly pass all versions trough parsed version metadata
+  * strictly pass all versions through parsed version metadata
 
 v1.12.0
 =======
@@ -457,7 +462,7 @@ v1.10.0
 * add support for overriding the version number via the
   environment variable SETUPTOOLS_SCM_PRETEND_VERSION
 
-* fix isssue #63 by adding the --match parameter to the git describe call
+* fix issue #63 by adding the --match parameter to the git describe call
   and prepare the possibility of passing more options to scm backends
 
 * fix issue #70 and #71 by introducing the parse keyword
@@ -501,7 +506,7 @@ v1.6.0
   before we would let the setup stay at version 0.0,
   now there is a ValueError
 
-* propperly raise errors on write_to missuse (thanks Te-jé Rodgers)
+* properly raise errors on write_to misuse (thanks Te-jé Rodgers)
 
 v1.5.5
 ======
@@ -538,7 +543,7 @@ v1.5.0
 v1.4.0
 ======
 
-* propper handling for sdist
+* proper handling for sdist
 * fix file-finder failure from windows
 * resuffle docs
 
diff --git a/README.rst b/README.rst
index fbfdb4c..20220d4 100644
--- a/README.rst
+++ b/README.rst
@@ -209,6 +209,39 @@ The underlying reason is, that services like *Read the Docs* sometimes change
 the working directory for good reasons and using the installed metadata
 prevents using needless volatile data there.
 
+Usage from Docker
+-----------------
+
+By default, docker will not copy the ``.git``  folder into your container.
+Therefore, builds with version inference might fail.
+Consequently, you can use the following snipped to infer the version from
+the host os without copying the entire ``.git`` folder to your Dockerfile.
+
+.. code:: dockerfile
+
+    RUN --mount=source=.git,target=.git,type=bind \
+        pip install --no-cache-dir -e .
+
+However, this build step introduces a dependency to the state of your local
+.git folder the build cache and triggers the long-running pip install process on every build.
+To optimize build caching, one can use an environment variable to pretend a pseudo
+version that is used to cache the results of the pip install process:
+
+.. code:: dockerfile
+
+    FROM python
+    COPY pyproject.toml
+    ARG PSEUDO_VERSION=1
+    RUN SETUPTOOLS_SCM_PRETEND_VERSION=${PSEUDO_VERSION} pip install -e .[test]
+    RUN --mount=source=.git,target=.git,type=bind pip install -e .
+
+Note that running this Dockerfile requires docker with BuildKit enabled
+`[docs] <https://github.com/moby/buildkit/blob/v0.8.3/frontend/dockerfile/docs/syntax.md>`_.
+
+To avoid BuildKit and mounting of the .git folder altogether, one can also pass the desired
+version as a build argument. Note that ``SETUPTOOLS_SCM_PRETEND_VERSION_FOR_${UPPERCASED_DIST_NAME}``
+is preferred over ``SETUPTOOLS_SCM_PRETEND_VERSION``.
+
 Notable Plugins
 ---------------
 
diff --git a/src/setuptools_scm/__main__.py b/src/setuptools_scm/__main__.py
index f3377b0..ef64819 100644
--- a/src/setuptools_scm/__main__.py
+++ b/src/setuptools_scm/__main__.py
@@ -1,15 +1,68 @@
-import sys
+import argparse
+import os
+import warnings
 
-from setuptools_scm import get_version
+from setuptools_scm import _get_version
+from setuptools_scm.config import Configuration
+from setuptools_scm.discover import walk_potential_roots
 from setuptools_scm.integration import find_files
 
 
 def main() -> None:
-    print("Guessed Version", get_version())
-    if "ls" in sys.argv:
-        for fname in find_files("."):
+    opts = _get_cli_opts()
+    root = opts.root or "."
+
+    try:
+        pyproject = opts.config or _find_pyproject(root)
+        root = opts.root or os.path.relpath(os.path.dirname(pyproject))
+        config = Configuration.from_file(pyproject)
+        config.root = root
+    except (LookupError, FileNotFoundError) as ex:
+        # no pyproject.toml OR no [tool.setuptools_scm]
+        warnings.warn(f"{ex}. Using default configuration.")
+        config = Configuration(root)
+
+    print(_get_version(config))
+
+    if opts.command == "ls":
+        for fname in find_files(config.root):
             print(fname)
 
 
+def _get_cli_opts():
+    prog = "python -m setuptools_scm"
+    desc = "Print project version according to SCM metadata"
+    parser = argparse.ArgumentParser(prog, description=desc)
+    # By default, help for `--help` starts with lower case, so we keep the pattern:
+    parser.add_argument(
+        "-r",
+        "--root",
+        default=None,
+        help='directory managed by the SCM, default: inferred from config file, or "."',
+    )
+    parser.add_argument(
+        "-c",
+        "--config",
+        default=None,
+        metavar="PATH",
+        help="path to 'pyproject.toml' with setuptools_scm config, "
+        "default: looked up in the current or parent directories",
+    )
+    sub = parser.add_subparsers(title="extra commands", dest="command", metavar="")
+    # We avoid `metavar` to prevent printing repetitive information
+    desc = "List files managed by the SCM"
+    sub.add_parser("ls", help=desc[0].lower() + desc[1:], description=desc)
+    return parser.parse_args()
+
+
+def _find_pyproject(parent):
+    for directory in walk_potential_roots(os.path.abspath(parent)):
+        pyproject = os.path.join(directory, "pyproject.toml")
+        if os.path.exists(pyproject):
+            return pyproject
+
+    raise FileNotFoundError("'pyproject.toml' was not found")
+
+
 if __name__ == "__main__":
     main()
diff --git a/src/setuptools_scm/_overrides.py b/src/setuptools_scm/_overrides.py
index 292936c..644e87d 100644
--- a/src/setuptools_scm/_overrides.py
+++ b/src/setuptools_scm/_overrides.py
@@ -12,7 +12,7 @@ PRETEND_KEY_NAMED = PRETEND_KEY + "_FOR_{name}"
 
 
 def _read_pretended_version_for(config: Configuration) -> Optional[ScmVersion]:
-    """read a a overriden version from the environment
+    """read a a overridden version from the environment
 
     tries ``SETUPTOOLS_SCM_PRETEND_VERSION``
     and ``SETUPTOOLS_SCM_PRETEND_VERSION_FOR_$UPPERCASE_DIST_NAME``
diff --git a/src/setuptools_scm/hg_git.py b/src/setuptools_scm/hg_git.py
index b871a39..323cdcb 100644
--- a/src/setuptools_scm/hg_git.py
+++ b/src/setuptools_scm/hg_git.py
@@ -73,7 +73,7 @@ class GitWorkdirHgClient(GitWorkdir, HgWorkdir):
                 trace("Cannot get git node so we use hg node", hg_node)
 
                 if hg_node == "0" * len(hg_node):
-                    # mimick Git behavior
+                    # mimic Git behavior
                     return None
 
                 return hg_node
diff --git a/tox.ini b/tox.ini
index 3f77ea9..e356153 100644
--- a/tox.ini
+++ b/tox.ini
@@ -8,7 +8,7 @@ filterwarnings=
     ignore:.*tool\.setuptools_scm.*
 markers=
     issue(id): reference to github issue
-    skip_commit: allows to skip commiting in the helpers
+    skip_commit: allows to skip committing in the helpers
 # disable unraisable until investigated
 addopts = -p no:unraisableexception
 
