diff --git a/testing/test_main.py b/testing/test_main.py
index 97ea05e..ea1373f 100644
--- a/testing/test_main.py
+++ b/testing/test_main.py
@@ -1,4 +1,8 @@
 import os.path
+import sys
+import textwrap
+
+import pytest
 
 
 def test_main():
@@ -8,3 +12,51 @@ def test_main():
     with open(mainfile) as f:
         code = compile(f.read(), "__main__.py", "exec")
         exec(code)
+
+
+@pytest.fixture
+def repo(wd):
+    wd("git init")
+    wd("git config user.email user@host")
+    wd("git config user.name user")
+    wd.add_command = "git add ."
+    wd.commit_command = "git commit -m test-{reason}"
+
+    wd.write("README.rst", "My example")
+    wd.add_and_commit()
+    wd("git tag v0.1.0")
+
+    wd.write("file.txt", "file.txt")
+    wd.add_and_commit()
+
+    return wd
+
+
+def test_repo_with_config(repo):
+    pyproject = """\
+    [tool.setuptools_scm]
+    version_scheme = "no-guess-dev"
+
+    [project]
+    name = "example"
+    """
+    repo.write("pyproject.toml", textwrap.dedent(pyproject))
+    repo.add_and_commit()
+    res = repo((sys.executable, "-m", "setuptools_scm"))
+    assert res.startswith("0.1.0.post1.dev2")
+
+
+def test_repo_without_config(repo):
+    res = repo((sys.executable, "-m", "setuptools_scm"))
+    assert res.startswith("0.1.1.dev1")
+
+
+def test_repo_with_pyproject_missing_setuptools_scm(repo):
+    pyproject = """\
+    [project]
+    name = "example"
+    """
+    repo.write("pyproject.toml", textwrap.dedent(pyproject))
+    repo.add_and_commit()
+    res = repo((sys.executable, "-m", "setuptools_scm"))
+    assert res.startswith("0.1.1.dev2")
diff --git a/testing/test_mercurial.py b/testing/test_mercurial.py
index 2352bf9..3276802 100644
--- a/testing/test_mercurial.py
+++ b/testing/test_mercurial.py
@@ -82,7 +82,7 @@ def test_version_from_hg_id(wd):
     wd("hg up v0.1")
     assert wd.version == "0.1"
 
-    # commit originating from the taged revision
+    # commit originating from the tagged revision
     # that is not a actual tag
     wd.commit_testfile()
     assert wd.version.startswith("0.2.dev1+")
@@ -96,7 +96,7 @@ def test_version_from_hg_id(wd):
 
 def test_version_from_archival(wd):
     # entrypoints are unordered,
-    # cleaning the wd ensure this test wont break randomly
+    # cleaning the wd ensure this test won't break randomly
     wd.cwd.joinpath(".hg").rename(wd.cwd / ".nothg")
     wd.write(".hg_archival.txt", "node: 000000000000\n" "tag: 0.1\n")
     assert wd.version == "0.1"
@@ -172,7 +172,7 @@ def test_version_bump_from_commit_including_hgtag_mods(wd):
 @pytest.mark.usefixtures("version_1_0")
 def test_latest_tag_detection(wd):
     """Tests that tags not containing a "." are ignored, the same as for git.
-    Note that will be superceded by the fix for pypa/setuptools_scm/issues/235
+    Note that will be superseded by the fix for pypa/setuptools_scm/issues/235
     """
     wd('hg tag some-random-tag -u test -d "0 0"')
     assert wd.version == "1.0.0"
diff --git a/testing/test_setuptools_support.py b/testing/test_setuptools_support.py
index d6243db..b0c7230 100644
--- a/testing/test_setuptools_support.py
+++ b/testing/test_setuptools_support.py
@@ -7,9 +7,21 @@ import subprocess
 import sys
 
 import pytest
-from virtualenv.run import cli_run
 
-pytestmark = pytest.mark.filterwarnings(r"ignore:.*tool\.setuptools_scm.*")
+
+def cli_run(*k, **kw):
+    """this defers the virtualenv import
+    it helps to avoid warnings from the furthermore imported setuptools
+    """
+    global cli_run
+    from virtualenv.run import cli_run
+
+    return cli_run(*k, **kw)
+
+
+pytestmark = pytest.mark.filterwarnings(
+    r"ignore:.*tool\.setuptools_scm.*", r"always:.*setup.py install is deprecated.*"
+)
 
 
 ROOT = pathlib.Path(__file__).parent.parent
@@ -88,7 +100,7 @@ def check(venv, expected_version, **env):
 
 
 @pytest.mark.skipif(
-    sys.version_info[:2] >= (3, 10), reason="old setuptools wont work on python 3.10"
+    sys.version_info[:2] >= (3, 10), reason="old setuptools won't work on python 3.10"
 )
 def test_distlib_setuptools_works(venv_maker):
     venv = venv_maker.get_venv(setuptools="45.0.0", pip="9.0", python="3.6")
@@ -137,7 +149,7 @@ def prepare_setup_py_config(pkg: pathlib.Path):
 
 
 @pytest.mark.skipif(
-    sys.version_info[:2] >= (3, 10), reason="old setuptools wont work on python 3.10"
+    sys.version_info[:2] >= (3, 10), reason="old setuptools won't work on python 3.10"
 )
 @pytest.mark.parametrize("setuptools", [f"{v}.0" for v in range(31, 45)])
 @pytest.mark.parametrize(
