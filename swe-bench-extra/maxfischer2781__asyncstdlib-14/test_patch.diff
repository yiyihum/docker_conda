diff --git a/unittests/test_asynctools.py b/unittests/test_asynctools.py
index 89f2be5..8bc3b3e 100644
--- a/unittests/test_asynctools.py
+++ b/unittests/test_asynctools.py
@@ -13,8 +13,6 @@ async def test_nested_lifetime():
         values.append(await a.anext(a1))
         async with a.scoped_iter(a1) as a2:
             values.append(await a.anext(a2))
-            print(a2)
-        print(a1)
         # original iterator is not closed by inner scope
         async for value in a1:
             values.append(value)
@@ -59,6 +57,48 @@ async def test_borrow_iterable():
     assert values == [0, 1]
 
 
+class Closeable:
+    def __init__(self, iterator):
+        self.iterator = iterator
+
+    def __aiter__(self):
+        return self
+
+    async def __anext__(self):
+        return await a.anext(self.iterator)
+
+    async def aclose(self):
+        await self.iterator.aclose()
+
+
+@pytest.mark.parametrize(
+    "async_iterable_t",
+    [
+        lambda: asyncify(range(10)),
+        lambda: Closeable(asyncify(range(10))),
+        lambda: Uncloseable(asyncify(range(10))),
+    ],
+)
+@sync
+async def test_borrow_methods(async_iterable_t):
+    async_iterable = async_iterable_t()
+    values = []
+    async with a.scoped_iter(async_iterable) as a1:
+        values.append(await a.anext(a1))
+        assert hasattr(a1, "athrow") == hasattr(async_iterable, "athrow")
+        assert hasattr(a1, "asend") == hasattr(async_iterable, "asend")
+    assert values == [0]
+
+
+@sync
+async def test_scoped_iter_misuse():
+    scoped_iter = a.scoped_iter(asyncify(range(5)))
+    async with scoped_iter:
+        with pytest.raises(RuntimeError):
+            async with scoped_iter:
+                pytest.fail("may not enter scoped_iter twice")
+
+
 @sync
 async def test_borrow_misuse():
     with pytest.raises(TypeError):
