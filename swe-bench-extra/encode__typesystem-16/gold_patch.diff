diff --git a/typesystem/fields.py b/typesystem/fields.py
index 90716ef..266177c 100644
--- a/typesystem/fields.py
+++ b/typesystem/fields.py
@@ -63,6 +63,12 @@ class Field:
     def has_default(self) -> bool:
         return hasattr(self, "default")
 
+    def get_default_value(self) -> typing.Any:
+        default = getattr(self, "default", None)
+        if callable(default):
+            return default()
+        return default
+
     def error(self, code: str) -> ValidationError:
         text = self.errors[code].format(**self.__dict__)
         return ValidationError(text=text, code=code)
@@ -423,7 +429,7 @@ class Object(Field):
         for key, child_schema in self.properties.items():
             if key not in value:
                 if child_schema.has_default():
-                    validated[key] = child_schema.default
+                    validated[key] = child_schema.get_default_value()
                 continue
             item = value[key]
             child_value, error = child_schema.validate(item, strict=strict)
diff --git a/typesystem/schemas.py b/typesystem/schemas.py
index 6cb847c..fe2f873 100644
--- a/typesystem/schemas.py
+++ b/typesystem/schemas.py
@@ -68,7 +68,7 @@ class Schema(Mapping, metaclass=SchemaMetaclass):
                     raise TypeError(message)
                 setattr(self, key, value)
             elif schema.has_default():
-                setattr(self, key, schema.default)
+                setattr(self, key, schema.get_default_value())
 
         if kwargs:
             key = list(kwargs.keys())[0]
