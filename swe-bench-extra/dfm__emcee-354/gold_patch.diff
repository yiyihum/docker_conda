diff --git a/src/emcee/autocorr.py b/src/emcee/autocorr.py
index 5156372..4a804ff 100644
--- a/src/emcee/autocorr.py
+++ b/src/emcee/autocorr.py
@@ -49,7 +49,7 @@ def integrated_time(x, c=5, tol=50, quiet=False):
     """Estimate the integrated autocorrelation time of a time series.
 
     This estimate uses the iterative procedure described on page 16 of
-    `Sokal's notes <http://www.stat.unc.edu/faculty/cji/Sokal.pdf>`_ to
+    `Sokal's notes <https://www.semanticscholar.org/paper/Monte-Carlo-Methods-in-Statistical-Mechanics%3A-and-Sokal/0bfe9e3db30605fe2d4d26e1a288a5e2997e7225>`_ to
     determine a reasonable window size.
 
     Args:
diff --git a/src/emcee/backends/hdf.py b/src/emcee/backends/hdf.py
index d4e6d6c..9503512 100644
--- a/src/emcee/backends/hdf.py
+++ b/src/emcee/backends/hdf.py
@@ -2,7 +2,7 @@
 
 from __future__ import division, print_function
 
-__all__ = ["HDFBackend", "TempHDFBackend"]
+__all__ = ["HDFBackend", "TempHDFBackend", "does_hdf5_support_longdouble"]
 
 import os
 from tempfile import NamedTemporaryFile
@@ -19,6 +19,25 @@ except ImportError:
     h5py = None
 
 
+def does_hdf5_support_longdouble():
+    if h5py is None:
+        return False
+    with NamedTemporaryFile(prefix="emcee-temporary-hdf5",
+                            suffix=".hdf5",
+                            delete=False) as f:
+        f.close()
+
+        with h5py.File(f.name, "w") as hf:
+            g = hf.create_group("group")
+            g.create_dataset("data", data=np.ones(1, dtype=np.longdouble))
+            if g["data"].dtype != np.longdouble:
+                return False
+        with h5py.File(f.name, "r") as hf:
+            if hf["group"]["data"].dtype != np.longdouble:
+                return False
+    return True
+
+
 class HDFBackend(Backend):
     """A backend that stores the chain in an HDF5 file using h5py
 
diff --git a/tox.ini b/tox.ini
index 6c09ae3..9f72a99 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,5 +1,5 @@
 [tox]
-envlist = py{36,37}
+envlist = py{36,37,38}
 
 [testenv]
 description = Unit tests
