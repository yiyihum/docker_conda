diff --git a/src/fparser/common/tests/test_readfortran.py b/src/fparser/common/tests/test_readfortran.py
index 8b75af1..58175e2 100644
--- a/src/fparser/common/tests/test_readfortran.py
+++ b/src/fparser/common/tests/test_readfortran.py
@@ -51,7 +51,7 @@ import pytest
 
 from fparser.common.readfortran import FortranFileReader, \
     FortranStringReader, FortranReaderBase, Line, extract_label, \
-    extract_construct_name, CppDirective
+    extract_construct_name, CppDirective, Comment
 from fparser.common.sourceinfo import FortranFormat
 
 
@@ -1042,7 +1042,7 @@ def test_reader_cpp_directives():
         'end program test']
     ref_text = '\n'.join(input_text[:4] + input_text[5:]).strip()
     reader = FortranStringReader('\n'.join(input_text))
-    lines = [item for item in reader]
+    lines = list(reader)
 
     pp_lines = [1, 3, 5, 6, 8]
     for i, line in enumerate(lines):
@@ -1061,8 +1061,192 @@ def test_multiline_cpp_directives():
         'integer a', 'end program test']
     ref_text = 'program test\n#define ABC   123\ninteger a\nend program test'
     reader = FortranStringReader('\n'.join(input_text))
-    lines = [item for item in reader]
+    lines = list(reader)
     assert len(lines) == 4
     assert isinstance(lines[1], CppDirective)
     assert lines[1].span == (2, 3)
     assert '\n'.join(item.line for item in lines) == ref_text
+
+
+# Tests for the get_source_item method in class FortranReaderBase :
+# Comments
+
+
+def test_single_comment():
+    '''Test that a free format single line comment is output as expected'''
+    input_text = "! a comment\n"
+
+    reader = FortranStringReader(input_text, ignore_comments=False)
+    lines = list(reader)
+    assert len(lines) == 1
+    assert isinstance(lines[0], Comment)
+    assert lines[0].span == (1, 1)
+    assert lines[0].line + "\n" == input_text
+
+    reader = FortranStringReader(input_text, ignore_comments=True)
+    lines = list(reader)
+    assert len(lines) == 0
+
+
+def test_many_comments():
+    '''Test that a large consecutive number of single line comments can be
+    successfully processed. Earlier versions of the reader used
+    recursion for multiple consecutive free format single line
+    comments which resulted in a recursion error in this case.
+
+    '''
+    number_of_comments = 1000
+    input_text = "program hello\n"
+    for index in range(number_of_comments):
+        input_text += "! comment{0}\n".format(index+1)
+    input_text += "end program hello\n"
+
+    reader = FortranStringReader(input_text, ignore_comments=False)
+    lines = list(reader)
+    assert len(lines) == number_of_comments + 2
+    for index in range(1, number_of_comments):
+        assert isinstance(lines[index], Comment)
+        assert lines[index].span == (index+1, index+1)
+        assert lines[index].line + "\n" == "! comment{0}\n".format(index)
+
+    reader = FortranStringReader(input_text, ignore_comments=True)
+    lines = list(reader)
+    assert len(lines) == 2
+
+
+def test_comments_within_continuation():
+    '''Test that comments and multi-line statements are processed
+    correctly.
+
+    '''
+    input_text = (
+        "  ! Comment1\n"
+        "  real :: a &\n"
+        "  ! Comment2\n"
+        "          ,b\n"
+        "  ! Comment3\n")
+
+    reader = FortranStringReader(input_text, ignore_comments=False)
+    lines = list(reader)
+    assert len(lines) == 4
+
+    assert isinstance(lines[0], Comment)
+    assert lines[0].span == (1, 1)
+    assert lines[0].line == "! Comment1"
+
+    assert lines[1].span == (2, 4)
+    assert lines[1].line == "real :: a           ,b"
+
+    assert isinstance(lines[2], Comment)
+    assert lines[2].span == (3, 3)
+    assert lines[2].line == "! Comment2"
+
+    assert isinstance(lines[3], Comment)
+    assert lines[3].span == (5, 5)
+    assert lines[3].line == "! Comment3"
+
+    reader = FortranStringReader(input_text, ignore_comments=True)
+    lines = list(reader)
+    assert len(lines) == 1
+    assert lines[0].span == (2, 4)
+    assert lines[0].line == "real :: a           ,b"
+
+
+# Tests for the get_source_item method in class FortranReaderBase :
+# Blank lines
+
+
+@pytest.mark.parametrize("input_text", ["\n", "    \n"])
+def test_single_blank_line(input_text):
+    '''Test that a single blank line with or without white space is output
+    as an empty Comment object.
+
+    '''
+    reader = FortranStringReader(input_text, ignore_comments=False)
+    lines = list(reader)
+    assert len(lines) == 1
+    assert isinstance(lines[0], Comment)
+    assert lines[0].span == (1, 1)
+    assert lines[0].line == ""
+
+    reader = FortranStringReader(input_text, ignore_comments=True)
+    lines = list(reader)
+    assert len(lines) == 0
+
+
+def test_multiple_blank_lines():
+    '''Test that multiple blank lines with or without white space are
+    output as an empty Comment objects.
+
+    '''
+    input_text = (
+        "   \n\n"
+        "program test\n"
+        "  \n\n"
+        "end program test\n"
+        "  \n\n")
+    reader = FortranStringReader(input_text, ignore_comments=False)
+    lines = list(reader)
+    assert len(lines) == 8
+    for index in [0, 1, 3, 4, 6, 7]:
+        assert isinstance(lines[index], Comment)
+        assert lines[index].span == (index+1, index+1)
+        assert lines[index].line == ""
+    assert isinstance(lines[2], Line)
+    assert lines[2].span == (3, 3)
+    assert lines[2].line == "program test"
+    assert isinstance(lines[5], Line)
+    assert lines[5].span == (6, 6)
+    assert lines[5].line == "end program test"
+
+    reader = FortranStringReader(input_text, ignore_comments=True)
+    lines = list(reader)
+    assert len(lines) == 2
+    assert isinstance(lines[0], Line)
+    assert lines[0].span == (3, 3)
+    assert lines[0].line == "program test"
+    assert isinstance(lines[1], Line)
+    assert lines[1].span == (6, 6)
+    assert lines[1].line == "end program test"
+
+
+def test_blank_lines_within_continuation():
+    '''Test that blank lines and multi-line statements are processed
+    correctly. Note, empty lines within a multi-line statement are
+    removed.
+
+    '''
+    input_text = (
+        "  \n"
+        "  real :: a &\n"
+        "  \n\n"
+        "          ,b\n"
+        "  \n"
+        "  real :: c\n")
+
+    reader = FortranStringReader(input_text, ignore_comments=False)
+    lines = list(reader)
+    assert len(lines) == 4
+
+    assert isinstance(lines[0], Comment)
+    assert lines[0].span == (1, 1)
+    assert lines[0].line == ""
+    assert isinstance(lines[1], Line)
+    assert lines[1].span == (2, 5)
+    assert lines[1].line == "real :: a           ,b"
+    assert isinstance(lines[2], Comment)
+    assert lines[2].span == (6, 6)
+    assert lines[2].line == ""
+    assert isinstance(lines[3], Line)
+    assert lines[3].span == (7, 7)
+    assert lines[3].line == "real :: c"
+
+    reader = FortranStringReader(input_text, ignore_comments=True)
+    lines = list(reader)
+    assert len(lines) == 2
+    assert isinstance(lines[0], Line)
+    assert lines[0].span == (2, 5)
+    assert lines[0].line == "real :: a           ,b"
+    assert isinstance(lines[1], Line)
+    assert lines[1].span == (7, 7)
+    assert lines[1].line == "real :: c"
