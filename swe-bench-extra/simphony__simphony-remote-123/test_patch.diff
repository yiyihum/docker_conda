diff --git a/tests/cli/test_remoteappdb.py b/tests/cli/test_remoteappdb.py
index 004a99e..57db987 100644
--- a/tests/cli/test_remoteappdb.py
+++ b/tests/cli/test_remoteappdb.py
@@ -25,9 +25,23 @@ class TestRemoteAppDbCLI(TempMixin, unittest.TestCase):
 
         return result.exit_code, result.output
 
+    def test_is_sqlitedb_url(self):
+        self.assertTrue(remoteappdb.is_sqlitedb_url("sqlite:///foo.db"))
+        self.assertFalse(remoteappdb.is_sqlitedb_url("whatever:///foo.db"))
+
+    def test_sqlite_present(self):
+        self.assertTrue(remoteappdb.sqlitedb_present(
+            "sqlite:///"+self.db))
+        self.assertFalse(remoteappdb.sqlitedb_present(
+            "sqlite:///"+self.db+"whatever"))
+
     def test_init_command(self):
         self.assertTrue(os.path.exists(self.db))
 
+        # This should fail because the database is already present
+        exit_code, output = self._remoteappdb("init")
+        self.assertNotEqual(exit_code, 0)
+
     def test_user_create(self):
         _, out = self._remoteappdb("user create foo")
         self.assertEqual(out, "1\n")
@@ -174,3 +188,13 @@ class TestRemoteAppDbCLI(TempMixin, unittest.TestCase):
         _, out = self._remoteappdb("user list --show-apps --no-decoration")
         self.assertEqual(len(out.split('\n')), 2)
         self.assertNotIn("myapp", out)
+
+    def test_commands_noinit(self):
+        # Remove the conveniently setup database
+        os.remove(self.db)
+
+        exit_code, out = self._remoteappdb("user create foo")
+        self.assertNotEqual(exit_code, 0)
+
+        exit_code, out = self._remoteappdb("app create foo")
+        self.assertNotEqual(exit_code, 0)
diff --git a/tests/handlers/test_home_handler.py b/tests/handlers/test_home_handler.py
index 596b8db..7a49d7f 100644
--- a/tests/handlers/test_home_handler.py
+++ b/tests/handlers/test_home_handler.py
@@ -184,3 +184,34 @@ class TestHomeHandler(TempMixin, utils.AsyncHTTPTestCase):
 
             self.assertTrue(self._app.reverse_proxy.register.called)
             self.assertTrue(redirect.called)
+
+    def test_container_manager_does_not_return_container(self):
+        self._app.container_manager.container_from_url_id = \
+            utils.mock_coro_factory(None)
+        res = self.fetch(
+            "/user/username/",
+            method="POST",
+            headers={
+                "Cookie": "jupyter-hub-token-username=foo"
+            },
+            body=urllib.parse.urlencode({
+                'action': 'view',
+                'url_id': '12345'
+            })
+        )
+
+        self.assertIn("ValueError", str(res.body))
+
+        res = self.fetch(
+            "/user/username/",
+            method="POST",
+            headers={
+                "Cookie": "jupyter-hub-token-username=foo"
+            },
+            body=urllib.parse.urlencode({
+                'action': 'stop',
+                'url_id': '12345'
+            })
+        )
+
+        self.assertIn("ValueError", str(res.body))
