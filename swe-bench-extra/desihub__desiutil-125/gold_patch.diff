diff --git a/doc/changes.rst b/doc/changes.rst
index f154327..6f23c11 100644
--- a/doc/changes.rst
+++ b/doc/changes.rst
@@ -10,7 +10,11 @@ Change Log
 1.9.15 (unreleased)
 -------------------
 
-* Draw ecliptic in all-sky plots.
+* Set read-only permissions on all Module files, and unlock them as needed (PR `#125`_).
+* Draw ecliptic in all-sky plots (PR `#124`_).
+
+.. _`#125`: https://github.com/desihub/desiutil/pull/125
+.. _`#124`: https://github.com/desihub/desiutil/pull/124
 
 1.9.14 (2018-10-05)
 -------------------
diff --git a/py/desiutil/install.py b/py/desiutil/install.py
index 11f22e1..1f7077f 100644
--- a/py/desiutil/install.py
+++ b/py/desiutil/install.py
@@ -720,7 +720,6 @@ class DesiInstall(object):
                 outfile = os.path.join(module_directory,
                                        self.module_keywords['name'],
                                        self.module_keywords['version'])
-                os.chmod(outfile, 0o440)
             except OSError as ose:
                 self.log.critical(ose.strerror)
                 raise DesiInstallException(ose.strerror)
diff --git a/py/desiutil/io.py b/py/desiutil/io.py
index 4a9d2a5..b515e43 100644
--- a/py/desiutil/io.py
+++ b/py/desiutil/io.py
@@ -9,6 +9,8 @@ Module for I/O related code.
 """
 from __future__ import (print_function, absolute_import, division,
                         unicode_literals)
+from contextlib import contextmanager
+
 
 try:
     basestring
@@ -218,3 +220,55 @@ def decode_table(data, encoding='ascii', native=True):
 
     table.meta['ENCODING'] = encoding
     return table
+
+
+@contextmanager
+def unlock_file(*args, **kwargs):
+    """Unlock a read-only file, return a file-like object, and restore the
+    read-only state when done.  Arguments are the same as :func:`open`.
+
+    Returns
+    -------
+    file-like
+        A file-like object, as returned by :func:`open`.
+
+    Notes
+    -----
+    * This assumes that the user of this function is also the owner of the
+      file. :func:`os.chmod` would not be expected to work in any other
+      circumstance.
+    * Technically, this restores the *original* permissions of the file, it
+      does not care what the original permissions were.
+    * If the named file does not exist, this function effectively does not
+      attempt to guess what the final permissions of the file would be.  In
+      other words, it just does whatever :func:`open` would do.  In this case
+      it is the user's responsibilty to change permissions as needed after
+      creating the file.
+
+    Examples
+    --------
+    >>> with unlock_file('read-only.txt', 'w') as f:
+    ...     f.write(new_data)
+    """
+    import os
+    import stat
+    w = stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH
+    #
+    # Get original permissions, unlock permissions
+    #
+    # uid = os.getuid()
+    old_mode = None
+    if os.path.exists(args[0]):
+        old_mode = stat.S_IMODE(os.stat(args[0]).st_mode)
+        os.chmod(args[0], old_mode | stat.S_IWUSR)
+    f = open(*args, **kwargs)
+    try:
+        yield f
+    finally:
+        #
+        # Restore permissions to read-only state.
+        #
+        f.close()
+        if old_mode is None:
+            old_mode = stat.S_IMODE(os.stat(args[0]).st_mode)
+        os.chmod(args[0], old_mode & ~w)
diff --git a/py/desiutil/modules.py b/py/desiutil/modules.py
index f8be62f..97aebb4 100644
--- a/py/desiutil/modules.py
+++ b/py/desiutil/modules.py
@@ -253,8 +253,7 @@ def process_module(module_file, module_keywords, module_dir):
                                module_keywords['version'])
     with open(module_file) as m:
         mod = m.read().format(**module_keywords)
-    with open(install_module_file, 'w') as m:
-        m.write(mod)
+    _write_module_data(install_module_file, mod)
     return mod
 
 
@@ -278,6 +277,18 @@ def default_module(module_keywords, module_dir):
     install_version_file = join(module_dir, module_keywords['name'],
                                 '.version')
     dot_version = dot_template.format(**module_keywords)
-    with open(install_version_file, 'w') as v:
-        v.write(dot_version)
+    _write_module_data(install_version_file, dot_version)
     return dot_version
+
+
+def _write_module_data(filename, data):
+    """Write and permission-lock Module file data.  This is intended
+    to consolidate some duplicated code.
+    """
+    from os import chmod
+    from stat import S_IRUSR, S_IRGRP
+    from .io import unlock_file
+    with unlock_file(filename, 'w') as f:
+        f.write(data)
+    chmod(filename, S_IRUSR | S_IRGRP)
+    return
