diff --git a/py/desiutil/test/test_io.py b/py/desiutil/test/test_io.py
index a8b17dd..4c75f51 100644
--- a/py/desiutil/test/test_io.py
+++ b/py/desiutil/test/test_io.py
@@ -6,16 +6,24 @@ from __future__ import (absolute_import, division,
                         print_function, unicode_literals)
 # The line above will help with 2to3 support.
 import unittest
+import os
+import stat
 import sys
 import numpy as np
 from astropy.table import Table
-from ..io import combine_dicts, decode_table, encode_table, yamlify
+from ..io import combine_dicts, decode_table, encode_table, yamlify, unlock_file
 
 try:
     basestring
 except NameError:  # For Python 3
     basestring = str
 
+skipTemp = False
+try:
+    from tempfile import TemporaryDirectory
+except ImportError:
+    skipTemp = True
+
 
 class TestIO(unittest.TestCase):
     """Test desiutil.io
@@ -178,6 +186,33 @@ class TestIO(unittest.TestCase):
         self.assertEqual(dict1, {'a': {'b': {'x': 1, 'y': 2}}})
         self.assertEqual(dict2, {'a': {'b': {'p': 3, 'q': 4}}})
 
+    @unittest.skipIf(skipTemp, "Skipping test that requires tempfile.TemporaryDirectory.")
+    def test_unlock_file(self):
+        """Test the permission unlock file manager.
+        """
+        fff = stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
+        www = stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH
+        with TemporaryDirectory() as dirname:
+            filename = os.path.join(dirname, 'tempfile')
+            with open(filename, 'wb') as f:
+                f.write(b'Content\n')
+            s0 = os.stat(filename)
+            ro = stat.S_IFMT(s0.st_mode) | fff
+            os.chmod(filename, ro)
+            s1 = os.stat(filename)
+            self.assertEqual(stat.S_IMODE(s1.st_mode), fff)
+            with unlock_file(filename, 'ab') as f:
+                f.write(b'More content\n')
+                s2 = os.stat(filename)
+                self.assertEqual(stat.S_IMODE(s2.st_mode), fff | stat.S_IWUSR)
+            s3 = os.stat(filename)
+            self.assertEqual(stat.S_IMODE(s3.st_mode), fff)
+            filename = os.path.join(dirname, 'newfile')
+            with unlock_file(filename, 'wb') as f:
+                f.write(b'Some content\n')
+            s0 = os.stat(filename)
+            self.assertEqual(stat.S_IMODE(s0.st_mode) & www, 0)
+
 
 def test_suite():
     """Allows testing of only this module with the command::
diff --git a/py/desiutil/test/test_modules.py b/py/desiutil/test/test_modules.py
index a05a62c..72c073a 100644
--- a/py/desiutil/test/test_modules.py
+++ b/py/desiutil/test/test_modules.py
@@ -12,6 +12,8 @@ from os import chmod, environ, mkdir, pathsep, remove, rmdir
 from os.path import dirname, exists, isdir, join
 from sys import version_info
 from shutil import rmtree
+from tempfile import mkdtemp
+from pkg_resources import resource_filename
 from ..modules import (init_modules, configure_module, process_module,
                        default_module)
 
@@ -23,7 +25,7 @@ class TestModules(unittest.TestCase):
     @classmethod
     def setUpClass(cls):
         # Data directory
-        cls.data_dir = join(dirname(__file__), 't')
+        cls.data_dir = mkdtemp()
         cls.bin_dir = join(cls.data_dir, 'libexec')
         cls.orig_env_cache = dict()
         cls.env_cache = dict()
@@ -56,7 +58,7 @@ class TestModules(unittest.TestCase):
                 del environ[e]
             else:
                 environ[e] = cls.orig_env_cache[e]
-        rmtree(cls.bin_dir)
+        rmtree(cls.data_dir)
 
     def cache_env(self, envs):
         """Store existing environment variables in a cache and delete them.
@@ -227,7 +229,7 @@ class TestModules(unittest.TestCase):
     def test_process_module(self):
         """Test processing of module file templates.
         """
-        module_file = join(self.data_dir, 'test.module')
+        module_file = resource_filename('desiutil.test', 't/test.module')
         module_keywords = {'name': 'foo', 'version': 'bar'}
         process_module(module_file, module_keywords, self.data_dir)
         self.assertTrue(isdir(join(self.data_dir, 'foo')))
