diff --git a/sosw/components/helpers.py b/sosw/components/helpers.py
index 8d90320..76aef77 100644
--- a/sosw/components/helpers.py
+++ b/sosw/components/helpers.py
@@ -25,6 +25,7 @@ __all__ = ['validate_account_to_dashed',
            'validate_list_of_words_from_csv_or_list',
            'first_or_none',
            'recursive_update',
+           'trim_arn_to_name',
            ]
 
 import re
@@ -668,3 +669,22 @@ def recursive_update(d: Dict, u: Mapping) -> Dict:
             new[k] = v
 
     return new
+
+
+def trim_arn_to_name(arn: str) -> str:
+    """
+    Extract just the name of function from full ARN. Supports versions, aliases or raw name (without ARN).
+
+    More information about ARN Format:
+    https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-arns
+    """
+
+    # Special handling for super global services (e.g. S3 buckets)
+    if arn.count(':') < 6 and '/' not in arn:
+        return arn.split(':')[-1]
+
+    # Seems a little messy, but passes more/less any test of different ARNs we tried.
+    pattern = "(arn:aws:[0-9a-zA-Z-]{2,20}:[0-9a-zA-Z-]{0,12}:[0-9]{12}:[0-9a-zA-Z-]{2,20}[:/])?" \
+              "(?P<name>[0-9a-zA-Z_=,.@-]*)(:)?([0-9a-zA-Z$]*)?"
+
+    return re.search(pattern, arn).group('name')
diff --git a/sosw/scheduler.py b/sosw/scheduler.py
index 98074a2..2756d89 100644
--- a/sosw/scheduler.py
+++ b/sosw/scheduler.py
@@ -22,7 +22,7 @@ from copy import deepcopy
 from typing import List, Set, Tuple, Union, Optional, Dict
 
 from sosw.app import Processor
-from sosw.components.helpers import get_list_of_multiple_or_one_or_empty_from_dict
+from sosw.components.helpers import get_list_of_multiple_or_one_or_empty_from_dict, trim_arn_to_name
 from sosw.labourer import Labourer
 from sosw.managers.task import TaskManager
 
@@ -331,20 +331,11 @@ class Scheduler(Processor):
         job = load(jh['job']) if 'job' in jh else jh
 
         assert 'lambda_name' in job, f"Job is missing required parameter 'lambda_name': {job}"
-        job['lambda_name'] = job['lambda_name']
+        job['lambda_name'] = trim_arn_to_name(job['lambda_name'])
 
         return job
 
 
-    def get_name_from_arn(self, arn):
-        """ Extract just the name of function from full ARN. Supports versions, aliases or raw name (without ARN). """
-
-        pattern = "(arn:aws:lambda:[0-9a-zA-Z-]{6,12}:[0-9]{12}:function:)?" \
-                  "(?P<name>[0-9a-zA-Z_=,.@-]*)(:)?([0-9a-zA-Z$]*)?"
-
-        return re.search(pattern, arn).group('name')
-
-
     def process_file(self):
 
         file_name = self.get_and_lock_queue_file()
