diff --git a/tests/test_client.py b/tests/test_client.py
index 009e167..1b5145c 100644
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -230,6 +230,35 @@ class ClientFactory(unittest.TestCase):
             with dwave.cloud.Client.from_config(solver='solver') as client:
                 self.assertEqual(client.default_solver, {"name__eq": "solver"})
 
+    def test_headers_from_config(self):
+        headers_dict = {"key-1": "value-1", "key-2": "value-2"}
+        headers_str = """  key-1:value-1
+            key-2: value-2
+        """
+        conf = dict(token='token', headers=headers_str)
+
+        with mock.patch("dwave.cloud.client.load_config", lambda **kwargs: conf):
+            with dwave.cloud.Client.from_config() as client:
+                self.assertDictEqual(client.headers, headers_dict)
+
+    def test_headers_from_kwargs(self):
+        headers_dict = {"key-1": "value-1", "key-2": "value-2"}
+        headers_str = "key-2:value-2\nkey-1:value-1"
+        conf = dict(token='token')
+
+        def load_config(**kwargs):
+            return merge(kwargs, conf, op=lambda a, b: a or b)
+
+        # headers as dict
+        with mock.patch("dwave.cloud.client.load_config", load_config):
+            with dwave.cloud.Client.from_config(headers=headers_dict) as client:
+                self.assertDictEqual(client.headers, headers_dict)
+
+        # headers as str
+        with mock.patch("dwave.cloud.client.load_config", load_config):
+            with dwave.cloud.Client.from_config(headers=headers_str) as client:
+                self.assertDictEqual(client.headers, headers_dict)
+
 
 class FeatureBasedSolverSelection(unittest.TestCase):
     """Test Client.get_solvers(**filters)."""
diff --git a/tests/test_config.py b/tests/test_config.py
index 20e4914..2b34bea 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -47,6 +47,8 @@ class TestConfig(unittest.TestCase):
         endpoint = https://url.to.alpha/api
         proxy = http://user:pass@myproxy.com:8080/
         token = alpha-token
+        headers =  key-1:value-1
+          key-2: value-2
     """
 
     def parse_config_string(self, text):
@@ -127,6 +129,8 @@ class TestConfig(unittest.TestCase):
         self.assertEqual(config['endpoint'], "https://url.to.alpha/api")
         # default values are inherited
         self.assertEqual(config['client'], "qpu")
+        # multi-line values are read
+        self.assertEqual(config['headers'], "key-1:value-1\nkey-2: value-2")
 
     def _load_config_from_files(self, asked, provided=None, data=None):
         self.assertEqual(asked, provided)
@@ -210,6 +214,7 @@ class TestConfig(unittest.TestCase):
                 self.assertEqual(load_config(client='manual')['client'], 'manual')
                 self.assertEqual(load_config(solver='manual')['solver'], 'manual')
                 self.assertEqual(load_config(proxy='manual')['proxy'], 'manual')
+                self.assertEqual(load_config(headers='headers')['headers'], 'headers')
 
     def test_config_load__profile_arg_nonexisting(self):
         """load_config should fail if the profile specified in kwargs or env in
@@ -332,3 +337,25 @@ class TestConfig(unittest.TestCase):
             m.assert_has_calls([mock.call('file1', 'r'), mock.call('file2', 'r')])
             self.assertEqual(section['endpoint'], 'alpha')
             self.assertEqual(section['solver'], 'DW_2000Q_2')
+
+    def test_config_load_env_override(self):
+        with mock.patch("dwave.cloud.config.load_config_from_files",
+                        partial(self._load_config_from_files, data=u"", provided=['myfile'])):
+
+            with mock.patch.dict(os.environ, {'DWAVE_API_CLIENT': 'test'}):
+                self.assertEqual(load_config(config_file='myfile')['client'], 'test')
+
+            with mock.patch.dict(os.environ, {'DWAVE_API_ENDPOINT': 'test'}):
+                self.assertEqual(load_config(config_file='myfile')['endpoint'], 'test')
+
+            with mock.patch.dict(os.environ, {'DWAVE_API_TOKEN': 'test'}):
+                self.assertEqual(load_config(config_file='myfile')['token'], 'test')
+
+            with mock.patch.dict(os.environ, {'DWAVE_API_SOLVER': 'test'}):
+                self.assertEqual(load_config(config_file='myfile')['solver'], 'test')
+
+            with mock.patch.dict(os.environ, {'DWAVE_API_PROXY': 'test'}):
+                self.assertEqual(load_config(config_file='myfile')['proxy'], 'test')
+
+            with mock.patch.dict(os.environ, {'DWAVE_API_HEADERS': 'test'}):
+                self.assertEqual(load_config(config_file='myfile')['headers'], 'test')
