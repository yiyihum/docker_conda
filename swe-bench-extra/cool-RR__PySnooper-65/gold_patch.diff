diff --git a/README.md b/README.md
index 331488c..9b43596 100644
--- a/README.md
+++ b/README.md
@@ -149,6 +149,9 @@ On multi-threaded apps identify which thread are snooped in output::
 @pysnooper.snoop(thread_info=True)
 ```
 
+PySnooper supports decorating generators.
+
+
 # Installation #
 
 You can install **PySnooper** by:
diff --git a/pysnooper/pycompat.py b/pysnooper/pycompat.py
index 4f2a9a6..b63df9d 100644
--- a/pysnooper/pycompat.py
+++ b/pysnooper/pycompat.py
@@ -4,6 +4,7 @@
 
 import abc
 import os
+import inspect
 
 if hasattr(abc, 'ABC'):
     ABC = abc.ABC
@@ -35,3 +36,9 @@ else:
                 (hasattr(subclass, 'open') and
                  'path' in subclass.__name__.lower())
             )
+
+
+try:
+    iscoroutinefunction = inspect.iscoroutinefunction
+except AttributeError:
+    iscoroutinefunction = lambda whatever: False # Lolz
diff --git a/pysnooper/tracer.py b/pysnooper/tracer.py
index 844809d..b05b0f9 100644
--- a/pysnooper/tracer.py
+++ b/pysnooper/tracer.py
@@ -209,11 +209,32 @@ class Tracer:
         self.target_codes.add(function.__code__)
 
         @functools.wraps(function)
-        def inner(*args, **kwargs):
+        def simple_wrapper(*args, **kwargs):
             with self:
                 return function(*args, **kwargs)
 
-        return inner
+        @functools.wraps(function)
+        def generator_wrapper(*args, **kwargs):
+            gen = function(*args, **kwargs)
+            method, incoming = gen.send, None
+            while True:
+                with self:
+                    try:
+                        outgoing = method(incoming)
+                    except StopIteration:
+                        return
+                try:
+                    method, incoming = gen.send, (yield outgoing)
+                except Exception as e:
+                    method, incoming = gen.throw, e
+
+        if pycompat.iscoroutinefunction(function):
+            # return decorate(function, coroutine_wrapper)
+            raise NotImplementedError
+        elif inspect.isgeneratorfunction(function):
+            return generator_wrapper
+        else:
+            return simple_wrapper
 
     def write(self, s):
         if self.overwrite and not self._did_overwrite:
