diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 639d96b..daa8599 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -12,7 +12,7 @@ repos:
         additional_dependencies:
           - toml
 -   repo: https://github.com/psf/black
-    rev: 20.8b1
+    rev: 22.3.0
     hooks:
     - id: black
 -   repo: https://gitlab.com/pycqa/flake8
diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 740b4f7..c1ce622 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -1,6 +1,11 @@
 History
 #######
 
+Unreleased
+==========
+
+- Use the explicit endianness everywhere when writing.
+
 v0.1
 ====
 
diff --git a/examples/dump_tcpip_stats.py b/examples/dump_tcpip_stats.py
index 590300b..ecc0dff 100755
--- a/examples/dump_tcpip_stats.py
+++ b/examples/dump_tcpip_stats.py
@@ -34,7 +34,7 @@ def human_number(num, k=1000):
     assert isinstance(num, int)
     for i, suffix in enumerate(powers):
         if (num < (k ** (i + 1))) or (i == len(powers) - 1):
-            return "{0:d}{1}".format(int(round(num / (k ** i))), suffix)
+            return "{0:d}{1}".format(int(round(num / (k**i))), suffix)
     raise AssertionError("Should never reach this")
 
 
diff --git a/pcapng/blocks.py b/pcapng/blocks.py
index 0bc2cd0..2c9abab 100644
--- a/pcapng/blocks.py
+++ b/pcapng/blocks.py
@@ -54,7 +54,9 @@ class Block(object):
             for key, packed_type, default in self.schema:
                 if key == "options":
                     self._decoded[key] = Options(
-                        schema=packed_type.options_schema, data={}, endianness="="
+                        schema=packed_type.options_schema,
+                        data={},
+                        endianness=kwargs["endianness"],
                     )
                     if "options" in kwargs:
                         for oky, ovl in kwargs["options"].items():
@@ -83,10 +85,10 @@ class Block(object):
         block_length = 12 + subblock_length
         if subblock_length % 4 != 0:
             block_length += 4 - (subblock_length % 4)
-        write_int(self.magic_number, outstream, 32)
-        write_int(block_length, outstream, 32)
+        write_int(self.magic_number, outstream, 32, endianness=self.section.endianness)
+        write_int(block_length, outstream, 32, endianness=self.section.endianness)
         write_bytes_padded(outstream, encoded_block)
-        write_int(block_length, outstream, 32)
+        write_int(block_length, outstream, 32, endianness=self.section.endianness)
 
     def _encode(self, outstream):
         """Encodes the fields of this block into raw data"""
diff --git a/pcapng/flags.py b/pcapng/flags.py
index 06b3bbf..fcd6e88 100644
--- a/pcapng/flags.py
+++ b/pcapng/flags.py
@@ -84,14 +84,14 @@ class FlagEnum(FlagBase):
                 "{cls} needs an iterable of values".format(cls=self.__class__.__name__)
             )
         extra = list(extra)
-        if len(extra) > 2 ** size:
+        if len(extra) > 2**size:
             raise TypeError(
                 "{cls} iterable has too many values (got {got}, "
                 "{size} bits only address {max})".format(
                     cls=self.__class__.__name__,
                     got=len(extra),
                     size=size,
-                    max=2 ** size,
+                    max=2**size,
                 )
             )
 
