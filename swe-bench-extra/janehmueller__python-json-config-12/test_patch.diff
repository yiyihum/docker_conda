diff --git a/tests/__init__.py b/tests/__init__.py
index f190c60..787665f 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -1,4 +1,12 @@
 from .config_node_test import ConfigNodeTest
 from .config_builder_test import ConfigBuilderTest
+from .validators import NetworkValidatorsTest, GenericValidatorsTest
+from .transformers import GenericTransformersTest
 
-__all__ = ['ConfigNodeTest', 'ConfigBuilderTest']
+__all__ = [
+    'ConfigNodeTest',
+    'ConfigBuilderTest',
+    'NetworkValidatorsTest',
+    'GenericValidatorsTest',
+    'GenericTransformersTest'
+]
diff --git a/tests/transformers/__init__.py b/tests/transformers/__init__.py
new file mode 100644
index 0000000..5b3e85f
--- /dev/null
+++ b/tests/transformers/__init__.py
@@ -0,0 +1,5 @@
+from .generic_transformers_test import GenericTransformersTest
+
+__all__ = [
+    'GenericTransformersTest'
+]
diff --git a/tests/transformers/generic_transformers_test.py b/tests/transformers/generic_transformers_test.py
new file mode 100644
index 0000000..c965f91
--- /dev/null
+++ b/tests/transformers/generic_transformers_test.py
@@ -0,0 +1,25 @@
+from datetime import timedelta
+from functools import reduce
+from unittest import TestCase
+
+from python_json_config.transformers import to_timedelta
+
+
+class GenericTransformersTest(TestCase):
+
+    def test_to_timedelta(self):
+        self.assertEqual(to_timedelta("1:0:0:0"), timedelta(days=1))
+        self.assertEqual(to_timedelta("0:1:0:0:0"), timedelta(days=1))
+        self.assertEqual(to_timedelta("0:1:0:1:-60"), timedelta(days=1))
+        self.assertEqual(to_timedelta("0:1:24:1:-60"), timedelta(days=2))
+
+        deltas = [
+            to_timedelta("0:0:0:0:90"),
+            to_timedelta("0:0:0:58:30"),
+            to_timedelta("0:1:23:0:00"),
+            to_timedelta("0:5:0:0:60"),
+            to_timedelta("1:0:0:0:-60")
+        ]
+        delta_sum = reduce(lambda delta1, delta2: delta1 + delta2, deltas)
+        self.assertEqual(delta_sum, timedelta(weeks=2))
+
diff --git a/tests/validators/__init__.py b/tests/validators/__init__.py
new file mode 100644
index 0000000..e3046a5
--- /dev/null
+++ b/tests/validators/__init__.py
@@ -0,0 +1,7 @@
+from .network_validators_test import NetworkValidatorsTest
+from .generic_validators_test import GenericValidatorsTest
+
+__all__ = [
+    'NetworkValidatorsTest',
+    'GenericValidatorsTest'
+]
diff --git a/tests/validators/generic_validators_test.py b/tests/validators/generic_validators_test.py
new file mode 100644
index 0000000..ca3a93c
--- /dev/null
+++ b/tests/validators/generic_validators_test.py
@@ -0,0 +1,29 @@
+from unittest import TestCase
+
+from python_json_config.validators import is_timedelta, is_valid_choice
+
+
+class GenericValidatorsTest(TestCase):
+
+    def test_is_timedelta(self):
+        valid_timedeltas = ["1:3:24:30:23", "0:0:1", "0:0:0:0:1", "01:02:02:03:04"]
+        invalid_timedeltas = ["1:3:24:30:23:45", "01:a:02:03:04"]
+
+        for timedelta in valid_timedeltas:
+            self.assertTrue(is_timedelta(timedelta))
+
+        for timedelta in invalid_timedeltas:
+            self.assertFalse(is_timedelta(timedelta))
+
+    def test_is_valid_choice(self):
+        list_validator = is_valid_choice([1, 2, "3"])
+        self.assertTrue(list_validator(1))
+        self.assertFalse(list_validator(3))
+        self.assertTrue(list_validator("3"))
+        self.assertFalse(list_validator(4))
+
+        dict_validator = is_valid_choice({1: "2", "3": 4})
+        self.assertTrue(dict_validator(1))
+        self.assertFalse(dict_validator("2"))
+        self.assertTrue(dict_validator("3"))
+        self.assertFalse(dict_validator(4))
diff --git a/tests/validators/network_validators_test.py b/tests/validators/network_validators_test.py
new file mode 100644
index 0000000..575e690
--- /dev/null
+++ b/tests/validators/network_validators_test.py
@@ -0,0 +1,24 @@
+from unittest import TestCase
+
+from python_json_config.validators import is_ipv4_address, is_unreserved_port
+
+
+class NetworkValidatorsTest(TestCase):
+
+    def test_is_ipv4_address(self):
+        valid_ips = ["127.0.0.1", "8.8.8.8", "127.1", "8.526344"]
+        invalid_ips = ["327.0.0.1", "8.8.8.8.8", "127.-1", "256.526344"]
+
+        for address in valid_ips:
+            self.assertTrue(is_ipv4_address(address))
+
+        for address in invalid_ips:
+            self.assertFalse(is_ipv4_address(address))
+
+    def test_is_unreserved_port(self):
+        self.assertFalse(is_unreserved_port(1))
+        self.assertFalse(is_unreserved_port(-1))
+        self.assertFalse(is_unreserved_port(22))
+        self.assertFalse(is_unreserved_port(1023))
+        self.assertTrue(is_unreserved_port(1024))
+        self.assertTrue(is_unreserved_port(14302))
