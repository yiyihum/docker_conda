diff --git a/tests/test_functional.py b/tests/test_functional.py
index ab6abe4..1c9655b 100644
--- a/tests/test_functional.py
+++ b/tests/test_functional.py
@@ -71,6 +71,16 @@ class PersonSerializer(DataclassSerializer):
         }
 
 
+@dataclasses.dataclass
+class Obscure:
+    name: str = dataclasses.field(init=False)
+
+
+class ObscureSerializer(DataclassSerializer):
+    class Meta:
+        dataclass = Obscure
+
+
 # noinspection PyUnresolvedReferences
 class FunctionalTestMixin:
     def test_serialize(self):
@@ -205,3 +215,15 @@ class PartialPersonTest(TestCase):
 
         self.assertIs(output_instance, input_instance)
         self.assertEqual(output_instance, expected_output)
+
+
+class ObscureFeaturesTest(TestCase, FunctionalTestMixin):
+    serializer = ObscureSerializer
+    instance = Obscure()
+    representation = {
+        'name': 'Bob'
+    }
+    representation_readonly = {}
+
+    def setUp(self):
+        self.instance.name = 'Bob'
diff --git a/tests/test_issues.py b/tests/test_issues.py
index 6a96684..e6a6945 100644
--- a/tests/test_issues.py
+++ b/tests/test_issues.py
@@ -102,3 +102,17 @@ class IssuesTest(TestCase):
         serializer.is_valid(raise_exception=True)
 
         self.assertEqual(serializer.validated_data['foo'].value, 'default')
+
+    # Issue #71: Deserialization fails for dataclasses with non-init fields
+    def test_noninit_fields(self):
+        @dataclasses.dataclass
+        class A:
+            foo: str
+            bar: str = dataclasses.field(init=False)
+
+        serializer = DataclassSerializer(dataclass=A, data={'foo': 'abc', 'bar': 'def'})
+        serializer.is_valid(raise_exception=True)
+        instance = serializer.save()
+
+        self.assertEqual(instance.foo, 'abc')
+        self.assertEqual(instance.bar, 'def')
