diff --git a/xonsh/ptk_shell/key_bindings.py b/xonsh/ptk_shell/key_bindings.py
index 941c9d46..84598a44 100644
--- a/xonsh/ptk_shell/key_bindings.py
+++ b/xonsh/ptk_shell/key_bindings.py
@@ -208,9 +208,14 @@ def wrap_selection(buffer, left, right=None):
     buffer.selection_state = selection_state
 
 
-def load_xonsh_bindings() -> KeyBindingsBase:
+def load_xonsh_bindings(ptk_bindings: KeyBindingsBase) -> KeyBindingsBase:
     """
     Load custom key bindings.
+
+    Parameters
+    ----------
+    ptk_bindings :
+        The default prompt toolkit bindings. We need these to add aliases to them.
     """
     key_bindings = KeyBindings()
     handle = key_bindings.add
@@ -389,4 +394,12 @@ def load_xonsh_bindings() -> KeyBindingsBase:
             buff.cut_selection()
         get_by_name("yank").call(event)
 
+    def create_alias(new_keys, original_keys):
+        bindings = ptk_bindings.get_bindings_for_keys(tuple(original_keys))
+        for original_binding in bindings:
+            handle(*new_keys, filter=original_binding.filter)(original_binding.handler)
+
+    # Complete a single auto-suggestion word
+    create_alias([Keys.ControlRight], ["escape", "f"])
+
     return key_bindings
diff --git a/xonsh/ptk_shell/shell.py b/xonsh/ptk_shell/shell.py
index f61ea789..459c0bab 100644
--- a/xonsh/ptk_shell/shell.py
+++ b/xonsh/ptk_shell/shell.py
@@ -207,7 +207,8 @@ class PromptToolkitShell(BaseShell):
 
         self.prompt_formatter = PTKPromptFormatter(self.prompter)
         self.pt_completer = PromptToolkitCompleter(self.completer, self.ctx, self)
-        self.key_bindings = load_xonsh_bindings()
+        ptk_bindings = self.prompter.app.key_bindings
+        self.key_bindings = load_xonsh_bindings(ptk_bindings)
         self._overrides_deprecation_warning_shown = False
 
         # Store original `_history_matches` in case we need to restore it
diff --git a/xontrib/jedi.py b/xontrib/jedi.py
index 1d860b82..49d99138 100644
--- a/xontrib/jedi.py
+++ b/xontrib/jedi.py
@@ -65,8 +65,8 @@ def complete_jedi(context: CompletionContext):
 
     # if we're completing a possible command and the prefix contains a valid path, don't complete.
     if context.command:
-        path_parts = os.path.split(context.command.prefix)
-        if len(path_parts) > 1 and os.path.isdir(os.path.join(*path_parts[:-1])):
+        path_dir = os.path.dirname(context.command.prefix)
+        if path_dir and os.path.isdir(os.path.expanduser(path_dir)):
             return None
 
     filter_func = get_filter_function()

