diff --git a/bpython/args.py b/bpython/args.py
index 7895d84a..79ddcc67 100644
--- a/bpython/args.py
+++ b/bpython/args.py
@@ -216,11 +216,17 @@ def parse(args, extras=None, ignore_stdin=False) -> Tuple:
 
 def exec_code(interpreter, args):
     """
-    Helper to execute code in a given interpreter. args should be a [faked]
-    sys.argv
+    Helper to execute code in a given interpreter, e.g. to implement the behavior of python3 [-i] file.py
+
+    args should be a [faked] sys.argv.
     """
-    with open(args[0]) as sourcefile:
-        source = sourcefile.read()
+    try:
+        with open(args[0]) as sourcefile:
+            source = sourcefile.read()
+    except OSError as e:
+        # print an error and exit (if -i is specified the calling code will continue)
+        print(f"bpython: can't open file '{args[0]}: {e}", file=sys.stderr)
+        raise SystemExit(e.errno)
     old_argv, sys.argv = sys.argv, args
     sys.path.insert(0, os.path.abspath(os.path.dirname(args[0])))
     spec = importlib.util.spec_from_loader("__console__", loader=None)
diff --git a/bpython/line.py b/bpython/line.py
index 7ced3bf1..b98302dd 100644
--- a/bpython/line.py
+++ b/bpython/line.py
@@ -4,6 +4,8 @@ All functions take cursor offset from the beginning of the line and the line of
 Python code, and return None, or a tuple of the start index, end index, and the
 word."""
 
+import re
+
 from itertools import chain
 from typing import Optional, NamedTuple
 
@@ -34,7 +36,41 @@ def current_word(cursor_offset: int, line: str) -> Optional[LinePart]:
     return LinePart(start, end, word)
 
 
-_current_dict_key_re = LazyReCompile(r"""[\w_][\w0-9._]*\[([\w0-9._(), '"]*)""")
+# pieces of regex to match repr() of several hashable built-in types
+_match_all_dict_keys = r"""[^\]]*"""
+
+# https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
+_match_single_quote_str_bytes = r"""
+    # bytes repr() begins with `b` character; bytes and str begin with `'`
+    b?'             
+    # match escape sequence; this handles `\'` in the string repr()
+    (?:\\['"nabfrtvxuU\\]|
+    # or match any non-`\` and non-single-quote character (most of the string)
+    [^'\\])*
+    # matches hanging `\` or ending `'` if one is present
+    [\\']?
+"""
+
+# bytes and str repr() only uses double quotes if the string contains 1 or more
+# `'` character and exactly 0 `"` characters
+_match_double_quote_str_bytes = r"""
+    # bytes repr() begins with `b` character
+    b?"
+    # string continues until a `"` character is reached
+    [^"]*
+    # end matching at closing double-quote if one is present
+    "?"""
+
+# match valid identifier name followed by `[` character
+_match_dict_before_key = r"""[\w_][\w0-9._]*\["""
+
+_current_dict_key_re = LazyReCompile(
+    f"{_match_dict_before_key}((?:"
+    f"{_match_single_quote_str_bytes}|"
+    f"{_match_double_quote_str_bytes}|"
+    f"{_match_all_dict_keys}|)*)",
+    re.VERBOSE,
+)
 
 
 def current_dict_key(cursor_offset: int, line: str) -> Optional[LinePart]:
@@ -45,7 +81,16 @@ def current_dict_key(cursor_offset: int, line: str) -> Optional[LinePart]:
     return None
 
 
-_current_dict_re = LazyReCompile(r"""([\w_][\w0-9._]*)\[([\w0-9._(), '"]*)""")
+# capture valid identifier name if followed by `[` character
+_capture_dict_name = r"""([\w_][\w0-9._]*)\["""
+
+_current_dict_re = LazyReCompile(
+    f"{_capture_dict_name}((?:"
+    f"{_match_single_quote_str_bytes}|"
+    f"{_match_double_quote_str_bytes}|"
+    f"{_match_all_dict_keys}|)*)",
+    re.VERBOSE,
+)
 
 
 def current_dict(cursor_offset: int, line: str) -> Optional[LinePart]:
