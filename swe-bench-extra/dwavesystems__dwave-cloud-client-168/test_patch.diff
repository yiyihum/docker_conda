diff --git a/tests/test_coders.py b/tests/test_coders.py
index 5c90433..382796b 100644
--- a/tests/test_coders.py
+++ b/tests/test_coders.py
@@ -24,7 +24,9 @@ def get_solver():
 
 class TestCoders(unittest.TestCase):
 
-    def test_qpu_request_encoding(self):
+    def test_qpu_request_encoding_all_qubits(self):
+        """Test biases and coupling strengths are properly encoded (base64 little-endian doubles)."""
+
         solver = get_solver()
         linear = {index: 1 for index in solver.nodes}
         quadratic = {key: -1 for key in solver.undirected_edges}
@@ -32,3 +34,55 @@ class TestCoders(unittest.TestCase):
         self.assertEqual(request['format'], 'qp')
         self.assertEqual(request['lin'],  'AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8=')
         self.assertEqual(request['quad'], 'AAAAAAAA8L8AAAAAAADwvwAAAAAAAPC/AAAAAAAA8L8=')
+
+    def test_qpu_request_encoding_sub_qubits(self):
+        """Inactive qubits should be encoded as NaNs. Inactive couplers should be omitted."""
+
+        solver = get_solver()
+        linear = {index: 1 for index in sorted(list(solver.nodes))[:2]}
+        quadratic = {key: -1 for key in sorted(list(solver.undirected_edges))[:1]}
+        request = encode_bqm_as_qp(solver, linear, quadratic)
+        self.assertEqual(request['format'], 'qp')
+        # [1, 1, NaN, NaN]
+        self.assertEqual(request['lin'],  'AAAAAAAA8D8AAAAAAADwPwAAAAAAAPh/AAAAAAAA+H8=')
+        # [-1]
+        self.assertEqual(request['quad'], 'AAAAAAAA8L8=')
+
+    def test_qpu_request_encoding_missing_qubits(self):
+        """Qubits don't have to be specified with biases only, but also with couplings."""
+
+        solver = get_solver()
+        linear = {}
+        quadratic = {(0, 1): -1}
+        request = encode_bqm_as_qp(solver, linear, quadratic)
+        self.assertEqual(request['format'], 'qp')
+        # [0, 0, NaN, NaN]
+        self.assertEqual(request['lin'],  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPh/AAAAAAAA+H8=')
+        # [-1]
+        self.assertEqual(request['quad'], 'AAAAAAAA8L8=')
+
+    def test_qpu_request_encoding_sub_qubits_implicit_biases(self):
+        """Biases don't have to be specified for qubits to be active."""
+
+        solver = get_solver()
+        linear = {}
+        quadratic = {(0,3): -1}
+        request = encode_bqm_as_qp(solver, linear, quadratic)
+        self.assertEqual(request['format'], 'qp')
+        # [0, NaN, NaN, 0]
+        self.assertEqual(request['lin'],  'AAAAAAAAAAAAAAAAAAD4fwAAAAAAAPh/AAAAAAAAAAA=')
+        # [-1]
+        self.assertEqual(request['quad'], 'AAAAAAAA8L8=')
+
+    def test_qpu_request_encoding_sub_qubits_implicit_couplings(self):
+        """Couplings should be zero for active qubits, if not specified."""
+
+        solver = get_solver()
+        linear = {0: 0, 3: 0}
+        quadratic = {}
+        request = encode_bqm_as_qp(solver, linear, quadratic)
+        self.assertEqual(request['format'], 'qp')
+        # [0, NaN, NaN, 0]
+        self.assertEqual(request['lin'],  'AAAAAAAAAAAAAAAAAAD4fwAAAAAAAPh/AAAAAAAAAAA=')
+        # [-1]
+        self.assertEqual(request['quad'], 'AAAAAAAAAAA=')
diff --git a/tests/test_utils.py b/tests/test_utils.py
index a3fcd6f..8a6f4db 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -1,7 +1,8 @@
 import unittest
 from collections import OrderedDict
 
-from dwave.cloud.utils import readline_input, uniform_iterator, uniform_get
+from dwave.cloud.utils import (
+    readline_input, uniform_iterator, uniform_get, strip_head, strip_tail)
 from dwave.cloud.testing import mock
 
 
@@ -22,6 +23,18 @@ class TestUtils(unittest.TestCase):
         self.assertEqual(uniform_get(l, 2), None)
         self.assertEqual(uniform_get(l, 2, default=0), 0)
 
+    def test_strip_head(self):
+        self.assertEqual(strip_head([0, 0, 1, 2], [0]), [1, 2])
+        self.assertEqual(strip_head([1], [0]), [1])
+        self.assertEqual(strip_head([1], []), [1])
+        self.assertEqual(strip_head([0, 0, 1, 2], [0, 1, 2]), [])
+
+    def test_strip_tail(self):
+        self.assertEqual(strip_tail([1, 2, 0, 0], [0]), [1, 2])
+        self.assertEqual(strip_tail([1], [0]), [1])
+        self.assertEqual(strip_tail([1], []), [1])
+        self.assertEqual(strip_tail([0, 0, 1, 2], [0, 1, 2]), [])
+
     def test_readline_input(self):
         val = "value"
         with mock.patch("six.moves.input", side_effect=[val], create=True):
