diff --git a/tests/unit/test_fhir_runner.py b/tests/unit/test_fhir_runner.py
new file mode 100644
index 0000000..ac71256
--- /dev/null
+++ b/tests/unit/test_fhir_runner.py
@@ -0,0 +1,99 @@
+from unittest.mock import MagicMock, patch
+
+import pytest
+
+from pyembeddedfhir.fhir_runner import FHIRRunner
+from pyembeddedfhir.models import FHIRFlavor
+
+
+@pytest.fixture
+def network_mock():
+    return MagicMock()
+
+
+@pytest.fixture
+def docker_client_mock(network_mock):
+    mock = MagicMock()
+    mock.networks.create.return_value = network_mock
+    return mock
+
+
+class SomeUnexpectedError(Exception):
+    pass
+
+
+@pytest.fixture
+def implementation_constructor_mock():
+    return MagicMock()
+
+
+@pytest.fixture
+def patched_hapi_fhir_implementation(implementation_constructor_mock):
+    with patch(
+        "pyembeddedfhir.fhir_runner.HAPIFHIRImplementation",
+        implementation_constructor_mock,
+    ):
+        yield implementation_constructor_mock
+
+
+class TestNetworkRemoval:
+    def test_network_removal_when_failure(
+        self,
+        docker_client_mock,
+        patched_hapi_fhir_implementation,
+        network_mock,
+    ):
+        """When faced with any error in the implementation,
+        FHIRRunner should delete created network."""
+        implementation = patched_hapi_fhir_implementation.return_value
+        implementation.start.side_effect = SomeUnexpectedError()
+        with pytest.raises(SomeUnexpectedError):
+            FHIRRunner(
+                FHIRFlavor.HAPI,
+                docker_client=docker_client_mock,
+            )
+        network_mock.remove.assert_called_once()
+
+    def test_when_success(
+        self,
+        docker_client_mock,
+        patched_hapi_fhir_implementation,
+        network_mock,
+    ):
+        """When the implementation succeeds,
+        FHIRRunner should not delete created network."""
+        FHIRRunner(
+            FHIRFlavor.HAPI,
+            docker_client=docker_client_mock,
+        )
+        network_mock.remove.assert_not_called()
+
+    def test_when_context_manager(
+        self,
+        docker_client_mock,
+        patched_hapi_fhir_implementation,
+        network_mock,
+    ):
+        """When FHIRRunner is used as context manager,
+        it should delete created network."""
+        with FHIRRunner(
+            FHIRFlavor.HAPI,
+            docker_client=docker_client_mock,
+        ):
+            pass
+        network_mock.remove.assert_called_once()
+
+    def test_when_stop(
+        self,
+        docker_client_mock,
+        patched_hapi_fhir_implementation,
+        network_mock,
+    ):
+        """When stop() is explicitly called,
+        FHIRRunner should delete created network."""
+        runner = FHIRRunner(
+            FHIRFlavor.HAPI,
+            docker_client=docker_client_mock,
+        )
+        runner.stop()
+        network_mock.remove.assert_called_once()
diff --git a/tests/unit/test_implementations.py b/tests/unit/test_implementations.py
new file mode 100644
index 0000000..c588840
--- /dev/null
+++ b/tests/unit/test_implementations.py
@@ -0,0 +1,113 @@
+from unittest.mock import MagicMock
+import pytest
+
+from pyembeddedfhir.implementations import (
+    HAPIFHIRImplementation,
+    MicrosoftFHIRImplemention,
+)
+from pyembeddedfhir.models import Configuration
+
+
+@pytest.fixture
+def network_mock():
+    return MagicMock()
+
+
+@pytest.fixture
+def container_mock(network_mock):
+    mock = MagicMock()
+    mock.exec_run.return_value = (0, None)
+    mock.attrs = {
+        "NetworkSettings": {
+            "Networks": {
+                "a": {
+                    "NetworkID": network_mock.id,
+                    "IPAddress": "127.0.0.1",
+                },
+            },
+        },
+    }
+    mock.wait.return_value = {"StatusCode": 0}
+    return mock
+
+
+@pytest.fixture
+def docker_client_mock(container_mock):
+    mock = MagicMock()
+    mock.containers.run.return_value = container_mock
+    return mock
+
+
+@pytest.fixture
+def sample_configuration(docker_client_mock):
+    return Configuration(docker_client=docker_client_mock)
+
+
+class SomeError(Exception):
+    pass
+
+
+class TestContainerRemoval:
+    def test_microsoft_kills_both_containers_when_failure(
+        self,
+        docker_client_mock,
+        network_mock,
+        sample_configuration,
+        container_mock,
+    ):
+        container_mock.wait.side_effect = SomeError()
+        implementation = MicrosoftFHIRImplemention()
+        with pytest.raises(SomeError):
+            implementation.start(
+                docker_client_mock,
+                sample_configuration,
+                network_mock,
+            )
+        assert container_mock.kill.call_count == 2
+
+    def test_microsoft_kills_no_containers_when_success(
+        self,
+        docker_client_mock,
+        network_mock,
+        sample_configuration,
+        container_mock,
+    ):
+        implementation = MicrosoftFHIRImplemention()
+        implementation.start(
+            docker_client_mock,
+            sample_configuration,
+            network_mock,
+        )
+        assert container_mock.kill.call_count == 0
+
+    def test_hapi_kills_container_when_failure(
+        self,
+        docker_client_mock,
+        network_mock,
+        sample_configuration,
+        container_mock,
+    ):
+        container_mock.wait.side_effect = SomeError()
+        implementation = HAPIFHIRImplementation()
+        with pytest.raises(SomeError):
+            implementation.start(
+                docker_client_mock,
+                sample_configuration,
+                network_mock,
+            )
+        assert container_mock.kill.call_count == 1
+
+    def test_hapi_kills_no_containers_when_success(
+        self,
+        docker_client_mock,
+        network_mock,
+        sample_configuration,
+        container_mock,
+    ):
+        implementation = HAPIFHIRImplementation()
+        implementation.start(
+            docker_client_mock,
+            sample_configuration,
+            network_mock,
+        )
+        assert container_mock.kill.call_count == 0
