diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 9c25517..da8c1e4 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -47,7 +47,7 @@ repos:
         language_version: python3.10
         args: ['--check']
   - repo: https://github.com/sirosen/check-jsonschema
-    rev: 0.27.3
+    rev: 0.27.4
     hooks:
       - id: check-github-workflows
       - id: check-github-actions
diff --git a/sceptre/resolvers/stack_output.py b/sceptre/resolvers/stack_output.py
index 6b22541..994636c 100644
--- a/sceptre/resolvers/stack_output.py
+++ b/sceptre/resolvers/stack_output.py
@@ -6,7 +6,12 @@ import shlex
 
 from botocore.exceptions import ClientError
 
-from sceptre.exceptions import DependencyStackMissingOutputError, StackDoesNotExistError
+from sceptre.exceptions import (
+    DependencyStackMissingOutputError,
+    StackDoesNotExistError,
+    SceptreException,
+)
+
 from sceptre.helpers import normalise_path, sceptreise_path
 from sceptre.resolvers import Resolver
 
@@ -108,7 +113,13 @@ class StackOutput(StackOutputBase):
         """
         Adds dependency to a Stack.
         """
-        dep_stack_name, self.output_key = self.argument.split("::")
+        try:
+            dep_stack_name, self.output_key = self.argument.split("::")
+        except ValueError as err:
+            raise SceptreException(
+                "!stack_output arg should match STACK_NAME::OUTPUT_KEY"
+            ) from err
+
         self.dependency_stack_name = sceptreise_path(normalise_path(dep_stack_name))
         self.stack.dependencies.append(self.dependency_stack_name)
 
@@ -120,7 +131,6 @@ class StackOutput(StackOutputBase):
         :rtype: str
         """
         self.logger.debug("Resolving Stack output: {0}".format(self.argument))
-
         friendly_stack_name = self.dependency_stack_name.replace(TEMPLATE_EXTENSION, "")
 
         stack = next(
@@ -163,21 +173,43 @@ class StackOutputExternal(StackOutputBase):
         """
         self.logger.debug("Resolving external Stack output: {0}".format(self.argument))
 
-        profile = None
-        region = None
-        sceptre_role = None
         arguments = shlex.split(self.argument)
 
+        if not arguments:
+            message = "!stack_output_external requires at least one argument"
+            raise SceptreException(message)
+
         stack_argument = arguments[0]
+        stack_args = iter(stack_argument.split("::"))
+
+        try:
+            dependency_stack_name = next(stack_args)
+            output_key = next(stack_args)
+
+        except StopIteration as err:
+            message = "!stack_output_external arg should match STACK_NAME::OUTPUT_KEY"
+            raise SceptreException(message) from err
+
+        profile = region = sceptre_role = None
+
         if len(arguments) > 1:
-            extra_args = arguments[1].split("::", 2)
-            profile, region, sceptre_role = extra_args + (3 - len(extra_args)) * [None]
+            extra_args = iter(arguments[1].split("::"))
+
+            profile = next(extra_args, None)
+            region = next(extra_args, None)
+            sceptre_role = next(extra_args, None)
+
+            try:
+                next(extra_args)
+                message = (
+                    "!stack_output_external second arg should be "
+                    "in the format 'PROFILE[::REGION[::SCEPTRE_ROLE]]'"
+                )
+                raise SceptreException(message)
+
+            except StopIteration:
+                pass
 
-        dependency_stack_name, output_key = stack_argument.split("::")
         return self._get_output_value(
-            dependency_stack_name,
-            output_key,
-            profile or None,
-            region or None,
-            sceptre_role or None,
+            dependency_stack_name, output_key, profile, region, sceptre_role
         )
