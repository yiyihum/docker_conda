diff --git a/README.rst b/README.rst
index 6ba7643..94c27b3 100644
--- a/README.rst
+++ b/README.rst
@@ -352,7 +352,7 @@ Passing thru real requests
 --------------------------
 
 In some cases you may wish to allow for certain requests to pass thru responses
-and hit a real server. This can be done with the 'passthru' methods:
+and hit a real server. This can be done with the ``add_passthru' methods:
 
 .. code-block:: python
 
@@ -365,6 +365,12 @@ and hit a real server. This can be done with the 'passthru' methods:
 This will allow any requests matching that prefix, that is otherwise not registered
 as a mock response, to passthru using the standard behavior.
 
+Regex can be used like:
+
+.. code-block:: python
+
+    responses.add_passthru(re.compile('https://percy.io/\\w+'))
+
 
 Viewing/Modifying registered responses
 --------------------------------------
diff --git a/responses.py b/responses.py
index bc54b78..3f32125 100644
--- a/responses.py
+++ b/responses.py
@@ -527,14 +527,18 @@ class RequestsMock(object):
 
     def add_passthru(self, prefix):
         """
-        Register a URL prefix to passthru any non-matching mock requests to.
+        Register a URL prefix or regex to passthru any non-matching mock requests to.
 
         For example, to allow any request to 'https://example.com', but require
         mocks for the remainder, you would add the prefix as so:
 
         >>> responses.add_passthru('https://example.com')
+
+        Regex can be used like:
+
+        >>> responses.add_passthru(re.compile('https://example.com/\\w+'))
         """
-        if _has_unicode(prefix):
+        if not isinstance(prefix, Pattern) and _has_unicode(prefix):
             prefix = _clean_unicode(prefix)
         self.passthru_prefixes += (prefix,)
 
@@ -624,7 +628,14 @@ class RequestsMock(object):
         resp_callback = self.response_callback
 
         if match is None:
-            if request.url.startswith(self.passthru_prefixes):
+            if any(
+                [
+                    p.match(request.url)
+                    if isinstance(p, Pattern)
+                    else request.url.startswith(p)
+                    for p in self.passthru_prefixes
+                ]
+            ):
                 logger.info("request.allowed-passthru", extra={"url": request.url})
                 return _real_send(adapter, request, **kwargs)
 
