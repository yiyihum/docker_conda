diff --git a/sseclient/__init__.py b/sseclient/__init__.py
index 3bd32e0..4fb502b 100644
--- a/sseclient/__init__.py
+++ b/sseclient/__init__.py
@@ -8,7 +8,6 @@ Provides a generator of SSE received through an existing HTTP response.
 
 import logging
 
-
 __author__ = 'Maxime Petazzoni <maxime.petazzoni@bulix.org>'
 __email__ = 'maxime.petazzoni@bulix.org'
 __copyright__ = 'Copyright (C) 2016-2017 SignalFx, Inc. All rights reserved.'
@@ -32,8 +31,9 @@ class SSEClient(object):
         method. That would usually be something that implements
         io.BinaryIOBase, like an httplib or urllib3 HTTPResponse object.
         """
-        logging.debug('Initialized SSE client from event source %s',
-                      event_source)
+        self._logger = logging.getLogger(self.__class__.__module__)
+        self._logger.debug('Initialized SSE client from event source %s',
+                           event_source)
         self._event_source = event_source
         self._char_enc = char_enc
 
@@ -47,10 +47,10 @@ class SSEClient(object):
         data = b''
         for chunk in self._event_source:
             for line in chunk.splitlines(True):
-                if not line.strip():
+                data += line
+                if data.endswith((b'\r\r', b'\n\n', b'\r\n\r\n')):
                     yield data
                     data = b''
-                data += line
         if data:
             yield data
 
@@ -72,13 +72,22 @@ class SSEClient(object):
 
                 # Ignore unknown fields.
                 if field not in event.__dict__:
-                    logging.debug('Saw invalid field %s while parsing '
-                                  'Server Side Event', field)
+                    self._logger.debug('Saw invalid field %s while parsing '
+                                       'Server Side Event', field)
                     continue
 
-                # Spaces may occur before the value; strip them. If no value is
-                # present after the separator, assume an empty value.
-                value = data[1].lstrip() if len(data) > 1 else ''
+                if len(data) > 1:
+                    # From the spec:
+                    # "If value starts with a single U+0020 SPACE character,
+                    # remove it from value."
+                    if data[1].startswith(' '):
+                        value = data[1][1:]
+                    else:
+                        value = data[1]
+                else:
+                    # If no value is present after the separator,
+                    # assume an empty value.
+                    value = ''
 
                 # The data field may come over multiple lines and their values
                 # are concatenated with each other.
@@ -95,8 +104,11 @@ class SSEClient(object):
             if event.data.endswith('\n'):
                 event.data = event.data[0:-1]
 
+            # Empty event names default to 'message'
+            event.event = event.event or 'message'
+
             # Dispatch the event
-            logging.debug('Dispatching %s...', event)
+            self._logger.debug('Dispatching %s...', event)
             yield event
 
     def close(self):
diff --git a/sseclient/version.py b/sseclient/version.py
index 273eb95..4c6e6f8 100644
--- a/sseclient/version.py
+++ b/sseclient/version.py
@@ -1,2 +1,2 @@
 name = 'sseclient-py'
-version = '1.5'
+version = '1.7'

