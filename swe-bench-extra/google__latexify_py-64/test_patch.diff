diff --git a/src/latexify/frontend_test.py b/src/latexify/frontend_test.py
new file mode 100644
index 0000000..91a9d30
--- /dev/null
+++ b/src/latexify/frontend_test.py
@@ -0,0 +1,19 @@
+"""Tests for latexify.frontend."""
+
+from __future__ import annotations
+
+from latexify import frontend
+
+
+def test_identifiers() -> None:
+    def very_long_name_function(very_long_name_variable):
+        return 3 * very_long_name_variable
+
+    identifiers = {
+        "very_long_name_function": "f",
+        "very_long_name_variable": "x",
+    }
+
+    assert frontend.get_latex(very_long_name_function, identifiers=identifiers) == (
+        r"\mathrm{f}(x) \triangleq 3x"
+    )
diff --git a/src/latexify/test_utils.py b/src/latexify/test_utils.py
new file mode 100644
index 0000000..b45da9b
--- /dev/null
+++ b/src/latexify/test_utils.py
@@ -0,0 +1,59 @@
+"""Test utilities."""
+
+from __future__ import annotations
+
+import ast
+from typing import cast
+
+
+def ast_equal(tree1: ast.AST, tree2: ast.AST) -> bool:
+    """Checks the equality between two ASTs.
+
+    Args:
+        tree1: An AST to compare.
+        tree2: Another AST.
+
+    Returns:
+        True if tree1 and tree2 represent the same AST, False otherwise.
+    """
+    try:
+        assert type(tree1) is type(tree2)
+
+        for k, v1 in vars(tree1).items():
+            v2 = getattr(tree2, k)
+
+            if isinstance(v1, ast.AST):
+                assert ast_equal(v1, cast(ast.AST, v2))
+            elif isinstance(v1, list):
+                v2 = cast(list, v2)
+                assert len(v1) == len(v2)
+                assert all(
+                    ast_equal(cast(ast.AST, c1), cast(ast.AST, c2))
+                    for c1, c2 in zip(v1, v2)
+                )
+            else:
+                assert v1 == v2
+
+    except AssertionError:
+        return False
+
+    return True
+
+
+def assert_ast_equal(tree1: ast.AST, tree2: ast.AST) -> None:
+    """Asserts the equality between two ASTs.
+
+    Args:
+        tree1: An AST to compare.
+        tree2: Another AST.
+
+    Raises:
+        AssertionError: tree1 and tree2 represent different ASTs.
+    """
+    assert ast_equal(
+        tree1, tree2
+    ), f"""\
+AST does not match.
+tree1={ast.dump(tree1, indent=4)}
+tree2={ast.dump(tree2, indent=4)}
+"""
diff --git a/src/latexify/transformers/identifier_replacer_test.py b/src/latexify/transformers/identifier_replacer_test.py
new file mode 100644
index 0000000..f555b92
--- /dev/null
+++ b/src/latexify/transformers/identifier_replacer_test.py
@@ -0,0 +1,101 @@
+"""Tests for latexify.transformer.identifier_replacer."""
+
+import ast
+
+import pytest
+
+from latexify import test_utils
+from latexify.transformers.identifier_replacer import IdentifierReplacer
+
+
+def test_invalid_mapping() -> None:
+    with pytest.raises(ValueError, match=r"'123' is not an identifier name."):
+        IdentifierReplacer({"123": "foo"})
+    with pytest.raises(ValueError, match=r"'456' is not an identifier name."):
+        IdentifierReplacer({"foo": "456"})
+
+
+def test_name_replaced() -> None:
+    source = ast.Name(id="foo", ctx=ast.Load())
+    expected = ast.Name(id="bar", ctx=ast.Load())
+    transformed = IdentifierReplacer({"foo": "bar"}).visit(source)
+    test_utils.assert_ast_equal(transformed, expected)
+
+
+def test_name_not_replaced() -> None:
+    source = ast.Name(id="foo", ctx=ast.Load())
+    expected = ast.Name(id="foo", ctx=ast.Load())
+    transformed = IdentifierReplacer({"fo": "bar"}).visit(source)
+    test_utils.assert_ast_equal(transformed, expected)
+    transformed = IdentifierReplacer({"fooo": "bar"}).visit(source)
+    test_utils.assert_ast_equal(transformed, expected)
+
+
+def test_functiondef() -> None:
+    # Subtree of:
+    #     @d
+    #     def f(x=a, /, y=b, *, z=c):
+    #         ...
+    source = ast.FunctionDef(
+        name="f",
+        args=ast.arguments(
+            posonlyargs=[ast.arg(arg="x")],
+            args=[ast.arg(arg="y")],
+            kwonlyargs=[ast.arg(arg="z")],
+            kw_defaults=[ast.Name(id="c", ctx=ast.Load())],
+            defaults=[
+                ast.Name(id="a", ctx=ast.Load()),
+                ast.Name(id="b", ctx=ast.Load()),
+            ],
+        ),
+        body=[ast.Ellipsis()],
+        decorator_list=[ast.Name(id="d", ctx=ast.Load())],
+    )
+
+    expected = ast.FunctionDef(
+        name="F",
+        args=ast.arguments(
+            posonlyargs=[ast.arg(arg="X")],
+            args=[ast.arg(arg="Y")],
+            kwonlyargs=[ast.arg(arg="Z")],
+            kw_defaults=[ast.Name(id="C", ctx=ast.Load())],
+            defaults=[
+                ast.Name(id="A", ctx=ast.Load()),
+                ast.Name(id="B", ctx=ast.Load()),
+            ],
+        ),
+        body=[ast.Ellipsis()],
+        decorator_list=[ast.Name(id="D", ctx=ast.Load())],
+    )
+
+    mapping = {x: x.upper() for x in "abcdfxyz"}
+    transformed = IdentifierReplacer(mapping).visit(source)
+    test_utils.assert_ast_equal(transformed, expected)
+
+
+def test_expr() -> None:
+    # Subtree of:
+    #     (x + y) * z
+    source = ast.BinOp(
+        left=ast.BinOp(
+            left=ast.Name(id="x", ctx=ast.Load()),
+            op=ast.Add(),
+            right=ast.Name(id="y", ctx=ast.Load()),
+        ),
+        op=ast.Mult(),
+        right=ast.Name(id="z", ctx=ast.Load()),
+    )
+
+    expected = ast.BinOp(
+        left=ast.BinOp(
+            left=ast.Name(id="X", ctx=ast.Load()),
+            op=ast.Add(),
+            right=ast.Name(id="Y", ctx=ast.Load()),
+        ),
+        op=ast.Mult(),
+        right=ast.Name(id="Z", ctx=ast.Load()),
+    )
+
+    mapping = {x: x.upper() for x in "xyz"}
+    transformed = IdentifierReplacer(mapping).visit(source)
+    test_utils.assert_ast_equal(transformed, expected)
