diff --git a/pycytominer/tests/test_cyto_utils/test_feature_drop_outlier.py b/pycytominer/tests/test_cyto_utils/test_feature_drop_outlier.py
new file mode 100644
index 0000000..ab190de
--- /dev/null
+++ b/pycytominer/tests/test_cyto_utils/test_feature_drop_outlier.py
@@ -0,0 +1,55 @@
+import os
+import random
+import pytest
+import tempfile
+import warnings
+import pandas as pd
+from pycytominer.cyto_utils.features import drop_outlier_features
+
+# Build data to use in tests
+data_df = pd.DataFrame(
+    {
+        "Metadata_plate": ["a", "a", "a", "a", "b", "b", "b", "b"],
+        "Metadata_treatment": [
+            "drug",
+            "drug",
+            "control",
+            "control",
+            "drug",
+            "drug",
+            "control",
+            "control",
+        ],
+        "Cells_x": [1, 2, -8, 2, 5, 5, 5, -1],
+        "Cytoplasm_y": [3, -1, 7, 4, 5, -9, 6, 1],
+        "Nuclei_z": [-1, 8, 2, 5, -6, 20, 2, -2],
+        "Cells_zz": [14, -46, 1, 60, -30, -100, 2, 2],
+    }
+).reset_index(drop=True)
+
+
+def test_outlier_default():
+    result = drop_outlier_features(data_df)
+    expected_result = ["Cells_zz", "Nuclei_z"]
+    assert sorted(result) == sorted(expected_result)
+
+
+def test_outlier_high_cutoff():
+    result = drop_outlier_features(data_df, outlier_cutoff=30)
+    expected_result = ["Cells_zz"]
+    assert result == expected_result
+
+
+def test_outlier_samples():
+    result = drop_outlier_features(data_df, samples=[0, 1, 2, 3, 5])
+    expected_result = ["Cells_zz", "Nuclei_z"]
+    assert sorted(result) == sorted(expected_result)
+
+    result = drop_outlier_features(data_df, samples=[0, 1, 2, 3])
+    expected_result = ["Cells_zz"]
+    assert result == expected_result
+
+
+def test_outlier_features():
+    result = drop_outlier_features(data_df, features=["Cells_x", "Cytoplasm_y"])
+    assert len(result) == 0
diff --git a/pycytominer/tests/test_feature_select.py b/pycytominer/tests/test_feature_select.py
index 51bfa95..11692e4 100644
--- a/pycytominer/tests/test_feature_select.py
+++ b/pycytominer/tests/test_feature_select.py
@@ -52,6 +52,27 @@ data_unique_test_df = pd.DataFrame(
 ).reset_index(drop=True)
 
 
+data_outlier_df = pd.DataFrame(
+    {
+        "Metadata_plate": ["a", "a", "a", "a", "b", "b", "b", "b"],
+        "Metadata_treatment": [
+            "drug",
+            "drug",
+            "control",
+            "control",
+            "drug",
+            "drug",
+            "control",
+            "control",
+        ],
+        "Cells_x": [1, 2, -8, 2, 5, 5, 5, -1],
+        "Cytoplasm_y": [3, -1, 7, 4, 5, -9, 6, 1],
+        "Nuclei_z": [-1, 8, 2, 5, -6, 20, 2, -2],
+        "Cells_zz": [14, -46, 1, 60, -30, -100, 2, 2],
+    }
+).reset_index(drop=True)
+
+
 def test_feature_select_get_na_columns():
     """
     Testing feature_select and get_na_columns pycytominer function
@@ -273,3 +294,25 @@ def test_feature_select_blacklist():
     )
     expected_result = pd.DataFrame({"y": [1, 2, 8, 5, 2, 1], "zz": [0, -3, 8, 9, 6, 9]})
     pd.testing.assert_frame_equal(result, expected_result)
+
+
+def test_feature_select_drop_outlier():
+    """
+    Testing feature_select and get_na_columns pycytominer function
+    """
+    result = feature_select(
+        data_outlier_df, features="infer", operation="drop_outliers"
+    )
+    expected_result = data_outlier_df.drop(["Cells_zz", "Nuclei_z"], axis="columns")
+    pd.testing.assert_frame_equal(result, expected_result)
+
+    result = feature_select(
+        data_outlier_df, features="infer", operation="drop_outliers", outlier_cutoff=30
+    )
+    expected_result = data_outlier_df.drop(["Cells_zz"], axis="columns")
+    pd.testing.assert_frame_equal(result, expected_result)
+
+    result = feature_select(
+        data_outlier_df, features=["Cells_x", "Cytoplasm_y"], operation="drop_outliers"
+    )
+    pd.testing.assert_frame_equal(result, data_outlier_df)
