diff --git a/tests/test_cli.py b/tests/test_cli.py
index 115bf94..2919986 100644
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -8,7 +8,7 @@ import pytest
 from mypy_extensions import VarArg
 from typer.testing import CliRunner, Result
 
-from pyscript import __version__
+from pyscript import LATEST_PYSCRIPT_VERSION, __version__, config
 from pyscript.cli import app
 
 if TYPE_CHECKING:
@@ -167,3 +167,166 @@ def test_wrap_title(
     assert f"<py-script>\n{command}\n</py-script>" in html_text
 
     assert f"<title>{expected_title}</title>" in html_text
+
+
+@pytest.mark.parametrize(
+    "version, expected_version",
+    [(None, LATEST_PYSCRIPT_VERSION), ("2022.9.1", "2022.9.1")],
+)
+def test_wrap_pyscript_version(
+    invoke_cli: CLIInvoker,
+    version: Optional[str],
+    expected_version: str,
+    tmp_path: Path,
+) -> None:
+    """
+    Test that when wrap is called passing a string code input and an explicit pyscript version
+    the project is created correctly
+    """
+    command = 'print("Hello World!")'
+    args = ["wrap", "-c", command, "-o", "output.html"]
+    if version is not None:
+        args.extend(["--pyscript-version", version])
+
+    # GIVEN a call to wrap with a cmd input and specific pyscript version as arguments
+    result = invoke_cli(*args)
+    assert result.exit_code == 0
+
+    # EXPECT the output file to exist
+    expected_html_path = tmp_path / "output.html"
+    assert expected_html_path.exists()
+
+    with expected_html_path.open() as fp:
+        html_text = fp.read()
+
+    # EXPECT the right cmd to be present in the output file
+    assert f"<py-script>\n{command}\n</py-script>" in html_text
+
+    # EXPECT the right JS and CSS version to be present in the output file
+    version_str = (
+        f'<script defer src="https://pyscript.net/releases/{expected_version}'
+        '/pyscript.js"></script>'
+    )
+    css_version_str = (
+        '<link rel="stylesheet" href="https://pyscript.net/releases/'
+        f'{expected_version}/pyscript.css"/>'
+    )
+    assert version_str in html_text
+    assert css_version_str in html_text
+
+
+@pytest.mark.parametrize(
+    "version, expected_version",
+    [(None, LATEST_PYSCRIPT_VERSION), ("2022.9.1", "2022.9.1")],
+)
+def test_wrap_pyscript_version_file(
+    invoke_cli: CLIInvoker,
+    version: Optional[str],
+    expected_version: str,
+    tmp_path: Path,
+) -> None:
+    """
+    Test that when wrap is called passing a file input and an explicit pyscript version
+    the project is created correctly
+    """
+    command = 'print("Hello World!")'
+    input_file = tmp_path / "hello.py"
+    with input_file.open("w") as fp:
+        fp.write(command)
+
+    args = ["wrap", str(input_file), "-o", "output.html"]
+
+    if version is not None:
+        args.extend(["--pyscript-version", version])
+
+    # GIVEN a call to wrap with a file and specific pyscript version as arguments
+    result = invoke_cli(*args)
+    assert result.exit_code == 0
+
+    # EXPECT the output file to exist
+    expected_html_path = tmp_path / "output.html"
+    assert expected_html_path.exists()
+
+    with expected_html_path.open() as fp:
+        html_text = fp.read()
+
+    # EXPECT the right cmd to be present in the output file
+    assert f"<py-script>\n{command}\n</py-script>" in html_text
+
+    # EXPECT the right JS and CSS version to be present in the output file
+    version_str = (
+        f'<script defer src="https://pyscript.net/releases/{expected_version}'
+        '/pyscript.js"></script>'
+    )
+    css_version_str = (
+        '<link rel="stylesheet" href="https://pyscript.net/releases/'
+        f'{expected_version}/pyscript.css"/>'
+    )
+    assert version_str in html_text
+    assert css_version_str in html_text
+
+
+@pytest.mark.parametrize(
+    "create_args, expected_version",
+    [
+        (("myapp1",), LATEST_PYSCRIPT_VERSION),
+        (("myapp-w-version", "--pyscript-version", "2022.9.1"), "2022.9.1"),
+    ],
+)
+def test_create_project_version(
+    invoke_cli: CLIInvoker,
+    tmp_path: Path,
+    create_args: tuple[str],
+    expected_version: str,
+) -> None:
+    """
+    Test that project created with an explicit pyscript version are created correctly
+    """
+    command = 'print("Hello World!")'
+
+    input_file = tmp_path / "hello.py"
+    with input_file.open("w") as fp:
+        fp.write(command)
+
+    cmd_args = list(create_args) + [
+        "--app-description",
+        "",
+        "--author-name",
+        "tester",
+        "--author-email",
+        "tester@me.com",
+    ]
+
+    # GIVEN a call to wrap with a file and specific pyscript version as arguments
+    result = invoke_cli("create", *cmd_args)
+    assert result.exit_code == 0
+
+    # EXPECT the app folder to exist
+    expected_app_path = tmp_path / create_args[0]
+    assert expected_app_path.exists()
+
+    # EXPECT the app folder to contain the right index.html file
+    app_file = expected_app_path / "index.html"
+    assert app_file.exists()
+    with app_file.open() as fp:
+        html_text = fp.read()
+
+    # EXPECT the right JS and CSS version to be present in the html file
+    version_str = (
+        f'<script defer src="https://pyscript.net/releases/{expected_version}'
+        '/pyscript.js"></script>'
+    )
+    css_version_str = (
+        '<link rel="stylesheet" href="https://pyscript.net/releases/'
+        f'{expected_version}/pyscript.css"/>'
+    )
+    assert version_str in html_text
+    assert css_version_str in html_text
+
+    # EXPECT the folder to also contain the python main file
+    py_file = expected_app_path / config["project_main_filename"]
+    assert py_file.exists()
+
+    # EXPECT the folder to also contain the config file
+    config_file = expected_app_path / config["project_config_filename"]
+    assert config_file.exists()
