diff --git a/test/test_store/test_store_sparqlstore.py b/test/test_store/test_store_sparqlstore.py
index 39a7d3cd..fa98b956 100644
--- a/test/test_store/test_store_sparqlstore.py
+++ b/test/test_store/test_store_sparqlstore.py
@@ -1,3 +1,4 @@
+import logging
 import re
 import socket
 from http.server import BaseHTTPRequestHandler, HTTPServer
@@ -457,23 +458,22 @@ class SPARQL11ProtocolStoreMock(BaseHTTPRequestHandler):
         print(body)
         ```
         """
-        contenttype = self.headers.get("Content-Type")
+        contenttype = [
+            part.strip() for part in f"{self.headers.get('Content-Type')}".split(";")
+        ]
+        logging.debug("contenttype = %s", contenttype)
         if self.path == "/query" or self.path == "/query?":
-            if self.headers.get("Content-Type") == "application/sparql-query":
+            if "application/sparql-query" in contenttype:
                 pass
-            elif (
-                self.headers.get("Content-Type") == "application/x-www-form-urlencoded"
-            ):
+            elif "application/x-www-form-urlencoded" in contenttype:
                 pass
             else:
                 self.send_response(406, "Not Acceptable")
                 self.end_headers()
         elif self.path == "/update" or self.path == "/update?":
-            if self.headers.get("Content-Type") == "application/sparql-update":
+            if "application/sparql-update" in contenttype:
                 pass
-            elif (
-                self.headers.get("Content-Type") == "application/x-www-form-urlencoded"
-            ):
+            elif "application/x-www-form-urlencoded" in contenttype:
                 pass
             else:
                 self.send_response(406, "Not Acceptable")
diff --git a/test/test_store/test_store_sparqlupdatestore_mock.py b/test/test_store/test_store_sparqlupdatestore_mock.py
index 11a4983f..be8f0fae 100644
--- a/test/test_store/test_store_sparqlupdatestore_mock.py
+++ b/test/test_store/test_store_sparqlupdatestore_mock.py
@@ -58,3 +58,26 @@ class TestSPARQLConnector:
         req = self.httpmock.requests[MethodName.POST].pop(0)
         assert req.parsed_path.path == self.update_path
         assert "application/sparql-update" in req.headers.get("content-type")
+
+    def test_update_encoding(self):
+        graph = ConjunctiveGraph("SPARQLUpdateStore")
+        graph.open((self.query_endpoint, self.update_endpoint))
+        update_statement = f"INSERT DATA {{ {EG['subj']} {EG['pred']} {EG['obj']}. }}"
+
+        self.httpmock.responses[MethodName.POST].append(
+            MockHTTPResponse(
+                200,
+                "OK",
+                b"Update succeeded",
+                {"Content-Type": ["text/plain; charset=UTF-8"]},
+            )
+        )
+
+        # This test assumes that updates are performed using POST
+        # at the moment this is the only supported way for SPARQLUpdateStore
+        # to do updates.
+        graph.update(update_statement)
+        assert self.httpmock.call_count == 1
+        req = self.httpmock.requests[MethodName.POST].pop(0)
+        assert req.parsed_path.path == self.update_path
+        assert "charset=UTF-8" in req.headers.get("content-type")
