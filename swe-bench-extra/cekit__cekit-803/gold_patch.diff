diff --git a/cekit/builders/docker_builder.py b/cekit/builders/docker_builder.py
index 903ffa5..38c59c3 100644
--- a/cekit/builders/docker_builder.py
+++ b/cekit/builders/docker_builder.py
@@ -53,8 +53,8 @@ class DockerBuilder(Builder):
 
         deps["python-docker"] = {
             "library": "docker",
-            "package": "python-docker-py",
-            "fedora": {"package": "python3-docker"},
+            "package": "python3-docker",
+            "centos7": {"package": "python36-docker"},
         }
 
         if params is not None and not params.no_squash:
diff --git a/cekit/tools.py b/cekit/tools.py
index 34821b1..0cac2de 100644
--- a/cekit/tools.py
+++ b/cekit/tools.py
@@ -400,6 +400,7 @@ class DependencyHandler(object):
     def __init__(self):
         self.os_release = {}
         self.platform = None
+        self.version = None
 
         os_release_path = "/etc/os-release"
 
@@ -425,6 +426,7 @@ class DependencyHandler(object):
             or "ID" not in self.os_release
             or "NAME" not in self.os_release
             or "VERSION" not in self.os_release
+            or "VERSION_ID" not in self.os_release
         ):
             logger.warning(
                 "You are running CEKit on an unknown platform. External dependencies suggestions may not work!"
@@ -432,6 +434,7 @@ class DependencyHandler(object):
             return
 
         self.platform = self.os_release["ID"]
+        self.version = self.os_release["VERSION_ID"]
 
         if self.os_release["ID"] not in DependencyHandler.KNOWN_OPERATING_SYSTEMS:
             logger.warning(
@@ -448,7 +451,7 @@ class DependencyHandler(object):
             )
         )
 
-    def _handle_dependencies(self, dependencies):
+    def _handle_dependencies(self, dependencies: dict) -> None:
         """
         The dependencies provided is expected to be a dict in following format:
 
@@ -456,7 +459,7 @@ class DependencyHandler(object):
             PACKAGE_ID: { 'package': PACKAGE_NAME, 'command': COMMAND_TO_TEST_FOR_PACKACGE_EXISTENCE },
         }
 
-        Additionally every package can contain platform specific information, for example:
+        Additionally, every package can contain platform specific information, for example:
 
         {
             'git': {
@@ -470,6 +473,7 @@ class DependencyHandler(object):
 
         If the platform on which CEKit is currently running is available, it takes precedence before
         defaults.
+        The platform may be a simple name like e.g. 'fedora' or combined with the OS version e.g. 'centos7'
         """
 
         if not dependencies:
@@ -489,6 +493,13 @@ class DependencyHandler(object):
                 executable = current_dependency[self.platform].get(
                     "executable", executable
                 )
+            platform_release = f"{self.platform}{self.version}"
+            if platform_release in current_dependency:
+                package = current_dependency[platform_release].get("package", package)
+                library = current_dependency[platform_release].get("library", library)
+                executable = current_dependency[platform_release].get(
+                    "executable", executable
+                )
 
             logger.debug(
                 "Checking if '{}' dependency is provided...".format(dependency)
@@ -527,6 +538,7 @@ class DependencyHandler(object):
 
         logger.debug("All dependencies provided!")
 
+    # noinspection PyMethodMayBeStatic
     def _check_for_library(self, library):
         library_found = False
 
@@ -597,7 +609,7 @@ class DependencyHandler(object):
         except ImportError:
             pass
 
-    def handle(self, o, params):
+    def handle(self, o, params) -> None:
         """
         Handles dependencies from selected object. If the object has 'dependencies' method,
         it will be called to retrieve a set of dependencies to check for.
