diff --git a/test/test_btop.py b/test/test_btop.py
index 9f1f22a..e019563 100644
--- a/test/test_btop.py
+++ b/test/test_btop.py
@@ -164,15 +164,15 @@ class TestCountGaps(TestCase):
         self.assertEqual((3, 2), countGaps('-GG-34-T-T39F-'))
 
 
-class TestBtop2CigarConcise(TestCase):
+class TestBtop2CigarPrecise(TestCase):
     """
-    Tests for the btop2cigar function when concise is True.
+    Tests for the btop2cigar function when concise is False.
     """
     def testEmpty(self):
         """
         An empty BTOP string must result in an empty CIGAR string.
         """
-        self.assertEqual('', btop2cigar('', concise=True))
+        self.assertEqual('', btop2cigar('', concise=False))
 
     def testMixedMatch(self):
         """
@@ -180,7 +180,7 @@ class TestBtop2CigarConcise(TestCase):
         CIGAR sense where M could be identical characters or not), the CIGAR
         string must be all Ms.
         """
-        self.assertEqual('7M', btop2cigar('2GC3AT', concise=True))
+        self.assertEqual('7M', btop2cigar('2GC3AT', concise=False))
 
     def testRefenceInsertion(self):
         """
@@ -188,7 +188,7 @@ class TestBtop2CigarConcise(TestCase):
         subject (reference) does not, the CIGAR string must indicate an
         insertion to the reference.
         """
-        self.assertEqual('1I', btop2cigar('A-', concise=True))
+        self.assertEqual('1I', btop2cigar('A-', concise=False))
 
     def testQueryInsertion(self):
         """
@@ -196,7 +196,7 @@ class TestBtop2CigarConcise(TestCase):
         but the query does not, the CIGAR string must indicate an deletion in
         the reference.
         """
-        self.assertEqual('1D', btop2cigar('-A', concise=True))
+        self.assertEqual('1D', btop2cigar('-A', concise=False))
 
     def testAll(self):
         """
@@ -204,25 +204,36 @@ class TestBtop2CigarConcise(TestCase):
         string must be correct.
         """
         self.assertEqual('7M2I4M2D5M',
-                         btop2cigar('2GC3ATC-G-4-T-A5', concise=True))
+                         btop2cigar('2GC3ATC-G-4-T-A5', concise=False))
 
+    def testAllAA(self):
+        """
+        If a BTOP string specifies all possible variations, and we indicate
+        that the BTOP string refers to amino acids, the CIGAR string must be
+        correct (i.e., all counts must be tripled).
+        """
+        self.assertEqual(
+            '21M6I12M6D15M',
+            btop2cigar('2GC3ATC-G-4-T-A5', concise=False, aa=True))
 
-class TestBtop2CigarPrecise(TestCase):
+
+class TestBtop2CigarConcise(TestCase):
     """
-    Tests for the btop2cigar function when concise is False.
+    Tests for the btop2cigar function when concise is True.
     """
+
     def testEmpty(self):
         """
         An empty BTOP string must result in an empty CIGAR string.
         """
-        self.assertEqual('', btop2cigar('', concise=False))
+        self.assertEqual('', btop2cigar('', concise=True))
 
     def testMixedMatch(self):
         """
         If a BTOP string specifies that some characters match and some do
         not, the CIGAR string must be specific about the matches / mismatches.
         """
-        self.assertEqual('2=1X3=1X', btop2cigar('2GC3AT', concise=False))
+        self.assertEqual('2=1X3=1X', btop2cigar('2GC3AT', concise=True))
 
     def testRefenceInsertion(self):
         """
@@ -230,7 +241,7 @@ class TestBtop2CigarPrecise(TestCase):
         subject (reference) does not, the CIGAR string must indicate an
         insertion to the reference.
         """
-        self.assertEqual('1I', btop2cigar('A-', concise=False))
+        self.assertEqual('1I', btop2cigar('A-', concise=True))
 
     def testQueryInsertion(self):
         """
@@ -238,7 +249,7 @@ class TestBtop2CigarPrecise(TestCase):
         but the query does not, the CIGAR string must indicate an deletion in
         the reference.
         """
-        self.assertEqual('1D', btop2cigar('-A', concise=False))
+        self.assertEqual('1D', btop2cigar('-A', concise=True))
 
     def testAll(self):
         """
@@ -246,4 +257,12 @@ class TestBtop2CigarPrecise(TestCase):
         string must be correct.
         """
         self.assertEqual('2=1X3=1X2I4=2D5=',
-                         btop2cigar('2GC3ATC-G-4-T-A5', concise=False))
+                         btop2cigar('2GC3ATC-G-4-T-A5', concise=True))
+
+    def testWithAATrue(self):
+        """
+        If concise and aa are both set to True, a ValueError must be raised.
+        """
+        error = '^aa and concise cannot both be True$'
+        assertRaisesRegex(self, ValueError, error, btop2cigar, '',
+                          concise=True, aa=True)
