diff --git a/tests/test_callable.py b/tests/test_callable.py
--- a/tests/test_callable.py
+++ b/tests/test_callable.py
@@ -1,11 +1,18 @@
+import sys
 from typing import Callable
 
 import pytest
 
 from pydantic import BaseModel, ValidationError
 
+collection_callable_types = [Callable, Callable[[int], int]]
+if sys.version_info >= (3, 9):
+    from collections.abc import Callable as CollectionsCallable
 
-@pytest.mark.parametrize('annotation', [Callable, Callable[[int], int]])
+    collection_callable_types += [CollectionsCallable, CollectionsCallable[[int], int]]
+
+
+@pytest.mark.parametrize('annotation', collection_callable_types)
 def test_callable(annotation):
     class Model(BaseModel):
         callback: annotation
@@ -14,7 +21,7 @@ class Model(BaseModel):
     assert callable(m.callback)
 
 
-@pytest.mark.parametrize('annotation', [Callable, Callable[[int], int]])
+@pytest.mark.parametrize('annotation', collection_callable_types)
 def test_non_callable(annotation):
     class Model(BaseModel):
         callback: annotation
diff --git a/tests/test_typing.py b/tests/test_typing.py
--- a/tests/test_typing.py
+++ b/tests/test_typing.py
@@ -1,9 +1,9 @@
 from collections import namedtuple
-from typing import NamedTuple
+from typing import Callable as TypingCallable, NamedTuple
 
 import pytest
 
-from pydantic.typing import is_namedtuple, is_typeddict
+from pydantic.typing import Literal, is_namedtuple, is_none_type, is_typeddict
 
 try:
     from typing import TypedDict as typing_TypedDict
@@ -54,3 +54,15 @@ class Other(dict):
         id: int
 
     assert is_typeddict(Other) is False
+
+
+def test_is_none_type():
+    assert is_none_type(Literal[None]) is True
+    assert is_none_type(None) is True
+    assert is_none_type(type(None)) is True
+    assert is_none_type(6) is False
+    assert is_none_type({}) is False
+    # WARNING: It's important to test `typing.Callable` not
+    # `collections.abc.Callable` (even with python >= 3.9) as they behave
+    # differently
+    assert is_none_type(TypingCallable) is False
