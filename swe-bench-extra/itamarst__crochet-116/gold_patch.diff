diff --git a/.gitignore b/.gitignore
index 0aa7ffd..73363d6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,4 +15,5 @@ MANIFEST
 # Documentation
 docs/_build
 
-build/
\ No newline at end of file
+build/
+.tox
\ No newline at end of file
diff --git a/crochet/_eventloop.py b/crochet/_eventloop.py
index 93a21dc..00c99d1 100644
--- a/crochet/_eventloop.py
+++ b/crochet/_eventloop.py
@@ -5,7 +5,6 @@ Expose Twisted's event loop to threaded programs.
 from __future__ import absolute_import
 
 import select
-import sys
 import threading
 import weakref
 import warnings
@@ -463,15 +462,11 @@ class EventLoop(object):
         When the wrapped function is called, an EventualResult is returned.
         """
         result = self._run_in_reactor(function)
-        # Backwards compatibility; we could have used wrapt's version, but
-        # older Crochet code exposed different attribute name:
+        # Backwards compatibility; use __wrapped__ instead.
         try:
             result.wrapped_function = function
         except AttributeError:
-            if sys.version_info[0] == 3:
-                raise
-            # In Python 2 e.g. classmethod has some limitations where you can't
-            # set stuff on it.
+            pass
         return result
 
     def wait_for_reactor(self, function):
@@ -518,14 +513,12 @@ class EventLoop(object):
                     raise
 
             result = wrapper(function)
-            # Expose underling function for testing purposes:
+            # Expose underling function for testing purposes; this attribute is
+            # deprecated, use __wrapped__ instead:
             try:
                 result.wrapped_function = function
             except AttributeError:
-                if sys.version_info[0] == 3:
-                    raise
-                # In Python 2 e.g. classmethod has some limitations where you
-                # can't set stuff on it.
+                pass
             return result
 
         return decorator
diff --git a/docs/api.rst b/docs/api.rst
index 7e99681..15d6700 100644
--- a/docs/api.rst
+++ b/docs/api.rst
@@ -162,14 +162,14 @@ Unit testing
 ^^^^^^^^^^^^
 
 Both ``@wait_for`` and ``@run_in_reactor`` expose the underlying Twisted
-function via a ``wrapped_function`` attribute. This allows unit testing of the
+function via a ``__wrapped__`` attribute. This allows unit testing of the
 Twisted code without having to go through the Crochet layer.
 
 .. literalinclude:: ../examples/testing.py
 
 When run, this gives the following output::
 
-    add() returns EventualResult:
+    add(1, 2) returns EventualResult:
          <crochet._eventloop.EventualResult object at 0x2e8b390>
-    add.wrapped_function() returns result of underlying function:
+    add.__wrapped__(1, 2) returns result of underlying function:
          3
diff --git a/docs/news.rst b/docs/news.rst
index 23365a3..0b664bb 100644
--- a/docs/news.rst
+++ b/docs/news.rst
@@ -1,6 +1,23 @@
 What's New
 ==========
 
+1.9.0
+^^^^^
+
+New features:
+
+* The underlying callable wrapped ``@run_in_reactor`` and ``@wait_for`` is now available via the more standard ``__wrapped__`` attribute.
+
+Backwards incompatibility (in tests):
+
+* This was actually introduced in 1.8.0: ``wrapped_function`` may not always be available on decorated callables.
+  You should use ``__wrapped__`` instead.
+
+Bug fixes:
+
+* Fixed regression in 1.8.0 where bound method couldn't be wrapped.
+  Thanks to 2mf for the bug report.
+
 1.8.0
 ^^^^^
 
@@ -23,7 +40,7 @@ Bug fixes:
 
 Bug fixes:
 
-* If the Python `logging.Handler` throws an exception Crochet no longer goes into a death spiral.
+* If the Python ``logging.Handler`` throws an exception Crochet no longer goes into a death spiral.
   Thanks to Michael Schlenker for the bug report.
 
 Removed features:
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..5b1a12b
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,17 @@
+[tox]
+envlist = py27, py35, lint3
+usedevelop = true
+
+[testenv]
+commands =
+    {envpython} setup.py --version
+    pip install .
+    {envpython} -m unittest {posargs:discover -v crochet.tests}
+
+[testenv:lint3]
+deps = flake8
+       pylint
+       yapf
+basepython = python3.5
+commands = flake8 crochet
+           pylint crochet
\ No newline at end of file
