diff --git a/README.md b/README.md
index eeeb287..7517b50 100644
--- a/README.md
+++ b/README.md
@@ -11,6 +11,7 @@ Dump the software license list of Python packages installed with pip.
 * [Usage](#usage)
 * [Command\-Line Options](#command-line-options)
     * [Common options](#common-options)
+        * [Option: python](#option-python)
         * [Option: from](#option-from)
         * [Option: order](#option-order)
         * [Option: format](#option-format)
@@ -97,6 +98,21 @@ Execute the command with your venv (or virtualenv) environment.
 
 ### Common options
 
+#### Option: python
+
+By default, this tools finds the packages from the environment pip-licenses is launched from, by searching in current python's `sys.path` folders. In the case you want to search for packages in an other environment (e.g. if you want to run pip-licenses from its own isolated environment), you can specify a path to a python executable. The packages will be searched for in the given python's `sys.path`, free of pip-licenses dependencies.
+
+```bash
+(venv) $ pip-licenses --with-system | grep pip
+ pip                       22.3.1       MIT License
+ pip-licenses              4.1.0        MIT License
+```
+
+```bash
+(venv) $ pip-licenses --python=</path/to/other/env>/bin/python --with-system | grep pip
+ pip                       23.0.1       MIT License 
+```
+
 #### Option: from
 
 By default, this tool finds the license from [Trove Classifiers](https://pypi.org/classifiers/) or package Metadata. Some Python packages declare their license only in Trove Classifiers.
diff --git a/piplicenses.py b/piplicenses.py
index 3bac56e..488c338 100644
--- a/piplicenses.py
+++ b/piplicenses.py
@@ -30,7 +30,9 @@ from __future__ import annotations
 
 import argparse
 import codecs
+import os
 import re
+import subprocess
 import sys
 from collections import Counter
 from enum import Enum, auto
@@ -194,7 +196,21 @@ def get_packages(
 
         return pkg_info
 
-    pkgs = importlib_metadata.distributions()
+    def get_python_sys_path(executable: str) -> list[str]:
+        script = "import sys; print(' '.join(filter(bool, sys.path)))"
+        output = subprocess.run(
+            [executable, "-c", script],
+            capture_output=True,
+            env={**os.environ, "PYTHONPATH": "", "VIRTUAL_ENV": ""},
+        )
+        return output.stdout.decode().strip().split()
+
+    if args.python == sys.executable:
+        search_paths = sys.path
+    else:
+        search_paths = get_python_sys_path(args.python)
+
+    pkgs = importlib_metadata.distributions(path=search_paths)
     ignore_pkgs_as_lower = [pkg.lower() for pkg in args.ignore_packages]
     pkgs_as_lower = [pkg.lower() for pkg in args.packages]
 
@@ -785,6 +801,17 @@ def create_parser() -> CompatibleArgumentParser:
         "-v", "--version", action="version", version="%(prog)s " + __version__
     )
 
+    common_options.add_argument(
+        "--python",
+        type=str,
+        default=sys.executable,
+        metavar="PYTHON_EXEC",
+        help="R| path to python executable to search distributions from\n"
+        "Package will be searched in the selected python's sys.path\n"
+        "By default, will search packages for current env executable\n"
+        "(default: sys.executable)",
+    )
+
     common_options.add_argument(
         "--from",
         dest="from_",
