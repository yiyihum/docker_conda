diff --git a/tests/tests.py b/tests/tests.py
index 2837ed0..4ebc049 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -1225,6 +1225,101 @@ class TestsChessMasterBoard(unittest.TestCase):
 
         self.assertEqual(board.picture, expected)
 
+    def test_picture_threat_1(self):
+
+        board = chess.Board(8)
+        king = chess.King((1, 2))
+        board.place_piece(king)
+
+        expected =[
+            [None, 'T', 'T', 'T', None, None, None, None],
+            [None, 'T', 'king', 'T', None, None, None, None],
+            [None, 'T', 'T', 'T', None, None, None, None],
+            [None, None, None, None, None, None, None, None],
+            [None, None, None, None, None, None, None, None],
+            [None, None, None, None, None, None, None, None],
+            [None, None, None, None, None, None, None, None],
+            [None, None, None, None, None, None, None, None]
+        ]
+        self.assertEqual(board.picture_threat, expected)
+
+    def test_picture_threat_2(self):
+
+        board = chess.Board(4)
+        king = chess.King((0, 3))
+        board.place_piece(king)
+
+        expected = [
+            [None, None, 'T', 'king'],
+            [None, None, 'T', 'T'],
+            [None, None, None, None],
+            [None, None, None, None]
+        ]
+        self.assertEqual(board.picture_threat, expected)
+
+    def test_picture_threat_3(self):
+
+        board = chess.Board(8)
+        queen = chess.Queen((4, 3))
+        board.place_piece(queen)
+
+        expected = [
+            [None, None, None, 'T', None, None, None, 'T'],
+            ['T', None, None, 'T', None, None, 'T', None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            ['T', 'T', 'T', 'queen', 'T', 'T', 'T', 'T'],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            ['T', None, None, 'T', None, None, 'T', None]
+        ]
+
+        self.assertEqual(board.picture_threat, expected)
+
+    def test_picture_threat_4_with_2_pieces(self):
+
+        board = chess.Board(8)
+        queen = chess.Queen((4, 3))
+        king = chess.King((1, 1))
+        board.place_piece(queen)
+        board.place_piece(king)
+
+        expected = [
+            ['T', 'T', 'T', 'T', None, None, None, 'T'],
+            ['T', 'king', 'T', 'T', None, None, 'T', None],
+            ['T', 'T', 'T', 'T', None, 'T', None, None],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            ['T', 'T', 'T', 'queen', 'T', 'T', 'T', 'T'],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            ['T', None, None, 'T', None, None, 'T', None]
+        ]
+
+        self.assertEqual(board.picture_threat, expected)
+
+    def test_picture_threat_4_with_3_pieces(self):
+
+        board = chess.Board(8)
+        queen = chess.Queen((4, 3))
+        king = chess.King((1, 1))
+        kinight = chess.Kinight((7, 7))
+        board.place_piece(queen)
+        board.place_piece(king)
+        board.place_piece(kinight)
+
+        expected = [
+            ['T', 'T', 'T', 'T', None, None, None, 'T'],
+            ['T', 'king', 'T', 'T', None, None, 'T', None],
+            ['T', 'T', 'T', 'T', None, 'T', None, None],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            ['T', 'T', 'T', 'queen', 'T', 'T', 'T', 'T'],
+            [None, None, 'T', 'T', 'T', None, 'T', None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            ['T', None, None, 'T', None, None, 'T', 'kinight']
+        ]
+
+        self.assertEqual(board.picture_threat, expected)
+
     def test_put_piece_in_occupied_square(self):
         pawn1 = chess.Pawn((1, 2))
         pawn2 = chess.Pawn((1, 2))
@@ -1236,6 +1331,56 @@ class TestsChessMasterBoard(unittest.TestCase):
         with self.assertRaises(chess.OccupiedSquare):
             board.place_piece(pawn2)
 
+    def test_put_piece_in_threatened_square(self):
+        """
+        Test ThretenedException while trying to put a rook in an place
+        threatened by a queen.
+        [
+            [None, None, None, 'T', None, None, None, 'T'],
+            ['T (trying to put rook here)', None, None, 'T', None, None, 'T', None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            ['T', 'T', 'T', 'queen', 'T', 'T', 'T', 'T'],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            ['T', None, None, 'T', None, None, 'T', None]
+        ]
+
+        """
+
+        board = chess.Board(8)
+        queen = chess.Queen((4, 3))
+        board.place_piece(queen)
+
+        with self.assertRaises(chess.Threatened):
+            rook = chess.Rook((1, 0))
+            board.place_piece(rook)
+
+    def test_put_piece_in_threatening_square(self):
+        """
+        Test ThreteningException while trying to put a kinight in an place that
+        will threatening queen.
+        [
+            [None, None, None, 'T', None, None, None, 'T'],
+            ['T', None, None, 'T', None, None, 'T', None],
+            [None, 'T', None (trying to put kinight here), 'T', None, 'T', None, None],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            ['T', 'T', 'T', 'queen', 'T', 'T', 'T', 'T'],
+            [None, None, 'T', 'T', 'T', None, None, None],
+            [None, 'T', None, 'T', None, 'T', None, None],
+            ['T', None, None, 'T', None, None, 'T', None]
+        ]
+
+        """
+
+        board = chess.Board(8)
+        queen = chess.Queen((4, 3))
+        board.place_piece(queen)
+
+        with self.assertRaises(chess.Threatening):
+            kinight = chess.Kinight((2, 2))
+            board.place_piece(kinight)
+
     def test_instanciating_board_wrong_size(self):
 
         with self.assertRaises(ValueError):
