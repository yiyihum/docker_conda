diff --git a/masterchess/chess.py b/masterchess/chess.py
index 146c8d9..6711231 100644
--- a/masterchess/chess.py
+++ b/masterchess/chess.py
@@ -10,12 +10,23 @@ class OccupiedSquare(BoardExceptions):
     def __init__(self, value):
         self.value = value
 
+class Threatening(BoardExceptions):
+
+    def __init__(self, value):
+        self.value = value
+
+class Threatened(BoardExceptions):
+
+    def __init__(self, value):
+        self.value = value
+
 
 class Board(object):
 
     def __init__(self, size):
         self.board = None
         self.pieces = []
+        self._size = size
         self._setup_board(size)
 
     def _setup_board(self, size):
@@ -27,10 +38,11 @@ class Board(object):
         size -- integer
         """
 
-        if not isinstance(size, int):
+        if not isinstance(self._size, int):
             raise ValueError('board size must be integer')
 
-        self.board = [[None for i in range(size)] for i in range(size)]
+        rg = range(self._size)
+        self.board = [[None for i in rg] for i in rg]
 
     def _update_board(self):
         """
@@ -50,25 +62,58 @@ class Board(object):
         """
         return [[(str(x) if x else x) for x in i] for i in self.board]
 
+    @property
+    def picture_threat(self):
+        """
+        Return a 2 dimension list with a picture of the current state of the
+        board and pieces position.
+
+        It will display T on places where pieces will be threatened and the 
+        piece name where the pieces are allocated.
+        """
+
+        board = self.picture
+
+        for piece in self.pieces:
+            for threat in piece.threatening_zone(self._size):
+                x, y = threat
+                board[x][y] = 'T' if board[x][y] is None else board[x][y]
+
+        return board
+
     def place_piece(self, piece):
         """
         Put a given piece on the board.
 
-        The piece must not threatening any other piece already available in
-        the board. If so, it will raise Threatened Exception.
-
-        The piece position must not match with the position of any other piece
+        (Rule 1) The piece position must not match with the position of any other piece
         already available in the board. If so, it will raise OccupiedSquare
         Exception.
 
+        (Rule 2) The piece position must not be threatened by other pieces already safe
+        disposed in the board. If so, it will raise Threatened Exception.
+        Exception.
+
+        (Rule 3) The piece must not threatening any other piece already available in
+        the board. If so, it will raise Threatening Exception.
+
         Arguments:
         piece -- a instance o Pieces (Pawn, King, Bishop, Queen, Rook, Kinight)
         """
         x, y = piece.position
 
+        # Rule (1)
         if self.picture[x][y] is not None:
             raise OccupiedSquare(str(piece.position))
 
+        # Rule (2)
+        if self.picture_threat[x][y] is not None and self.picture_threat[x][y] == 'T':
+            raise Threatened(str(piece.position))
+
+        # Rule (3)
+        pieces_on_board = [i.position for i in self.pieces]
+        if len(set(piece.threatening_zone(self._size)).intersection(pieces_on_board)) >= 1:
+            raise Threatening(str(piece.position))
+
         self.pieces.append(piece)
         self._update_board()
 
@@ -406,4 +451,3 @@ class Rook(Pieces):
         zone += self._w_positions(max_size)
 
         return zone
-
