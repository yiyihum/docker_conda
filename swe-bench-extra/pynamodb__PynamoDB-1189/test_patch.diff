diff --git a/tests/integration/model_integration_test.py b/tests/integration/model_integration_test.py
index 340ca72..9a54ccc 100644
--- a/tests/integration/model_integration_test.py
+++ b/tests/integration/model_integration_test.py
@@ -102,6 +102,10 @@ def test_model_integration(ddb_url):
     for item in TestModel.view_index.query('foo', TestModel.view > 0):
         print("Item queried from index: {}".format(item.view))
 
+    query_obj.update([TestModel.scores.set([])])
+    query_obj.refresh()
+    assert query_obj.scores is None
+
     print(query_obj.update([TestModel.view.add(1)], condition=TestModel.forum.exists()))
     TestModel.delete_table()
 
diff --git a/tests/test_expressions.py b/tests/test_expressions.py
index 4d314bb..698366f 100644
--- a/tests/test_expressions.py
+++ b/tests/test_expressions.py
@@ -479,6 +479,13 @@ class UpdateExpressionTestCase(TestCase):
         assert self.placeholder_names == {'foo': '#0'}
         assert self.expression_attribute_values == {':0': {'S': 'bar'}}
 
+    def test_set_action_as_remove(self):
+        action = self.set_attribute.set([])
+        expression = action.serialize(self.placeholder_names, self.expression_attribute_values)
+        assert expression == "#0"
+        assert self.placeholder_names == {'foo_set': '#0'}
+        assert self.expression_attribute_values == {}
+
     def test_set_action_attribute_container(self):
         # Simulate initialization from inside an AttributeContainer
         my_map_attribute = MapAttribute[str, str](attr_name='foo')
@@ -620,6 +627,15 @@ class UpdateExpressionTestCase(TestCase):
             ':2': {'NS': ['1']}
         }
 
+    def test_update_set_to_empty(self):
+        update = Update(
+            self.set_attribute.set([]),
+        )
+        expression = update.serialize(self.placeholder_names, self.expression_attribute_values)
+        assert expression == "REMOVE #0"
+        assert self.placeholder_names == {'foo_set': '#0'}
+        assert self.expression_attribute_values == {}
+
     def test_update_skips_empty_clauses(self):
         update = Update(self.attribute.remove())
         expression = update.serialize(self.placeholder_names, self.expression_attribute_values)
