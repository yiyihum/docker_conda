diff --git a/docs/src/tutorial/query/code010.py b/docs/src/tutorial/query/code010.py
index b60e90d..7150396 100644
--- a/docs/src/tutorial/query/code010.py
+++ b/docs/src/tutorial/query/code010.py
@@ -1,11 +1,16 @@
 import datetime
-from ninja import Schema, Query
+from typing import List
+
+from pydantic import Field
+
+from ninja import Query, Schema
 
 
 class Filters(Schema):
     limit: int = 100
     offset: int = None
     query: str = None
+    category__in: List[str] = Field(None, alias="categories")
 
 
 @api.get("/filter")
diff --git a/ninja/signature/details.py b/ninja/signature/details.py
index cca9b2a..488aa30 100644
--- a/ninja/signature/details.py
+++ b/ninja/signature/details.py
@@ -1,9 +1,20 @@
 import inspect
 from collections import defaultdict, namedtuple
-from typing import Any, Callable, Dict, List
+from typing import TYPE_CHECKING, Any, Callable, Dict, List, Optional
+
+try:
+    from typing import get_origin  # type: ignore
+except ImportError:  # pragma: no coverage
+
+    def get_origin(tp: Any) -> Optional[Any]:
+        return getattr(tp, "__origin__", None)
+
 
 import pydantic
 
+if TYPE_CHECKING:
+    from pydantic.fields import ModelField  # pragma: no cover
+
 from ninja import params
 from ninja.signature.utils import get_path_param_names, get_typed_signature
 
@@ -117,10 +128,19 @@ def is_pydantic_model(cls: Any) -> bool:
 
 def is_collection_type(annotation: Any) -> bool:
     # List[int]  =>  __origin__ = list, __args__ = int
-    origin = getattr(annotation, "__origin__", None)
+    origin = get_origin(annotation)
     return origin in (List, list, set, tuple)  # TODO: I gues we should handle only list
 
 
+def detect_pydantic_model_collection_fields(model: pydantic.BaseModel) -> List[str]:
+    def _list_field_name(field: "ModelField") -> Optional[str]:
+        if get_origin(field.outer_type_) in (List, list, tuple, set):
+            return str(field.alias)
+        return None
+
+    return list(filter(None, map(_list_field_name, model.__fields__.values())))
+
+
 def detect_collection_fields(args: List[FuncParam]) -> List[str]:
     """
     QueryDict has values that are always lists, so we need to help django ninja to understand
@@ -130,11 +150,6 @@ def detect_collection_fields(args: List[FuncParam]) -> List[str]:
     result = [i.name for i in args if i.is_collection]
 
     if len(args) == 1 and is_pydantic_model(args[0].annotation):
-        # There is a special case - when query param of form param is only one and it's defined as pydantic model
-        # In that case we need to detect collection
-        # see #34 for more details about the issue
-        for name, annotation in args[0].annotation.__annotations__.items():
-            if is_collection_type(annotation):
-                result.append(name)
+        result += detect_pydantic_model_collection_fields(args[0].annotation)
 
     return result

