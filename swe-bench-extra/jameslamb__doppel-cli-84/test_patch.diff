diff --git a/doppel/DoppelTestError.py b/doppel/DoppelTestError.py
new file mode 100644
index 0000000..6315acf
--- /dev/null
+++ b/doppel/DoppelTestError.py
@@ -0,0 +1,13 @@
+
+class DoppelTestError:
+
+    def __init__(self, msg: str):
+        """
+        Custom error class used for testing issues.
+
+        :param msg: Error text to print
+        """
+        self.msg = msg
+
+    def __str__(self):
+        return("{}\n".format(self.msg))
diff --git a/tests/test_package_api.py b/tests/test_package_api.py
index 117fccb..286adc1 100644
--- a/tests/test_package_api.py
+++ b/tests/test_package_api.py
@@ -1,12 +1,89 @@
 import unittest
-from doppel.cli import _log_info
+import os
+from doppel import PackageAPI
 
+TESTDATA_DIR = os.path.join('tests', 'testdata')
 
-class TestStuff(unittest.TestCase):
 
-    def test_logging(self):
+class TestPackageAPI(unittest.TestCase):
+    """
+    PackageAPI tests on simple package with
+    one class and one or two functions
+    """
+
+    py_pkg_file = os.path.join(
+        TESTDATA_DIR,
+        'python_package1.json'
+    )
+    r_pkg_file = os.path.join(
+        TESTDATA_DIR,
+        'r_package1.json'
+    )
+
+    def test_from_json_py(self):
         """
-        _log_info should work
+        PackageAPI.from_json() should work for Python packages
         """
-        _log_info('stuff')
-        self.assertTrue(True)
+        pkg = PackageAPI.from_json(self.py_pkg_file)
+
+        self.assertEqual(pkg.name(), 'boombap [python]')
+        self.assertEqual(pkg.num_functions(), 1)
+        self.assertEqual(pkg.function_names(), ['playback'])
+        self.assertEqual(
+            pkg.functions_with_args(),
+            {
+                'playback': {
+                    'args': [
+                        'bpm',
+                        'bass'
+                    ]
+                }
+            }
+        )
+        self.assertEqual(pkg.num_classes(), 1)
+        self.assertEqual(pkg.class_names(), ["LupeFiasco"])
+        self.assertEqual(pkg.public_methods("LupeFiasco"), ["coast", "~~CONSTRUCTOR~~"])
+        self.assertEqual(
+            pkg.public_method_args("LupeFiasco", "~~CONSTRUCTOR~~"),
+            ["kick", "push"]
+        )
+        self.assertEqual(
+            pkg.public_method_args("LupeFiasco", "coast"),
+            []
+        )
+
+    def test_from_json_r(self):
+        """
+        PackageAPI.from_json() should work for R packages
+        """
+        pkg = PackageAPI.from_json(self.r_pkg_file)
+
+        self.assertEqual(pkg.name(), 'boombap [r]')
+        self.assertEqual(pkg.num_functions(), 1)
+        self.assertEqual(pkg.function_names(), ['playback'])
+        self.assertEqual(
+            pkg.functions_with_args(),
+            {
+                'playback': {
+                    'args': [
+                        'bpm',
+                        'bass'
+                    ]
+                }
+            }
+        )
+        self.assertEqual(pkg.num_classes(), 1)
+        self.assertEqual(pkg.class_names(), ["LupeFiasco"])
+        self.assertEqual(pkg.public_methods("LupeFiasco"), ["coast", "words", "~~CONSTRUCTOR~~"])
+        self.assertEqual(
+            pkg.public_method_args("LupeFiasco", "~~CONSTRUCTOR~~"),
+            ["kick", "push"]
+        )
+        self.assertEqual(
+            pkg.public_method_args("LupeFiasco", "coast"),
+            []
+        )
+        self.assertEqual(
+            pkg.public_method_args("LupeFiasco", "words"),
+            ["i_said", "i_never_said"]
+        )
diff --git a/tests/test_package_collection.py b/tests/test_package_collection.py
new file mode 100644
index 0000000..5a9b668
--- /dev/null
+++ b/tests/test_package_collection.py
@@ -0,0 +1,99 @@
+import unittest
+import os
+from doppel import PackageCollection
+from doppel import PackageAPI
+
+TESTDATA_DIR = os.path.join('tests', 'testdata')
+
+
+class TestPackageAPI(unittest.TestCase):
+
+    py_pkg_file = os.path.join(
+        TESTDATA_DIR,
+        'python_package1.json'
+    )
+    r_pkg_file = os.path.join(
+        TESTDATA_DIR,
+        'r_package1.json'
+    )
+
+    def setUp(self):
+        self.pkg_collection = PackageCollection(
+            packages=[
+                PackageAPI.from_json(self.py_pkg_file),
+                PackageAPI.from_json(self.r_pkg_file)
+            ]
+        )
+
+    def test_all_classes(self):
+        """
+        PackageCollection.all_classes() should work as expected
+        for packages with identical classes
+        """
+        self.assertEqual(
+            self.pkg_collection.all_classes(),
+            ["LupeFiasco"]
+        )
+
+    def test_shared_classes(self):
+        """
+        PackageCollection.shared_classes() should work as expected
+        for packages with identical classes
+        """
+        self.assertEqual(
+            self.pkg_collection.shared_classes(),
+            ["LupeFiasco"]
+        )
+
+    def test_non_shared_classes(self):
+        """
+        PackageCollection.non_shared_classes() should work as expected
+        for packages with identical classes.
+        """
+        self.assertEqual(
+            self.pkg_collection.non_shared_classes(),
+            []
+        )
+
+    def test_all_functions(self):
+        """
+        PackageCollection.all_functions() should work as expected
+        for packages with some overlapping functions
+        """
+        self.assertEqual(
+            self.pkg_collection.all_functions(),
+            ["playback"]
+        )
+
+    def test_shared_functions(self):
+        """
+        PackageCollection.shared_functions() should work as expected
+        for packages with some overlapping functions
+        """
+        self.assertEqual(
+            self.pkg_collection.shared_functions(),
+            ["playback"]
+        )
+
+    def test_non_shared_functions(self):
+        """
+        PackageCollection.non_shared_functions() should work as expected
+        for packages with some overlapping functions
+        """
+        self.assertEqual(
+            self.pkg_collection.non_shared_functions(),
+            []
+        )
+
+    def test_shared_methods_by_class(self):
+        """
+        PackageCollection.shared_methods_by_class() should work
+        as expected for packages with slightly different
+        class methods
+        """
+        shared = self.pkg_collection.shared_methods_by_class()
+        self.assertEqual(list(shared.keys()), ["LupeFiasco"])
+        self.assertEqual(
+            sorted(shared["LupeFiasco"]),
+            sorted(["~~CONSTRUCTOR~~", "coast"])
+        )
diff --git a/tests/testdata/python_package1.json b/tests/testdata/python_package1.json
new file mode 100644
index 0000000..9a2e06c
--- /dev/null
+++ b/tests/testdata/python_package1.json
@@ -0,0 +1,27 @@
+{
+  "name": "boombap [python]",
+  "language": "python",
+  "functions": {
+    "playback": {
+      "args": [
+        "bpm",
+        "bass"
+      ]
+    }
+  },
+  "classes": {
+    "LupeFiasco": {
+      "public_methods": {
+        "~~CONSTRUCTOR~~": {
+          "args": [
+            "kick",
+            "push"
+          ]
+        },
+        "coast": {
+          "args": []
+        }
+      }
+    }
+  }
+}
diff --git a/tests/testdata/r_package1.json b/tests/testdata/r_package1.json
new file mode 100644
index 0000000..957a945
--- /dev/null
+++ b/tests/testdata/r_package1.json
@@ -0,0 +1,33 @@
+{
+  "name": "boombap [r]",
+  "language": "r",
+  "functions": {
+    "playback": {
+      "args": [
+        "bpm",
+        "bass"
+      ]
+    }
+  },
+  "classes": {
+    "LupeFiasco": {
+      "public_methods": {
+        "~~CONSTRUCTOR~~": {
+          "args": [
+            "kick",
+            "push"
+          ]
+        },
+        "coast": {
+          "args": []
+        },
+        "words": {
+          "args": [
+            "i_said",
+            "i_never_said"
+          ]
+        }
+      }
+    }
+  }
+}
