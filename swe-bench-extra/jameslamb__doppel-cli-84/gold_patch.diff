diff --git a/.codecov.yml b/.codecov.yml
index c1ba1ca..32d58f1 100644
--- a/.codecov.yml
+++ b/.codecov.yml
@@ -3,7 +3,7 @@ coverage:
   status:
     project:
       default:
-        target: '20'
+        target: '40'
     patch:
       default:
         target: '20'
diff --git a/demo.sh b/demo.sh
index bf0bf4a..269b6bc 100755
--- a/demo.sh
+++ b/demo.sh
@@ -3,6 +3,8 @@
 # failure is a natural part of life
 set -e
 
+mkdir -p $(pwd)/test_data
+
 for pkg in uptasticsearch; do
 
     # The R package
diff --git a/doppel/PackageAPI.py b/doppel/PackageAPI.py
new file mode 100644
index 0000000..f77965b
--- /dev/null
+++ b/doppel/PackageAPI.py
@@ -0,0 +1,81 @@
+import json
+
+
+def _log_info(msg):
+    print(msg)
+
+
+class PackageAPI():
+    """Package API class
+
+    This class is used to hold the interface of a given package
+    being analyzed by doppel. It's comparison operators enable comparison
+    between interfaces and its standard JSON format allows this comparison
+    to happen across programming languages.
+
+    """
+
+    def __init__(self, pkg_dict: dict):
+        """Python object containing data that describes a package API
+
+        :param pkg_dict: A dictionary representation of a
+            software package, complying with the output format of
+            doppel-describe.
+
+        """
+
+        self._validate_pkg(pkg_dict)
+        self.pkg_dict = pkg_dict
+
+    @classmethod
+    def from_json(cls, filename: str):
+        """
+        Instantiate a Package object from a file.
+
+        :param filename: Name of the JSON file
+            that contains the description of the
+            target package's API.
+
+        """
+        _log_info("Creating package from {}".format(filename))
+
+        # read in output of "analyze.*" script
+        with open(filename, 'r') as f:
+            pkg_dict = json.loads(f.read())
+
+        # validate
+        return cls(pkg_dict)
+
+    def _validate_pkg(self, pkg_dict: dict):
+
+        assert isinstance(pkg_dict, dict)
+        assert pkg_dict['name'] is not None
+        assert pkg_dict['language'] is not None
+        assert pkg_dict['functions'] is not None
+        assert pkg_dict['classes'] is not None
+
+        return
+
+    def name(self):
+        return(self.pkg_dict['name'])
+
+    def num_functions(self):
+        return(len(self.function_names()))
+
+    def function_names(self):
+        return(sorted(list(self.pkg_dict['functions'].keys())))
+
+    def functions_with_args(self):
+        return(self.pkg_dict['functions'])
+
+    def num_classes(self):
+        return(len(self.class_names()))
+
+    def class_names(self):
+        return(sorted(list(self.pkg_dict['classes'].keys())))
+
+    def public_methods(self, class_name):
+        return(sorted(list(self.pkg_dict['classes'][class_name]['public_methods'].keys())))
+
+    def public_method_args(self, class_name, method_name):
+        return(list(self.pkg_dict['classes'][class_name]['public_methods'][method_name]['args']))
diff --git a/doppel/PackageCollection.py b/doppel/PackageCollection.py
index 04a8c93..7ff809e 100644
--- a/doppel/PackageCollection.py
+++ b/doppel/PackageCollection.py
@@ -1,4 +1,4 @@
-from doppel import PackageAPI
+from doppel.PackageAPI import PackageAPI
 from typing import Dict
 from typing import List
 
diff --git a/doppel/__init__.py b/doppel/__init__.py
index ed925f9..ac19ff3 100644
--- a/doppel/__init__.py
+++ b/doppel/__init__.py
@@ -3,5 +3,7 @@ __all__ = [
     'PackageCollection'
 ]
 
-from doppel.cli import PackageAPI
+from doppel.PackageAPI import PackageAPI
 from doppel.PackageCollection import PackageCollection
+from doppel.DoppelTestError import DoppelTestError
+from doppel.reporters import SimpleReporter
diff --git a/doppel/cli.py b/doppel/cli.py
index 187fa25..6fde637 100644
--- a/doppel/cli.py
+++ b/doppel/cli.py
@@ -2,86 +2,7 @@
 import click
 import json
 from doppel.reporters import SimpleReporter
-
-
-def _log_info(msg):
-    print(msg)
-
-
-class PackageAPI():
-    """Package API class
-
-    This class is used to hold the interface of a given package
-    being analyzed by doppel. It's comparison operators enable comparison
-    between interfaces and its standard JSON format allows this comparison
-    to happen across programming languages.
-
-    """
-
-    def __init__(self, pkg_dict: dict):
-        """Python object containing data that describes a package API
-
-        :param pkg_dict: A dictionary representation of a
-            software package, complying with the output format of
-            doppel-describe.
-
-        """
-
-        self._validate_pkg(pkg_dict)
-        self.pkg_dict = pkg_dict
-
-    @classmethod
-    def from_json(cls, filename: str):
-        """
-        Instantiate a Package object from a file.
-
-        :param filename: Name of the JSON file
-            that contains the description of the
-            target package's API.
-
-        """
-        _log_info("Creating package from {}".format(filename))
-
-        # read in output of "analyze.*" script
-        with open(filename, 'r') as f:
-            pkg_dict = json.loads(f.read())
-
-        # validate
-        return cls(pkg_dict)
-
-    def _validate_pkg(self, pkg_dict: dict):
-
-        assert isinstance(pkg_dict, dict)
-        assert pkg_dict['name'] is not None
-        assert pkg_dict['language'] is not None
-        assert pkg_dict['functions'] is not None
-        assert pkg_dict['classes'] is not None
-
-        return
-
-    def name(self):
-        return(self.pkg_dict['name'])
-
-    def num_functions(self):
-        return(len(self.function_names()))
-
-    def function_names(self):
-        return(list(self.pkg_dict['functions'].keys()))
-
-    def functions_with_args(self):
-        return(self.pkg_dict['functions'])
-
-    def num_classes(self):
-        return(len(self.class_names()))
-
-    def class_names(self):
-        return(list(self.pkg_dict['classes'].keys()))
-
-    def public_methods(self, class_name):
-        return(list(self.pkg_dict['classes'][class_name]['public_methods'].keys()))
-
-    def public_method_args(self, class_name, method_name):
-        return(list(self.pkg_dict['classes'][class_name]['public_methods'][method_name]['args']))
+from doppel.PackageAPI import PackageAPI
 
 
 @click.command()
diff --git a/doppel/reporters.py b/doppel/reporters.py
index d852e7e..a26838b 100644
--- a/doppel/reporters.py
+++ b/doppel/reporters.py
@@ -4,23 +4,10 @@ from sys import stdout
 from tabulate import tabulate
 from functools import reduce
 from typing import List
+from doppel.DoppelTestError import DoppelTestError
 
 
-class DoppelTestError:
-
-    def __init__(self, msg: str):
-        """
-        Custom error class used for testing issues.
-
-        :param msg: Error text to print
-        """
-        self.msg = msg
-
-    def __str__(self):
-        return("{}\n".format(self.msg))
-
-
-class OutputTable:
+class _OutputTable:
     """
     Many checks will write tabular output. Wrapping
     this in a class so the choice of format from
@@ -128,7 +115,7 @@ class SimpleReporter:
             counts.append(pkg.num_functions())
 
         # Report output
-        out = OutputTable(headers=pkg_names, rows=[counts])
+        out = _OutputTable(headers=pkg_names, rows=[counts])
         out.write()
 
         # Append errors
@@ -177,7 +164,7 @@ class SimpleReporter:
             rows += [row]
 
         # Report output
-        out = OutputTable(headers=headers, rows=rows)
+        out = _OutputTable(headers=headers, rows=rows)
         out.write()
 
         # Append errors
@@ -252,7 +239,7 @@ class SimpleReporter:
             len(all_functions)
         ))
 
-        out = OutputTable(headers=headers, rows=rows)
+        out = _OutputTable(headers=headers, rows=rows)
         out.write()
 
         # Print output
@@ -274,7 +261,7 @@ class SimpleReporter:
             counts.append(pkg.num_classes())
 
         # Report output
-        out = OutputTable(headers=names, rows=[counts])
+        out = _OutputTable(headers=names, rows=[counts])
         out.write()
 
         # Append errors
@@ -323,7 +310,7 @@ class SimpleReporter:
             rows += [row]
 
         # Report output
-        out = OutputTable(headers=headers, rows=rows)
+        out = _OutputTable(headers=headers, rows=rows)
         out.write()
 
         # Append errors
