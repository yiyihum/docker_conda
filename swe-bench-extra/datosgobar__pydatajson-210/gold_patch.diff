diff --git a/docs/MANUAL.md b/docs/MANUAL.md
index 207d9fe..e03b74f 100644
--- a/docs/MANUAL.md
+++ b/docs/MANUAL.md
@@ -428,6 +428,15 @@ Toma los siguientes parámetros:
   portal de destino. Si no se pasa, se toma como organización el catalog_id
 
   Retorna el id en el nodo de destino de los datasets federados.
+  
+### Métodos para manejo de organizaciones
+
+- **pydatajson.federation.get_organizations_from_ckan()**: Devuelve el árbol de organizaciones del portal pasado por parámetro.
+Toma los siguientes parámetros:
+  - **portal_url**: URL del portal de CKAN. Debe implementar el endpoint `/group_tree`.
+  
+  Retorna una lista de diccionarios con la información de las organizaciones. Recursivamente, dentro del campo `children`,
+  se encuentran las organizaciones dependientes en la jerarquía. 
 
 ## Anexo I: Estructura de respuestas
 
diff --git a/pydatajson/federation.py b/pydatajson/federation.py
index 6e57ec1..1138121 100644
--- a/pydatajson/federation.py
+++ b/pydatajson/federation.py
@@ -300,3 +300,17 @@ def push_new_themes(catalog, portal_url, apikey):
             catalog, portal_url, apikey, identifier=new_theme)
         pushed_names.append(name)
     return pushed_names
+
+
+def get_organizations_from_ckan(portal_url):
+    """Toma la url de un portal y devuelve su árbol de organizaciones.
+
+            Args:
+                portal_url (str): La URL del portal CKAN de origen.
+            Returns:
+                dict: Diccionarios anidados con la información de
+                las organizaciones.
+        """
+    ckan_portal = RemoteCKAN(portal_url)
+    return ckan_portal.call_action('group_tree',
+                                   data_dict={'type': 'organization'})
