diff --git a/dandi/download.py b/dandi/download.py
index b06e5080..1a09713a 100644
--- a/dandi/download.py
+++ b/dandi/download.py
@@ -5,7 +5,7 @@ import urllib.parse as up
 from . import girder, get_logger
 from .consts import dandiset_metadata_file
 from .dandiset import Dandiset
-from .utils import flattened
+from .utils import flatten, flattened
 
 lgr = get_logger()
 
@@ -150,7 +150,7 @@ def download(
 
     # there might be multiple asset_ids, e.g. if multiple files were selected etc,
     # so we will traverse all of them
-    files = flattened(
+    files = flatten(
         _get_asset_files(
             asset_id_, asset_type, output_dir, client, authenticate, existing, recursive
         )
diff --git a/dandi/utils.py b/dandi/utils.py
index 89bbd628..c29c8e06 100644
--- a/dandi/utils.py
+++ b/dandi/utils.py
@@ -1,4 +1,5 @@
 import datetime
+import inspect
 import itertools
 import os
 import os.path as op
@@ -178,15 +179,18 @@ def ensure_datetime(t, strip_tzinfo=False, tz=None):
 #
 # Generic
 #
-def flattened(it):
-    """Return a list with all items flattened if list or tuple"""
-    items = []
+def flatten(it):
+    """Yield items flattened if list, tuple or a generator"""
     for i in it:
-        if isinstance(i, (list, tuple)):
-            items.extend(flattened(i))
+        if isinstance(i, (list, tuple)) or inspect.isgenerator(i):
+            yield from flattened(i)
         else:
-            items.append(i)
-    return items
+            yield i
+
+
+def flattened(it):
+    """Return list with items flattened if list, tuple or a generator"""
+    return list(flatten(it))
 
 
 def updated(d, update):
@@ -345,10 +349,8 @@ def yaml_dump(rec):
     5.1: https://github.com/yaml/pyyaml/pull/256
     """
     import yaml
-    return yaml.safe_dump(
-        rec,
-        default_flow_style=False
-    )
+
+    return yaml.safe_dump(rec, default_flow_style=False)
 
 
 #
