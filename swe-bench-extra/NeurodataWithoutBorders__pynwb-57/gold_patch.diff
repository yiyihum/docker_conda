diff --git a/src/form/data_utils.py b/src/form/data_utils.py
index 7e0f16f8..6b249dbc 100644
--- a/src/form/data_utils.py
+++ b/src/form/data_utils.py
@@ -98,7 +98,7 @@ class DataChunkIterator(AbstractDataChunkIterator):
             # Try to get an accurate idea of max_shape for other Python datastructures if possible.
             # Don't just callget_shape for a generator as that would potentially trigger loading of all the data
             elif isinstance(self.data, list) or isinstance(self.data, tuple):
-                self.max_shape = ShapeValidator.get_data_shape(self.data)
+                self.max_shape = ShapeValidator.get_data_shape(self.data, strict_no_data_load=True)
 
         # If we have a data iterator, then read the first chunk
         if self.__data_iter is not None: # and(self.max_shape is None or self.dtype is None):
@@ -108,13 +108,16 @@ class DataChunkIterator(AbstractDataChunkIterator):
         if self.max_shape is None and self.__next_chunk.data is not None:
             data_shape = ShapeValidator.get_data_shape(self.__next_chunk.data)
             self.max_shape = list(data_shape)
-            self.max_shape[0] = None
+            try:
+                self.max_shape[0] = len(self.data)  # We use self.data here because self.__data_iter does not allow len
+            except TypeError:
+                self.max_shape[0] = None
             self.max_shape = tuple(self.max_shape)
 
         # Determine the type of the data if possible
         if self.__next_chunk.data is not None:
             self.dtype = self.__next_chunk.data.dtype
-            self.__first_chunk_shape = self.__next_chunk.data.shape
+            self.__first_chunk_shape = ShapeValidator.get_data_shape(self.__next_chunk.data)
 
     def __iter__(self):
         """Return the iterator object"""
