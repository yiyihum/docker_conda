diff --git a/lektor/db.py b/lektor/db.py
index 6cfcea9..bae4b54 100644
--- a/lektor/db.py
+++ b/lektor/db.py
@@ -6,7 +6,6 @@ import hashlib
 import operator
 import os
 import posixpath
-import warnings
 from collections import OrderedDict
 from datetime import timedelta
 from itertools import islice
@@ -832,21 +831,9 @@ class Image(Attachment):
             return rv
         return Undefined("The format of the image could not be determined.")
 
-    def thumbnail(
-        self, width=None, height=None, crop=None, mode=None, upscale=None, quality=None
-    ):
+    def thumbnail(self, width=None, height=None, mode=None, upscale=None, quality=None):
         """Utility to create thumbnails."""
 
-        # `crop` exists to preserve backward-compatibility, and will be removed.
-        if crop is not None and mode is not None:
-            raise ValueError("Arguments `crop` and `mode` are mutually exclusive.")
-
-        if crop is not None:
-            warnings.warn(
-                'The `crop` argument is deprecated. Use `mode="crop"` instead.'
-            )
-            mode = "crop"
-
         if mode is None:
             mode = ThumbnailMode.DEFAULT
         else:
diff --git a/lektor/imagetools.py b/lektor/imagetools.py
index fcfcc1a..0418aa5 100644
--- a/lektor/imagetools.py
+++ b/lektor/imagetools.py
@@ -593,16 +593,6 @@ def make_image_thumbnail(
 
     would_upscale = computed_width > source_width or computed_height > source_height
 
-    # this part needs to be removed once backward-compatibility period passes
-    if would_upscale and upscale is None:
-        warnings.warn(
-            "Your image is being scaled up since the requested thumbnail "
-            "size is larger than the source. This default will change "
-            "in the future. If you want to preserve the current behaviour, "
-            "use `upscale=True`."
-        )
-        upscale = True
-
     if would_upscale and not upscale:
         return Thumbnail(source_url_path, source_width, source_height)
 

