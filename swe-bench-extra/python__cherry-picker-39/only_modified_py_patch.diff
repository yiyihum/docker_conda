diff --git a/cherry_picker/cherry_picker.py b/cherry_picker/cherry_picker.py
index bb4b848..4c050d6 100755
--- a/cherry_picker/cherry_picker.py
+++ b/cherry_picker/cherry_picker.py
@@ -77,7 +77,9 @@ WORKFLOW_STATES = enum.Enum(
 
 
 class BranchCheckoutException(Exception):
-    pass
+    def __init__(self, branch_name):
+        self.branch_name = branch_name
+        super().__init__(f"Error checking out the branch {branch_name!r}.")
 
 
 class CherryPickException(Exception):
@@ -99,6 +101,7 @@ class CherryPicker:
         commit_sha1,
         branches,
         *,
+        upstream_remote=None,
         dry_run=False,
         push=True,
         prefix_commit=True,
@@ -128,6 +131,7 @@ class CherryPicker:
             click.echo("Dry run requested, listing expected command sequence")
 
         self.pr_remote = pr_remote
+        self.upstream_remote = upstream_remote
         self.commit_sha1 = commit_sha1
         self.branches = branches
         self.dry_run = dry_run
@@ -135,6 +139,9 @@ class CherryPicker:
         self.auto_pr = auto_pr
         self.prefix_commit = prefix_commit
 
+        # the cached calculated value of self.upstream property
+        self._upstream = None
+
         # This is set to the PR number when cherry-picker successfully
         # creates a PR through API.
         self.pr_number = None
@@ -153,14 +160,33 @@ class CherryPicker:
     @property
     def upstream(self):
         """Get the remote name to use for upstream branches
-        Uses "upstream" if it exists, "origin" otherwise
+
+        Uses the remote passed to `--upstream-remote`.
+        If this flag wasn't passed, it uses "upstream" if it exists or "origin" otherwise.
         """
+        # the cached calculated value of the property
+        if self._upstream is not None:
+            return self._upstream
+
         cmd = ["git", "remote", "get-url", "upstream"]
+        if self.upstream_remote is not None:
+            cmd[-1] = self.upstream_remote
+
         try:
             self.run_cmd(cmd)
         except subprocess.CalledProcessError:
-            return "origin"
-        return "upstream"
+            if self.upstream_remote is not None:
+                raise ValueError(f"There is no remote with name {cmd[-1]!r}.")
+            cmd[-1] = "origin"
+            try:
+                self.run_cmd(cmd)
+            except subprocess.CalledProcessError:
+                raise ValueError(
+                    "There are no remotes with name 'upstream' or 'origin'."
+                )
+
+        self._upstream = cmd[-1]
+        return self._upstream
 
     @property
     def sorted_branches(self):
@@ -214,12 +240,10 @@ class CherryPicker:
             self.run_cmd(cmd)
         except subprocess.CalledProcessError as err:
             click.echo(
-                f"Error checking out the branch {branch_name}."
+                f"Error checking out the branch {checked_out_branch!r}."
             )
             click.echo(err.output)
-            raise BranchCheckoutException(
-                f"Error checking out the branch {branch_name}."
-            )
+            raise BranchCheckoutException(checked_out_branch)
 
     def get_commit_message(self, commit_sha):
         """
@@ -425,7 +449,13 @@ Co-authored-by: {get_author_info_from_short_sha(self.commit_sha1)}"""
             click.echo(f"Now backporting '{self.commit_sha1}' into '{maint_branch}'")
 
             cherry_pick_branch = self.get_cherry_pick_branch(maint_branch)
-            self.checkout_branch(maint_branch, create_branch=True)
+            try:
+                self.checkout_branch(maint_branch, create_branch=True)
+            except BranchCheckoutException:
+                self.checkout_default_branch()
+                reset_stored_config_ref()
+                reset_state()
+                raise
             commit_message = ""
             try:
                 self.cherry_pick()
@@ -605,6 +635,13 @@ CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])
     help="git remote to use for PR branches",
     default="origin",
 )
+@click.option(
+    "--upstream-remote",
+    "upstream_remote",
+    metavar="REMOTE",
+    help="git remote to use for upstream branches",
+    default=None,
+)
 @click.option(
     "--abort",
     "abort",
@@ -662,6 +699,7 @@ def cherry_pick_cli(
     ctx,
     dry_run,
     pr_remote,
+    upstream_remote,
     abort,
     status,
     push,
@@ -681,6 +719,7 @@ def cherry_pick_cli(
             pr_remote,
             commit_sha1,
             branches,
+            upstream_remote=upstream_remote,
             dry_run=dry_run,
             push=push,
             auto_pr=auto_pr,
