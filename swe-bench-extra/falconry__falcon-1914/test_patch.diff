diff --git a/falcon/testing/helpers.py b/falcon/testing/helpers.py
index a23fcf5..4507a57 100644
--- a/falcon/testing/helpers.py
+++ b/falcon/testing/helpers.py
@@ -33,6 +33,7 @@ import io
 import itertools
 import json
 import random
+import re
 import socket
 import sys
 import time
@@ -278,7 +279,7 @@ class ASGIResponseEventCollector:
         events (iterable): An iterable of events that were emitted by
             the app, collected as-is from the app.
         headers (iterable): An iterable of (str, str) tuples representing
-            the UTF-8 decoded headers emitted by the app in the body of
+            the ISO-8859-1 decoded headers emitted by the app in the body of
             the ``'http.response.start'`` event.
         status (int): HTTP status code emitted by the app in the body of
             the ``'http.response.start'`` event.
@@ -300,6 +301,9 @@ class ASGIResponseEventCollector:
         'lifespan.shutdown.failed',
     ])
 
+    _HEADER_NAME_RE = re.compile(br'^[a-zA-Z][a-zA-Z0-9\-_]*$')
+    _BAD_HEADER_VALUE_RE = re.compile(br'[\000-\037]')
+
     def __init__(self):
         self.events = []
         self.headers = []
@@ -327,11 +331,19 @@ class ASGIResponseEventCollector:
                 if not isinstance(value, bytes):
                     raise TypeError('ASGI header names must be byte strings')
 
+                # NOTE(vytas): Ported basic validation from wsgiref.validate.
+                if not self._HEADER_NAME_RE.match(name):
+                    raise ValueError('Bad header name: {!r}'.format(name))
+                if self._BAD_HEADER_VALUE_RE.search(value):
+                    raise ValueError('Bad header value: {!r}'.format(value))
+
+                # NOTE(vytas): After the name validation above, the name is
+                #   guaranteed to only contain a subset of ASCII.
                 name_decoded = name.decode()
                 if not name_decoded.islower():
                     raise ValueError('ASGI header names must be lowercase')
 
-                self.headers.append((name_decoded, value.decode()))
+                self.headers.append((name_decoded, value.decode('latin1')))
 
             self.status = event['status']
 
@@ -1345,12 +1357,12 @@ def _add_headers_to_scope(scope, headers, content_length, host,
             items = headers
 
         for name, value in items:
-            n = name.lower().encode()
+            n = name.lower().encode('latin1')
             found_ua = found_ua or (n == b'user-agent')
 
             # NOTE(kgriffs): Value is stripped if not empty, otherwise defaults
             #   to b'' to be consistent with _add_headers_to_environ().
-            v = b'' if value is None else value.strip().encode()
+            v = b'' if value is None else value.strip().encode('latin1')
 
             # NOTE(kgriffs): Expose as an iterable to ensure the framework/app
             #   isn't hard-coded to only work with a list or tuple.
diff --git a/tests/test_headers.py b/tests/test_headers.py
index 335cf27..4f31bb7 100644
--- a/tests/test_headers.py
+++ b/tests/test_headers.py
@@ -125,6 +125,10 @@ class LocationHeaderUnicodeResource:
 
 class UnicodeHeaderResource:
 
+    def on_connect(self, req, resp):
+        # A way to CONNECT with people.
+        resp.set_header('X-Clinking-Beer-Mugs', 'üç∫')
+
     def on_get(self, req, resp):
         resp.set_headers([
             ('X-auTH-toKEN', 'toomanysecrets'),
@@ -132,6 +136,11 @@ class UnicodeHeaderResource:
             ('X-symbOl', '@'),
         ])
 
+    def on_patch(self, req, resp):
+        resp.set_headers([
+            ('X-Thing', '\x01\x02\xff'),
+        ])
+
     def on_post(self, req, resp):
         resp.set_headers([
             ('X-symb\u00F6l', 'thing'),
@@ -267,6 +276,14 @@ class CustomHeadersResource:
         resp.set_headers(CustomHeadersNotCallable())
 
 
+class HeadersDebugResource:
+    def on_get(self, req, resp):
+        resp.media = {key.lower(): value for key, value in req.headers.items()}
+
+    def on_get_header(self, req, resp, header):
+        resp.media = {header.lower(): req.get_header(header)}
+
+
 class TestHeaders:
 
     def test_content_length(self, client):
@@ -530,6 +547,29 @@ class TestHeaders:
         assert resp.status_code == 200
         assert resp.headers['Content-Disposition'] == expected
 
+    def test_request_latin1_headers(self, client):
+        client.app.add_route('/headers', HeadersDebugResource())
+        client.app.add_route('/headers/{header}', HeadersDebugResource(), suffix='header')
+
+        headers = {
+            'User-Agent': 'Mosaic/0.9',
+            'X-Latin1-Header': 'F√∂rm√•nsr√§tt',
+            'X-Size': 'gro√ü',
+        }
+        resp = client.simulate_get('/headers', headers=headers)
+        assert resp.status_code == 200
+        assert resp.json == {
+            'host': 'falconframework.org',
+            'user-agent': 'Mosaic/0.9',
+            'x-latin1-header': 'F√∂rm√•nsr√§tt',
+            'x-size': 'gro√ü',
+        }
+
+        resp = client.simulate_get('/headers/X-Latin1-Header', headers=headers)
+        assert resp.json == {'x-latin1-header': 'F√∂rm√•nsr√§tt'}
+        resp = client.simulate_get('/headers/X-Size', headers=headers)
+        assert resp.json == {'x-size': 'gro√ü'}
+
     def test_unicode_location_headers(self, client):
         client.app.add_route('/', LocationHeaderUnicodeResource())
 
@@ -551,28 +591,42 @@ class TestHeaders:
         assert result.headers['X-Auth-Token'] == 'toomanysecrets'
         assert result.headers['X-Symbol'] == '@'
 
-    @pytest.mark.parametrize('method', ['POST', 'PUT'])
+    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
     def test_unicode_headers_contain_non_ascii(self, method, client):
         app = client.app
         app.add_route('/', UnicodeHeaderResource())
 
-        if app._ASGI:
-            # NOTE(kgriffs): Unlike PEP-3333, the ASGI spec requires the
-            #   app to encode header names and values to a byte string. This
-            #   gives Falcon the opportunity to verify the character set
-            #   in the process and raise an error as appropriate.
-            error_type, pattern = ValueError, 'ASCII'
+        if method == 'CONNECT':
+            # NOTE(vytas): Response headers cannot be encoded to Latin-1.
+            if not app._ASGI:
+                pytest.skip('wsgiref.validate sees no evil here')
+
+            # NOTE(vytas): Shouldn't this result in an HTTP 500 instead of
+            #   bubbling up a ValueError to the app server?
+            with pytest.raises(ValueError):
+                client.simulate_request(method, '/')
         elif method == 'PUT':
-            pytest.skip('The wsgiref validator does not check header values.')
+            # NOTE(vytas): Latin-1 header values are allowed.
+            resp = client.simulate_request(method, '/')
+            assert resp.headers
         else:
-            # NOTE(kgriffs): The wsgiref validator that is integrated into
-            #   Falcon's testing framework will catch this. However, Falcon
-            #   itself does not do the check to avoid potential overhead
-            #   in a production deployment.
-            error_type, pattern = AssertionError, 'Bad header name'
-
-        with pytest.raises(error_type, match=pattern):
-            client.simulate_request(method, '/')
+            if app._ASGI:
+                # NOTE(kgriffs): Unlike PEP-3333, the ASGI spec requires the
+                #   app to encode header names and values to a byte string. This
+                #   gives Falcon the opportunity to verify the character set
+                #   in the process and raise an error as appropriate.
+                error_type = ValueError
+            else:
+                # NOTE(kgriffs): The wsgiref validator that is integrated into
+                #   Falcon's testing framework will catch this. However, Falcon
+                #   itself does not do the check to avoid potential overhead
+                #   in a production deployment.
+                error_type = AssertionError
+
+            pattern = 'Bad header name' if method == 'POST' else 'Bad header value'
+
+            with pytest.raises(error_type, match=pattern):
+                client.simulate_request(method, '/')
 
     def test_response_set_and_get_header(self, client):
         resource = HeaderHelpersResource()
