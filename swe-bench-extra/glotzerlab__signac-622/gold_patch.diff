diff --git a/signac/contrib/filterparse.py b/signac/contrib/filterparse.py
index 0fe52b75..9868fb8d 100644
--- a/signac/contrib/filterparse.py
+++ b/signac/contrib/filterparse.py
@@ -62,8 +62,8 @@ def _read_index(project, fn_index=None):
         return (json.loads(line) for line in fd)
 
 
-def _is_json(q):
-    """Check if q is JSON.
+def _is_json_like(q):
+    """Check if q is JSON like.
 
     Parameters
     ----------
@@ -76,7 +76,7 @@ def _is_json(q):
         True if q starts with "{" and ends with "}".
 
     """
-    return q.strip().startswith("{") and q.strip().endswith("}")
+    return (q[0] == "{" and q[-1] == "}") or (q[0] == "[" and q[-1] == "]")
 
 
 def _is_regex(q):
@@ -179,19 +179,18 @@ def _parse_single(key, value=None):
     ------
     ValueError
         If filter arguments have an invalid key.
-
     """
-    if value is None or value == "!":
+    if _is_json_like(key):
+        raise ValueError(
+            "Please check your filter arguments. "
+            f"Using a JSON expression as a key is not allowed: '{key}'."
+        )
+    elif value is None or value == "!":
         return key, {"$exists": True}
-    elif _is_json(value):
+    elif _is_json_like(value):
         return key, _parse_json(value)
     elif _is_regex(value):
         return key, {"$regex": value[1:-1]}
-    elif _is_json(key):
-        raise ValueError(
-            "Please check your filter arguments. "
-            "Using a JSON expression as a key is not allowed: '{}'.".format(key)
-        )
     else:
         return key, _cast(value)
 
@@ -238,14 +237,13 @@ def parse_filter_arg(args, file=sys.stderr):
     if args is None or len(args) == 0:
         return None
     elif len(args) == 1:
-        if _is_json(args[0]):
+        if _is_json_like(args[0]):
             return _parse_json(args[0])
         else:
             key, value = _parse_single(args[0])
             return _with_message({key: value}, file)
     else:
         q = dict(parse_simple(args))
-
         return _with_message(q, file)
 
 
