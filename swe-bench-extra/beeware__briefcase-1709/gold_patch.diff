diff --git a/changes/1674.feature.rst b/changes/1674.feature.rst
new file mode 100644
index 00000000..e03ab6cb
--- /dev/null
+++ b/changes/1674.feature.rst
@@ -0,0 +1,1 @@
+The contents of ``pyproject.toml`` is now included in the log file.
diff --git a/changes/1708.feature.rst b/changes/1708.feature.rst
new file mode 100644
index 00000000..f77632c6
--- /dev/null
+++ b/changes/1708.feature.rst
@@ -0,0 +1,1 @@
+When deep debug is activated via ``-vv``, ``pip`` now installs requirements for the app with verbose logging.
diff --git a/src/briefcase/commands/create.py b/src/briefcase/commands/create.py
index 81e98697..da05e986 100644
--- a/src/briefcase/commands/create.py
+++ b/src/briefcase/commands/create.py
@@ -524,6 +524,7 @@ class CreateCommand(BaseCommand):
                     "--no-user",
                     f"--target={app_packages_path}",
                 ]
+                + (["-vv"] if self.logger.is_deep_debug else [])
                 + self._extra_pip_args(app)
                 + pip_args,
                 check=True,
diff --git a/src/briefcase/commands/dev.py b/src/briefcase/commands/dev.py
index f4d78b13..f37e36ec 100644
--- a/src/briefcase/commands/dev.py
+++ b/src/briefcase/commands/dev.py
@@ -99,6 +99,7 @@ class DevCommand(RunAppMixin, BaseCommand):
                             "install",
                             "--upgrade",
                         ]
+                        + (["-vv"] if self.logger.is_deep_debug else [])
                         + requires,
                         check=True,
                         encoding="UTF-8",
diff --git a/src/briefcase/console.py b/src/briefcase/console.py
index c05c3a0c..b2c48905 100644
--- a/src/briefcase/console.py
+++ b/src/briefcase/console.py
@@ -398,9 +398,9 @@ class Log:
                 self.warning(f"Log saved to {log_filepath}")
             self.print.to_console()
 
-    def _build_log(self, command):
+    def _build_log(self, command) -> str:
         """Accumulate all information to include in the log file."""
-        # add the exception stacktrace to end of log if one was captured
+        # Add the exception stacktraces to end of log if any were captured
         if self.stacktraces:
             # using print.log.print() instead of print.to_log() to avoid
             # timestamp and code location inclusion for the stacktrace box.
@@ -415,6 +415,7 @@ class Log:
                     new_line_start=True,
                 )
 
+        # Retrieve additional logging added by the Command
         if self.log_file_extras:
             with command.input.wait_bar(
                 "Collecting extra information for log...",
@@ -428,21 +429,30 @@ class Log:
                     except Exception:
                         self.error(traceback.format_exc())
 
-        # build log header and export buffered log from Rich
-        uname = platform.uname()
+        # Capture env vars removing any potentially sensitive information
         sanitized_env_vars = "\n".join(
             f"\t{env_var}={value if not SENSITIVE_SETTING_RE.search(env_var) else '********************'}"
             for env_var, value in sorted(command.tools.os.environ.items())
         )
+
+        # Capture pyproject.toml if one exists in the current directory
+        try:
+            with open(Path.cwd() / "pyproject.toml", encoding="utf-8") as f:
+                pyproject_toml = f.read().strip()
+        except OSError as e:
+            pyproject_toml = str(e)
+
+        # Build log with buffered log from Rich
+        uname = platform.uname()
         return (
             f"Date/Time:       {datetime.now().strftime('%Y-%m-%d %H:%M:%S %Z')}\n"
             f"Command line:    {' '.join(sys.argv)}\n"
-            f"\n"
+            "\n"
             f"OS Release:      {uname.system} {uname.release}\n"
             f"OS Version:      {uname.version}\n"
             f"Architecture:    {uname.machine}\n"
             f"Platform:        {platform.platform(aliased=True)}\n"
-            f"\n"
+            "\n"
             f"Python exe:      {sys.executable}\n"
             # replace line breaks with spaces (use chr(10) since '\n' isn't allowed in f-strings...)
             f"Python version:  {sys.version.replace(chr(10), ' ')}\n"
@@ -452,15 +462,18 @@ class Log:
             f"Virtual env:     {hasattr(sys, 'real_prefix') or sys.base_prefix != sys.prefix}\n"
             # for conda, prefix and base_prefix are likely the same but contain a conda-meta dir.
             f"Conda env:       {(Path(sys.prefix) / 'conda-meta').exists()}\n"
-            f"\n"
+            "\n"
             f"Briefcase:       {__version__}\n"
             f"Target platform: {command.platform}\n"
             f"Target format:   {command.output_format}\n"
-            f"\n"
-            f"Environment Variables:\n"
+            "\n"
+            "Environment Variables:\n"
             f"{sanitized_env_vars}\n"
-            f"\n"
-            f"Briefcase Log:\n"
+            "\n"
+            "pyproject.toml:\n"
+            f"{pyproject_toml}\n"
+            "\n"
+            "Briefcase Log:\n"
             f"{self.print.export_log()}"
         )
 
diff --git a/src/briefcase/platforms/web/static.py b/src/briefcase/platforms/web/static.py
index bd10c383..a80aa39f 100644
--- a/src/briefcase/platforms/web/static.py
+++ b/src/briefcase/platforms/web/static.py
@@ -169,7 +169,8 @@ class StaticWebBuildCommand(StaticWebMixin, BuildCommand):
                         self.wheel_path(app),
                         "-r",
                         self.bundle_path(app) / "requirements.txt",
-                    ],
+                    ]
+                    + (["-vv"] if self.logger.is_deep_debug else []),
                     check=True,
                     encoding="UTF-8",
                 )
