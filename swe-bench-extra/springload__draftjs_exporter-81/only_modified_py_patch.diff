diff --git a/benchmark.py b/benchmark.py
index 40ae663..0d0855e 100644
--- a/benchmark.py
+++ b/benchmark.py
@@ -69,7 +69,7 @@ config = {
             'component': br,
         }
     ],
-    'engine': 'string',
+    'engine': DOM.STRING,
 }
 
 exporter = HTML(config)
@@ -78,8 +78,7 @@ content_states = get_content_sample()
 
 BENCHMARK_RUNS = int(os.environ.get('BENCHMARK_RUNS', 1))
 
-print('Exporting %s ContentStates %s times' %
-      (len(content_states), BENCHMARK_RUNS))
+print('Exporting %s ContentStates %s times' % (len(content_states), BENCHMARK_RUNS))
 
 pr = cProfile.Profile()
 pr.enable()
diff --git a/draftjs_exporter/dom.py b/draftjs_exporter/dom.py
index e3b9424..967253b 100644
--- a/draftjs_exporter/dom.py
+++ b/draftjs_exporter/dom.py
@@ -1,10 +1,8 @@
 from __future__ import absolute_import, unicode_literals
 
-import inspect
 import re
 
-from draftjs_exporter.engines.html5lib import DOM_HTML5LIB
-from draftjs_exporter.error import ConfigException
+from draftjs_exporter.utils.module_loading import import_string
 
 # Python 2/3 unicode compatibility hack.
 # See http://stackoverflow.com/questions/6812031/how-to-make-unicode-string-with-python3
@@ -24,11 +22,11 @@ class DOM(object):
     Component building API, abstracting the DOM implementation.
     """
 
-    HTML5LIB = 'html5lib'
-    LXML = 'lxml'
-    STRING = 'string'
+    HTML5LIB = 'draftjs_exporter.engines.html5lib.DOM_HTML5LIB'
+    LXML = 'draftjs_exporter.engines.lxml.DOM_LXML'
+    STRING = 'draftjs_exporter.engines.string.DOMString'
 
-    dom = DOM_HTML5LIB
+    dom = None
 
     @staticmethod
     def camel_to_dash(camel_cased_str):
@@ -37,23 +35,11 @@ class DOM(object):
         return dashed_case_str.replace('--', '-')
 
     @classmethod
-    def use(cls, engine=DOM_HTML5LIB):
+    def use(cls, engine):
         """
         Choose which DOM implementation to use.
         """
-        if engine:
-            if inspect.isclass(engine):
-                cls.dom = engine
-            elif engine.lower() == cls.HTML5LIB:
-                cls.dom = DOM_HTML5LIB
-            elif engine.lower() == cls.LXML:
-                from draftjs_exporter.engines.lxml import DOM_LXML
-                cls.dom = DOM_LXML
-            elif engine.lower() == cls.STRING:
-                from draftjs_exporter.engines.string import DOMString
-                cls.dom = DOMString
-            else:
-                raise ConfigException('Invalid DOM engine.')
+        cls.dom = import_string(engine)
 
     @classmethod
     def create_element(cls, type_=None, props=None, *children):
diff --git a/draftjs_exporter/html.py b/draftjs_exporter/html.py
index 0f0a9bd..2eb5264 100644
--- a/draftjs_exporter/html.py
+++ b/draftjs_exporter/html.py
@@ -25,7 +25,7 @@ class HTML:
         self.block_map = config.get('block_map', BLOCK_MAP)
         self.style_map = config.get('style_map', STYLE_MAP)
 
-        DOM.use(config.get('engine'))
+        DOM.use(config.get('engine', DOM.HTML5LIB))
 
     def render(self, content_state=None):
         """
diff --git a/draftjs_exporter/utils/__init__.py b/draftjs_exporter/utils/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/example.py b/example.py
index bd4f657..6fa442b 100644
--- a/example.py
+++ b/example.py
@@ -186,7 +186,7 @@ if __name__ == '__main__':
             },
         ],
         # Specify which DOM backing engine to use.
-        'engine': 'string',
+        'engine': DOM.STRING,
     }
 
     exporter = HTML(config)
@@ -623,11 +623,9 @@ if __name__ == '__main__':
     pr.disable()
     p = Stats(pr)
 
-
     def prettify(markup):
         return re.sub(r'</?(body|html|head)>', '', BeautifulSoup(markup, 'html5lib').prettify()).strip()
 
-
     pretty = prettify(markup)
 
     # Display in console.

