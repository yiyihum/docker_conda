diff --git a/tests/__init__.py b/tests/__init__.py
index e69de29..21a0fb6 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -0,0 +1,6 @@
+from __future__ import absolute_import, unicode_literals
+
+from draftjs_exporter.dom import DOM
+
+# Initialise a default engine for the test suites.
+DOM.use(DOM.HTML5LIB)
diff --git a/tests/test_dom.py b/tests/test_dom.py
index e4b7617..48eed62 100644
--- a/tests/test_dom.py
+++ b/tests/test_dom.py
@@ -5,7 +5,6 @@ import unittest
 from draftjs_exporter.dom import DOM
 from draftjs_exporter.engines.html5lib import DOM_HTML5LIB
 from draftjs_exporter.engines.lxml import DOM_LXML
-from draftjs_exporter.error import ConfigException
 from tests.test_entities import icon
 
 
@@ -19,7 +18,7 @@ class TestDOM(unittest.TestCase):
         DOM.use(DOM.HTML5LIB)
 
     def test_use_custom(self):
-        DOM.use(DOMTestImpl)
+        DOM.use('tests.test_dom.DOMTestImpl')
         self.assertEqual(DOM.dom, DOMTestImpl)
 
     def test_use_lxml(self):
@@ -31,7 +30,7 @@ class TestDOM(unittest.TestCase):
         self.assertEqual(DOM.dom, DOM_HTML5LIB)
 
     def test_use_invalid(self):
-        with self.assertRaises(ConfigException):
+        with self.assertRaises(ImportError):
             DOM.use('test')
 
 
diff --git a/tests/test_exports.py b/tests/test_exports.py
index dfd50a6..7cd4060 100644
--- a/tests/test_exports.py
+++ b/tests/test_exports.py
@@ -50,26 +50,20 @@ class TestExportsMeta(type):
     See http://stackoverflow.com/a/20870875/1798491
     """
     def __new__(mcs, name, bases, tests):
-        def gen_test(export, engine):
+        def gen_test(content, html):
             def test(self):
-                self.maxDiff = None
-                DOM.use(engine)
-                self.assertEqual(exporter.render(export['content_state']), export['output'][engine])
+                self.assertEqual(exporter.render(content), html)
 
             return test
 
-        if name == 'TestExportsHTML5LIB':
-            engine = 'html5lib'
-        elif name == 'TestExportsLXML':
-            engine = 'lxml'
-        elif name == 'TestExportsSTRING':
-            engine = 'string'
+        engine = name.replace('TestExports', '').lower()
 
         for export in fixtures:
             test_label = export['label'].lower().replace(' ', '_')
             test_name = 'test_export_{0}_{1}'.format(engine, test_label)
-            tests[test_name] = gen_test(export, engine)
-
+            content = export['content_state']
+            html = export['output'][engine]
+            tests[test_name] = gen_test(content, html)
 
         return type.__new__(mcs, name, bases, tests)
 
@@ -77,6 +71,7 @@ class TestExportsMeta(type):
 class TestExportsHTML5LIB(six.with_metaclass(TestExportsMeta, unittest.TestCase)):
     @classmethod
     def setUpClass(cls):
+        DOM.use(DOM.HTML5LIB)
         cls.pr = cProfile.Profile()
         cls.pr.enable()
         print('\nhtml5lib')
@@ -86,13 +81,11 @@ class TestExportsHTML5LIB(six.with_metaclass(TestExportsMeta, unittest.TestCase)
         cls.pr.disable()
         Stats(cls.pr).strip_dirs().sort_stats('cumulative').print_stats(0)
 
-    def test_init_html5lib(self):
-        self.assertIsInstance(exporter, HTML)
-
 
 class TestExportsLXML(six.with_metaclass(TestExportsMeta, unittest.TestCase)):
     @classmethod
     def setUpClass(cls):
+        DOM.use(DOM.LXML)
         cls.pr = cProfile.Profile()
         cls.pr.enable()
         print('\nlxml')
@@ -102,13 +95,11 @@ class TestExportsLXML(six.with_metaclass(TestExportsMeta, unittest.TestCase)):
         cls.pr.disable()
         Stats(cls.pr).strip_dirs().sort_stats('cumulative').print_stats(0)
 
-    def test_init(self):
-        self.assertIsInstance(exporter, HTML)
-
 
 class TestExportsSTRING(six.with_metaclass(TestExportsMeta, unittest.TestCase)):
     @classmethod
     def setUpClass(cls):
+        DOM.use(DOM.STRING)
         cls.pr = cProfile.Profile()
         cls.pr.enable()
         print('\nstring')
@@ -118,9 +109,6 @@ class TestExportsSTRING(six.with_metaclass(TestExportsMeta, unittest.TestCase)):
         cls.pr.disable()
         Stats(cls.pr).strip_dirs().sort_stats('cumulative').print_stats(0)
 
-    def test_init(self):
-        self.assertIsInstance(exporter, HTML)
-
 
 if __name__ == "__main__":
     unittest.main()
diff --git a/tests/test_output.py b/tests/test_output.py
index fac2bfb..28726d7 100644
--- a/tests/test_output.py
+++ b/tests/test_output.py
@@ -5,6 +5,7 @@ import unittest
 
 from draftjs_exporter.constants import BLOCK_TYPES, ENTITY_TYPES, INLINE_STYLES
 from draftjs_exporter.defaults import BLOCK_MAP
+from draftjs_exporter.dom import DOM
 from draftjs_exporter.entity_state import EntityException
 from draftjs_exporter.html import HTML
 from tests.test_composite_decorators import BR_DECORATOR, HASHTAG_DECORATOR, LINKIFY_DECORATOR
@@ -42,7 +43,7 @@ config = {
             'props': {'style': {'textDecoration': 'underline'}},
         },
     },
-    'engine': 'html5lib'
+    'engine': DOM.HTML5LIB
 }
 
 
@@ -50,6 +51,7 @@ class TestOutput(unittest.TestCase):
     """
     Test cases related to specific features of the HTML builder.
     """
+
     def setUp(self):
         self.maxDiff = None
         self.exporter = HTML(config)
diff --git a/tests/utils/__init__.py b/tests/utils/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/tests/utils/test_module_loading.py b/tests/utils/test_module_loading.py
new file mode 100644
index 0000000..d6735d8
--- /dev/null
+++ b/tests/utils/test_module_loading.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import, unicode_literals
+
+import unittest
+
+from draftjs_exporter.utils.module_loading import import_string
+
+
+class TestModuleLoading(unittest.TestCase):
+    """
+    Taken from Django:
+    https://github.com/django/django/blob/f6bd00131e687aedf2719ad31e84b097562ca5f2/tests/utils_tests/test_module_loading.py#L122-L132
+    """
+    def test_import_string_success(self):
+        cls = import_string('draftjs_exporter.utils.module_loading.import_string')
+        self.assertEqual(cls, import_string)
+
+    def test_import_string_invalid(self):
+        with self.assertRaises(ImportError):
+            import_string('no_dots_in_path')
+
+    def test_import_string_unexistent(self):
+        with self.assertRaises(ImportError):
+            import_string('tests.utils.unexistent')
