diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7e2d058..e1705c1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,9 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
 ## [Unreleased]
+### Fixed
+- Fixed a bug where nilable and blankable Spec conformers would return `INVALID` even
+  if their validation passed (#87)
 
 ## [v0.3.post1]
 Fixed `README.rst` reference and content-type in `setup.py` for PyPI description.
diff --git a/src/dataspec/__version__.py b/src/dataspec/__version__.py
index 8365ceb..085fffc 100644
--- a/src/dataspec/__version__.py
+++ b/src/dataspec/__version__.py
@@ -1,3 +1,3 @@
-VERSION = (0, 3, "post1")
+VERSION = (0, 3, "dev2")
 
 __version__ = ".".join(map(str, VERSION))
diff --git a/src/dataspec/factories.py b/src/dataspec/factories.py
index a42822f..c8518f0 100644
--- a/src/dataspec/factories.py
+++ b/src/dataspec/factories.py
@@ -92,10 +92,15 @@ def blankable_spec(
                 message=f"Value '{e}' is not blank", pred=blank_or_pred, value=e,
             )
 
+    def conform_blankable(e):
+        if e == "":
+            return e
+        return spec.conform(e)
+
     return ValidatorSpec(
         tag or "blankable",
         blank_or_pred,
-        conformer=compose_conformers(spec.conformer, conformer),
+        conformer=compose_conformers(conform_blankable, conformer),
     )
 
 
@@ -873,10 +878,15 @@ def nilable_spec(
                 message=f"Value '{e}' is not None", pred=nil_or_pred, value=e,
             )
 
+    def conform_nilable(e):
+        if e is None:
+            return e
+        return spec.conform(e)
+
     return ValidatorSpec(
         tag or "nilable",
         nil_or_pred,
-        conformer=compose_conformers(spec.conformer, conformer),
+        conformer=compose_conformers(conform_nilable, conformer),
     )
 
 
