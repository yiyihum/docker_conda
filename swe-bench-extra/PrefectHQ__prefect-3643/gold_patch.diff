diff --git a/changes/issue3619.yaml b/changes/issue3619.yaml
new file mode 100644
index 0000000000..8b23031c28
--- /dev/null
+++ b/changes/issue3619.yaml
@@ -0,0 +1,2 @@
+enhancement:
+  - "Checkpoint all iterations of Looped tasks - [#3619](https://github.com/PrefectHQ/prefect/issues/3619)"
diff --git a/changes/pr3624.yaml b/changes/pr3624.yaml
new file mode 100644
index 0000000000..8b156975eb
--- /dev/null
+++ b/changes/pr3624.yaml
@@ -0,0 +1,2 @@
+fix:
+  - "Fix breaking change in flow registration with old server versions - [#3624](https://github.com/PrefectHQ/prefect/pull/3624)"
diff --git a/src/prefect/client/client.py b/src/prefect/client/client.py
index 11e81be590..9c6bfdffcf 100644
--- a/src/prefect/client/client.py
+++ b/src/prefect/client/client.py
@@ -795,17 +795,20 @@ class Client:
 
         if compressed:
             serialized_flow = compress(serialized_flow)
+
+        inputs = dict(
+            project_id=(project[0].id if project else None),
+            serialized_flow=serialized_flow,
+            set_schedule_active=set_schedule_active,
+            version_group_id=version_group_id,
+        )
+        # Add newly added inputs only when set for backwards compatibility
+        if idempotency_key is not None:
+            inputs.update(idempotency_key=idempotency_key)
+
         res = self.graphql(
             create_mutation,
-            variables=dict(
-                input=dict(
-                    project_id=(project[0].id if project else None),
-                    serialized_flow=serialized_flow,
-                    set_schedule_active=set_schedule_active,
-                    version_group_id=version_group_id,
-                    idempotency_key=idempotency_key,
-                )
-            ),
+            variables=dict(input=inputs),
             retry_on_api_error=False,
         )  # type: Any
 
diff --git a/src/prefect/engine/task_runner.py b/src/prefect/engine/task_runner.py
index 03f4faa235..056df601db 100644
--- a/src/prefect/engine/task_runner.py
+++ b/src/prefect/engine/task_runner.py
@@ -827,6 +827,7 @@ class TaskRunner(Runner):
 
         value = None
         raw_inputs = {k: r.value for k, r in inputs.items()}
+        new_state = None
         try:
             self.logger.debug(
                 "Task '{name}': Calling task.run() method...".format(
@@ -859,11 +860,10 @@ class TaskRunner(Runner):
         except signals.LOOP as exc:
             new_state = exc.state
             assert isinstance(new_state, Looped)
-            new_state.result = self.result.from_value(value=new_state.result)
+            value = new_state.result
             new_state.message = exc.state.message or "Task is looping ({})".format(
                 new_state.loop_count
             )
-            return new_state
 
         # checkpoint tasks if a result is present, except for when the user has opted out by
         # disabling checkpointing
@@ -884,6 +884,10 @@ class TaskRunner(Runner):
         else:
             result = self.result.from_value(value=value)
 
+        if new_state is not None:
+            new_state.result = result
+            return new_state
+
         state = Success(result=result, message="Task run succeeded.")
         return state
 
