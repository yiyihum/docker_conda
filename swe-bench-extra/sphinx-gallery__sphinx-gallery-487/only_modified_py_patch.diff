diff --git a/sphinx_gallery/gen_gallery.py b/sphinx_gallery/gen_gallery.py
index 62d3ed1..1a4ab02 100644
--- a/sphinx_gallery/gen_gallery.py
+++ b/sphinx_gallery/gen_gallery.py
@@ -70,6 +70,7 @@ DEFAULT_GALLERY_CONF = {
     'image_scrapers': ('matplotlib',),
     'reset_modules': ('matplotlib', 'seaborn'),
     'first_notebook_cell': '%matplotlib inline',
+    'remove_config_comments': False,
     'show_memory': False,
     'junit': '',
     'log_level': {'backreference_missing': 'warning'},
diff --git a/sphinx_gallery/gen_rst.py b/sphinx_gallery/gen_rst.py
index db82ea3..80160dd 100644
--- a/sphinx_gallery/gen_rst.py
+++ b/sphinx_gallery/gen_rst.py
@@ -61,7 +61,7 @@ from . import sphinx_compatibility
 from .backreferences import write_backreferences, _thumbnail_div
 from .downloads import CODE_DOWNLOAD
 from .py_source_parser import (split_code_and_text_blocks,
-                               get_docstring_and_rest)
+                               get_docstring_and_rest, remove_config_comments)
 
 from .notebook import jupyter_notebook, save_notebook
 from .binder import check_binder_conf, gen_binder_rst
@@ -642,6 +642,14 @@ def generate_file_rst(fname, target_dir, src_dir, gallery_conf):
         'target_file': target_file}
 
     file_conf, script_blocks = split_code_and_text_blocks(src_file)
+
+    if gallery_conf['remove_config_comments']:
+        script_blocks = [
+            (label, remove_config_comments(content), line_number)
+            for label, content, line_number in script_blocks
+        ]
+
+
     output_blocks, time_elapsed = execute_script(script_blocks,
                                                  script_vars,
                                                  gallery_conf)
diff --git a/sphinx_gallery/py_source_parser.py b/sphinx_gallery/py_source_parser.py
index 66536f1..94fe085 100644
--- a/sphinx_gallery/py_source_parser.py
+++ b/sphinx_gallery/py_source_parser.py
@@ -26,6 +26,20 @@ SyntaxError
 Example script with invalid Python syntax
 """
 
+# The pattern for in-file config comments is designed to not greedily match
+# newlines at the start and end, except for one newline at the end. This
+# ensures that the matched pattern can be removed from the code without
+# changing the block structure; i.e. empty newlines are preserved, e.g. in
+#
+#     a = 1
+#
+#     # sphinx_gallery_thumbnail_number = 2
+#
+#     b = 2
+INFILE_CONFIG_PATTERN = re.compile(
+    r"^[\ \t]*#\s*sphinx_gallery_([A-Za-z0-9_]+)\s*=\s*(.+)[\ \t]*\n?",
+    re.MULTILINE)
+
 
 def parse_source_file(filename):
     """Parse source file into AST node
@@ -125,12 +139,8 @@ def extract_file_config(content):
     """
     Pull out the file-specific config specified in the docstring.
     """
-
-    prop_pat = re.compile(
-        r"^\s*#\s*sphinx_gallery_([A-Za-z0-9_]+)\s*=\s*(.+)\s*$",
-        re.MULTILINE)
     file_conf = {}
-    for match in re.finditer(prop_pat, content):
+    for match in re.finditer(INFILE_CONFIG_PATTERN, content):
         name = match.group(1)
         value = match.group(2)
         try:
@@ -188,3 +198,19 @@ def split_code_and_text_blocks(source_file):
         blocks.append(('code', remaining_content, lineno))
 
     return file_conf, blocks
+
+
+def remove_config_comments(code_block):
+    """
+    Return the content of *code_block* with in-file config comments removed.
+
+    Comment lines of the pattern '# sphinx_gallery_[option] = [val]' are
+    removed, but surrounding empty lines are preserved.
+
+    Parameters
+    ----------
+    code_block : str
+        A code segment.
+    """
+    parsed_code, _ = re.subn(INFILE_CONFIG_PATTERN, '', code_block)
+    return parsed_code

