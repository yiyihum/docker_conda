diff --git a/okonomiyaki/runtimes/runtime_info.py b/okonomiyaki/runtimes/runtime_info.py
index 5b20cdf..eb9a8e5 100644
--- a/okonomiyaki/runtimes/runtime_info.py
+++ b/okonomiyaki/runtimes/runtime_info.py
@@ -110,13 +110,16 @@ class IRuntimeInfoV1(IRuntimeInfo):
 
         variables = _compute_variables(metadata, prefix, name)
 
-        executable = substitute_variable(metadata.executable, variables)
+        executable = substitute_variable(
+            metadata.executable, variables, template='curly_braces_only'
+        )
 
         paths = tuple(
-            substitute_variable(path, variables) for path in metadata.paths
+            substitute_variable(path, variables, template='curly_braces_only')
+            for path in metadata.paths
         )
         post_install = tuple(
-            substitute_variable(part, variables)
+            substitute_variable(part, variables, template='curly_braces_only')
             for part in metadata.post_install
         )
 
@@ -157,9 +160,15 @@ class PythonRuntimeInfoV1(IRuntimeInfoV1):
             metadata, prefix, name
         )
         variables = _compute_variables(metadata, prefix, name)
-        scriptsdir = substitute_variable(metadata.scriptsdir, variables)
-        site_packages = substitute_variable(metadata.site_packages, variables)
-        python_tag = substitute_variable(metadata.python_tag, variables)
+        scriptsdir = substitute_variable(
+            metadata.scriptsdir, variables, template='curly_braces_only'
+        )
+        site_packages = substitute_variable(
+            metadata.site_packages, variables, template='curly_braces_only'
+        )
+        python_tag = substitute_variable(
+            metadata.python_tag, variables, template='curly_braces_only'
+        )
 
         return args + (scriptsdir, site_packages, python_tag)
 
@@ -212,4 +221,6 @@ def _compute_variables(metadata, prefix, name):
     variables["prefix"] = prefix
     variables["name"] = name
 
-    return substitute_variables(variables, variables)
+    return substitute_variables(
+        variables, variables, template='curly_braces_only'
+    )
diff --git a/okonomiyaki/utils/misc.py b/okonomiyaki/utils/misc.py
index bddffb1..b441357 100644
--- a/okonomiyaki/utils/misc.py
+++ b/okonomiyaki/utils/misc.py
@@ -1,5 +1,6 @@
 import ast
 import contextlib
+import re
 import shutil
 import string
 import tempfile
@@ -64,14 +65,25 @@ def tempdir():
         shutil.rmtree(d)
 
 
-def substitute_variables(d, local_vars):
-    """Perform shell/Perl-style variable substitution.
+def substitute_variables(d, local_vars, template='standard'):
+    """Perform repeated shell/Perl-style variable substitution to dict values
 
-    Every occurrence of '${name}' name is considered a variable, and variable
-    is substituted by the value found in the `local_vars' dictionary.  Raise
-    ValueError for any variables not found in `local_vars'.
+    Every occurrence of '${name}' in the values of dict 'd' is considered a
+    variable, and the variable is substituted by the value found in the
+    'local_vars' dictionary. A ValueError is raised for any variable not found
+    in 'local_vars'. This is applied repeatedly until all nested variables are
+    resolved.
 
-    '$' may be escaped by using '$$'
+    If the 'standard' template is used, $name will also be substituted. There
+    is a bug with escapes using the 'standard' template. This occurs because
+    substitution is applied repeatedly and after $$name is translated to $name,
+    variable substitution is performed on $name.
+
+    With the 'curly_braces_only' template $name will not be substituted. Also
+    escapes using '$${name}' are ignored and not translated to '${name}'. This
+    allows the variable substitution to be applied repeatedly. The function
+    'substitute_variable' should be applied to the data after this function
+    which does translate the escape '$${name}' to '${name}' by default.
 
     Parameters
     ----------
@@ -79,11 +91,18 @@ def substitute_variables(d, local_vars):
         (str: str) mapping, where each value will be substituted.
     local_vars: dict
         dict of variables
+    template: ('standard' | 'curly_braces_only')
+        whether to use 'standard' string.Template or RequireCurlyTemplate
     """
     def _resolve(d):
         ret = {}
         for k, v in d.items():
-            ret[k] = substitute_variable(v, local_vars)
+            # Ignoring the escape sequence with ignore_escape=True allows
+            # substitute_variable to be run repeatedly over the same data
+            # ignore_escape=True has no effect with the old 'standard' template
+            ret[k] = substitute_variable(
+                v, local_vars, template=template, ignore_escape=True
+            )
         return ret
 
     ret = _resolve(d)
@@ -93,5 +112,76 @@ def substitute_variables(d, local_vars):
     return ret
 
 
-def substitute_variable(v, local_vars):
-    return string.Template(v).substitute(local_vars)
+class RequireCurlyTemplate(string.Template):
+    """This class inheriting from Template requires curly braces.
+       A '$' without curly braces will not be substituted.
+    """
+    delimiter = '$'
+    # named and escaped groups are always None
+    # This is because their patterns are a subset of the invalid group,
+    # i.e. the invalid group will always match first.
+    # According to the Python re documentation the "|" operator is never greedy,
+    # so the named and escaped groups will always be None.
+    ignore_escape_pattern_str = r"""
+    (?<!\$)\$(?:                        # Only match single dollar signs
+      {(?P<braced>[_a-z][_a-z0-9]*)} |  # Delimiter and braced identifier
+      {(?P<invalid>[^}]*)}           |  # Other ill-formed delimiter expr
+      {(?P<named>)}                  |  # named group is always None
+      {(?P<escaped>)}                   # escaped group is always None
+    )
+    """
+    ignore_escape_pattern = re.compile(
+        ignore_escape_pattern_str, re.IGNORECASE | re.VERBOSE
+    )
+    pattern = r"""
+    \$(?:
+      (?P<escaped>\$)(?={[^}]*})     |  # Extra delimiter followed by braces
+      {(?P<braced>[_a-z][_a-z0-9]*)} |  # Delimiter and braced identifier
+      {(?P<invalid>[^}]*)}           |  # Other ill-formed delimiter expr
+      {(?P<named>)}                     # named group is always None
+    )
+    """
+
+    def __init__(self, template, ignore_escape=False):
+        super(RequireCurlyTemplate, self).__init__(template)
+        if ignore_escape:
+            self.pattern = self.ignore_escape_pattern
+
+
+def substitute_variable(
+        v, local_vars, template='standard', ignore_escape=False):
+    """Perform shell/Perl-style variable substitution to a string 'v'
+
+    Every occurrence of '${name}' in the value of string 'v' is considered a
+    variable, and the variable is substituted by the value found in the
+    'local_vars' dictionary. A ValueError is raised for any variable not found
+    in 'local_vars'. This is only applied once unlike 'substitute_variables',
+    so nested variables will not be resolved.
+
+    If the 'standard' template is used, $name will also be substituted.
+
+    Escapes using '$${name}' are translated to '${name}'.
+
+    If the 'curly_braces_only' template is used and 'ignore_escape' is True,
+    escapes using '$${name}' will be ignored.
+
+    Parameters
+    ----------
+    v: string
+        string where each value will be substituted.
+    local_vars: dict
+        dict of variables
+    template: ('standard' | 'curly_braces_only')
+        whether to use 'standard' string.Template or RequireCurlyTemplate
+    ignore_escape: boolean
+        whether or not to ignore '$${name}' with RequireCurlyTemplate only
+    """
+    if template == 'curly_braces_only':
+        template_substitute = RequireCurlyTemplate(v, ignore_escape).substitute
+    elif template == 'standard':
+        template_substitute = string.Template(v).substitute
+    else:
+        raise ValueError(
+            'Template option must be "standard" or "curly_braces_only"'
+        )
+    return template_substitute(local_vars)

