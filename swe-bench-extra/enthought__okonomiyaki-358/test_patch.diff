diff --git a/okonomiyaki/runtimes/tests/test_runtime_info.py b/okonomiyaki/runtimes/tests/test_runtime_info.py
index 86ea23f..b074177 100644
--- a/okonomiyaki/runtimes/tests/test_runtime_info.py
+++ b/okonomiyaki/runtimes/tests/test_runtime_info.py
@@ -39,6 +39,30 @@ class TestPythonRuntimeInfoV1(unittest.TestCase):
         self.assertEqual(runtime_info.name, name)
         self.assertEqual(runtime_info.executable, r_executable)
 
+    def test_dollar_in_prefix(self):
+        # Given
+        name = u"test"
+        prefix = os.path.abspath(os.path.join(u"$foo", u"bar$"))
+
+        if sys.platform == "win32":
+            path = PYTHON_CPYTHON_2_7_10_WIN_X86_64
+            r_executable = os.path.join(prefix, "python.exe")
+        else:
+            path = PYTHON_CPYTHON_2_7_10_RH5_X86_64
+            r_executable = os.path.join(prefix, "bin", "python")
+
+        metadata = IRuntimeMetadata.factory_from_path(path)
+
+        # When
+        runtime_info = IRuntimeInfo.factory_from_metadata(
+            metadata, prefix, name
+        )
+
+        # Then
+        self.assertEqual(runtime_info.prefix, prefix)
+        self.assertEqual(runtime_info.name, name)
+        self.assertEqual(runtime_info.executable, r_executable)
+
     def test_json_round_trip(self):
         # Given
         path = PYTHON_CPYTHON_2_7_10_RH5_X86_64
diff --git a/okonomiyaki/utils/tests/test_misc.py b/okonomiyaki/utils/tests/test_misc.py
index 305f2a5..8ba2ba6 100644
--- a/okonomiyaki/utils/tests/test_misc.py
+++ b/okonomiyaki/utils/tests/test_misc.py
@@ -2,7 +2,7 @@ import sys
 import textwrap
 
 from ...errors import OkonomiyakiError
-from ..misc import parse_assignments, substitute_variables
+from ..misc import parse_assignments, substitute_variables, substitute_variable
 from ..py3compat import StringIO
 
 if sys.version_info < (2, 7):
@@ -46,10 +46,14 @@ class TestSubstitute(unittest.TestCase):
         }
 
         # When
-        rendered = substitute_variables(data, variables)
+        rendered_standard = substitute_variables(data, variables)
+        rendered_curly_only = substitute_variables(
+            data, variables, template='curly_braces_only'
+        )
 
         # Then
-        self.assertEqual(rendered, r_data)
+        self.assertEqual(rendered_standard, r_data)
+        self.assertEqual(rendered_curly_only, r_data)
 
     def test_recursive(self):
         # Given
@@ -69,8 +73,149 @@ class TestSubstitute(unittest.TestCase):
         }
 
         # When
-        variables = substitute_variables(variables, variables)
-        rendered = substitute_variables(data, variables)
+        variables_standard = substitute_variables(variables, variables)
+        variables_curly_only = substitute_variables(
+            variables, variables
+        )
+        rendered_standard = substitute_variables(data, variables_standard)
+        rendered_curly_only = substitute_variables(
+            data, variables_curly_only, template='curly_braces_only'
+        )
+
+        # Then
+        self.assertEqual(rendered_standard, r_data)
+        self.assertEqual(rendered_curly_only, r_data)
+
+    def test_escape(self):
+        # Given
+        data = {
+            "foo": "$${yolo}",
+            "bar": "$${foo}/bin",
+        }
+
+        variables = {
+            "yolo": "/foo/bar",
+        }
+        variables.update(data)
+
+        r_data = {
+            "foo": "$${yolo}",
+            "bar": "$${foo}/bin",
+        }
+        r_foo_ignore_escape = "$${yolo}"
+        r_foo_escape = "${yolo}"
+
+        # When
+        variables = substitute_variables(
+            variables, variables, template="curly_braces_only"
+        )
+        rendered = substitute_variables(
+            data, variables, template="curly_braces_only"
+        )
+        render_foo_ignore_escape = substitute_variable(
+            data["foo"], variables, template="curly_braces_only",
+            ignore_escape=True
+        )
+        render_foo_escape = substitute_variable(
+            data["foo"], variables, template="curly_braces_only"
+        )
 
         # Then
         self.assertEqual(rendered, r_data)
+        self.assertEqual(render_foo_ignore_escape, r_foo_ignore_escape)
+        self.assertEqual(render_foo_escape, r_foo_escape)
+
+    def test_without_curly_braces(self):
+        # Given
+        data = {
+            "foo": "$yolo",
+            "bar": "$foo/bin",
+        }
+
+        variables = {
+            "yolo": "/foo/bar",
+        }
+        variables.update(data)
+
+        r_data = {
+            "foo": "$yolo",
+            "bar": "$foo/bin",
+        }
+
+        # When
+        variables = substitute_variables(
+            variables, variables, template="curly_braces_only"
+        )
+        rendered = substitute_variables(
+            data, variables, template="curly_braces_only"
+        )
+
+        # Then
+        self.assertEqual(rendered, r_data)
+
+    def test_empty_substitution(self):
+        # Given
+        # Empty variable name is invalid
+        data = {
+            "foo": "${}yolo",
+            "bar": "/bin",
+        }
+
+        variables = {
+            "yolo": "/foo/bar",
+        }
+        variables.update(data)
+
+        # When/Then
+        with self.assertRaises(ValueError):
+            variables = substitute_variables(
+                variables, variables, template="curly_braces_only"
+            )
+            substitute_variables(
+                data, variables, template="curly_braces_only"
+            )
+
+    def test_invalid_substitution(self):
+        # Given
+        # idpattern = r'[_a-z][_a-z0-9]*'
+        # Characters not matching idpattern are invalid
+        data = {
+            "foo": "${yo-lo}",
+            "bar": "/bin",
+        }
+
+        variables = {
+            "yo-lo": "/foo/bar",
+        }
+        variables.update(data)
+
+        # When/Then
+        with self.assertRaises(ValueError):
+            variables = substitute_variables(
+                variables, variables, template="curly_braces_only"
+            )
+            substitute_variables(
+                data, variables, template="curly_braces_only"
+            )
+
+    def test_key_error_substitution(self):
+        # Given
+        # Nonexistent variable name gives key error
+        data = {
+            "foo": "${nonexistent}yolo",
+            "bar": "/bin",
+        }
+
+        variables = {
+            "yolo": "/foo/bar",
+        }
+        variables.update(data)
+
+        # When/Then
+        with self.assertRaises(KeyError):
+            variables = substitute_variables(
+                variables, variables, template="curly_braces_only"
+            )
+            substitute_variables(
+                data, variables, template="curly_braces_only"
+            )
