diff --git a/tests/test_types.py b/tests/test_types.py
index 2ab07e1..e652fb6 100644
--- a/tests/test_types.py
+++ b/tests/test_types.py
@@ -509,7 +509,7 @@ class TestList(NameDescriptionTestsMixin, RequiredTestsMixin, ValidationTestsMix
 
     def test_loading_non_list_value_raises_ValidationError(self):
         with pytest.raises(ValidationError) as exc_info:
-            List(String()).load('1, 2, 3')
+            List(String()).load(123)
         assert exc_info.value.messages == List.default_error_messages['invalid']
 
     def test_loading_list_value_with_items_of_incorrect_type_raises_ValidationError(self):
@@ -542,9 +542,13 @@ class TestList(NameDescriptionTestsMixin, RequiredTestsMixin, ValidationTestsMix
     def test_dumping_list_value(self):
         assert List(String()).dump(['foo', 'bar', 'baz']) == ['foo', 'bar', 'baz']
 
+    def test_dumping_sequence_value(self):
+        assert List(String()).dump(('foo', 'bar', 'baz')) == ['foo', 'bar', 'baz']
+        assert List(String()).dump('foobar') == ['f', 'o', 'o', 'b', 'a', 'r']
+
     def test_dumping_non_list_value_raises_ValidationError(self):
         with pytest.raises(ValidationError) as exc_info:
-            List(String()).dump('1, 2, 3')
+            List(String()).dump(123)
         assert exc_info.value.messages == List.default_error_messages['invalid']
 
     def test_dumping_list_value_with_items_of_incorrect_type_raises_ValidationError(self):
@@ -563,15 +567,15 @@ class TestList(NameDescriptionTestsMixin, RequiredTestsMixin, ValidationTestsMix
 class TestTuple(NameDescriptionTestsMixin, RequiredTestsMixin, ValidationTestsMixin):
     tested_type = partial(Tuple, [Integer(), Integer()])
     valid_data = [123, 456]
-    valid_value = [123, 456]
+    valid_value = (123, 456)
 
     def test_loading_tuple_with_values_of_same_type(self):
         assert Tuple([Integer(), Integer()]).load([123, 456]) == \
-            [123, 456]
+            (123, 456)
 
     def test_loading_tuple_with_values_of_different_type(self):
         assert Tuple([String(), Integer(), Boolean()]).load(['foo', 123, False]) == \
-            ['foo', 123, False]
+            ('foo', 123, False)
 
     def test_loading_non_tuple_value_raises_ValidationError(self):
         with pytest.raises(ValidationError) as exc_info:
@@ -596,23 +600,35 @@ class TestTuple(NameDescriptionTestsMixin, RequiredTestsMixin, ValidationTestsMi
         assert inner_type.load_context == context
 
     def test_dump_tuple(self):
-        assert Tuple([Integer(), Integer()]).dump([123, 456]) == [123, 456]
+        assert Tuple([String(), Integer()]).dump(('hello', 123)) == ['hello', 123]
+
+    def test_dump_sequence(self):
+        assert Tuple([String(), Integer()]).dump(['hello', 123]) == ['hello', 123]
 
     def test_dumping_non_tuple_raises_ValidationError(self):
         with pytest.raises(ValidationError) as exc_info:
-            Tuple(String()).dump('foo')
+            Tuple([String()]).dump(123)
         assert exc_info.value.messages == Tuple.default_error_messages['invalid']
 
+    def test_dumping_sequence_of_incorrect_length_raises_ValidationError(self):
+        with pytest.raises(ValidationError) as exc_info:
+            Tuple([String(), Integer()]).dump(['hello', 123, 456])
+        assert exc_info.value.messages == \
+            Tuple.default_error_messages['invalid_length'].format(
+                expected_length=2,
+                actual_length=3,
+            )
+
     def test_dumping_tuple_with_items_of_incorrect_type_raises_ValidationError(self):
         with pytest.raises(ValidationError) as exc_info:
-            Tuple([String(), String()]).dump([123, 456])
+            Tuple([String(), String()]).dump(('hello', 456))
         message = String.default_error_messages['invalid']
-        assert exc_info.value.messages == {0: message, 1: message}
+        assert exc_info.value.messages == {1: message}
 
     def test_dumping_tuple_passes_context_to_inner_type_dump(self):
         inner_type = SpyType()
         context = object()
-        Tuple([inner_type, inner_type]).dump(['foo','foo'], context)
+        Tuple([inner_type, inner_type]).dump(('foo','foo'), context)
         assert inner_type.dump_context == context
 
 
diff --git a/tests/test_validators.py b/tests/test_validators.py
index fa84610..5d6421a 100644
--- a/tests/test_validators.py
+++ b/tests/test_validators.py
@@ -318,7 +318,7 @@ class TestRegexp:
 class TestUnique:
     def test_raising_ValidationError_if_value_is_not_collection(self):
         with raises(ValidationError) as exc_info:
-            Unique()('foo')
+            Unique()(123)
         assert exc_info.value.messages == Unique.default_error_messages['invalid']
 
     def test_matching_empty_collection(self):
@@ -371,7 +371,7 @@ is_small = Predicate(lambda x: x <= 5, 'Value should be small')
 class TestEach:
     def test_raising_ValidationError_if_value_is_not_collection(self):
         with raises(ValidationError) as exc_info:
-            Each(lambda x: x)('foo')
+            Each(lambda x: x)(123)
         assert exc_info.value.messages == Each.default_error_messages['invalid']
 
     def test_matching_empty_collections(self):
