diff --git a/fairlearn/_input_validation.py b/fairlearn/_input_validation.py
index 03d5fe9..962b348 100644
--- a/fairlearn/_input_validation.py
+++ b/fairlearn/_input_validation.py
@@ -60,6 +60,7 @@ def _validate_and_reformat_input(X, y=None, expect_y=True, enforce_binary_labels
         the reformatting process, so mitigation methods should ideally use the input X instead
         of the returned X for training estimators and leave potential reformatting of X to the
         estimator.
+
     """
     if y is not None:
         # calling check_X_y with a 2-dimensional y causes a warning, so ensure it is 1-dimensional
@@ -128,16 +129,14 @@ def _merge_columns(feature_columns: np.ndarray) -> np.ndarray:
     -------
     numpy.ndarray
         One-dimensional array of merged columns
+
     """
     if not isinstance(feature_columns, np.ndarray):
         raise ValueError("Received argument of type {} instead of expected numpy.ndarray"
                          .format(type(feature_columns).__name__))
-    return np.apply_along_axis(
-        lambda row: _MERGE_COLUMN_SEPARATOR.join(
-            [str(row[i])
-                .replace("\\", "\\\\")  # escape backslash and separator
-                .replace(_MERGE_COLUMN_SEPARATOR,
-                         "\\" + _MERGE_COLUMN_SEPARATOR)
-                for i in range(len(row))]),
-        axis=1,
-        arr=feature_columns)
+    return pd.DataFrame(feature_columns) \
+        .apply(lambda row: _MERGE_COLUMN_SEPARATOR.join([str(row[i])
+               .replace("\\", "\\\\")  # escape backslash and separator
+               .replace(_MERGE_COLUMN_SEPARATOR,
+                        "\\" + _MERGE_COLUMN_SEPARATOR)
+               for i in range(len(row))]), axis=1).values
diff --git a/fairlearn/metrics/_metric_frame.py b/fairlearn/metrics/_metric_frame.py
index 42a12b8..bf0188b 100644
--- a/fairlearn/metrics/_metric_frame.py
+++ b/fairlearn/metrics/_metric_frame.py
@@ -16,6 +16,8 @@ logger = logging.getLogger(__name__)
 
 _SUBGROUP_COUNT_WARNING_THRESHOLD = 20
 
+_SF_DICT_CONVERSION_FAILURE = "DataFrame.from_dict() failed on sensitive features. " \
+    "Please ensure each array is strictly 1-D."
 _BAD_FEATURE_LENGTH = "Received a feature of length {0} when length {1} was expected"
 _SUBGROUP_COUNT_WARNING = "Found {0} subgroups. Evaluation may be slow"
 _FEATURE_LIST_NONSCALAR = "Feature lists must be of scalar types"
@@ -519,7 +521,10 @@ class MetricFrame:
             else:
                 raise ValueError(_FEATURE_LIST_NONSCALAR)
         elif isinstance(features, dict):
-            df = pd.DataFrame.from_dict(features)
+            try:
+                df = pd.DataFrame.from_dict(features)
+            except ValueError as ve:
+                raise ValueError(_SF_DICT_CONVERSION_FAILURE) from ve
             for i in range(len(df.columns)):
                 col_name = df.columns[i]
                 if not isinstance(col_name, str):

