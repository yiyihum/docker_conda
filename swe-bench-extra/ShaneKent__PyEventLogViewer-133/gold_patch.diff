diff --git a/winlogtimeline/collector/parser.py b/winlogtimeline/collector/parser.py
index 8ebc740..72276ff 100644
--- a/winlogtimeline/collector/parser.py
+++ b/winlogtimeline/collector/parser.py
@@ -379,6 +379,10 @@ def parser(raw, record):
     #     if user_parsers.get(record['event_source'], {}).get(record['event_id'], None) is not None:
     #         parse_record = user_parser
 
+    if get_event_data_section(raw) is False:
+        print('NOTE: A corrupted record was almost parsed with EventID ', record['event_id'])
+        return None
+
     if parse_record is not None:
         try:
             record = parse_record(raw, record)
@@ -400,3 +404,17 @@ def get_string(string):
     if isinstance(string, str):
         return string
     return string["#text"]
+
+
+def get_event_data_section(raw):
+    """
+    Helper to get the 'EventData' or 'UserData' key of the base XML for each record. If this fails, it is very likely that the
+    record is corrupted due to the log recovery software.
+    :param raw:
+    :return: whether or not the key exists.
+    """
+
+    if 'EventData' not in raw['Event'] and 'UserData' not in raw['Event']:
+        return False
+
+    return True
diff --git a/winlogtimeline/ui/ui.py b/winlogtimeline/ui/ui.py
index ab367b2..7f0c94b 100644
--- a/winlogtimeline/ui/ui.py
+++ b/winlogtimeline/ui/ui.py
@@ -52,22 +52,11 @@ class GUI(Tk):
         self.system = platform.system()
         self.changes_made = False
 
-        self.try_create_startup_window()
+        self.create_startup_window()
 
         self.__disable__()
         self.protocol('WM_DELETE_WINDOW', self.__destroy__)
 
-    def try_create_startup_window(self):
-        """
-        Checks the config to determine whether or not a start-up window should be created.
-        :return:
-        """
-        if self.program_config.get("startup_window", None):
-            window = StartupWindow(self)
-            window.attributes('-topmost', True)
-        else:
-            print("NOTE: Please delete your local 'config.json' file.")
-
     def update_status_bar(self, text):
         """
         Updates the status bar.
@@ -213,6 +202,25 @@ class GUI(Tk):
         t = Thread(target=callback)
         t.start()
 
+    def create_startup_window(self):
+        """
+        Helper function that checks the config.json file and decides whether or not to display the startup window.
+        :return:
+        """
+        startup_window = self.program_config.get("startup_window", None)
+
+        # Check to see if the config.json file has a startup_window key.
+        if startup_window is None:
+            # self.program_config.update({"startup_window": True})
+            self.program_config["startup_window"] = True
+            startup_window = True
+
+            util.data.write_config(self.program_config)
+
+        if startup_window:
+            window = StartupWindow(self)
+            window.attributes('-topmost', True)
+
     def __disable__(self):
         self.enabled = False
         if self.system != 'Darwin':
