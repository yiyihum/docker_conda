diff --git a/aqt/archives.py b/aqt/archives.py
index 0792044..bfc7bfb 100644
--- a/aqt/archives.py
+++ b/aqt/archives.py
@@ -373,11 +373,11 @@ class ToolArchives(QtArchives):
         self.tool_name = tool_name
         self.os_name = os_name
         self.logger = getLogger("aqt.archives")
-        self.is_require_version_match = version_str is not None
+        self.tool_version_str: Optional[str] = version_str
         super(ToolArchives, self).__init__(
             os_name=os_name,
             target=target,
-            version_str=version_str or "0.0.1",  # dummy value
+            version_str="0.0.1",  # dummy value
             arch=arch,
             base=base,
             timeout=timeout,
@@ -424,7 +424,7 @@ class ToolArchives(QtArchives):
 
         name = packageupdate.find("Name").text
         named_version = packageupdate.find("Version").text
-        if self.is_require_version_match and named_version != self.version:
+        if self.tool_version_str and named_version != self.tool_version_str:
             message = f"The package '{self.arch}' has the version '{named_version}', not the requested '{self.version}'."
             raise NoPackageFound(message, suggested_action=self.help_msg())
         package_desc = packageupdate.find("Description").text
diff --git a/aqt/installer.py b/aqt/installer.py
index 9beddca..cc42402 100644
--- a/aqt/installer.py
+++ b/aqt/installer.py
@@ -402,8 +402,9 @@ class Cli:
         if EXT7Z and sevenzip is None:
             # override when py7zr is not exist
             sevenzip = self._set_sevenzip(Settings.zipcmd)
-        version = getattr(args, "version", "0.0.1")  # for legacy aqt tool
-        Cli._validate_version_str(version)
+        version = getattr(args, "version", None)
+        if version is not None:
+            Cli._validate_version_str(version, allow_minus=True)
         keep = args.keep
         if args.base is not None:
             base = args.base
@@ -807,10 +808,23 @@ class Cli:
                 Settings.load_settings()
 
     @staticmethod
-    def _validate_version_str(version_str: str, *, allow_latest: bool = False, allow_empty: bool = False):
+    def _validate_version_str(
+        version_str: str, *, allow_latest: bool = False, allow_empty: bool = False, allow_minus: bool = False
+    ) -> None:
+        """
+        Raise CliInputError if the version is not an acceptable Version.
+
+        :param version_str: The version string to check.
+        :param allow_latest: If true, the string "latest" is acceptable.
+        :param allow_empty: If true, the empty string is acceptable.
+        :param allow_minus: If true, everything after the first '-' in the version will be ignored.
+                            This allows acceptance of versions like "1.2.3-0-202101020304"
+        """
         if (allow_latest and version_str == "latest") or (allow_empty and not version_str):
             return
         try:
+            if "-" in version_str and allow_minus:
+                version_str = version_str[: version_str.find("-")]
             Version(version_str)
         except ValueError as e:
             raise CliInputError(f"Invalid version: '{version_str}'! Please use the form '5.X.Y'.") from e
diff --git a/ci/generate_azure_pipelines_matrices.py b/ci/generate_azure_pipelines_matrices.py
index 8000029..79778a5 100644
--- a/ci/generate_azure_pipelines_matrices.py
+++ b/ci/generate_azure_pipelines_matrices.py
@@ -5,6 +5,7 @@ import collections
 import json
 import random
 from itertools import product
+from typing import Dict, Optional
 
 MIRRORS = [
     "https://ftp.jaist.ac.jp/pub/qtproject",
@@ -29,6 +30,7 @@ class BuildJob:
         output_dir=None,
         list_options=None,
         spec=None,
+        tool_options: Optional[Dict[str, str]] = None,
     ):
         self.command = command
         self.qt_version = qt_version
@@ -40,6 +42,7 @@ class BuildJob:
         self.mirror = mirror
         self.subarchives = subarchives
         self.list_options = list_options if list_options else {}
+        self.tool_options: Dict[str, str] = tool_options if tool_options else {}
         # `steps.yml` assumes that qt_version is the highest version that satisfies spec
         self.spec = spec
         self.output_dir = output_dir
@@ -276,6 +279,33 @@ linux_build_jobs.extend(
     ]
 )
 
+qt_creator_bin_path = "./Tools/QtCreator/bin/"
+qt_creator_mac_bin_path = "./Qt Creator.app/Contents/MacOS/"
+qt_ifw_bin_path = "./Tools/QtInstallerFramework/4.1/bin/"
+tool_options = {
+    "TOOL1_ARGS": "tools_qtcreator qt.tools.qtcreator",
+    "LIST_TOOL1_CMD": f"ls {qt_creator_bin_path}",
+    "TEST_TOOL1_CMD": f"{qt_creator_bin_path}qbs --version",
+    "TOOL2_ARGS": "tools_ifw",
+    "TEST_TOOL2_CMD": f"{qt_ifw_bin_path}archivegen --version",
+    "LIST_TOOL2_CMD": f"ls {qt_ifw_bin_path}",
+}
+# Mac Qt Creator is a .app, or "Package Bundle", so the path is changed:
+tool_options_mac = {
+    **tool_options,
+    "TEST_TOOL1_CMD": f'"{qt_creator_mac_bin_path}qbs" --version',
+    "LIST_TOOL1_CMD": f'ls "{qt_creator_mac_bin_path}"',
+}
+windows_build_jobs.append(
+    BuildJob("install-tool", "", "windows", "desktop", "", "", tool_options=tool_options)
+)
+linux_build_jobs.append(
+    BuildJob("install-tool", "", "linux", "desktop", "", "", tool_options=tool_options)
+)
+mac_build_jobs.append(
+    BuildJob("install-tool", "", "mac", "desktop", "", "", tool_options=tool_options_mac)
+)
+
 matrices = {}
 
 for platform_build_job in all_platform_build_jobs:
@@ -313,6 +343,12 @@ for platform_build_job in all_platform_build_jobs:
                 ("OUTPUT_DIR", build_job.output_dir if build_job.output_dir else ""),
                 ("QT_BINDIR", build_job.qt_bindir()),
                 ("WIN_QT_BINDIR", build_job.win_qt_bindir()),
+                ("TOOL1_ARGS", build_job.tool_options.get("TOOL1_ARGS", "")),
+                ("LIST_TOOL1_CMD", build_job.tool_options.get("LIST_TOOL1_CMD", "")),
+                ("TEST_TOOL1_CMD", build_job.tool_options.get("TEST_TOOL1_CMD", "")),
+                ("TOOL2_ARGS", build_job.tool_options.get("TOOL2_ARGS", "")),
+                ("LIST_TOOL2_CMD", build_job.tool_options.get("LIST_TOOL2_CMD", "")),
+                ("TEST_TOOL2_CMD", build_job.tool_options.get("TEST_TOOL2_CMD", "")),
             ]
         )
 
