diff --git a/beeline/test_trace.py b/beeline/test_trace.py
index 43beece..5033618 100644
--- a/beeline/test_trace.py
+++ b/beeline/test_trace.py
@@ -623,7 +623,7 @@ class TestSpan(unittest.TestCase):
 
 
 class TestPropagationHooks(unittest.TestCase):
-    def test_propagate_and_start_trace(self):
+    def test_propagate_and_start_trace_uses_honeycomb_header(self):
         # FIXME: Test basics, including error handling and custom hooks
 
         # implicitly tests finish_span
@@ -653,6 +653,61 @@ class TestPropagationHooks(unittest.TestCase):
         # ensure that there is no current trace
         self.assertIsNone(tracer._trace)
 
+    def test_propagate_and_start_trace_uses_w3c_header_as_fallback(self):
+        # implicitly tests finish_span
+        m_client = Mock()
+        # these values are used before sending
+        m_client.new_event.return_value.start_time = datetime.datetime.now()
+        m_client.new_event.return_value.sample_rate = 1
+        tracer = SynchronousTracer(m_client)
+
+        header_value = '00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-00'
+        req = DictRequest({
+            'traceparent': header_value,
+        })
+
+        span = tracer.propagate_and_start_trace(
+            context={'big': 'important_stuff'}, request=req)
+        self.assertEqual(tracer._trace.stack[0], span)
+        self.assertEqual(span.trace_id, "0af7651916cd43dd8448eb211c80319c")
+        self.assertEqual(span.parent_id, "b7ad6b7169203331")
+
+        tracer.finish_trace(span)
+
+        # ensure the event is sent
+        span.event.send_presampled.assert_called_once_with()
+        # ensure that there is no current trace
+        self.assertIsNone(tracer._trace)
+
+    def test_propagate_and_start_trace_uses_honeycomb_header_when_w3c_also_present(self):
+        # implicitly tests finish_span
+        m_client = Mock()
+        # these values are used before sending
+        m_client.new_event.return_value.start_time = datetime.datetime.now()
+        m_client.new_event.return_value.sample_rate = 1
+        tracer = SynchronousTracer(m_client)
+
+        w3c_value = '00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-00'
+        honeycomb_value = '1;dataset=flibble,trace_id=bloop,parent_id=scoop,context=e30K'
+        req = DictRequest({
+            'traceparent': w3c_value,
+            'x-honeycomb-trace': honeycomb_value
+        })
+
+        span = tracer.propagate_and_start_trace(
+            context={'big': 'important_stuff'}, request=req)
+        self.assertEqual(tracer._trace.stack[0], span)
+        self.assertEqual(span.trace_id, "bloop")
+        self.assertEqual(span.parent_id, "scoop")
+
+        tracer.finish_trace(span)
+        self.assertEqual(span.event.dataset, 'flibble')
+
+        # ensure the event is sent
+        span.event.send_presampled.assert_called_once_with()
+        # ensure that there is no current trace
+        self.assertIsNone(tracer._trace)
+
     def test_error_handling(self):
         class TestException(Exception):
             pass
