diff --git a/beeline/__init__.py b/beeline/__init__.py
index e6dce92..ed238fc 100644
--- a/beeline/__init__.py
+++ b/beeline/__init__.py
@@ -9,7 +9,7 @@ from libhoney import Client
 from beeline.trace import SynchronousTracer
 from beeline.version import VERSION
 from beeline import internal
-import beeline.propagation.honeycomb
+import beeline.propagation.default
 import sys
 # pyflakes
 assert internal
@@ -59,8 +59,8 @@ class Beeline(object):
                  max_concurrent_batches=10, max_batch_size=100, send_frequency=0.25,
                  block_on_send=False, block_on_response=False,
                  transmission_impl=None, sampler_hook=None, presend_hook=None,
-                 http_trace_parser_hook=beeline.propagation.honeycomb.http_trace_parser_hook,
-                 http_trace_propagation_hook=beeline.propagation.honeycomb.http_trace_propagation_hook,
+                 http_trace_parser_hook=beeline.propagation.default.http_trace_parser_hook,
+                 http_trace_propagation_hook=beeline.propagation.default.http_trace_propagation_hook,
                  debug=False):
 
         self.client = None
diff --git a/beeline/propagation/default.py b/beeline/propagation/default.py
new file mode 100644
index 0000000..633eecc
--- /dev/null
+++ b/beeline/propagation/default.py
@@ -0,0 +1,21 @@
+from beeline.propagation import honeycomb, w3c
+
+
+def http_trace_parser_hook(request):
+    """
+    Retrieves the propagation context out of the request. Uses the honeycomb header, with W3C header as fallback.
+    """
+    honeycomb_header_value = honeycomb.http_trace_parser_hook(request)
+    w3c_header_value = w3c.http_trace_parser_hook(request)
+    if honeycomb_header_value:
+        return honeycomb_header_value
+    else:
+        return w3c_header_value
+
+
+def http_trace_propagation_hook(propagation_context):
+    """
+    Given a propagation context, returns a dictionary of key value pairs that should be
+    added to outbound requests (usually HTTP headers). Uses the honeycomb format.
+    """
+    return honeycomb.http_trace_propagation_hook(propagation_context)
diff --git a/beeline/trace.py b/beeline/trace.py
index 7f5561e..06a5bd5 100644
--- a/beeline/trace.py
+++ b/beeline/trace.py
@@ -18,6 +18,7 @@ from contextlib import contextmanager
 from beeline.internal import log, stringify_exception
 
 import beeline.propagation
+import beeline.propagation.default
 import beeline.propagation.honeycomb
 
 MAX_INT32 = math.pow(2, 32) - 1
@@ -49,8 +50,8 @@ class Tracer(object):
 
         self.presend_hook = None
         self.sampler_hook = None
-        self.http_trace_parser_hook = beeline.propagation.honeycomb.http_trace_parser_hook
-        self.http_trace_propagation_hook = beeline.propagation.honeycomb.http_trace_propagation_hook
+        self.http_trace_parser_hook = beeline.propagation.default.http_trace_parser_hook
+        self.http_trace_propagation_hook = beeline.propagation.default.http_trace_propagation_hook
 
     @contextmanager
     def __call__(self, name, trace_id=None, parent_id=None):
