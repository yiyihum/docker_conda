diff --git a/src/labels/cli.py b/src/labels/cli.py
index 96c9a85..acf2150 100644
--- a/src/labels/cli.py
+++ b/src/labels/cli.py
@@ -6,7 +6,7 @@ import typing
 import click
 from requests.auth import HTTPBasicAuth
 
-from labels import __version__
+from labels import __version__, utils
 from labels.exceptions import LabelsException
 from labels.github import Client, Label
 from labels.io import write_labels, read_labels
@@ -50,8 +50,8 @@ def labels(ctx, username: str, token: str, verbose: bool) -> None:
 
 @labels.command("fetch")
 @click.pass_obj
-@click.option("-o", "--owner", help="GitHub owner name", type=str, required=True)
-@click.option("-r", "--repo", help="GitHub repository name", type=str, required=True)
+@click.option("-o", "--owner", help="GitHub owner name", type=str)
+@click.option("-r", "--repo", help="GitHub repository name", type=str)
 @click.option(
     "-f",
     "--filename",
@@ -60,13 +60,22 @@ def labels(ctx, username: str, token: str, verbose: bool) -> None:
     type=click.Path(),
     required=True,
 )
-def fetch_cmd(client: Client, owner: str, repo: str, filename: str) -> None:
+def fetch_cmd(
+    client: Client,
+    owner: typing.Optional[str],
+    repo: typing.Optional[str],
+    filename: str
+) -> None:
     """Fetch labels for a GitHub repository.
 
     This will write the labels information to disk to the specified filename.
     """
     try:
-        labels = client.list_labels(owner, repo)
+        inferred_owner, inferred_repo = utils.get_owner_and_repo_from_cwd()
+        labels = client.list_labels(
+            owner or inferred_owner,
+            repo or inferred_repo
+        )
     except LabelsException as exc:
         click.echo(str(exc))
         sys.exit(1)
@@ -79,8 +88,8 @@ def fetch_cmd(client: Client, owner: str, repo: str, filename: str) -> None:
 
 @labels.command("sync")
 @click.pass_obj
-@click.option("-o", "--owner", help="GitHub owner name", type=str, required=True)
-@click.option("-r", "--repo", help="GitHub repository name", type=str, required=True)
+@click.option("-o", "--owner", help="GitHub owner name", type=str)
+@click.option("-r", "--repo", help="GitHub repository name", type=str)
 @click.option("-n", "--dryrun", help="Do not modify remote labels", is_flag=True)
 @click.option(
     "-f",
@@ -91,7 +100,11 @@ def fetch_cmd(client: Client, owner: str, repo: str, filename: str) -> None:
     required=True,
 )
 def sync_cmd(
-    client: Client, owner: str, repo: str, filename: str, dryrun: bool
+    client: Client,
+    owner: typing.Optional[str],
+    repo: typing.Optional[str],
+    filename: str,
+    dryrun: bool
 ) -> None:
     """Sync labels with a GitHub repository.
 
@@ -105,6 +118,10 @@ def sync_cmd(
 
     local_labels = read_labels(filename)
 
+    inferred_owner, inferred_repo = utils.get_owner_and_repo_from_cwd()
+    owner = owner or inferred_owner
+    repo = repo or inferred_repo
+
     try:
         remote_labels = {l.name: l for l in client.list_labels(owner, repo)}
     except LabelsException as exc:
diff --git a/src/labels/utils.py b/src/labels/utils.py
new file mode 100644
index 0000000..2b82057
--- /dev/null
+++ b/src/labels/utils.py
@@ -0,0 +1,21 @@
+import re
+import subprocess
+import typing
+
+
+def get_owner_and_repo_from_cwd() -> typing.Tuple[str, str]:
+    """Return the owner and name of the remote named origin in the cwd."""
+    origin_url = (
+        subprocess.check_output(["git", "remote", "get-url", "origin"]).decode().strip()
+    )
+    return _extract_o_and_r(origin_url)
+
+
+def _extract_o_and_r(url: str) -> typing.Tuple[str, str]:
+    """Return the owner and repo name of a remote given its SSH or HTTPS url.
+
+    HTTPS url format -> 'https://github.com/user/repo.git'
+    SSH   url format -> 'git@github.com:user/repo.git'
+    """
+    parts = re.split(r"[@/:.]+", url)
+    return (parts[-3], parts[-2])
