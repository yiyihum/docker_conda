diff --git a/tests/test_generators/test_docgen.py b/tests/test_generators/test_docgen.py
index e771bf45..d27b506d 100644
--- a/tests/test_generators/test_docgen.py
+++ b/tests/test_generators/test_docgen.py
@@ -32,8 +32,38 @@ class DocGeneratorTestCase(unittest.TestCase):
         """ Tests basic document generator functionality  """
         gen = DocGenerator(SCHEMA, mergeimports=True, no_types_dir=True)
         md = gen.serialize(directory=MD_DIR)
+        # test class docs
         assert_mdfile_contains('Organization.md', 'Organization', after='Inheritance')
-        # TODO: add more tests
+        assert_mdfile_contains('Organization.md', '[aliases](aliases.md)', after='Slots')
+        assert_mdfile_contains('Organization.md',
+                               'URI: [ks:Organization](https://w3id.org/linkml/tests/kitchen_sink/Organization)',
+                               after='Class: Organization')
+        assert_mdfile_contains('Organization.md',
+                               'from_schema: https://w3id.org/linkml/tests/kitchen_sink',
+                               after='Class: Organization')
+        assert_mdfile_contains('Organization.md',
+                               'slot_uri: skos:altLabel',
+                               after='Induced')
+        # test type docs
+        assert_mdfile_contains('PhoneNumberType.md',
+                               'URI: http://www.w3.org/2001/XMLSchema#string',
+                               after='PhoneNumberType')
+        # test enum docs
+        assert_mdfile_contains('EmploymentEventType.md',
+                               'codes for different kinds of employment/HR related events',
+                               after='EmploymentEventType')
+        assert_mdfile_contains('EmploymentEventType.md',
+                               'PROMOTION | bizcodes:003 | promotion event',
+                               after='Permissible Values')
+        # test slot docs
+        assert_mdfile_contains('aliases.md',
+                               'http://www.w3.org/2004/02/skos/core#altLabel',
+                               after='aliases')
+        # test index docs
+        assert_mdfile_contains('aliases.md',
+                               'http://www.w3.org/2004/02/skos/core#altLabel',
+                               after='aliases')
+
 
     def test_custom_directory(self):
         """
diff --git a/tests/test_utils/input/data_example.yaml b/tests/test_utils/input/data_example.yaml
new file mode 100644
index 00000000..6cf30063
--- /dev/null
+++ b/tests/test_utils/input/data_example.yaml
@@ -0,0 +1,9 @@
+persons:
+  P:1:
+    first_name: first1
+    last_name: last1
+    age_in_years: 10
+  P:2:
+    first_name: first2
+    last_name: last2
+    age_in_months: 240
diff --git a/tests/test_utils/input/schema_with_inference.yaml b/tests/test_utils/input/schema_with_inference.yaml
new file mode 100644
index 00000000..c2751ba4
--- /dev/null
+++ b/tests/test_utils/input/schema_with_inference.yaml
@@ -0,0 +1,148 @@
+id: https://w3id.org/linkml/examples/inference
+title: inference example
+name: inference
+description: This demonstrates the use of inference
+license: https://creativecommons.org/publicdomain/zero/1.0/
+
+prefixes:
+  linkml: https://w3id.org/linkml/
+  ex: https://w3id.org/linkml/examples/inference/
+  skos: http://www.w3.org/2004/02/skos/core#
+  pav: http://purl.org/pav/
+  schema: http://schema.org/
+  sh: https://w3id.org/shacl/
+  P: http://example.org/
+
+default_prefix: ex
+default_range: string
+
+default_curi_maps:
+    - semweb_context
+
+imports:
+  - linkml:types
+
+
+#==================================
+# Slots                           #
+#==================================
+slots:
+  id:
+    identifier: true
+  name:
+    description: name
+  synonyms:
+    multivalued: true
+  full_name:
+    string_serialization: "{first_name} {last_name}"
+  first_name:
+  last_name:
+  age_in_years:
+    range: decimal
+    minimum_value: 0
+    maximum_value: 999
+    equals_expression: "{age_in_months} / 12"
+  age_in_months:
+    range: decimal
+    equals_expression: "{age_in_years} * 12"
+  is_juvenile:
+    range: boolean
+    equals_expression: "{age_in_years} < 18"
+  age_category:
+    range: AgeEnum
+    equals_expression: "case( ({age_in_years} < 2, 'infant'), ({age_in_years} < 18, 'juvenile'), ({age_in_years} > 18, 'adult') )"
+  prohibited:
+    equals_expression: "__import__('os').listdir()"
+  street:
+  city:
+  verbatim:
+  primary_address:
+    range: Address
+  description:
+  summary:
+
+    
+#==================================
+# Classes                         #
+#==================================
+
+classes:
+  Term:
+    slots:
+      - id
+      - name
+      - synonyms
+
+  Person:
+    slots:
+      - id
+      - first_name
+      - last_name
+      - full_name
+      - age_in_years
+      - age_in_months
+      - primary_address
+      - description
+      - is_juvenile
+      - age_category
+    slot_usage:
+      description:
+        string_serialization: |-
+          {last_name}, {first_name}, {primary_address}
+      summary:
+        equals_expression: |-
+          {first_name} + {last_name} + ' ' + ('AGE: '+str(age_in_years) if age_in_years else 'NO AGE SPECIFIED')
+    rules:
+      preconditions:
+        slot_conditions:
+          primary_address:
+      postconditions:
+        slot_conditions:
+          description:
+            string_serialization: |-
+              {last_name}, {first_name}, {primary_address}
+              {primary_address.street}
+              {primary_address.city}
+
+  Evil:
+    slots:
+      - prohibited
+
+  Relationship:
+    attributes:
+      person1:
+        range: Person
+        inlined: true
+      person2:
+        range: Person
+        inlined: true
+      type:
+      description:
+        string_serialization: |-
+          "{person1.last_name}, {person1.first_name}" IS {type} "{person2.last_name}, {person2.first_name}"
+      description2:
+        string_serialization: |-
+          "{person1.full_name}" IS {type} "{person2.full_name}"
+
+  Address:
+    slots:
+      - street
+      - city
+    string_serialization: |-
+      {street}
+      {city}
+
+  Container:
+    tree_root: true
+    attributes:
+      persons:
+        range: Person
+        inlined: true
+        multivalued: true
+
+enums:
+  AgeEnum:
+    permissible_values:
+      infant:
+      juvenile:
+      adult:
diff --git a/tests/test_utils/test_converter.py b/tests/test_utils/test_converter.py
new file mode 100644
index 00000000..ee9a8b16
--- /dev/null
+++ b/tests/test_utils/test_converter.py
@@ -0,0 +1,53 @@
+import json
+import unittest
+
+from click.testing import CliRunner
+from tests.test_utils.environment import env
+from linkml.utils.converter import cli
+
+SCHEMA = env.input_path('schema_with_inference.yaml')
+DATA_IN = env.input_path('data_example.yaml')
+JSON_OUT = env.expected_path('data_example.out.json')
+YAML_OUT = env.expected_path('data_example.out.yaml')
+RDF_OUT = env.expected_path('data_example.out.ttl')
+
+
+class TestCommandLineInterface(unittest.TestCase):
+
+    def setUp(self) -> None:
+        runner = CliRunner(mix_stderr=False)
+        self.runner = runner
+
+    def test_help(self):
+        result = self.runner.invoke(cli, ['--help'])
+        out = result.stdout
+        err = result.stderr
+        #print(err)
+        self.assertIn('INPUT', out)
+        #self.assertEqual(0, result.exit_code)
+
+    def test_infer_and_convert(self):
+        """
+        Tests using the --infer option to add missing values, and also roundtripping
+        through yaml->json->yaml->rdf->json
+        """
+        result = self.runner.invoke(cli, ['--infer', '-s', SCHEMA, DATA_IN, '-o', JSON_OUT])
+        result = self.runner.invoke(cli, ['-s', SCHEMA, JSON_OUT, '-t', 'yaml', '-o', YAML_OUT])
+        result = self.runner.invoke(cli, ['-s', SCHEMA, YAML_OUT, '-t', 'rdf', '-o', RDF_OUT])
+        result = self.runner.invoke(cli, ['-s', SCHEMA, RDF_OUT, '-t', 'rdf', '-o', JSON_OUT])
+        with open(JSON_OUT) as file:
+            obj = json.load(file)
+            persons = obj['persons']
+            p1 = persons['P:1']
+            p2 = persons['P:2']
+            self.assertTrue(p1['is_juvenile'])
+            self.assertTrue('is_juvenile' not in p2)
+            self.assertEqual(p1['age_in_years'], 10)
+            self.assertEqual(p1['age_in_months'], 120)
+            self.assertEqual(p1['age_category'], "juvenile")
+            self.assertEqual(p1['full_name'], "first1 last1")
+            self.assertEqual(p2['age_in_years'], 20)
+            self.assertEqual(p2['age_in_months'], 240)
+            self.assertEqual(p2['age_category'], "adult")
+            self.assertEqual(p2['full_name'], "first2 last2")
+
