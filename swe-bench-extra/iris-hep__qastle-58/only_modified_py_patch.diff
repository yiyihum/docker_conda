diff --git a/qastle/linq_util.py b/qastle/linq_util.py
index df6eb79..a4922ec 100644
--- a/qastle/linq_util.py
+++ b/qastle/linq_util.py
@@ -23,6 +23,10 @@ class Last(ast.AST):
     _fields = ['source']
 
 
+class ElementAt(ast.AST):
+    _fields = ['source', 'index']
+
+
 class Aggregate(ast.AST):
     _fields = ['source', 'seed', 'func']
 
@@ -60,6 +64,7 @@ linq_operator_names = ('Where',
                        'SelectMany',
                        'First',
                        'Last',
+                       'ElementAt',
                        'Aggregate',
                        'Count',
                        'Max',
@@ -124,6 +129,10 @@ class InsertLINQNodesTransformer(ast.NodeTransformer):
             if len(args) != 0:
                 raise SyntaxError('Last() call must have zero arguments')
             return Last(source=self.visit(source))
+        elif function_name == 'ElementAt':
+            if len(args) != 1:
+                raise SyntaxError('ElementAt() call must have exactly one argument')
+            return ElementAt(source=self.visit(source), index=self.visit(args[0]))
         elif function_name == 'Aggregate':
             if len(args) != 2:
                 raise SyntaxError('Aggregate() call must have exactly two arguments; found'
diff --git a/qastle/transform.py b/qastle/transform.py
index e13b16d..da7dab8 100644
--- a/qastle/transform.py
+++ b/qastle/transform.py
@@ -1,4 +1,4 @@
-from .linq_util import (Where, Select, SelectMany, First, Last, Aggregate, Count, Max,
+from .linq_util import (Where, Select, SelectMany, First, Last, ElementAt, Aggregate, Count, Max,
                         Min, Sum, Zip, OrderBy, Choose)
 from .ast_util import wrap_ast, unwrap_ast
 
@@ -186,6 +186,11 @@ class PythonASTToTextASTTransformer(ast.NodeVisitor):
     def visit_Last(self, node):
         return self.make_composite_node_string('Last', self.visit(node.source))
 
+    def visit_ElementAt(self, node):
+        return self.make_composite_node_string('ElementAt',
+                                               self.visit(node.source),
+                                               self.visit(node.index))
+
     def visit_Aggregate(self, node):
         return self.make_composite_node_string('Aggregate',
                                                self.visit(node.source),
@@ -421,6 +426,11 @@ class TextASTToPythonASTTransformer(lark.Transformer):
                 raise SyntaxError('Last node must have one field; found ' + str(len(fields)))
             return Last(source=fields[0])
 
+        elif node_type == 'ElementAt':
+            if len(fields) != 2:
+                raise SyntaxError('ElementAt node must have two fields; found ' + str(len(fields)))
+            return ElementAt(source=fields[0], index=fields[1])
+
         elif node_type == 'Aggregate':
             if len(fields) != 3:
                 raise SyntaxError('Aggregate node must have three fields; found '

