diff --git a/tests/test_ast_language.py b/tests/test_ast_language.py
index b83cb8d..a9fdec9 100644
--- a/tests/test_ast_language.py
+++ b/tests/test_ast_language.py
@@ -180,6 +180,19 @@ def test_First():
                                               '(First data_source)')
 
 
+def test_Last():
+    first_node = Last(source=unwrap_ast(ast.parse('data_source')))
+    assert_equivalent_python_ast_and_text_ast(wrap_ast(first_node),
+                                              '(Last data_source)')
+
+
+def test_ElementAt():
+    first_node = ElementAt(source=unwrap_ast(ast.parse('data_source')),
+                           index=unwrap_ast(ast.parse('2')))
+    assert_equivalent_python_ast_and_text_ast(wrap_ast(first_node),
+                                              '(ElementAt data_source 2)')
+
+
 def test_Aggregate():
     aggregate_node = Aggregate(source=unwrap_ast(ast.parse('data_source')),
                                seed=unwrap_ast(ast.parse('0')),
@@ -231,9 +244,3 @@ def test_Choose():
                          n=unwrap_ast(ast.parse('2')))
     assert_equivalent_python_ast_and_text_ast(wrap_ast(choose_node),
                                               '(Choose data_source 2)')
-
-
-def test_Last():
-    first_node = Last(source=unwrap_ast(ast.parse('data_source')))
-    assert_equivalent_python_ast_and_text_ast(wrap_ast(first_node),
-                                              '(Last data_source)')
diff --git a/tests/test_linq_util.py b/tests/test_linq_util.py
index cfc7e9c..7ce2580 100644
--- a/tests/test_linq_util.py
+++ b/tests/test_linq_util.py
@@ -150,6 +150,46 @@ def test_first_bad():
         insert_linq_nodes(ast.parse('the_source.First(None)'))
 
 
+def test_last():
+    initial_ast = ast.parse("the_source.Last()")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(Last(source=unwrap_ast(ast.parse('the_source'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_last_composite():
+    initial_ast = ast.parse("the_source.First().Last()")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(Last(source=First(source=unwrap_ast(ast.parse('the_source')))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_last_bad():
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.Last(None)'))
+
+
+def test_elementat():
+    initial_ast = ast.parse("the_source.ElementAt(2)")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(ElementAt(source=unwrap_ast(ast.parse('the_source')),
+                                      index=unwrap_ast(ast.parse('2'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_elementat_composite():
+    initial_ast = ast.parse("the_source.First().ElementAt(2)")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(ElementAt(source=First(source=unwrap_ast(ast.parse('the_source'))),
+                                      index=unwrap_ast(ast.parse('2'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_elementat_bad():
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.ElementAt()'))
+
+
 def test_aggregate():
     initial_ast = ast.parse("the_source.Aggregate(0, 'lambda total, next: total + next')")
     final_ast = insert_linq_nodes(initial_ast)
@@ -316,22 +356,3 @@ def test_choose_composite():
 def test_choose_bad():
     with pytest.raises(SyntaxError):
         insert_linq_nodes(ast.parse('the_source.Choose()'))
-
-
-def test_last():
-    initial_ast = ast.parse("the_source.Last()")
-    final_ast = insert_linq_nodes(initial_ast)
-    expected_ast = wrap_ast(Last(source=unwrap_ast(ast.parse('the_source'))))
-    assert_ast_nodes_are_equal(final_ast, expected_ast)
-
-
-def test_last_composite():
-    initial_ast = ast.parse("the_source.Last().Last()")
-    final_ast = insert_linq_nodes(initial_ast)
-    expected_ast = wrap_ast(Last(source=Last(source=unwrap_ast(ast.parse('the_source')))))
-    assert_ast_nodes_are_equal(final_ast, expected_ast)
-
-
-def test_last_bad():
-    with pytest.raises(SyntaxError):
-        insert_linq_nodes(ast.parse('the_source.Last(None)'))
