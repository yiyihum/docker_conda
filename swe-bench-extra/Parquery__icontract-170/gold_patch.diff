diff --git a/icontract/_recompute.py b/icontract/_recompute.py
index 00faac1..0427994 100644
--- a/icontract/_recompute.py
+++ b/icontract/_recompute.py
@@ -88,6 +88,44 @@ class Visitor(ast.NodeVisitor):
             self.recomputed_values[node] = node.value
             return node.value
 
+    if sys.version_info >= (3, 6):
+
+        def visit_FormattedValue(self, node: ast.FormattedValue) -> Any:
+            """Format the node value."""
+            fmt = ['{']
+            # See https://docs.python.org/3/library/ast.html#ast.FormattedValue for these
+            # constants
+            if node.conversion == -1:
+                pass
+            elif node.conversion == 115:
+                fmt.append('!s')
+            elif node.conversion == 114:
+                fmt.append('!r')
+            elif node.conversion == 97:
+                fmt.append('!a')
+            else:
+                raise NotImplementedError("Unhandled conversion of a formatted value node {!r}: {}".format(
+                    node, node.conversion))
+
+            if node.format_spec is not None:
+                fmt.append(":")
+
+                # The following assert serves only documentation purposes so that the code is easier to follow.
+                assert isinstance(node.format_spec, ast.JoinedStr)
+                fmt.append(self.visit(node.format_spec))
+
+            fmt.append('}')
+
+            recomputed_value = self.visit(node.value)
+            return ''.join(fmt).format(recomputed_value)
+
+        def visit_JoinedStr(self, node: ast.JoinedStr) -> Any:
+            """Visit the values and concatenate them."""
+            joined_str = ''.join(self.visit(value_node) for value_node in node.values)
+
+            self.recomputed_values[node] = joined_str
+            return joined_str
+
     # pylint: enable=no-member
 
     def visit_List(self, node: ast.List) -> List[Any]:
diff --git a/icontract/_represent.py b/icontract/_represent.py
index 934b052..f3fb8ee 100644
--- a/icontract/_represent.py
+++ b/icontract/_represent.py
@@ -55,6 +55,17 @@ class Visitor(ast.NodeVisitor):
         self.reprs = dict()  # type: MutableMapping[str, str]
         self._atok = atok
 
+    if sys.version_info >= (3, 6):
+        # pylint: disable=no-member
+        def visit_JoinedStr(self, node: ast.JoinedStr) -> None:
+            """Show the whole joined strings without descending into the values."""
+            if node in self._recomputed_values:
+                value = self._recomputed_values[node]
+
+                if _representable(value=value):
+                    text = self._atok.get_text(node)
+                    self.reprs[text] = value
+
     def visit_Name(self, node: ast.Name) -> None:
         """
         Resolve the name from the variable look-up and the built-ins.
diff --git a/precommit.py b/precommit.py
index 926809e..2e9fc99 100755
--- a/precommit.py
+++ b/precommit.py
@@ -57,14 +57,10 @@ def main() -> int:
     env['ICONTRACT_SLOW'] = 'true'
 
     # yapf: disable
-    unittest_targets = ['tests']
-    if sys.version_info > (3, 8):
-        unittest_targets.append('tests_3_8')
-
     subprocess.check_call(
         ["coverage", "run",
          "--source", "icontract",
-         "-m", "unittest", "discover"] + unittest_targets,
+         "-m", "unittest", "discover"],
         cwd=str(repo_root),
         env=env)
     # yapf: enable
