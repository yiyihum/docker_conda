diff --git a/tests/test_run_method.py b/tests/test_run_method.py
index d059e30..047b3df 100644
--- a/tests/test_run_method.py
+++ b/tests/test_run_method.py
@@ -87,54 +87,21 @@ def test_run_return_status(method, result, checker_cls):
     def meth(self):
         return result
 
-    def ok(self):
-        return Result.OK
-
-    if method == "getflag":
-        setattr(checker_cls, "putflag", ok)
-        c = checker_cls("putflag")
-        c.run()
-    elif method == "getnoise":
-        setattr(checker_cls, "putnoise", ok)
-        c = checker_cls("putnoise")
-        c.run()
-
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
-    res = c.run()
+    with pytest.warns(
+        None
+    ):  # ignore warnings caused by the deprecation of returning Results
+        res = c.run()
     assert isinstance(res, CheckerResult)
     assert res.result == result
 
 
-@pytest.mark.parametrize("method", ["getflag", "getnoise"])
-def test_run_get_original_run_failed(method, checker_cls):
-    def meth(self):
-        assert False  # this function should never be called
-
-    setattr(checker_cls, method, meth)
-    c = checker_cls(method)
-    res = c.run()
-    assert isinstance(res, CheckerResult)
-    assert res.result == Result.OK
-
-
 @pytest.mark.parametrize("method", CHECKER_METHODS)
 def test_raise_broken_service_exception(method, checker_cls):
     def meth(self):
         raise BrokenServiceException("msg123")
 
-    def ok(self):
-        return Result.OK
-
-    if method == "getflag":
-        setattr(checker_cls, "putflag", ok)
-        c = checker_cls("putflag")
-        c.run()
-    elif method == "getnoise":
-        setattr(checker_cls, "putnoise", ok)
-        c = checker_cls("putnoise")
-        c.run()
-
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
     res = c.run()
@@ -148,18 +115,6 @@ def test_raise_offline_exception(method, checker_cls):
     def meth(self):
         raise OfflineException("msg123")
 
-    def ok(self):
-        return Result.OK
-
-    if method == "getflag":
-        setattr(checker_cls, "putflag", ok)
-        c = checker_cls("putflag")
-        c.run()
-    elif method == "getnoise":
-        setattr(checker_cls, "putnoise", ok)
-        c = checker_cls("putnoise")
-        c.run()
-
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
     res = c.run()
@@ -173,18 +128,6 @@ def test_raise_unhandled_exception(method, checker_cls):
     def meth(self):
         raise Exception("msg123")
 
-    def ok(self):
-        return Result.OK
-
-    if method == "getflag":
-        setattr(checker_cls, "putflag", ok)
-        c = checker_cls("putflag")
-        c.run()
-    elif method == "getnoise":
-        setattr(checker_cls, "putnoise", ok)
-        c = checker_cls("putnoise")
-        c.run()
-
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
     res = c.run()
@@ -200,18 +143,6 @@ def test_invalid_return(method, checker_cls):
     def meth(self):
         return "lolthisisinvalid"
 
-    def ok(self):
-        return Result.OK
-
-    if method == "getflag":
-        setattr(checker_cls, "putflag", ok)
-        c = checker_cls("putflag")
-        c.run()
-    elif method == "getnoise":
-        setattr(checker_cls, "putnoise", ok)
-        c = checker_cls("putnoise")
-        c.run()
-
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
     res = c.run()
@@ -236,18 +167,6 @@ def test_requests_mumble(method, exc, checker_cls):
     def meth(self):
         raise exc()
 
-    def ok(self):
-        return Result.OK
-
-    if method == "getflag":
-        setattr(checker_cls, "putflag", ok)
-        c = checker_cls("putflag")
-        c.run()
-    elif method == "getnoise":
-        setattr(checker_cls, "putnoise", ok)
-        c = checker_cls("putnoise")
-        c.run()
-
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
     res = c.run()
@@ -275,6 +194,21 @@ def test_offline_exceptions(method, exc, checker_cls):
     def meth(self):
         raise exc()
 
+    setattr(checker_cls, method, meth)
+    c = checker_cls(method)
+    res = c.run()
+    assert isinstance(res, CheckerResult)
+    assert res.result == Result.OFFLINE
+    assert res.message
+
+
+@pytest.mark.parametrize(
+    "method", CHECKER_METHODS,
+)
+def test_no_warn_deprecated_return_ok(method, checker_cls):
+    def meth(self):
+        return Result.OK
+
     def ok(self):
         return Result.OK
 
@@ -289,7 +223,36 @@ def test_offline_exceptions(method, exc, checker_cls):
 
     setattr(checker_cls, method, meth)
     c = checker_cls(method)
-    res = c.run()
+    with pytest.warns(None) as record:
+        res = c.run()
     assert isinstance(res, CheckerResult)
-    assert res.result == Result.OFFLINE
-    assert res.message
+    assert res.result == Result.OK
+    assert len(record) == 0
+
+
+@pytest.mark.parametrize(
+    "method, ret",
+    product(CHECKER_METHODS, [Result.MUMBLE, Result.OFFLINE, Result.INTERNAL_ERROR]),
+)
+def test_warn_deprecated_return_value(method, ret, checker_cls):
+    def meth(self):
+        return ret
+
+    def ok(self):
+        return Result.OK
+
+    if method == "getflag":
+        setattr(checker_cls, "putflag", ok)
+        c = checker_cls("putflag")
+        c.run()
+    elif method == "getnoise":
+        setattr(checker_cls, "putnoise", ok)
+        c = checker_cls("putnoise")
+        c.run()
+
+    setattr(checker_cls, method, meth)
+    c = checker_cls(method)
+    with pytest.deprecated_call():
+        res = c.run()
+    assert isinstance(res, CheckerResult)
+    assert res.result == ret
