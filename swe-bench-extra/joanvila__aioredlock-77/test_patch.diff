diff --git a/tests/ut/conftest.py b/tests/ut/conftest.py
index 7acbe39..7004ad1 100644
--- a/tests/ut/conftest.py
+++ b/tests/ut/conftest.py
@@ -12,8 +12,19 @@ async def dummy_sleep(seconds):
 
 
 @pytest.fixture
-def locked_lock():
-    return Lock(None, "resource_name", 1, -1, True)
+def locked_lock(lock_manager_redis_patched):
+    lock_manager, _ = lock_manager_redis_patched
+    lock = Lock(lock_manager, "resource_name", 1, -1, True)
+    lock_manager._locks[lock.resource] = lock
+    return lock
+
+
+@pytest.fixture
+def unlocked_lock(lock_manager_redis_patched):
+    lock_manager, _ = lock_manager_redis_patched
+    lock = Lock(lock_manager, "other_resource_name", 1, -1, False)
+    lock_manager._locks[lock.resource] = lock
+    return lock
 
 
 @pytest.fixture
diff --git a/tests/ut/test_algorithm.py b/tests/ut/test_algorithm.py
index f4ef3ed..e2655c0 100644
--- a/tests/ut/test_algorithm.py
+++ b/tests/ut/test_algorithm.py
@@ -344,3 +344,13 @@ class TestAioredlock:
 
             await lock_manager.unlock(lock)
             assert lock.valid is False
+
+    @pytest.mark.asyncio
+    async def test_get_active_locks(self, lock_manager_redis_patched, locked_lock, unlocked_lock):
+        lock_manager, redis = lock_manager_redis_patched
+        redis.is_locked.return_value = True
+
+        locks = await lock_manager.get_active_locks()
+
+        assert locked_lock in locks
+        assert unlocked_lock not in locks
