diff --git a/tests/test_jsonschema/test_jsonschema_generation.py b/tests/test_jsonschema/test_jsonschema_generation.py
index 5e88282..6b5404d 100644
--- a/tests/test_jsonschema/test_jsonschema_generation.py
+++ b/tests/test_jsonschema/test_jsonschema_generation.py
@@ -118,6 +118,30 @@ if PY_39_MIN:
 Ts = TypeVarTuple("Ts")
 
 
+def dummy_serialize_as_str(_: Any) -> str:
+    return "dummy"  # pragma no cover
+
+
+class ThirdPartyType:
+    pass
+
+
+@dataclass
+class DataClassWithThirdPartyType:
+    a: ThirdPartyType
+    b: Optional[ThirdPartyType]
+    c: ThirdPartyType = ThirdPartyType()
+    d: Optional[ThirdPartyType] = None
+
+    class Config(BaseConfig):
+        serialization_strategy = {
+            ThirdPartyType: {
+                "deserialize": ThirdPartyType,
+                "serialize": dummy_serialize_as_str,
+            }
+        }
+
+
 def test_jsonschema_for_dataclass():
     @dataclass
     class DataClass:
@@ -1041,6 +1065,29 @@ def test_dataclass_overridden_serialization_method():
     )
 
 
+def test_third_party_overridden_serialization_method():
+    schema = build_json_schema(DataClassWithThirdPartyType)
+    assert schema.properties["a"] == JSONSchema(
+        type=JSONSchemaInstanceType.STRING
+    )
+    assert schema.properties["b"] == JSONSchema(
+        anyOf=[
+            JSONSchema(type=JSONSchemaInstanceType.STRING),
+            JSONSchema(type=JSONSchemaInstanceType.NULL),
+        ]
+    )
+    assert schema.properties["c"] == JSONSchema(
+        type=JSONSchemaInstanceType.STRING, default="dummy"
+    )
+    assert schema.properties["d"] == JSONSchema(
+        anyOf=[
+            JSONSchema(type=JSONSchemaInstanceType.STRING),
+            JSONSchema(type=JSONSchemaInstanceType.NULL),
+        ],
+        default=None,
+    )
+
+
 def test_jsonschema_with_override_for_properties():
     @dataclass
     class DataClass:
