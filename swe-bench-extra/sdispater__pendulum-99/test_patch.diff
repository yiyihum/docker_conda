diff --git a/tests/date_tests/test_diff.py b/tests/date_tests/test_diff.py
index 1ba9a5a..a84b1f1 100644
--- a/tests/date_tests/test_diff.py
+++ b/tests/date_tests/test_diff.py
@@ -284,6 +284,17 @@ class DiffTest(AbstractTestCase):
         self.assertEqual('1 year', Date.today().diff_for_humans(Date.today().subtract(years=1), True))
         self.assertEqual('1 year', Date.today().diff_for_humans(Date.today().add(years=1), True))
 
+    def test_diff_accuracy(self):
+        # DST
+        today = Pendulum.create(2017, 3, 7, tz='America/Toronto')
+
+        with self.wrap_with_test_now(today):
+            diff = today.add(days=6).diff(today, abs=True)
+            self.assertEqual(5, diff.days)
+            self.assertEqual(6, diff.remaining_days)
+            self.assertEqual(0, diff.hours)
+            self.assertEqual('6 days', diff.in_words())
+
     def test_diff_for_humans_accuracy(self):
         today = Pendulum.today()
 
@@ -297,6 +308,11 @@ class DiffTest(AbstractTestCase):
             self.assertEqual('2 weeks', today.add(days=14).diff_for_humans(absolute=True))
             self.assertEqual('2 weeks', today.add(days=13).diff_for_humans(absolute=True))
 
+        # DST
+        today = Pendulum.create(2017, 3, 7, tz='America/Toronto')
+        with self.wrap_with_test_now(today):
+            self.assertEqual('6 days', today.add(days=6).diff_for_humans(absolute=True))
+
     def test_subtraction(self):
         d = Date(2016, 7, 5)
         future_dt = date(2016, 7, 6)
diff --git a/tests/pendulum_tests/test_diff.py b/tests/pendulum_tests/test_diff.py
index a633a32..c0f2e6d 100644
--- a/tests/pendulum_tests/test_diff.py
+++ b/tests/pendulum_tests/test_diff.py
@@ -573,6 +573,11 @@ class DiffTest(AbstractTestCase):
             self.assertEqual('1 year', now.add(years=1, months=3).diff_for_humans(absolute=True))
             self.assertEqual('2 years', now.add(years=1, months=8).diff_for_humans(absolute=True))
 
+        # DST
+        now = Pendulum.create(2017, 3, 7, tz='America/Toronto')
+        with self.wrap_with_test_now(now):
+            self.assertEqual('6 days', now.add(days=6).diff_for_humans(absolute=True))
+
     def test_seconds_since_midnight(self):
         d = Pendulum.create(2016, 7, 5, 12, 32, 25, 0)
         self.assertEqual(25 + 32 * 60 + 12 * 3600, d.seconds_since_midnight())
