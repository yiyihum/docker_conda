diff --git a/src/tox/tox_env/python/pip/req/args.py b/src/tox/tox_env/python/pip/req/args.py
index 19bded34..23f98ec3 100644
--- a/src/tox/tox_env/python/pip/req/args.py
+++ b/src/tox/tox_env/python/pip/req/args.py
@@ -18,10 +18,10 @@ class _OurArgumentParser(ArgumentParser):
         raise ValueError(msg)
 
 
-def build_parser(cli_only: bool) -> ArgumentParser:
+def build_parser() -> ArgumentParser:
     parser = _OurArgumentParser(add_help=False, prog="", allow_abbrev=False)
     _global_options(parser)
-    _req_options(parser, cli_only)
+    _req_options(parser)
     return parser
 
 
@@ -47,11 +47,10 @@ def _global_options(parser: ArgumentParser) -> None:
     )
 
 
-def _req_options(parser: ArgumentParser, cli_only: bool) -> None:
+def _req_options(parser: ArgumentParser) -> None:
     parser.add_argument("--install-option", action=AddSortedUniqueAction)
     parser.add_argument("--global-option", action=AddSortedUniqueAction)
-    if not cli_only:
-        parser.add_argument("--hash", action=AddSortedUniqueAction, type=_validate_hash)
+    parser.add_argument("--hash", action=AddSortedUniqueAction, type=_validate_hash)
 
 
 _HASH = re.compile(r"sha(256:[a-f0-9]{64}|384:[a-f0-9]{96}|512:[a-f0-9]{128})")
diff --git a/src/tox/tox_env/python/pip/req/file.py b/src/tox/tox_env/python/pip/req/file.py
index 4ad4ae06..df11ebe5 100644
--- a/src/tox/tox_env/python/pip/req/file.py
+++ b/src/tox/tox_env/python/pip/req/file.py
@@ -156,7 +156,7 @@ class RequirementsFile:
     @property
     def _parser(self) -> ArgumentParser:
         if self._parser_private is None:
-            self._parser_private = build_parser(False)
+            self._parser_private = build_parser()
         return self._parser_private
 
     def _ensure_requirements_parsed(self) -> None:
diff --git a/src/tox/tox_env/python/pip/req_file.py b/src/tox/tox_env/python/pip/req_file.py
index 1f8754a8..91202345 100644
--- a/src/tox/tox_env/python/pip/req_file.py
+++ b/src/tox/tox_env/python/pip/req_file.py
@@ -1,14 +1,17 @@
 from __future__ import annotations
 
 import re
-from argparse import ArgumentParser
+from argparse import Namespace
 from pathlib import Path
 
-from .req.args import build_parser
-from .req.file import ReqFileLines, RequirementsFile
+from .req.file import ParsedRequirement, ReqFileLines, RequirementsFile
 
 
 class PythonDeps(RequirementsFile):
+    # these options are valid in requirements.txt, but not via pip cli and
+    # thus cannot be used in the testenv `deps` list
+    _illegal_options = ["hash"]
+
     def __init__(self, raw: str, root: Path):
         super().__init__(root / "tox.ini", constraint=False)
         self._raw = self._normalize_raw(raw)
@@ -28,12 +31,6 @@ class PythonDeps(RequirementsFile):
                 line = f"{line[0:2]} {line[2:]}"
             yield at, line
 
-    @property
-    def _parser(self) -> ArgumentParser:
-        if self._parser_private is None:
-            self._parser_private = build_parser(cli_only=True)  # e.g. no --hash for cli only
-        return self._parser_private
-
     def lines(self) -> list[str]:
         return self._raw.splitlines()
 
@@ -68,6 +65,20 @@ class PythonDeps(RequirementsFile):
         raw = f"{adjusted}\n" if raw.endswith("\\\n") else adjusted  # preserve trailing newline if input has it
         return raw
 
+    def _parse_requirements(self, opt: Namespace, recurse: bool) -> list[ParsedRequirement]:
+        # check for any invalid options in the deps list
+        # (requirements recursively included from other files are not checked)
+        requirements = super()._parse_requirements(opt, recurse)
+        for r in requirements:
+            if r.from_file != str(self.path):
+                continue
+            for illegal_option in self._illegal_options:
+                if r.options.get(illegal_option):
+                    raise ValueError(
+                        f"Cannot use --{illegal_option} in deps list, it must be in requirements file. ({r})",
+                    )
+        return requirements
+
     def unroll(self) -> tuple[list[str], list[str]]:
         if self._unroll is None:
             opts_dict = vars(self.options)

