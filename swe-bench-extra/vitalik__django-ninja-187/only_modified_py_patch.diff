diff --git a/ninja/main.py b/ninja/main.py
index e4fbf7d..3ccf3c6 100644
--- a/ninja/main.py
+++ b/ninja/main.py
@@ -313,12 +313,13 @@ class NinjaAPI:
     def urls(self) -> Tuple[Any, ...]:
         self._validate()
         return (
-            self._get_urls(),
+            self._get_urls,
             "ninja",
             self.urls_namespace.split(":")[-1],
             # ^ if api included into nested urls, we only care about last bit here
         )
 
+    @property
     def _get_urls(self) -> List[URLPattern]:
         result = get_openapi_urls(self)
 
diff --git a/ninja/signature/details.py b/ninja/signature/details.py
index a680b72..632d187 100644
--- a/ninja/signature/details.py
+++ b/ninja/signature/details.py
@@ -129,17 +129,19 @@ class ViewSignature:
 
         # 2) if param name is a part of the path parameter
         elif name in self.path_params_names:
-            assert arg.default == self.signature.empty, f"'{name}' is a path param"
+            assert (
+                arg.default == self.signature.empty
+            ), f"'{name}' is a path param, default not allowed"
             param_source = params.Path(...)
 
-        # 3) if param have no  type annotation or annotation is not part of pydantic model:
+        # 3) if param is a collection or annotation is part of pydantic model:
         elif is_collection or is_pydantic_model(annotation):
             if arg.default == self.signature.empty:
                 param_source = params.Body(...)
             else:
                 param_source = params.Body(arg.default)
 
-        # 4) the last case is body param
+        # 4) the last case is query param
         else:
             if arg.default == self.signature.empty:
                 param_source = params.Query(...)
@@ -158,7 +160,12 @@ def is_pydantic_model(cls: Any) -> bool:
 
 def is_collection_type(annotation: Any) -> bool:
     origin = get_collection_origin(annotation)
-    return origin in (List, list, set, tuple)  # TODO: I gues we should handle only list
+    return origin in (
+        List,
+        list,
+        set,
+        tuple,
+    )  # TODO: I guess we should handle only list
 
 
 def detect_pydantic_model_collection_fields(model: pydantic.BaseModel) -> List[str]:
diff --git a/ninja/signature/utils.py b/ninja/signature/utils.py
index 50e6827..fe46432 100644
--- a/ninja/signature/utils.py
+++ b/ninja/signature/utils.py
@@ -3,6 +3,8 @@ import inspect
 import re
 from typing import Any, Callable, Set
 
+from django.urls import register_converter
+from django.urls.converters import UUIDConverter
 from pydantic.typing import ForwardRef, evaluate_forwardref
 
 from ninja.types import DictStrAny
@@ -47,8 +49,8 @@ def make_forwardref(annotation: str, globalns: DictStrAny) -> Any:
 
 
 def get_path_param_names(path: str) -> Set[str]:
-    "turns path string like /foo/{var}/path/{another}/end to set ['var', 'another']"
-    return {item.strip("{}") for item in re.findall("{[^}]*}", path)}
+    """turns path string like /foo/{var}/path/{int:another}/end to set {'var', 'another'}"""
+    return {item.strip("{}").split(":")[-1] for item in re.findall("{[^}]*}", path)}
 
 
 def is_async(callable: Callable) -> bool:
@@ -62,3 +64,18 @@ def has_kwargs(call: Callable) -> bool:
         if param.kind == param.VAR_KEYWORD:
             return True
     return False
+
+
+class NinjaUUIDConverter:
+    """Return a path converted UUID as a str instead of the standard UUID"""
+
+    regex = UUIDConverter.regex
+
+    def to_python(self, value: str) -> str:
+        return value
+
+    def to_url(self, value: Any) -> str:
+        return str(value)
+
+
+register_converter(NinjaUUIDConverter, "uuid")

