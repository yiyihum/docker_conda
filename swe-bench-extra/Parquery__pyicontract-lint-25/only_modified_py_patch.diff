diff --git a/icontract_lint/__init__.py b/icontract_lint/__init__.py
index b35a405..8639113 100644
--- a/icontract_lint/__init__.py
+++ b/icontract_lint/__init__.py
@@ -2,6 +2,7 @@
 import collections
 import enum
 import json
+import os
 import pathlib
 import re
 import sys
@@ -589,9 +590,10 @@ def output_verbose(errors: List[Error], stream: TextIO) -> None:
     """
     for err in errors:
         if err.lineno is not None:
-            stream.write("{}:{}: {} ({})\n".format(err.filename, err.lineno, err.description, err.identifier.value))
+            stream.write("{}:{}: {} ({}){}".format(err.filename, err.lineno, err.description, err.identifier.value,
+                                                   os.linesep))
         else:
-            stream.write("{}: {} ({})\n".format(err.filename, err.description, err.identifier.value))
+            stream.write("{}: {} ({}){}".format(err.filename, err.description, err.identifier.value, os.linesep))
 
 
 def output_json(errors: List[Error], stream: TextIO) -> None:
diff --git a/icontract_lint/main.py b/icontract_lint/main.py
index aeca12b..d5028f7 100644
--- a/icontract_lint/main.py
+++ b/icontract_lint/main.py
@@ -4,6 +4,7 @@
 # This file is necessary so that we can specify the entry point for pex.
 
 import argparse
+import os
 import pathlib
 import sys
 from typing import List, Any, TextIO
@@ -42,13 +43,16 @@ def parse_args(sys_argv: List[str]) -> Args:
 def _main(args: Args, stream: TextIO) -> int:
     """Execute the main routine."""
     if args.version:
-        stream.write("{}\n".format(pyicontract_lint_meta.__version__))
+        stream.write("{}{}".format(pyicontract_lint_meta.__version__, os.linesep))
         return 0
 
     errors = icontract_lint.check_paths(paths=args.paths)
 
     if args.format == 'verbose':
-        icontract_lint.output_verbose(errors=errors, stream=stream)
+        if not errors:
+            stream.write("No errors detected.{}".format(os.linesep))
+        else:
+            icontract_lint.output_verbose(errors=errors, stream=stream)
     elif args.format == 'json':
         icontract_lint.output_json(errors=errors, stream=stream)
     else:

