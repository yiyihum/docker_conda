diff --git a/dwave/cloud/cli.py b/dwave/cloud/cli.py
index f11bdb2..af6ecc7 100644
--- a/dwave/cloud/cli.py
+++ b/dwave/cloud/cli.py
@@ -234,11 +234,18 @@ def _ping(config_file, profile, solver_def, request_timeout, polling_timeout, ou
     except Exception as e:
         raise CLIError("Unexpected error while fetching solver: {!r}".format(e), 5)
 
+    if hasattr(solver, 'nodes'):
+        # structured solver: use the first existing node
+        problem = ({min(solver.nodes): 0}, {})
+    else:
+        # unstructured solver doesn't constrain problem graph
+        problem = ({0: 1}, {})
+
     t1 = timer()
     output("Using solver: {solver_id}", solver_id=solver.id)
 
     try:
-        future = solver.sample_ising({0: 1}, {})
+        future = solver.sample_ising(*problem)
         timing = future.timing
     except RequestTimeout:
         raise CLIError("API connection timed out.", 8)
diff --git a/dwave/cloud/utils.py b/dwave/cloud/utils.py
index 0608f67..802684a 100644
--- a/dwave/cloud/utils.py
+++ b/dwave/cloud/utils.py
@@ -486,10 +486,13 @@ class tictoc(object):
         self.dt = perf_counter() - self.tick
 
 
-def parse_loglevel(level_name):
+def parse_loglevel(level_name, default=logging.NOTSET):
     """Resolve numeric and symbolic log level names to numeric levels."""
 
-    level_name = (level_name or '').strip().lower()
+    try:
+        level_name = str(level_name or '').strip().lower()
+    except:
+        return default
 
     # note: make sure `TRACE` level is added to `logging` before calling this
     known_levels = {
@@ -507,7 +510,7 @@ def parse_loglevel(level_name):
     try:
         level = int(level_name)
     except ValueError:
-        level = known_levels.get(level_name, logging.NOTSET)
+        level = known_levels.get(level_name, default)
 
     return level
 

