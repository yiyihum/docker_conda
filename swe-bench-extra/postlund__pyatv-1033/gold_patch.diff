diff --git a/docs/api/pyatv/interface.html b/docs/api/pyatv/interface.html
index f0247954..6cf36c17 100644
--- a/docs/api/pyatv/interface.html
+++ b/docs/api/pyatv/interface.html
@@ -857,7 +857,9 @@ class Metadata(ABC):
 
     @abstractmethod
     @feature(30, &#34;Artwork&#34;, &#34;Playing media artwork.&#34;)
-    async def artwork(self, width=512, height=None) -&gt; Optional[ArtworkInfo]:
+    async def artwork(
+        self, width: Optional[int] = 512, height: Optional[int] = None
+    ) -&gt; Optional[ArtworkInfo]:
         &#34;&#34;&#34;Return artwork for what is currently playing (or None).
 
         The parameters &#34;width&#34; and &#34;height&#34; makes it possible to request artwork of a
@@ -2145,7 +2147,9 @@ in one of the listed states.</p></section>
 
     @abstractmethod
     @feature(30, &#34;Artwork&#34;, &#34;Playing media artwork.&#34;)
-    async def artwork(self, width=512, height=None) -&gt; Optional[ArtworkInfo]:
+    async def artwork(
+        self, width: Optional[int] = 512, height: Optional[int] = None
+    ) -&gt; Optional[ArtworkInfo]:
         &#34;&#34;&#34;Return artwork for what is currently playing (or None).
 
         The parameters &#34;width&#34; and &#34;height&#34; makes it possible to request artwork of a
@@ -2244,7 +2248,7 @@ def device_id(self) -&gt; Optional[str]:
 <h3>Methods</h3>
 <dl>
 <dt id="pyatv.interface.Metadata.artwork"><code class="name flex">
-<span>async def <span class="ident">artwork</span></span>(<span>self, width=512, height=None) -> Optional[<a title="pyatv.interface.ArtworkInfo" href="#pyatv.interface.ArtworkInfo">ArtworkInfo</a>]</span>
+<span>async def <span class="ident">artwork</span></span>(<span>self, width: Optional[int] = 512, height: Optional[int] = None) -> Optional[<a title="pyatv.interface.ArtworkInfo" href="#pyatv.interface.ArtworkInfo">ArtworkInfo</a>]</span>
 </code></dt>
 <dd>
 <section class="desc"><p>Return artwork for what is currently playing (or None).</p>
@@ -2259,7 +2263,9 @@ aspect ratio.</p></section>
 </summary>
 <pre><code class="python">@abstractmethod
 @feature(30, &#34;Artwork&#34;, &#34;Playing media artwork.&#34;)
-async def artwork(self, width=512, height=None) -&gt; Optional[ArtworkInfo]:
+async def artwork(
+    self, width: Optional[int] = 512, height: Optional[int] = None
+) -&gt; Optional[ArtworkInfo]:
     &#34;&#34;&#34;Return artwork for what is currently playing (or None).
 
     The parameters &#34;width&#34; and &#34;height&#34; makes it possible to request artwork of a
diff --git a/pyatv/dmap/__init__.py b/pyatv/dmap/__init__.py
index ccf0e827..3d5fa0d4 100644
--- a/pyatv/dmap/__init__.py
+++ b/pyatv/dmap/__init__.py
@@ -205,7 +205,9 @@ class BaseDmapAppleTV:
         self.latest_hash = self.latest_playing.hash
         return self.latest_playing
 
-    async def artwork(self, width, height) -> Optional[ArtworkInfo]:
+    async def artwork(
+        self, width: Optional[int], height: Optional[int]
+    ) -> Optional[ArtworkInfo]:
         """Return artwork for what is currently playing (or None)."""
         url = _ARTWORK_CMD.format(width=width or 0, height=height or 0)
         art = await self.daap.get(url, daap_data=False)
@@ -405,7 +407,9 @@ class DmapMetadata(Metadata):
         self.apple_tv = apple_tv
         self.artwork_cache = Cache(limit=4)
 
-    async def artwork(self, width=512, height=None) -> Optional[ArtworkInfo]:
+    async def artwork(
+        self, width: Optional[int] = 512, height: Optional[int] = None
+    ) -> Optional[ArtworkInfo]:
         """Return artwork for what is currently playing (or None).
 
         The parameters "width" and "height" makes it possible to request artwork of a
diff --git a/pyatv/interface.py b/pyatv/interface.py
index 005d43c9..44aa7dcf 100644
--- a/pyatv/interface.py
+++ b/pyatv/interface.py
@@ -629,7 +629,9 @@ class Metadata(ABC):
 
     @abstractmethod
     @feature(30, "Artwork", "Playing media artwork.")
-    async def artwork(self, width=512, height=None) -> Optional[ArtworkInfo]:
+    async def artwork(
+        self, width: Optional[int] = 512, height: Optional[int] = None
+    ) -> Optional[ArtworkInfo]:
         """Return artwork for what is currently playing (or None).
 
         The parameters "width" and "height" makes it possible to request artwork of a
diff --git a/pyatv/mrp/__init__.py b/pyatv/mrp/__init__.py
index 30d17ebc..4dd3774f 100644
--- a/pyatv/mrp/__init__.py
+++ b/pyatv/mrp/__init__.py
@@ -420,7 +420,9 @@ class MrpMetadata(Metadata):
         self.psm = psm
         self.artwork_cache = Cache(limit=4)
 
-    async def artwork(self, width=512, height=None) -> Optional[ArtworkInfo]:
+    async def artwork(
+        self, width: Optional[int] = 512, height: Optional[int] = None
+    ) -> Optional[ArtworkInfo]:
         """Return artwork for what is currently playing (or None).
 
         The parameters "width" and "height" makes it possible to request artwork of a
@@ -438,14 +440,17 @@ class MrpMetadata(Metadata):
             _LOGGER.debug("Retrieved artwork %s from cache", identifier)
             return self.artwork_cache.get(identifier)
 
-        artwork = await self._fetch_artwork(width or 0, height or -1)
-        if artwork:
+        artwork: Optional[ArtworkInfo] = None
+        try:
+            artwork = await self._fetch_artwork(width or 0, height or -1)
+        except Exception:
+            _LOGGER.warning("Artwork not present in response")
+        else:
             self.artwork_cache.put(identifier, artwork)
-            return artwork
 
-        return None
+        return artwork
 
-    async def _fetch_artwork(self, width, height):
+    async def _fetch_artwork(self, width, height) -> Optional[ArtworkInfo]:
         playing = self.psm.playing
         resp = await self.psm.protocol.send_and_receive(
             messages.playback_queue_request(playing.location, width, height)
