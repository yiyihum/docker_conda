diff --git a/tests/fake_device/mrp.py b/tests/fake_device/mrp.py
index cf452939..7d2ea31f 100644
--- a/tests/fake_device/mrp.py
+++ b/tests/fake_device/mrp.py
@@ -480,12 +480,15 @@ class FakeMrpService(MrpServerAuth, asyncio.Protocol):
         setstate = messages.create(
             protobuf.SET_STATE_MESSAGE, identifier=message.identifier
         )
-        queue = setstate.inner().playbackQueue
-        queue.location = 0
-        item = queue.contentItems.add()
-        item.artworkData = self.state.states[self.state.active_player].artwork
-        item.artworkDataWidth = state.artwork_width or 456
-        item.artworkDataHeight = state.artwork_height or 789
+
+        artwork_data = self.state.states[self.state.active_player].artwork
+        if artwork_data:
+            queue = setstate.inner().playbackQueue
+            queue.location = 0
+            item = queue.contentItems.add()
+            item.artworkData = artwork_data
+            item.artworkDataWidth = state.artwork_width or 456
+            item.artworkDataHeight = state.artwork_height or 789
         self.send_to_client(setstate)
 
     def handle_wake_device(self, message, inner):
diff --git a/tests/mrp/test_mrp_functional.py b/tests/mrp/test_mrp_functional.py
index f26f1390..31baa327 100644
--- a/tests/mrp/test_mrp_functional.py
+++ b/tests/mrp/test_mrp_functional.py
@@ -168,6 +168,19 @@ class MRPFunctionalTest(common_functional_tests.CommonFunctionalTests):
         await self.playing(title="dummy")
         self.assertEqual(self.atv.metadata.artwork_id, "some_id")
 
+    @unittest_run_loop
+    async def test_metadata_artwork_erroneously_available(self):
+        self.usecase.example_video()
+
+        # Metadata suggests that artwork is available but no artwork is available
+        # when requested by client
+        self.usecase.change_artwork(None, ARTWORK_MIMETYPE, ARTWORK_ID)
+
+        await self.playing(title="dummy")
+
+        artwork = await self.atv.metadata.artwork(width=123, height=456)
+        self.assertIsNone(artwork)
+
     @unittest_run_loop
     async def test_metadata_artwork_width_and_height(self):
         self.usecase.example_video()
