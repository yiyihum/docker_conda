diff --git a/tst/test_data_tools.py b/tst/test_data_tools.py
index 0f3f273..08470b7 100644
--- a/tst/test_data_tools.py
+++ b/tst/test_data_tools.py
@@ -4,11 +4,23 @@ from unittest.mock import Mock, patch
 from fdbk.data_tools import aggregate, functions, run_data_tools
 from fdbk.utils.messages import method_not_supported, no_data
 
-def _test_timestamp(i):
+def _test_timestamp(i, timestamps=None):
+    if timestamps:
+        return timestamps[i]
     return f'2020-08-23T00:{i // 60:02}:{i % 60:02}Z'
 
-def generate_test_data(N=10):
-    return [dict(number=i, number2=i*2, letter=chr(ord('A') + i), timestamp=_test_timestamp(i)) for i in range(N)]
+def generate_test_data(N=10, timestamps=None):
+    return [dict(number=i, number2=i*2, letter=chr(ord('A') + i), timestamp=_test_timestamp(i, timestamps)) for i in range(N)]
+
+AGGREGATE_ALWAYS_TOPIC = dict(
+    name="Aggregate test",
+    fields=["number", "number2", "letter"],
+    data_tools=[{"field":"number", "method":"line"},])
+AGGREGATE_ALWAYS_DATA = generate_test_data(4, [
+    '2020-09-12T00:00:00Z',
+    '2020-09-12T00:00:01Z',
+    '2020-09-12T00:00:02Z',
+    '2020-09-13T00:00:00Z',])
 
 class DataToolsTest(TestCase):
     def test_summary_funcs_return_none_on_empty_data(self):
@@ -72,7 +84,7 @@ class DataToolsTest(TestCase):
 
     def test_aggregate_empty_window(self):
         data = generate_test_data(5)
-        aggregated, warnings = aggregate(data, 10, 'max')
+        aggregated, warnings = aggregate(data, 10, 'max', aggregate_always=True)
 
         for i in range(1, 5):
             self.assertNotEqual(aggregated[i].get('timestamp'), _test_timestamp(i))
@@ -80,8 +92,22 @@ class DataToolsTest(TestCase):
             self.assertEqual(aggregated[i].get('number2'), i * 2)
 
     def test_aggregate_unknown_data_tool(self):
-        data = generate_test_data(5)
+        data = generate_test_data(15)
         aggregated, warnings = aggregate(data, 10, 'horse')
 
         self.assertEqual(aggregated, [])
         self.assertEqual(warnings, [method_not_supported('horse')])
+
+    def test_aggregate_always(self):
+        data = AGGREGATE_ALWAYS_DATA
+        aggregated, warnings = aggregate(data, 5)
+
+        self.assertEqual(aggregated, data)
+        self.assertEqual(warnings, [])
+
+        aggregated, warnings = aggregate(data, 5, aggregate_always=True)
+
+        self.assertEqual(len(aggregated), 2)
+        self.assertEqual(aggregated[0]["number"], 1)
+        self.assertEqual(aggregated[1]["number"], 3)
+        self.assertEqual(warnings, [])
diff --git a/tst/test_server_handlers.py b/tst/test_server_handlers.py
index c247bfd..9cc773d 100644
--- a/tst/test_server_handlers.py
+++ b/tst/test_server_handlers.py
@@ -1,4 +1,5 @@
 from datetime import datetime
+from dateutil.parser import isoparse
 from dateutil.tz import tzutc
 
 from unittest import TestCase
@@ -8,6 +9,8 @@ from fdbk import DictConnection
 from fdbk.server import parse_filter_parameters, ServerHandlers, generate_app
 from fdbk.server._server_handlers import _get_overwrite
 
+from test_data_tools import AGGREGATE_ALWAYS_DATA, AGGREGATE_ALWAYS_TOPIC
+
 class ServerHandlersTest(TestCase):
     def _assert_status(self, expected_status, function, *args, **kwargs):
         data, status = function(*args, **kwargs)
@@ -100,7 +103,6 @@ class ServerHandlersTest(TestCase):
         data = response["statistics"][0]["payload"]["data"]["datasets"][0]["data"]
         self.assertLessEqual(len(data), 3)
 
-
     def test_add_data_validations(self):
         s = ServerHandlers(DictConnection())
 
@@ -115,3 +117,22 @@ class ServerHandlersTest(TestCase):
         self._assert_status(404, s.get_topic, None)
         topic_id = self._create_topic(s, dict(name="topic", fields=["number"]))
         self._assert_status(200, s.get_topic, topic_id)
+
+    def test_aggregate(self):
+        s = ServerHandlers(DictConnection())
+        topic_id = self._create_topic(s, AGGREGATE_ALWAYS_TOPIC)
+        for data in AGGREGATE_ALWAYS_DATA:
+            data['timestamp'] = isoparse(data['timestamp']).replace(tzinfo=None)
+            self._assert_status(200, s.add_data, topic_id, data)
+
+        tests = [
+            (s.get_summary, (topic_id, dict(aggregate_to="5", aggregate_with='sum')), 4),
+            (s.get_summary, (topic_id, dict(aggregate_to="5", aggregate_with='sum', aggregate_always="tRuE")), 2),
+            (s.get_overview, (None, dict(aggregate_to="5", aggregate_with='sum')), 4),
+            (s.get_overview, (None, dict(aggregate_to="5", aggregate_with='sum', aggregate_always="True")), 2),
+        ]
+
+        for fn, params, count in tests:
+            data = self._assert_status(200, fn, *params)
+            aggregated = data['statistics'][0]['payload']['data']['datasets'][0]['data']
+            self.assertEqual(len(aggregated), count)
