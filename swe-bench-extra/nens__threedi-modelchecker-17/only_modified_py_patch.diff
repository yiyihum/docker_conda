diff --git a/threedi_modelchecker/config.py b/threedi_modelchecker/config.py
index e98d55e..d51cce5 100644
--- a/threedi_modelchecker/config.py
+++ b/threedi_modelchecker/config.py
@@ -173,14 +173,6 @@ RANGE_CHECKS = [
         column=models.Weir.friction_value,
         criterion_valid=models.Weir.friction_value >= 0,
     ),
-    GeneralCheck(
-        column=models.Manhole.bottom_level,
-        criterion_valid=models.Manhole.bottom_level >= models.Manhole.surface_level,
-    ),
-    GeneralCheck(
-        column=models.Manhole.bottom_level,
-        criterion_valid=models.Manhole.bottom_level >= models.Manhole.drain_level,
-    ),
     GeneralCheck(
         column=models.GlobalSetting.maximum_sim_time_step,
         criterion_valid=models.GlobalSetting.maximum_sim_time_step >= models.GlobalSetting.sim_time_step,  # noqa: E501
@@ -210,6 +202,7 @@ OTHER_CHECKS = [
     Use0DFlowCheck()
 ]
 
+
 CONDITIONAL_CHECKS = [
     ConditionalCheck(
         criterion=(models.ConnectionNode.id == models.Manhole.connection_node_id),
@@ -226,12 +219,6 @@ CONDITIONAL_CHECKS = [
                              < models.CrossSectionLocation.bank_level)
         )
     ),
-    ConditionalCheck(
-        criterion=(models.GlobalSetting.timestep_plus == True),
-        check=NotNullCheck(
-            column=models.GlobalSetting.maximum_sim_time_step,
-        )
-    ),
     ConditionalCheck(
         criterion=or_(
             models.GlobalSetting.initial_groundwater_level_file != None,
@@ -374,7 +361,7 @@ CONDITIONAL_CHECKS = [
         ).filter(
             models.Pipe.invert_level_end_point < models.Manhole.bottom_level,
         ),
-        message="Pipe.invert_level_end_point should be higher or equal than "
+        message="Pipe.invert_level_end_point should be higher than or equal to "
                 "Manhole.bottom_level"
     ),
     QueryCheck(
@@ -387,9 +374,36 @@ CONDITIONAL_CHECKS = [
         ).filter(
             models.Pipe.invert_level_start_point < models.Manhole.bottom_level,  # noqa: E501
         ),
-        message="Pipe.invert_level_start_point should be higher or equal than "
+        message="Pipe.invert_level_start_point should be higher than or equal to "
                 "Manhole.bottom_level"
-    )
+    ),
+    QueryCheck(
+        column=models.Manhole.bottom_level,
+        invalid=Query(models.Manhole).filter(
+            models.Manhole.drain_level < models.Manhole.bottom_level,
+            models.Manhole.calculation_type == constants.CalculationTypeNode.CONNECTED
+        ),
+        message="Manhole.drain_level >= Manhole.bottom_level when "
+                "Manhole.calculation_type is CONNECTED"
+    ),
+    QueryCheck(
+        column=models.Manhole.drain_level,
+        invalid=Query(models.Manhole).filter(
+            models.Manhole.calculation_type == constants.CalculationTypeNode.CONNECTED,
+            models.Manhole.drain_level == None
+        ),
+        message="Manhole.drain_level cannot be null when Manhole.calculation_type is "
+                "CONNECTED"
+    ),
+    QueryCheck(
+        column=models.GlobalSetting.maximum_sim_time_step,
+        invalid=Query(models.GlobalSetting).filter(
+            models.GlobalSetting.timestep_plus == True,
+            models.GlobalSetting.maximum_sim_time_step == None
+        ),
+        message="GlobalSettings.maximum_sim_time_step cannot be null when "
+                "GlobalSettings.timestep_plus is True."
+    ),
 ]
 
 
diff --git a/threedi_modelchecker/threedi_model/models.py b/threedi_modelchecker/threedi_model/models.py
index 284b1d4..342c9de 100644
--- a/threedi_modelchecker/threedi_model/models.py
+++ b/threedi_modelchecker/threedi_model/models.py
@@ -325,9 +325,9 @@ class Manhole(Base):
     shape = Column(String(4))
     width = Column(Float)
     length = Column(Float)
-    surface_level = Column(Float, nullable=False)
+    surface_level = Column(Float)
     bottom_level = Column(Float, nullable=False)
-    drain_level = Column(Float, nullable=False)
+    drain_level = Column(Float)
     sediment_level = Column(Float)
     manhole_indicator = Column(Integer)
     calculation_type = Column(IntegerEnum(constants.CalculationTypeNode))

