diff --git a/starlette/datastructures.py b/starlette/datastructures.py
index 1ce3aab..67e3d05 100644
--- a/starlette/datastructures.py
+++ b/starlette/datastructures.py
@@ -1,9 +1,11 @@
+import tempfile
 import typing
 from collections import namedtuple
 from collections.abc import Sequence
 from shlex import shlex
 from urllib.parse import ParseResult, parse_qsl, urlencode, urlparse
 
+from starlette.concurrency import run_in_threadpool
 from starlette.types import Scope
 
 Address = namedtuple("Address", ["host", "port"])
@@ -302,6 +304,94 @@ class QueryParams(typing.Mapping[str, str]):
         return f"{self.__class__.__name__}(query_string={repr(str(self))})"
 
 
+class UploadFile:
+    def __init__(self, filename: str, file: typing.IO = None) -> None:
+        self.filename = filename
+        if file is None:
+            file = tempfile.SpooledTemporaryFile()
+        self.file = file
+
+    async def write(self, data: typing.Union[bytes, str]) -> None:
+        await run_in_threadpool(self.file.write, data)
+
+    async def read(self, size: int = None) -> typing.Union[bytes, str]:
+        return await run_in_threadpool(self.file.read, size)
+
+    async def seek(self, offset: int) -> None:
+        await run_in_threadpool(self.file.seek, offset)
+
+    async def close(self) -> None:
+        await run_in_threadpool(self.file.close)
+
+
+FormValue = typing.Union[str, UploadFile]
+
+
+class FormData(typing.Mapping[str, FormValue]):
+    """
+    An immutable multidict, containing both file uploads and text input.
+    """
+
+    def __init__(
+        self,
+        form: typing.Union["FormData", typing.Mapping[str, FormValue]] = None,
+        items: typing.List[typing.Tuple[str, FormValue]] = None,
+    ) -> None:
+        _items = []  # type: typing.List[typing.Tuple[str, FormValue]]
+        if form is not None:
+            assert items is None, "Cannot set both 'form' and 'items'"
+            if isinstance(form, FormData):
+                _items = list(form.multi_items())
+            else:
+                _items = list(form.items())
+        elif items is not None:
+            _items = list(items)
+
+        self._dict = {k: v for k, v in _items}
+        self._list = _items
+
+    def getlist(self, key: typing.Any) -> typing.List[FormValue]:
+        return [item_value for item_key, item_value in self._list if item_key == key]
+
+    def keys(self) -> typing.List[str]:  # type: ignore
+        return list(self._dict.keys())
+
+    def values(self) -> typing.List[FormValue]:  # type: ignore
+        return list(self._dict.values())
+
+    def items(self) -> typing.List[typing.Tuple[str, FormValue]]:  # type: ignore
+        return list(self._dict.items())
+
+    def multi_items(self) -> typing.List[typing.Tuple[str, FormValue]]:
+        return list(self._list)
+
+    def get(self, key: typing.Any, default: typing.Any = None) -> typing.Any:
+        if key in self._dict:
+            return self._dict[key]
+        return default
+
+    def __getitem__(self, key: typing.Any) -> FormValue:
+        return self._dict[key]
+
+    def __contains__(self, key: typing.Any) -> bool:
+        return key in self._dict
+
+    def __iter__(self) -> typing.Iterator[typing.Any]:
+        return iter(self.keys())
+
+    def __len__(self) -> int:
+        return len(self._dict)
+
+    def __eq__(self, other: typing.Any) -> bool:
+        if not isinstance(other, FormData):
+            return False
+        return sorted(self._list) == sorted(other._list)
+
+    def __repr__(self) -> str:
+        items = self.multi_items()
+        return f"{self.__class__.__name__}(items={repr(items)})"
+
+
 class Headers(typing.Mapping[str, str]):
     """
     An immutable, case-insensitive multidict.
diff --git a/starlette/formparsers.py b/starlette/formparsers.py
index d148df8..223119f 100644
--- a/starlette/formparsers.py
+++ b/starlette/formparsers.py
@@ -1,12 +1,8 @@
-import asyncio
-import io
-import tempfile
 import typing
 from enum import Enum
 from urllib.parse import unquote_plus
 
-from starlette.concurrency import run_in_threadpool
-from starlette.datastructures import Headers
+from starlette.datastructures import FormData, FormValue, Headers, UploadFile
 
 try:
     from multipart.multipart import parse_options_header
@@ -35,31 +31,6 @@ class MultiPartMessage(Enum):
     END = 8
 
 
-class UploadFile:
-    def __init__(self, filename: str) -> None:
-        self.filename = filename
-        self._file = io.BytesIO()  # type: typing.IO[typing.Any]
-        self._loop = asyncio.get_event_loop()
-
-    def create_tempfile(self) -> None:
-        self._file = tempfile.SpooledTemporaryFile()
-
-    async def setup(self) -> None:
-        await run_in_threadpool(self.create_tempfile)
-
-    async def write(self, data: bytes) -> None:
-        await run_in_threadpool(self._file.write, data)
-
-    async def read(self, size: int = None) -> bytes:
-        return await run_in_threadpool(self._file.read, size)
-
-    async def seek(self, offset: int) -> None:
-        await run_in_threadpool(self._file.seek, offset)
-
-    async def close(self) -> None:
-        await run_in_threadpool(self._file.close)
-
-
 class FormParser:
     def __init__(
         self, headers: Headers, stream: typing.AsyncGenerator[bytes, None]
@@ -91,7 +62,7 @@ class FormParser:
         message = (FormMessage.END, b"")
         self.messages.append(message)
 
-    async def parse(self) -> typing.Dict[str, typing.Union[str, UploadFile]]:
+    async def parse(self) -> FormData:
         # Callbacks dictionary.
         callbacks = {
             "on_field_start": self.on_field_start,
@@ -106,7 +77,7 @@ class FormParser:
         field_name = b""
         field_value = b""
 
-        result = {}  # type: typing.Dict[str, typing.Union[str, UploadFile]]
+        items = []  # type: typing.List[typing.Tuple[str, FormValue]]
 
         # Feed the parser with data from the request.
         async for chunk in self.stream:
@@ -127,11 +98,11 @@ class FormParser:
                 elif message_type == FormMessage.FIELD_END:
                     name = unquote_plus(field_name.decode("latin-1"))
                     value = unquote_plus(field_value.decode("latin-1"))
-                    result[name] = value
+                    items.append((name, value))
                 elif message_type == FormMessage.END:
                     pass
 
-        return result
+        return FormData(items=items)
 
 
 class MultiPartParser:
@@ -177,7 +148,7 @@ class MultiPartParser:
         message = (MultiPartMessage.END, b"")
         self.messages.append(message)
 
-    async def parse(self) -> typing.Dict[str, typing.Union[str, UploadFile]]:
+    async def parse(self) -> FormData:
         # Parse the Content-Type header to get the multipart boundary.
         content_type, params = parse_options_header(self.headers["Content-Type"])
         boundary = params.get(b"boundary")
@@ -203,7 +174,7 @@ class MultiPartParser:
         data = b""
         file = None  # type: typing.Optional[UploadFile]
 
-        result = {}  # type: typing.Dict[str, typing.Union[str, UploadFile]]
+        items = []  # type: typing.List[typing.Tuple[str, FormValue]]
 
         # Feed the parser with data from the request.
         async for chunk in self.stream:
@@ -230,7 +201,6 @@ class MultiPartParser:
                     if b"filename" in options:
                         filename = options[b"filename"].decode("latin-1")
                         file = UploadFile(filename=filename)
-                        await file.setup()
                     else:
                         file = None
                 elif message_type == MultiPartMessage.PART_DATA:
@@ -240,12 +210,12 @@ class MultiPartParser:
                         await file.write(message_bytes)
                 elif message_type == MultiPartMessage.PART_END:
                     if file is None:
-                        result[field_name] = data.decode("latin-1")
+                        items.append((field_name, data.decode("latin-1")))
                     else:
                         await file.seek(0)
-                        result[field_name] = file
+                        items.append((field_name, file))
                 elif message_type == MultiPartMessage.END:
                     pass
 
         parser.finalize()
-        return result
+        return FormData(items=items)
diff --git a/starlette/requests.py b/starlette/requests.py
index 5b703ce..600e6fb 100644
--- a/starlette/requests.py
+++ b/starlette/requests.py
@@ -4,7 +4,7 @@ import json
 import typing
 from collections.abc import Mapping
 
-from starlette.datastructures import URL, Address, Headers, QueryParams
+from starlette.datastructures import URL, Address, FormData, Headers, QueryParams
 from starlette.formparsers import FormParser, MultiPartParser
 from starlette.types import Message, Receive, Scope
 
@@ -168,7 +168,7 @@ class Request(HTTPConnection):
             self._json = json.loads(body)
         return self._json
 
-    async def form(self) -> dict:
+    async def form(self) -> FormData:
         if not hasattr(self, "_form"):
             assert (
                 parse_options_header is not None
@@ -182,12 +182,12 @@ class Request(HTTPConnection):
                 form_parser = FormParser(self.headers, self.stream())
                 self._form = await form_parser.parse()
             else:
-                self._form = {}
+                self._form = FormData()
         return self._form
 
     async def close(self) -> None:
         if hasattr(self, "_form"):
-            for item in self._form.values():
+            for key, item in self._form.multi_items():
                 if hasattr(item, "close"):
                     await item.close()  # type: ignore
 
