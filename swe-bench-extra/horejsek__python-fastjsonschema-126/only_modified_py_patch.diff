diff --git a/fastjsonschema/__init__.py b/fastjsonschema/__init__.py
index 6dd90f6..572e6c1 100644
--- a/fastjsonschema/__init__.py
+++ b/fastjsonschema/__init__.py
@@ -75,6 +75,7 @@ Note that there are some differences compared to JSON schema standard:
 API
 ***
 """
+from functools import partial, update_wrapper
 
 from .draft04 import CodeGeneratorDraft04
 from .draft06 import CodeGeneratorDraft06
@@ -177,7 +178,10 @@ def compile(definition, handlers={}, formats={}, use_default=True):
     global_state = code_generator.global_state
     # Do not pass local state so it can recursively call itself.
     exec(code_generator.func_code, global_state)
-    return global_state[resolver.get_scope_name()]
+    func = global_state[resolver.get_scope_name()]
+    if formats:
+        return update_wrapper(partial(func, custom_formats=formats), func)
+    return func
 
 
 # pylint: disable=dangerous-default-value
diff --git a/fastjsonschema/draft04.py b/fastjsonschema/draft04.py
index 394f263..8209efc 100644
--- a/fastjsonschema/draft04.py
+++ b/fastjsonschema/draft04.py
@@ -65,6 +65,7 @@ class CodeGeneratorDraft04(CodeGenerator):
             ('patternProperties', self.generate_pattern_properties),
             ('additionalProperties', self.generate_additional_properties),
         ))
+        self._any_or_one_of_count = 0
 
     @property
     def global_state(self):
@@ -145,16 +146,18 @@ class CodeGeneratorDraft04(CodeGenerator):
 
         Valid values for this definition are 3, 4, 5, 10, 11, ... but not 8 for example.
         """
-        self.l('{variable}_any_of_count = 0')
+        self._any_or_one_of_count += 1
+        count = self._any_or_one_of_count
+        self.l('{variable}_any_of_count{count} = 0', count=count)
         for definition_item in self._definition['anyOf']:
             # When we know it's passing (at least once), we do not need to do another expensive try-except.
-            with self.l('if not {variable}_any_of_count:', optimize=False):
+            with self.l('if not {variable}_any_of_count{count}:', count=count, optimize=False):
                 with self.l('try:', optimize=False):
                     self.generate_func_code_block(definition_item, self._variable, self._variable_name, clear_variables=True)
-                    self.l('{variable}_any_of_count += 1')
+                    self.l('{variable}_any_of_count{count} += 1', count=count)
                 self.l('except JsonSchemaValueException: pass')
 
-        with self.l('if not {variable}_any_of_count:', optimize=False):
+        with self.l('if not {variable}_any_of_count{count}:', count=count, optimize=False):
             self.exc('{name} must be valid by one of anyOf definition', rule='anyOf')
 
     def generate_one_of(self):
@@ -173,16 +176,18 @@ class CodeGeneratorDraft04(CodeGenerator):
 
         Valid values for this definition are 3, 5, 6, ... but not 15 for example.
         """
-        self.l('{variable}_one_of_count = 0')
+        self._any_or_one_of_count += 1
+        count = self._any_or_one_of_count
+        self.l('{variable}_one_of_count{count} = 0', count=count)
         for definition_item in self._definition['oneOf']:
             # When we know it's failing (one of means exactly once), we do not need to do another expensive try-except.
-            with self.l('if {variable}_one_of_count < 2:', optimize=False):
+            with self.l('if {variable}_one_of_count{count} < 2:', count=count, optimize=False):
                 with self.l('try:', optimize=False):
                     self.generate_func_code_block(definition_item, self._variable, self._variable_name, clear_variables=True)
-                    self.l('{variable}_one_of_count += 1')
+                    self.l('{variable}_one_of_count{count} += 1', count=count)
                 self.l('except JsonSchemaValueException: pass')
 
-        with self.l('if {variable}_one_of_count != 1:'):
+        with self.l('if {variable}_one_of_count{count} != 1:', count=count):
             self.exc('{name} must be valid exactly by one of oneOf definition', rule='oneOf')
 
     def generate_not(self):
diff --git a/fastjsonschema/generator.py b/fastjsonschema/generator.py
index bedd7ed..71e9b58 100644
--- a/fastjsonschema/generator.py
+++ b/fastjsonschema/generator.py
@@ -32,6 +32,7 @@ class CodeGenerator:
     def __init__(self, definition, resolver=None):
         self._code = []
         self._compile_regexps = {}
+        self._custom_formats = {}
 
         # Any extra library should be here to be imported only once.
         # Lines are imports to be printed in the file and objects
@@ -136,7 +137,7 @@ class CodeGenerator:
         self._validation_functions_done.add(uri)
         self.l('')
         with self._resolver.resolving(uri) as definition:
-            with self.l('def {}(data):', name):
+            with self.l('def {}(data, custom_formats={{}}):', name):
                 self.generate_func_code_block(definition, 'data', 'data', clear_variables=True)
                 self.l('return data')
 
@@ -190,7 +191,7 @@ class CodeGenerator:
             if uri not in self._validation_functions_done:
                 self._needed_validation_functions[uri] = name
             # call validation function
-            self.l('{}({variable})', name)
+            self.l('{}({variable}, custom_formats)', name)
 
 
     # pylint: disable=invalid-name

