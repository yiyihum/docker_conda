diff --git a/ansible_bender/core.py b/ansible_bender/core.py
index cec269e..a01f098 100644
--- a/ansible_bender/core.py
+++ b/ansible_bender/core.py
@@ -45,7 +45,8 @@ from ansible_bender import callback_plugins
 from ansible_bender.conf import ImageMetadata, Build
 from ansible_bender.constants import TIMESTAMP_FORMAT
 from ansible_bender.exceptions import AbBuildUnsuccesful
-from ansible_bender.utils import run_cmd, ap_command_exists, random_str, graceful_get
+from ansible_bender.utils import run_cmd, ap_command_exists, random_str, graceful_get, \
+    is_ansibles_python_2
 
 logger = logging.getLogger(__name__)
 A_CFG_TEMPLATE = """\
@@ -78,6 +79,12 @@ def run_playbook(playbook_path, inventory_path, a_cfg_path, connection, extra_va
     :return: output
     """
     ap = ap_command_exists()
+    if is_ansibles_python_2(ap):
+        raise RuntimeError(
+            "ansible-bender is written in python 3 and does not work in python 2,\n"
+            f"it seems that {ap} is using python 2 - ansible-bender will not"
+            "work in such environment\n"
+        )
     cmd_args = [
         ap,
         "-c", connection,
diff --git a/ansible_bender/utils.py b/ansible_bender/utils.py
index 2f23892..ac0fac2 100644
--- a/ansible_bender/utils.py
+++ b/ansible_bender/utils.py
@@ -4,6 +4,7 @@ Utility functions. This module can't depend on anything within ab.
 import logging
 import os
 import random
+import re
 import shutil
 import string
 import subprocess
@@ -126,14 +127,14 @@ def env_get_or_fail_with(env_name, err_msg):
         raise RuntimeError(err_msg)
 
 
-def one_of_commands_exists(commands, exc_msg):
+def one_of_commands_exists(commands, exc_msg) -> str:
     """
     Verify that the provided command exists. Raise CommandDoesNotExistException in case of an
     error or if the command does not exist.
 
     :param commands: str, command to check (python 3 only)
     :param exc_msg: str, message of exception when command does not exist
-    :return: bool, True if everything's all right (otherwise exception is thrown)
+    :return: str, the command which exists
     """
     found = False
     for command in commands:
@@ -233,3 +234,29 @@ def random_str(size=10):
     :return: the string
     """
     return ''.join(random.choice(string.ascii_lowercase) for _ in range(size))
+
+
+def is_ansibles_python_2(ap_exe: str) -> bool:
+    """
+    Discover whether ansible-playbook is using python 2.
+
+    :param ap_exe: path to the python executable
+
+    :return: True if it's 2
+    """
+    out = run_cmd([ap_exe, "--version"], log_stderr=True, return_output=True)
+
+    # python version = 3.7.2
+    reg = r"python version = (\d)"
+
+    reg_grp = re.findall(reg, out)
+    try:
+        py_version = reg_grp[0]
+    except IndexError:
+        logger.warning("could not figure out which python is %s using", ap_exe)
+        return False  # we don't know, fingers crossed
+    if py_version == "2":
+        logger.info("%s is using python 2", ap_exe)
+        return True
+    logger.debug("it seems that %s is not using python 2", ap_exe)
+    return False

