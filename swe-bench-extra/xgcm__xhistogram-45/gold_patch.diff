diff --git a/doc/contributing.rst b/doc/contributing.rst
index 67aa942..e2a8407 100644
--- a/doc/contributing.rst
+++ b/doc/contributing.rst
@@ -140,6 +140,13 @@ Preparing Pull Requests
 Release History
 ---------------
 
+v0.2.1 (not yet released)
+~~~~~~~~~~~~~~~~~~~~~~~~~
+- Implemented various options for users for providing bins to
+  xhistogram that mimic the numpy histogram API. This included
+  adding a range argument to the xhistogram API :issue:`13`.
+  By `Dougie Squire <https://github.com/dougiesquire>`_.
+
 v0.2.0
 ~~~~~~
 
diff --git a/xhistogram/core.py b/xhistogram/core.py
index 9275e3b..3470506 100644
--- a/xhistogram/core.py
+++ b/xhistogram/core.py
@@ -3,8 +3,10 @@ Numpy API for xhistogram.
 """
 
 
+import dask
 import numpy as np
 from functools import reduce
+from collections.abc import Iterable
 from .duck_array_ops import (
     digitize,
     bincount,
@@ -13,16 +15,45 @@ from .duck_array_ops import (
     concatenate,
     broadcast_arrays,
 )
-import warnings
 
+# range is a keyword so save the builtin so they can use it.
+_range = range
 
-def _ensure_bins_is_a_list_of_arrays(bins, N_expected):
+
+def _ensure_correctly_formatted_bins(bins, N_expected):
+    # TODO: This could be done better / more robustly
+    if bins is None:
+        raise ValueError("bins must be provided")
+    if isinstance(bins, (int, str, np.ndarray)):
+        bins = N_expected * [bins]
     if len(bins) == N_expected:
         return bins
-    elif N_expected == 1:
-        return [bins]
     else:
-        raise ValueError("Can't figure out what to do with bins.")
+        raise ValueError(
+            "The number of bin definitions doesn't match the number of args"
+        )
+
+
+def _ensure_correctly_formatted_range(range_, N_expected):
+    # TODO: This could be done better / more robustly
+    def _iterable_nested(x):
+        return all(isinstance(i, Iterable) for i in x)
+
+    if range_ is not None:
+        if (len(range_) == 2) & (not _iterable_nested(range_)):
+            return N_expected * [range_]
+        elif N_expected == len(range_):
+            if all(len(x) == 2 for x in range_):
+                return range_
+            else:
+                raise ValueError(
+                    "range should be provided as (lower_range, upper_range). In the "
+                    + "case of multiple args, range should be a list of such tuples"
+                )
+        else:
+            raise ValueError("The number of ranges doesn't match the number of args")
+    else:
+        return N_expected * [range_]
 
 
 def _bincount_2d(bin_indices, weights, N, hist_shapes):
@@ -148,7 +179,13 @@ def _histogram_2d_vectorized(
 
 
 def histogram(
-    *args, bins=None, axis=None, weights=None, density=False, block_size="auto"
+    *args,
+    bins=None,
+    range=None,
+    axis=None,
+    weights=None,
+    density=False,
+    block_size="auto",
 ):
     """Histogram applied along specified axis / axes.
 
@@ -158,23 +195,38 @@ def histogram(
         Input data. The number of input arguments determines the dimensonality
         of the histogram. For example, two arguments prodocue a 2D histogram.
         All args must have the same size.
-    bins :  int or array_like or a list of ints or arrays, optional
+    bins :  int, str or numpy array or a list of ints, strs and/or arrays, optional
         If a list, there should be one entry for each item in ``args``.
-        The bin specification:
+        The bin specifications are as follows:
 
-          * If int, the number of bins for all arguments in ``args``.
-          * If array_like, the bin edges for all arguments in ``args``.
-          * If a list of ints, the number of bins  for every argument in ``args``.
-          * If a list arrays, the bin edges for each argument in ``args``
-            (required format for Dask inputs).
-          * A combination [int, array] or [array, int], where int
-            is the number of bins and array is the bin edges.
+          * If int; the number of bins for all arguments in ``args``.
+          * If str; the method used to automatically calculate the optimal bin width
+            for all arguments in ``args``, as defined by numpy `histogram_bin_edges`.
+          * If numpy array; the bin edges for all arguments in ``args``.
+          * If a list of ints, strs and/or arrays; the bin specification as
+            above for every argument in ``args``.
 
         When bin edges are specified, all but the last (righthand-most) bin include
         the left edge and exclude the right edge. The last bin includes both edges.
 
-        A ``TypeError`` will be raised if ``args`` contains dask arrays and
-        ``bins`` are not specified explicitly as a list of arrays.
+        A TypeError will be raised if args contains dask arrays and bins are not
+        specified explicitly as an array or list of arrays. This is because other
+        bin specifications trigger computation.
+    range : (float, float) or a list of (float, float), optional
+        If a list, there should be one entry for each item in ``args``.
+        The range specifications are as follows:
+
+          * If (float, float); the lower and upper range(s) of the bins for all
+            arguments in ``args``. Values outside the range are ignored. The first
+            element of the range must be less than or equal to the second. `range`
+            affects the automatic bin computation as well. In this case, while bin
+            width is computed to be optimal based on the actual data within `range`,
+            the bin count will fill the entire range including portions containing
+            no data.
+          * If a list of (float, float); the ranges as above for every argument in
+            ``args``.
+          * If not provided, range is simply ``(arg.min(), arg.max())`` for each
+            arg.
     axis : None or int or tuple of ints, optional
         Axis or axes along which the histogram is computed. The default is to
         compute the histogram of the flattened array
@@ -203,25 +255,19 @@ def histogram(
     -------
     hist : array
         The values of the histogram.
+    bin_edges : list of arrays
+        Return the bin edges for each input array.
 
     See Also
     --------
     numpy.histogram, numpy.bincount, numpy.digitize
     """
 
-    # Future warning for https://github.com/xgcm/xhistogram/pull/45
-    warnings.warn(
-        "Future versions of xhistogram.core.histogram will return a "
-        + "tuple containing arrays of the the histogram bins and the "
-        + "histogram values, rather than just an array of the histogram "
-        + "values. This API change will only affect users of "
-        + "xhistogram.core. Users of xhistogram.xarray can ignore this "
-        + "message.",
-        FutureWarning,
-    )
-
     a0 = args[0]
     ndim = a0.ndim
+    n_inputs = len(args)
+
+    is_dask_array = any([dask.is_dask_collection(a) for a in args])
 
     if axis is not None:
         axis = np.atleast_1d(axis)
@@ -236,11 +282,11 @@ def histogram(
             axis_normed.append(ax_positive)
         axis = np.atleast_1d(axis_normed)
 
-    do_full_array = (axis is None) or (set(axis) == set(range(a0.ndim)))
+    do_full_array = (axis is None) or (set(axis) == set(_range(a0.ndim)))
     if do_full_array:
         kept_axes_shape = None
     else:
-        kept_axes_shape = tuple([a0.shape[i] for i in range(a0.ndim) if i not in axis])
+        kept_axes_shape = tuple([a0.shape[i] for i in _range(a0.ndim) if i not in axis])
 
     all_args = list(args)
     if weights is not None:
@@ -254,7 +300,7 @@ def histogram(
             # reshape the array to 2D
             # axis 0: preserved axis after histogram
             # axis 1: calculate histogram along this axis
-            new_pos = tuple(range(-len(axis), 0))
+            new_pos = tuple(_range(-len(axis), 0))
             c = np.moveaxis(a, axis, new_pos)
             split_idx = c.ndim - len(axis)
             dims_0 = c.shape[:split_idx]
@@ -272,8 +318,23 @@ def histogram(
     else:
         weights_reshaped = None
 
-    n_inputs = len(all_args_reshaped)
-    bins = _ensure_bins_is_a_list_of_arrays(bins, n_inputs)
+    # Some sanity checks and format bins and range correctly
+    bins = _ensure_correctly_formatted_bins(bins, n_inputs)
+    range = _ensure_correctly_formatted_range(range, n_inputs)
+
+    # histogram_bin_edges trigges computation on dask arrays. It would be possible
+    # to write a version of this that doesn't trigger when `range` is provided, but
+    # for now let's just use np.histogram_bin_edges
+    if is_dask_array:
+        if not all([isinstance(b, np.ndarray) for b in bins]):
+            raise TypeError(
+                "When using dask arrays, bins must be provided as numpy array(s) of edges"
+            )
+    else:
+        bins = [
+            np.histogram_bin_edges(a, b, r, weights_reshaped)
+            for a, b, r in zip(all_args_reshaped, bins, range)
+        ]
 
     bin_counts = _histogram_2d_vectorized(
         *all_args_reshaped,
@@ -306,4 +367,4 @@ def histogram(
         final_shape = kept_axes_shape + h.shape[1:]
         h = reshape(h, final_shape)
 
-    return h
+    return h, bins
diff --git a/xhistogram/xarray.py b/xhistogram/xarray.py
index 8c5e944..aea7a1f 100644
--- a/xhistogram/xarray.py
+++ b/xhistogram/xarray.py
@@ -3,22 +3,23 @@ Xarray API for xhistogram.
 """
 
 import xarray as xr
-import numpy as np
 from collections import OrderedDict
 from .core import histogram as _histogram
-import warnings
+
+# range is a keyword so save the builtin so they can use it.
+_range = range
 
 
 def histogram(
     *args,
     bins=None,
+    range=None,
     dim=None,
     weights=None,
     density=False,
     block_size="auto",
     keep_coords=False,
-    bin_dim_suffix="_bin",
-    bin_edge_suffix="_bin_edge"
+    bin_dim_suffix="_bin"
 ):
     """Histogram applied along specified dimensions.
 
@@ -28,23 +29,38 @@ def histogram(
         Input data. The number of input arguments determines the dimensonality of
         the histogram. For example, two arguments prodocue a 2D histogram. All
         args must be aligned and have the same dimensions.
-    bins :  int or array_like or a list of ints or arrays, optional
+    bins :  int, str or numpy array or a list of ints, strs and/or arrays, optional
         If a list, there should be one entry for each item in ``args``.
-        The bin specification:
+        The bin specifications are as follows:
 
-          * If int, the number of bins for all arguments in ``args``.
-          * If array_like, the bin edges for all arguments in ``args``.
-          * If a list of ints, the number of bins  for every argument in ``args``.
-          * If a list arrays, the bin edges for each argument in ``args``
-            (required format for Dask inputs).
-          * A combination [int, array] or [array, int], where int
-            is the number of bins and array is the bin edges.
+          * If int; the number of bins for all arguments in ``args``.
+          * If str; the method used to automatically calculate the optimal bin width
+            for all arguments in ``args``, as defined by numpy `histogram_bin_edges`.
+          * If numpy array; the bin edges for all arguments in ``args``.
+          * If a list of ints, strs and/or arrays; the bin specification as
+            above for every argument in ``args``.
 
         When bin edges are specified, all but the last (righthand-most) bin include
         the left edge and exclude the right edge. The last bin includes both edges.
 
-        A ``TypeError`` will be raised if ``args`` contains dask arrays and
-        ``bins`` are not specified explicitly as a list of arrays.
+        A TypeError will be raised if args contains dask arrays and bins are not
+        specified explicitly as an array or list of arrays. This is because other
+        bin specifications trigger computation.
+    range : (float, float) or a list of (float, float), optional
+        If a list, there should be one entry for each item in ``args``.
+        The range specifications are as follows:
+
+          * If (float, float); the lower and upper range(s) of the bins for all
+            arguments in ``args``. Values outside the range are ignored. The first
+            element of the range must be less than or equal to the second. `range`
+            affects the automatic bin computation as well. In this case, while bin
+            width is computed to be optimal based on the actual data within `range`,
+            the bin count will fill the entire range including portions containing
+            no data.
+          * If a list of (float, float); the ranges as above for every argument in
+            ``args``.
+          * If not provided, range is simply ``(arg.min(), arg.max())`` for each
+            arg.
     dim : tuple of strings, optional
         Dimensions over which which the histogram is computed. The default is to
         compute the histogram of the flattened array.
@@ -72,11 +88,15 @@ def histogram(
         chunks (dask inputs) or an experimental built-in heuristic (numpy inputs).
     keep_coords : bool, optional
         If ``True``, keep all coordinates. Default: ``False``
+    bin_dim_suffix : str, optional
+        Suffix to append to input arg names to define names of output bin
+        dimensions
 
     Returns
     -------
-    hist : array
-        The values of the histogram.
+    hist : xarray.DataArray
+        The values of the histogram. For each bin, the midpoint of the bin edges
+        is given along the bin coordinates.
 
     """
 
@@ -85,12 +105,6 @@ def histogram(
     # TODO: allow list of weights as well
     N_weights = 1 if weights is not None else 0
 
-    # some sanity checks
-    # TODO: replace this with a more robust function
-    assert len(bins) == N_args
-    for bin in bins:
-        assert isinstance(bin, np.ndarray), "all bins must be numpy arrays"
-
     for a in args:
         # TODO: make this a more robust check
         assert a.name is not None, "all arrays must have a name"
@@ -140,21 +154,15 @@ def histogram(
         dims_to_keep = []
         axis = None
 
-    # Allow future warning for https://github.com/xgcm/xhistogram/pull/45
-    with warnings.catch_warnings():
-        warnings.filterwarnings(
-            "ignore",
-            message="Future versions of xhistogram\\.core\\.histogram will return",
-            category=FutureWarning,
-        )
-        h_data = _histogram(
-            *args_data,
-            weights=weights_data,
-            bins=bins,
-            axis=axis,
-            density=density,
-            block_size=block_size
-        )
+    h_data, bins = _histogram(
+        *args_data,
+        weights=weights_data,
+        bins=bins,
+        range=range,
+        axis=axis,
+        density=density,
+        block_size=block_size
+    )
 
     # create output dims
     new_dims = [a.name + bin_dim_suffix for a in args[:N_args]]
@@ -195,7 +203,7 @@ def histogram(
     # this feels like a hack
     # def _histogram_wrapped(*args, **kwargs):
     #     alist = list(args)
-    #     weights = [alist.pop() for n in range(N_weights)]
+    #     weights = [alist.pop() for n in _range(N_weights)]
     #     if N_weights == 0:
     #         weights = None
     #     elif N_weights == 1:
