diff --git a/firanka/ranges.py b/firanka/ranges.py
index a2b2ae1..3e06c1e 100644
--- a/firanka/ranges.py
+++ b/firanka/ranges.py
@@ -1,9 +1,11 @@
 # coding=UTF-8
 from __future__ import print_function, absolute_import, division
-import six
+
 import functools
 import math
 
+import six
+
 __all__ = [
     'Range',
     'REAL_SET',
@@ -31,6 +33,16 @@ class Range(object):
                      self.right_inc)
 
     def __init__(self, *args):
+        """
+        Create like:
+
+        * Range('<a;b>')
+        * Range(a, b, is_left_closed_, is_right_closed)
+        * Range(a, b) - will have both sides closed, unless one is inf
+        * Range(slice(a, b)) - will have both sides closed, unless one is None
+
+        :param args:
+        """
         if len(args) == 1:
             rs, = args
             if isinstance(rs, type(self)):
@@ -48,6 +60,10 @@ class Range(object):
                 start, stop = rs[1:-1].split(';')
                 args = float(start), float(stop), rs[0] == '<', rs[-1] == '>'
 
+        elif len(args) == 2:
+            args = args[0], args[1], not math.isinf(args[0]), not math.isinf(
+                args[1])
+
         q = lambda a, b, args: args[a] and math.isinf(args[b])
 
         if q(2, 0, args) or q(3, 1, args):
@@ -65,7 +81,7 @@ class Range(object):
         if isinstance(x, Range):
             if ((x.start == self.start) and (x.left_inc ^ self.left_inc)) \
                     or ((x.stop == self.stop) and (
-                        x.right_inc ^ self.right_inc)):
+                                x.right_inc ^ self.right_inc)):
                 return False
 
             return (x.start >= self.start) and (x.stop <= self.stop)
@@ -80,15 +96,15 @@ class Range(object):
 
     def is_empty(self):
         return (self.start == self.stop) and not (
-        self.left_inc or self.right_inc)
+            self.left_inc or self.right_inc)
 
     def length(self):
         return self.stop - self.start
 
     def __repr__(self):
         return 'Range(%s, %s, %s, %s)' % (
-        repr(self.start), repr(self.stop), repr(self.left_inc),
-        repr(self.right_inc))
+            repr(self.start), repr(self.stop), repr(self.left_inc),
+            repr(self.right_inc))
 
     def __getitem__(self, item):
         if not isinstance(item, slice):
diff --git a/firanka/series.py b/firanka/series/base.py
similarity index 88%
rename from firanka/series.py
rename to firanka/series/base.py
index c1bb0cc..6182ce0 100644
--- a/firanka/series.py
+++ b/firanka/series/base.py
@@ -1,19 +1,10 @@
 # coding=UTF-8
 from __future__ import print_function, absolute_import, division
 
-import math
-
 import six
 
 from firanka.exceptions import NotInDomainError
-from firanka.ranges import Range, REAL_SET, EMPTY_SET
-
-__all__ = [
-    'FunctionSeries',
-    'DiscreteSeries',
-    'ModuloSeries',
-    'Series',
-]
+from firanka.ranges import Range, EMPTY_SET
 
 
 class Series(object):
@@ -286,31 +277,3 @@ class JoinedSeries(Series):
 
     def _get_for(self, item):
         return self.op(self.ser1._get_for(item), self.ser2._get_for(item))
-
-
-class ModuloSeries(Series):
-    def __init__(self, series, *args, **kwargs):
-        """
-        Construct a modulo series
-        :param series: base series to use
-        :raise ValueError: invalid domain length
-        """
-        super(ModuloSeries, self).__init__(REAL_SET, *args, **kwargs)
-
-        self.series = series
-        self.period = self.series.domain.length()
-
-        if self.period == 0:
-            raise ValueError('Modulo series cannot have a period of 0')
-        elif math.isinf(self.period):
-            raise ValueError('Modulo series cannot have an infinite period')
-
-    def _get_for(self, item):
-        if item < 0:
-            item = -(item // self.period) * self.period + item
-        elif item > self.period:
-            item = item - (item // self.period) * self.period
-        elif item == self.period:
-            item = 0
-
-        return self.series._get_for(self.series.domain.start + item)
diff --git a/firanka/timeproviders.py b/firanka/timeproviders.py
index 2cca5f4..47dbd0c 100644
--- a/firanka/timeproviders.py
+++ b/firanka/timeproviders.py
@@ -1,10 +1,8 @@
 # coding=UTF-8
 from __future__ import print_function, absolute_import, division
-import six
-import logging
 
-from .series import Series
 from .ranges import Range
+from .series import Series
 
 
 class BijectionMapping(object):

