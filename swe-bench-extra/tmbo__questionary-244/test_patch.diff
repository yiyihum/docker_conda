diff --git a/tests/test_examples.py b/tests/test_examples.py
index 8fca7fc..274faa6 100644
--- a/tests/test_examples.py
+++ b/tests/test_examples.py
@@ -101,3 +101,28 @@ def test_autocomplete_example():
 
     assert result_dict == {"ants": "Polyergus lucidus"}
     assert result_py == "Polyergus lucidus"
+
+
+def test_advanced_workflow_example():
+    from examples.advanced_workflow import ask_dictstyle
+
+    text = (
+        KeyInputs.ENTER
+        + "questionary"
+        + KeyInputs.ENTER
+        + KeyInputs.DOWN
+        + KeyInputs.DOWN
+        + KeyInputs.ENTER
+        + "Hello World"
+        + KeyInputs.ENTER
+        + "\r"
+    )
+
+    result_dict = ask_with_patched_input(ask_dictstyle, text)
+
+    assert result_dict == {
+        "intro": None,
+        "conditional_step": True,
+        "next_question": "questionary",
+        "second_question": "Hello World",
+    }
diff --git a/tests/test_prompt.py b/tests/test_prompt.py
index 186bae8..9a9a84b 100644
--- a/tests/test_prompt.py
+++ b/tests/test_prompt.py
@@ -2,6 +2,7 @@ import pytest
 
 from questionary.prompt import PromptParameterException
 from questionary.prompt import prompt
+from tests.utils import patched_prompt
 
 
 def test_missing_message():
@@ -47,3 +48,31 @@ def test_invalid_question_type():
                 }
             ]
         )
+
+
+def test_missing_print_message():
+    """Test 'print' raises exception if missing 'message'"""
+    with pytest.raises(PromptParameterException):
+        prompt(
+            [
+                {
+                    "name": "test",
+                    "type": "print",
+                }
+            ]
+        )
+
+
+def test_print_no_name():
+    """'print' type doesn't require a name so it
+    should not throw PromptParameterException"""
+    questions = [{"type": "print", "message": "Hello World"}]
+    result = patched_prompt(questions, "")
+    assert result == {}
+
+
+def test_print_with_name():
+    """'print' type should return {name: None} when name is provided"""
+    questions = [{"name": "hello", "type": "print", "message": "Hello World"}]
+    result = patched_prompt(questions, "")
+    assert result == {"hello": None}
