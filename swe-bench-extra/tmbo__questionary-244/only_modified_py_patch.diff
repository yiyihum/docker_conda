diff --git a/examples/advanced_workflow.py b/examples/advanced_workflow.py
index 6f820f8..5b06633 100644
--- a/examples/advanced_workflow.py
+++ b/examples/advanced_workflow.py
@@ -6,6 +6,14 @@ from questionary import prompt
 
 def ask_dictstyle(**kwargs):
     questions = [
+        {
+            # just print a message, don't ask a question
+            # does not require a name (but if provided, is ignored) and does not return a value
+            "type": "print",
+            "name": "intro",
+            "message": "This example demonstrates advanced features! ðŸ¦„",
+            "style": "bold italic",
+        },
         {
             "type": "confirm",
             "name": "conditional_step",
@@ -27,6 +35,14 @@ def ask_dictstyle(**kwargs):
             "message": "Select item",
             "choices": ["item1", "item2", Separator(), "other"],
         },
+        {
+            # just print a message, don't ask a question
+            # does not require a name and does not return a value
+            "type": "print",
+            "message": "Please enter a value for 'other'",
+            "style": "bold italic fg:darkred",
+            "when": lambda x: x["second_question"] == "other",
+        },
         {
             "type": "text",
             # intentionally overwrites result from previous question
@@ -35,7 +51,7 @@ def ask_dictstyle(**kwargs):
             "when": lambda x: x["second_question"] == "other",
         },
     ]
-    return prompt(questions)
+    return prompt(questions, **kwargs)
 
 
 if __name__ == "__main__":
diff --git a/questionary/prompt.py b/questionary/prompt.py
index 0180f0d..5cabcee 100644
--- a/questionary/prompt.py
+++ b/questionary/prompt.py
@@ -11,6 +11,7 @@ from questionary import utils
 from questionary.constants import DEFAULT_KBI_MESSAGE
 from questionary.prompts import AVAILABLE_PROMPTS
 from questionary.prompts import prompt_by_name
+from questionary.prompts.common import print_formatted_text
 
 
 class PromptParameterException(ValueError):
@@ -143,7 +144,8 @@ def unsafe_prompt(
         # import the question
         if "type" not in question_config:
             raise PromptParameterException("type")
-        if "name" not in question_config:
+        # every type except 'print' needs a name
+        if "name" not in question_config and question_config["type"] != "print":
             raise PromptParameterException("name")
 
         _kwargs = kwargs.copy()
@@ -151,7 +153,7 @@ def unsafe_prompt(
 
         _type = _kwargs.pop("type")
         _filter = _kwargs.pop("filter", None)
-        name = _kwargs.pop("name")
+        name = _kwargs.pop("name", None) if _type == "print" else _kwargs.pop("name")
         when = _kwargs.pop("when", None)
 
         if true_color:
@@ -172,6 +174,22 @@ def unsafe_prompt(
                     "'when' needs to be function that accepts a dict argument"
                 )
 
+        # handle 'print' type
+        if _type == "print":
+            try:
+                message = _kwargs.pop("message")
+            except KeyError as e:
+                raise PromptParameterException("message") from e
+
+            # questions can take 'input' arg but print_formatted_text does not
+            # Remove 'input', if present, to avoid breaking during tests
+            _kwargs.pop("input", None)
+
+            print_formatted_text(message, **_kwargs)
+            if name:
+                answers[name] = None
+            continue
+
         choices = question_config.get("choices")
         if choices is not None and callable(choices):
             calculated_choices = choices(answers)

