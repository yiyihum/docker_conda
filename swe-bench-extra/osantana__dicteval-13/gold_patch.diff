diff --git a/README.rst b/README.rst
index 2b11f85..a815a98 100644
--- a/README.rst
+++ b/README.rst
@@ -48,6 +48,17 @@ Functions
 You can use the following builtin functions in your expressions:
 
 
+Function ``=any``
+'''''''''''''''''
+
+Returns ``True`` if any element of sequence is true.
+
+    >>> dicteval({"=any", [1, 2, 3]})
+    True
+    >>> dicteval({"=any", [0, 0]})
+    False
+
+
 Function ``=eq``
 ''''''''''''''''
 
@@ -109,6 +120,16 @@ Returns a number with the product of arguments:
    >>> dicteval({"=mul": [3, 5]})
    15
 
+Function ``=all``
+'''''''''''''''''
+
+Return True if all elements of the iterable are true (or if the iterable is empty)
+
+   >>> dicteval({"=mul": (True, False)})
+   False
+   >>> dicteval({"=mul": (True, True)})
+   True
+
 To Do
 -----
 
diff --git a/dicteval/__init__.py b/dicteval/__init__.py
index 5978b4e..57602cc 100644
--- a/dicteval/__init__.py
+++ b/dicteval/__init__.py
@@ -16,6 +16,9 @@ class LanguageSpecification:
 
 
 class BuiltinLanguage(LanguageSpecification):
+    def function_any(self, value, evaluator, context):
+        return any([evaluator(v, context) for v in value])
+
     def function_eq(self, value, evaluator, context):
         value = [evaluator(v, context) for v in value]
         return not value or value.count(value[0]) == len(value)
@@ -35,6 +38,9 @@ class BuiltinLanguage(LanguageSpecification):
     def function_mul(self, value, evaluator, context):
         return functools.reduce(operator.mul, (evaluator(v, context) for v in value))
 
+    def function_all(self, value, evaluator, context):
+        return all(evaluator(v, context) for v in value)
+
 
 class Evaluator:
     def __init__(self, language_spec):
