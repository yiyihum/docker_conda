diff --git a/tests/helpers_test.py b/tests/helpers_test.py
index b4b1447..9814a7f 100644
--- a/tests/helpers_test.py
+++ b/tests/helpers_test.py
@@ -18,6 +18,11 @@ from tflens.helper.table import (
   MarkdownTableHelper,
   HtmlTableHelper
 )
+from tflens.helper.remote import RemoteHelper
+from tflens.helper.location import (
+  S3LocationHelper,
+  HttpLocationHelper
+)
 
 class TestTableHelper(unittest.TestCase):
 
@@ -108,3 +113,83 @@ class TestHtmlTableHelper(unittest.TestCase):
       html_file_content = html_file.read()
 
     self.assertEqual(html_file_content.replace('\n', ''), self.file_htmltable_output.replace('\n', ''))
+
+class TestRemoteHelper(unittest.TestCase):
+
+  def setUp(self):
+    self.local_file_location = 'local/terraform.tfstate'
+    self.s3_file_location = 's3://local/terraform.tfstate'
+    self.http_file_location = 'http://local/terraform.tfstate'
+    self.https_file_location = 'https://local/terraform.tfstate'
+
+  def test_invoke_local_remote_controller(self):
+    remote_helper = RemoteHelper(self.local_file_location)
+
+    self.assertEqual(
+      remote_helper.get_remote_type(),
+      "local"
+    )
+
+  def test_invoke_s3_remote_controller(self):
+    remote_helper = RemoteHelper(self.s3_file_location)
+
+    self.assertEqual(
+      remote_helper.get_remote_type(),
+      "s3"
+    )
+
+  def test_invoke_http_remote_controller(self):
+    remote_helper = RemoteHelper(self.http_file_location)
+
+    self.assertEqual(
+      remote_helper.get_remote_type(),
+      "http"
+    )
+
+  def test_invoke_https_remote_controller(self):
+    remote_helper = RemoteHelper(self.https_file_location)
+
+    self.assertEqual(
+      remote_helper.get_remote_type(),
+      "https"
+    )
+
+class TestLocationHelper(unittest.TestCase):
+
+  def setUp(self):
+    self.s3_file_location = 's3://local/terraform.tfstate'
+    self.non_valid_s3_file_location = 's3:/local/terraform.tfstate'
+    self.http_file_location = 'http://local/terraform.tfstate'
+    self.non_valid_http_file_location = 'http:/local/terraform.tfstate'
+    self.https_file_location = 'https://local/terraform.tfstate'
+    self.non_valid_https_file_location = 'https:/local/terraform.tfstate'
+
+  def test_valid_s3_remote_location(self):
+    location_helper = S3LocationHelper(self.s3_file_location)
+
+    self.assertTrue(location_helper.validate())
+
+  def test_non_valid_s3_remote_location(self):
+    location_helper = S3LocationHelper(self.non_valid_s3_file_location)
+
+    self.assertFalse(location_helper.validate())
+
+  def test_valid_http_remote_location(self):
+    location_helper = HttpLocationHelper(self.http_file_location)
+
+    self.assertTrue(location_helper.validate())
+
+  def test_non_valid_http_remote_location(self):
+    location_helper = HttpLocationHelper(self.non_valid_http_file_location)
+
+    self.assertFalse(location_helper.validate())
+
+  def test_valid_https_remote_location(self):
+    location_helper = HttpLocationHelper(self.https_file_location)
+
+    self.assertTrue(location_helper.validate())
+
+  def test_non_valid_https_remote_location(self):
+    location_helper = HttpLocationHelper(self.non_valid_https_file_location)
+
+    self.assertFalse(location_helper.validate())
diff --git a/tests/services_test.py b/tests/services_test.py
index eaee6d2..5028226 100644
--- a/tests/services_test.py
+++ b/tests/services_test.py
@@ -16,7 +16,9 @@ from tflens.service.tfstate import (
 from tflens.exception.exception import (
   CannotLoadLocalFile,
   CannotReadLocalFile,
-  CannotLoadRemoteFile
+  CannotLoadRemoteFile,
+  NotValidS3Location,
+  NotValidHttpLocation
 )
 
 @mock_s3
@@ -27,8 +29,9 @@ class TestRemoteS3TfStateService(unittest.TestCase):
     self.valid_content_key = 'tflens/terraform.tfstate'
     self.non_valid_key = 'none'
 
-    self.valid_tfstate_file = "{}/{}".format(self.bucket, self.valid_content_key)
-    self.non_existing_tfstate_file = "{}/{}".format(self.bucket, self.non_valid_key)
+    self.valid_tfstate_file = "s3://{}/{}".format(self.bucket, self.valid_content_key)
+    self.non_existing_tfstate_file = "s3://{}/{}".format(self.bucket, self.non_valid_key)
+    self.non_valid_tfstate_location = "s3:/{}/{}".format(self.bucket, self.valid_content_key)
 
     with mock_s3():
       s3 = boto3.client("s3")
@@ -57,12 +60,20 @@ class TestRemoteS3TfStateService(unittest.TestCase):
       remote_s3_tfstate_service.read_content
     )
 
+  def test_non_valid_remote_s3_file_location(self):
+    self.assertRaises(
+      NotValidS3Location,
+      RemoteS3TfStateService,
+      self.non_valid_tfstate_location
+    )
+
 class TestRemoteHttpTfStateService(unittest.TestCase):
 
   @requests_mock.mock()
   def setUp(self, mock):
     self.valid_tfstate_file = "http://valid_tfstate_file"
     self.non_existing_tfstate_file = "http://non_existing_tfstate_file"
+    self.non_valid_tfstate_location = "http:/non_existing_tfstate_file"
     self.user = "user"
     self.password = "password"
 
@@ -88,6 +99,13 @@ class TestRemoteHttpTfStateService(unittest.TestCase):
       remote_http_tfstate_service.read_content
     )
 
+  def test_non_valid_remote_http_file_location(self):
+    self.assertRaises(
+      NotValidHttpLocation,
+      RemoteHttpTfStateService,
+      self.non_valid_tfstate_location
+    )
+
 class TestLocalTfStateService(unittest.TestCase):
 
   def setUp(self):
