diff --git a/h_transport_materials/plotting.py b/h_transport_materials/plotting.py
index 3c904ac..35cb638 100644
--- a/h_transport_materials/plotting.py
+++ b/h_transport_materials/plotting.py
@@ -1,7 +1,8 @@
 import matplotlib.pyplot as plt
 import numpy as np
 from numpy.typing import ArrayLike
-from h_transport_materials import Property, PropertiesGroup
+import pint
+from h_transport_materials import Property, PropertiesGroup, ureg
 import math
 import matplotlib as mpl
 from typing import Union
@@ -37,6 +38,8 @@ def plot(
         else:
             range = prop.range
         T = np.linspace(*range, num=50)
+        if not isinstance(T, pint.Quantity):
+            T *= ureg.K
         if inverse_temperature:
             plt.xlabel("1/T (K$^{-1}$)")
             x = (1 / T)[::-1]
diff --git a/h_transport_materials/properties_group.py b/h_transport_materials/properties_group.py
index ac2fc03..09ed69f 100644
--- a/h_transport_materials/properties_group.py
+++ b/h_transport_materials/properties_group.py
@@ -1,8 +1,10 @@
 import numpy as np
 import json
 from pybtex.database import BibliographyData
+import pint
 
 from h_transport_materials.fitting import fit_arhenius
+from h_transport_materials import ureg
 
 
 class PropertiesGroup(list):
@@ -96,6 +98,8 @@ class PropertiesGroup(list):
                 if prop.range == None:
                     T_range = default_range
                 prop_T = np.linspace(T_range[0], T_range[1], num=samples_per_line)
+                if not isinstance(prop_T, pint.Quantity):
+                    prop_T = ureg.Quantity(prop_T, ureg.K)
                 prop_y = prop.value(prop_T)
 
             data_T = np.concatenate((data_T, prop_T))
@@ -103,7 +107,6 @@ class PropertiesGroup(list):
 
         # fit all the data
         pre_exp, act_energy = fit_arhenius(data_y, data_T)
-
         return pre_exp, act_energy
 
     def export_bib(self, filename: str):
diff --git a/h_transport_materials/property.py b/h_transport_materials/property.py
index 870dcd7..4f7a54f 100644
--- a/h_transport_materials/property.py
+++ b/h_transport_materials/property.py
@@ -297,7 +297,15 @@ class ArrheniusProperty(Property):
         self.range = (self.data_T.min(), self.data_T.max())
 
     def value(self, T, exp=np.exp):
-        return self.pre_exp * exp(-self.act_energy / k_B / T)
+        if not isinstance(T, pint.Quantity):
+            warnings.warn(f"no units were given with T, assuming {ureg.K}")
+            T = T * ureg.K
+        if not isinstance(self.pre_exp, pint.Quantity):
+            pre_exp = self.pre_exp * self.units
+        if not isinstance(self.act_energy, pint.Quantity):
+            act_energy = self.act_energy * DEFAULT_ENERGY_UNITS
+        k_B_u = k_B * ureg.eV * ureg.particle**-1 * ureg.K**-1
+        return pre_exp * exp(-act_energy / k_B_u / T)
 
 
 class Solubility(ArrheniusProperty):
