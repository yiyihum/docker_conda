diff --git a/tests/test_grep.py b/tests/test_grep.py
index 4a293f0..ade3c9b 100644
--- a/tests/test_grep.py
+++ b/tests/test_grep.py
@@ -102,6 +102,16 @@ class TestGrep(unittest.TestCase):
         except ColumnIdentifierError:
             pass
 
+    def test_index_out_of_range(self):
+        fcr = FilteringCSVReader(iter(self.tab2), patterns={3: '0'})
+        self.assertEqual(self.tab2[0], next(fcr))
+        self.assertEqual(self.tab2[4], next(fcr))
+        try:
+            next(fcr)
+            self.fail("Should be no more rows left.")
+        except StopIteration:
+            pass
+
     def test_any_match(self):
         fcr = FilteringCSVReader(iter(self.tab2), patterns={'age': 'only', 0: '2'}, any_match=True)
         self.assertEqual(self.tab2[0], next(fcr))
diff --git a/tests/test_utilities/test_csvsort.py b/tests/test_utilities/test_csvsort.py
index 796d11f..acd5512 100644
--- a/tests/test_utilities/test_csvsort.py
+++ b/tests/test_utilities/test_csvsort.py
@@ -29,7 +29,7 @@ class TestCSVSort(CSVKitTestCase, ColumnsTests, EmptyFileTests, NamesTests):
 
     def test_sort_date(self):
         reader = self.get_output_as_reader(['-c', '2', 'examples/testxls_converted.csv'])
-        test_order = [u'text', u'This row has blanks', u'Unicode! Σ', u'Chicago Tribune', u'Chicago Sun-Times', u'Chicago Reader']
+        test_order = [u'text', u'Chicago Tribune', u'Chicago Sun-Times', u'Chicago Reader', u'This row has blanks', u'Unicode! Σ']
         new_order = [six.text_type(r[0]) for r in reader]
         self.assertEqual(test_order, new_order)
 
@@ -45,8 +45,8 @@ class TestCSVSort(CSVKitTestCase, ColumnsTests, EmptyFileTests, NamesTests):
         new_order = [six.text_type(r[0]) for r in reader]
         self.assertEqual(test_order, new_order)
 
-    def test_sort_ints_and_nulls(self):
+    def test_sort_t_and_nulls(self):
         reader = self.get_output_as_reader(['-c', '2', 'examples/sort_ints_nulls.csv'])
-        test_order = ['b', '', '1', '2']
+        test_order = ['b', '1', '2', '']
         new_order = [six.text_type(r[1]) for r in reader]
         self.assertEqual(test_order, new_order)
