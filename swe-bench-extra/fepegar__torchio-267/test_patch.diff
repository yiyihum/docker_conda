diff --git a/tests/data/test_subject.py b/tests/data/test_subject.py
index 164036b..72adad4 100644
--- a/tests/data/test_subject.py
+++ b/tests/data/test_subject.py
@@ -3,6 +3,7 @@
 """Tests for Subject."""
 
 import tempfile
+import torch
 from torchio import Subject, ScalarImage, RandomFlip
 from ..utils import TorchioTestCase
 
@@ -30,3 +31,20 @@ class TestSubject(TorchioTestCase):
     def test_history(self):
         transformed = RandomFlip()(self.sample)
         self.assertIs(len(transformed.history), 1)
+
+    def test_inconsistent_shape(self):
+        subject = Subject(
+            a=ScalarImage(tensor=torch.rand(1, 2, 3, 4)),
+            b=ScalarImage(tensor=torch.rand(2, 2, 3, 4)),
+        )
+        subject.spatial_shape
+        with self.assertRaises(RuntimeError):
+            subject.shape
+
+    def test_inconsistent_spatial_shape(self):
+        subject = Subject(
+            a=ScalarImage(tensor=torch.rand(1, 3, 3, 4)),
+            b=ScalarImage(tensor=torch.rand(2, 2, 3, 4)),
+        )
+        with self.assertRaises(RuntimeError):
+            subject.spatial_shape
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 6dfb126..8a062f3 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -43,13 +43,6 @@ class TestUtils(TorchioTestCase):
         assert isinstance(guess_type('[1,3,5]'), list)
         assert isinstance(guess_type('test'), str)
 
-    def test_check_consistent_shape(self):
-        good_sample = self.sample
-        bad_sample = self.get_inconsistent_sample()
-        good_sample.check_consistent_shape()
-        with self.assertRaises(ValueError):
-            bad_sample.check_consistent_shape()
-
     def test_apply_transform_to_file(self):
         transform = RandomFlip()
         apply_transform_to_file(
diff --git a/tests/transforms/test_transforms.py b/tests/transforms/test_transforms.py
index a5c15ad..9a62306 100644
--- a/tests/transforms/test_transforms.py
+++ b/tests/transforms/test_transforms.py
@@ -51,6 +51,24 @@ class TestTransforms(TorchioTestCase):
             transforms.append(torchio.RandomLabelsToImage(label_key='label'))
         return torchio.Compose(transforms)
 
+    def test_transforms_dict(self):
+        transform = torchio.RandomNoise(keys=('t1', 't2'))
+        input_dict = {k: v.data for (k, v) in self.sample.items()}
+        transformed = transform(input_dict)
+        self.assertIsInstance(transformed, dict)
+
+    def test_transforms_dict_no_keys(self):
+        transform = torchio.RandomNoise()
+        input_dict = {k: v.data for (k, v) in self.sample.items()}
+        with self.assertRaises(RuntimeError):
+            transform(input_dict)
+
+    def test_transforms_image(self):
+        transform = self.get_transform(
+            channels=('default_image_name',), labels=False)
+        transformed = transform(self.sample.t1)
+        self.assertIsInstance(transformed, torchio.ScalarImage)
+
     def test_transforms_tensor(self):
         tensor = torch.rand(2, 4, 5, 8)
         transform = self.get_transform(
@@ -136,3 +154,9 @@ class TestTransforms(TorchioTestCase):
                 original_data,
                 f'Changes after {transform.name}'
             )
+
+
+class TestTransform(TorchioTestCase):
+    def test_abstract_transform(self):
+        with self.assertRaises(TypeError):
+            transform = torchio.Transform()
