diff --git a/dataclasses_json/mm.py b/dataclasses_json/mm.py
index 08a69e9..5df24eb 100644
--- a/dataclasses_json/mm.py
+++ b/dataclasses_json/mm.py
@@ -1,6 +1,7 @@
 import typing
 import warnings
 import sys
+from copy import deepcopy
 
 from dataclasses import MISSING, is_dataclass, fields as dc_fields
 from datetime import datetime
@@ -14,7 +15,7 @@ from marshmallow import fields, Schema, post_load
 from marshmallow_enum import EnumField
 
 from dataclasses_json.core import (_is_supported_generic, _decode_dataclass,
-                                   _ExtendedEncoder)
+                                   _ExtendedEncoder, _user_overrides)
 from dataclasses_json.utils import (_is_collection, _is_optional,
                                     _issubclass_safe, _timestamp_to_dt_aware,
                                     _is_new_type, _get_type_origin)
@@ -64,22 +65,23 @@ class _UnionField(fields.Field):
         return super()._serialize(value, attr, obj, **kwargs)
 
     def _deserialize(self, value, attr, data, **kwargs):
-        if isinstance(value, dict) and '__type' in value:
-            dc_name = value['__type']
+        tmp_value = deepcopy(value)
+        if isinstance(tmp_value, dict) and '__type' in tmp_value:
+            dc_name = tmp_value['__type']
             for type_, schema_ in self.desc.items():
                 if is_dataclass(type_) and type_.__name__ == dc_name:
-                    del value['__type']
-                    return schema_._deserialize(value, attr, data, **kwargs)
+                    del tmp_value['__type']
+                    return schema_._deserialize(tmp_value, attr, data, **kwargs)
         for type_, schema_ in self.desc.items():
-            if isinstance(value, _get_type_origin(type_)):
-                return schema_._deserialize(value, attr, data, **kwargs)
+            if isinstance(tmp_value, _get_type_origin(type_)):
+                return schema_._deserialize(tmp_value, attr, data, **kwargs)
         else:
             warnings.warn(
-                f'The type "{type(value).__name__}" (value: "{value}") '
+                f'The type "{type(tmp_value).__name__}" (value: "{tmp_value}") '
                 f'is not in the list of possible types of typing.Union '
                 f'(dataclass: {self.cls.__name__}, field: {self.field.name}). '
                 f'Value cannot be deserialized properly.')
-        return super()._deserialize(value, attr, data, **kwargs)
+        return super()._deserialize(tmp_value, attr, data, **kwargs)
 
 
 TYPES = {
@@ -236,10 +238,12 @@ def build_type(type_, options, mixin, field, cls):
 
 def schema(cls, mixin, infer_missing):
     schema = {}
+    overrides = _user_overrides(cls)
     for field in dc_fields(cls):
         metadata = (field.metadata or {}).get('dataclasses_json', {})
-        if 'mm_field' in metadata:
-            schema[field.name] = metadata['mm_field']
+        metadata = overrides[field.name]
+        if metadata.mm_field is not None:
+            schema[field.name] = metadata.mm_field
         else:
             type_ = field.type
             options = {}
@@ -259,6 +263,9 @@ def schema(cls, mixin, infer_missing):
                     # Union[str, int, None] is optional too, but it has more than 1 typed field.
                     type_ = type_.__args__[0]
 
+            if metadata.letter_case is not None:
+                options['data_key'] = metadata.letter_case(field.name)
+
             t = build_type(type_, options, mixin, field, cls)
             # if type(t) is not fields.Field:  # If we use `isinstance` we would return nothing.
             schema[field.name] = t
