diff --git a/tests/test_schema.py b/tests/test_schema.py
index 905e3b1..e565242 100644
--- a/tests/test_schema.py
+++ b/tests/test_schema.py
@@ -1,4 +1,5 @@
 from .entities import DataClassDefaultListStr, DataClassDefaultOptionalList, DataClassList, DataClassOptional
+from .test_letter_case import CamelCasePerson, KebabCasePerson, SnakeCasePerson, FieldNamePerson
 
 
 test_do_list = """[{}, {"children": [{"name": "a"}, {"name": "b"}]}]"""
@@ -21,3 +22,8 @@ class TestSchema:
     def test_optional(self):
         DataClassOptional.schema().loads('{"a": 4, "b": null}')
         assert True
+
+    def test_letter_case(self):
+        for cls in (CamelCasePerson, KebabCasePerson, SnakeCasePerson, FieldNamePerson):
+            p = cls('Alice')
+            assert p.to_dict() == cls.schema().dump(p)
diff --git a/tests/test_union.py b/tests/test_union.py
index 5f90ff2..c2e8650 100644
--- a/tests/test_union.py
+++ b/tests/test_union.py
@@ -125,6 +125,16 @@ def test_deserialize(expected_obj, data, data_json):
     assert s.loads(data_json) == expected_obj
 
 
+def test_deserialize_twice():
+    data = {"f1": [{"f1": 12, "__type": "Aux1"}, {"f1": "str3", "__type": "Aux2"}]}
+    expected_obj = C9([Aux1(12), Aux2("str3")])
+
+    s = C9.schema()
+    res1 = s.load(data)
+    res2 = s.load(data)
+    assert res1 == expected_obj and res2 == expected_obj
+
+
 @pytest.mark.parametrize('obj', [
     (C2(f1={"str1": "str1"})),
     (C3(f1=[0.12, 0.13, "str1"])),
