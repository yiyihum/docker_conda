diff --git a/bids/modeling/transformations/base.py b/bids/modeling/transformations/base.py
index 3c87f69f..85d5d1d2 100644
--- a/bids/modeling/transformations/base.py
+++ b/bids/modeling/transformations/base.py
@@ -91,6 +91,11 @@ class Transformation(metaclass=ABCMeta):
     # be passed through as-is even if categorical.
     _allow_categorical = None
 
+    # Boolean indicating whether to treat each key word argument as a one-to-one
+    # mapping with each variable or to treat the key word argument as applying to
+    # every input variable.
+    _sync_kwargs = True
+
     def __new__(cls, collection, variables, *args, **kwargs):
         t = super(Transformation, cls).__new__(cls)
         t._setup(collection, variables, *args, **kwargs)
@@ -117,7 +122,11 @@ class Transformation(metaclass=ABCMeta):
                 # 'variables'
                 kwargs[arg_spec.args[2 + i]] = arg_val
 
-        self.kwargs = kwargs
+        # listify kwargs if synced
+        if self._sync_kwargs:
+            self.kwargs = {k: listify(v) for k, v in kwargs.items()}
+        else:
+            self.kwargs = kwargs
 
         # Expand any detected variable group names or wild cards
         self._expand_variable_groups()
@@ -255,20 +264,22 @@ class Transformation(metaclass=ABCMeta):
         if not self._loopable:
             variables = [variables]
 
+        i_kwargs = kwargs
         for i, col in enumerate(variables):
-
+            if self._sync_kwargs:
+                i_kwargs = {k: v[i] for k, v in kwargs.items()}
             # If we still have a list, pass all variables in one block
             if isinstance(col, (list, tuple)):
-                result = self._transform(data, **kwargs)
+                result = self._transform(data, **i_kwargs)
                 if self._return_type not in ['none', None]:
                     col = col[0].clone(data=result, name=self.output[0])
             # Otherwise loop over variables individually
             else:
                 if self._groupable and self.groupby is not None:
                     result = col.apply(self._transform, groupby=self.groupby,
-                                       **kwargs)
+                                       **i_kwargs)
                 else:
-                    result = self._transform(data[i], **kwargs)
+                    result = self._transform(data[i], **i_kwargs)
 
             if self._return_type in ['none', None]:
                 continue
diff --git a/bids/modeling/transformations/compute.py b/bids/modeling/transformations/compute.py
index 71877c06..a2b1c0dd 100644
--- a/bids/modeling/transformations/compute.py
+++ b/bids/modeling/transformations/compute.py
@@ -192,6 +192,7 @@ class Sum(Transformation):
     _groupable = False
     _aligned_required = True
     _output_required = True
+    _sync_kwargs = False
 
     def _transform(self, data, weights=None):
         data = pd.concat(data, axis=1, sort=True)
diff --git a/bids/modeling/transformations/munge.py b/bids/modeling/transformations/munge.py
index ea0e1e28..5cc312c8 100644
--- a/bids/modeling/transformations/munge.py
+++ b/bids/modeling/transformations/munge.py
@@ -299,6 +299,7 @@ class Split(Transformation):
     _return_type = 'variable'
     _allow_categorical = ('by',)
     _densify = ('variables', 'by')
+    _sync_kwargs = False
 
     def _transform(self, var, by):
 
