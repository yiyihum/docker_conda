diff --git a/.github/workflows/test-package.yml b/.github/workflows/test-package.yml
index a428294..3822461 100644
--- a/.github/workflows/test-package.yml
+++ b/.github/workflows/test-package.yml
@@ -1,5 +1,7 @@
 name: CI
-on: [push]
+on: 
+  push:
+    branches: '**'
 
 jobs:
   ci:
diff --git a/tests/test_connection.py b/tests/test_connection.py
index 0f6c47e..2a93cb1 100644
--- a/tests/test_connection.py
+++ b/tests/test_connection.py
@@ -1,7 +1,11 @@
+import os
+
 import pytest
 
 from fastapi_mail import ConnectionConfig, FastMail, MessageSchema
 
+CONTENT = 'file test content'
+
 
 @pytest.mark.asyncio
 async def test_connection(mail_config):
@@ -44,6 +48,76 @@ async def test_html_message(mail_config):
     assert msg.html == 'html test'
 
 
+@pytest.mark.asyncio
+async def test_attachement_message(mail_config):
+    directory = os.getcwd()
+    attachement = directory + '/files/attachement.txt'
+
+    with open(attachement, 'w') as file:
+        file.write(CONTENT)
+
+    subject = 'testing'
+    to = 'to@example.com'
+    msg = MessageSchema(
+        subject=subject,
+        recipients=[to],
+        html='html test',
+        subtype='html',
+        attachments=[attachement],
+    )
+    conf = ConnectionConfig(**mail_config)
+    fm = FastMail(conf)
+
+    with fm.record_messages() as outbox:
+        await fm.send_message(message=msg)
+        mail = outbox[0]
+
+        assert len(outbox) == 1
+        assert mail._payload[1].get_content_maintype() == 'application'
+        assert mail._payload[1].__dict__.get('_headers')[0][1] == 'application/octet-stream'
+
+
+@pytest.mark.asyncio
+async def test_attachement_message_with_headers(mail_config):
+    directory = os.getcwd()
+    attachement = directory + '/files/attachement.txt'
+
+    with open(attachement, 'w') as file:
+        file.write(CONTENT)
+
+    subject = 'testing'
+    to = 'to@example.com'
+    msg = MessageSchema(
+        subject=subject,
+        recipients=[to],
+        html='html test',
+        subtype='html',
+        attachments=[
+            {
+                'file': attachement,
+                'headers': {'Content-ID': 'test ID'},
+                'mime_type': 'image',
+                'mime_subtype': 'png',
+            }
+        ],
+    )
+    conf = ConnectionConfig(**mail_config)
+    fm = FastMail(conf)
+
+    with fm.record_messages() as outbox:
+        await fm.send_message(message=msg)
+
+        assert len(outbox) == 1
+        mail = outbox[0]
+        assert mail._payload[1].get_content_maintype() == msg.attachments[0][1].get('mime_type')
+        assert mail._payload[1].get_content_subtype() == msg.attachments[0][1].get('mime_subtype')
+
+        assert mail._payload[1].__dict__.get('_headers')[0][1] == 'image/png'
+        assert mail._payload[1].__dict__.get('_headers')[4][1] == msg.attachments[0][1].get(
+            'headers'
+        ).get('Content-ID')
+
+
 @pytest.mark.asyncio
 async def test_jinja_message_list(mail_config):
     sender = f"{mail_config['MAIL_FROM_NAME']} <{mail_config['MAIL_FROM']}>"
