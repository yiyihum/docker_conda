diff --git a/sql_metadata.py b/sql_metadata.py
index 46aa30b..4a754ed 100644
--- a/sql_metadata.py
+++ b/sql_metadata.py
@@ -171,7 +171,7 @@ def get_query_columns(query: str) -> List[str]:
     return unique(columns)
 
 
-def _get_token_normalized_value(token: str) -> str:
+def _get_token_normalized_value(token: sqlparse.sql.Token) -> str:
     return token.value.translate(str.maketrans("", "", " \n\t\r")).upper()
 
 
@@ -208,7 +208,7 @@ def _update_table_names(
             "UPDATE",
             "TABLE",
         ]
-        and last_token not in ["AS"]
+        and last_token not in ["AS", "WITH"]
         and token.value not in ["AS", "SELECT"]
     ):
         if last_token == "." and next_token != ".":
@@ -289,16 +289,18 @@ def get_query_tables(query: str) -> List[str]:
     tokens = get_query_tokens(query)
 
     for index, token in enumerate(tokens):
-        # print([token, token.ttype, last_token, last_keyword])
-
         # remove whitespaces from token value and uppercase
         token_val_norm = _get_token_normalized_value(token)
+
+        # print([token, token_val_norm, token.ttype, last_keyword])
+
         if token.is_keyword and token_val_norm in table_syntax_keywords:
             # keep the name of the last keyword, the next one can be a table name
             last_keyword = token_val_norm
             # print('keyword', last_keyword)
-        elif str(token) == "(":
+        elif str(token) == "(" and last_keyword in ["INTO", "VALUES"]:
             # reset the last_keyword for INSERT `foo` VALUES(id, bar) ...
+            # reset the last_keyword for INSERT `foo` (col1, col2) VALUES(id, bar) ...
             last_keyword = None
         elif token.is_keyword and token_val_norm in ["FORCE", "ORDER", "GROUPBY"]:
             # reset the last_keyword for queries like:
