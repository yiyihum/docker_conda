diff --git a/hapic/ext/aiohttp/context.py b/hapic/ext/aiohttp/context.py
index 8421567..bae729b 100644
--- a/hapic/ext/aiohttp/context.py
+++ b/hapic/ext/aiohttp/context.py
@@ -22,6 +22,7 @@ from hapic.exception import WorkflowException
 from hapic.processor.main import Processor
 from hapic.processor.main import ProcessValidationError
 from hapic.processor.main import RequestParameters
+from hapic.util import LowercaseDictKeys
 
 # Aiohttp regular expression to locate url parameters
 AIOHTTP_RE_PATH_URL = re.compile(r"{([^:<>]+)(?::[^<>]+)?}")
@@ -35,8 +36,8 @@ class AiohttpRequestParameters(RequestParameters):
     @property
     async def body_parameters(self) -> dict:
         if self._parsed_body is None:
-            content_type = self.header_parameters.get("Content-Type")
-            is_json = content_type == "application/json"
+            content_type = self.header_parameters.get("Content-Type", "")
+            is_json = content_type.lower() == "application/json"
 
             if is_json:
                 self._parsed_body = await self._request.json()
@@ -60,7 +61,10 @@ class AiohttpRequestParameters(RequestParameters):
 
     @property
     def header_parameters(self):
-        return dict(self._request.headers.items())
+        # NOTE BS 2019-01-21: headers can be read as lowercase
+        return LowercaseDictKeys(
+            (k.lower(), v) for k, v in self._request.headers.items()
+        )
 
     @property
     async def files_parameters(self):
diff --git a/hapic/ext/bottle/context.py b/hapic/ext/bottle/context.py
index 0bcb82f..e637f5e 100644
--- a/hapic/ext/bottle/context.py
+++ b/hapic/ext/bottle/context.py
@@ -17,6 +17,7 @@ from hapic.exception import RouteNotFound
 from hapic.processor.main import Processor
 from hapic.processor.main import ProcessValidationError
 from hapic.processor.main import RequestParameters
+from hapic.util import LowercaseDictKeys
 
 try:  # Python 3.5+
     from http import HTTPStatus
@@ -49,7 +50,9 @@ class BottleContext(BaseContext):
         query_parameters = MultiDict(bottle.request.query.allitems())
         body_parameters = dict(bottle.request.json or {})
         form_parameters = MultiDict(bottle.request.forms.allitems())
-        header_parameters = dict(bottle.request.headers)
+        header_parameters = LowercaseDictKeys(
+            (k.lower(), v) for k, v in bottle.request.headers.items()
+        )
         files_parameters = dict(bottle.request.files)
 
         return RequestParameters(
diff --git a/hapic/ext/flask/context.py b/hapic/ext/flask/context.py
index eaaef12..09f2d4f 100644
--- a/hapic/ext/flask/context.py
+++ b/hapic/ext/flask/context.py
@@ -14,6 +14,7 @@ from hapic.error.main import ErrorBuilderInterface
 from hapic.processor.main import Processor
 from hapic.processor.main import ProcessValidationError
 from hapic.processor.main import RequestParameters
+from hapic.util import LowercaseDictKeys
 
 try:  # Python 3.5+
     from http import HTTPStatus
@@ -51,7 +52,9 @@ class FlaskContext(BaseContext):
             query_parameters=request.args,  # TODO: Check
             body_parameters=request.get_json(),  # TODO: Check
             form_parameters=request.form,
-            header_parameters=request.headers,
+            header_parameters=LowercaseDictKeys(
+                (k.lower(), v) for k, v in request.headers.items()
+            ),
             files_parameters=request.files,
         )
 
diff --git a/hapic/ext/pyramid/context.py b/hapic/ext/pyramid/context.py
index c0fa0e0..683f513 100644
--- a/hapic/ext/pyramid/context.py
+++ b/hapic/ext/pyramid/context.py
@@ -16,6 +16,7 @@ from hapic.processor.main import Processor
 from hapic.processor.main import ProcessValidationError
 from hapic.processor.main import RequestParameters
 from hapic.util import LOGGER_NAME
+from hapic.util import LowercaseDictKeys
 
 try:  # Python 3.5+
     from http import HTTPStatus
@@ -72,7 +73,9 @@ class PyramidContext(BaseContext):
             query_parameters=req.GET,
             body_parameters=json_body,
             form_parameters=req.POST,
-            header_parameters=req.headers,
+            header_parameters=LowercaseDictKeys(
+                (k.lower(), v) for k, v in req.headers.items()
+            ),
             files_parameters=files_parameters,
         )
 
diff --git a/hapic/util.py b/hapic/util.py
index af4f3f8..b8fe7c2 100644
--- a/hapic/util.py
+++ b/hapic/util.py
@@ -1,2 +1,53 @@
 # -*- coding: utf-8 -*-
+import typing
+
 LOGGER_NAME = "hapic"
+
+
+class LowercaseDictKeys(dict):
+    """
+    Like a dict but try to use lowercase version of given keys.
+    Must give lowercase key to ths dict when fill it.
+    """
+
+    def get(
+        self, key: typing.Any, default_value: typing.Any = None
+    ) -> typing.Any:
+        """
+        Return value for given key.
+        Try with lowercase of given key. If not possible, do with given key.
+        """
+        try:
+            return super().get(key.lower(), default_value)
+        except AttributeError:
+            return super().get(key, default_value)
+
+    def __contains__(self, key: typing.Any) -> bool:
+        """
+        True if the dictionary has the specified key, else False.
+        Try with lowercase of given key. If not possible, do with given key.
+        """
+        try:
+            return super().__contains__(key.lower())
+        except AttributeError:
+            return super().__contains__(key)
+
+    def __delitem__(self, key: typing.Any) -> None:
+        """
+        Delete self[key].
+        Try with lowercase of given key. If not possible, do with given key.
+        """
+        try:
+            return super().__delitem__(key.lower())
+        except AttributeError:
+            return super().__delitem__(key)
+
+    def __getitem__(self, key: typing.Any) -> typing.Any:
+        """
+        Return value for given key.
+        Try with lowercase of given key. If not possible, do with given key.
+        """
+        try:
+            return super().__getitem__(key.lower())
+        except AttributeError:
+            return super().__getitem__(key)

