diff --git a/bycycle/burst/amp.py b/bycycle/burst/amp.py
index ffc099c..10375c2 100644
--- a/bycycle/burst/amp.py
+++ b/bycycle/burst/amp.py
@@ -1,4 +1,5 @@
 """Detect bursts: amplitude threshold approach."""
+import numpy as np
 
 from bycycle.utils.checks import check_param_range
 from bycycle.burst.utils import check_min_burst_cycles
@@ -42,6 +43,7 @@ def detect_bursts_amp(df_features, burst_fraction_threshold=1, min_n_cycles=3):
 
     # Determine cycles that are defined as bursting throughout the whole cycle
     is_burst = [frac >= burst_fraction_threshold for frac in df_features['burst_fraction']]
+    is_burst = np.array(is_burst)
 
     df_features['is_burst'] = check_min_burst_cycles(is_burst, min_n_cycles=min_n_cycles)
 
diff --git a/bycycle/burst/cycle.py b/bycycle/burst/cycle.py
index 6ff4c6b..008d101 100644
--- a/bycycle/burst/cycle.py
+++ b/bycycle/burst/cycle.py
@@ -90,6 +90,7 @@ def detect_bursts_cycles(df_features, amp_fraction_threshold=0., amp_consistency
 
     # Set the burst status for each cycle as the answer across all criteria
     is_burst = amp_fraction & amp_consistency & period_consistency & monotonicity
+    is_burst = is_burst.to_numpy()
 
     # Set the first and last cycles to not be part of a burst
     is_burst[0] = False
diff --git a/bycycle/burst/utils.py b/bycycle/burst/utils.py
index e57ea98..de82a8b 100644
--- a/bycycle/burst/utils.py
+++ b/bycycle/burst/utils.py
@@ -31,23 +31,28 @@ def check_min_burst_cycles(is_burst, min_n_cycles=3):
     array([False, False, False, False,  True,  True,  True,  True, False])
     """
 
-    # Ensure argument is within valid range
-    check_param_range(min_n_cycles, 'min_n_cycles', (0, np.inf))
-
-    temp_cycle_count = 0
+    if not isinstance(is_burst, np.ndarray):
+        raise ValueError("Argument 'is_burst' must be a numpy array!")
 
-    for idx, bursting in enumerate(is_burst):
+    # handle special case where input array is empty
+    if len(is_burst) == 0:
+        return is_burst
 
-        if bursting:
-            temp_cycle_count += 1
+    # Ensure argument is within valid range
+    check_param_range(min_n_cycles, 'min_n_cycles', (0, np.inf))
 
-        else:
+    # extract transition indices
+    diff = np.diff(is_burst, prepend=0, append=0)
+    transitions = np.flatnonzero(diff)
+    ons, offs = transitions[0::2], transitions[1::2]
 
-            if temp_cycle_count < min_n_cycles:
-                for c_rm in range(temp_cycle_count):
-                    is_burst[idx - 1 - c_rm] = False
+    # select only segments with long enough duration
+    durations = offs - ons
+    too_short = durations < min_n_cycles
 
-            temp_cycle_count = 0
+    # construct bool time series from transition indices
+    for silence_on, silence_off in zip(ons[too_short], offs[too_short]):
+        is_burst[silence_on:silence_off] = False
 
     return is_burst
 

