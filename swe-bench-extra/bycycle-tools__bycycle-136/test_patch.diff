diff --git a/bycycle/tests/burst/test_utils.py b/bycycle/tests/burst/test_utils.py
index 81af247..c63498e 100644
--- a/bycycle/tests/burst/test_utils.py
+++ b/bycycle/tests/burst/test_utils.py
@@ -1,6 +1,8 @@
 """Test burst.utils."""
 
 import numpy as np
+import pandas as pd
+import pytest
 
 from bycycle.features import compute_features
 from bycycle.burst.utils import *
@@ -9,19 +11,49 @@ from bycycle.burst.utils import *
 ###################################################################################################
 ###################################################################################################
 
-def test_check_min_burst_cycles():
+@pytest.mark.parametrize("min_n_cycles", [2, 3])
+def test_check_min_burst_cycles(min_n_cycles):
 
-    is_burst = np.array([True, True, True, False])
-    is_burst_check = check_min_burst_cycles(is_burst, min_n_cycles=3)
+    is_burst = np.array([False, True, True, False, False])
+
+    is_burst_check = check_min_burst_cycles(is_burst.copy(), min_n_cycles=min_n_cycles)
+
+    burst_should_be_kept = min_n_cycles < 3
+    burst_kept = (is_burst == is_burst_check).all()
+
+    assert burst_kept == burst_should_be_kept
+
+
+@pytest.mark.parametrize("side", ["start", "end"])
+def test_check_min_burst_cycles_bursting_at_side(side):
+
+    min_n_cycles = 5
+    is_burst = [True] * min_n_cycles + [False]
+    is_burst = np.flip(is_burst) if side == "end" else np.array(is_burst)
+
+    is_burst_check = check_min_burst_cycles(is_burst.copy(), min_n_cycles=min_n_cycles)
 
     assert (is_burst == is_burst_check).all()
 
-    is_burst = np.array([True, False, True, False])
-    is_burst_check = check_min_burst_cycles(is_burst, min_n_cycles=3)
+
+def test_check_min_burst_cycles_no_bursts():
+
+    num_cycles = 5
+    is_burst = np.zeros(num_cycles, dtype=bool)
+
+    is_burst_check = check_min_burst_cycles(is_burst.copy(), min_n_cycles=3)
 
     assert not any(is_burst_check)
 
 
+def test_check_min_burst_cycles_empty_input():
+
+    is_burst = np.array([])
+    is_burst_check = check_min_burst_cycles(is_burst.copy(), min_n_cycles=3)
+
+    assert not len(is_burst_check)
+
+
 def test_recompute_edges(sim_args_comb):
 
     # Grab sim arguments from fixture
