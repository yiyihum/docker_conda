diff --git a/django_drf_filepond/apps.py b/django_drf_filepond/apps.py
index 4309bc3..c5904ca 100644
--- a/django_drf_filepond/apps.py
+++ b/django_drf_filepond/apps.py
@@ -14,9 +14,20 @@ class DjangoDrfFilepondConfig(AppConfig):
     verbose_name = 'FilePond Server-side API'
 
     def ready(self):
+        # Get BASE_DIR and process to ensure it works across platforms
+        # Handle py3.5 where pathlib exists but os.path.join can't accept a
+        # pathlib object (ensure we always pass a string to os.path.join)
+        BASE_DIR = local_settings.BASE_DIR
+        try:
+            from pathlib import Path
+            if isinstance(BASE_DIR, Path):
+                BASE_DIR = str(BASE_DIR)
+        except ImportError:
+            pass
+
         upload_tmp = getattr(
             local_settings, 'UPLOAD_TMP',
-            os.path.join(local_settings.BASE_DIR, 'filepond_uploads'))
+            os.path.join(BASE_DIR, 'filepond_uploads'))
 
         LOG.debug('Upload temp directory from top level settings: <%s>'
                   % (upload_tmp))
diff --git a/django_drf_filepond/drf_filepond_settings.py b/django_drf_filepond/drf_filepond_settings.py
index cf6956e..7e1d530 100644
--- a/django_drf_filepond/drf_filepond_settings.py
+++ b/django_drf_filepond/drf_filepond_settings.py
@@ -21,7 +21,16 @@ _app_prefix = 'DJANGO_DRF_FILEPOND_'
 # installed app base directory to use as an alternative.
 BASE_DIR = os.path.dirname(django_drf_filepond.__file__)
 if hasattr(settings, 'BASE_DIR'):
+    # If BASE_DIR is set in the main settings, get it and process it to
+    # handle py3.5 where pathlib exists but os.path.join can't accept a
+    # pathlib object (ensure we always pass a string to os.path.join)
     BASE_DIR = settings.BASE_DIR
+    try:
+        from pathlib import Path
+        if isinstance(BASE_DIR, Path):
+            BASE_DIR = str(BASE_DIR)
+    except ImportError:
+        pass
 
 # The location where uploaded files are temporarily stored. At present,
 # this must be a subdirectory of settings.BASE_DIR
diff --git a/django_drf_filepond/models.py b/django_drf_filepond/models.py
index 32a2f0b..4bf350c 100644
--- a/django_drf_filepond/models.py
+++ b/django_drf_filepond/models.py
@@ -19,9 +19,17 @@ from django_drf_filepond.storage_utils import _get_storage_backend
 
 LOG = logging.getLogger(__name__)
 
+BASE_DIR = local_settings.BASE_DIR
+try:
+    from pathlib import Path
+    if isinstance(BASE_DIR, Path):
+        BASE_DIR = str(BASE_DIR)
+except ImportError:
+    pass
+
 FILEPOND_UPLOAD_TMP = getattr(
     local_settings, 'UPLOAD_TMP',
-    os.path.join(local_settings.BASE_DIR, 'filepond_uploads'))
+    os.path.join(BASE_DIR, 'filepond_uploads'))
 
 FILEPOND_FILE_STORE_PATH = getattr(local_settings, 'FILE_STORE_PATH', None)
 
diff --git a/django_drf_filepond/utils.py b/django_drf_filepond/utils.py
index d01da02..2949b71 100644
--- a/django_drf_filepond/utils.py
+++ b/django_drf_filepond/utils.py
@@ -1,4 +1,5 @@
 # A module containing some utility functions used by the views and uploaders
+import django_drf_filepond.drf_filepond_settings as local_settings
 from django.contrib.auth.models import AnonymousUser
 import shortuuid
 import six
@@ -18,3 +19,27 @@ def _get_user(request):
 def _get_file_id():
     file_id = shortuuid.uuid()
     return six.ensure_text(file_id)
+
+
+# Get the BASE_DIR variable from local_settings and process it to ensure that
+# it can be used in django_drf_filepond across Python 2.7, 3.5 and 3.6+.
+# Need to take into account that this may be a regular string or a
+# pathlib.Path object. django-drf-filepond expects to work with BASE_DIR as a
+# string so return a string regardless of the type of BASE_DIR. To maintain
+# suport for Python 2.7, need to handle the case where pathlib.Path doesn't
+# exist...
+def get_local_settings_base_dir():
+    base_dir = local_settings.BASE_DIR
+    return _process_base_dir(base_dir)
+
+
+# Process the provided BASE_DIR variable
+def _process_base_dir(base_dir):
+    try:
+        from pathlib import Path
+    except ImportError:
+        return base_dir
+
+    if isinstance(base_dir, Path):
+        return str(base_dir)
+    return base_dir
diff --git a/django_drf_filepond/views.py b/django_drf_filepond/views.py
index 4d45ab2..a91b1c0 100644
--- a/django_drf_filepond/views.py
+++ b/django_drf_filepond/views.py
@@ -30,7 +30,8 @@ from rest_framework.parsers import MultiPartParser
 from rest_framework.response import Response
 from rest_framework.views import APIView
 from django_drf_filepond.uploaders import FilepondFileUploader
-from django_drf_filepond.utils import _get_file_id, _get_user
+from django_drf_filepond.utils import _get_file_id, _get_user,\
+    get_local_settings_base_dir
 
 LOG = logging.getLogger(__name__)
 
@@ -104,8 +105,9 @@ class ProcessView(APIView):
         # TODO: Check whether this is necessary - maybe add a security
         # parameter that can be disabled to turn off this check if the
         # developer wishes?
-        if ((not (storage.location).startswith(local_settings.BASE_DIR)) and
-                (local_settings.BASE_DIR !=
+        LOCAL_BASE_DIR = get_local_settings_base_dir()
+        if ((not (storage.location).startswith(LOCAL_BASE_DIR)) and
+                (LOCAL_BASE_DIR !=
                  os.path.dirname(django_drf_filepond.__file__))):
             if not local_settings.ALLOW_EXTERNAL_UPLOAD_DIR:
                 return Response('The file upload path settings are not '
diff --git a/setup.py b/setup.py
index c2d799d..668f740 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@ with open("README.md", "r") as readme:
 
 setup(
     name="django-drf-filepond",
-    version="0.3.0",
+    version="0.3.1",
     description="Filepond server app for Django REST Framework",
     long_description=long_description,
     long_description_content_type='text/markdown',
@@ -26,9 +26,11 @@ setup(
         "Django>=2.2;python_version>='3.6'",
         "djangorestframework==3.9.3;python_version=='2.7'",
         "djangorestframework>=3.9.3;python_version>='3.5'",
-        "shortuuid>=0.5.0",
+        "shortuuid==0.5.0;python_version=='2.7'",
+        "shortuuid>=0.5.0;python_version>='3.5'",
         "requests>=2.20.1",
-        "django-storages>=1.8",
+        "django-storages==1.9.1;python_version=='2.7'",
+        "django-storages>=1.9.1;python_version>='3.5'",
         "six>=1.14.0"
     ],
     tests_require=[

