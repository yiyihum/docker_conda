diff --git a/tests/test_client.py b/tests/test_client.py
index 3c02c11..9666e1b 100644
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -108,24 +108,6 @@ class TestNanopubClient:
         client.claim(statement_text='Some controversial statement')
 
     def test_nanopub_publish(self):
-        test_uri = 'http://www.example.com/my-nanopub'
-        test_concept_uri = 'http://purl.org/person#DrBob'  # This nanopub introduced DrBob
-        client = NanopubClient()
-        client.java_wrapper.publish = mock.MagicMock(return_value=test_uri)
-        assertion_rdf = rdflib.Graph()
-        assertion_rdf.add(TEST_ASSERTION)
-
-        nanopub = Publication.from_assertion(
-            assertion_rdf=assertion_rdf,
-            uri=rdflib.term.URIRef(test_uri),
-            introduces_concept=namespaces.AUTHOR.DrBob,
-            derived_from=rdflib.term.URIRef('http://www.example.com/another-nanopub')
-        )
-        pubinfo = client.publish(nanopub)
-        assert pubinfo['nanopub_uri'] == test_uri
-        assert pubinfo['concept_uri'] == test_concept_uri
-
-    def test_nanopub_publish_blanknode(self):
         test_concept = rdflib.term.BNode('test')
         test_published_uri = 'http://www.example.com/my-nanopub'
         expected_concept_uri = 'http://www.example.com/my-nanopub#test'
diff --git a/tests/test_publication.py b/tests/test_publication.py
index 1fb2032..77e8e48 100644
--- a/tests/test_publication.py
+++ b/tests/test_publication.py
@@ -1,87 +1,73 @@
 from unittest import mock
 
+import pytest
 import rdflib
 from rdflib.namespace import RDF
 
-from nanopub import namespaces, Publication
+from nanopub import namespaces, Publication, replace_in_rdf
+from nanopub.definitions import DUMMY_NANOPUB_URI
 
-TEST_ASSERTION = (namespaces.AUTHOR.DrBob, namespaces.HYCL.claims, rdflib.Literal('This is a test'))
 TEST_ORCID_ID = 'https://orcid.org/0000-0000-0000-0000'
 
 
 class TestPublication:
-    def test_construction_with_bnode_introduced_concept(self):
+    test_assertion = rdflib.Graph()
+    test_assertion.add((namespaces.AUTHOR.DrBob,
+                        namespaces.HYCL.claims,
+                        rdflib.Literal('This is a test')))
+
+    def test_from_assertion_introduced_concept_not_bnode(self):
+        with pytest.raises(ValueError):
+            Publication.from_assertion(self.test_assertion, introduces_concept='not a blank node')
+
+    def test_from_assertion_with_bnode_introduced_concept(self):
         """
         Test Publication construction from assertion where a BNode is introduced as a concept.
         """
-        test_uri = 'http://www.example.com/my-nanopub'
-        test_concept_uri = 'http://www.example.com/my-nanopub#DrBob'  # This nanopub introduced DrBob
-        assertion_rdf = rdflib.Graph()
-        assertion_rdf.add(TEST_ASSERTION)
-
-        publication = Publication.from_assertion(
-            assertion_rdf=assertion_rdf,
-            uri=rdflib.term.URIRef(test_uri),
-            introduces_concept=rdflib.term.BNode('DrBob'),
-            derived_from=rdflib.term.URIRef('http://www.example.com/another-nanopub'),
-            assertion_attributed_to=TEST_ORCID_ID
+        publication = Publication.from_assertion(assertion_rdf=self.test_assertion,
+                                                 introduces_concept=rdflib.term.BNode('DrBob'),
         )
+        test_concept_uri = DUMMY_NANOPUB_URI + '#DrBob'  # This nanopub introduced DrBob
         assert str(publication.introduces_concept) == test_concept_uri
+        assert (None, namespaces.NPX.introduces, rdflib.URIRef(test_concept_uri)) in publication.rdf
 
     def test_construction_with_derived_from_as_list(self):
         """
         Test Publication construction from assertion where derived_from is a list.
         """
-        test_uri = 'http://www.example.com/my-nanopub'
         derived_from_list = [   'http://www.example.com/another-nanopub', # This nanopub is derived from several sources
                                 'http://www.example.com/and-another-nanopub',
                                 'http://www.example.com/and-one-more' ]
-        assertion_rdf = rdflib.Graph()
-        assertion_rdf.add(TEST_ASSERTION)
 
-        publication = Publication.from_assertion(
-            assertion_rdf=assertion_rdf,
-            uri=rdflib.term.URIRef(test_uri),
-            derived_from=derived_from_list,
-            assertion_attributed_to=TEST_ORCID_ID
-        )
+        publication = Publication.from_assertion(assertion_rdf=self.test_assertion,
+                                                 derived_from=derived_from_list)
 
         for uri in derived_from_list:
             assert (None, namespaces.PROV.wasDerivedFrom, rdflib.URIRef(uri)) in publication.rdf
 
-    def test_from_assertion(self):
+    @mock.patch('nanopub.publication.profile')
+    def test_from_assertion(self, mock_profile):
         """
         Test that Publication.from_assertion is creating an rdf graph with the right features (
         contexts) for a publication.
         """
-        assertion_rdf = rdflib.Graph()
-        assertion_rdf.add(TEST_ASSERTION)
-
-        nanopub = Publication.from_assertion(assertion_rdf)
-
-        assert nanopub.rdf is not None
-        assert (None, RDF.type, namespaces.NP.Nanopublication) in nanopub.rdf
-        assert (None, namespaces.NP.hasAssertion, None) in nanopub.rdf
-        assert (None, namespaces.NP.hasProvenance, None) in nanopub.rdf
-        assert (None, namespaces.NP.hasPublicationInfo, None) in nanopub.rdf
-
-        new_concept = rdflib.term.URIRef('www.purl.org/new/concept/test')
-        nanopub = Publication.from_assertion(assertion_rdf, introduces_concept=new_concept)
-
-        assert nanopub.rdf is not None
-        assert (None, RDF.type, namespaces.NP.Nanopublication) in nanopub.rdf
-        assert (None, namespaces.NP.hasAssertion, None) in nanopub.rdf
-        assert (None, namespaces.NP.hasProvenance, None) in nanopub.rdf
-        assert (None, namespaces.NP.hasPublicationInfo, None) in nanopub.rdf
-
-        assert (None, namespaces.NPX.introduces, new_concept) in nanopub.rdf
-
-    @mock.patch('nanopub.publication.profile')
-    def test_from_assertion_use_profile(self, mock_profile):
         mock_profile.get_orcid_id.return_value = TEST_ORCID_ID
-        assertion = rdflib.Graph()
-        assertion.add(TEST_ASSERTION)
-
-        result = Publication.from_assertion(assertion_rdf=assertion)
-
-        assert (None, None, rdflib.URIRef(TEST_ORCID_ID)) in result.rdf
+        publication = Publication.from_assertion(self.test_assertion)
+
+        assert publication.rdf is not None
+        assert (None, RDF.type, namespaces.NP.Nanopublication) in publication.rdf
+        assert (None, namespaces.NP.hasAssertion, None) in publication.rdf
+        assert (None, namespaces.NP.hasProvenance, None) in publication.rdf
+        assert (None, namespaces.NP.hasPublicationInfo, None) in publication.rdf
+        assert (None, None, rdflib.URIRef(TEST_ORCID_ID)) in publication.rdf
+
+
+def test_replace_in_rdf():
+    g = rdflib.Graph()
+    g.add((rdflib.Literal('DrBob'), rdflib.RDF.type, rdflib.Literal('Doctor')))
+    g.add((rdflib.Literal('Alice'), rdflib.FOAF.knows, rdflib.Literal('DrBob')))
+    replace_in_rdf(g, rdflib.Literal('DrBob'), rdflib.Literal('Alfonso'))
+    assert (rdflib.Literal('Alfonso'), rdflib.RDF.type, rdflib.Literal('Doctor')) in g
+    assert (rdflib.Literal('Alice'), rdflib.FOAF.knows, rdflib.Literal('Alfonso')) in g
+    assert (rdflib.Literal('DrBob'), rdflib.RDF.type, rdflib.Literal('Doctor')) not in g
+    assert (rdflib.Literal('Alice'), rdflib.FOAF.knows, rdflib.Literal('DrBob')) not in g
