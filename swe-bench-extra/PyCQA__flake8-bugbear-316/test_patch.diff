diff --git a/tests/b906.py b/tests/b906.py
new file mode 100644
index 0000000..a4bf0d1
--- /dev/null
+++ b/tests/b906.py
@@ -0,0 +1,55 @@
+import ast
+
+# error if method name starts with `visit_`, the type is a valid `ast` type
+# which has subfields, and contains no call to a method name containing `visit`
+# anywhere in it's body
+
+# error
+def visit_For():
+    ...
+
+
+# has call to visit function
+def visit_For():
+    foo_visit_bar()
+
+
+# has call to visit method
+def visit_While():
+    foo.bar_visit_bar()
+
+
+# this visit call clearly won't run, but is treated as safe
+def visit_If():
+    def foo():
+        a_visit_function()
+
+
+# not a valid AST class, no error
+def visit_foo():
+    ...
+
+
+# Break has no subfields to visit, so no error
+def visit_Break():
+    ...
+
+
+# explicitly check `visit` and `generic_visit`
+# doesn't start with _visit, safe
+def visit():
+    ...
+
+
+# doesn't start with _visit, safe
+def generic_visit():
+    ...
+
+
+# check no crash on short name
+def a():
+    ...
+
+
+def visit_():
+    ...
diff --git a/tests/test_bugbear.py b/tests/test_bugbear.py
index bfd536c..e3ee667 100644
--- a/tests/test_bugbear.py
+++ b/tests/test_bugbear.py
@@ -43,6 +43,7 @@ from bugbear import (
     B903,
     B904,
     B905,
+    B906,
     B950,
     BugBearChecker,
     BugBearVisitor,
@@ -501,6 +502,15 @@ class BugbearTestCase(unittest.TestCase):
         ]
         self.assertEqual(errors, self.errors(*expected))
 
+    def test_b906(self):
+        filename = Path(__file__).absolute().parent / "b906.py"
+        bbc = BugBearChecker(filename=str(filename))
+        errors = list(bbc.run())
+        expected = [
+            B906(8, 0),
+        ]
+        self.assertEqual(errors, self.errors(*expected))
+
     def test_b950(self):
         filename = Path(__file__).absolute().parent / "b950.py"
         bbc = BugBearChecker(filename=str(filename))
