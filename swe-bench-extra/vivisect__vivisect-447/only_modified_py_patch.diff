diff --git a/envi/archs/i386/emu.py b/envi/archs/i386/emu.py
index 658a6f7..02e9b6a 100755
--- a/envi/archs/i386/emu.py
+++ b/envi/archs/i386/emu.py
@@ -9,7 +9,7 @@ from envi.const import *
 import envi.exc as e_exc
 import envi.bits as e_bits
 
-from envi.archs.i386.opconst import PREFIX_REX_W
+from envi.archs.i386.opconst import PREFIX_REX_W, REP_OPCODES
 from envi.archs.i386.regs import *
 from envi.archs.i386.disasm import *
 from envi.archs.i386 import i386Module
@@ -245,8 +245,9 @@ class IntelEmulator(i386RegisterContext, envi.Emulator):
         if meth is None:
             raise e_exc.UnsupportedInstruction(self, op)
 
+        # The behavior of the REP prefix is undefined when used with non-string instructions.
         rep_prefix = op.prefixes & PREFIX_REP_MASK
-        if rep_prefix and not self.getEmuOpt('i386:reponce'):
+        if rep_prefix and op.opcode in REP_OPCODES and not self.getEmuOpt('i386:reponce'):
             # REP instructions (REP/REPNZ/REPZ/REPSIMD) get their own handlers
             handler = self.__rep_prefix_handlers__.get(rep_prefix)
             newpc = handler(meth, op)
@@ -273,9 +274,6 @@ class IntelEmulator(i386RegisterContext, envi.Emulator):
         Then the instruction is repeated and ECX decremented until either
         ECX reaches 0 or the ZF is cleared.
         '''
-        if op.mnem.startswith('nop'):
-            return
-
         ecx = emu.getRegister(REG_ECX)
         emu.setFlag(EFLAGS_ZF, 1)
 
diff --git a/envi/archs/i386/opconst.py b/envi/archs/i386/opconst.py
index 9fc2db9..4f9add5 100644
--- a/envi/archs/i386/opconst.py
+++ b/envi/archs/i386/opconst.py
@@ -197,15 +197,24 @@ INS_OFLOW = INS_TRAPS | 0x08       # gen overflow trap
 
 #/* INS_SYSTEM */
 INS_HALT    = INS_SYSTEM | 0x01 # halt machine
-INS_IN      = INS_SYSTEM | 0x02 # input form port
+INS_IN      = INS_SYSTEM | 0x02 # input from port
 INS_OUT     = INS_SYSTEM | 0x03 # output to port
 INS_CPUID   = INS_SYSTEM | 0x04 # iden
 
 INS_NOP     = INS_OTHER | 0x01
 INS_BCDCONV = INS_OTHER | 0x02  # convert to/from BCD
 INS_SZCONV  = INS_OTHER | 0x03  # convert size of operand
-INS_CRYPT   = INS_OTHER | 0x4  # AES-NI instruction support
+INS_CRYPT   = INS_OTHER | 0x04  # AES-NI instruction support
 
+# string instructions that support REP prefix
+REP_OPCODES = (
+    INS_IN,       # INS
+    INS_OUT,      # OUTS
+    INS_STRMOV,   # MOVS
+    INS_STRLOAD,  # LODS
+    INS_STRSTOR,  # STOS
+    INS_STRCMP    # CMPS, SCAS
+    )
 
 OP_R = 0x001
 OP_W = 0x002

