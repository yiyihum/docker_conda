diff --git a/SoftLayer/CLI/virt/list.py b/SoftLayer/CLI/virt/list.py
index a16a1330..ee525ede 100644
--- a/SoftLayer/CLI/virt/list.py
+++ b/SoftLayer/CLI/virt/list.py
@@ -9,7 +9,6 @@
 from SoftLayer.CLI import environment
 from SoftLayer.CLI import formatting
 from SoftLayer.CLI import helpers
-from SoftLayer import utils
 
 # pylint: disable=unnecessary-lambda
 
@@ -56,67 +55,41 @@
 @click.option('--hourly', is_flag=True, help='Show only hourly instances')
 @click.option('--monthly', is_flag=True, help='Show only monthly instances')
 @click.option('--transient', help='Filter by transient instances', type=click.BOOL)
-@click.option('--hardware', is_flag=True, default=False, help='Show the all VSI related to hardware')
-@click.option('--all-guests', is_flag=True, default=False, help='Show the all VSI and hardware VSIs')
+@click.option('--search', is_flag=False, flag_value="", default=None,
+              help="Use the more flexible Search API to list instances. See `slcli search --types` for list " +
+              "of searchable fields.")
 @helpers.multi_option('--tag', help='Filter by tags')
-@click.option('--sortby',
-              help='Column to sort by',
-              default='hostname',
-              show_default=True)
+@click.option('--sortby', default='hostname', show_default=True, help='Column to sort by')
 @click.option('--columns',
               callback=column_helper.get_formatter(COLUMNS),
               help='Columns to display. [options: %s]'
               % ', '.join(column.name for column in COLUMNS),
               default=','.join(DEFAULT_COLUMNS),
               show_default=True)
-@click.option('--limit', '-l',
-              help='How many results to get in one api call, default is 100',
-              default=100,
-              show_default=True)
+@click.option('--limit', '-l', default=100, show_default=True,
+              help='How many results to get in one api call, default is 100')
 @environment.pass_env
 def cli(env, sortby, cpu, domain, datacenter, hostname, memory, network,
-        hourly, monthly, tag, columns, limit, transient, hardware, all_guests):
+        hourly, monthly, tag, columns, limit, transient, search):
     """List virtual servers."""
 
-    vsi = SoftLayer.VSManager(env.client)
-    guests = vsi.list_instances(hourly=hourly,
-                                monthly=monthly,
-                                hostname=hostname,
-                                domain=domain,
-                                cpus=cpu,
-                                memory=memory,
-                                datacenter=datacenter,
-                                nic_speed=network,
-                                transient=transient,
-                                tags=tag,
-                                mask=columns.mask(),
-                                limit=limit)
+    guests = []
+    if search is not None:
+        object_mask = f"mask[resource(SoftLayer_Virtual_Guest)[{columns.mask()}]]"
+        search_manager = SoftLayer.SearchManager(env.client)
+        guests = search_manager.search_instances(hostname=hostname, domain=domain, datacenter=datacenter,
+                                                 tags=tag, search_string=search, mask=object_mask)
+    else:
+        vsi = SoftLayer.VSManager(env.client)
+        guests = vsi.list_instances(hourly=hourly, monthly=monthly, hostname=hostname, domain=domain,
+                                    cpus=cpu, memory=memory, datacenter=datacenter, nic_speed=network,
+                                    transient=transient, tags=tag, mask=columns.mask(), limit=limit)
 
     table = formatting.Table(columns.columns)
     table.sortby = sortby
-    if not hardware or all_guests:
-        for guest in guests:
-            table.add_row([value or formatting.blank()
-                           for value in columns.row(guest)])
 
-        env.fout(table)
+    for guest in guests:
+        table.add_row([value or formatting.blank()
+                       for value in columns.row(guest)])
 
-    if hardware or all_guests:
-        hardware_guests = vsi.get_hardware_guests()
-        for hd_guest in hardware_guests:
-            if hd_guest['virtualHost']['guests']:
-                title = "Hardware(id = {hardwareId}) guests associated".format(hardwareId=hd_guest['id'])
-                table_hardware_guest = formatting.Table(['id', 'hostname', 'CPU', 'Memory', 'Start Date', 'Status',
-                                                         'powerState'], title=title)
-                table_hardware_guest.sortby = 'hostname'
-                for guest in hd_guest['virtualHost']['guests']:
-                    table_hardware_guest.add_row([
-                        guest['id'],
-                        guest['hostname'],
-                        '%i %s' % (guest['maxCpu'], guest['maxCpuUnits']),
-                        guest['maxMemory'],
-                        utils.clean_time(guest['createDate']),
-                        guest['status']['keyName'],
-                        guest['powerState']['keyName']
-                    ])
-                env.fout(table_hardware_guest)
+    env.fout(table)
diff --git a/SoftLayer/managers/__init__.py b/SoftLayer/managers/__init__.py
index 2a895540..7fadd12e 100644
--- a/SoftLayer/managers/__init__.py
+++ b/SoftLayer/managers/__init__.py
@@ -24,6 +24,7 @@
 from SoftLayer.managers.network import NetworkManager
 from SoftLayer.managers.object_storage import ObjectStorageManager
 from SoftLayer.managers.ordering import OrderingManager
+from SoftLayer.managers.search import SearchManager
 from SoftLayer.managers.sshkey import SshKeyManager
 from SoftLayer.managers.ssl import SSLManager
 from SoftLayer.managers.tags import TagManager
@@ -53,6 +54,7 @@
     'ObjectStorageManager',
     'OrderingManager',
     'PlacementManager',
+    'SearchManager',
     'SshKeyManager',
     'SSLManager',
     'TagManager',
diff --git a/SoftLayer/managers/search.py b/SoftLayer/managers/search.py
index 5f632df2..a0ae8c33 100644
--- a/SoftLayer/managers/search.py
+++ b/SoftLayer/managers/search.py
@@ -34,3 +34,30 @@ def advanced(self, search_string):
 
         """
         return self.search_manager.advancedSearch(search_string)
+
+    def search_instances(self, search_string, mask=None, **kwargs):
+        """Lists VSIs based in the search_string.
+
+        Also takes in a few search terms as **kwargs. such as hostname, datacenter, domain and tags
+        """
+
+        # This forces the Search API to do a fuzzy search on our term, kinda. Not sure why the ** are
+        # Required but it will do an exact search without them.
+        if search_string:
+            search_string = f"*{search_string}*"
+        search_string = f"_objectType:SoftLayer_Virtual_Guest {search_string}"
+        if kwargs.get('hostname'):
+            search_string = f"{search_string} hostname: *{kwargs.get('hostname')}*"
+        if kwargs.get('domain'):
+            search_string = f"{search_string} domain: *{kwargs.get('domain')}*"
+        if kwargs.get('datacenter'):
+            search_string = f"{search_string} datacenter.longName: *{kwargs.get('datacenter')}*"
+        if kwargs.get('tags'):
+            tags = " ".join(kwargs.get("tags", []))
+            search_string = f"{search_string} internalTagReferences.tag.name: {tags}"
+        result = self.search_manager.advancedSearch(search_string, mask=mask)
+        guests = []
+        for resource in result:
+            guests.append(resource.get('resource'))
+
+        return guests
diff --git a/SoftLayer/managers/vs.py b/SoftLayer/managers/vs.py
index f6520849..ef51be94 100644
--- a/SoftLayer/managers/vs.py
+++ b/SoftLayer/managers/vs.py
@@ -1441,15 +1441,6 @@ def migrate_dedicated(self, instance_id, host_id):
         """
         return self.guest.migrateDedicatedHost(host_id, id=instance_id)
 
-    def get_hardware_guests(self):
-        """Returns all virtualHost capable hardware objects and their guests.
-
-        :return SoftLayer_Hardware[].
-        """
-        object_filter = {"hardware": {"virtualHost": {"id": {"operation": "not null"}}}}
-        mask = "mask[virtualHost[guests[powerState]]]"
-        return self.client.call('SoftLayer_Account', 'getHardware', mask=mask, filter=object_filter)
-
     def authorize_storage(self, vs_id, username_storage):
         """Authorize File or Block Storage to a Virtual Server.
 
