diff --git a/tests/mypy/modules/plugin_default_factory.py b/tests/mypy/modules/plugin_default_factory.py
new file mode 100644
--- /dev/null
+++ b/tests/mypy/modules/plugin_default_factory.py
@@ -0,0 +1,21 @@
+"""
+See https://github.com/pydantic/pydantic/issues/4457
+"""
+
+from typing import Dict, List
+
+from pydantic import BaseModel, Field
+
+
+def new_list() -> List[int]:
+    return []
+
+
+class Model(BaseModel):
+    l1: List[str] = Field(default_factory=list)
+    l2: List[int] = Field(default_factory=new_list)
+    l3: List[str] = Field(default_factory=lambda: list())
+    l4: Dict[str, str] = Field(default_factory=dict)
+    l5: int = Field(default_factory=lambda: 123)
+    l6_error: List[str] = Field(default_factory=new_list)
+    l7_error: int = Field(default_factory=list)
diff --git a/tests/mypy/outputs/plugin-fail-strict.txt b/tests/mypy/outputs/plugin-fail-strict.txt
--- a/tests/mypy/outputs/plugin-fail-strict.txt
+++ b/tests/mypy/outputs/plugin-fail-strict.txt
@@ -36,9 +36,8 @@
 219: error: Property "y" defined in "FrozenModel" is read-only  [misc]
 240: error: Incompatible types in assignment (expression has type "None", variable has type "int")  [assignment]
 241: error: Incompatible types in assignment (expression has type "None", variable has type "int")  [assignment]
-244: error: Incompatible types in assignment (expression has type "Set[_T]", variable has type "str")  [assignment]
+244: error: Incompatible types in assignment (expression has type "Set[Any]", variable has type "str")  [assignment]
 245: error: Incompatible types in assignment (expression has type "str", variable has type "int")  [assignment]
-246: error: Incompatible types in assignment (expression has type "List[_T]", variable has type "List[int]")  [assignment]
 247: error: Argument "default_factory" to "Field" has incompatible type "int"; expected "Optional[Callable[[], Any]]"  [arg-type]
 250: error: Field default and default_factory cannot be specified together  [pydantic-field]
 260: error: Missing positional argument "self" in call to "instance_method" of "ModelWithAnnotatedValidator"  [call-arg]
diff --git a/tests/mypy/outputs/plugin-fail.txt b/tests/mypy/outputs/plugin-fail.txt
--- a/tests/mypy/outputs/plugin-fail.txt
+++ b/tests/mypy/outputs/plugin-fail.txt
@@ -25,9 +25,8 @@
 219: error: Property "y" defined in "FrozenModel" is read-only  [misc]
 240: error: Incompatible types in assignment (expression has type "None", variable has type "int")  [assignment]
 241: error: Incompatible types in assignment (expression has type "None", variable has type "int")  [assignment]
-244: error: Incompatible types in assignment (expression has type "Set[_T]", variable has type "str")  [assignment]
+244: error: Incompatible types in assignment (expression has type "Set[Any]", variable has type "str")  [assignment]
 245: error: Incompatible types in assignment (expression has type "str", variable has type "int")  [assignment]
-246: error: Incompatible types in assignment (expression has type "List[_T]", variable has type "List[int]")  [assignment]
 247: error: Argument "default_factory" to "Field" has incompatible type "int"; expected "Optional[Callable[[], Any]]"  [arg-type]
 250: error: Field default and default_factory cannot be specified together  [pydantic-field]
 260: error: Missing positional argument "self" in call to "instance_method" of "ModelWithAnnotatedValidator"  [call-arg]
diff --git a/tests/mypy/outputs/plugin_default_factory.txt b/tests/mypy/outputs/plugin_default_factory.txt
new file mode 100644
--- /dev/null
+++ b/tests/mypy/outputs/plugin_default_factory.txt
@@ -0,0 +1,2 @@
+20: error: Incompatible types in assignment (expression has type "List[int]", variable has type "List[str]")  [assignment]
+21: error: Incompatible types in assignment (expression has type "List[Any]", variable has type "int")  [assignment]
diff --git a/tests/mypy/test_mypy.py b/tests/mypy/test_mypy.py
--- a/tests/mypy/test_mypy.py
+++ b/tests/mypy/test_mypy.py
@@ -49,6 +49,7 @@
     ('pyproject-plugin-strict.toml', 'plugin_fail.py', 'plugin-fail-strict.txt'),
     ('pyproject-plugin-strict.toml', 'fail_defaults.py', 'fail_defaults.txt'),
     ('mypy-plugin-strict.ini', 'settings_config.py', None),
+    ('mypy-plugin-strict.ini', 'plugin_default_factory.py', 'plugin_default_factory.txt'),
 ]
 executable_modules = list({fname[:-3] for _, fname, out_fname in cases if out_fname is None})
 
