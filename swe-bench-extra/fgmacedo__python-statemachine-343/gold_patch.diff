diff --git a/docs/releases/2.0.0.md b/docs/releases/2.0.0.md
index f20779c..67c375a 100644
--- a/docs/releases/2.0.0.md
+++ b/docs/releases/2.0.0.md
@@ -49,6 +49,12 @@ See {ref}`internal transition` for more details.
   guards using decorators is now possible.
 
 
+## Bugfixes in 2.0
+
+- [#341](https://github.com/fgmacedo/python-statemachine/issues/341): Fix dynamic dispatch
+  on methods with default parameters.
+
+
 ## Backward incompatible changes in 2.0
 
 - TODO
diff --git a/statemachine/dispatcher.py b/statemachine/dispatcher.py
index d3f2c42..29841a8 100644
--- a/statemachine/dispatcher.py
+++ b/statemachine/dispatcher.py
@@ -1,9 +1,9 @@
-import inspect
 from collections import namedtuple
 from functools import wraps
 from operator import attrgetter
 
 from .exceptions import AttrNotFound
+from .signature import SignatureAdapter
 from .utils import ugettext as _
 
 
@@ -23,42 +23,6 @@ class ObjectConfig(namedtuple("ObjectConfig", "obj skip_attrs")):
             return cls(obj, set())
 
 
-def methodcaller(method):
-    """Build a wrapper that adapts the received arguments to the inner method signature"""
-
-    # spec is a named tuple ArgSpec(args, varargs, keywords, defaults)
-    # args is a list of the argument names (it may contain nested lists)
-    # varargs and keywords are the names of the * and ** arguments or None
-    # defaults is a tuple of default argument values or None if there are no default arguments
-    spec = inspect.getfullargspec(method)
-    keywords = spec.varkw
-    expected_args = list(spec.args)
-    expected_kwargs = spec.defaults or {}
-
-    # discart "self" argument for bounded methods
-    if hasattr(method, "__self__") and expected_args and expected_args[0] == "self":
-        expected_args = expected_args[1:]
-
-    @wraps(method)
-    def wrapper(*args, **kwargs):
-        if spec.varargs is not None:
-            filtered_args = args
-        else:
-            filtered_args = [
-                kwargs.get(k, (args[idx] if idx < len(args) else None))
-                for idx, k in enumerate(expected_args)
-            ]
-
-        if keywords is not None:
-            filtered_kwargs = kwargs
-        else:
-            filtered_kwargs = {k: v for k, v in kwargs.items() if k in expected_kwargs}
-
-        return method(*filtered_args, **filtered_kwargs)
-
-    return wrapper
-
-
 def _get_func_by_attr(attr, *configs):
     for config in configs:
         if attr in config.skip_attrs:
@@ -84,7 +48,7 @@ def ensure_callable(attr, *objects):
             has the given ``attr``.
     """
     if callable(attr) or isinstance(attr, property):
-        return methodcaller(attr)
+        return SignatureAdapter.wrap(attr)
 
     # Setup configuration if not present to normalize the internal API
     configs = [ObjectConfig.from_obj(obj) for obj in objects]
@@ -102,7 +66,7 @@ def ensure_callable(attr, *objects):
 
         return wrapper
 
-    return methodcaller(func)
+    return SignatureAdapter.wrap(func)
 
 
 def resolver_factory(*objects):
diff --git a/statemachine/signature.py b/statemachine/signature.py
new file mode 100644
index 0000000..bef064b
--- /dev/null
+++ b/statemachine/signature.py
@@ -0,0 +1,148 @@
+import itertools
+from inspect import BoundArguments
+from inspect import Parameter
+from inspect import Signature
+from typing import Any
+from typing import Callable
+
+
+class SignatureAdapter(Signature):
+    method: Callable[..., Any]
+
+    @classmethod
+    def wrap(cls, method):
+        """Build a wrapper that adapts the received arguments to the inner ``method`` signature"""
+
+        sig = cls.from_callable(method)
+        sig.method = method
+        sig.__name__ = method.__name__
+        return sig
+
+    def __call__(self, *args: Any, **kwargs: Any) -> Any:
+        ba = self.bind_expected(*args, **kwargs)
+        return self.method(*ba.args, **ba.kwargs)
+
+    def bind_expected(self, *args: Any, **kwargs: Any) -> BoundArguments:  # noqa: C901
+        """Get a BoundArguments object, that maps the passed `args`
+        and `kwargs` to the function's signature.  It avoids to raise `TypeError`
+        trying to fill all the required arguments and ignoring the unknown ones.
+
+        Adapted from the internal `inspect.Signature._bind`.
+        """
+        arguments = {}
+
+        parameters = iter(self.parameters.values())
+        arg_vals = iter(args)
+        parameters_ex: Any = ()
+        kwargs_param = None
+
+        while True:
+            # Let's iterate through the positional arguments and corresponding
+            # parameters
+            try:
+                arg_val = next(arg_vals)
+            except StopIteration:
+                # No more positional arguments
+                try:
+                    param = next(parameters)
+                except StopIteration:
+                    # No more parameters. That's it. Just need to check that
+                    # we have no `kwargs` after this while loop
+                    break
+                else:
+                    if param.kind == Parameter.VAR_POSITIONAL:
+                        # That's OK, just empty *args.  Let's start parsing
+                        # kwargs
+                        break
+                    elif param.name in kwargs:
+                        if param.kind == Parameter.POSITIONAL_ONLY:
+                            msg = (
+                                "{arg!r} parameter is positional only, "
+                                "but was passed as a keyword"
+                            )
+                            msg = msg.format(arg=param.name)
+                            raise TypeError(msg) from None
+                        parameters_ex = (param,)
+                        break
+                    elif (
+                        param.kind == Parameter.VAR_KEYWORD
+                        or param.default is not Parameter.empty
+                    ):
+                        # That's fine too - we have a default value for this
+                        # parameter.  So, lets start parsing `kwargs`, starting
+                        # with the current parameter
+                        parameters_ex = (param,)
+                        break
+                    else:
+                        # No default, not VAR_KEYWORD, not VAR_POSITIONAL,
+                        # not in `kwargs`
+                        parameters_ex = (param,)
+                        break
+            else:
+                # We have a positional argument to process
+                try:
+                    param = next(parameters)
+                except StopIteration:
+                    # raise TypeError('too many positional arguments') from None
+                    break
+                else:
+                    if param.kind == Parameter.VAR_KEYWORD:
+                        # Memorize that we have a '**kwargs'-like parameter
+                        kwargs_param = param
+                        break
+
+                    if param.kind == Parameter.KEYWORD_ONLY:
+                        # Looks like we have no parameter for this positional
+                        # argument
+                        # 'too many positional arguments' forgiven
+                        break
+
+                    if param.kind == Parameter.VAR_POSITIONAL:
+                        # We have an '*args'-like argument, let's fill it with
+                        # all positional arguments we have left and move on to
+                        # the next phase
+                        values = [arg_val]
+                        values.extend(arg_vals)
+                        arguments[param.name] = tuple(values)
+                        break
+
+                    if param.name in kwargs and param.kind != Parameter.POSITIONAL_ONLY:
+                        arguments[param.name] = kwargs.pop(param.name)
+                    else:
+                        arguments[param.name] = arg_val
+
+        # Now, we iterate through the remaining parameters to process
+        # keyword arguments
+        for param in itertools.chain(parameters_ex, parameters):
+            if param.kind == Parameter.VAR_KEYWORD:
+                # Memorize that we have a '**kwargs'-like parameter
+                kwargs_param = param
+                continue
+
+            if param.kind == Parameter.VAR_POSITIONAL:
+                # Named arguments don't refer to '*args'-like parameters.
+                # We only arrive here if the positional arguments ended
+                # before reaching the last parameter before *args.
+                continue
+
+            param_name = param.name
+            try:
+                arg_val = kwargs.pop(param_name)
+            except KeyError:
+                # We have no value for this parameter.  It's fine though,
+                # if it has a default value, or it is an '*args'-like
+                # parameter, left alone by the processing of positional
+                # arguments.
+                pass
+            else:
+                arguments[param_name] = arg_val  #
+
+        if kwargs:
+            if kwargs_param is not None:
+                # Process our '**kwargs'-like parameter
+                arguments[kwargs_param.name] = kwargs  # type: ignore [assignment]
+            else:
+                # 'ignoring we got an unexpected keyword argument'
+                pass
+
+        return BoundArguments(self, arguments)  # type: ignore [arg-type]
