diff --git a/dirty_cat/test/test_super_vectorizer.py b/dirty_cat/test/test_super_vectorizer.py
index 2f34d8e..b70a26b 100644
--- a/dirty_cat/test/test_super_vectorizer.py
+++ b/dirty_cat/test/test_super_vectorizer.py
@@ -3,6 +3,8 @@ import sklearn
 import pandas as pd
 
 from sklearn.preprocessing import StandardScaler
+from sklearn.utils.validation import check_is_fitted
+from sklearn.exceptions import NotFittedError
 
 from distutils.version import LooseVersion
 
@@ -79,7 +81,6 @@ def test_super_vectorizer():
     # Test casting values
     vectorizer_cast = SuperVectorizer(
         cardinality_threshold=3,
-        auto_cast=True,
         # we must have n_samples = 5 >= n_components
         high_card_str_transformer=GapEncoder(n_components=2),
         high_card_cat_transformer=GapEncoder(n_components=2),
@@ -130,6 +131,18 @@ def test_get_feature_names():
     assert vectorizer_w_drop.get_feature_names() == expected_feature_names_drop
 
 
+def test_fit():
+    # Simply checks sklearn's `check_is_fitted` function raises an error if
+    # the SuperVectorizer is instantiated but not fitted.
+    # See GH#193
+    sup_vec = SuperVectorizer()
+    with pytest.raises(NotFittedError):
+        if LooseVersion(sklearn.__version__) >= LooseVersion('0.22'):
+            assert check_is_fitted(sup_vec)
+        else:
+            assert check_is_fitted(sup_vec, attributes=dir(sup_vec))
+
+
 if __name__ == '__main__':
     print('start test_super_vectorizer')
     test_super_vectorizer()
@@ -137,5 +150,8 @@ if __name__ == '__main__':
     print('start test_get_feature_names')
     test_get_feature_names()
     print('test_get_feature_names passed')
+    print('start test_fit')
+    test_fit()
+    print('test_fit passed')
 
     print('Done')
