diff --git a/dirty_cat/super_vectorizer.py b/dirty_cat/super_vectorizer.py
index 84b39c9..420d00b 100644
--- a/dirty_cat/super_vectorizer.py
+++ b/dirty_cat/super_vectorizer.py
@@ -106,10 +106,9 @@ class SuperVectorizer(ColumnTransformer):
         None to apply `remainder`, 'drop' for dropping the columns,
         or 'passthrough' to return the unencoded columns.
 
-    auto_cast: bool, default=False
+    auto_cast: bool, default=True
         If set to `True`, will try to convert each column to the best possible
         data type (dtype).
-        Experimental. It is advised to cast them beforehand, and leave this false.
 
     handle_missing: str, default=''
         One of the following values: 'error' or '' (empty).
@@ -144,7 +143,7 @@ class SuperVectorizer(ColumnTransformer):
                  high_card_cat_transformer: Optional[Union[BaseEstimator, str]] = GapEncoder(),
                  numerical_transformer: Optional[Union[BaseEstimator, str]] = None,
                  datetime_transformer: Optional[Union[BaseEstimator, str]] = None,
-                 auto_cast: bool = False,
+                 auto_cast: bool = True,
                  # Following parameters are inherited from ColumnTransformer
                  handle_missing: str = '',
                  remainder='passthrough',
@@ -171,8 +170,6 @@ class SuperVectorizer(ColumnTransformer):
         self.transformer_weights = transformer_weights
         self.verbose = verbose
 
-        self.columns_ = []
-
     def _auto_cast_array(self, X):
         """
         Takes an array and tries to convert its columns to the best possible
diff --git a/examples/03_automatic_preprocessing_with_the_supervectorizer.py b/examples/03_automatic_preprocessing_with_the_supervectorizer.py
index 69ed18a..b9f6d88 100644
--- a/examples/03_automatic_preprocessing_with_the_supervectorizer.py
+++ b/examples/03_automatic_preprocessing_with_the_supervectorizer.py
@@ -82,7 +82,7 @@ from sklearn.pipeline import Pipeline
 from dirty_cat import SuperVectorizer
 
 pipeline = Pipeline([
-    ('vectorizer', SuperVectorizer(auto_cast=True)),
+    ('vectorizer', SuperVectorizer()),
     ('clf', HistGradientBoostingRegressor(random_state=42))
 ])
 
@@ -111,7 +111,6 @@ print(f'std={np.std(scores)}')
 # Let us perform the same workflow, but without the `Pipeline`, so we can
 # analyze its mechanisms along the way.
 sup_vec = SuperVectorizer(
-    auto_cast=True,
     high_card_str_transformer=GapEncoder(n_components=50),
     high_card_cat_transformer=GapEncoder(n_components=50)
 )

