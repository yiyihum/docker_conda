diff --git a/Makefile b/Makefile
deleted file mode 100644
index 296e6d4..0000000
--- a/Makefile
+++ /dev/null
@@ -1,87 +0,0 @@
-.PHONY: clean clean-test clean-pyc clean-build docs help
-.DEFAULT_GOAL := help
-define BROWSER_PYSCRIPT
-import os, webbrowser, sys
-try:
-	from urllib import pathname2url
-except:
-	from urllib.request import pathname2url
-
-webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
-endef
-export BROWSER_PYSCRIPT
-
-define PRINT_HELP_PYSCRIPT
-import re, sys
-
-for line in sys.stdin:
-	match = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)
-	if match:
-		target, help = match.groups()
-		print("%-20s %s" % (target, help))
-endef
-export PRINT_HELP_PYSCRIPT
-BROWSER := python -c "$$BROWSER_PYSCRIPT"
-
-help:
-	@python -c "$$PRINT_HELP_PYSCRIPT" < $(MAKEFILE_LIST)
-
-clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts
-
-
-clean-build: ## remove build artifacts
-	rm -fr build/
-	rm -fr dist/
-	rm -fr .eggs/
-	find . -name '*.egg-info' -exec rm -fr {} +
-	find . -name '*.egg' -exec rm -f {} +
-
-clean-pyc: ## remove Python file artifacts
-	find . -name '*.pyc' -exec rm -f {} +
-	find . -name '*.pyo' -exec rm -f {} +
-	find . -name '*~' -exec rm -f {} +
-	find . -name '__pycache__' -exec rm -fr {} +
-
-clean-test: ## remove test and coverage artifacts
-	rm -fr .tox/
-	rm -f .coverage
-	rm -fr htmlcov/
-
-lint: ## check style with flake8
-	flake8 ec2_reaper tests
-
-test: ## run tests quickly with the default Python
-	py.test
-	
-
-test-all: ## run tests on every Python version with tox
-	tox
-
-coverage: ## check code coverage quickly with the default Python
-	coverage run --source ec2_reaper -m pytest
-	coverage report -m
-	coverage html
-	$(BROWSER) htmlcov/index.html
-
-docs: ## generate Sphinx HTML documentation, including API docs
-	rm -f docs/ec2_reaper.rst
-	rm -f docs/modules.rst
-	sphinx-apidoc -o docs/ ec2_reaper
-	$(MAKE) -C docs clean
-	$(MAKE) -C docs html
-	$(BROWSER) docs/_build/html/index.html
-
-servedocs: docs ## compile the docs watching for changes
-	watchmedo shell-command -p '*.rst' -c '$(MAKE) -C docs html' -R -D .
-
-release: clean ## package and upload a release
-	python setup.py sdist upload
-	python setup.py bdist_wheel upload
-
-dist: clean ## builds source and wheel package
-	python setup.py sdist
-	python setup.py bdist_wheel
-	ls -l dist
-
-install: clean ## install the package to the active Python's site-packages
-	python setup.py install
diff --git a/ec2_reaper/aws_lambda.py b/ec2_reaper/aws_lambda.py
index ea519d0..c51e330 100644
--- a/ec2_reaper/aws_lambda.py
+++ b/ec2_reaper/aws_lambda.py
@@ -14,8 +14,6 @@ def _is_py3():
 
 log = logging.getLogger(__name__)
 
-DEFAULT_SLACK_ENDPOINT = ''
-
 MIN_AGE = os.environ.get('MIN_AGE', ec2_reaper.DEFAULT_MIN_AGE)
 REGIONS = os.environ.get('REGIONS', ec2_reaper.DEFAULT_REGIONS)
 REGIONS = REGIONS.split(' ') if isinstance(REGIONS, str) else REGIONS
@@ -36,7 +34,7 @@ else:
     logging.getLogger('botocore').setLevel(logging.WARNING)
     logging.getLogger('boto3').setLevel(logging.WARNING)
 
-# this is necessary because tz-aware dts aren't JSON serializable by default
+# so that we can send tz-aware datetimes through json
 class DateTimeJSONEncoder(json.JSONEncoder):
     def default(self, o):
         if isinstance(o, datetime):
@@ -47,7 +45,7 @@ def _respond(body, error=True, headers=None, status_code=500):
     o = {'statusCode': status_code, 'body': body}
     if headers:
         o['headers'] = headers
-    return json.dumps(o, cls=DateTimeJSONEncoder)
+    return o
 
 def _get_expires(launch_time, min_age=MIN_AGE):
     # if launch_time is naive, assume UTC
@@ -66,7 +64,8 @@ def _notify(msg, attachments=[]):
 
     data = {'text': msg, 'attachements': attachments}
     headers = {'Content-Type': 'application/json'}
-    r = requests.post(SLACK_ENDPOINT, json=data, headers=headers)
+    r = requests.post(SLACK_ENDPOINT, headers=headers,
+                      data=json.dumps(data, cls=DateTimeJSONEncoder))
 
     if r.status_code != 200:
         log.error('Slack notification failed: (HTTP {}) {}'.format(r.status_code, r.text))
@@ -127,4 +126,7 @@ def handler(event, context):
             })
         _notify(msg, attachments)
 
-    return _respond(reaperlog, error=False, status_code=200)
+    r = {'reaped': len(reaped), 'matches_under_min_age': len(too_young),
+         'tag_matches': len([i for i in reaperlog if i['tag_match']]),
+         'instances': len(reaperlog), 'log': reaperlog}
+    return _respond(r, error=False, status_code=200)
