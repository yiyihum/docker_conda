diff --git a/tests/test_aamp_motifs.py b/tests/test_aamp_motifs.py
index b8325f5..006521f 100644
--- a/tests/test_aamp_motifs.py
+++ b/tests/test_aamp_motifs.py
@@ -2,7 +2,7 @@ import numpy as np
 import numpy.testing as npt
 import pytest
 
-from stumpy import aamp_motifs, aamp_match
+from stumpy import core, aamp_motifs, aamp_match
 
 import naive
 
@@ -211,3 +211,31 @@ def test_aamp_match(Q, T):
         )
 
         npt.assert_almost_equal(left, right)
+
+
+@pytest.mark.parametrize("Q, T", test_data)
+def test_aamp_match_T_subseq_isfinite(Q, T):
+    m = Q.shape[0]
+    excl_zone = int(np.ceil(m / 4))
+    max_distance = 0.3
+    T, T_subseq_isfinite = core.preprocess_non_normalized(T, len(Q))
+
+    for p in [1.0, 2.0, 3.0]:
+        left = naive_aamp_match(
+            Q,
+            T,
+            p=p,
+            excl_zone=excl_zone,
+            max_distance=max_distance,
+        )
+
+        right = aamp_match(
+            Q,
+            T,
+            T_subseq_isfinite,
+            p=p,
+            max_matches=None,
+            max_distance=max_distance,
+        )
+
+        npt.assert_almost_equal(left, right)
diff --git a/tests/test_motifs.py b/tests/test_motifs.py
index 07dbf2c..beef44e 100644
--- a/tests/test_motifs.py
+++ b/tests/test_motifs.py
@@ -235,3 +235,30 @@ def test_match(Q, T):
     )
 
     npt.assert_almost_equal(left, right)
+
+
+@pytest.mark.parametrize("Q, T", test_data)
+def test_match_mean_stddev(Q, T):
+    m = Q.shape[0]
+    excl_zone = int(np.ceil(m / 4))
+    max_distance = 0.3
+
+    left = naive_match(
+        Q,
+        T,
+        excl_zone,
+        max_distance=max_distance,
+    )
+
+    M_T, Σ_T = core.compute_mean_std(T, len(Q))
+
+    right = match(
+        Q,
+        T,
+        M_T,
+        Σ_T,
+        max_matches=None,
+        max_distance=lambda D: max_distance,  # also test lambda functionality
+    )
+
+    npt.assert_almost_equal(left, right)
