diff --git a/pysmt/test/test_formula.py b/pysmt/test/test_formula.py
index 0ddbec4..924328a 100644
--- a/pysmt/test/test_formula.py
+++ b/pysmt/test/test_formula.py
@@ -494,6 +494,16 @@ class TestFormulaManager(TestCase):
         self.assertEqual(c, self.mgr.Bool(False),
                          "ExactlyOne should not allow 2 symbols to be True")
 
+        s1 = self.mgr.Symbol("x")
+        s2 = self.mgr.Symbol("x")
+        f1 = self.mgr.ExactlyOne((s for s in [s1,s2]))
+        f2 = self.mgr.ExactlyOne([s1,s2])
+        f3 = self.mgr.ExactlyOne(s1,s2)
+
+        self.assertEqual(f1,f2)
+        self.assertEqual(f2,f3)
+
+
     @skipIfNoSolverForLogic(QF_BOOL)
     def test_exactly_one_is_sat(self):
         symbols = [ self.mgr.Symbol("s%d"%i, BOOL) for i in range(5) ]
diff --git a/pysmt/test/test_regressions.py b/pysmt/test/test_regressions.py
index 2fecd04..67bfc3d 100644
--- a/pysmt/test/test_regressions.py
+++ b/pysmt/test/test_regressions.py
@@ -311,6 +311,14 @@ class TestRegressions(TestCase):
         close_l = get_closer_smtlib_logic(logics.BOOL)
         self.assertEqual(close_l, logics.LRA)
 
+    def test_exactly_one_unpacking(self):
+        s1,s2 = Symbol("x"), Symbol("y")
+        f1 = ExactlyOne((s for s in [s1,s2]))
+        f2 = ExactlyOne([s1,s2])
+        f3 = ExactlyOne(s1,s2)
+
+        self.assertEqual(f1,f2)
+        self.assertEqual(f2,f3)
 
 if __name__ == "__main__":
     main()
