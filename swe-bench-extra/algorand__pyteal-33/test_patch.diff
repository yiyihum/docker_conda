diff --git a/pyteal/ast/scratch_test.py b/pyteal/ast/scratch_test.py
index 8baa280..10a65ce 100644
--- a/pyteal/ast/scratch_test.py
+++ b/pyteal/ast/scratch_test.py
@@ -8,7 +8,8 @@ def test_scratch_slot():
     assert slot.__hash__() == slot.__hash__()
     assert slot != ScratchSlot()
 
-    assert slot.store().__teal__()[0] == ScratchStore(slot).__teal__()[0]
+    assert slot.store().__teal__()[0] == ScratchStackStore(slot).__teal__()[0]
+    assert slot.store(Int(1)).__teal__()[0] == ScratchStore(slot, Int(1)).__teal__()[0]
 
     assert slot.load().type_of() == TealType.anytype
     assert slot.load(TealType.uint64).type_of() == TealType.uint64
@@ -42,8 +43,24 @@ def test_scratch_load_type():
         assert actual == expected
 
 def test_scratch_store():
+    for value in (Int(1), Bytes("test"), App.globalGet(Bytes("key")), If(Int(1), Int(2), Int(3))):
+        slot = ScratchSlot()
+        expr = ScratchStore(slot, value)
+        assert expr.type_of() == TealType.none
+        
+        expected, valueEnd = value.__teal__()
+        storeBlock = TealSimpleBlock([
+            TealOp(Op.store, slot)
+        ])
+        valueEnd.setNextBlock(storeBlock)
+
+        actual, _ = expr.__teal__()
+
+        assert actual == expected
+
+def test_scratch_stack_store():
     slot = ScratchSlot()
-    expr = ScratchStore(slot)
+    expr = ScratchStackStore(slot)
     assert expr.type_of() == TealType.none
     
     expected = TealSimpleBlock([
diff --git a/pyteal/ast/scratchvar_test.py b/pyteal/ast/scratchvar_test.py
new file mode 100644
index 0000000..f4fa03d
--- /dev/null
+++ b/pyteal/ast/scratchvar_test.py
@@ -0,0 +1,64 @@
+import pytest
+
+from .. import *
+
+
+def test_scratchvar_type():
+    myvar_default = ScratchVar()
+    assert myvar_default.storage_type() == TealType.anytype
+    assert myvar_default.store(Bytes("value")).type_of() == TealType.none
+    assert myvar_default.load().type_of() == TealType.anytype
+
+    with pytest.raises(TealTypeError):
+        myvar_default.store(Pop(Int(1)))
+
+    myvar_int = ScratchVar(TealType.uint64)
+    assert myvar_int.storage_type() == TealType.uint64
+    assert myvar_int.store(Int(1)).type_of() == TealType.none
+    assert myvar_int.load().type_of() == TealType.uint64
+
+    with pytest.raises(TealTypeError):
+        myvar_int.store(Bytes("value"))
+
+    with pytest.raises(TealTypeError):
+        myvar_int.store(Pop(Int(1)))
+
+    myvar_bytes = ScratchVar(TealType.bytes)
+    assert myvar_bytes.storage_type() == TealType.bytes
+    assert myvar_bytes.store(Bytes("value")).type_of() == TealType.none
+    assert myvar_bytes.load().type_of() == TealType.bytes
+
+    with pytest.raises(TealTypeError):
+        myvar_bytes.store(Int(0))
+    
+    with pytest.raises(TealTypeError):
+        myvar_bytes.store(Pop(Int(1)))
+
+def test_scratchvar_store():
+    myvar = ScratchVar(TealType.bytes)
+    expr = myvar.store(Bytes("value"))
+
+    expected = TealSimpleBlock([
+        TealOp(Op.byte, "\"value\""),
+        TealOp(Op.store, myvar.slot),
+    ])
+
+    actual, _ = expr.__teal__()
+    actual.addIncoming()
+    actual = TealBlock.NormalizeBlocks(actual)
+
+    assert actual == expected
+
+def test_scratchvar_load():
+    myvar = ScratchVar()
+    expr = myvar.load()
+
+    expected = TealSimpleBlock([
+        TealOp(Op.load, myvar.slot)
+    ])
+
+    actual, _ = expr.__teal__()
+    actual.addIncoming()
+    actual = TealBlock.NormalizeBlocks(actual)
+
+    assert actual == expected
