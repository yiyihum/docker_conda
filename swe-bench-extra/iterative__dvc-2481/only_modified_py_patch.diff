diff --git a/dvc/scm/base.py b/dvc/scm/base.py
--- a/dvc/scm/base.py
+++ b/dvc/scm/base.py
@@ -23,11 +23,6 @@ class FileNotInCommitError(SCMError):
     """
 
 
-class FileNotInTargetSubdirError(SCMError):
-    """Thrown when trying to place .gitignore for a file that not in
-    the file subdirectory."""
-
-
 class CloneError(SCMError):
     def __init__(self, url, path, cause):
         super(CloneError, self).__init__(
diff --git a/dvc/scm/git/__init__.py b/dvc/scm/git/__init__.py
--- a/dvc/scm/git/__init__.py
+++ b/dvc/scm/git/__init__.py
@@ -11,7 +11,6 @@
     Base,
     SCMError,
     FileNotInRepoError,
-    FileNotInTargetSubdirError,
     CloneError,
     RevError,
 )
@@ -104,22 +103,12 @@ def dir(self):
     def ignore_file(self):
         return self.GITIGNORE
 
-    def _get_gitignore(self, path, ignore_file_dir=None):
-        if not ignore_file_dir:
-            ignore_file_dir = os.path.dirname(os.path.realpath(path))
+    def _get_gitignore(self, path):
+        ignore_file_dir = os.path.dirname(path)
 
         assert os.path.isabs(path)
         assert os.path.isabs(ignore_file_dir)
 
-        if not path.startswith(ignore_file_dir):
-            msg = (
-                "{} file has to be located in one of '{}' subdirectories"
-                ", not outside '{}'"
-            )
-            raise FileNotInTargetSubdirError(
-                msg.format(self.GITIGNORE, path, ignore_file_dir)
-            )
-
         entry = relpath(path, ignore_file_dir).replace(os.sep, "/")
         # NOTE: using '/' prefix to make path unambiguous
         if len(entry) > 0 and entry[0] != "/":
@@ -143,8 +132,7 @@ def _ignored(entry, gitignore_path):
         return False
 
     def ignore(self, path):
-        base_dir = os.path.dirname(path)
-        entry, gitignore = self._get_gitignore(path, base_dir)
+        entry, gitignore = self._get_gitignore(path)
 
         if self._ignored(entry, gitignore):
             return

