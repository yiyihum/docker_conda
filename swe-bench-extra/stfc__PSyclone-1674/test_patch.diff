diff --git a/src/psyclone/tests/psyir/transformations/intrinsics/matmul2code_trans_test.py b/src/psyclone/tests/psyir/transformations/intrinsics/matmul2code_trans_test.py
index c704e5f99..433642b4a 100644
--- a/src/psyclone/tests/psyir/transformations/intrinsics/matmul2code_trans_test.py
+++ b/src/psyclone/tests/psyir/transformations/intrinsics/matmul2code_trans_test.py
@@ -1,7 +1,7 @@
 # -----------------------------------------------------------------------------
 # BSD 3-Clause License
 #
-# Copyright (c) 2020-2021, Science and Technology Facilities Council
+# Copyright (c) 2020-2022, Science and Technology Facilities Council.
 # All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
@@ -31,11 +31,10 @@
 # ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 # POSSIBILITY OF SUCH DAMAGE.
 # -----------------------------------------------------------------------------
-# Authors R. W. Ford and S. Siso, STFC Daresbury Lab
+# Authors R. W. Ford, A. R. Porter and S. Siso, STFC Daresbury Laboratory
 
 '''Module containing tests for the matmul2code transformation.'''
 
-from __future__ import absolute_import
 import pytest
 from psyclone.psyir.transformations import Matmul2CodeTrans, \
     TransformationError
@@ -331,7 +330,7 @@ def test_validate12():
     with pytest.raises(NotImplementedError) as excinfo:
         trans.validate(matmul)
     assert ("To use matmul2code_trans on matmul, index 0 of the 2nd (vector) "
-            "argument 'x' must be a full range." in str(excinfo.value))
+            "argument 'y' must be a full range." in str(excinfo.value))
 
 
 def test_validate13():
@@ -539,7 +538,8 @@ def test_get_array_bound_error():
 
 def test_get_array_bound():
     '''Test that the _get_array_bound utility function returns the expected
-    bound values for different types of array declaration.
+    bound values for different types of array declaration. Also checks that
+    new nodes are created each time the utility is called.
 
     '''
     scalar_symbol = DataSymbol("n", INTEGER_TYPE, constant_value=20)
@@ -559,6 +559,11 @@ def test_get_array_bound():
     assert isinstance(step, Literal)
     assert step.value == "1"
     assert step.datatype.intrinsic == ScalarType.Intrinsic.INTEGER
+    # Check that the method creates new nodes each time.
+    (lower_bound2, upper_bound2, step2) = _get_array_bound(reference, 0)
+    assert lower_bound2 is not lower_bound
+    assert upper_bound2 is not upper_bound
+    assert step2 is not step
     # symbol
     (lower_bound, upper_bound, step) = _get_array_bound(reference, 1)
     assert isinstance(lower_bound, Literal)
@@ -569,6 +574,11 @@ def test_get_array_bound():
     assert isinstance(step, Literal)
     assert step.value == "1"
     assert step.datatype.intrinsic == ScalarType.Intrinsic.INTEGER
+    # Check that the method creates new nodes each time.
+    (lower_bound2, upper_bound2, step2) = _get_array_bound(reference, 1)
+    assert lower_bound2 is not lower_bound
+    assert upper_bound2 is not upper_bound
+    assert step2 is not step
 
     # deferred and attribute
     def _check_ulbound(lower_bound, upper_bound, step, index):
@@ -598,5 +608,13 @@ def test_get_array_bound():
         assert step.datatype.intrinsic == ScalarType.Intrinsic.INTEGER
     (lower_bound, upper_bound, step) = _get_array_bound(reference, 2)
     _check_ulbound(lower_bound, upper_bound, step, 2)
+    (lower_bound2, upper_bound2, step2) = _get_array_bound(reference, 2)
+    assert lower_bound2 is not lower_bound
+    assert upper_bound2 is not upper_bound
+    assert step2 is not step
     (lower_bound, upper_bound, step) = _get_array_bound(reference, 3)
     _check_ulbound(lower_bound, upper_bound, step, 3)
+    (lower_bound2, upper_bound2, step2) = _get_array_bound(reference, 3)
+    assert lower_bound2 is not lower_bound
+    assert upper_bound2 is not upper_bound
+    assert step2 is not step
