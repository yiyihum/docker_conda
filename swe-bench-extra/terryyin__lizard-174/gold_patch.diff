diff --git a/lizard_ext/lizardns.py b/lizard_ext/lizardns.py
index fe24dfc..3330550 100644
--- a/lizard_ext/lizardns.py
+++ b/lizard_ext/lizardns.py
@@ -39,7 +39,7 @@ class LizardExtension(object):  # pylint: disable=R0903
         If the following contract for the nesting level metric does not hold,
         this implementation of nested structure counting is invalid.
 
-        If a control structure has started its block (eg. '{'),
+        If a control structure has started its block (e.g., '{'),
         and its level is **less** than the next structure,
         the next structure is nested.
 
@@ -107,14 +107,13 @@ class LizardExtension(object):  # pylint: disable=R0903
                 structure_stack.pop()
 
         for token in tokens:
+            yield token
             cur_level = reader.context.current_nesting_level
             if token in structures:
                 add_nested_structure(token)
             else:
                 pop_nested_structure()
 
-            yield token
-
 
 def _init_nested_structure_data(self, *_):
     self.max_nested_structures = 0
diff --git a/lizard_languages/clike.py b/lizard_languages/clike.py
index 20b683f..bf97d97 100644
--- a/lizard_languages/clike.py
+++ b/lizard_languages/clike.py
@@ -88,50 +88,69 @@ class CLikeNestingStackStates(CodeStateMachine):
     The handling of these complex cases is unspecified and can be ignored.
     """
 
-    # Beasts that can be defined within one line without braces.
-    __braceless_structures = set(['if', 'else', 'for', 'while', 'do',
-                                  'switch'])
-    __paren_count = 0  # Used only to tackle the beasts.
-    __braceless = None  # Applies only to the beasts.
-    __structure_brace_stack = []  # Boolean stack for structures' brace states.
-
-    def __pop_braceless_structures(self):
-        """Pops structures up to the one with braces."""
+    __structures = set(["if", "else", "for", "while", "do", "switch",
+                        "try", "catch"])
+    # Structures paired on the same nesting level.
+    __paired_structures = {"if": "else", "try": "catch", "catch": "catch",
+                           "do": "while"}
+    __wait_for_pair = False  # Wait for the pair structure to close the level.
+    __structure_brace_stack = []  # Structure and brace states.
+
+    def __pop_without_pair(self):
+        """Continue poping nesting levels without the pair."""
+        self.__wait_for_pair = False
+        while (self.__structure_brace_stack and
+               self.__structure_brace_stack[-1]):
+            structure = self.__structure_brace_stack.pop()
+            self.context.pop_nesting()
+            if structure in self.__paired_structures:
+                self.__wait_for_pair = self.__paired_structures[structure]
+                return
+
+    def __pop_structures(self):
+        """Pops structures up to the one with braces or a waiting pair."""
         self.context.pop_nesting()
-        is_structure = None
+        structure = None
         if self.__structure_brace_stack:
-            is_structure = self.__structure_brace_stack.pop()
+            structure = self.__structure_brace_stack.pop()
 
-        while (is_structure is not None and self.__structure_brace_stack and
-                self.__structure_brace_stack[-1]):
-            self.__structure_brace_stack.pop()
-            self.context.pop_nesting()
+        if structure is None:
+            return
+        if structure in self.__paired_structures:
+            self.__wait_for_pair = self.__paired_structures[structure]
+            return
+        self.__pop_without_pair()
 
     def __else_if_structure(self, token):
         """Handles possible compound 'else if' after 'else' token."""
         self._state = self.__declare_structure
-        if token != "if":
+        if token == "if":
+            self.__structure_brace_stack[-1] = "if"
+        else:
             self._state(token)
 
+    @CodeStateMachine.read_inside_brackets_then("()")
     def __declare_structure(self, token):
         """Ignores structures between parentheses on structure declaration."""
-        if token == "(":
-            self.__paren_count += 1
-        elif token == ")":
-            # assert self.__paren_count > 0
-            self.__paren_count -= 1
-        elif self.__paren_count == 0:
-            self._state = self._state_global
-            if token == "{":
-                self.__braceless = False
-            else:
-                self.__braceless = True
-                self.context.add_bare_nesting()
-                self.__structure_brace_stack.append(True)
+        self.context.add_bare_nesting()
+        self._state = self._state_structure
+        if token != ")":
+            self._state(token)
+
+    def _state_structure(self, token):
+        """Control-flow structure states right before the body."""
+        self._state = self._state_global
+        if token == "{":
+            self.context.add_bare_nesting()
+            self.__structure_brace_stack.append(False)
+        else:
             self._state(token)
 
     def _state_global(self, token):
         """Dual-purpose state for global and structure bodies."""
+        while self.__wait_for_pair and token != self.__wait_for_pair:
+            self.__pop_without_pair()
+
         if token == "template":
             self._state = self._template_declaration
 
@@ -140,16 +159,15 @@ class CLikeNestingStackStates(CodeStateMachine):
 
         elif token == "{":
             self.context.add_bare_nesting()
-            self.__structure_brace_stack.append(self.__braceless)
-            self.__braceless = None
+            self.__structure_brace_stack.append(None)  # Non-structure braces.
 
         elif token == '}' or (token == ";" and self.__structure_brace_stack and
                               self.__structure_brace_stack[-1]):
-            self.__braceless = None
-            self.__pop_braceless_structures()
+            self.__pop_structures()
 
-        elif token in self.__braceless_structures:
-            # assert self.__paren_count == 0
+        elif token in self.__structures:
+            self.__wait_for_pair = False
+            self.__structure_brace_stack.append(token)
             if token == "else":
                 self._state = self.__else_if_structure
             else:
