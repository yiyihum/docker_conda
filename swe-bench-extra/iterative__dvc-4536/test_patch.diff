diff --git a/tests/func/test_version.py b/tests/func/test_version.py
--- a/tests/func/test_version.py
+++ b/tests/func/test_version.py
@@ -1,72 +1,13 @@
-import os
 import re
-import shutil
 
-import pytest
-
-from dvc.command.version import psutil
 from dvc.main import main
 
 
-@pytest.mark.parametrize("scm_init", [True, False])
-def test_info_in_repo(scm_init, tmp_dir, caplog):
-    tmp_dir.init(scm=scm_init, dvc=True)
-    # Create `.dvc/cache`, that is needed to check supported link types.
-    os.mkdir(tmp_dir.dvc.cache.local.cache_dir)
-
+def test_(tmp_dir, dvc, scm, caplog):
     assert main(["version"]) == 0
 
     assert re.search(r"DVC version: \d+\.\d+\.\d+.*", caplog.text)
     assert re.search(r"Platform: Python \d\.\d+\.\d+ on .*", caplog.text)
     assert re.search(r"Supports: .*", caplog.text)
     assert re.search(r"Cache types: .*", caplog.text)
-
-    if scm_init:
-        assert "Repo: dvc, git" in caplog.text
-    else:
-        assert "Repo: dvc (no_scm)" in caplog.text
-
-
-def test_info_in_subdir(tmp_dir, scm, caplog):
-    dvc_subdir = tmp_dir / "subdir"
-    dvc_subdir.mkdir()
-
-    with dvc_subdir.chdir():
-        dvc_subdir.init(scm=False, dvc=True)
-        with dvc_subdir.dvc.config.edit() as conf:
-            del conf["core"]["no_scm"]
-
-        assert main(["version"]) == 0
-
-    assert "Repo: dvc (subdir), git" in caplog.text
-
-
-def test_info_in_broken_git_repo(tmp_dir, dvc, scm, caplog):
-    shutil.rmtree(dvc.scm.dir)
-    assert main(["version"]) == 0
-
-    assert "Repo: dvc, git (broken)" in caplog.text
-
-
-@pytest.mark.skipif(psutil is None, reason="No psutil.")
-def test_fs_info_in_repo(tmp_dir, dvc, caplog):
-    os.mkdir(dvc.cache.local.cache_dir)
-    assert main(["version"]) == 0
-
-    assert re.search(r"Cache directory: .* on .*", caplog.text)
-    assert re.search(r"Workspace directory: .* on .*", caplog.text)
-
-
-def test_info_outside_of_repo(tmp_dir, caplog):
-    assert main(["version"]) == 0
-
-    assert re.search(r"DVC version: \d+\.\d+\.\d+.*", caplog.text)
-    assert re.search(r"Platform: Python \d\.\d+\.\d+ on .*", caplog.text)
-    assert re.search(r"Supports: .*", caplog.text)
-    assert not re.search(r"Cache types: .*", caplog.text)
-    assert "Repo:" not in caplog.text
-
-
-@pytest.mark.skipif(psutil is None, reason="No psutil.")
-def test_fs_info_outside_of_repo(tmp_dir, caplog):
-    assert main(["version"]) == 0
+    assert "Repo: dvc, git" in caplog.text
diff --git a/tests/unit/remote/ssh/test_connection.py b/tests/unit/remote/ssh/test_connection.py
--- a/tests/unit/remote/ssh/test_connection.py
+++ b/tests/unit/remote/ssh/test_connection.py
@@ -6,7 +6,7 @@
 
 import pytest
 
-from dvc.command.version import CmdVersion
+from dvc.info import get_fs_type
 from dvc.system import System
 
 here = os.path.abspath(os.path.dirname(__file__))
@@ -85,8 +85,7 @@ def test_walk(tmp_path, ssh_connection):
 
 
 @pytest.mark.skipif(
-    CmdVersion.get_fs_type(tempfile.gettempdir())[0]
-    not in ["xfs", "apfs", "btrfs"],
+    get_fs_type(tempfile.gettempdir())[0] not in ["xfs", "apfs", "btrfs"],
     reason="Reflinks only work in specified file systems",
 )
 def test_reflink(tmp_dir, ssh_connection):
diff --git a/tests/unit/test_info.py b/tests/unit/test_info.py
new file mode 100644
--- /dev/null
+++ b/tests/unit/test_info.py
@@ -0,0 +1,74 @@
+import os
+import re
+import shutil
+
+import pytest
+
+from dvc.info import get_dvc_info, psutil
+
+
+@pytest.mark.parametrize("scm_init", [True, False])
+def test_info_in_repo(scm_init, tmp_dir):
+    tmp_dir.init(scm=scm_init, dvc=True)
+    # Create `.dvc/cache`, that is needed to check supported link types.
+    os.mkdir(tmp_dir.dvc.cache.local.cache_dir)
+
+    dvc_info = get_dvc_info()
+
+    assert re.search(r"DVC version: \d+\.\d+\.\d+.*", dvc_info)
+    assert re.search(r"Platform: Python \d\.\d+\.\d+ on .*", dvc_info)
+    assert re.search(r"Supports: .*", dvc_info)
+    assert re.search(r"Cache types: .*", dvc_info)
+
+    if scm_init:
+        assert "Repo: dvc, git" in dvc_info
+    else:
+        assert "Repo: dvc (no_scm)" in dvc_info
+
+
+def test_info_in_subdir(tmp_dir, scm, caplog):
+    dvc_subdir = tmp_dir / "subdir"
+    dvc_subdir.mkdir()
+
+    with dvc_subdir.chdir():
+        dvc_subdir.init(scm=False, dvc=True)
+        with dvc_subdir.dvc.config.edit() as conf:
+            del conf["core"]["no_scm"]
+
+        dvc_info = get_dvc_info()
+
+    assert "Repo: dvc (subdir), git" in dvc_info
+
+
+def test_info_in_broken_git_repo(tmp_dir, dvc, scm, caplog):
+    shutil.rmtree(dvc.scm.dir)
+    dvc_info = get_dvc_info()
+
+    assert "Repo: dvc, git (broken)" in dvc_info
+
+
+@pytest.mark.skipif(psutil is None, reason="No psutil.")
+def test_fs_info_in_repo(tmp_dir, dvc, caplog):
+    os.mkdir(dvc.cache.local.cache_dir)
+    dvc_info = get_dvc_info()
+
+    assert re.search(r"Cache directory: .* on .*", dvc_info)
+    assert re.search(r"Workspace directory: .* on .*", dvc_info)
+
+
+def test_info_outside_of_repo(tmp_dir, caplog):
+    dvc_info = get_dvc_info()
+
+    assert re.search(r"DVC version: \d+\.\d+\.\d+.*", dvc_info)
+    assert re.search(r"Platform: Python \d\.\d+\.\d+ on .*", dvc_info)
+    assert re.search(r"Supports: .*", dvc_info)
+    assert not re.search(r"Cache types: .*", dvc_info)
+    assert "Repo:" not in dvc_info
+
+
+@pytest.mark.skipif(psutil is None, reason="No psutil.")
+def test_fs_info_outside_of_repo(tmp_dir, caplog):
+    dvc_info = get_dvc_info()
+    assert re.search(r"DVC version: \d+\.\d+\.\d+.*", dvc_info)
+    assert re.search(r"Platform: Python \d\.\d+\.\d+ on .*", dvc_info)
+    assert re.search(r"Supports: .*", dvc_info)
