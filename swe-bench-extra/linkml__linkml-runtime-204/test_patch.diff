diff --git a/tests/test_utils/input/pattern-example.yaml b/tests/test_utils/input/pattern-example.yaml
index 544f1ed..f40b1d8 100644
--- a/tests/test_utils/input/pattern-example.yaml
+++ b/tests/test_utils/input/pattern-example.yaml
@@ -32,6 +32,7 @@ settings:
   unit.length: "(centimeter|meter|inch)"
   unit.weight: "(kg|g|lbs|stone)"
   email: "\\S+@\\S+{\\.\\w}+"
+  hyphenated_name: "\\S+-\\S+"
   
 #==================================
 # Classes                         #
@@ -45,6 +46,23 @@ classes:
       - height
       - email
 
+  FancyPersonInfo:
+    is_a: PersonInfo
+    slot_usage:
+      name:
+        structured_pattern:
+          syntax: "\\S+ {hyphenated_name}"
+          interpolated: true
+          partial_match: false
+
+  ClassWithAttributes:
+    attributes:
+      weight:
+        structured_pattern:
+          syntax: "{float} {unit.weight}"
+          interpolated: true
+          partial_match: false
+
 #==================================
 # Slots                           #
 #==================================
diff --git a/tests/test_utils/test_pattern.py b/tests/test_utils/test_pattern.py
index 8c48e02..81df8c0 100644
--- a/tests/test_utils/test_pattern.py
+++ b/tests/test_utils/test_pattern.py
@@ -4,13 +4,12 @@ from tests.test_utils.environment import env
 
 from linkml_runtime.utils.schemaview import SchemaView
 
-from linkml_runtime.utils.pattern import generate_patterns
+from linkml_runtime.utils.pattern import PatternResolver, generate_patterns
 
 
 class PatternTestCase(unittest.TestCase):
     def test_generate_patterns(self):
         """Test method that consolidates composite patterns."""
-
         sv = SchemaView(env.input_path("pattern-example.yaml"))
 
         # actual result returned from call to generate_patterns()
@@ -24,5 +23,14 @@ class PatternTestCase(unittest.TestCase):
         self.assertDictEqual(actual_dict, expected_dict)
 
 
+    def test_pattern_resolver(self):
+        sv = SchemaView(env.input_path("pattern-example.yaml"))
+
+        resolver = PatternResolver(sv)
+
+        self.assertEqual(resolver.resolve("{float} {unit.length}"), "\\d+[\\.\\d+] (centimeter|meter|inch)")
+        self.assertEqual(resolver.resolve("{float} {unit.weight}"), "\\d+[\\.\\d+] (kg|g|lbs|stone)")
+
+
 if __name__ == "__main__":
     unittest.main()
diff --git a/tests/test_utils/test_schemaview.py b/tests/test_utils/test_schemaview.py
index 3b3e175..9e24b7c 100644
--- a/tests/test_utils/test_schemaview.py
+++ b/tests/test_utils/test_schemaview.py
@@ -15,6 +15,7 @@ from tests.test_utils import INPUT_DIR
 
 SCHEMA_NO_IMPORTS = os.path.join(INPUT_DIR, 'kitchen_sink_noimports.yaml')
 SCHEMA_WITH_IMPORTS = os.path.join(INPUT_DIR, 'kitchen_sink.yaml')
+SCHEMA_WITH_STRUCTURED_PATTERNS = os.path.join(INPUT_DIR, "pattern-example.yaml")
 
 yaml_loader = YAMLLoader()
 
@@ -542,7 +543,7 @@ class SchemaViewTestCase(unittest.TestCase):
         self.assertListEqual(actual_result, expected_result)
 
     def test_materialize_patterns(self):
-        sv = SchemaView(os.path.join(INPUT_DIR, "pattern-example.yaml"))
+        sv = SchemaView(SCHEMA_WITH_STRUCTURED_PATTERNS)
 
         sv.materialize_patterns()
 
@@ -552,6 +553,24 @@ class SchemaViewTestCase(unittest.TestCase):
         self.assertEqual(height_slot.pattern, "\d+[\.\d+] (centimeter|meter|inch)")
         self.assertEqual(weight_slot.pattern, "\d+[\.\d+] (kg|g|lbs|stone)")
 
+    def test_materialize_patterns_slot_usage(self):
+        sv = SchemaView(SCHEMA_WITH_STRUCTURED_PATTERNS)
+
+        sv.materialize_patterns()
+
+        name_slot_usage = sv.get_class("FancyPersonInfo").slot_usage['name']
+
+        self.assertEqual(name_slot_usage.pattern, "\\S+ \\S+-\\S+")
+
+    def test_materialize_patterns_attribute(self):
+        sv = SchemaView(SCHEMA_WITH_STRUCTURED_PATTERNS)
+
+        sv.materialize_patterns()
+
+        weight_attribute = sv.get_class('ClassWithAttributes').attributes['weight']
+
+        self.assertEqual(weight_attribute.pattern, "\d+[\.\d+] (kg|g|lbs|stone)")
+
 
 if __name__ == '__main__':
     unittest.main()
