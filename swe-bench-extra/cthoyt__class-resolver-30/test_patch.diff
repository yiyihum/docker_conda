diff --git a/tests/_private_extras.py b/tests/_private_extras.py
new file mode 100644
index 0000000..861e181
--- /dev/null
+++ b/tests/_private_extras.py
@@ -0,0 +1,7 @@
+# -*- coding: utf-8 -*-
+
+"""This Module helps test private extras."""
+
+
+class PrivateDict(dict):
+    """A priviate dictionary."""
diff --git a/tests/test_utils.py b/tests/test_utils.py
new file mode 100644
index 0000000..7dc39bd
--- /dev/null
+++ b/tests/test_utils.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+
+"""Test utilities."""
+
+import enum
+import unittest
+from collections import Counter, defaultdict
+
+from class_resolver.utils import get_subclasses, same_module
+from tests._private_extras import PrivateDict
+
+
+class TestUtilities(unittest.TestCase):
+    """Test utilities."""
+
+    def test_same_module(self):
+        """Test getting subclasses."""
+        self.assertFalse(same_module(Counter, dict))
+        self.assertTrue(same_module(Counter, defaultdict))
+
+    def test_get_subclasses(self):
+        """Test getting subclasses."""
+        self.assertTrue(issubclass(PrivateDict, dict))
+
+        self.assertNotIn(Counter, set(get_subclasses(dict, exclude_external=True)))
+        self.assertIn(Counter, set(get_subclasses(dict, exclude_external=False)))
+
+        self.assertIn(
+            PrivateDict, set(get_subclasses(dict, exclude_external=False, exclude_private=False))
+        )
+        self.assertNotIn(
+            PrivateDict, set(get_subclasses(dict, exclude_external=False, exclude_private=True))
+        )
+        self.assertNotIn(
+            PrivateDict, set(get_subclasses(dict, exclude_external=True, exclude_private=False))
+        )
+        self.assertNotIn(
+            PrivateDict, set(get_subclasses(dict, exclude_external=True, exclude_private=True))
+        )
+
+        self.assertIn(
+            enum._EnumDict, set(get_subclasses(dict, exclude_external=False, exclude_private=False))
+        )
+        self.assertNotIn(
+            enum._EnumDict, set(get_subclasses(dict, exclude_external=False, exclude_private=True))
+        )
+        self.assertNotIn(
+            enum._EnumDict, set(get_subclasses(dict, exclude_external=True, exclude_private=False))
+        )
+        self.assertNotIn(
+            enum._EnumDict, set(get_subclasses(dict, exclude_external=True, exclude_private=True))
+        )
