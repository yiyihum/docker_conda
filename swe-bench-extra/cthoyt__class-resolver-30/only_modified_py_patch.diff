diff --git a/src/class_resolver/api.py b/src/class_resolver/api.py
index b3b3b49..a4d25aa 100644
--- a/src/class_resolver/api.py
+++ b/src/class_resolver/api.py
@@ -136,6 +136,7 @@ class ClassResolver(BaseResolver[Type[X], X]):
         *,
         skip: Optional[Collection[Type[X]]] = None,
         exclude_private: bool = True,
+        exclude_external: bool = True,
         **kwargs,
     ) -> "ClassResolver":
         """Make a resolver from the subclasses of a given class.
@@ -145,6 +146,8 @@ class ClassResolver(BaseResolver[Type[X], X]):
         :param exclude_private: If true, will skip any class that comes from a module
             starting with an underscore (i.e., a private module). This is typically
             done when having shadow duplicate classes implemented in C
+        :param exclude_external: If true, will exclude any class that does not originate
+            from the same package as the base class.
         :param kwargs: remaining keyword arguments to pass to :func:`Resolver.__init__`
         :return: A resolver instance
         """
@@ -152,7 +155,9 @@ class ClassResolver(BaseResolver[Type[X], X]):
         return cls(
             {
                 subcls
-                for subcls in get_subclasses(base, exclude_private=exclude_private)
+                for subcls in get_subclasses(
+                    base, exclude_private=exclude_private, exclude_external=exclude_external
+                )
                 if subcls not in skip
             },
             base=base,
diff --git a/src/class_resolver/utils.py b/src/class_resolver/utils.py
index f357954..f734ea1 100644
--- a/src/class_resolver/utils.py
+++ b/src/class_resolver/utils.py
@@ -35,6 +35,7 @@ __all__ = [
     "normalize_string",
     "upgrade_to_sequence",
     "make_callback",
+    "same_module",
 ]
 
 X = TypeVar("X")
@@ -54,22 +55,38 @@ OptionalKwargs = Optional[Mapping[str, Any]]
 OneOrSequence = Union[X, Sequence[X]]
 
 
-def get_subclasses(cls: Type[X], exclude_private: bool = True) -> Iterable[Type[X]]:
+def get_subclasses(
+    cls: Type[X],
+    exclude_private: bool = True,
+    exclude_external: bool = True,
+) -> Iterable[Type[X]]:
     """Get all subclasses.
 
     :param cls: The ancestor class
     :param exclude_private: If true, will skip any class that comes from a module
         starting with an underscore (i.e., a private module). This is typically
         done when having shadow duplicate classes implemented in C
+    :param exclude_external: If true, will exclude any class that does not originate
+        from the same package as the base class.
     :yields: Descendant classes of the ancestor class
     """
     for subclass in cls.__subclasses__():
         yield from get_subclasses(subclass)
-        if exclude_private and any(part.startswith("_") for part in subclass.__module__.split(".")):
+        if exclude_private:
+            if any(part.startswith("_") for part in subclass.__module__.split(".")):
+                continue
+            if subclass.__name__.startswith("_"):
+                continue
+        if exclude_external and not same_module(cls, subclass):
             continue
         yield subclass
 
 
+def same_module(cls1: type, cls2: type) -> bool:
+    """Return if two classes come from the same module via the ``__module__`` attribute."""
+    return cls1.__module__.split(".")[0] == cls2.__module__.split(".")[0]
+
+
 def normalize_string(s: str, *, suffix: Optional[str] = None) -> str:
     """Normalize a string for lookup."""
     s = s.lower().replace("-", "").replace("_", "").replace(" ", "")

