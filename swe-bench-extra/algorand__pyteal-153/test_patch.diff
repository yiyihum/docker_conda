diff --git a/pyteal/ast/methodsig_test.py b/pyteal/ast/methodsig_test.py
new file mode 100644
index 0000000..6a941ea
--- /dev/null
+++ b/pyteal/ast/methodsig_test.py
@@ -0,0 +1,27 @@
+import pytest
+
+from pyteal.ast.methodsig import MethodSignature
+
+from .. import *
+
+
+def test_method():
+    expr = MethodSignature("add(uint64,uint64)uint64")
+    assert expr.type_of() == TealType.bytes
+
+    expected = TealSimpleBlock(
+        [TealOp(expr, Op.method_signature, '"add(uint64,uint64)uint64"')]
+    )
+    actual, _ = expr.__teal__(CompileOptions())
+    assert expected == actual
+
+
+def test_method_invalid():
+    with pytest.raises(TealInputError):
+        MethodSignature(114514)
+
+    with pytest.raises(TealInputError):
+        MethodSignature(['"m0()void"', '"m1()uint64"'])
+
+    with pytest.raises(TealInputError):
+        MethodSignature("")
diff --git a/pyteal/compiler/constants_test.py b/pyteal/compiler/constants_test.py
index 12d97b3..bd69d46 100644
--- a/pyteal/compiler/constants_test.py
+++ b/pyteal/compiler/constants_test.py
@@ -5,6 +5,7 @@ from .constants import (
     extractBytesValue,
     extractAddrValue,
     createConstantBlocks,
+    extractMethodSigValue,
 )
 
 
@@ -63,6 +64,44 @@ def test_extractAddrValue():
         assert actual == expected
 
 
+# test case came from: https://gist.github.com/jasonpaulos/99e4f8a75f2fc2ec9b8073c064530359
+def test_extractMethodValue():
+    tests = [
+        (
+            TealOp(None, Op.method_signature, '"create(uint64)uint64"'),
+            b"\x43\x46\x41\x01",
+        ),
+        (TealOp(None, Op.method_signature, '"update()void"'), b"\xa0\xe8\x18\x72"),
+        (
+            TealOp(None, Op.method_signature, '"optIn(string)string"'),
+            b"\xcf\xa6\x8e\x36",
+        ),
+        (TealOp(None, Op.method_signature, '"closeOut()string"'), b"\xa9\xf4\x2b\x3d"),
+        (TealOp(None, Op.method_signature, '"delete()void"'), b"\x24\x37\x8d\x3c"),
+        (
+            TealOp(None, Op.method_signature, '"add(uint64,uint64)uint64"'),
+            b"\xfe\x6b\xdf\x69",
+        ),
+        (TealOp(None, Op.method_signature, '"empty()void"'), b"\xa8\x8c\x26\xa5"),
+        (
+            TealOp(None, Op.method_signature, '"payment(pay,uint64)bool"'),
+            b"\x3e\x3b\x3d\x28",
+        ),
+        (
+            TealOp(
+                None,
+                Op.method_signature,
+                '"referenceTest(account,application,account,asset,account,asset,asset,application,application)uint8[9]"',
+            ),
+            b"\x0d\xf0\x05\x0f",
+        ),
+    ]
+
+    for op, expected in tests:
+        actual = extractMethodSigValue(op)
+        assert actual == expected
+
+
 def test_createConstantBlocks_empty():
     ops = []
 
@@ -184,12 +223,14 @@ def test_createConstantBlocks_pushbytes():
     ops = [
         TealOp(None, Op.byte, "0x0102"),
         TealOp(None, Op.byte, "0x0103"),
+        TealOp(None, Op.method_signature, '"empty()void"'),
         TealOp(None, Op.concat),
     ]
 
     expected = [
         TealOp(None, Op.pushbytes, "0x0102", "//", "0x0102"),
         TealOp(None, Op.pushbytes, "0x0103", "//", "0x0103"),
+        TealOp(None, Op.pushbytes, "0xa88c26a5", "//", '"empty()void"'),
         TealOp(None, Op.concat),
     ]
 
@@ -240,6 +281,9 @@ def test_createConstantBlocks_byteblock_multiple():
             None, Op.addr, "WSJHNPJ6YCLX5K4GUMQ4ISPK3ABMS3AL3F6CSVQTCUI5F4I65PWEMCWT3M"
         ),
         TealOp(None, Op.concat),
+        TealOp(None, Op.method_signature, '"closeOut()string"'),
+        TealOp(None, Op.concat),
+        TealOp(None, Op.byte, "base64(qfQrPQ==)"),
     ]
 
     expected = [
@@ -249,6 +293,7 @@ def test_createConstantBlocks_byteblock_multiple():
             "0x0102",
             "0x74657374",
             "0xb49276bd3ec0977eab86a321c449ead802c96c0bd97c2956131511d2f11eebec",
+            "0xa9f42b3d",
         ),
         TealOp(None, Op.bytec_0, "//", "0x0102"),
         TealOp(None, Op.bytec_0, "//", "base64(AQI=)"),
@@ -273,6 +318,9 @@ def test_createConstantBlocks_byteblock_multiple():
             "WSJHNPJ6YCLX5K4GUMQ4ISPK3ABMS3AL3F6CSVQTCUI5F4I65PWEMCWT3M",
         ),
         TealOp(None, Op.concat),
+        TealOp(None, Op.bytec_3, "//", '"closeOut()string"'),
+        TealOp(None, Op.concat),
+        TealOp(None, Op.bytec_3, "//", "base64(qfQrPQ==)"),
     ]
 
     actual = createConstantBlocks(ops)
