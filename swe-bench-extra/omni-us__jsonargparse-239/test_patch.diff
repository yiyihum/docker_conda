diff --git a/jsonargparse_tests/base.py b/jsonargparse_tests/base.py
index dcf3afa..0123342 100644
--- a/jsonargparse_tests/base.py
+++ b/jsonargparse_tests/base.py
@@ -38,6 +38,8 @@ def mock_module(*args):
     __module__ = 'jsonargparse_tests'
     for component in args:
         component.__module__ = __module__
+        if not hasattr(component, '__name__'):
+            component.__name__ = type(component).__name__.lower()
         component.__qualname__ = component.__name__
         if inspect.isclass(component):
             methods = [k for k, v in inspect.getmembers(component) if callable(v) and k[0] != '_']
diff --git a/jsonargparse_tests/test_cli.py b/jsonargparse_tests/test_cli.py
index 93874ab..10daca8 100755
--- a/jsonargparse_tests/test_cli.py
+++ b/jsonargparse_tests/test_cli.py
@@ -2,6 +2,7 @@
 
 import sys
 import unittest
+import unittest.mock
 from contextlib import redirect_stderr, redirect_stdout
 from io import StringIO
 from typing import Optional
@@ -16,6 +17,11 @@ from jsonargparse_tests.base import TempDirTestCase, mock_module
 
 class CLITests(unittest.TestCase):
 
+    def test_unexpected(self):
+        with self.assertRaises(ValueError):
+            CLI(0)
+
+
     def test_single_function_cli(self):
         def function(a1: float):
             return a1
@@ -36,6 +42,16 @@ class CLITests(unittest.TestCase):
         self.assertIn('function CLITests.test_single_function_cli', out.getvalue())
 
 
+    def test_callable_instance(self):
+        class CallableClass:
+            def __call__(self, x: int):
+                return x
+
+        instance = CallableClass()
+        with mock_module(instance):
+            self.assertEqual(3, CLI(instance, as_positional=False, args=['--x=3']))
+
+
     def test_multiple_functions_cli(self):
         def cmd1(a1: int):
             return a1
