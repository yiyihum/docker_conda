diff --git a/azely/__init__.py b/azely/__init__.py
index d397bbd..583e6a7 100644
--- a/azely/__init__.py
+++ b/azely/__init__.py
@@ -8,7 +8,6 @@ __all__ = [
     "get_time",
     "location",
     "object",
-    "query",
     "time",
     "utils",
 ]
@@ -18,7 +17,6 @@ __version__ = "0.7.0"
 # submodules
 from . import consts
 from . import cache
-from . import query
 from . import utils
 from . import location
 from . import object
diff --git a/azely/consts.py b/azely/consts.py
index 3beab4f..2545a31 100644
--- a/azely/consts.py
+++ b/azely/consts.py
@@ -8,8 +8,8 @@ determined by some environment variables of client.
 __all__ = [
     "AZELY_DIR",
     "AZELY_CONFIG",
-    "AZELY_OBJECT",
-    "AZELY_LOCATION",
+    "AZELY_OBJECTS",
+    "AZELY_LOCATIONS",
     "SOLAR_FRAME",
     "SOLAR_OBJECTS",
     "HERE",
@@ -73,8 +73,8 @@ else:
 
 
 AZELY_CONFIG = ensure(AZELY_DIR / "config.toml")
-AZELY_OBJECT = ensure(AZELY_DIR / "objects.toml")
-AZELY_LOCATION = ensure(AZELY_DIR / "locations.toml")
+AZELY_OBJECTS = ensure(AZELY_DIR / "objects.toml")
+AZELY_LOCATIONS = ensure(AZELY_DIR / "locations.toml")
 
 
 # special values for the solar system ephemeris
diff --git a/azely/location.py b/azely/location.py
index d9bd5d9..563626a 100644
--- a/azely/location.py
+++ b/azely/location.py
@@ -4,7 +4,7 @@ __all__ = ["Location", "get_location"]
 # standard library
 from dataclasses import dataclass
 from datetime import tzinfo
-from typing import ClassVar
+from typing import ClassVar, Optional
 
 
 # dependencies
@@ -15,8 +15,7 @@ from ipinfo import getHandler
 from pytz import timezone
 from timezonefinder import TimezoneFinder
 from .cache import PathLike, cache
-from .consts import AZELY_LOCATION, GOOGLE_API, HERE, IPINFO_API, TIMEOUT
-from .query import parse
+from .consts import AZELY_LOCATIONS, GOOGLE_API, HERE, IPINFO_API, TIMEOUT
 
 
 @dataclass
@@ -65,39 +64,45 @@ class Location:
 
 def get_location(
     query: str,
+    /,
     *,
     google_api: str = GOOGLE_API,
     ipinfo_api: str = IPINFO_API,
+    name: Optional[str] = None,
+    source: PathLike = AZELY_LOCATIONS,
     timeout: int = TIMEOUT,
+    update: bool = False,
 ) -> Location:
     """Get location information."""
-    parsed = parse(query)
-
-    if parsed.query.lower() == HERE:
+    if query.lower() == HERE:
         return get_location_by_ip(
-            query=parsed.query,
+            query,
             ipinfo_api=ipinfo_api,
+            name=name,
             timeout=timeout,
-            source=parsed.source or AZELY_LOCATION,
-            update=parsed.update,
+            source=source,
+            update=update,
         )
     else:
         return get_location_by_name(
-            query=parsed.query,
+            query,
             google_api=google_api,
+            name=name,
             timeout=timeout,
-            source=parsed.source or AZELY_LOCATION,
-            update=parsed.update,
+            source=source,
+            update=update,
         )
 
 
 @cache
 def get_location_by_ip(
     query: str,
+    /,
     *,
     ipinfo_api: str,
-    timeout: int,
+    name: Optional[str],
     source: PathLike,  # consumed by @cache
+    timeout: int,
     update: bool,  # consumed by @cache
 ) -> Location:
     """Get location information by current IP address."""
@@ -114,10 +119,12 @@ def get_location_by_ip(
 @cache
 def get_location_by_name(
     query: str,
+    /,
     *,
     google_api: str,
-    timeout: int,
+    name: Optional[str],
     source: PathLike,  # consumed by @cache
+    timeout: int,
     update: bool,  # consumed by @cache
 ) -> Location:
     """Get location information by a location name."""
@@ -129,7 +136,7 @@ def get_location_by_name(
         )
 
     return Location(
-        name=query,
+        name=name or query,
         longitude=str(response.lon),
         latitude=str(response.lat),
     )
diff --git a/azely/object.py b/azely/object.py
index 02ecc55..1f57ef3 100644
--- a/azely/object.py
+++ b/azely/object.py
@@ -3,7 +3,7 @@ __all__ = ["Object", "get_object"]
 
 # standard library
 from dataclasses import dataclass
-from typing import List
+from typing import Optional
 
 
 # dependent packages
@@ -11,8 +11,7 @@ from astropy.coordinates import Longitude, Latitude, SkyCoord, get_body
 from astropy.time import Time as ObsTime
 from astropy.utils.data import conf
 from .cache import PathLike, cache
-from .consts import AZELY_OBJECT, FRAME, SOLAR_FRAME, SOLAR_OBJECTS, TIMEOUT
-from .query import parse
+from .consts import AZELY_OBJECTS, FRAME, SOLAR_FRAME, SOLAR_OBJECTS, TIMEOUT
 
 
 @dataclass
@@ -64,39 +63,45 @@ class Object:
 
 def get_object(
     query: str,
+    /,
     *,
     frame: str = FRAME,
+    name: Optional[str] = None,
+    source: PathLike = AZELY_OBJECTS,
     timeout: int = TIMEOUT,
+    update: bool = False,
 ) -> Object:
     """Get object information."""
-    parsed = parse(query)
-
-    if parsed.query.lower() in SOLAR_OBJECTS:
+    if query.lower() in SOLAR_OBJECTS:
         return get_object_solar(
-            query=parsed.query,
-            source=parsed.source or AZELY_OBJECT,
-            update=parsed.update,
+            query,
+            name=name,
+            source=source,
+            update=update,
         )
     else:
         return get_object_by_name(
-            query=parsed.query,
+            query,
             frame=frame,
+            name=name,
             timeout=timeout,
-            source=parsed.source or AZELY_OBJECT,
-            update=parsed.update,
+            source=source,
+            update=update,
         )
 
 
 @cache
 def get_object_solar(
     query: str,
+    /,
     *,
+    name: Optional[str],
     source: PathLike,  # consumed by @cache
     update: bool,  # consumed by @cache
 ) -> Object:
     """Get object information in the solar system."""
     return Object(
-        name=query,
+        name=name or query,
         longitude="NA",
         latitude="NA",
         frame=SOLAR_FRAME,
@@ -106,10 +111,12 @@ def get_object_solar(
 @cache
 def get_object_by_name(
     query: str,
+    /,
     *,
     frame: str,
-    timeout: int,
+    name: Optional[str],
     source: PathLike,  # consumed by @cache
+    timeout: int,
     update: bool,  # consumed by @cache
 ) -> Object:
     """Get object information by an object name."""
@@ -122,7 +129,7 @@ def get_object_by_name(
         )
 
     return Object(
-        name=query,
+        name=name or query,
         longitude=str(response.data.lon),  # type: ignore
         latitude=str(response.data.lat),  # type: ignore
         frame=frame,
