diff --git a/rocrate/model/dataset.py b/rocrate/model/dataset.py
index 4a47c41..2944dff 100644
--- a/rocrate/model/dataset.py
+++ b/rocrate/model/dataset.py
@@ -79,4 +79,5 @@ class Dataset(DataEntity):
         # iterate over the entries
         for file_src, rel_path in self.directory_entries():
             dest_path = os.path.join(out_path, rel_path)
-            zip_out.write(file_src, dest_path)
+            if dest_path not in zip_out.namelist():
+                zip_out.write(file_src, dest_path)
diff --git a/rocrate/model/file.py b/rocrate/model/file.py
index 9f2e5a6..4b5cc50 100644
--- a/rocrate/model/file.py
+++ b/rocrate/model/file.py
@@ -124,4 +124,5 @@ class File(DataEntity):
                         shutil.copyfileobj(response, out_file)
 
     def write_zip(self, zip_out):
-        zip_out.write(self.source, self.id)
+        if self.id not in zip_out.namelist():
+            zip_out.write(self.source, self.id)
diff --git a/rocrate/rocrate.py b/rocrate/rocrate.py
index 0e652c7..74e0ab6 100644
--- a/rocrate/rocrate.py
+++ b/rocrate/rocrate.py
@@ -87,6 +87,8 @@ class ROCrate():
             entities = self.entities_from_metadata(metadata_path)
             self.build_crate(entities, source_path, load_preview)
             # TODO: load root dataset properties
+        # in the zip case, self.source_path is the extracted dir
+        self.source_path = source_path
 
     def __init_from_tree(self, top_dir, load_preview=False):
         top_dir = Path(top_dir)
@@ -427,10 +429,26 @@ class ROCrate():
 
     # write crate to local dir
     def write_crate(self, base_path):
-        Path(base_path).mkdir(parents=True, exist_ok=True)
+        base_path = Path(base_path)
+        base_path.mkdir(parents=True, exist_ok=True)
+        # copy unlisted files and directories
+        if self.source_path:
+            top = self.source_path
+            for root, dirs, files in os.walk(top):
+                root = Path(root)
+                for name in dirs:
+                    source = root / name
+                    dest = base_path / source.relative_to(top)
+                    dest.mkdir(parents=True, exist_ok=True)
+                for name in files:
+                    source = root / name
+                    rel = source.relative_to(top)
+                    if not self.dereference(str(rel)):
+                        dest = base_path / rel
+                        shutil.copyfile(source, dest)
         # write data entities
         for writable_entity in self.data_entities + self.default_entities:
-            writable_entity.write(base_path)
+            writable_entity.write(str(base_path))
 
     def write_zip(self, out_zip):
         if str(out_zip).endswith('.zip'):
@@ -441,6 +459,16 @@ class ROCrate():
             out_file_path, 'w', compression=zipfile.ZIP_DEFLATED,
             allowZip64=True
         )
+        # copy unlisted files and directories
+        if self.source_path:
+            top = self.source_path
+            for root, dirs, files in os.walk(top):
+                root = Path(root)
+                for name in files:
+                    source = root / name
+                    dest = source.relative_to(top)
+                    if not self.dereference(str(dest)):
+                        zf.write(str(source), str(dest))
         for writable_entity in self.data_entities + self.default_entities:
             writable_entity.write_zip(zf)
         zf.close()
