diff --git a/pydra/engine/core.py b/pydra/engine/core.py
index b04a50e..90bd3d3 100644
--- a/pydra/engine/core.py
+++ b/pydra/engine/core.py
@@ -34,7 +34,6 @@ from .helpers import (
     ensure_list,
     record_error,
     hash_function,
-    output_from_inputfields,
 )
 from .helpers_file import copyfile_input, template_update
 from .graph import DiGraph
@@ -312,7 +311,7 @@ class TaskBase:
     @property
     def output_names(self):
         """Get the names of the outputs generated by the task."""
-        return output_from_inputfields(self.output_spec, self.inputs, names_only=True)
+        return [f.name for f in attr.fields(make_klass(self.output_spec))]
 
     @property
     def can_resume(self):
@@ -411,7 +410,7 @@ class TaskBase:
             try:
                 self.audit.monitor()
                 self._run_task()
-                result.output = self._collect_outputs()
+                result.output = self._collect_outputs(output_dir=odir)
             except Exception as e:
                 record_error(self.output_dir, e)
                 result.errored = True
@@ -429,12 +428,11 @@ class TaskBase:
         self.hooks.post_run(self, result)
         return result
 
-    def _collect_outputs(self):
+    def _collect_outputs(self, output_dir):
         run_output = self.output_
-        self.output_spec = output_from_inputfields(self.output_spec, self.inputs)
         output_klass = make_klass(self.output_spec)
         output = output_klass(**{f.name: None for f in attr.fields(output_klass)})
-        other_output = output.collect_additional_outputs(self.inputs, self.output_dir)
+        other_output = output.collect_additional_outputs(self.inputs, output_dir)
         return attr.evolve(output, **run_output, **other_output)
 
     def split(self, splitter, overwrite=False, **kwargs):
@@ -996,7 +994,22 @@ class Workflow(TaskBase):
             )
 
         self._connections += new_connections
-        fields = [(name, ty.Any) for name, _ in self._connections]
+        fields = []
+        for con in self._connections:
+            wf_out_nm, lf = con
+            task_nm, task_out_nm = lf.name, lf.field
+            if task_out_nm == "all_":
+                help_string = f"all outputs from {task_nm}"
+                fields.append((wf_out_nm, dict, {"help_string": help_string}))
+            else:
+                # getting information about the output field from the task output_spec
+                # providing proper type and some help string
+                task_output_spec = getattr(self, task_nm).output_spec
+                out_fld = attr.fields_dict(make_klass(task_output_spec))[task_out_nm]
+                help_string = (
+                    f"{out_fld.metadata.get('help_string', '')} (from {task_nm})"
+                )
+                fields.append((wf_out_nm, out_fld.type, {"help_string": help_string}))
         self.output_spec = SpecInfo(name="Output", fields=fields, bases=(BaseSpec,))
         logger.info("Added %s to %s", self.output_spec, self)
 
diff --git a/pydra/engine/helpers.py b/pydra/engine/helpers.py
index c1a30bf..975ef8e 100644
--- a/pydra/engine/helpers.py
+++ b/pydra/engine/helpers.py
@@ -155,8 +155,14 @@ def copyfile_workflow(wf_path, result):
     """ if file in the wf results, the file will be copied to the workflow directory"""
     for field in attr_fields(result.output):
         value = getattr(result.output, field.name)
-        new_value = _copyfile_single_value(wf_path=wf_path, value=value)
-        if new_value != value:
+        # if the field is a path or it can contain a path _copyfile_single_value is run
+        # to move all files and directories to the workflow directory
+        if field.type in [File, Directory, MultiOutputObj] or type(value) in [
+            list,
+            tuple,
+            dict,
+        ]:
+            new_value = _copyfile_single_value(wf_path=wf_path, value=value)
             setattr(result.output, field.name, new_value)
     return result
 
@@ -672,7 +678,7 @@ def hash_value(value, tp=None, metadata=None):
             return value
 
 
-def output_from_inputfields(output_spec, inputs, names_only=False):
+def output_from_inputfields(output_spec, input_spec):
     """
     Collect values from output from input fields.
     If names_only is False, the output_spec is updated,
@@ -682,30 +688,26 @@ def output_from_inputfields(output_spec, inputs, names_only=False):
     ----------
     output_spec :
         TODO
-    inputs :
+    input_spec :
         TODO
 
     """
     current_output_spec_names = [f.name for f in attr.fields(make_klass(output_spec))]
     new_fields = []
-    for fld in attr_fields(inputs):
+    for fld in attr.fields(make_klass(input_spec)):
         if "output_file_template" in fld.metadata:
-            value = getattr(inputs, fld.name)
             if "output_field_name" in fld.metadata:
                 field_name = fld.metadata["output_field_name"]
             else:
                 field_name = fld.name
             # not adding if the field already in teh output_spec
             if field_name not in current_output_spec_names:
+                # TODO: should probably remove some of the keys
                 new_fields.append(
-                    (field_name, attr.ib(type=File, metadata={"value": value}))
+                    (field_name, attr.ib(type=File, metadata=fld.metadata))
                 )
-    if names_only:
-        new_names = [el[0] for el in new_fields]
-        return current_output_spec_names + new_names
-    else:
-        output_spec.fields += new_fields
-        return output_spec
+    output_spec.fields += new_fields
+    return output_spec
 
 
 def get_available_cpus():
diff --git a/pydra/engine/task.py b/pydra/engine/task.py
index 3a5f0d7..f86c917 100644
--- a/pydra/engine/task.py
+++ b/pydra/engine/task.py
@@ -57,7 +57,13 @@ from .specs import (
     SingularitySpec,
     attr_fields,
 )
-from .helpers import ensure_list, execute, position_adjustment, argstr_formatting
+from .helpers import (
+    ensure_list,
+    execute,
+    position_adjustment,
+    argstr_formatting,
+    output_from_inputfields,
+)
 from .helpers_file import template_update, is_local_file
 
 
@@ -276,6 +282,7 @@ class ShellCommandTask(TaskBase):
             output_spec = SpecInfo(name="Output", fields=[], bases=(ShellOutSpec,))
 
         self.output_spec = output_spec
+        self.output_spec = output_from_inputfields(self.output_spec, self.input_spec)
 
         super().__init__(
             name=name,

