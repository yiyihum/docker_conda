diff --git a/news/1253.bugfix.md b/news/1253.bugfix.md
new file mode 100644
index 00000000..8e91ec5b
--- /dev/null
+++ b/news/1253.bugfix.md
@@ -0,0 +1,1 @@
+Support Conda environments when detecting the project environment.
diff --git a/news/1256.bugfix.md b/news/1256.bugfix.md
new file mode 100644
index 00000000..c111cf60
--- /dev/null
+++ b/news/1256.bugfix.md
@@ -0,0 +1,1 @@
+Stabilize sorting of URLs in `metadata.files` in `pdm.lock`.
diff --git a/pdm/cli/utils.py b/pdm/cli/utils.py
index e822f7fc..725d0c94 100644
--- a/pdm/cli/utils.py
+++ b/pdm/cli/utils.py
@@ -465,7 +465,7 @@ def format_lockfile(
                 continue
             array = tomlkit.array().multiline(True)
             for link, hash_value in sorted(
-                v.hashes.items(), key=lambda l: l[0].filename
+                v.hashes.items(), key=lambda l_h: (l_h[0].url_without_fragment, l_h[1])
             ):
                 inline = make_inline_table(
                     {"url": link.url_without_fragment, "hash": hash_value}
diff --git a/pdm/project/core.py b/pdm/project/core.py
index 5fd54c5f..1a52a369 100644
--- a/pdm/project/core.py
+++ b/pdm/project/core.py
@@ -259,8 +259,8 @@ class Project:
                 if get_venv_like_prefix(self.python.executable) is not None
                 else Environment(self)
             )
-        if os.getenv("VIRTUAL_ENV"):
-            venv = cast(str, os.getenv("VIRTUAL_ENV"))
+        venv = os.getenv("VIRTUAL_ENV", os.getenv("CONDA_PREFIX"))
+        if venv is not None:
             self.core.ui.echo(
                 f"Detected inside an active virtualenv [green]{venv}[/], reuse it.",
                 style="yellow",
diff --git a/pdm/resolver/core.py b/pdm/resolver/core.py
index 4a6993c2..195af3bc 100644
--- a/pdm/resolver/core.py
+++ b/pdm/resolver/core.py
@@ -20,11 +20,10 @@ def resolve(
     max_rounds: int = 10000,
 ) -> tuple[dict[str, Candidate], dict[str, list[Requirement]]]:
     """Core function to perform the actual resolve process.
-    Return a tuple containing 3 items:
+    Return a tuple containing 2 items:
 
         1. A map of pinned candidates
         2. A map of resolved dependencies for each dependency group
-        3. A map of package descriptions fetched from PyPI source
     """
     requirements.append(PythonRequirement.from_pyspec_set(requires_python))
     provider = cast(BaseProvider, resolver.provider)
