diff --git a/tests/acceptance/async_adapter_tests.py b/tests/acceptance/async_adapter_tests.py
index 5c8d542..b451541 100644
--- a/tests/acceptance/async_adapter_tests.py
+++ b/tests/acceptance/async_adapter_tests.py
@@ -910,14 +910,14 @@ class TestZ_PublishAndGet(BoundQueueTestCase, AsyncAdapters):  # pylint: disable
 
 
 class TestZ_AccessDenied(AsyncTestCase, AsyncAdapters):  # pylint: disable=C0103
-    DESCRIPTION = "Unknown vhost results in ConnectionClosedByBroker."
+    DESCRIPTION = "Unknown vhost results in ProbableAccessDeniedError."
 
     def start(self, *args, **kwargs):  # pylint: disable=W0221
         self.parameters.virtual_host = str(uuid.uuid4())
         self.error_captured = None
         super(TestZ_AccessDenied, self).start(*args, **kwargs)
         self.assertIsInstance(self.error_captured,
-                              pika.exceptions.ConnectionClosedByBroker)
+                              pika.exceptions.ProbableAccessDeniedError)
 
     def on_open_error(self, connection, error):
         self.error_captured = error
diff --git a/tests/unit/data_tests.py b/tests/unit/data_tests.py
index fccd0a9..db8601f 100644
--- a/tests/unit/data_tests.py
+++ b/tests/unit/data_tests.py
@@ -35,16 +35,19 @@ class DataTests(unittest.TestCase):
     FIELD_TBL_ENCODED += b'\x05bytesx\x00\x00\x00\x06foobar' if PY3 else b'\x05bytesS\x00\x00\x00\x06foobar'
 
     FIELD_TBL_VALUE = OrderedDict(
-        [('array', [1, 2, 3]), ('boolval', True), ('decimal',
-                                                   decimal.Decimal('3.14')),
-         ('decimal_too', decimal.Decimal('100')), ('dictval', {
-             'foo': 'bar'
-         }), ('intval', 1), ('bigint', 2592000000), ('longval',
-                                                     long(912598613)), ('null',
-                                                                        None),
-         ('strval', 'Test'), ('timestampval',
-                              datetime.datetime(2006, 11, 21, 16, 30,
-                                                10)), ('unicode', u'utf8=✓'),
+        [
+            ('array', [1, 2, 3]),
+            ('boolval', True),
+            ('decimal', decimal.Decimal('3.14')),
+            ('decimal_too', decimal.Decimal('100')),
+            ('dictval', { 'foo': 'bar' }),
+            ('intval', 1),
+            ('bigint', 2592000000),
+            ('longval', long(912598613)),
+            ('null', None),
+            ('strval', 'Test'),
+            ('timestampval', datetime.datetime(2006, 11, 21, 16, 30, 10)),
+            ('unicode', u'utf8=✓'),
             ('bytes', b'foobar'),
         ])
 
@@ -56,6 +59,15 @@ class DataTests(unittest.TestCase):
         result = data.decode_table(input, 0)
         self.assertEqual(result, ({'bytes': b'foobar'}, 21))
 
+    # b'\x08shortints\x04\xd2'
+    # ('shortint', 1234),
+    def test_decode_shortint(self):
+        input = (
+                b'\x00\x00\x00\x01'
+                b'\x08shortints\x04\xd2'
+            )
+        result = data.decode_table(input, 0)
+        self.assertEqual(result, ({'shortint': 1234}, 16))
 
     def test_encode_table(self):
         result = []
