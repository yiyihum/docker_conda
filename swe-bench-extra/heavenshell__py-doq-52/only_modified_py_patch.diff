diff --git a/doq/outputter.py b/doq/outputter.py
index 4099b06..8fe6de7 100644
--- a/doq/outputter.py
+++ b/doq/outputter.py
@@ -14,13 +14,20 @@ class StringOutptter(BaseOutputter):
             return start
         else:
             for i, line in enumerate(lines[start:end]):
-                # Found end of signature without type
                 if line.endswith('):'):
+                    # Found end of signature without type
                     return start + i + 1
                 elif re.search(r'\):', line):
                     return start + i + 1
-                # Found end of signature with type
+                elif re.search(r'\]:', line):
+                    # Found end of signature type
+                    #   def foo(a, b) -> Tuple[
+                    #       int,
+                    #   ]:
+                    #       pass
+                    return start + i + 1
                 elif re.search(r'->(.*):', line):
+                    # Found end of signature with type
                     return start + i + 1
 
         return start
diff --git a/doq/parser.py b/doq/parser.py
index 34805a7..70755bc 100644
--- a/doq/parser.py
+++ b/doq/parser.py
@@ -88,14 +88,9 @@ def parse_defs(module, omissions=None, ignore_exception=False, ignore_yield=Fals
 
             params.append(arguments)
 
-        # parso does not have return type. So parse from signature.
-        next_node = d.get_suite().get_first_leaf().get_next_sibling()
-        stmt_start_lineno = next_node.start_pos[0] if next_node else 2
-        return_type = parse_return_type(
-            code=code,
-            start_lineno=start_lineno,
-            end_lineno=stmt_start_lineno - 1,
-        )
+        return_type = None
+        if d.children[3].value == '->':
+            return_type = d.children[4].get_code().strip()
 
         yields = []
         if ignore_yield is False:

