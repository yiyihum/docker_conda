diff --git a/changelog.md b/changelog.md
index aef5dcc2..b7f15948 100644
--- a/changelog.md
+++ b/changelog.md
@@ -6,10 +6,12 @@
 
 - Add support for SearchRequestExtended to find interfaces that allow IP Secure
 - Use XKNX `state_updater` argument to set default method for StateUpdater. StateUpdater is always started - Device / RemoteValue can always opt in to use it, even if default is `False`.
+- Add support for DPT 16.001 (DPT_String_8859_1) as `DPTLatin1` with value_type "latin_1".
 
 ### Bug fixes
 
 - Stop SecureSession keepalive_task when session is stopped (and don't restart it from sending STATUS_CLOSE)
+- Fix encoding invalid characters for DPTString (value_type "string")
 
 ## 0.20.0 IP Secure 2022-03-29
 
diff --git a/xknx/dpt/__init__.py b/xknx/dpt/__init__.py
index 669c6993..cea33e90 100644
--- a/xknx/dpt/__init__.py
+++ b/xknx/dpt/__init__.py
@@ -172,7 +172,7 @@ from .dpt_date import DPTDate
 from .dpt_datetime import DPTDateTime
 from .dpt_hvac_mode import DPTControllerStatus, DPTHVACContrMode, DPTHVACMode
 from .dpt_scaling import DPTAngle, DPTScaling
-from .dpt_string import DPTString
+from .dpt_string import DPTLatin1, DPTString
 from .dpt_time import DPTTime
 
 __all__ = [
@@ -249,6 +249,7 @@ __all__ = [
     "DPTHVACMode",
     "DPTImpedance",
     "DPTKelvinPerPercent",
+    "DPTLatin1",
     "DPTLength",
     "DPTLengthMm",
     "DPTLightQuantity",
diff --git a/xknx/dpt/dpt_string.py b/xknx/dpt/dpt_string.py
index 0788bc33..faf33207 100644
--- a/xknx/dpt/dpt_string.py
+++ b/xknx/dpt/dpt_string.py
@@ -8,7 +8,7 @@ from .dpt import DPTBase
 
 class DPTString(DPTBase):
     """
-    Abstraction for KNX 14 Octet ASCII String.
+    Abstraction for KNX 14 Octet ASCII string.
 
     DPT 16.000
     """
@@ -19,15 +19,15 @@ class DPTString(DPTBase):
     value_type = "string"
     unit = ""
 
+    _encoding = "ascii"
+
     @classmethod
     def from_knx(cls, raw: tuple[int, ...]) -> str:
         """Parse/deserialize from KNX/IP raw data."""
         cls.test_bytesarray(raw)
-        value = ""
-        for byte in raw:
-            if byte != 0x00:
-                value += chr(byte)
-        return value
+        return bytes(byte for byte in raw if byte != 0x00).decode(
+            cls._encoding, errors="replace"
+        )
 
     @classmethod
     def to_knx(cls, value: str) -> tuple[int, ...]:
@@ -36,15 +36,26 @@ class DPTString(DPTBase):
             knx_value = str(value)
             if not cls._test_boundaries(knx_value):
                 raise ValueError
-            raw = [ord(character) for character in knx_value]
-            raw.extend([0] * (cls.payload_length - len(raw)))
-            # replace invalid characters with question marks
-            # bytes(knx_value, 'ascii') would raise UnicodeEncodeError
-            return tuple(map(lambda char: char if char <= 0xFF else ord("?"), raw))
         except ValueError:
             raise ConversionError(f"Could not serialize {cls.__name__}", value=value)
+        # replace invalid characters with question marks
+        raw_bytes = knx_value.encode(cls._encoding, errors="replace")
+        padding = bytes(cls.payload_length - len(raw_bytes))
+        return tuple(raw_bytes + padding)
 
     @classmethod
     def _test_boundaries(cls, value: str) -> bool:
         """Test if value is within defined range for this object."""
         return len(value) <= cls.payload_length
+
+
+class DPTLatin1(DPTString):
+    """
+    Abstraction for KNX 14 Octet Latin-1 (ISO 8859-1) string.
+
+    DPT 16.001
+    """
+
+    dpt_sub_number = 1
+    value_type = "latin_1"
+    _encoding = "latin_1"
