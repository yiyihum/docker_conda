diff --git a/sqlglot/dialects/postgres.py b/sqlglot/dialects/postgres.py
index 71339b88..2e53a675 100644
--- a/sqlglot/dialects/postgres.py
+++ b/sqlglot/dialects/postgres.py
@@ -518,6 +518,7 @@ class Postgres(Dialect):
             exp.Variance: rename_func("VAR_SAMP"),
             exp.Xor: bool_xor_sql,
         }
+        TRANSFORMS.pop(exp.CommentColumnConstraint)
 
         PROPERTIES_LOCATION = {
             **generator.Generator.PROPERTIES_LOCATION,
@@ -526,6 +527,10 @@ class Postgres(Dialect):
             exp.VolatileProperty: exp.Properties.Location.UNSUPPORTED,
         }
 
+        def commentcolumnconstraint_sql(self, expression: exp.CommentColumnConstraint) -> str:
+            self.unsupported("Column comments are not supported in the CREATE statement")
+            return ""
+
         def unnest_sql(self, expression: exp.Unnest) -> str:
             if len(expression.expressions) == 1:
                 from sqlglot.optimizer.annotate_types import annotate_types
diff --git a/sqlglot/lineage.py b/sqlglot/lineage.py
index c91bb36e..f4a3dec5 100644
--- a/sqlglot/lineage.py
+++ b/sqlglot/lineage.py
@@ -129,12 +129,6 @@ def to_node(
     reference_node_name: t.Optional[str] = None,
     trim_selects: bool = True,
 ) -> Node:
-    source_names = {
-        dt.alias: dt.comments[0].split()[1]
-        for dt in scope.derived_tables
-        if dt.comments and dt.comments[0].startswith("source: ")
-    }
-
     # Find the specific select clause that is the source of the column we want.
     # This can either be a specific, named select or a generic `*` clause.
     select = (
@@ -242,6 +236,19 @@ def to_node(
     # If the source is a UDTF find columns used in the UTDF to generate the table
     if isinstance(source, exp.UDTF):
         source_columns |= set(source.find_all(exp.Column))
+        derived_tables = [
+            source.expression.parent
+            for source in scope.sources.values()
+            if isinstance(source, Scope) and source.is_derived_table
+        ]
+    else:
+        derived_tables = scope.derived_tables
+
+    source_names = {
+        dt.alias: dt.comments[0].split()[1]
+        for dt in derived_tables
+        if dt.comments and dt.comments[0].startswith("source: ")
+    }
 
     for c in source_columns:
         table = c.table
diff --git a/sqlglot/optimizer/__init__.py b/sqlglot/optimizer/__init__.py
index 34ea6cb1..050f246c 100644
--- a/sqlglot/optimizer/__init__.py
+++ b/sqlglot/optimizer/__init__.py
@@ -1,11 +1,11 @@
 # ruff: noqa: F401
 
-from sqlglot.optimizer.optimizer import RULES, optimize
+from sqlglot.optimizer.optimizer import RULES as RULES, optimize as optimize
 from sqlglot.optimizer.scope import (
-    Scope,
-    build_scope,
-    find_all_in_scope,
-    find_in_scope,
-    traverse_scope,
-    walk_in_scope,
+    Scope as Scope,
+    build_scope as build_scope,
+    find_all_in_scope as find_all_in_scope,
+    find_in_scope as find_in_scope,
+    traverse_scope as traverse_scope,
+    walk_in_scope as walk_in_scope,
 )
