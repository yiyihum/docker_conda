diff --git a/tests/test_app.py b/tests/test_app.py
index 8dd700f..08b5da0 100644
--- a/tests/test_app.py
+++ b/tests/test_app.py
@@ -117,9 +117,8 @@ class SdepTestCase(unittest.TestCase):
         # with `Config`.
         resp = self._s3_client.get_bucket_website(Bucket=bucket_name)
 
-        self.assertEqual(resp["IndexDocument"]["Suffix"],
-                         Sdep.DEFAULT_INDEX_SUFFIX)
-        self.assertEqual(resp["ErrorDocument"]["Key"], Sdep.DEFAULT_ERROR_KEY)
+        self.assertNotEqual(resp["IndexDocument"]["Suffix"], None)
+        self.assertNotEqual(resp["ErrorDocument"]["Key"], None)
 
     @classmethod
     def _create_test_upload_dir(cls):
diff --git a/tests/test_config.py b/tests/test_config.py
index 0feb7be..a1be9d8 100644
--- a/tests/test_config.py
+++ b/tests/test_config.py
@@ -35,7 +35,7 @@ class ConfigTestCase(unittest.TestCase):
         config_file = self._create_config_file()
         config = Config(config_file=config_file)
 
-        for field in Config.required_config_fields():
+        for field in self._all_fields():
             self.assertNotEqual(config.get(field), None)
 
         os.remove(config_file)
@@ -51,7 +51,7 @@ class ConfigTestCase(unittest.TestCase):
         with patch.dict(os.environ, environ_dict, clear=True):
             config = Config()
 
-            for field in Config.required_config_fields():
+            for field in self._all_fields():
                 self.assertNotEqual(config.get(field), None)
 
     def test_find_config_in_curr_dir(self):
@@ -71,7 +71,7 @@ class ConfigTestCase(unittest.TestCase):
                 config = Config()
 
                 self.assertEqual(config_in_curr, Config.locate_config_file())
-                for field in Config.required_config_fields():
+                for field in self._all_fields():
                     self.assertNotEqual(config.get(field), None)
 
         for temp_dir in [temp_dirs.current, temp_dirs.home]:
@@ -97,13 +97,12 @@ class ConfigTestCase(unittest.TestCase):
                 config = Config()
 
                 self.assertEqual(config_in_home, Config.locate_config_file())
-                for field in Config.required_config_fields():
+                for field in self._all_fields():
                     self.assertNotEqual(config.get(field), None)
 
         for temp_dir in [temp_dirs.current, temp_dirs.home]:
             shutil.rmtree(temp_dir, ignore_errors=True)
 
-
     def test_bad_config(self):
         """
         Test loading the configuration from a file with an improperly specified
@@ -114,15 +113,23 @@ class ConfigTestCase(unittest.TestCase):
         with self.assertRaises(ConfigParseError):
             Config(config_file=config_file)
 
-    @staticmethod
-    def _config_dict():
+    @classmethod
+    def _config_dict(cls):
         """
         A dictionary of property formatted config.
 
         Returns:
             dict: A properly formatted config.
         """
-        return {field: str(uuid.uuid4()) for field in Config.required_config_fields()}
+        base_dict = {field: str(uuid.uuid4()) for field in cls._all_fields()}
+
+        # Remove one of the optional fields so that we can test the default value
+        # being filled in.
+
+        field_to_remove = Config.optional_config_fields()[0]
+        del base_dict[field_to_remove]
+
+        return base_dict
 
     @classmethod
     def _create_mock_dirs(cls):
@@ -176,3 +183,13 @@ class ConfigTestCase(unittest.TestCase):
             bad_config_file.write(json.dumps({}))
 
         return file_name
+
+    @staticmethod
+    def _all_fields():
+        """
+        Helper method to return all configuration fields.
+
+        Returns:
+            list: List of the strings for all configuration fields.
+        """
+        return Config.required_config_fields() + Config.optional_config_fields()
