diff --git a/docs/background.md b/docs/background.md
index de7135f..d27fa65 100644
--- a/docs/background.md
+++ b/docs/background.md
@@ -6,6 +6,8 @@ the response has been sent.
 
 ### Background Task
 
+Used to add a single background task to a response.
+
 Signature: `BackgroundTask(func, *args, **kwargs)`
 
 ```python
@@ -27,3 +29,35 @@ async def signup(request):
 async def send_welcome_email(to_address):
     ...
 ```
+
+### BackgroundTasks
+
+Used to add multiple background tasks to a response.
+
+Signature: `BackgroundTasks(tasks=[])`
+
+```python
+from starlette.applications import Starlette
+from starlette.responses import JSONResponse
+from starlette.background import BackgroundTasks
+
+app = Starlette()
+
+@app.route('/user/signup', methods=['POST'])
+async def signup(request):
+    data = await request.json()
+    username = data['username']
+    email = data['email']
+    tasks = BackgroundTasks()
+    tasks.add_task(send_welcome_email, to_address=email)
+    tasks.add_task(send_admin_notification, username=username)
+    message = {'status': 'Signup successful'}
+    return JSONResponse(message, background=tasks)
+
+async def send_welcome_email(to_address):
+    ...
+
+async def send_admin_notification(username):
+    ...
+
+```
diff --git a/docs/graphql.md b/docs/graphql.md
index 16f9188..785a837 100644
--- a/docs/graphql.md
+++ b/docs/graphql.md
@@ -41,6 +41,27 @@ class Query(graphene.ObjectType):
         return request.headers.get("User-Agent", "<unknown>")
 ```
 
+## Adding background tasks
+
+You can add background tasks to run once the response has been sent.
+
+```python
+class Query(graphene.ObjectType):
+    user_agent = graphene.String()
+
+    def resolve_user_agent(self, info):
+        """
+        Return the User-Agent of the incoming request.
+        """
+        user_agent = request.headers.get("User-Agent", "<unknown>")
+        background = info.context["background"]
+        background.add_task(log_user_agent, user_agent=user_agent)
+        return user_agent
+
+async def log_user_agent(user_agent):
+    ...
+```
+
 ## Sync or Async executors
 
 If you're working with a standard ORM, then just use regular function calls for
diff --git a/starlette/background.py b/starlette/background.py
index dbe7592..b2a3cfe 100644
--- a/starlette/background.py
+++ b/starlette/background.py
@@ -18,3 +18,18 @@ class BackgroundTask:
             await self.func(*self.args, **self.kwargs)
         else:
             await run_in_threadpool(self.func, *self.args, **self.kwargs)
+
+
+class BackgroundTasks(BackgroundTask):
+    def __init__(self, tasks: typing.Sequence[BackgroundTask] = []):
+        self.tasks = list(tasks)
+
+    def add_task(
+        self, func: typing.Callable, *args: typing.Any, **kwargs: typing.Any
+    ) -> None:
+        task = BackgroundTask(func, *args, **kwargs)
+        self.tasks.append(task)
+
+    async def __call__(self) -> None:
+        for task in self.tasks:
+            await task()
diff --git a/starlette/graphql.py b/starlette/graphql.py
index f01ac81..3d95b1d 100644
--- a/starlette/graphql.py
+++ b/starlette/graphql.py
@@ -3,6 +3,7 @@ import json
 import typing
 
 from starlette import status
+from starlette.background import BackgroundTasks
 from starlette.concurrency import run_in_threadpool
 from starlette.requests import Request
 from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse, Response
@@ -73,7 +74,10 @@ class GraphQLApp:
                 status_code=status.HTTP_400_BAD_REQUEST,
             )
 
-        result = await self.execute(request, query, variables)
+        background = BackgroundTasks()
+        context = {"request": request, "background": background}
+
+        result = await self.execute(query, variables=variables, context=context)
         error_data = (
             [format_graphql_error(err) for err in result.errors]
             if result.errors
@@ -83,13 +87,14 @@ class GraphQLApp:
         status_code = (
             status.HTTP_400_BAD_REQUEST if result.errors else status.HTTP_200_OK
         )
-        return JSONResponse(response_data, status_code=status_code)
+
+        return JSONResponse(
+            response_data, status_code=status_code, background=background
+        )
 
     async def execute(  # type: ignore
-        self, request, query, variables=None, operation_name=None
+        self, query, variables=None, context=None, operation_name=None
     ):
-        context = dict(request=request)
-
         if self.is_async:
             return await self.schema.execute(
                 query,
