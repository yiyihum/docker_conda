diff --git a/tests/test_avalanche_dataset.py b/tests/test_avalanche_dataset.py
index e7cf460b..67ccdecc 100644
--- a/tests/test_avalanche_dataset.py
+++ b/tests/test_avalanche_dataset.py
@@ -56,6 +56,17 @@ class FrozenTransformGroupsCenterCrop:
 
 
 class AvalancheDatasetTests(unittest.TestCase):
+
+    def test_avalanche_dataset_creation_without_list(self):
+        dataset_mnist = load_image_benchmark()
+        dataset = AvalancheDataset(dataset_mnist)
+        self.assertIsInstance(dataset, AvalancheDataset)
+        self.assertEqual(len(dataset_mnist), len(dataset))
+
+        dataset = AvalancheDataset(dataset)
+        self.assertIsInstance(dataset, AvalancheDataset)
+        self.assertEqual(len(dataset_mnist), len(dataset))
+
     def test_disallowed_attribute_name(self):
         d_sz = 3
         xdata = torch.rand(d_sz, 2)
diff --git a/tests/training/test_strategies.py b/tests/training/test_strategies.py
index 84fae146..a49b2d20 100644
--- a/tests/training/test_strategies.py
+++ b/tests/training/test_strategies.py
@@ -48,11 +48,37 @@ from avalanche.training.supervised.icarl import ICaRL
 from avalanche.training.supervised.joint_training import AlreadyTrainedError
 from avalanche.training.supervised.strategy_wrappers import PNNStrategy
 from avalanche.training.templates import SupervisedTemplate
+from avalanche.training.templates.base import _group_experiences_by_stream
 from avalanche.training.utils import get_last_fc_layer
 from tests.unit_tests_utils import get_fast_benchmark, get_device
 
 
 class BaseStrategyTest(unittest.TestCase):
+    def test_eval_streams_normalization(self):
+        benchmark = get_fast_benchmark()
+        train_len = len(benchmark.train_stream)
+        test_len = len(benchmark.test_stream)
+
+        res = _group_experiences_by_stream(benchmark.test_stream)
+        assert len(res) == 1
+        assert len(res[0]) == test_len
+
+        res = _group_experiences_by_stream([benchmark.test_stream])
+        assert len(res) == 1
+        assert len(res[0]) == test_len
+
+        res = _group_experiences_by_stream(
+            [*benchmark.test_stream, *benchmark.train_stream])
+        assert len(res) == 2
+        assert len(res[0]) == test_len
+        assert len(res[1]) == train_len
+
+        res = _group_experiences_by_stream(
+            [benchmark.test_stream, benchmark.train_stream])
+        assert len(res) == 2
+        assert len(res[0]) == test_len
+        assert len(res[1]) == train_len
+
     def test_periodic_eval(self):
         model = SimpleMLP(input_size=6, hidden_size=10)
         model.classifier = IncrementalClassifier(model.classifier.in_features)
