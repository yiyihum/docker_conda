diff --git a/test/test_base.py b/test/test_base.py
index fb12434..2e36962 100644
--- a/test/test_base.py
+++ b/test/test_base.py
@@ -244,3 +244,76 @@ def test_using_a_Type_type():
 
     foo = OtherFoo.setup("")
     assert foo.a == Extended()
+
+
+def test_issue62():
+    import enum
+    from simple_parsing.helpers import list_field
+    from typing import List
+    parser = ArgumentParser()
+
+    class Color(enum.Enum):
+        RED = "red"
+        ORANGE = "orange"
+        BLUE = "blue"
+
+    class Temperature(enum.Enum):
+        HOT = 1
+        WARM = 0
+        COLD = -1
+        MONTREAL = -35
+
+    @dataclass
+    class MyPreferences(TestSetup):
+        """You can use Enums"""
+
+        color: Color = Color.BLUE  # my favorite colour
+        # a list of colors
+        color_list: List[Color] = list_field(Color.ORANGE)
+        # Some floats.
+        floats: List[float] = list_field(1.1, 2.2, 3.3)
+        # pick a temperature
+        temp: Temperature = Temperature.WARM
+        # a list of temperatures
+        temp_list: List[Temperature] = list_field(Temperature.COLD, Temperature.WARM)
+
+    parser.add_arguments(MyPreferences, "my_preferences")
+    assert MyPreferences.setup(
+        "--color ORANGE --color_list RED BLUE --temp MONTREAL"
+    ) == MyPreferences(
+        color=Color.ORANGE,
+        color_list=[Color.RED, Color.BLUE],
+        temp=Temperature.MONTREAL,
+        temp_list=[Temperature.COLD, Temperature.WARM],
+    )
+    assert MyPreferences.setup(
+        "--color ORANGE --color_list RED BLUE --temp MONTREAL --temp_list MONTREAL HOT"
+    ) == MyPreferences(
+        color=Color.ORANGE,
+        color_list=[Color.RED, Color.BLUE],
+        temp=Temperature.MONTREAL,
+        temp_list=[Temperature.MONTREAL, Temperature.HOT],
+    )
+    assert Temperature["MONTREAL"] is Temperature.MONTREAL
+    assert Temperature(-35) is Temperature.MONTREAL
+
+    # NOTE: This kind of test (comparing the help str) is unreliable, changes depending on the
+    # python version.
+    # assert MyPreferences.get_help_text() == textwrap.dedent("""\
+    #     usage: pytest [-h] [--color Color] [--color_list Color] [--floats float]
+    #                   [--temp Temperature] [--temp_list Temperature]
+
+    #     optional arguments:
+    #       -h, --help            show this help message and exit
+
+    #     test_issue62.<locals>.MyPreferences ['my_preferences']:
+    #       You can use Enums
+
+    #       --color Color         my favorite colour (default: BLUE)
+    #       --color_list Color    a list of colors (default: [<Color.ORANGE: 'orange'>])
+    #       --floats float        Some floats. (default: [1.1, 2.2, 3.3])
+    #       --temp Temperature    pick a temperature (default: WARM)
+    #       --temp_list Temperature
+    #                             a list of temperatures (default: [<Temperature.COLD:
+    #                             -1>, <Temperature.WARM: 0>])
+    # """)
diff --git a/test/test_fields.py b/test/test_fields.py
index a026d3c..9056766 100644
--- a/test/test_fields.py
+++ b/test/test_fields.py
@@ -46,14 +46,14 @@ class Color(Enum):
 from simple_parsing.wrappers.field_parsing import get_parsing_fn
 
 from simple_parsing.utils import str2bool
-
+from simple_parsing.wrappers.field_parsing import parse_enum
 
 @pytest.mark.parametrize(
     "annotation, expected_options",
     [
         (Tuple[int, int], dict(nargs=2, type=int)),
-        (Tuple[Color, Color], dict(nargs=2, type=Color)),
-        (Optional[Tuple[Color, Color]], dict(nargs=2, type=Color, required=False)),
+        (Tuple[Color, Color], dict(nargs=2, type=parse_enum(Color))),
+        (Optional[Tuple[Color, Color]], dict(nargs=2, type=parse_enum(Color), required=False)),
         (List[str], dict(nargs="*", type=str)),
         (Optional[List[str]], dict(nargs="*", type=str, required=False)),
         (Optional[str], dict(nargs="?", type=str, required=False)),
