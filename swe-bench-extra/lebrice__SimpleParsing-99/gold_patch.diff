diff --git a/simple_parsing/utils.py b/simple_parsing/utils.py
index 56f41da..88b14ff 100644
--- a/simple_parsing/utils.py
+++ b/simple_parsing/utils.py
@@ -187,8 +187,8 @@ def get_item_type(container_type: Type[Container[T]]) -> T:
 
 
 def get_argparse_type_for_container(
-    container_type: Type,
-) -> Union[Type, Callable[[str], bool]]:
+    container_type: Type[Container[T]],
+) -> Union[Type[T], Callable[[str], T]]:
     """Gets the argparse 'type' option to be used for a given container type.
     When an annotation is present, the 'type' option of argparse is set to that type.
     if not, then the default value of 'str' is returned.
@@ -208,6 +208,12 @@ def get_argparse_type_for_container(
         return str2bool
     if T is Any:
         return str
+    if is_enum(T):
+        # IDEA: Fix this weirdness by first moving all this weird parsing logic into the
+        # field wrapper class, and then split it up into different subclasses of FieldWrapper,
+        # each for a different type of field.
+        from simple_parsing.wrappers.field_parsing import parse_enum
+        return parse_enum(T)
     return T
 
 
diff --git a/simple_parsing/wrappers/field_parsing.py b/simple_parsing/wrappers/field_parsing.py
index 05bf312..09baf37 100644
--- a/simple_parsing/wrappers/field_parsing.py
+++ b/simple_parsing/wrappers/field_parsing.py
@@ -3,6 +3,8 @@
 Somewhat analogous to the 'parse' function in the
 `helpers.serialization.parsing` package.
 """
+import enum
+import functools
 from dataclasses import Field
 from logging import getLogger
 from typing import Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar, Union
@@ -11,6 +13,7 @@ import typing_inspect as tpi
 
 from ..utils import (
     get_type_arguments,
+    is_enum,
     is_homogeneous_tuple_type,
     is_list,
     is_tuple,
@@ -122,7 +125,10 @@ def get_parsing_fn(t: Type[T]) -> Callable[[Any], T]:
         logger.debug(f"parsing a Union field: {t}")
         args = get_type_arguments(t)
         return parse_union(*args)
-
+    
+    elif is_enum(t):
+        logger.debug(f"Parsing an Enum field of type {t}")
+        return parse_enum(t)
     # import typing_inspect as tpi
     # from .serializable import get_dataclass_type_from_forward_ref, Serializable
 
@@ -237,7 +243,6 @@ def parse_tuple(
 
         return parsed_value
 
-    _parse_tuple.__name__ = "BOB"
 
     return _parse_tuple
 
@@ -256,3 +261,36 @@ def no_op(v: T) -> T:
         [type]: The value unchanged.
     """
     return v
+
+
+E = TypeVar("E", bound=enum.Enum)
+
+
+def parse_enum(enum_type: Type[E]) -> Callable[[str], E]:
+    """Returns a function to use to parse an enum of type `enum_type` from a string.
+
+    Parameters
+    ----------
+    - enum_type : Type[enum.Enum]
+
+        The type of enum to create a parsing function for.
+
+    Returns
+    -------
+    Callable[[str], E]
+        A function that parses an enum object of type `enum_type` from a string.
+    """
+    # Save the function, since the same type will always be parsed the same way. Also
+    # makes testing easier.
+    if enum_type in _parsing_fns:
+        return _parsing_fns[enum_type]
+    
+    # NOTE: Use `functools.wraps` so that fn name is the enum, so the metavar shows up
+    # just like the enum on the command-line, and not like
+    # "(...).parse_enum.<locals>._parse_enum" or something.
+    @functools.wraps(enum_type)
+    def _parse_enum(v: str) -> E:
+        return enum_type[v]
+    _parsing_fns[enum_type] = _parse_enum
+    return _parse_enum
+ 
\ No newline at end of file
