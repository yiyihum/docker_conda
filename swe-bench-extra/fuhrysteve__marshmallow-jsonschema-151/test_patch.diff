diff --git a/tests/test_dump.py b/tests/test_dump.py
index e862491..ca3f316 100644
--- a/tests/test_dump.py
+++ b/tests/test_dump.py
@@ -1,3 +1,4 @@
+import uuid
 from enum import Enum
 
 import pytest
@@ -30,6 +31,18 @@ def test_default():
     assert props["id"]["default"] == "no-id"
 
 
+def test_default_callable_not_serialized():
+    class TestSchema(Schema):
+        uid = fields.UUID(default=uuid.uuid4)
+
+    schema = TestSchema()
+
+    dumped = validate_and_dump(schema)
+
+    props = dumped["definitions"]["TestSchema"]["properties"]
+    assert "default" not in props["uid"]
+
+
 def test_uuid():
     schema = UserSchema()
 
@@ -307,6 +320,26 @@ def test_respect_dotted_exclude_for_nested_schema():
     assert "recursive" not in inner_props
 
 
+def test_respect_default_for_nested_schema():
+    class TestNestedSchema(Schema):
+        myfield = fields.String()
+        yourfield = fields.Integer(required=True)
+
+    nested_default = {"myfield": "myval", "yourfield": 1}
+
+    class TestSchema(Schema):
+        nested = fields.Nested(
+            TestNestedSchema,
+            default=nested_default,
+        )
+        yourfield_nested = fields.Integer(required=True)
+
+    schema = TestSchema()
+    dumped = validate_and_dump(schema)
+    default = dumped["definitions"]["TestSchema"]["properties"]["nested"]["default"]
+    assert default == nested_default
+
+
 def test_nested_instance():
     """Should also work with nested schema instances"""
 
