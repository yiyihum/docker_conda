diff --git a/tornadowebapi/exceptions.py b/tornadowebapi/exceptions.py
index 60bd639..64a3a2e 100644
--- a/tornadowebapi/exceptions.py
+++ b/tornadowebapi/exceptions.py
@@ -44,6 +44,19 @@ class NotFound(WebAPIException):
         return None
 
 
+class Exists(WebAPIException):
+    """Represents a case where the resource could not be created
+    because it already exists. This is generally raised in the
+    create() method if the resource has uniqueness constraints on
+    things other than the exposed id."""
+
+    http_code = httpstatus.CONFLICT
+
+    def representation(self):
+        """Exists does not have a representation, just an error status"""
+        return None
+
+
 class BadRepresentation(WebAPIException):
     """Exception raised when the resource representation is
     invalid or does not contain the appropriate keys.
diff --git a/tornadowebapi/handler.py b/tornadowebapi/handler.py
index 609a1c5..6b78df0 100644
--- a/tornadowebapi/handler.py
+++ b/tornadowebapi/handler.py
@@ -102,7 +102,7 @@ class CollectionHandler(BaseHandler):
 
         self.set_status(httpstatus.OK)
         # Need to convert into a dict for security issue tornado/1009
-        self.write({"items": list(items)})
+        self.write({"items": [str(item) for item in items]})
         self.flush()
 
     @gen.coroutine
@@ -134,7 +134,7 @@ class CollectionHandler(BaseHandler):
             raise web.HTTPError(httpstatus.INTERNAL_SERVER_ERROR)
 
         location = with_end_slash(
-            url_path_join(self.request.full_url(), resource_id))
+            url_path_join(self.request.full_url(), str(resource_id)))
 
         self.set_status(httpstatus.CREATED)
         self.set_header("Location", location)
