diff --git a/tornadowebapi/tests/test_webapi.py b/tornadowebapi/tests/test_webapi.py
index e3f3b8b..3c707a1 100644
--- a/tornadowebapi/tests/test_webapi.py
+++ b/tornadowebapi/tests/test_webapi.py
@@ -26,8 +26,8 @@ class Student(Resource):
 
     @gen.coroutine
     def create(self, representation):
-        id = str(type(self).id)
-        self.collection[id] = representation
+        id = type(self).id
+        self.collection[str(id)] = representation
         type(self).id += 1
         return id
 
@@ -107,6 +107,12 @@ class Broken(Resource):
     items = boom
 
 
+class AlreadyPresent(Resource):
+    @gen.coroutine
+    def create(self, *args):
+        raise exceptions.Exists()
+
+
 class TestREST(AsyncHTTPTestCase):
     def setUp(self):
         super().setUp()
@@ -120,6 +126,7 @@ class TestREST(AsyncHTTPTestCase):
         registry.registry.register(Unprocessable)
         registry.registry.register(UnsupportsCollection)
         registry.registry.register(Broken)
+        registry.registry.register(AlreadyPresent)
         app = web.Application(handlers=handlers)
         app.hub = mock.Mock()
         return app
@@ -138,7 +145,7 @@ class TestREST(AsyncHTTPTestCase):
         res = self.fetch("/api/v1/students/")
         self.assertEqual(res.code, httpstatus.OK)
         self.assertEqual(escape.json_decode(res.body),
-                         {"items": [1, 2, 3]})
+                         {"items": ["1", "2", "3"]})
 
     def test_create(self):
         res = self.fetch(
@@ -402,6 +409,12 @@ class TestREST(AsyncHTTPTestCase):
             method="GET")
         self.assertEqual(res.code, httpstatus.METHOD_NOT_ALLOWED)
 
+    def test_exists(self):
+        collection_url = "/api/v1/alreadypresents/"
+
+        res = self.fetch(collection_url, method="POST", body="{}")
+        self.assertEqual(res.code, httpstatus.CONFLICT)
+
 
 class TestRESTFunctions(unittest.TestCase):
     def test_api_handlers(self):
