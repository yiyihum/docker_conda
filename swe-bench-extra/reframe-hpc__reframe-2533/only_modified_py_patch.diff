diff --git a/reframe/frontend/filters.py b/reframe/frontend/filters.py
index 5eade732..46fefac4 100644
--- a/reframe/frontend/filters.py
+++ b/reframe/frontend/filters.py
@@ -49,7 +49,10 @@ def have_any_name(names):
     regex_matches = []
     for n in names:
         if has_compact_names and '@' in n:
-            exact_matches.append(n.replace('@', '_'))
+            test, _, variant = n.rpartition('@')
+            if variant.isdigit():
+                exact_matches.append((test, int(variant)))
+
         else:
             regex_matches.append(n)
 
@@ -61,7 +64,8 @@ def have_any_name(names):
     def _fn(case):
         # Check if we have an exact match
         for m in exact_matches:
-            if m == case.check.unique_name:
+            cls_name = type(case.check).__name__
+            if (cls_name, case.check.variant_num) == m:
                 return True
 
         display_name = case.check.display_name.replace(' ', '')
diff --git a/reframe/frontend/runreport.py b/reframe/frontend/runreport.py
index f8ac0a9f..25e08b68 100644
--- a/reframe/frontend/runreport.py
+++ b/reframe/frontend/runreport.py
@@ -18,7 +18,7 @@ import reframe.utility.jsonext as jsonext
 # The schema data version
 # Major version bumps are expected to break the validation of previous schemas
 
-DATA_VERSION = '2.0'
+DATA_VERSION = '2.1'
 _SCHEMA = os.path.join(rfm.INSTALL_PREFIX, 'reframe/schemas/runreport.json')
 
 
diff --git a/reframe/frontend/statistics.py b/reframe/frontend/statistics.py
index 8457958e..de908223 100644
--- a/reframe/frontend/statistics.py
+++ b/reframe/frontend/statistics.py
@@ -110,6 +110,7 @@ class TestStats:
                     'environment': None,
                     'fail_phase': None,
                     'fail_reason': None,
+                    'fixture': check.is_fixture(),
                     'jobid': None,
                     'job_stderr': None,
                     'job_stdout': None,
@@ -234,7 +235,7 @@ class TestStats:
                          f"{r['dependencies_actual']}")
             printer.info(f"  * Maintainers: {r['maintainers']}")
             printer.info(f"  * Failing phase: {r['fail_phase']}")
-            if rerun_info:
+            if rerun_info and not r['fixture']:
                 if rt.runtime().get_option('general/0/compact_test_names'):
                     cls = r['display_name'].split(' ')[0]
                     variant = r['unique_name'].replace(cls, '')
