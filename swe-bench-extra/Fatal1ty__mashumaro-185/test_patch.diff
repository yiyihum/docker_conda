diff --git a/tests/test_discriminated_unions/test_parent_via_config.py b/tests/test_discriminated_unions/test_parent_via_config.py
index 6b9dd90..d73f4db 100644
--- a/tests/test_discriminated_unions/test_parent_via_config.py
+++ b/tests/test_discriminated_unions/test_parent_via_config.py
@@ -426,6 +426,52 @@ class _VariantWitCustomTaggerSub2(_VariantWitCustomTagger):
     pass
 
 
+@dataclass
+class VariantWithMultipleTags(DataClassDictMixin):
+    class Config(BaseConfig):
+        discriminator = Discriminator(
+            field="type",
+            include_subtypes=True,
+            variant_tagger_fn=lambda cls: [
+                cls.__name__.lower(),
+                cls.__name__.upper(),
+            ],
+        )
+
+
+@dataclass
+class VariantWithMultipleTagsOne(VariantWithMultipleTags):
+    pass
+
+
+@dataclass
+class VariantWithMultipleTagsTwo(VariantWithMultipleTags):
+    pass
+
+
+@dataclass
+class _VariantWithMultipleTags:
+    class Config(BaseConfig):
+        discriminator = Discriminator(
+            field="type",
+            include_subtypes=True,
+            variant_tagger_fn=lambda cls: [
+                cls.__name__.lower(),
+                cls.__name__.upper(),
+            ],
+        )
+
+
+@dataclass
+class _VariantWithMultipleTagsOne(_VariantWithMultipleTags):
+    pass
+
+
+@dataclass
+class _VariantWithMultipleTagsTwo(_VariantWithMultipleTags):
+    pass
+
+
 def test_by_subtypes():
     assert VariantBySubtypes.from_dict(X_1) == VariantBySubtypesSub1(x=DT_STR)
     assert decode(X_1, _VariantBySubtypes) == _VariantBySubtypesSub1(x=DT_STR)
@@ -749,3 +795,19 @@ def test_by_subtypes_with_custom_variant_tagger():
         VariantWitCustomTagger.from_dict({"type": "unknown"})
     with pytest.raises(SuitableVariantNotFoundError):
         decode({"type": "unknown"}, _VariantWitCustomTagger)
+
+
+def test_by_subtypes_with_custom_variant_tagger_and_multiple_tags():
+    for variant in (VariantWithMultipleTagsOne, VariantWithMultipleTagsTwo):
+        for tag in (variant.__name__.lower(), variant.__name__.upper()):
+            assert (
+                VariantWithMultipleTags.from_dict({"type": tag}) == variant()
+            )
+    for variant in (_VariantWithMultipleTagsOne, _VariantWithMultipleTagsTwo):
+        for tag in (variant.__name__.lower(), variant.__name__.upper()):
+            assert decode({"type": tag}, _VariantWithMultipleTags) == variant()
+
+    with pytest.raises(SuitableVariantNotFoundError):
+        VariantWithMultipleTags.from_dict({"type": "unknown"})
+    with pytest.raises(SuitableVariantNotFoundError):
+        decode({"type": "unknown"}, _VariantWithMultipleTags)
diff --git a/tests/test_discriminated_unions/test_union_by_field.py b/tests/test_discriminated_unions/test_union_by_field.py
index ad8db13..0ca230b 100644
--- a/tests/test_discriminated_unions/test_union_by_field.py
+++ b/tests/test_discriminated_unions/test_union_by_field.py
@@ -341,6 +341,28 @@ class VariantWitCustomTaggerOwner(
     pass
 
 
+@dataclass
+class _VariantWitCustomTaggerWithMultipleTagsOwner:
+    x: Annotated[
+        Union[VariantWitCustomTagger1, VariantWitCustomTagger2],
+        Discriminator(
+            field="type",
+            include_supertypes=True,
+            variant_tagger_fn=lambda cls: [
+                cls.__name__.lower(),
+                cls.__name__.upper(),
+            ],
+        ),
+    ]
+
+
+@dataclass
+class VariantWitCustomTaggerWithMultipleTagsOwner(
+    _VariantWitCustomTaggerWithMultipleTagsOwner, DataClassDictMixin
+):
+    pass
+
+
 def test_by_field_with_supertypes():
     decoder = BasicDecoder(_ByFieldWithSupertypes)
 
@@ -748,3 +770,29 @@ def test_by_field_with_subtypes_with_custom_variant_tagger():
         )
         with pytest.raises(InvalidFieldValue):
             func({"x": {"type": "unknown"}})
+
+
+def test_by_field_with_subtypes_with_custom_variant_tagger_and_multiple_tags():
+    decoder = BasicDecoder(_VariantWitCustomTaggerWithMultipleTagsOwner)
+
+    for func, cls in (
+        (
+            VariantWitCustomTaggerWithMultipleTagsOwner.from_dict,
+            VariantWitCustomTaggerWithMultipleTagsOwner,
+        ),
+        (decoder.decode, _VariantWitCustomTaggerWithMultipleTagsOwner),
+    ):
+        assert func({"x": {"type": "variantwitcustomtagger1"}}) == cls(
+            VariantWitCustomTagger1()
+        )
+        assert func({"x": {"type": "variantwitcustomtagger2"}}) == cls(
+            VariantWitCustomTagger2()
+        )
+        assert func({"x": {"type": "VARIANTWITCUSTOMTAGGER1"}}) == cls(
+            VariantWitCustomTagger1()
+        )
+        assert func({"x": {"type": "VARIANTWITCUSTOMTAGGER2"}}) == cls(
+            VariantWitCustomTagger2()
+        )
+        with pytest.raises(InvalidFieldValue):
+            func({"x": {"type": "unknown"}})
