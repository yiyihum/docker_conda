diff --git a/nrrd/writer.py b/nrrd/writer.py
index d8c0b1c..0a63f59 100644
--- a/nrrd/writer.py
+++ b/nrrd/writer.py
@@ -93,7 +93,7 @@ def _format_field_value(value, field_type):
         raise NRRDError('Invalid field type given: %s' % field_type)
 
 
-def write(filename, data, header={}, detached_header=False, custom_field_map=None,
+def write(filename, data, header={}, detached_header=False, relative_data_path=True, custom_field_map=None,
                           compression_level = 9):
     """Write :class:`numpy.ndarray` to NRRD file
 
@@ -121,6 +121,9 @@ def write(filename, data, header={}, detached_header=False, custom_field_map=Non
         Data to save to the NRRD file
     detached_header : :obj:`bool`, optional
         Whether the header and data should be saved in separate files. Defaults to :obj:`False`
+    relative_data_path : :class:`bool`
+        Whether the data filename in detached header is saved with a relative path or absolute path.
+        This parameter is ignored if there is no detached header. Defaults to :obj:`True`
     custom_field_map : :class:`dict` (:class:`str`, :class:`str`), optional
         Dictionary used for parsing custom field types where the key is the custom field name and the value is a
         string identifying datatype for the custom field.
@@ -183,12 +186,14 @@ def write(filename, data, header={}, detached_header=False, custom_field_map=Non
             else:
                 raise NRRDError('Invalid encoding specification while writing NRRD file: %s' % header['encoding'])
 
-            header['data file'] = data_filename
+            header['data file'] = os.path.basename(data_filename) \
+                if relative_data_path else os.path.abspath(data_filename)
         else:
             data_filename = header['data file']
     elif filename.endswith('.nrrd') and detached_header:
         data_filename = filename
-        header['data file'] = data_filename
+        header['data file'] = os.path.basename(data_filename) \
+            if relative_data_path else os.path.abspath(data_filename)
         filename = '%s.nhdr' % os.path.splitext(filename)[0]
     else:
         # Write header & data as one file
