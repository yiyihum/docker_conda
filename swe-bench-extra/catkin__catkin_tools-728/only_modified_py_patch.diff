diff --git a/catkin_tools/context.py b/catkin_tools/context.py
index c6ac7c7..f035063 100644
--- a/catkin_tools/context.py
+++ b/catkin_tools/context.py
@@ -191,6 +191,8 @@ class Context(object):
 
         # Get the active profile
         profile = profile or opts_vars.get('profile', None) or metadata.get_active_profile(workspace)
+        if not metadata.active_profile_set(workspace):
+            metadata.set_active_profile(workspace, profile)
         opts_vars['profile'] = profile
 
         # Initialize empty metadata/args
diff --git a/catkin_tools/metadata.py b/catkin_tools/metadata.py
index 0545236..5337878 100644
--- a/catkin_tools/metadata.py
+++ b/catkin_tools/metadata.py
@@ -243,6 +243,7 @@ def init_metadata_root(workspace_path, reset=False):
     else:
         # Create a new .catkin_tools directory
         os.mkdir(metadata_root_path)
+        os.mkdir(os.path.join(metadata_root_path, 'profiles'))
 
     # Write the README file describing the directory
     with open(os.path.join(metadata_root_path, 'README'), 'w') as metadata_readme:
@@ -357,6 +358,12 @@ def get_active_profile(workspace_path):
     return DEFAULT_PROFILE_NAME
 
 
+def active_profile_set(workspace_path):
+    """Check if the active profile is set in profiles.yml"""
+    profiles_data = get_profiles_data(workspace_path)
+    return 'active' in profiles_data
+
+
 def get_profiles_data(workspace_path):
     """Get the contents of the profiles file.
 
diff --git a/catkin_tools/verbs/catkin_build/cli.py b/catkin_tools/verbs/catkin_build/cli.py
index c1ef811..99696ee 100644
--- a/catkin_tools/verbs/catkin_build/cli.py
+++ b/catkin_tools/verbs/catkin_build/cli.py
@@ -45,6 +45,7 @@ from catkin_tools.jobs.utils import CommandMissing
 from catkin_tools.jobs.utils import loadenv
 from catkin_tools.metadata import find_enclosing_workspace
 from catkin_tools.metadata import get_metadata
+from catkin_tools.metadata import init_metadata_root
 from catkin_tools.metadata import update_metadata
 from catkin_tools.resultspace import load_resultspace_environment
 from catkin_tools.terminal_color import set_color
@@ -252,14 +253,15 @@ def main(opts):
         sys.exit(clr("[build] @!@{rf}Error:@| With --no-deps, you must specify packages to build."))
 
     # Load the context
-    if opts.build_this or opts.start_with_this:
-        ctx = Context.load(opts.workspace, opts.profile, opts, append=True, strict=True)
-    else:
-        ctx = Context.load(opts.workspace, opts.profile, opts, append=True)
+    ctx = Context.load(opts.workspace, opts.profile, opts, append=True, strict=True)
 
     # Handle no workspace
-    if ctx is None:
+    if ctx is None and (opts.build_this or opts.start_with_this):
         sys.exit(clr("[build] @!@{rf}Error:@| The current folder is not part of a catkin workspace."))
+    elif ctx is None:
+        init_metadata_root(opts.workspace or os.getcwd())
+        ctx = Context.load(opts.workspace, opts.profile, opts, append=True)
+        log(clr('@!@{cf}Initialized new catkin workspace in `{}`@|').format(ctx.workspace))
 
     # Initialize the build configuration
     make_args, makeflags, cli_flags, jobserver = configure_make_args(
diff --git a/catkin_tools/verbs/catkin_config/cli.py b/catkin_tools/verbs/catkin_config/cli.py
index 4d46840..0fd729e 100644
--- a/catkin_tools/verbs/catkin_config/cli.py
+++ b/catkin_tools/verbs/catkin_config/cli.py
@@ -19,6 +19,7 @@ import sys
 from catkin_tools.argument_parsing import add_cmake_and_make_and_catkin_make_args
 from catkin_tools.argument_parsing import add_context_args
 from catkin_tools.context import Context
+from catkin_tools.metadata import init_metadata_root
 from catkin_tools.terminal_color import ColorMapper
 from catkin_tools.terminal_color import fmt
 
@@ -179,21 +180,35 @@ def main(opts):
             opts.profile,
             opts,
             append=opts.append_args,
-            remove=opts.remove_args)
+            remove=opts.remove_args,
+            strict=True)
 
         do_init = opts.init or not no_action
         summary_notes = []
 
-        if not context.initialized() and do_init:
-            summary_notes.append(clr('@!@{cf}Initialized new catkin workspace in `{}`@|').format(context.workspace))
+        if not context and not do_init:
+            # Don't initialize a new workspace
+            print(clr('@!@{rf}WARNING:@| Workspace is not yet initialized. '
+                      'Use catkin init or run catkin config with --init.'))
+
+        else:
+            # Either initialize it or it already exists
+            if not context:
+                init_metadata_root(opts.workspace or os.getcwd())
+                context = Context.load(
+                    opts.workspace,
+                    opts.profile,
+                    opts,
+                    append=opts.append_args,
+                    remove=opts.remove_args)
+                summary_notes.append(clr('@!@{cf}Initialized new catkin workspace in `{}`@|').format(context.workspace))
 
-        if context.initialized() or do_init:
             Context.save(context)
 
-        if opts.mkdirs and not context.source_space_exists():
-            os.makedirs(context.source_space_abs)
+            if opts.mkdirs and not context.source_space_exists():
+                os.makedirs(context.source_space_abs)
 
-        print(context.summary(notes=summary_notes))
+            print(context.summary(notes=summary_notes))
 
     except IOError as exc:
         # Usually happens if workspace is already underneath another catkin_tools workspace

