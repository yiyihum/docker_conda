diff --git a/README.md b/README.md
index 0eef38e..54ca7ed 100644
--- a/README.md
+++ b/README.md
@@ -97,7 +97,10 @@ prompts that are hidden, using `hide_input=True`, are sent to the user DM, and c
 
 Note that, echo and prompt will send a message in the same channel as the message that triggered the command invocation.
 
-Calls to echo are buffered, the buffer is flushed either when there is a prompt or when the command finishes execution.
+Calls to echo are buffered. When the buffer is flushed, its content is sent in 2K chunks (limit set by discord.)
+The buffer can be flushed automatically when there is a prompt, or the command finishes execution, or the content
+in the buffer exceeds the 2K limit.
+
 It's also possible to flush the buffer by passing `flush=True` to `click.echo` call.
 
 ## Acknowledgements
diff --git a/smalld_click/conversation.py b/smalld_click/conversation.py
index fcacfb1..a094244 100644
--- a/smalld_click/conversation.py
+++ b/smalld_click/conversation.py
@@ -6,6 +6,9 @@ click_prompt = click.prompt
 click_echo = click.echo
 
 
+MESSAGE_CHARACTERS_LIMIT = 2000
+
+
 class Conversation:
     def __init__(self, runner, message, timeout):
         self.runner = runner
@@ -44,11 +47,11 @@ class Conversation:
     def flush(self):
         content = self.echo_buffer.getvalue()
         self.echo_buffer = io.StringIO()
-        if not content.strip():
-            return
 
         smalld, channel_id = self.runner.smalld, self.channel_id
-        smalld.post(f"/channels/{channel_id}/messages", {"content": content})
+        for message in chunked(content, MESSAGE_CHARACTERS_LIMIT):
+            if message.strip():
+                smalld.post(f"/channels/{channel_id}/messages", {"content": message})
 
     def wait_for_message(self):
         handle = self.runner.add_listener(self.user_id, self.channel_id)
@@ -72,3 +75,8 @@ class Conversation:
 
 def get_conversation():
     return click.get_current_context().find_object(Conversation)
+
+
+def chunked(it, n):
+    for i in range(0, len(it), n):
+        yield it[i : i + n]
