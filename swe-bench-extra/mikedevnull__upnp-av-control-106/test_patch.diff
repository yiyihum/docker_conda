diff --git a/tests/unit/test_observable.py b/tests/unit/test_observable.py
index 06f1aba..45fd762 100644
--- a/tests/unit/test_observable.py
+++ b/tests/unit/test_observable.py
@@ -1,6 +1,7 @@
 from upnpavcontrol.core import oberserver
 from ..testsupport import AsyncMock
 import pytest
+import typing
 import asyncio
 
 
@@ -86,6 +87,41 @@ async def test_subscription_callback():
     subscription_cb.assert_called_once_with(0)
 
 
+@pytest.mark.asyncio
+async def test_replay_last_value_on_subscription():
+    callback = AsyncMock()
+
+    subscription_cb = AsyncMock()
+    observable = oberserver.Observable[int](replay=True)
+    observable.on_subscription_change = subscription_cb
+    await observable.notify(42)
+
+    await observable.subscribe(callback)
+    subscription_cb.assert_called_once_with(1)
+    callback.assert_called_once_with(42)
+
+    callback.reset_mock()
+
+    await observable.notify(21)
+    callback.assert_called_once_with(21)
+
+
+@pytest.mark.asyncio
+async def test_no_replay_on_subscription_without_initial_value():
+    callback = AsyncMock()
+
+    subscription_cb = AsyncMock()
+    observable = oberserver.Observable[typing.Optional[int]](replay=True)
+    observable.on_subscription_change = subscription_cb
+
+    await observable.subscribe(callback)
+    subscription_cb.assert_called_once_with(1)
+    callback.assert_not_called()
+
+    await observable.notify(None)
+    callback.assert_called_once_with(None)
+
+
 @pytest.mark.asyncio
 async def test_wait_for_with_predicate_resolves_immediately():
     observable = oberserver.Observable[int]()
@@ -111,6 +147,19 @@ async def test_wait_for_with_predicate_resolves_later():
     assert True
 
 
+@pytest.mark.asyncio
+async def test_wait_for_value_reraises_exceptions_from_predicate():
+    observable = oberserver.Observable[int]()
+
+    def throwing_predicate(value):
+        raise RuntimeError('exception raised in predicate')
+
+    with pytest.raises(RuntimeError):
+        async with oberserver.wait_for_value_if(observable, throwing_predicate, 1):
+            await observable.notify(41)
+    assert observable.subscription_count == 0
+
+
 @pytest.mark.asyncio
 async def test_wait_for_with_predicate_times_out():
     observable = oberserver.Observable[int]()
