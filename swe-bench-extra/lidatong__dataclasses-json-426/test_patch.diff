diff --git a/tests/entities.py b/tests/entities.py
index 6c0db90..61b8af2 100644
--- a/tests/entities.py
+++ b/tests/entities.py
@@ -264,6 +264,19 @@ class DataClassWithConfigHelper:
     id: float = field(metadata=config(encoder=str))
 
 
+@dataclass_json
+@dataclass
+class DataClassWithErroneousDecode:
+    # Accepts no arguments, so passing in a single argument will result in a TypeError.
+    id: float = field(metadata=config(decoder=lambda: None))
+
+
+@dataclass_json
+@dataclass
+class DataClassMappingBadDecode:
+    map: Dict[str, DataClassWithErroneousDecode]
+
+
 @dataclass_json(letter_case=LetterCase.CAMEL)
 @dataclass
 class DataClassWithConfigDecorator:
diff --git a/tests/test_nested.py b/tests/test_nested.py
index 56dc9ba..69c6456 100644
--- a/tests/test_nested.py
+++ b/tests/test_nested.py
@@ -1,4 +1,6 @@
-from tests.entities import (DataClassWithDataClass,
+import pytest
+from tests.entities import (DataClassMappingBadDecode,
+                            DataClassWithDataClass,
                             DataClassWithList,
                             DataClassWithNestedDictWithTupleKeys,
                             DataClassX,
@@ -25,6 +27,10 @@ class TestDecoder:
         assert (DataClassXs.from_json('{"xs": [{"x": 0}, {"x": 1}]}') ==
                 DataClassXs([DataClassX(0), DataClassX(1)]))
 
+    def test_nested_mapping_of_dataclasses(self):
+        with pytest.raises(TypeError, match="positional arguments"):
+            DataClassMappingBadDecode.from_dict(dict(map=dict(test=dict(id="irrelevant"))))
+
 
 class TestNested:
     def test_tuple_dict_key(self):
