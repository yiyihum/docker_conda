diff --git a/test/test_parse_da.py b/test/test_parse_da.py
index 8342a99..8dfddb5 100644
--- a/test/test_parse_da.py
+++ b/test/test_parse_da.py
@@ -71,7 +71,7 @@ class TestNormalize(unittest.TestCase):
 #        self.assertEqual(extract_number("tre fjerdedel kop", lang="da-dk"),
 #                         3.0 / 4.0)
 
-    def test_extractdatetime_de(self):
+    def test_extractdatetime_da(self):
         def extractWithFormat(text):
             date = datetime(2017, 6, 27, 0, 0)
             [extractedDate, leftover] = extract_datetime(text, date,
@@ -158,6 +158,10 @@ class TestNormalize(unittest.TestCase):
 #        testExtract("lad os mødes klokken 8:00 om aftenen",
 #                    "2017-06-27 20:00:00", "lad os mødes")
 
+    def test_extractdatetime_no_time(self):
+        """Check that None is returned if no time is found in sentence."""
+        self.assertEqual(extract_datetime('ingen tid', lang='da-da'), None)
+
     def test_extractdatetime_default_da(self):
         default = time(9, 0, 0)
         anchor = datetime(2017, 6, 27, 0, 0)
diff --git a/test/test_parse_de.py b/test/test_parse_de.py
index 1a10f0a..e0d097c 100644
--- a/test/test_parse_de.py
+++ b/test/test_parse_de.py
@@ -159,6 +159,10 @@ class TestNormalize(unittest.TestCase):
         testExtract("lass uns treffen um 8:00 abends",
                     "2017-06-27 20:00:00", "lass uns treffen")
 
+    def test_extractdatetime_no_time(self):
+        """Check that None is returned if no time is found in sentence."""
+        self.assertEqual(extract_datetime('kein zeit', lang='de-de'), None)
+
     def test_extractdatetime_default_de(self):
         default = time(9, 0, 0)
         anchor = datetime(2017, 6, 27, 0, 0)
diff --git a/test/test_parse_es.py b/test/test_parse_es.py
index 355554e..a597cdb 100644
--- a/test/test_parse_es.py
+++ b/test/test_parse_es.py
@@ -202,10 +202,6 @@ class TestDatetime_es(unittest.TestCase):
             "ayer por la tarde", anchorDate=datetime(1998, 1, 1),
             lang='es')[0], datetime(1997, 12, 31, 15))
 
-        self.assertEqual(extract_datetime(
-            "qué año es", anchorDate=datetime(1998, 1, 1),
-            lang='es')[0], datetime(1998, 1, 1))
-
         self.assertEqual(extract_datetime("hoy 2 de la mañana", lang='es',
                                           anchorDate=datetime(1998, 1, 1))[0],
                          datetime(1998, 1, 1, 2))
@@ -213,6 +209,10 @@ class TestDatetime_es(unittest.TestCase):
                                           anchorDate=datetime(1998, 1, 1))[0],
                          datetime(1998, 1, 1, 14))
 
+    def test_extractdatetime_no_time(self):
+        """Check that None is returned if no time is found in sentence."""
+        self.assertEqual(extract_datetime('no hay tiempo', lang='es-es'), None)
+
     @unittest.skip("These phrases are not parsing correctly.")
     def test_extract_datetime_relative_failing(self):
         # parses as "morning" and returns 8:00 on anchorDate
diff --git a/test/test_parse_nl.py b/test/test_parse_nl.py
index fe2148f..edd3ec7 100644
--- a/test/test_parse_nl.py
+++ b/test/test_parse_nl.py
@@ -146,6 +146,10 @@ class TestParsing(unittest.TestCase):
                                anchor, lang=LANG, default_time=default)
         self.assertEqual(default, res[0].time())
 
+    def test_extractdatetime_no_time(self):
+        """Check that None is returned if no time is found in sentence."""
+        self.assertEqual(extract_datetime('geen tijd', lang=LANG), None)
+
     def test_spaces(self):
         self.assertEqual(normalize("  dit   is  een    test", LANG),
                          "dit is 1 test")
diff --git a/test/test_parse_sv.py b/test/test_parse_sv.py
index d577bed..c5e02cd 100644
--- a/test/test_parse_sv.py
+++ b/test/test_parse_sv.py
@@ -97,6 +97,10 @@ class TestNormalize(unittest.TestCase):
                                anchor, lang='sv-se', default_time=default)
         self.assertEqual(default, res[0].time())
 
+    def test_extractdatetime_no_time(self):
+        """Check that None is returned if no time is found in sentence."""
+        self.assertEqual(extract_datetime('Ingen tid', lang='sv-se'), None)
+
     def test_numbers(self):
         self.assertEqual(normalize("det här är ett ett två tre  test",
                                    lang='sv-se'),
