diff --git a/globus_sdk/auth/client_types/confidential_client.py b/globus_sdk/auth/client_types/confidential_client.py
index 6126ada7..fa920c42 100644
--- a/globus_sdk/auth/client_types/confidential_client.py
+++ b/globus_sdk/auth/client_types/confidential_client.py
@@ -1,4 +1,6 @@
 import logging
+import six
+
 from globus_sdk.base import merge_params
 from globus_sdk.authorizers import BasicAuthorizer
 from globus_sdk.auth.oauth2_constants import DEFAULT_REQUESTED_SCOPES
@@ -72,6 +74,9 @@ class ConfidentialAppAuthClient(AuthClient):
         """
         self.logger.info('Fetching token(s) using client credentials')
         requested_scopes = requested_scopes or DEFAULT_REQUESTED_SCOPES
+        # convert scopes iterable to string immediately on load
+        if not isinstance(requested_scopes, six.string_types):
+            requested_scopes = " ".join(requested_scopes)
 
         return self.oauth2_token({
             'grant_type': 'client_credentials',
@@ -81,12 +86,43 @@ class ConfidentialAppAuthClient(AuthClient):
             self, redirect_uri, requested_scopes=None,
             state='_default', refresh_tokens=False):
         """
-        Starts an Authorization Code OAuth2 flow by instantiating a
+        Starts or resumes an Authorization Code OAuth2 flow.
+
+        Under the hood, this is done by instantiating a
         :class:`GlobusAuthorizationCodeFlowManager
         <globus_sdk.auth.GlobusAuthorizationCodeFlowManager>`
 
-        All of the parameters to this method are passed to that class's
-        initializer verbatim.
+        **Parameters**
+
+            ``redirect_uri`` (*string*)
+              The page that users should be directed to after authenticating at
+              the authorize URL. Required.
+
+            ``requested_scopes`` (*iterable* or *string*)
+              The scopes on the token(s) being requested, as a space-separated
+              string or an iterable of strings. Defaults to ``openid profile
+              email urn:globus:auth:scope:transfer.api.globus.org:all``
+
+            ``state`` (*string*)
+              This is a way of your application passing information back to
+              itself in the course of the OAuth flow. Because the user will
+              navigate away from your application to complete the flow, this
+              parameter lets you pass an arbitrary string from the starting
+              page to the ``redirect_uri``
+
+            ``refresh_tokens`` (*bool*)
+              When True, request refresh tokens in addition to access tokens
+
+        **Examples**
+
+        You can see an example of this flow :ref:`in the usage examples
+        <examples_three_legged_oauth_login>`
+
+        **External Documentation**
+
+        The Authorization Code Grant flow is described
+        `in the Globus Auth Specification \
+        <https://docs.globus.org/api/auth/developer-guide/#obtaining-authorization>`_
         """
         self.logger.info('Starting OAuth2 Authorization Code Grant Flow')
         self.current_oauth2_flow_manager = GlobusAuthorizationCodeFlowManager(
diff --git a/globus_sdk/auth/client_types/native_client.py b/globus_sdk/auth/client_types/native_client.py
index 818269ab..20f55c58 100644
--- a/globus_sdk/auth/client_types/native_client.py
+++ b/globus_sdk/auth/client_types/native_client.py
@@ -40,14 +40,59 @@ class NativeAppAuthClient(AuthClient):
             state='_default', verifier=None, refresh_tokens=False,
             prefill_named_grant=None):
         """
-        Starts a Native App OAuth2 flow by instantiating a
+        Starts a Native App OAuth2 flow.
+
+        This is done internally by instantiating a
         :class:`GlobusNativeAppFlowManager
         <globus_sdk.auth.GlobusNativeAppFlowManager>`
 
-        All of the parameters to this method are passed to that class's
-        initializer verbatim.
+        While the flow is in progress, the ``NativeAppAuthClient`` becomes
+        non thread-safe as temporary state is stored during the flow.
+
+        **Parameters**
+
+            ``requested_scopes`` (*iterable* or *string*)
+              The scopes on the token(s) being requested, as a space-separated
+              string or iterable of strings. Defaults to ``openid profile email
+              urn:globus:auth:scope:transfer.api.globus.org:all``
+
+            ``redirect_uri`` (*string*)
+              The page that users should be directed to after authenticating at
+              the authorize URL. Defaults to
+              'https://auth.globus.org/v2/web/auth-code', which displays the
+              resulting ``auth_code`` for users to copy-paste back into your
+              application (and thereby be passed back to the
+              ``GlobusNativeAppFlowManager``)
+
+            ``state`` (*string*)
+              Typically is not meaningful in the Native App Grant flow, but you
+              may have a specialized use case for it. The ``redirect_uri`` page
+              will have this included in a query parameter, so you can use it
+              to pass information to that page. It defaults to the string
+              '_default'
+
+            ``verifier`` (*string*)
+              A secret used for the Native App flow. It will by default be a
+              freshly generated random string, known only to this
+              ``GlobusNativeAppFlowManager`` instance
+
+            ``refresh_tokens`` (*bool*)
+              When True, request refresh tokens in addition to access tokens
+
+            ``prefill_named_grant`` (*string*)
+              Optionally prefill the named grant label on the consent page
+
+        **Examples**
+
+        You can see an example of this flow :ref:`in the usage examples
+        <examples_native_app_login>`
+
+        **External Documentation**
 
-        #notthreadsafe
+        The Globus Auth specification for Native App grants details the
+        modifications to the Authorization Code grant flow as
+        `The PKCE Security Protocol \
+        <https://docs.globus.org/api/auth/developer-guide/#pkce>`_
         """
         self.logger.info('Starting Native App Grant Flow')
         self.current_oauth2_flow_manager = GlobusNativeAppFlowManager(
diff --git a/globus_sdk/auth/oauth2_authorization_code.py b/globus_sdk/auth/oauth2_authorization_code.py
index df5141a0..8a9b312b 100644
--- a/globus_sdk/auth/oauth2_authorization_code.py
+++ b/globus_sdk/auth/oauth2_authorization_code.py
@@ -1,4 +1,5 @@
 import logging
+import six
 from six.moves.urllib.parse import urlencode
 
 from globus_sdk.base import slash_join
@@ -34,9 +35,9 @@ class GlobusAuthorizationCodeFlowManager(GlobusOAuthFlowManager):
           The page that users should be directed to after authenticating at the
           authorize URL. Required.
 
-        ``requested_scopes`` (*string*)
+        ``requested_scopes`` (*iterable* or *string*)
           The scopes on the token(s) being requested, as a space-separated
-          string. Defaults to ``openid profile email
+          string or an iterable of strings. Defaults to ``openid profile email
           urn:globus:auth:scope:transfer.api.globus.org:all``
 
         ``state`` (*string*)
@@ -55,6 +56,9 @@ class GlobusAuthorizationCodeFlowManager(GlobusOAuthFlowManager):
                  refresh_tokens=False):
         # default to the default requested scopes
         self.requested_scopes = requested_scopes or DEFAULT_REQUESTED_SCOPES
+        # convert scopes iterable to string immediately on load
+        if not isinstance(self.requested_scopes, six.string_types):
+            self.requested_scopes = " ".join(self.requested_scopes)
 
         # store the remaining parameters directly, with no transformation
         self.client_id = auth_client.client_id
diff --git a/globus_sdk/auth/oauth2_constants.py b/globus_sdk/auth/oauth2_constants.py
index e92902eb..fb3fce16 100644
--- a/globus_sdk/auth/oauth2_constants.py
+++ b/globus_sdk/auth/oauth2_constants.py
@@ -2,5 +2,5 @@ __all__ = ['DEFAULT_REQUESTED_SCOPES']
 
 
 DEFAULT_REQUESTED_SCOPES = (
-    'openid profile email '
+    'openid', 'profile', 'email',
     'urn:globus:auth:scope:transfer.api.globus.org:all')
diff --git a/globus_sdk/auth/oauth2_native_app.py b/globus_sdk/auth/oauth2_native_app.py
index af646d6d..f42b38dc 100644
--- a/globus_sdk/auth/oauth2_native_app.py
+++ b/globus_sdk/auth/oauth2_native_app.py
@@ -3,6 +3,7 @@ import hashlib
 import base64
 import re
 import os
+import six
 from six.moves.urllib.parse import urlencode
 
 from globus_sdk.base import slash_join
@@ -72,9 +73,9 @@ class GlobusNativeAppFlowManager(GlobusOAuthFlowManager):
           used to extract default values for the flow, and also to make calls
           to the Auth service. This SHOULD be a ``NativeAppAuthClient``
 
-        ``requested_scopes`` (*string*)
+        ``requested_scopes`` (*iterable* or *string*)
           The scopes on the token(s) being requested, as a space-separated
-          string. Defaults to ``openid profile email
+          string or iterable of strings. Defaults to ``openid profile email
           urn:globus:auth:scope:transfer.api.globus.org:all``
 
         ``redirect_uri`` (*string*)
@@ -99,7 +100,7 @@ class GlobusNativeAppFlowManager(GlobusOAuthFlowManager):
         ``refresh_tokens`` (*bool*)
           When True, request refresh tokens in addition to access tokens
 
-          ``prefill_named_grant`` (*string*)
+        ``prefill_named_grant`` (*string*)
           Optionally prefill the named grant label on the consent page
     """
 
@@ -119,6 +120,9 @@ class GlobusNativeAppFlowManager(GlobusOAuthFlowManager):
 
         # default to the default requested scopes
         self.requested_scopes = requested_scopes or DEFAULT_REQUESTED_SCOPES
+        # convert scopes iterable to string immediately on load
+        if not isinstance(self.requested_scopes, six.string_types):
+            self.requested_scopes = " ".join(self.requested_scopes)
 
         # default to `/v2/web/auth-code` on whatever environment we're looking
         # at -- most typically it will be `https://auth.globus.org/`

