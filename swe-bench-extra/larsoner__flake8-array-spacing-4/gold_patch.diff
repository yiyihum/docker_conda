diff --git a/flake8_array_spacing/__init__.py b/flake8_array_spacing/__init__.py
index 052b4b0..b19694d 100644
--- a/flake8_array_spacing/__init__.py
+++ b/flake8_array_spacing/__init__.py
@@ -9,9 +9,50 @@ __version__ = '0.1.dev0'
 
 # This could almost certainly be better, it just checks for [...]
 # (no pairing within, or checking that i/j are attached to a number, etc.)
-ARRAY_LIKE_REGEX = re.compile(
-    r'[\[(][0-9 ij,+\-*^\/&|\[\]]*[\]),;]'
+_FMT = dict(
+    VARIABLE=r'[_a-z]+[_a-z0-9]*',
+    OPERATORS=r'[+\-*\/^\|&]',
+    SEPARATORS=r'[+\-*\/^\|& ,\[\]()]',
+    NUMERICAL=r"""
+(
+[0-9.]+(e[+-]?[0-9.]+)?j?|
+(np\.|numpy\.)?(nan|inf)|
 )
+""")
+
+_FMT['NUMERICAL_LIST'] = r"""
+[\[(]+  # >= 1 left bracket or paren
+({SEPARATORS}*{NUMERICAL}{SEPARATORS}*)+  # >= 1 numerical
+[\])]+  # >= 1 right bracket or paren
+""".format(**_FMT)
+
+_FMT['ARRAY_WITH_BINARY_OPS'] = r"""
+array\([\[(]+  # open array
+(
+    {SEPARATORS}*
+    (
+        {NUMERICAL}|
+        (
+            ({VARIABLE}|{NUMERICAL})
+            \ *
+            {OPERATORS}
+            \ *
+            ({VARIABLE}|{NUMERICAL})
+        )
+
+    )
+    {SEPARATORS}*
+)+  # at least one numerical-or-variable-with-binary-op
+[\])]+\)  # close array
+""".format(**_FMT)
+
+ARRAY_LIKE_REGEXP = re.compile("""(?x)
+(
+{NUMERICAL_LIST}
+|
+{ARRAY_WITH_BINARY_OPS}
+)""".format(**_FMT))
+
 FUNC_KINDS = (
     (extraneous_whitespace, ('E201', 'E202')),
     (whitespace_around_operator, ('E221', 'E222')),
@@ -35,7 +76,7 @@ class ArraySpacing(object):
         if self._array_ranges is None:
             self._array_ranges = [
                 (match.start() + 1, match.end() + 1)
-                for match in ARRAY_LIKE_REGEX.finditer(self.logical_line)]
+                for match in ARRAY_LIKE_REGEXP.finditer(self.logical_line)]
         return any(start <= idx <= end for start, end in self._array_ranges)
 
     def ignoring(self, kind):
