diff --git a/khal/cli.py b/khal/cli.py
index 8b920f5..538ff9d 100644
--- a/khal/cli.py
+++ b/khal/cli.py
@@ -93,6 +93,16 @@ def multi_calendar_option(f):
     return d(a(f))
 
 
+def mouse_option(f):
+    o = click.option(
+        '--mouse/--no-mouse',
+        is_flag=True,
+        default=None,
+        help='Disable mouse in interactive UI'
+    )
+    return o(f)
+
+
 def _select_one_calendar_callback(ctx, option, calendar):
     if isinstance(calendar, tuple):
         if len(calendar) > 1:
@@ -480,9 +490,12 @@ def _get_cli():
 
     @cli.command()
     @multi_calendar_option
+    @mouse_option
     @click.pass_context
-    def interactive(ctx, include_calendar, exclude_calendar):
+    def interactive(ctx, include_calendar, exclude_calendar, mouse):
         '''Interactive UI. Also launchable via `ikhal`.'''
+        if mouse is not None:
+            ctx.obj['conf']['default']['enable_mouse'] = mouse
         controllers.interactive(
             build_collection(
                 ctx.obj['conf'],
@@ -494,10 +507,13 @@ def _get_cli():
     @click.command()
     @global_options
     @multi_calendar_option
+    @mouse_option
     @click.pass_context
-    def interactive_cli(ctx, config, include_calendar, exclude_calendar):
+    def interactive_cli(ctx, config, include_calendar, exclude_calendar, mouse):
         '''Interactive UI. Also launchable via `khal interactive`.'''
         prepare_context(ctx, config)
+        if mouse is not None:
+            ctx.obj['conf']['default']['enable_mouse'] = mouse
         controllers.interactive(
             build_collection(
                 ctx.obj['conf'],
diff --git a/khal/ui/__init__.py b/khal/ui/__init__.py
index b3f1118..1a93f78 100644
--- a/khal/ui/__init__.py
+++ b/khal/ui/__init__.py
@@ -1345,7 +1345,12 @@ def start_pane(pane, callback, program_info='', quit_keys=None):
     palette = _add_calendar_colors(
         getattr(colors, pane._conf['view']['theme']), pane.collection)
     loop = urwid.MainLoop(
-        frame, palette, unhandled_input=frame.on_key_press, pop_ups=True)
+        widget=frame,
+        palette=palette,
+        unhandled_input=frame.on_key_press,
+        pop_ups=True,
+        handle_mouse=pane._conf['default']['enable_mouse'],
+    )
     frame.loop = loop
 
     def redraw_today(loop, pane, meta=None):

