diff --git a/omegaconf/_utils.py b/omegaconf/_utils.py
index 1a5b762..5879d6d 100644
--- a/omegaconf/_utils.py
+++ b/omegaconf/_utils.py
@@ -477,19 +477,12 @@ def format_and_raise(
         KEY_TYPE=f"{type(key).__name__}",
     )
 
-    full_backtrace = "OC_CAUSE" in os.environ and os.environ["OC_CAUSE"] == "1"
     template = """$MSG
 \tfull_key: $FULL_KEY
 \treference_type=$REF_TYPE
 \tobject_type=$OBJECT_TYPE
 """
 
-    if not full_backtrace:
-        template += """
-
-Set env OC_CAUSE=1 to include causing exception
-    """
-
     s = string.Template(template=template)
 
     message = s.substitute(
@@ -515,6 +508,9 @@ Set env OC_CAUSE=1 to include causing exception
         ex.ref_type = ref_type
         ex.ref_type_str = ref_type_str
 
+    # Set the environment variable OC_CAUSE=1 to get a stacktrace that includes the
+    # causing exception.
+    full_backtrace = "OC_CAUSE" in os.environ and os.environ["OC_CAUSE"] == "1"
     if full_backtrace:
         ex.__cause__ = cause
     else:
diff --git a/omegaconf/base.py b/omegaconf/base.py
index fd26d11..f1916d5 100644
--- a/omegaconf/base.py
+++ b/omegaconf/base.py
@@ -115,7 +115,7 @@ class Node(ABC):
             key = self._key()
             if value_kind == ValueKind.INTERPOLATION:
                 assert parent is not None
-                v = parent._resolve_interpolation(
+                v = parent._resolve_simple_interpolation(
                     key=key,
                     inter_type=match.group(1),
                     inter_key=match.group(2),
@@ -125,7 +125,7 @@ class Node(ABC):
                 return v
             elif value_kind == ValueKind.STR_INTERPOLATION:
                 assert parent is not None
-                ret = parent._resolve_str_interpolation(
+                ret = parent._resolve_interpolation(
                     key=key,
                     value=self,
                     throw_on_missing=throw_on_missing,
@@ -279,7 +279,7 @@ class Container(Node):
         )
         if value is None:
             return root, last_key, value
-        value = root._resolve_str_interpolation(
+        value = root._resolve_interpolation(
             key=last_key,
             value=value,
             throw_on_missing=False,
@@ -287,7 +287,7 @@ class Container(Node):
         )
         return root, last_key, value
 
-    def _resolve_interpolation(
+    def _resolve_simple_interpolation(
         self,
         key: Any,
         inter_type: str,
@@ -309,7 +309,8 @@ class Container(Node):
                 throw_on_resolution_failure=throw_on_resolution_failure,
             )
 
-            if parent is None or (value is None and last_key not in parent):  # type: ignore
+            # if parent is None or (value is None and last_key not in parent):  # type: ignore
+            if parent is None or value is None:
                 if throw_on_resolution_failure:
                     raise ConfigKeyError(
                         f"{inter_type} interpolation key '{inter_key}' not found"
@@ -341,7 +342,7 @@ class Container(Node):
                 else:
                     return None
 
-    def _resolve_str_interpolation(
+    def _resolve_interpolation(
         self,
         key: Any,
         value: "Node",
@@ -357,7 +358,7 @@ class Container(Node):
         if value_kind == ValueKind.INTERPOLATION:
             # simple interpolation, inherit type
             match = match_list[0]
-            return self._resolve_interpolation(
+            return self._resolve_simple_interpolation(
                 key=key,
                 inter_type=match.group(1),
                 inter_key=match.group(2),
@@ -371,7 +372,7 @@ class Container(Node):
             new = ""
             last_index = 0
             for match in match_list:
-                new_val = self._resolve_interpolation(
+                new_val = self._resolve_simple_interpolation(
                     key=key,
                     inter_type=match.group(1),
                     inter_key=match.group(2),
diff --git a/omegaconf/basecontainer.py b/omegaconf/basecontainer.py
index 47baea4..7acbdb9 100644
--- a/omegaconf/basecontainer.py
+++ b/omegaconf/basecontainer.py
@@ -56,7 +56,7 @@ class BaseContainer(Container, ABC):
         if has_default and (value is None or is_mandatory_missing(value)):
             return default_value
 
-        resolved = self._resolve_str_interpolation(
+        resolved = self._resolve_interpolation(
             key=key,
             value=value,
             throw_on_missing=not has_default,
@@ -179,9 +179,7 @@ class BaseContainer(Container, ABC):
             return retdict
         elif isinstance(conf, ListConfig):
             retlist: List[Any] = []
-            for index, item in enumerate(conf):
-                if resolve:
-                    item = conf[index]
+            for index, item in enumerate(conf._iter_ex(resolve=resolve)):
                 item = convert(item)
                 if isinstance(item, Container):
                     item = BaseContainer._to_content(
diff --git a/omegaconf/listconfig.py b/omegaconf/listconfig.py
index cb21c94..7a57951 100644
--- a/omegaconf/listconfig.py
+++ b/omegaconf/listconfig.py
@@ -16,6 +16,7 @@ from typing import (
 
 from ._utils import (
     ValueKind,
+    _get_value,
     format_and_raise,
     get_list_element_type,
     get_value_kind,
@@ -32,7 +33,6 @@ from .errors import (
     ReadonlyConfigError,
     ValidationError,
 )
-from .nodes import ValueNode
 
 
 class ListConfig(BaseContainer, MutableSequence[Any]):
@@ -388,6 +388,9 @@ class ListConfig(BaseContainer, MutableSequence[Any]):
         return hash(str(self))
 
     def __iter__(self) -> Iterator[Any]:
+        return self._iter_ex(resolve=True)
+
+    def _iter_ex(self, resolve: bool) -> Iterator[Any]:
         try:
             if self._is_none():
                 raise TypeError("Cannot iterate on ListConfig object representing None")
@@ -395,21 +398,24 @@ class ListConfig(BaseContainer, MutableSequence[Any]):
                 raise MissingMandatoryValue("Cannot iterate on a missing ListConfig")
 
             class MyItems(Iterator[Any]):
-                def __init__(self, lst: List[Any]) -> None:
+                def __init__(self, lst: ListConfig) -> None:
                     self.lst = lst
-                    self.iterator = iter(lst)
+                    self.index = 0
 
                 def __next__(self) -> Any:
-                    return self.next()
-
-                def next(self) -> Any:
-                    v = next(self.iterator)
-                    if isinstance(v, ValueNode):
-                        v = v._value()
+                    if self.index == len(self.lst):
+                        raise StopIteration()
+                    if resolve:
+                        v = self.lst[self.index]
+                    else:
+                        v = self.lst.__dict__["_content"][self.index]
+                        if v is not None:
+                            v = _get_value(v)
+                    self.index = self.index + 1
                     return v
 
             assert isinstance(self.__dict__["_content"], list)
-            return MyItems(self.__dict__["_content"])
+            return MyItems(self)
         except (ReadonlyConfigError, TypeError, MissingMandatoryValue) as e:
             self._format_and_raise(key=None, value=None, cause=e)
             assert False
@@ -453,8 +459,12 @@ class ListConfig(BaseContainer, MutableSequence[Any]):
             if isinstance(value, ListConfig):
                 self.__dict__["_metadata"] = copy.deepcopy(value._metadata)
                 self.__dict__["_metadata"].flags = {}
-            for item in value:
-                self.append(item)
+                for item in value._iter_ex(resolve=False):
+                    self.append(item)
+                self.__dict__["_metadata"].flags = copy.deepcopy(value._metadata.flags)
+            elif is_primitive_list(value):
+                for item in value:
+                    self.append(item)
 
             if isinstance(value, ListConfig):
                 self.__dict__["_metadata"].flags = value._metadata.flags

