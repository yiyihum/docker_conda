diff --git a/tests/adapters_t/sites_t/test_slurm.py b/tests/adapters_t/sites_t/test_slurm.py
index 7a979cf..a372abb 100644
--- a/tests/adapters_t/sites_t/test_slurm.py
+++ b/tests/adapters_t/sites_t/test_slurm.py
@@ -323,7 +323,7 @@ class TestSlurmAdapter(TestCase):
             "STAGE_OUT": ResourceStatus.Running,
             "STOPPED": ResourceStatus.Stopped,
             "SUSPENDED": ResourceStatus.Stopped,
-            "TIMEOUT": ResourceStatus.Error,
+            "TIMEOUT": ResourceStatus.Deleted,
         }
 
         for id, value in enumerate(state_translations.values()):
diff --git a/tests/plugins_t/test_elasticsearchmonitoring.py b/tests/plugins_t/test_elasticsearchmonitoring.py
index 6877020..9867cb1 100644
--- a/tests/plugins_t/test_elasticsearchmonitoring.py
+++ b/tests/plugins_t/test_elasticsearchmonitoring.py
@@ -80,3 +80,39 @@ class TestElasticsearchMonitoring(TestCase):
             id=f"{test_param.drone_uuid}-2",
             index=f"{self.plugin._index}-{self.mock_datetime.now.return_value.strftime.return_value}",  # noqa: B950
         )
+
+    def test_notify_resource_status_missing(self):
+        test_param = AttributeDict(
+            site_name="test-site",
+            machine_type="test_machine_type",
+            created=datetime.now(),
+            updated=datetime.now(),
+            drone_uuid="test-drone",
+        )
+
+        test_param_ext = {
+            **test_param,
+            "state": str(CleanupState()),
+            "meta": self.plugin._meta,
+            "timestamp": int(self.mock_time.return_value * 1000),
+            "resource_status": "",
+            "revision": 2,
+        }
+
+        self.mock_elasticsearch.return_value.search.return_value = {
+            "hits": {"total": {"value": 2}}
+        }
+
+        run_async(
+            self.plugin.notify, state=CleanupState(), resource_attributes=test_param
+        )
+
+        self.mock_elasticsearch.return_value.search.assert_called_with(
+            index=f"{self.plugin._index}*",
+            body={"query": {"term": {"drone_uuid.keyword": test_param.drone_uuid}}},
+        )
+        self.mock_elasticsearch.return_value.create.assert_called_with(
+            body=test_param_ext,
+            id=f"{test_param.drone_uuid}-2",
+            index=f"{self.plugin._index}-{self.mock_datetime.now.return_value.strftime.return_value}",  # noqa: B950
+        )
