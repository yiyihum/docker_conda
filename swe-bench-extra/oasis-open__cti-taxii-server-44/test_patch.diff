diff --git a/medallion/test/test_memory_backend.py b/medallion/test/test_memory_backend.py
index a23b9f1..7c9f982 100644
--- a/medallion/test/test_memory_backend.py
+++ b/medallion/test/test_memory_backend.py
@@ -207,6 +207,54 @@ class TestTAXIIServerWithMemoryBackend(unittest.TestCase):
         assert manifests["objects"][0]["id"] == new_id
         # ------------- BEGIN: end manifest section ------------- #
 
+    def test_add_existing_objects(self):
+        new_bundle = copy.deepcopy(API_OBJECTS_2)
+        new_id = "indicator--%s" % uuid.uuid4()
+        new_bundle["objects"][0]["id"] = new_id
+
+        # ------------- BEGIN: add object section ------------- #
+
+        post_header = copy.deepcopy(self.auth)
+        post_header["Content-Type"] = MEDIA_TYPE_STIX_V20
+        post_header["Accept"] = MEDIA_TYPE_TAXII_V20
+
+        r_post = self.client.post(
+            test.ADD_OBJECTS_EP,
+            data=json.dumps(new_bundle),
+            headers=post_header
+        )
+        self.assertEqual(r_post.status_code, 202)
+        self.assertEqual(r_post.content_type, MEDIA_TYPE_TAXII_V20)
+
+        # ------------- END: add object section ------------- #
+        # ------------- BEGIN: add object again section ------------- #
+
+        r_post = self.client.post(
+            test.ADD_OBJECTS_EP,
+            data=json.dumps(new_bundle),
+            headers=post_header
+        )
+        status_response2 = self.load_json_response(r_post.data)
+        self.assertEqual(r_post.status_code, 202)
+        self.assertEqual(status_response2["success_count"], 0)
+        self.assertEqual(status_response2["failures"][0]["message"],
+                         "Unable to process object")
+
+        # ------------- END: add object again section ------------- #
+        # ------------- BEGIN: get object section ------------- #
+
+        get_header = copy.deepcopy(self.auth)
+        get_header["Accept"] = MEDIA_TYPE_STIX_V20
+
+        r_get = self.client.get(
+            test.GET_OBJECTS_EP + "?match[id]=%s" % new_id,
+            headers=get_header
+        )
+        self.assertEqual(r_get.status_code, 200)
+        objs = self.load_json_response(r_get.data)
+        self.assertEqual(len(objs["objects"]), 1)
+        self.assertEqual(objs["objects"][0]["id"], new_id)
+
     def test_client_object_versioning(self):
         new_id = "indicator--%s" % uuid.uuid4()
         new_bundle = copy.deepcopy(API_OBJECTS_2)
