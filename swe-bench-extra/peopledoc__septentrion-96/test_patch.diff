diff --git a/tests/integration/test_migration.py b/tests/integration/test_migration.py
index 8928742..a7aec36 100644
--- a/tests/integration/test_migration.py
+++ b/tests/integration/test_migration.py
@@ -75,118 +75,3 @@ def test_init_schema_extra_files(mocker):
         ),
     ]
     assert calls == patch.call_args_list
-
-
-def test_migrate(mocker):
-    mock_run_script = mocker.patch("septentrion.migration.run_script")
-    mocker.patch("septentrion.db.is_schema_initialized", return_value=False)
-    mock_init_schema = mocker.patch("septentrion.migration.init_schema")
-    mocker.patch("septentrion.db.write_migration")
-
-    mocker.patch(
-        "septentrion.migration.core.build_migration_plan",
-        return_value=[
-            {
-                "version": versions.Version(
-                    version_tuple=(0, 1), original_string="0.1"
-                ),
-                "plan": [],
-            },
-            {
-                "version": versions.Version(
-                    version_tuple=(1, 0), original_string="1.0"
-                ),
-                "plan": [
-                    (
-                        "1.0-0-version-dml.sql",
-                        False,
-                        "example_migrations/1.0/1.0-0-version-dml.sql",
-                        False,
-                    ),
-                    (
-                        "1.0-author-1-ddl.sql",
-                        False,
-                        "example_migrations/1.0/1.0-author-1-ddl.sql",
-                        False,
-                    ),
-                    (
-                        "1.0-author-2-dml.sql",
-                        False,
-                        "example_migrations/1.0/1.0-author-2-dml.sql",
-                        False,
-                    ),
-                    (
-                        "1.0-book-1-ddl.sql",
-                        False,
-                        "example_migrations/1.0/1.0-book-1-ddl.sql",
-                        False,
-                    ),
-                    (
-                        "1.0-book-2-dml.sql",
-                        False,
-                        "example_migrations/1.0/1.0-book-2-dml.sql",
-                        False,
-                    ),
-                ],
-            },
-            {
-                "version": versions.Version(
-                    version_tuple=(1, 1), original_string="1.1"
-                ),
-                "plan": [
-                    (
-                        "1.1-0-version-dml.sql",
-                        False,
-                        "example_migrations/1.1/1.1-0-version-dml.sql",
-                        False,
-                    ),
-                    (
-                        "1.1-add-num-pages-1-ddl.sql",
-                        False,
-                        "example_migrations/1.1/1.1-add-num-pages-1-ddl.sql",
-                        False,
-                    ),
-                    (
-                        "1.1-add-num-pages-2-dml.sql",
-                        False,
-                        "example_migrations/1.1/1.1-add-num-pages-2-dml.sql",
-                        False,
-                    ),
-                    (
-                        "1.1-index-ddl.sql",
-                        False,
-                        "example_migrations/1.1/1.1-index-ddl.sql",
-                        False,
-                    ),
-                ],
-            },
-        ],
-    )
-
-    settings = configuration.Settings(
-        host="",
-        port="",
-        username="",
-        dbname="",
-        migrations_root="example_migrations",
-        target_version=versions.Version.from_string("1.1"),
-    )
-
-    migration.migrate(settings=settings)
-
-    mock_init_schema.assert_called_once()
-    assert mock_run_script.call_args_list == [
-        call(path="example_migrations/1.0/1.0-0-version-dml.sql", settings=settings),
-        call(path="example_migrations/1.0/1.0-author-1-ddl.sql", settings=settings),
-        call(path="example_migrations/1.0/1.0-author-2-dml.sql", settings=settings),
-        call(path="example_migrations/1.0/1.0-book-1-ddl.sql", settings=settings),
-        call(path="example_migrations/1.0/1.0-book-2-dml.sql", settings=settings),
-        call(path="example_migrations/1.1/1.1-0-version-dml.sql", settings=settings),
-        call(
-            path="example_migrations/1.1/1.1-add-num-pages-1-ddl.sql", settings=settings
-        ),
-        call(
-            path="example_migrations/1.1/1.1-add-num-pages-2-dml.sql", settings=settings
-        ),
-        call(path="example_migrations/1.1/1.1-index-ddl.sql", settings=settings),
-    ]
diff --git a/tests/unit/test_core.py b/tests/unit/test_core.py
index 9a159f0..c3d3af9 100644
--- a/tests/unit/test_core.py
+++ b/tests/unit/test_core.py
@@ -160,10 +160,10 @@ def test_build_migration_plan_unknown_version(known_versions):
     settings = configuration.Settings(
         target_version=versions.Version.from_string("1.5")
     )
-    schema_version = versions.Version.from_string("0")
+    from_version = versions.Version.from_string("0")
 
     with pytest.raises(ValueError):
-        list(core.build_migration_plan(settings, schema_version=schema_version))
+        list(core.build_migration_plan(settings, from_version=from_version))
 
 
 def test_build_migration_plan_ok(mocker, known_versions):
@@ -183,8 +183,8 @@ def test_build_migration_plan_ok(mocker, known_versions):
     settings = configuration.Settings(
         target_version=versions.Version.from_string("1.2")
     )
-    schema_version = versions.Version.from_string("0")
-    plan = core.build_migration_plan(settings=settings, schema_version=schema_version)
+    from_version = versions.Version.from_string("0")
+    plan = core.build_migration_plan(settings=settings, from_version=from_version)
 
     expected = [
         {
@@ -234,8 +234,8 @@ def test_build_migration_plan_db_uptodate(mocker, known_versions):
         target_version=versions.Version.from_string("1.2"),
     )
 
-    schema_version = versions.Version.from_string("0")
-    plan = core.build_migration_plan(settings=settings, schema_version=schema_version)
+    from_version = versions.Version.from_string("0")
+    plan = core.build_migration_plan(settings=settings, from_version=from_version)
 
     expected = [
         {"plan": [], "version": versions.Version.from_string("1.1")},
@@ -247,13 +247,25 @@ def test_build_migration_plan_db_uptodate(mocker, known_versions):
 def test_build_migration_plan_with_schema(mocker, known_versions):
     mocker.patch("septentrion.core.db.get_applied_migrations", return_value=[])
     settings = configuration.Settings(target_version="1.2")
-    schema_version = versions.Version.from_string("1.1")
+    from_version = versions.Version.from_string("1.1")
 
-    plan = list(
-        core.build_migration_plan(settings=settings, schema_version=schema_version)
-    )
+    plan = list(core.build_migration_plan(settings=settings, from_version=from_version))
+
+    expected = [
+        {"plan": [], "version": versions.Version.from_string("1.2")},
+    ]
+    assert list(plan) == expected
+
+
+def test_build_migration_plan_with_no_target_version(mocker, known_versions):
+    mocker.patch("septentrion.core.db.get_applied_migrations", return_value=[])
+    settings = configuration.Settings(target_version=None)
+    from_version = versions.Version.from_string("1.1")
+
+    plan = list(core.build_migration_plan(settings=settings, from_version=from_version))
 
     expected = [
         {"plan": [], "version": versions.Version.from_string("1.2")},
+        {"plan": [], "version": versions.Version.from_string("1.3")},
     ]
     assert list(plan) == expected
diff --git a/tests/unit/test_migration.py b/tests/unit/test_migration.py
new file mode 100644
index 0000000..f15694a
--- /dev/null
+++ b/tests/unit/test_migration.py
@@ -0,0 +1,56 @@
+from septentrion import configuration, migration
+
+
+def test_migrate_uses_correct_version_with_db(mocker):
+    mocker.patch("septentrion.db.is_schema_initialized", return_value=True)
+    mock_init_schema = mocker.patch("septentrion.migration.init_schema")
+    current_version = mocker.patch("septentrion.db.get_current_schema_version")
+
+    build_migration_plan = mocker.patch(
+        "septentrion.migration.core.build_migration_plan",
+        return_value=[],
+    )
+
+    settings = configuration.Settings(
+        host="",
+        port="",
+        username="",
+        dbname="",
+        migrations_root="example_migrations",
+        target_version=None,
+    )
+
+    migration.migrate(settings=settings)
+
+    mock_init_schema.assert_not_called()
+    build_migration_plan.assert_called_with(
+        settings=settings, from_version=current_version.return_value
+    )
+
+
+def test_migrate_uses_correct_version_without_db(mocker):
+    mocker.patch("septentrion.db.is_schema_initialized", return_value=False)
+    mock_init_schema = mocker.patch("septentrion.migration.init_schema")
+    mocker.patch("septentrion.db.get_current_schema_version")
+    schema_version = mocker.patch("septentrion.core.get_best_schema_version")
+
+    build_migration_plan = mocker.patch(
+        "septentrion.migration.core.build_migration_plan",
+        return_value=[],
+    )
+
+    settings = configuration.Settings(
+        host="",
+        port="",
+        username="",
+        dbname="",
+        migrations_root="example_migrations",
+        target_version=None,
+    )
+
+    migration.migrate(settings=settings)
+
+    mock_init_schema.assert_called_once()
+    build_migration_plan.assert_called_with(
+        settings=settings, from_version=schema_version.return_value
+    )
