diff --git a/tests/test_ast_language.py b/tests/test_ast_language.py
index 991d913..5c340e8 100644
--- a/tests/test_ast_language.py
+++ b/tests/test_ast_language.py
@@ -226,6 +226,20 @@ def test_Sum():
                                               '(Sum data_source)')
 
 
+def test_All():
+    select_node = All(source=unwrap_ast(ast.parse('data_source')),
+                      predicate=unwrap_ast(ast.parse('lambda e: e')))
+    assert_equivalent_python_ast_and_text_ast(wrap_ast(select_node),
+                                              '(All data_source (lambda (list e) e))')
+
+
+def test_Any():
+    select_node = Any(source=unwrap_ast(ast.parse('data_source')),
+                      predicate=unwrap_ast(ast.parse('lambda e: e')))
+    assert_equivalent_python_ast_and_text_ast(wrap_ast(select_node),
+                                              '(Any data_source (lambda (list e) e))')
+
+
 def test_Zip():
     first_node = Zip(source=unwrap_ast(ast.parse('data_source')))
     assert_equivalent_python_ast_and_text_ast(wrap_ast(first_node),
diff --git a/tests/test_linq_util.py b/tests/test_linq_util.py
index 2cf83c4..65b3893 100644
--- a/tests/test_linq_util.py
+++ b/tests/test_linq_util.py
@@ -295,6 +295,52 @@ def test_sum_bad():
         insert_linq_nodes(ast.parse('the_source.Sum(None)'))
 
 
+def test_all():
+    initial_ast = ast.parse("the_source.All('lambda row: row')")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(All(source=unwrap_ast(ast.parse('the_source')),
+                                predicate=unwrap_ast(ast.parse('lambda row: row'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_all_composite():
+    initial_ast = ast.parse("the_source.First().All('lambda row: row')")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(All(source=First(source=unwrap_ast(ast.parse('the_source'))),
+                                predicate=unwrap_ast(ast.parse('lambda row: row'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_all_bad():
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.All()'))
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.All(None)'))
+
+
+def test_any():
+    initial_ast = ast.parse("the_source.Any('lambda row: row')")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(Any(source=unwrap_ast(ast.parse('the_source')),
+                                predicate=unwrap_ast(ast.parse('lambda row: row'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_any_composite():
+    initial_ast = ast.parse("the_source.First().Any('lambda row: row')")
+    final_ast = insert_linq_nodes(initial_ast)
+    expected_ast = wrap_ast(Any(source=First(source=unwrap_ast(ast.parse('the_source'))),
+                                predicate=unwrap_ast(ast.parse('lambda row: row'))))
+    assert_ast_nodes_are_equal(final_ast, expected_ast)
+
+
+def test_any_bad():
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.Any()'))
+    with pytest.raises(SyntaxError):
+        insert_linq_nodes(ast.parse('the_source.Any(None)'))
+
+
 def test_zip():
     initial_ast = ast.parse("the_source.Zip()")
     final_ast = insert_linq_nodes(initial_ast)
