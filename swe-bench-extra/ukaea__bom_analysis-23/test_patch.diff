diff --git a/tests/test_Base.py b/tests/test_Base.py
index ba7e6d5..7e6e56e 100644
--- a/tests/test_Base.py
+++ b/tests/test_Base.py
@@ -182,6 +182,18 @@ class TestConfig(unittest.TestCase):
         con = Config.to_dict()
         assert con["b"] == "foo"
 
+    def test_to_dict_without_login(self):
+        """tests whether to_dict works for different cases"""
+        config = {"a": 1, "b": "foo", "c": "bar"}
+        Config.define_config(config_dict=config)
+        Config._login_details = {
+            "username": "secret",
+            "password": "secret",
+            "domain": "secret",
+        }
+        dump = Config.to_dict()
+        assert "_login_details" not in dump
+
     def test_assignment_to_property(self):
         Config.restrict_param = "hello"
         assert Config.restrict_param == "hello"
diff --git a/tests/test_logging.py b/tests/test_logging.py
index a7fae83..fdbccdb 100644
--- a/tests/test_logging.py
+++ b/tests/test_logging.py
@@ -1,10 +1,15 @@
 import unittest
+from unittest.mock import patch
+import tempfile
+
+import pytest
 
 from bom_analysis import run_log
 from bom_analysis.utils import change_handler
 from bom_analysis.base import BaseConfig
 
 
+@pytest.mark.unittest
 class LoggingTest(unittest.TestCase):
     def setUp(self):
         change_handler("./run.log")
@@ -44,25 +49,42 @@ class LoggingTest(unittest.TestCase):
             content = f.readline()
         assert content == "INFO: In ./temp/run.log\n"
 
-    def test_change_location_config(self):
+    @patch("bom_analysis.BaseConfig.to_dict")
+    def test_change_location_config(self, td):
+        td.return_value = {}
         run_log.info("Again in ./run.log")
         with open("./run.log", "r") as f:
-            content = f.readline()
+            content = f.readlines()
 
-        assert content == "INFO: Again in ./run.log\n"
+        assert content[-2] == "INFO: Again in ./run.log\n"
 
         BaseConfig.temp_dir = "./temp/"
 
         run_log.info("Again in ./temp/run.log")
         with open("./temp/run.log", "r") as f:
-            content = f.readline()
-        assert content == "INFO: Again in ./temp/run.log\n"
+            content = f.readlines()
+        assert content[-2] == "INFO: Again in ./temp/run.log\n"
+        with tempfile.TemporaryDirectory(prefix="temp_", dir="./temp/") as tmp_dir:
+            BaseConfig.temp_dir = tmp_dir
+
+            run_log.info("final test in a new dir")
+            with open(f"{tmp_dir}/run.log", "r") as f:
+                content = f.readlines()
+            assert content[-2] == "INFO: final test in a new dir\n"
+            BaseConfig.temp_dir = "./"
+        with open("./temp/run.log", "r") as f:
+            content = f.readlines()
+
+        assert content[-2] == "INFO: Again in ./temp/run.log\n"
 
         with open("./base.log", "r") as f:
             base_content = f.readlines()
-        assert base_content[-2][26::] == "INFO in test_logging: Again in ./run.log\n"
         assert (
-            base_content[-1][26::] == "INFO in test_logging: Again in ./temp/run.log\n"
+            base_content[-4][26::] == "INFO in test_logging: final test in a new dir\n"
+        )
+        assert base_content[-12][26::] == "INFO in test_logging: Again in ./run.log\n"
+        assert (
+            base_content[-8][26::] == "INFO in test_logging: Again in ./temp/run.log\n"
         )
 
 
