diff --git a/tests/test_asdata.py b/tests/test_aspandas.py
similarity index 86%
rename from tests/test_asdata.py
rename to tests/test_aspandas.py
index d71000e..ea9b088 100644
--- a/tests/test_asdata.py
+++ b/tests/test_aspandas.py
@@ -6,8 +6,8 @@ from typing import cast
 import pandas as pd
 from pandas.testing import assert_frame_equal, assert_series_equal
 from data import Weather, weather, df_weather_true, ser_weather_true
-from pandas_dataclasses import Spec, asdataframe, asseries
-from pandas_dataclasses.core.asdata import get_attrs, get_columns, get_data, get_index
+from pandas_dataclasses import Spec, asframe, asseries
+from pandas_dataclasses.core.aspandas import get_attrs, get_columns, get_data, get_index
 
 
 # test data
@@ -15,12 +15,12 @@ spec = Spec.from_dataclass(Weather) @ weather
 
 
 # test functions
-def test_asseries() -> None:
-    assert_series_equal(asseries(weather), ser_weather_true)
+def test_asframe() -> None:
+    assert_frame_equal(asframe(weather), df_weather_true)
 
 
-def test_asdataframe() -> None:
-    assert_frame_equal(asdataframe(weather), df_weather_true)
+def test_asseries() -> None:
+    assert_series_equal(asseries(weather), ser_weather_true)
 
 
 def test_get_attrs() -> None:
diff --git a/tests/test_mixins.py b/tests/test_mixins.py
index 7aed087..a6e39da 100644
--- a/tests/test_mixins.py
+++ b/tests/test_mixins.py
@@ -7,7 +7,7 @@ from typing import Any
 import pandas as pd
 from pandas.testing import assert_frame_equal, assert_series_equal
 from data import Weather, weather, df_weather_true, ser_weather_true
-from pandas_dataclasses import As, AsDataFrame, AsSeries
+from pandas_dataclasses import As, AsFrame, AsSeries
 
 
 # test data
@@ -15,47 +15,47 @@ def factory(*args: Any, **kwargs: Any) -> pd.Series:  # type: ignore
     return pd.Series(*args, **kwargs)  # type: ignore
 
 
-class CustomDataFrame(pd.DataFrame):
+class UserFrame(pd.DataFrame):
     pass
 
 
-class CustomSeries(pd.Series):  # type: ignore
+class UserSeries(pd.Series):  # type: ignore
     pass
 
 
 @dataclass
-class DataFrameWeather(Weather, AsDataFrame):
+class Frame(Weather, AsFrame):
     pass
 
 
 @dataclass
-class CustomDataFrameWeather(Weather, As[CustomDataFrame]):
+class CustomFrame(Weather, As[UserFrame]):
     pass
 
 
 @dataclass
-class SeriesWeather(Weather, AsSeries):
+class Series(Weather, AsSeries):
     pass
 
 
 @dataclass
-class FactorySeriesWeather(Weather, AsSeries, factory=factory):
+class CustomSeries(Weather, As[UserSeries]):
     pass
 
 
 @dataclass
-class CustomSeriesWeather(Weather, As[CustomSeries]):
+class FactorySeries(Weather, AsSeries, factory=factory):
     pass
 
 
 @dataclass
-class FloatSeriesWeather(Weather, As["pd.Series[float]"], factory=pd.Series):
+class FloatSeries(Weather, As["pd.Series[float]"], factory=pd.Series):
     pass
 
 
 # test functions
-def test_dataframe_weather() -> None:
-    df_weather = DataFrameWeather.new(
+def test_frame() -> None:
+    df_weather = Frame.new(
         year=weather.year,
         month=weather.month,
         temp_avg=weather.temp_avg,
@@ -68,8 +68,8 @@ def test_dataframe_weather() -> None:
     assert_frame_equal(df_weather, df_weather_true)
 
 
-def test_custom_dataframe_weather() -> None:
-    df_weather = CustomDataFrameWeather.new(
+def test_custom_frame() -> None:
+    df_weather = CustomFrame.new(
         year=weather.year,
         month=weather.month,
         temp_avg=weather.temp_avg,
@@ -78,12 +78,12 @@ def test_custom_dataframe_weather() -> None:
         wind_max=weather.wind_max,
     )
 
-    assert isinstance(df_weather, CustomDataFrame)
+    assert isinstance(df_weather, UserFrame)
     assert_frame_equal(df_weather, df_weather_true, check_frame_type=False)
 
 
-def test_series_weather() -> None:
-    ser_weather = SeriesWeather.new(
+def test_series() -> None:
+    ser_weather = Series.new(
         year=weather.year,
         month=weather.month,
         temp_avg=weather.temp_avg,
@@ -96,8 +96,8 @@ def test_series_weather() -> None:
     assert_series_equal(ser_weather, ser_weather_true)
 
 
-def test_factory_series_weather() -> None:
-    ser_weather = FactorySeriesWeather.new(
+def test_custom_series() -> None:
+    ser_weather = CustomSeries.new(
         year=weather.year,
         month=weather.month,
         temp_avg=weather.temp_avg,
@@ -106,12 +106,12 @@ def test_factory_series_weather() -> None:
         wind_max=weather.wind_max,
     )
 
-    assert isinstance(ser_weather, pd.Series)
-    assert_series_equal(ser_weather, ser_weather_true)
+    assert isinstance(ser_weather, UserSeries)
+    assert_series_equal(ser_weather, ser_weather_true, check_series_type=False)
 
 
-def test_custom_series_weather() -> None:
-    ser_weather = CustomSeriesWeather.new(
+def test_factory_series() -> None:
+    ser_weather = FactorySeries.new(
         year=weather.year,
         month=weather.month,
         temp_avg=weather.temp_avg,
@@ -120,12 +120,12 @@ def test_custom_series_weather() -> None:
         wind_max=weather.wind_max,
     )
 
-    assert isinstance(ser_weather, CustomSeries)
-    assert_series_equal(ser_weather, ser_weather_true, check_series_type=False)
+    assert isinstance(ser_weather, pd.Series)
+    assert_series_equal(ser_weather, ser_weather_true)
 
 
-def test_float_series_weather() -> None:
-    ser_weather = FloatSeriesWeather.new(
+def test_float_series() -> None:
+    ser_weather = FloatSeries.new(
         year=weather.year,
         month=weather.month,
         temp_avg=weather.temp_avg,
