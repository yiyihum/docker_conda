diff --git a/pandas_dataclasses/__init__.py b/pandas_dataclasses/__init__.py
index fe0a274..18a5d75 100644
--- a/pandas_dataclasses/__init__.py
+++ b/pandas_dataclasses/__init__.py
@@ -1,6 +1,7 @@
 __all__ = [
     "As",
     "AsDataFrame",
+    "AsFrame",
     "AsSeries",
     "Attr",
     "Column",
@@ -9,13 +10,14 @@ __all__ = [
     "Other",
     "Spec",
     "asdataframe",
+    "asframe",
     "asseries",
     "core",
 ]
 
 
 from . import core
-from .core.asdata import *
+from .core.aspandas import *
 from .core.mixins import *
 from .core.specs import *
 from .core.typing import *
@@ -23,3 +25,12 @@ from .core.typing import *
 
 # metadata
 __version__ = "0.8.0"
+
+
+# aliases
+AsDataFrame = AsFrame
+"""Alias of ``core.mixins.AsFrame``."""
+
+
+asdataframe = asframe
+"""Alias of ``core.aspandas.asframe``."""
diff --git a/pandas_dataclasses/core/__init__.py b/pandas_dataclasses/core/__init__.py
index cd94a78..b44c4f9 100644
--- a/pandas_dataclasses/core/__init__.py
+++ b/pandas_dataclasses/core/__init__.py
@@ -1,7 +1,7 @@
-__all__ = ["asdata", "mixins", "specs", "typing"]
+__all__ = ["aspandas", "mixins", "specs", "typing"]
 
 
-from . import asdata
+from . import aspandas
 from . import mixins
 from . import specs
 from . import typing
diff --git a/pandas_dataclasses/core/asdata.py b/pandas_dataclasses/core/aspandas.py
similarity index 88%
rename from pandas_dataclasses/core/asdata.py
rename to pandas_dataclasses/core/aspandas.py
index 29265a5..b7003c4 100644
--- a/pandas_dataclasses/core/asdata.py
+++ b/pandas_dataclasses/core/aspandas.py
@@ -1,4 +1,4 @@
-__all__ = ["asdataframe", "asseries"]
+__all__ = ["asframe", "asseries"]
 
 
 # standard library
@@ -12,26 +12,26 @@ import pandas as pd
 
 # submodules
 from .specs import Spec
-from .typing import P, DataClass, PandasClass, TDataFrame, TSeries
+from .typing import P, DataClass, PandasClass, TFrame, TSeries
 
 
 # runtime functions
 @overload
-def asdataframe(obj: PandasClass[P, TDataFrame], *, factory: None = None) -> TDataFrame:
+def asframe(obj: PandasClass[P, TFrame], *, factory: None = None) -> TFrame:
     ...
 
 
 @overload
-def asdataframe(obj: DataClass[P], *, factory: Callable[..., TDataFrame]) -> TDataFrame:
+def asframe(obj: DataClass[P], *, factory: Callable[..., TFrame]) -> TFrame:
     ...
 
 
 @overload
-def asdataframe(obj: DataClass[P], *, factory: None = None) -> pd.DataFrame:
+def asframe(obj: DataClass[P], *, factory: None = None) -> pd.DataFrame:
     ...
 
 
-def asdataframe(obj: Any, *, factory: Any = None) -> Any:
+def asframe(obj: Any, *, factory: Any = None) -> Any:
     """Create a DataFrame object from a dataclass object."""
     spec = Spec.from_dataclass(type(obj)) @ obj
 
diff --git a/pandas_dataclasses/core/mixins.py b/pandas_dataclasses/core/mixins.py
index 74b32f7..f1cfad1 100644
--- a/pandas_dataclasses/core/mixins.py
+++ b/pandas_dataclasses/core/mixins.py
@@ -1,4 +1,4 @@
-__all__ = ["As", "AsDataFrame", "AsSeries"]
+__all__ = ["As", "AsFrame", "AsSeries"]
 
 
 # standard library
@@ -14,7 +14,7 @@ from typing_extensions import get_args, get_origin
 
 
 # submodules
-from .asdata import asdataframe, asseries
+from .aspandas import asframe, asseries
 from .typing import P, T, Pandas, PandasClass, TPandas
 
 
@@ -51,7 +51,7 @@ class As(Generic[TPandas]):
         return MethodType(get_creator(cls), cls)
 
 
-AsDataFrame = As[pd.DataFrame]
+AsFrame = As[pd.DataFrame]
 """Alias of ``As[pandas.DataFrame]``."""
 
 
@@ -72,7 +72,7 @@ def get_creator(cls: Any) -> Callable[..., Pandas]:
     origin = get_origin(return_) or return_
 
     if issubclass(origin, pd.DataFrame):
-        converter: Any = asdataframe
+        converter: Any = asframe
     elif issubclass(origin, pd.Series):
         converter = asseries
     else:
diff --git a/pandas_dataclasses/core/typing.py b/pandas_dataclasses/core/typing.py
index dc0704a..4275ff7 100644
--- a/pandas_dataclasses/core/typing.py
+++ b/pandas_dataclasses/core/typing.py
@@ -38,7 +38,7 @@ Pandas = Union[pd.DataFrame, "pd.Series[Any]"]
 P = ParamSpec("P")
 T = TypeVar("T")
 TPandas = TypeVar("TPandas", bound=Pandas)
-TDataFrame = TypeVar("TDataFrame", bound=pd.DataFrame)
+TFrame = TypeVar("TFrame", bound=pd.DataFrame)
 TSeries = TypeVar("TSeries", bound="pd.Series[Any]")
 
 

