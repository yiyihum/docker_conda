diff --git a/tests/test_quantum_info_metrics.py b/tests/test_quantum_info_metrics.py
index 3be875e48..dabbbe661 100644
--- a/tests/test_quantum_info_metrics.py
+++ b/tests/test_quantum_info_metrics.py
@@ -10,7 +10,8 @@ def test_purity(backend):
     with pytest.raises(TypeError):
         state = np.random.rand(2, 3)
         state = backend.cast(state, dtype=state.dtype)
-        purity(state)
+        test = purity(state)
+
     state = np.array([1.0, 0.0, 0.0, 0.0])
     state = backend.cast(state, dtype=state.dtype)
     backend.assert_allclose(purity(state), 1.0)
@@ -21,26 +22,80 @@ def test_purity(backend):
 
     dim = 4
     state = backend.identity_density_matrix(2)
-    state = backend.cast(state, dtype=state.dtype)
     backend.assert_allclose(purity(state), 1.0 / dim)
 
 
-@pytest.mark.parametrize("validate", [False, True])
+@pytest.mark.parametrize("check_purity", [True, False])
+@pytest.mark.parametrize("base", [2, 10, np.e, 5])
+@pytest.mark.parametrize("bipartition", [[0], [1]])
+def test_concurrence_and_formation(backend, bipartition, base, check_purity):
+    with pytest.raises(TypeError):
+        state = np.random.rand(2, 3)
+        state = backend.cast(state, dtype=state.dtype)
+        test = concurrence(
+            state, bipartition=bipartition, check_purity=check_purity, backend=backend
+        )
+    with pytest.raises(TypeError):
+        state = random_statevector(4, backend=backend)
+        test = concurrence(
+            state, bipartition=bipartition, check_purity="True", backend=backend
+        )
+
+    if check_purity is True:
+        with pytest.raises(NotImplementedError):
+            state = backend.identity_density_matrix(2, normalize=False)
+            test = concurrence(state, bipartition=bipartition, backend=backend)
+
+    nqubits = 2
+    dim = 2**nqubits
+    state = random_statevector(dim, backend=backend)
+    concur = concurrence(
+        state, bipartition=bipartition, check_purity=check_purity, backend=backend
+    )
+    ent_form = entanglement_of_formation(
+        state,
+        bipartition=bipartition,
+        base=base,
+        check_purity=check_purity,
+        backend=backend,
+    )
+    backend.assert_allclose(0.0 <= concur <= np.sqrt(2), True)
+    backend.assert_allclose(0.0 <= ent_form <= 1.0, True)
+
+    state = np.kron(
+        random_density_matrix(2, pure=True, backend=backend),
+        random_density_matrix(2, pure=True, backend=backend),
+    )
+    concur = concurrence(state, bipartition, check_purity=check_purity, backend=backend)
+    ent_form = entanglement_of_formation(
+        state,
+        bipartition=bipartition,
+        base=base,
+        check_purity=check_purity,
+        backend=backend,
+    )
+    backend.assert_allclose(concur, 0.0, atol=10 * PRECISION_TOL)
+    backend.assert_allclose(ent_form, 0.0, atol=PRECISION_TOL)
+
+
+@pytest.mark.parametrize("check_hermitian", [False, True])
 @pytest.mark.parametrize("base", [2, 10, np.e, 5])
-def test_entropy(backend, base, validate):
+def test_entropy(backend, base, check_hermitian):
     with pytest.raises(ValueError):
         state = np.array([1.0, 0.0])
         state = backend.cast(state, dtype=state.dtype)
-        test = entropy(state, 0, validate=validate, backend=backend)
+        test = entropy(state, 0, check_hermitian=check_hermitian, backend=backend)
     with pytest.raises(TypeError):
         state = np.random.rand(2, 3)
         state = backend.cast(state, dtype=state.dtype)
-        test = entropy(state, base=base, validate=validate, backend=backend)
+        test = entropy(
+            state, base=base, check_hermitian=check_hermitian, backend=backend
+        )
     if backend.__class__.__name__ == "CupyBackend":
         with pytest.raises(NotImplementedError):
             state = random_unitary(4)
             state = backend.cast(state, dtype=state.dtype)
-            test = entropy(state, base=base, validate=True, backend=backend)
+            test = entropy(state, base=base, check_hermitian=True, backend=backend)
 
     state = np.array([1.0, 0.0])
     state = backend.cast(state, dtype=state.dtype)
@@ -63,22 +118,27 @@ def test_entropy(backend, base, validate):
 
     backend.assert_allclose(
         backend.calculate_norm(
-            entropy(state, base, validate=validate, backend=backend) - test
+            entropy(state, base, check_hermitian=check_hermitian, backend=backend)
+            - test
         )
         < PRECISION_TOL,
         True,
     )
 
 
-@pytest.mark.parametrize("validate", [False, True])
+@pytest.mark.parametrize("check_hermitian", [False, True])
 @pytest.mark.parametrize("base", [2, 10, np.e, 5])
 @pytest.mark.parametrize("bipartition", [[0], [1]])
-def test_entanglement_entropy(backend, bipartition, base, validate):
+def test_entanglement_entropy(backend, bipartition, base, check_hermitian):
     with pytest.raises(ValueError):
         state = np.array([1.0, 0.0])
         state = backend.cast(state, dtype=state.dtype)
         test = entanglement_entropy(
-            state, bipartition=bipartition, base=0, validate=validate, backend=backend
+            state,
+            bipartition=bipartition,
+            base=0,
+            check_hermitian=check_hermitian,
+            backend=backend,
         )
     with pytest.raises(TypeError):
         state = np.random.rand(2, 3)
@@ -87,7 +147,7 @@ def test_entanglement_entropy(backend, bipartition, base, validate):
             state,
             bipartition=bipartition,
             base=base,
-            validate=validate,
+            check_hermitian=check_hermitian,
             backend=backend,
         )
     if backend.__class__.__name__ == "CupyBackend":
@@ -98,7 +158,7 @@ def test_entanglement_entropy(backend, bipartition, base, validate):
                 state,
                 bipartition=bipartition,
                 base=base,
-                validate=True,
+                check_hermitian=True,
                 backend=backend,
             )
 
@@ -107,7 +167,11 @@ def test_entanglement_entropy(backend, bipartition, base, validate):
     state = backend.cast(state, dtype=state.dtype)
 
     entang_entrop = entanglement_entropy(
-        state, bipartition=bipartition, base=base, validate=validate, backend=backend
+        state,
+        bipartition=bipartition,
+        base=base,
+        check_hermitian=check_hermitian,
+        backend=backend,
     )
 
     if base == 2:
@@ -127,7 +191,11 @@ def test_entanglement_entropy(backend, bipartition, base, validate):
     )
 
     entang_entrop = entanglement_entropy(
-        state, bipartition=bipartition, base=base, validate=validate, backend=backend
+        state,
+        bipartition=bipartition,
+        base=base,
+        check_hermitian=check_hermitian,
+        backend=backend,
     )
 
     backend.assert_allclose(entang_entrop, 0.0, atol=PRECISION_TOL)
@@ -159,7 +227,7 @@ def test_trace_distance(backend):
     target = backend.cast(target, dtype=target.dtype)
     backend.assert_allclose(trace_distance(state, target, backend=backend), 0.0)
     backend.assert_allclose(
-        trace_distance(state, target, validate=True, backend=backend), 0.0
+        trace_distance(state, target, check_hermitian=True, backend=backend), 0.0
     )
 
     state = np.outer(np.conj(state), state)
@@ -168,7 +236,7 @@ def test_trace_distance(backend):
     target = backend.cast(target, dtype=target.dtype)
     backend.assert_allclose(trace_distance(state, target, backend=backend), 0.0)
     backend.assert_allclose(
-        trace_distance(state, target, validate=True, backend=backend), 0.0
+        trace_distance(state, target, check_hermitian=True, backend=backend), 0.0
     )
 
     state = np.array([0.0, 1.0, 0.0, 0.0])
@@ -177,7 +245,7 @@ def test_trace_distance(backend):
     target = backend.cast(target, dtype=target.dtype)
     backend.assert_allclose(trace_distance(state, target, backend=backend), 1.0)
     backend.assert_allclose(
-        trace_distance(state, target, validate=True, backend=backend), 1.0
+        trace_distance(state, target, check_hermitian=True, backend=backend), 1.0
     )
 
 
@@ -241,7 +309,7 @@ def test_fidelity_and_bures(backend):
         target = np.random.rand(2, 2)
         state = backend.cast(state, dtype=state.dtype)
         target = backend.cast(target, dtype=target.dtype)
-        fidelity(state, target, validate=True)
+        fidelity(state, target, check_purity=True)
 
     state = np.array([0.0, 0.0, 0.0, 1.0])
     target = np.array([0.0, 0.0, 0.0, 1.0])
@@ -279,13 +347,13 @@ def test_process_fidelity(backend):
     with pytest.raises(TypeError):
         channel = np.random.rand(d**2, d**2)
         channel = backend.cast(channel, dtype=channel.dtype)
-        process_fidelity(channel, validate=True, backend=backend)
+        process_fidelity(channel, check_unitary=True, backend=backend)
     with pytest.raises(TypeError):
         channel = np.random.rand(d**2, d**2)
         target = np.random.rand(d**2, d**2)
         channel = backend.cast(channel, dtype=channel.dtype)
         target = backend.cast(target, dtype=target.dtype)
-        process_fidelity(channel, target, validate=True, backend=backend)
+        process_fidelity(channel, target, check_unitary=True, backend=backend)
 
     channel = np.eye(d**2)
     channel = backend.cast(channel, dtype=channel.dtype)
