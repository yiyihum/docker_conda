diff --git a/tests/test_preprocess.py b/tests/test_preprocess.py
new file mode 100644
index 0000000..3f3776b
--- /dev/null
+++ b/tests/test_preprocess.py
@@ -0,0 +1,41 @@
+import unittest
+
+from schematics.exceptions import DataError
+from basemodels.manifest import Preprocess
+
+class PipelineTest(unittest.TestCase):
+    def test_preprocess(self):
+        config = {}
+        p = Preprocess({"pipeline": "FaceBlurPipeline", "config": config})
+
+        self.assertEqual(p.pipeline, "FaceBlurPipeline")
+        self.assertEqual(p.config, config)
+
+        p = Preprocess({"pipeline": "FaceBlurPipeline"})
+
+        self.assertIsNone(p.config)
+
+
+    def test_preprocess_raise(self):
+        with self.assertRaises(DataError):
+            Preprocess().validate()
+
+        with self.assertRaises(DataError):
+            Preprocess({"pipeline": ""}).validate()
+
+        with self.assertRaises(DataError):
+            Preprocess({"pipeline": "FaceBlurPipeline", "config": 1}).validate()
+
+
+    def test_preprocess_to_dict(self):
+        config = { "radius": 3 }
+        p = Preprocess({"pipeline": "FaceBlurPipeline", "config": config})
+
+        self.assertEqual(p.to_dict(), { "pipeline": "FaceBlurPipeline", "config": config })
+
+        p = Preprocess({"pipeline": "FaceBlurPipeline"})
+
+        self.assertEqual(p.to_dict(), { "pipeline": "FaceBlurPipeline" })
+
+
+
diff --git a/tests/test_pydantic_preprocess.py b/tests/test_pydantic_preprocess.py
new file mode 100644
index 0000000..4731b35
--- /dev/null
+++ b/tests/test_pydantic_preprocess.py
@@ -0,0 +1,41 @@
+import unittest
+
+from pydantic.error_wrappers import ValidationError
+from basemodels.pydantic import Preprocess, Pipeline
+
+class PipelineTest(unittest.TestCase):
+    def test_preprocess(self):
+        config = {}
+        p = Preprocess(pipeline=Pipeline.FaceBlurPipeline, config=config)
+
+        self.assertEqual(p.pipeline, Pipeline.FaceBlurPipeline)
+        self.assertEqual(p.config, config)
+
+        p = Preprocess(pipeline=Pipeline.FaceBlurPipeline)
+
+        self.assertIsNone(p.config)
+
+
+    def test_preprocess_raise(self):
+        with self.assertRaises(ValidationError):
+            Preprocess()
+
+        with self.assertRaises(ValidationError):
+            Preprocess(pipeline="")
+
+        with self.assertRaises(ValidationError):
+            Preprocess(pipeline=Pipeline.FaceBlurPipeline, config=1)
+
+
+    def test_preprocess_to_dict(self):
+        config = { "radius": 3 }
+        p = Preprocess(pipeline=Pipeline.FaceBlurPipeline, config=config)
+
+        self.assertEqual(p.to_dict(), { "pipeline": Pipeline.FaceBlurPipeline.value, "config": config })
+
+        p = Preprocess(pipeline=Pipeline.FaceBlurPipeline)
+
+        self.assertEqual(p.to_dict(), { "pipeline": Pipeline.FaceBlurPipeline.value })
+
+
+
