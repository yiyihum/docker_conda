diff --git a/sosw/components/test/unit/test_helpers.py b/sosw/components/test/unit/test_helpers.py
index 7d0f762..85a794d 100644
--- a/sosw/components/test/unit/test_helpers.py
+++ b/sosw/components/test/unit/test_helpers.py
@@ -568,6 +568,27 @@ class helpers_UnitTestCase(unittest.TestCase):
             self.assertEqual(trim_arn_to_name(test), expected)
 
 
+    def test_trim_arn_to_account(self):
+
+        TESTS = [
+            ('111000000000', '111000000000'),
+            ('000000000123', '000000000123'),
+            ('arn:aws:lambda:us-west-2:123000000000:function:bar', '123000000000'),
+            ('arn:aws:lambda:us-west-2:000000000123:function:bar:', '000000000123'),
+            ('arn:aws:lambda:us-west-2:123000000000:function:bar:$LATEST', '123000000000'),
+            ('arn:aws:lambda:us-west-2:123000000000:function:bar:12', '123000000000'),
+            ('arn:aws:lambda:us-west-2:123000000000:function:bar:12', '123000000000'),
+            ('arn:aws:iam::123000000000:role/aws-code-deploy-role', '123000000000'),
+            ('arn:aws:rds:us-west-2:123000000000:cluster:aws-cluster-01', '123000000000'),
+            ('arn:aws:rds:us-west-2:000123000000:db:aws-01-00', '000123000000'),
+            ('arn:aws:events:us-west-2:123456000000:rule/aws-sr-01', '123456000000'),
+            ('arn:aws:dynamodb:us-west-2:123456000321:table/sosw_tasks', '123456000321'),
+        ]
+
+        for test, expected in TESTS:
+            self.assertEqual(trim_arn_to_account(test), expected)
+
+
     def test_make_hash(self):
 
         TESTS = [
diff --git a/sosw/managers/test/integration/test_task_i.py b/sosw/managers/test/integration/test_task_i.py
index 8c02cf7..3c8d9cb 100644
--- a/sosw/managers/test/integration/test_task_i.py
+++ b/sosw/managers/test/integration/test_task_i.py
@@ -47,6 +47,8 @@ class TaskManager_IntegrationTestCase(unittest.TestCase):
 
         self.HASH_KEY = ('task_id', 'S')
         self.RANGE_KEY = ('labourer_id', 'S')
+        self.NOW_TIME = 100000
+
         self.table_name = self.config['dynamo_db_config']['table_name']
         self.completed_tasks_table = self.config['sosw_closed_tasks_table']
         self.retry_tasks_table = self.config['sosw_retry_tasks_table']
@@ -195,7 +197,7 @@ class TaskManager_IntegrationTestCase(unittest.TestCase):
 
 
     def test_mark_task_invoked(self):
-        greenfield = round(time.time() - random.randint(100, 1000))
+        greenfield = 1000
         delta = self.manager.config['greenfield_invocation_delta']
         self.register_labourers()
 
@@ -208,13 +210,15 @@ class TaskManager_IntegrationTestCase(unittest.TestCase):
         # print(f"Saved initial version with greenfield some date not long ago: {row}")
 
         # Do the actual tested job
-        self.manager.mark_task_invoked(self.LABOURER, row)
-        time.sleep(1)
+        with patch('time.time') as mock_time:
+            mock_time.return_value = self.NOW_TIME
+            self.manager.mark_task_invoked(self.LABOURER, row)
+
         result = self.dynamo_client.get_by_query({self.HASH_KEY[0]: f"task_id_{self.LABOURER.id}_256"}, strict=False)
         # print(f"The new updated value of task is: {result}")
 
         # Rounded -2 we check that the greenfield was updated
-        self.assertAlmostEqual(round(int(time.time()) + delta, -2), round(result[0]['greenfield'], -2))
+        self.assertAlmostEqual(self.NOW_TIME + delta, result[0]['greenfield'])
 
 
     def test_get_invoked_tasks_for_labourer(self):
@@ -301,23 +305,26 @@ class TaskManager_IntegrationTestCase(unittest.TestCase):
 
         self.dynamo_client.put(task)
 
-        self.manager.move_task_to_retry_table(task, delay)
+        # Call
+        with patch('time.time') as mock_time:
+            mock_time.return_value = self.NOW_TIME
+            self.manager.move_task_to_retry_table(task, delay)
 
-        result_tasks = self.dynamo_client.get_by_query({_('task_id'): '123'})
-        self.assertEqual(len(result_tasks), 0)
+            result_tasks = self.dynamo_client.get_by_query({_('task_id'): '123'})
+            self.assertEqual(len(result_tasks), 0)
 
-        result_retry_tasks = self.dynamo_client.get_by_query({_('labourer_id'): labourer_id},
-                                                             table_name=self.retry_tasks_table)
-        self.assertEqual(len(result_retry_tasks), 1)
-        result = first_or_none(result_retry_tasks)
+            result_retry_tasks = self.dynamo_client.get_by_query({_('labourer_id'): labourer_id},
+                                                                 table_name=self.retry_tasks_table)
+            self.assertEqual(len(result_retry_tasks), 1)
+            result = first_or_none(result_retry_tasks)
 
-        for k in task:
-            self.assertEqual(task[k], result[k])
-        for k in result:
-            if k != _('desired_launch_time'):
-                self.assertEqual(result[k], task[k])
+            for k in task:
+                self.assertEqual(task[k], result[k])
+            for k in result:
+                if k != _('desired_launch_time'):
+                    self.assertEqual(result[k], task[k])
 
-        self.assertTrue(time.time() + delay - 60 < result[_('desired_launch_time')] < time.time() + delay + 60)
+            self.assertTrue(time.time() + delay - 60 < result[_('desired_launch_time')] < time.time() + delay + 60)
 
 
     def test_get_tasks_to_retry_for_labourer(self):
diff --git a/sosw/test/integration/test_scheduler_i.py b/sosw/test/integration/test_scheduler_i.py
index e979321..f37e098 100644
--- a/sosw/test/integration/test_scheduler_i.py
+++ b/sosw/test/integration/test_scheduler_i.py
@@ -1,6 +1,7 @@
 import boto3
 import os
 import random
+import types
 import unittest
 
 from unittest.mock import MagicMock, patch
@@ -67,8 +68,12 @@ class Scheduler_IntegrationTestCase(unittest.TestCase):
         self.get_config_patch = self.patcher.start()
 
         self.custom_config = self.TEST_CONFIG.copy()
-        with patch('sosw.scheduler.lambda_context') as mock_lambda_context:
-            self.scheduler = Scheduler(self.custom_config)
+        self.lambda_context = types.SimpleNamespace()
+        self.lambda_context.aws_request_id = 'AWS_REQ_ID'
+        self.lambda_context.invoked_function_arn = 'arn:aws:lambda:us-west-2:000000000000:function:some_function'
+        self.lambda_context.get_remaining_time_in_millis = MagicMock(side_effect=[100000, 100])
+
+        self.scheduler = Scheduler(self.custom_config, context=self.lambda_context)
 
         self.s3_client = boto3.client('s3')
 
diff --git a/sosw/test/unit/test_scheduler.py b/sosw/test/unit/test_scheduler.py
index 25fec9e..a0b99fd 100644
--- a/sosw/test/unit/test_scheduler.py
+++ b/sosw/test/unit/test_scheduler.py
@@ -78,13 +78,13 @@ class Scheduler_UnitTestCase(unittest.TestCase):
             'auto_spawning': True
         }
 
-        module.lambda_context = types.SimpleNamespace()
-        module.lambda_context.aws_request_id = 'AWS_REQ_ID'
-        module.lambda_context.invoked_function_arn = 'arn:aws:lambda:us-west-2:000000000000:function:some_function'
-        module.lambda_context.get_remaining_time_in_millis = MagicMock(side_effect=[100000, 100])
+        self.lambda_context = types.SimpleNamespace()
+        self.lambda_context.aws_request_id = 'AWS_REQ_ID'
+        self.lambda_context.invoked_function_arn = 'arn:aws:lambda:us-west-2:000000000000:function:some_function'
+        self.lambda_context.get_remaining_time_in_millis = MagicMock(side_effect=[100000, 100])
 
         with patch('boto3.client'):
-            self.scheduler = module.Scheduler(self.custom_config)
+            self.scheduler = module.Scheduler(self.custom_config, context=self.lambda_context)
 
         self.scheduler.s3_client = MagicMock()
         self.scheduler.sns_client = MagicMock()
@@ -129,7 +129,7 @@ class Scheduler_UnitTestCase(unittest.TestCase):
         config['job_schema']['chunkable_attrs'] = [('bad_name_ending_with_s', {})]
 
         with patch('boto3.client'):
-            self.assertRaises(AssertionError, Scheduler, custom_config=config)
+            self.assertRaises(AssertionError, Scheduler, custom_config=config, context=self.lambda_context)
 
 
     def test_get_next_chunkable_attr(self):
@@ -146,13 +146,13 @@ class Scheduler_UnitTestCase(unittest.TestCase):
 
     def test__remote_queue_file(self):
         self.assertIn(f"{self.scheduler.config['s3_prefix'].strip('/')}", self.scheduler.remote_queue_file)
-        self.assertIn(module.lambda_context.aws_request_id, self.scheduler.remote_queue_file)
+        self.assertIn(self.lambda_context.aws_request_id, self.scheduler.remote_queue_file)
 
 
     def test__remote_queue_locked_file(self):
         self.assertIn(f"{self.scheduler.config['s3_prefix'].strip('/')}", self.scheduler.remote_queue_locked_file)
         self.assertIn('locked_', self.scheduler.remote_queue_locked_file)
-        self.assertIn(module.lambda_context.aws_request_id, self.scheduler.remote_queue_locked_file)
+        self.assertIn(self.lambda_context.aws_request_id, self.scheduler.remote_queue_locked_file)
 
 
     ### Tests of file operations ###
