diff --git a/formulaic/materializers/base.py b/formulaic/materializers/base.py
index bc7f7be..dd76082 100644
--- a/formulaic/materializers/base.py
+++ b/formulaic/materializers/base.py
@@ -295,7 +295,7 @@ class FormulaMaterializer(metaclass=InterfaceMeta):
             return values.get('__kind__') == 'categorical'
         return False
 
-    def _check_for_nulls(self, name, values, drop_rows):
+    def _check_for_nulls(self, name, values, na_action, drop_rows):
         pass  # pragma: no cover
 
     def _encode_evaled_factor(self, factor, encoder_state, drop_rows, reduced_rank=False):
diff --git a/formulaic/materializers/pandas.py b/formulaic/materializers/pandas.py
index 943e5cf..d9b9b44 100644
--- a/formulaic/materializers/pandas.py
+++ b/formulaic/materializers/pandas.py
@@ -16,6 +16,7 @@ class PandasMaterializer(FormulaMaterializer):
     REGISTRY_NAME = 'pandas'
     DEFAULT_FOR = ['pandas.core.frame.DataFrame']
 
+    @override
     def _init(self, sparse=False):
         self.config.sparse = sparse
 
diff --git a/formulaic/parser/parser.py b/formulaic/parser/parser.py
index 34e8a8e..dab6bc2 100644
--- a/formulaic/parser/parser.py
+++ b/formulaic/parser/parser.py
@@ -36,7 +36,7 @@ class FormulaParser:
             terms = arg.to_terms()
             if len(terms) > 1 or list(terms)[0] != '0':
                 raise FormulaParsingError("Unary negation is only implemented for '0', where it is substituted for '1'.")
-            return {Term(factors=[Factor('1', eval_method='literal')])}
+            return {Term(factors=[Factor('1', eval_method='literal')])}  # pragma: no cover; All zero handling is currently done in the token pre-processor.
 
         return [
             Operator("~", arity=2, precedence=-100, associativity=None, to_terms=formula_separator_expansion),
@@ -86,11 +86,21 @@ class FormulaParser:
                     tokens.insert(0, one)
                     tokens.insert(1, plus)
 
-        # Replace "0" with "-1"
+        # Replace all "0"s with "-1"
+        zero_index = -1
         try:
-            zero_index = tokens.index('0')
-            if tokens[zero_index - 1] == '+':
-                tokens[zero_index - 1] = minus
+            while True:
+                zero_index = tokens.index('0', zero_index + 1)
+                if zero_index - 1 < 0 or tokens[zero_index - 1] == '~':
+                    tokens.pop(zero_index)
+                    zero_index -= 1
+                    continue
+                elif tokens[zero_index - 1] == '+':
+                    tokens[zero_index - 1] = minus
+                elif tokens[zero_index - 1] == '-':
+                    tokens[zero_index - 1] = plus
+                else:
+                    raise FormulaParsingError(f"Unrecognised use of `0` at index: {tokens[zero_index-1].source_start}.")
                 tokens[zero_index] = one
         except ValueError:
             pass

